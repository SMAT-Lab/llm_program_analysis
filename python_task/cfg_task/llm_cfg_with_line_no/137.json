{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 198,
  "functions": [
    {
      "name": "check_media_exists",
      "type": "function",
      "start_line": 18,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 18,
          "line": "async def check_media_exists(user_id: str, filename: str) -> str | None:"
        },
        {
          "lineno": 19,
          "line": "    \"\"\""
        },
        {
          "lineno": 20,
          "line": "    Check if a media file exists in storage for the given user."
        },
        {
          "lineno": 21,
          "line": "    Tries both images and videos directories."
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 23,
          "line": "    Args:"
        },
        {
          "lineno": 24,
          "line": "        user_id (str): ID of the user who uploaded the file"
        },
        {
          "lineno": 25,
          "line": "        filename (str): Name of the file to check"
        },
        {
          "lineno": 26,
          "line": ""
        },
        {
          "lineno": 27,
          "line": "    Returns:"
        },
        {
          "lineno": 28,
          "line": "        str | None: URL of the blob if it exists, None otherwise"
        },
        {
          "lineno": 29,
          "line": "    \"\"\""
        },
        {
          "lineno": 30,
          "line": "    try:"
        },
        {
          "lineno": 31,
          "line": "        settings = Settings()"
        },
        {
          "lineno": 32,
          "line": "        storage_client = storage.Client()"
        },
        {
          "lineno": 33,
          "line": "        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)"
        },
        {
          "lineno": 34,
          "line": ""
        },
        {
          "lineno": 35,
          "line": "        # Check images"
        },
        {
          "lineno": 36,
          "line": "        image_path = f\"users/{user_id}/images/{filename}\""
        },
        {
          "lineno": 37,
          "line": "        image_blob = bucket.blob(image_path)"
        },
        {
          "lineno": 38,
          "line": "        if image_blob.exists():"
        },
        {
          "lineno": 39,
          "line": "            return image_blob.public_url"
        },
        {
          "lineno": 40,
          "line": ""
        },
        {
          "lineno": 41,
          "line": "        # Check videos"
        },
        {
          "lineno": 42,
          "line": "        video_path = f\"users/{user_id}/videos/{filename}\""
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 44,
          "line": "        video_blob = bucket.blob(video_path)"
        },
        {
          "lineno": 45,
          "line": "        if video_blob.exists():"
        },
        {
          "lineno": 46,
          "line": "            return video_blob.public_url"
        },
        {
          "lineno": 47,
          "line": ""
        },
        {
          "lineno": 48,
          "line": "        return None"
        },
        {
          "lineno": 49,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 50,
          "line": "        logger.error(f\"Error checking if media file exists: {str(e)}\")"
        },
        {
          "lineno": 51,
          "line": "        return None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 18,
          "end_line": 29,
          "label": "async def check_media_exists(user_id: str, filename: str) -> str | None:\n    \"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 30,
              "end_line": 33,
              "label": "try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 35,
                  "end_line": 39,
                  "label": "# Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 41,
                      "end_line": 46,
                      "label": "# Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 48,
                          "end_line": 48,
                          "label": "return None",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "start_line": 49,
              "end_line": 51,
              "label": "except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "upload_media",
      "type": "function",
      "start_line": 54,
      "end_line": 198,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 54,
          "line": "async def upload_media("
        },
        {
          "lineno": 55,
          "line": "    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False"
        },
        {
          "lineno": 56,
          "line": ") -> str:"
        },
        {
          "lineno": 57,
          "line": ""
        },
        {
          "lineno": 58,
          "line": "    # Get file content for deeper validation"
        },
        {
          "lineno": 59,
          "line": "    try:"
        },
        {
          "lineno": 60,
          "line": "        content = await file.read(1024)  # Read first 1KB for validation"
        },
        {
          "lineno": 61,
          "line": "        await file.seek(0)  # Reset file pointer"
        },
        {
          "lineno": 62,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 63,
          "line": "        logger.error(f\"Error reading file content: {str(e)}\")"
        },
        {
          "lineno": 64,
          "line": "        raise backend.server.v2.store.exceptions.FileReadError("
        },
        {
          "lineno": 65,
          "line": "            \"Failed to read file content\""
        },
        {
          "lineno": 66,
          "line": "        ) from e"
        },
        {
          "lineno": 67,
          "line": ""
        },
        {
          "lineno": 68,
          "line": "    # Validate file signature/magic bytes"
        },
        {
          "lineno": 69,
          "line": "    if file.content_type in ALLOWED_IMAGE_TYPES:"
        },
        {
          "lineno": 70,
          "line": "        # Check image file signatures"
        },
        {
          "lineno": 71,
          "line": "        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG"
        },
        {
          "lineno": 72,
          "line": "            if file.content_type != \"image/jpeg\":"
        },
        {
          "lineno": 73,
          "line": "                raise backend.server.v2.store.exceptions.InvalidFileTypeError("
        },
        {
          "lineno": 74,
          "line": "                    \"File signature does not match content type\""
        },
        {
          "lineno": 75,
          "line": "                )"
        },
        {
          "lineno": 76,
          "line": "        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG"
        },
        {
          "lineno": 77,
          "line": "            if file.content_type != \"image/png\":"
        },
        {
          "lineno": 78,
          "line": "                raise backend.server.v2.store.exceptions.InvalidFileTypeError("
        },
        {
          "lineno": 79,
          "line": "                    \"File signature does not match content type\""
        },
        {
          "lineno": 80,
          "line": "                )"
        },
        {
          "lineno": 81,
          "line": "        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF"
        },
        {
          "lineno": 82,
          "line": "            if file.content_type != \"image/gif\":"
        },
        {
          "lineno": 83,
          "line": "                raise backend.server.v2.store.exceptions.InvalidFileTypeError("
        },
        {
          "lineno": 84,
          "line": "                    \"File signature does not match content type\""
        },
        {
          "lineno": 85,
          "line": "                )"
        },
        {
          "lineno": 86,
          "line": "        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP"
        },
        {
          "lineno": 87,
          "line": "            if file.content_type != \"image/webp\":"
        },
        {
          "lineno": 88,
          "line": "                raise backend.server.v2.store.exceptions.InvalidFileTypeError("
        },
        {
          "lineno": 89,
          "line": "                    \"File signature does not match content type\""
        },
        {
          "lineno": 90,
          "line": "                )"
        },
        {
          "lineno": 91,
          "line": "        else:"
        },
        {
          "lineno": 92,
          "line": "            raise backend.server.v2.store.exceptions.InvalidFileTypeError("
        },
        {
          "lineno": 93,
          "line": "                \"Invalid image file signature\""
        },
        {
          "lineno": 94,
          "line": "            )"
        },
        {
          "lineno": 95,
          "line": ""
        },
        {
          "lineno": 96,
          "line": "    elif file.content_type in ALLOWED_VIDEO_TYPES:"
        },
        {
          "lineno": 97,
          "line": "        # Check video file signatures"
        },
        {
          "lineno": 98,
          "line": "        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4"
        },
        {
          "lineno": 99,
          "line": "            if file.content_type != \"video/mp4\":"
        },
        {
          "lineno": 100,
          "line": "                raise backend.server.v2.store.exceptions.InvalidFileTypeError("
        },
        {
          "lineno": 101,
          "line": "                    \"File signature does not match content type\""
        },
        {
          "lineno": 102,
          "line": "                )"
        },
        {
          "lineno": 103,
          "line": "        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM"
        },
        {
          "lineno": 104,
          "line": "            if file.content_type != \"video/webm\":"
        },
        {
          "lineno": 105,
          "line": "                raise backend.server.v2.store.exceptions.InvalidFileTypeError("
        },
        {
          "lineno": 106,
          "line": "                    \"File signature does not match content type\""
        },
        {
          "lineno": 107,
          "line": "                )"
        },
        {
          "lineno": 108,
          "line": "        else:"
        },
        {
          "lineno": 109,
          "line": "            raise backend.server.v2.store.exceptions.InvalidFileTypeError("
        },
        {
          "lineno": 110,
          "line": "                \"Invalid video file signature\""
        },
        {
          "lineno": 111,
          "line": "            )"
        },
        {
          "lineno": 112,
          "line": ""
        },
        {
          "lineno": 113,
          "line": "    settings = Settings()"
        },
        {
          "lineno": 114,
          "line": ""
        },
        {
          "lineno": 115,
          "line": "    # Check required settings first before doing any file processing"
        },
        {
          "lineno": 116,
          "line": "    if not settings.config.media_gcs_bucket_name:"
        },
        {
          "lineno": 117,
          "line": "        logger.error(\"Missing GCS bucket name setting\")"
        },
        {
          "lineno": 118,
          "line": "        raise backend.server.v2.store.exceptions.StorageConfigError("
        },
        {
          "lineno": 119,
          "line": "            \"Missing storage bucket configuration\""
        },
        {
          "lineno": 120,
          "line": "        )"
        },
        {
          "lineno": 121,
          "line": ""
        },
        {
          "lineno": 122,
          "line": "    try:"
        },
        {
          "lineno": 123,
          "line": "        # Validate file type"
        },
        {
          "lineno": 124,
          "line": "        content_type = file.content_type"
        },
        {
          "lineno": 125,
          "line": "        if content_type is None:"
        },
        {
          "lineno": 126,
          "line": "            content_type = \"image/jpeg\""
        },
        {
          "lineno": 127,
          "line": ""
        },
        {
          "lineno": 128,
          "line": "        if ("
        },
        {
          "lineno": 129,
          "line": "            content_type not in ALLOWED_IMAGE_TYPES"
        },
        {
          "lineno": 130,
          "line": "            and content_type not in ALLOWED_VIDEO_TYPES"
        },
        {
          "lineno": 131,
          "line": "        ):"
        },
        {
          "lineno": 132,
          "line": "            logger.warning(f\"Invalid file type attempted: {content_type}\")"
        },
        {
          "lineno": 133,
          "line": "            raise backend.server.v2.store.exceptions.InvalidFileTypeError("
        },
        {
          "lineno": 134,
          "line": "                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\""
        },
        {
          "lineno": 135,
          "line": "            )"
        },
        {
          "lineno": 136,
          "line": ""
        },
        {
          "lineno": 137,
          "line": "        # Validate file size"
        },
        {
          "lineno": 138,
          "line": "        file_size = 0"
        },
        {
          "lineno": 139,
          "line": "        chunk_size = 8192  # 8KB chunks"
        },
        {
          "lineno": 140,
          "line": ""
        },
        {
          "lineno": 141,
          "line": "        try:"
        },
        {
          "lineno": 142,
          "line": "            while chunk := await file.read(chunk_size):"
        },
        {
          "lineno": 143,
          "line": "                file_size += len(chunk)"
        },
        {
          "lineno": 144,
          "line": "                if file_size > MAX_FILE_SIZE:"
        },
        {
          "lineno": 145,
          "line": "                    logger.warning(f\"File size too large: {file_size} bytes\")"
        },
        {
          "lineno": 146,
          "line": "                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError("
        },
        {
          "lineno": 147,
          "line": "                        \"File too large. Maximum size is 50MB\""
        },
        {
          "lineno": 148,
          "line": "                    )"
        },
        {
          "lineno": 149,
          "line": "        except backend.server.v2.store.exceptions.FileSizeTooLargeError:"
        },
        {
          "lineno": 150,
          "line": "            raise"
        },
        {
          "lineno": 151,
          "line": "        except Exception as e:"
        },
        {
          "lineno": 152,
          "line": "            logger.error(f\"Error reading file chunks: {str(e)}\")"
        },
        {
          "lineno": 153,
          "line": "            raise backend.server.v2.store.exceptions.FileReadError("
        },
        {
          "lineno": 154,
          "line": "                \"Failed to read uploaded file\""
        },
        {
          "lineno": 155,
          "line": "            ) from e"
        },
        {
          "lineno": 156,
          "line": ""
        },
        {
          "lineno": 157,
          "line": "        # Reset file pointer"
        },
        {
          "lineno": 158,
          "line": "        await file.seek(0)"
        },
        {
          "lineno": 159,
          "line": ""
        },
        {
          "lineno": 160,
          "line": "        # Generate unique filename"
        },
        {
          "lineno": 161,
          "line": "        filename = file.filename or \"\""
        },
        {
          "lineno": 162,
          "line": "        file_ext = os.path.splitext(filename)[1].lower()"
        },
        {
          "lineno": 163,
          "line": "        if use_file_name:"
        },
        {
          "lineno": 164,
          "line": "            unique_filename = filename"
        },
        {
          "lineno": 165,
          "line": "        else:"
        },
        {
          "lineno": 166,
          "line": "            unique_filename = f\"{uuid.uuid4()}{file_ext}\""
        },
        {
          "lineno": 167,
          "line": ""
        },
        {
          "lineno": 168,
          "line": "        # Construct storage path"
        },
        {
          "lineno": 169,
          "line": "        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\""
        },
        {
          "lineno": 170,
          "line": "        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\""
        },
        {
          "lineno": 171,
          "line": ""
        },
        {
          "lineno": 172,
          "line": "        try:"
        },
        {
          "lineno": 173,
          "line": "            storage_client = storage.Client()"
        },
        {
          "lineno": 174,
          "line": "            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)"
        },
        {
          "lineno": 175,
          "line": "            blob = bucket.blob(storage_path)"
        },
        {
          "lineno": 176,
          "line": "            blob.content_type = content_type"
        },
        {
          "lineno": 177,
          "line": ""
        },
        {
          "lineno": 178,
          "line": "            file_bytes = await file.read()"
        },
        {
          "lineno": 179,
          "line": "            blob.upload_from_string(file_bytes, content_type=content_type)"
        },
        {
          "lineno": 180,
          "line": ""
        },
        {
          "lineno": 181,
          "line": "            public_url = blob.public_url"
        },
        {
          "lineno": 182,
          "line": ""
        },
        {
          "lineno": 183,
          "line": "            logger.info(f\"Successfully uploaded file to: {storage_path}\")"
        },
        {
          "lineno": 184,
          "line": "            return public_url"
        },
        {
          "lineno": 185,
          "line": ""
        },
        {
          "lineno": 186,
          "line": "        except Exception as e:"
        },
        {
          "lineno": 187,
          "line": "            logger.error(f\"GCS storage error: {str(e)}\")"
        },
        {
          "lineno": 188,
          "line": "            raise backend.server.v2.store.exceptions.StorageUploadError("
        },
        {
          "lineno": 189,
          "line": "                \"Failed to upload file to storage\""
        },
        {
          "lineno": 190,
          "line": "            ) from e"
        },
        {
          "lineno": 191,
          "line": ""
        },
        {
          "lineno": 192,
          "line": "    except backend.server.v2.store.exceptions.MediaUploadError:"
        },
        {
          "lineno": 193,
          "line": "        raise"
        },
        {
          "lineno": 194,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 195,
          "line": "        logger.exception(\"Unexpected error in upload_media\")"
        },
        {
          "lineno": 196,
          "line": "        raise backend.server.v2.store.exceptions.MediaUploadError("
        },
        {
          "lineno": 197,
          "line": "            \"Unexpected error during media upload\""
        },
        {
          "lineno": 198,
          "line": "        ) from e"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 54,
          "end_line": 58,
          "label": "async def upload_media(\n    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False\n) -> str:\n\n    # Get file content for deeper validation",
          "successors": [
            {
              "id": 2,
              "start_line": 59,
              "end_line": 61,
              "label": "try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer",
              "successors": [
                {
                  "id": 3,
                  "start_line": 68,
                  "end_line": 68,
                  "label": "# Validate file signature/magic bytes",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 69,
                      "end_line": 94,
                      "label": "if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 113,
                          "end_line": 115,
                          "label": "settings = Settings()\n\n    # Check required settings first before doing any file processing",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 116,
                              "end_line": 120,
                              "label": "if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 122,
                                  "end_line": 157,
                                  "label": "try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 160,
                                      "end_line": 183,
                                      "label": "# Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "start_line": 96,
                      "end_line": 111,
                      "label": "elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 113,
                          "end_line": 115,
                          "label": "settings = Settings()\n\n    # Check required settings first before doing any file processing",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 10,
              "start_line": 62,
              "end_line": 66,
              "label": "except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e",
              "successors": [
                {
                  "id": 11,
                  "start_line": 192,
                  "end_line": 198,
                  "label": "except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n    except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "import os"
    },
    {
      "lineno": 3,
      "line": "import uuid"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "import fastapi"
    },
    {
      "lineno": 6,
      "line": "from google.cloud import storage"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "import backend.server.v2.store.exceptions"
    },
    {
      "lineno": 9,
      "line": "from backend.util.settings import Settings"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "ALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}"
    },
    {
      "lineno": 14,
      "line": "ALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\"}"
    },
    {
      "lineno": 15,
      "line": "MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB"
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 53,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "import logging\nimport os\nimport uuid",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 5,
      "end_line": 9,
      "label": "import fastapi\nfrom google.cloud import storage\nimport backend.server.v2.store.exceptions\nfrom backend.util.settings import Settings",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 11,
      "end_line": 11,
      "label": "logger = logging.getLogger(__name__)",
      "successors": []
    },
    {
      "id": 4,
      "start_line": 13,
      "end_line": 15,
      "label": "ALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}\nALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\"}\nMAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB",
      "successors": []
    }
  ]
}