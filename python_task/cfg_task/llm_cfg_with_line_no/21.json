{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 670,
  "functions": [
    {
      "name": "execution_manager_client",
      "type": "function",
      "start_line": 55,
      "end_line": 56,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 55,
          "line": "def execution_manager_client() -> ExecutionManager:"
        },
        {
          "lineno": 56,
          "line": "    return get_service_client(ExecutionManager)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 55,
          "end_line": 56,
          "label": "def execution_manager_client() -> ExecutionManager:\n    return get_service_client(ExecutionManager)",
          "successors": []
        }
      ]
    },
    {
      "name": "execution_scheduler_client",
      "type": "function",
      "start_line": 60,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 60,
          "line": "def execution_scheduler_client() -> ExecutionScheduler:"
        },
        {
          "lineno": 61,
          "line": "    return get_service_client(ExecutionScheduler)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 60,
          "end_line": 61,
          "label": "def execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_or_create_user_route",
      "type": "function",
      "start_line": 94,
      "end_line": 96,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 94,
          "line": "async def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):"
        },
        {
          "lineno": 95,
          "line": "    user = await get_or_create_user(user_data)"
        },
        {
          "lineno": 96,
          "line": "    return user.model_dump()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 94,
          "end_line": 96,
          "label": "async def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n    user = await get_or_create_user(user_data)\n    return user.model_dump()",
          "successors": []
        }
      ]
    },
    {
      "name": "get_graph_blocks",
      "type": "function",
      "start_line": 105,
      "end_line": 108,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 105,
          "line": "def get_graph_blocks() -> Sequence[dict[Any, Any]]:"
        },
        {
          "lineno": 106,
          "line": "    blocks = [block() for block in backend.data.block.get_blocks().values()]"
        },
        {
          "lineno": 107,
          "line": "    costs = get_block_costs()"
        },
        {
          "lineno": 108,
          "line": "    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 105,
          "end_line": 108,
          "label": "def get_graph_blocks() -> Sequence[dict[Any, Any]]:\n    blocks = [block() for block in backend.data.block.get_blocks().values()]\n    costs = get_block_costs()\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]",
          "successors": []
        }
      ]
    },
    {
      "name": "execute_graph_block",
      "type": "function",
      "start_line": 116,
      "end_line": 124,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 116,
          "line": "def execute_graph_block(block_id: str, data: BlockInput) -> CompletedBlockOutput:"
        },
        {
          "lineno": 117,
          "line": "    obj = backend.data.block.get_block(block_id)"
        },
        {
          "lineno": 118,
          "line": "    if not obj:"
        },
        {
          "lineno": 119,
          "line": "        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")"
        },
        {
          "lineno": 120,
          "line": ""
        },
        {
          "lineno": 121,
          "line": "    output = defaultdict(list)"
        },
        {
          "lineno": 122,
          "line": "    for name, data in obj.execute(data):"
        },
        {
          "lineno": 123,
          "line": "        output[name].append(data)"
        },
        {
          "lineno": 124,
          "line": "    return output"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 116,
          "end_line": 116,
          "label": "def execute_graph_block(block_id: str, data: BlockInput) -> CompletedBlockOutput:",
          "successors": [
            {
              "id": 2,
              "start_line": 117,
              "end_line": 118,
              "label": "    obj = backend.data.block.get_block(block_id)\n    if not obj:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 119,
                  "end_line": 119,
                  "label": "        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 121,
                  "end_line": 124,
                  "label": "    output = defaultdict(list)\n    for name, data in obj.execute(data):\n        output[name].append(data)\n    return output",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_user_credits",
      "type": "function",
      "start_line": 133,
      "end_line": 137,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 133,
          "line": "async def get_user_credits("
        },
        {
          "lineno": 134,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 135,
          "line": ") -> dict[str, int]:"
        },
        {
          "lineno": 136,
          "line": "    # Credits can go negative, so ensure it's at least 0 for user to see."
        },
        {
          "lineno": 137,
          "line": "    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 133,
          "end_line": 137,
          "label": "async def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}",
          "successors": []
        }
      ]
    },
    {
      "name": "get_graphs",
      "type": "function",
      "start_line": 150,
      "end_line": 153,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 150,
          "line": "async def get_graphs("
        },
        {
          "lineno": 151,
          "line": "    user_id: Annotated[str, Depends(get_user_id)]"
        },
        {
          "lineno": 152,
          "line": ") -> Sequence[graph_db.GraphModel]:"
        },
        {
          "lineno": 153,
          "line": "    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 150,
          "end_line": 152,
          "label": "async def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:",
          "successors": [
            {
              "id": 2,
              "start_line": 153,
              "end_line": 153,
              "label": "return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_graph",
      "type": "function",
      "start_line": 164,
      "end_line": 175,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 164,
          "line": "async def get_graph("
        },
        {
          "lineno": 165,
          "line": "    graph_id: str,"
        },
        {
          "lineno": 166,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 167,
          "line": "    version: int | None = None,"
        },
        {
          "lineno": 168,
          "line": "    hide_credentials: bool = False,"
        },
        {
          "lineno": 169,
          "line": ") -> graph_db.GraphModel:"
        },
        {
          "lineno": 170,
          "line": "    graph = await graph_db.get_graph("
        },
        {
          "lineno": 171,
          "line": "        graph_id, version, user_id=user_id, for_export=hide_credentials"
        },
        {
          "lineno": 172,
          "line": "    )"
        },
        {
          "lineno": 173,
          "line": "    if not graph:"
        },
        {
          "lineno": 174,
          "line": "        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")"
        },
        {
          "lineno": 175,
          "line": "    return graph"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 164,
          "end_line": 172,
          "label": "async def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 173,
              "end_line": 174,
              "label": "if not graph:\n    raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 175,
                  "end_line": 175,
                  "label": "return graph",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 175,
              "end_line": 175,
              "label": "return graph",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_graph_all_versions",
      "type": "function",
      "start_line": 188,
      "end_line": 194,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 188,
          "line": "async def get_graph_all_versions("
        },
        {
          "lineno": 189,
          "line": "    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]"
        },
        {
          "lineno": 190,
          "line": ") -> Sequence[graph_db.GraphModel]:"
        },
        {
          "lineno": 191,
          "line": "    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)"
        },
        {
          "lineno": 192,
          "line": "    if not graphs:"
        },
        {
          "lineno": 193,
          "line": "        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")"
        },
        {
          "lineno": 194,
          "line": "    return graphs"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 188,
          "end_line": 190,
          "label": "async def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]) -> Sequence[graph_db.GraphModel]:",
          "successors": [
            {
              "id": 2,
              "start_line": 191,
              "end_line": 192,
              "label": "graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\nif not graphs:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 193,
                  "end_line": 193,
                  "label": "raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 194,
                  "end_line": 194,
                  "label": "return graphs",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "create_new_graph",
      "type": "function",
      "start_line": 200,
      "end_line": 203,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 200,
          "line": "async def create_new_graph("
        },
        {
          "lineno": 201,
          "line": "    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]"
        },
        {
          "lineno": 202,
          "line": ") -> graph_db.GraphModel:"
        },
        {
          "lineno": 203,
          "line": "    return await do_create_graph(create_graph, is_template=False, user_id=user_id)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 200,
          "end_line": 203,
          "label": "async def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)",
          "successors": []
        }
      ]
    },
    {
      "name": "do_create_graph",
      "type": "function",
      "start_line": 206,
      "end_line": 242,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 206,
          "line": "async def do_create_graph("
        },
        {
          "lineno": 207,
          "line": "    create_graph: CreateGraph,"
        },
        {
          "lineno": 208,
          "line": "    is_template: bool,"
        },
        {
          "lineno": 209,
          "line": "    # user_id doesn't have to be annotated like on other endpoints,"
        },
        {
          "lineno": 210,
          "line": "    # because create_graph isn't used directly as an endpoint"
        },
        {
          "lineno": 211,
          "line": "    user_id: str,"
        },
        {
          "lineno": 212,
          "line": ") -> graph_db.GraphModel:"
        },
        {
          "lineno": 213,
          "line": "    if create_graph.graph:"
        },
        {
          "lineno": 214,
          "line": "        graph = graph_db.make_graph_model(create_graph.graph, user_id)"
        },
        {
          "lineno": 215,
          "line": "    elif create_graph.template_id:"
        },
        {
          "lineno": 216,
          "line": "        # Create a new graph from a template"
        },
        {
          "lineno": 217,
          "line": "        graph = await graph_db.get_graph("
        },
        {
          "lineno": 218,
          "line": "            create_graph.template_id,"
        },
        {
          "lineno": 219,
          "line": "            create_graph.template_version,"
        },
        {
          "lineno": 220,
          "line": "            template=True,"
        },
        {
          "lineno": 221,
          "line": "            user_id=user_id,"
        },
        {
          "lineno": 222,
          "line": "        )"
        },
        {
          "lineno": 223,
          "line": "        if not graph:"
        },
        {
          "lineno": 224,
          "line": "            raise HTTPException("
        },
        {
          "lineno": 225,
          "line": "                400, detail=f\"Template #{create_graph.template_id} not found\""
        },
        {
          "lineno": 226,
          "line": "            )"
        },
        {
          "lineno": 227,
          "line": "        graph.version = 1"
        },
        {
          "lineno": 228,
          "line": "    else:"
        },
        {
          "lineno": 229,
          "line": "        raise HTTPException("
        },
        {
          "lineno": 230,
          "line": "            status_code=400, detail=\"Either graph or template_id must be provided.\""
        },
        {
          "lineno": 231,
          "line": "        )"
        },
        {
          "lineno": 232,
          "line": ""
        },
        {
          "lineno": 233,
          "line": "    graph.is_template = is_template"
        },
        {
          "lineno": 234,
          "line": "    graph.is_active = not is_template"
        },
        {
          "lineno": 235,
          "line": "    graph.reassign_ids(user_id=user_id, reassign_graph_id=True)"
        },
        {
          "lineno": 236,
          "line": ""
        },
        {
          "lineno": 237,
          "line": "    graph = await graph_db.create_graph(graph, user_id=user_id)"
        },
        {
          "lineno": 238,
          "line": "    graph = await on_graph_activate("
        },
        {
          "lineno": 239,
          "line": "        graph,"
        },
        {
          "lineno": 240,
          "line": "        get_credentials=lambda id: integration_creds_manager.get(user_id, id),"
        },
        {
          "lineno": 241,
          "line": "    )"
        },
        {
          "lineno": 242,
          "line": "    return graph"
        }
      ],
      "blocks": []
    },
    {
      "name": "delete_graph",
      "type": "function",
      "start_line": 248,
      "end_line": 258,
      "functions": [
        {
          "name": "get_credentials",
          "type": "function",
          "start_line": 253,
          "end_line": 254,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 253,
              "line": "        def get_credentials(credentials_id: str) -> \"Credentials | None\":"
            },
            {
              "lineno": 254,
              "line": "            return integration_creds_manager.get(user_id, credentials_id)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 253,
              "end_line": 254,
              "label": "        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 248,
          "line": "async def delete_graph("
        },
        {
          "lineno": 249,
          "line": "    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]"
        },
        {
          "lineno": 250,
          "line": ") -> DeleteGraphResponse:"
        },
        {
          "lineno": 251,
          "line": "    if active_version := await graph_db.get_graph(graph_id, user_id=user_id):"
        },
        {
          "lineno": 252,
          "line": ""
        },
        {
          "lineno": 255,
          "line": ""
        },
        {
          "lineno": 256,
          "line": "        await on_graph_deactivate(active_version, get_credentials)"
        },
        {
          "lineno": 257,
          "line": ""
        },
        {
          "lineno": 258,
          "line": "    return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 248,
          "end_line": 250,
          "label": "async def delete_graph(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]) -> DeleteGraphResponse:",
          "successors": [
            {
              "id": 2,
              "start_line": 251,
              "end_line": 251,
              "label": "if active_version := await graph_db.get_graph(graph_id, user_id=user_id):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 256,
                  "end_line": 256,
                  "label": "await on_graph_deactivate(active_version, get_credentials)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 258,
                      "end_line": 258,
                      "label": "return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 258,
                  "end_line": 258,
                  "label": "return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "update_graph",
      "type": "function",
      "start_line": 269,
      "end_line": 320,
      "functions": [
        {
          "name": "get_credentials",
          "type": "function",
          "start_line": 301,
          "end_line": 302,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 301,
              "line": "        def get_credentials(credentials_id: str) -> \"Credentials | None\":"
            },
            {
              "lineno": 302,
              "line": "            return integration_creds_manager.get(user_id, credentials_id)"
            }
          ],
          "blocks": []
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 269,
          "line": "async def update_graph("
        },
        {
          "lineno": 270,
          "line": "    graph_id: str,"
        },
        {
          "lineno": 271,
          "line": "    graph: graph_db.Graph,"
        },
        {
          "lineno": 272,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 273,
          "line": ") -> graph_db.GraphModel:"
        },
        {
          "lineno": 274,
          "line": "    # Sanity check"
        },
        {
          "lineno": 275,
          "line": "    if graph.id and graph.id != graph_id:"
        },
        {
          "lineno": 276,
          "line": "        raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")"
        },
        {
          "lineno": 277,
          "line": ""
        },
        {
          "lineno": 278,
          "line": "    # Determine new version"
        },
        {
          "lineno": 279,
          "line": "    existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)"
        },
        {
          "lineno": 280,
          "line": "    if not existing_versions:"
        },
        {
          "lineno": 281,
          "line": "        raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")"
        },
        {
          "lineno": 282,
          "line": "    latest_version_number = max(g.version for g in existing_versions)"
        },
        {
          "lineno": 283,
          "line": "    graph.version = latest_version_number + 1"
        },
        {
          "lineno": 284,
          "line": ""
        },
        {
          "lineno": 285,
          "line": "    latest_version_graph = next("
        },
        {
          "lineno": 286,
          "line": "        v for v in existing_versions if v.version == latest_version_number"
        },
        {
          "lineno": 287,
          "line": "    )"
        },
        {
          "lineno": 288,
          "line": "    current_active_version = next((v for v in existing_versions if v.is_active), None)"
        },
        {
          "lineno": 289,
          "line": "    if latest_version_graph.is_template != graph.is_template:"
        },
        {
          "lineno": 290,
          "line": "        raise HTTPException("
        },
        {
          "lineno": 291,
          "line": "            400, detail=\"Changing is_template on an existing graph is forbidden\""
        },
        {
          "lineno": 292,
          "line": "        )"
        },
        {
          "lineno": 293,
          "line": "    graph.is_active = not graph.is_template"
        },
        {
          "lineno": 294,
          "line": "    graph = graph_db.make_graph_model(graph, user_id)"
        },
        {
          "lineno": 295,
          "line": "    graph.reassign_ids(user_id=user_id)"
        },
        {
          "lineno": 296,
          "line": ""
        },
        {
          "lineno": 297,
          "line": "    new_graph_version = await graph_db.create_graph(graph, user_id=user_id)"
        },
        {
          "lineno": 298,
          "line": ""
        },
        {
          "lineno": 299,
          "line": "    if new_graph_version.is_active:"
        },
        {
          "lineno": 300,
          "line": ""
        },
        {
          "lineno": 303,
          "line": ""
        },
        {
          "lineno": 304,
          "line": "        # Handle activation of the new graph first to ensure continuity"
        },
        {
          "lineno": 305,
          "line": "        new_graph_version = await on_graph_activate("
        },
        {
          "lineno": 306,
          "line": "            new_graph_version,"
        },
        {
          "lineno": 307,
          "line": "            get_credentials=get_credentials,"
        },
        {
          "lineno": 308,
          "line": "        )"
        },
        {
          "lineno": 309,
          "line": "        # Ensure new version is the only active version"
        },
        {
          "lineno": 310,
          "line": "        await graph_db.set_graph_active_version("
        },
        {
          "lineno": 311,
          "line": "            graph_id=graph_id, version=new_graph_version.version, user_id=user_id"
        },
        {
          "lineno": 312,
          "line": "        )"
        },
        {
          "lineno": 313,
          "line": "        if current_active_version:"
        },
        {
          "lineno": 314,
          "line": "            # Handle deactivation of the previously active version"
        },
        {
          "lineno": 315,
          "line": "            await on_graph_deactivate("
        },
        {
          "lineno": 316,
          "line": "                current_active_version,"
        },
        {
          "lineno": 317,
          "line": "                get_credentials=get_credentials,"
        },
        {
          "lineno": 318,
          "line": "            )"
        },
        {
          "lineno": 319,
          "line": ""
        },
        {
          "lineno": 320,
          "line": "    return new_graph_version"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 269,
          "end_line": 274,
          "label": [
            "async def update_graph(",
            "    graph_id: str,",
            "    graph: graph_db.Graph,",
            "    user_id: Annotated[str, Depends(get_user_id)],",
            ") -> graph_db.GraphModel:",
            "    # Sanity check"
          ],
          "successors": [
            {
              "id": 2,
              "start_line": 275,
              "end_line": 276,
              "label": [
                "if graph.id and graph.id != graph_id:",
                "    raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")"
              ],
              "successors": [
                {
                  "id": 3,
                  "start_line": 278,
                  "end_line": 279,
                  "label": [
                    "# Determine new version",
                    "existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)"
                  ],
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 280,
                      "end_line": 281,
                      "label": [
                        "if not existing_versions:",
                        "    raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")"
                      ],
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 282,
                          "end_line": 288,
                          "label": [
                            "latest_version_number = max(g.version for g in existing_versions)",
                            "graph.version = latest_version_number + 1",
                            "",
                            "latest_version_graph = next(",
                            "    v for v in existing_versions if v.version == latest_version_number",
                            ")",
                            "current_active_version = next((v for v in existing_versions if v.is_active), None)"
                          ],
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 289,
                              "end_line": 292,
                              "label": [
                                "if latest_version_graph.is_template != graph.is_template:",
                                "    raise HTTPException(",
                                "        400, detail=\"Changing is_template on an existing graph is forbidden\"",
                                "    )"
                              ],
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 293,
                                  "end_line": 320,
                                  "label": [
                                    "graph.is_active = not graph.is_template",
                                    "graph = graph_db.make_graph_model(graph, user_id)",
                                    "graph.reassign_ids(user_id=user_id)",
                                    "",
                                    "new_graph_version = await graph_db.create_graph(graph, user_id=user_id)",
                                    "",
                                    "if new_graph_version.is_active:",
                                    "",
                                    "    # Handle activation of the new graph first to ensure continuity",
                                    "    new_graph_version = await on_graph_activate(",
                                    "        new_graph_version,",
                                    "        get_credentials=get_credentials,",
                                    "    )",
                                    "    # Ensure new version is the only active version",
                                    "    await graph_db.set_graph_active_version(",
                                    "        graph_id=graph_id, version=new_graph_version.version, user_id=user_id",
                                    "    )",
                                    "    if current_active_version:",
                                    "        # Handle deactivation of the previously active version",
                                    "        await on_graph_deactivate(",
                                    "            current_active_version,",
                                    "            get_credentials=get_credentials,",
                                    "        )",
                                    "",
                                    "return new_graph_version"
                                  ],
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "set_graph_active_version",
      "type": "function",
      "start_line": 328,
      "end_line": 361,
      "functions": [
        {
          "name": "get_credentials",
          "type": "function",
          "start_line": 342,
          "end_line": 343,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 342,
              "line": "    def get_credentials(credentials_id: str) -> \"Credentials | None\":"
            },
            {
              "lineno": 343,
              "line": "        return integration_creds_manager.get(user_id, credentials_id)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 342,
              "end_line": 343,
              "label": "    def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 328,
          "line": "async def set_graph_active_version("
        },
        {
          "lineno": 329,
          "line": "    graph_id: str,"
        },
        {
          "lineno": 330,
          "line": "    request_body: SetGraphActiveVersion,"
        },
        {
          "lineno": 331,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 332,
          "line": "):"
        },
        {
          "lineno": 333,
          "line": "    new_active_version = request_body.active_graph_version"
        },
        {
          "lineno": 334,
          "line": "    new_active_graph = await graph_db.get_graph("
        },
        {
          "lineno": 335,
          "line": "        graph_id, new_active_version, user_id=user_id"
        },
        {
          "lineno": 336,
          "line": "    )"
        },
        {
          "lineno": 337,
          "line": "    if not new_active_graph:"
        },
        {
          "lineno": 338,
          "line": "        raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")"
        },
        {
          "lineno": 339,
          "line": ""
        },
        {
          "lineno": 340,
          "line": "    current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)"
        },
        {
          "lineno": 341,
          "line": ""
        },
        {
          "lineno": 344,
          "line": ""
        },
        {
          "lineno": 345,
          "line": "    # Handle activation of the new graph first to ensure continuity"
        },
        {
          "lineno": 346,
          "line": "    await on_graph_activate("
        },
        {
          "lineno": 347,
          "line": "        new_active_graph,"
        },
        {
          "lineno": 348,
          "line": "        get_credentials=get_credentials,"
        },
        {
          "lineno": 349,
          "line": "    )"
        },
        {
          "lineno": 350,
          "line": "    # Ensure new version is the only active version"
        },
        {
          "lineno": 351,
          "line": "    await graph_db.set_graph_active_version("
        },
        {
          "lineno": 352,
          "line": "        graph_id=graph_id,"
        },
        {
          "lineno": 353,
          "line": "        version=new_active_version,"
        },
        {
          "lineno": 354,
          "line": "        user_id=user_id,"
        },
        {
          "lineno": 355,
          "line": "    )"
        },
        {
          "lineno": 356,
          "line": "    if current_active_graph and current_active_graph.version != new_active_version:"
        },
        {
          "lineno": 357,
          "line": "        # Handle deactivation of the previously active version"
        },
        {
          "lineno": 358,
          "line": "        await on_graph_deactivate("
        },
        {
          "lineno": 359,
          "line": "            current_active_graph,"
        },
        {
          "lineno": 360,
          "line": "            get_credentials=get_credentials,"
        },
        {
          "lineno": 361,
          "line": "        )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 328,
          "end_line": 336,
          "label": "async def set_graph_active_version(\n    graph_id: str,\n    request_body: SetGraphActiveVersion,\n    user_id: Annotated[str, Depends(get_user_id)],\n):\n    new_active_version = request_body.active_graph_version\n    new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 337,
              "end_line": 338,
              "label": "if not new_active_graph:\n    raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 340,
                  "end_line": 340,
                  "label": "current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 346,
                      "end_line": 349,
                      "label": "await on_graph_activate(\n    new_active_graph,\n    get_credentials=get_credentials,\n)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 351,
                          "end_line": 355,
                          "label": "await graph_db.set_graph_active_version(\n    graph_id=graph_id,\n    version=new_active_version,\n    user_id=user_id,\n)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 356,
                              "end_line": 361,
                              "label": "if current_active_graph and current_active_graph.version != new_active_version:\n    # Handle deactivation of the previously active version\n    await on_graph_deactivate(\n        current_active_graph,\n        get_credentials=get_credentials,\n)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "execute_graph",
      "type": "function",
      "start_line": 369,
      "end_line": 381,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 369,
          "line": "def execute_graph("
        },
        {
          "lineno": 370,
          "line": "    graph_id: str,"
        },
        {
          "lineno": 371,
          "line": "    node_input: dict[Any, Any],"
        },
        {
          "lineno": 372,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 373,
          "line": ") -> dict[str, Any]:  # FIXME: add proper return type"
        },
        {
          "lineno": 374,
          "line": "    try:"
        },
        {
          "lineno": 375,
          "line": "        graph_exec = execution_manager_client().add_execution("
        },
        {
          "lineno": 376,
          "line": "            graph_id, node_input, user_id=user_id"
        },
        {
          "lineno": 377,
          "line": "        )"
        },
        {
          "lineno": 378,
          "line": "        return {\"id\": graph_exec.graph_exec_id}"
        },
        {
          "lineno": 379,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 380,
          "line": "        msg = e.__str__().encode().decode(\"unicode_escape\")"
        },
        {
          "lineno": 381,
          "line": "        raise HTTPException(status_code=400, detail=msg)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 369,
          "end_line": 373,
          "label": "def execute_graph(\n    graph_id: str,\n    node_input: dict[Any, Any],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, Any]:  # FIXME: add proper return type",
          "successors": [
            {
              "id": 2,
              "start_line": 374,
              "end_line": 378,
              "label": "try:\n    graph_exec = execution_manager_client().add_execution(\n        graph_id, node_input, user_id=user_id\n    )\n    return {\"id\": graph_exec.graph_exec_id}",
              "successors": [
                {
                  "id": 3,
                  "start_line": 379,
                  "end_line": 381,
                  "label": "except Exception as e:\n    msg = e.__str__().encode().decode(\"unicode_escape\")\n    raise HTTPException(status_code=400, detail=msg)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "stop_graph_run",
      "type": "function",
      "start_line": 389,
      "end_line": 400,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 389,
          "line": "async def stop_graph_run("
        },
        {
          "lineno": 390,
          "line": "    graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]"
        },
        {
          "lineno": 391,
          "line": ") -> Sequence[execution_db.ExecutionResult]:"
        },
        {
          "lineno": 392,
          "line": "    if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):"
        },
        {
          "lineno": 393,
          "line": "        raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")"
        },
        {
          "lineno": 394,
          "line": ""
        },
        {
          "lineno": 395,
          "line": "    await asyncio.to_thread("
        },
        {
          "lineno": 396,
          "line": "        lambda: execution_manager_client().cancel_execution(graph_exec_id)"
        },
        {
          "lineno": 397,
          "line": "    )"
        },
        {
          "lineno": 398,
          "line": ""
        },
        {
          "lineno": 399,
          "line": "    # Retrieve & return canceled graph execution in its final state"
        },
        {
          "lineno": 400,
          "line": "    return await execution_db.get_execution_results(graph_exec_id)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 389,
          "end_line": 391,
          "label": "async def stop_graph_run(\n    graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]) -> Sequence[execution_db.ExecutionResult]:",
          "successors": [
            {
              "id": 2,
              "start_line": 392,
              "end_line": 393,
              "label": "if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\n    raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 395,
                  "end_line": 397,
                  "label": "await asyncio.to_thread(\n    lambda: execution_manager_client().cancel_execution(graph_exec_id)\n)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 400,
                      "end_line": 400,
                      "label": "return await execution_db.get_execution_results(graph_exec_id)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_executions",
      "type": "function",
      "start_line": 408,
      "end_line": 411,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 408,
          "line": "async def get_executions("
        },
        {
          "lineno": 409,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 410,
          "line": ") -> list[graph_db.GraphExecution]:"
        },
        {
          "lineno": 411,
          "line": "    return await graph_db.get_executions(user_id=user_id)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 408,
          "end_line": 411,
          "label": "async def get_executions(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[graph_db.GraphExecution]:\n    return await graph_db.get_executions(user_id=user_id)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_graph_run_node_execution_results",
      "type": "function",
      "start_line": 419,
      "end_line": 428,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 419,
          "line": "async def get_graph_run_node_execution_results("
        },
        {
          "lineno": 420,
          "line": "    graph_id: str,"
        },
        {
          "lineno": 421,
          "line": "    graph_exec_id: str,"
        },
        {
          "lineno": 422,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 423,
          "line": ") -> Sequence[execution_db.ExecutionResult]:"
        },
        {
          "lineno": 424,
          "line": "    graph = await graph_db.get_graph(graph_id, user_id=user_id)"
        },
        {
          "lineno": 425,
          "line": "    if not graph:"
        },
        {
          "lineno": 426,
          "line": "        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")"
        },
        {
          "lineno": 427,
          "line": ""
        },
        {
          "lineno": 428,
          "line": "    return await execution_db.get_execution_results(graph_exec_id)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 419,
          "end_line": 424,
          "label": "async def get_graph_run_node_execution_results(\n    graph_id: str,\n    graph_exec_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Sequence[execution_db.ExecutionResult]:\n    graph = await graph_db.get_graph(graph_id, user_id=user_id)",
          "successors": [
            {
              "id": 2,
              "start_line": 425,
              "end_line": 426,
              "label": "if not graph:\n    raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 428,
                  "end_line": 428,
                  "label": "return await execution_db.get_execution_results(graph_exec_id)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_templates",
      "type": "function",
      "start_line": 441,
      "end_line": 444,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 441,
          "line": "async def get_templates("
        },
        {
          "lineno": 442,
          "line": "    user_id: Annotated[str, Depends(get_user_id)]"
        },
        {
          "lineno": 443,
          "line": ") -> Sequence[graph_db.GraphModel]:"
        },
        {
          "lineno": 444,
          "line": "    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 441,
          "end_line": 444,
          "label": "async def get_templates(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_template",
      "type": "function",
      "start_line": 452,
      "end_line": 458,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 452,
          "line": "async def get_template("
        },
        {
          "lineno": 453,
          "line": "    graph_id: str, version: int | None = None"
        },
        {
          "lineno": 454,
          "line": ") -> graph_db.GraphModel:"
        },
        {
          "lineno": 455,
          "line": "    graph = await graph_db.get_graph(graph_id, version, template=True)"
        },
        {
          "lineno": 456,
          "line": "    if not graph:"
        },
        {
          "lineno": 457,
          "line": "        raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")"
        },
        {
          "lineno": 458,
          "line": "    return graph"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 452,
          "end_line": 454,
          "label": "async def get_template(\n    graph_id: str, version: int | None = None\n) -> graph_db.GraphModel:",
          "successors": [
            {
              "id": 2,
              "start_line": 455,
              "end_line": 455,
              "label": "graph = await graph_db.get_graph(graph_id, version, template=True)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 456,
                  "end_line": 457,
                  "label": "if not graph:\n    raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 458,
                      "end_line": 458,
                      "label": "return graph",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "create_new_template",
      "type": "function",
      "start_line": 466,
      "end_line": 469,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 466,
          "line": "async def create_new_template("
        },
        {
          "lineno": 467,
          "line": "    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]"
        },
        {
          "lineno": 468,
          "line": ") -> graph_db.GraphModel:"
        },
        {
          "lineno": 469,
          "line": "    return await do_create_graph(create_graph, is_template=True, user_id=user_id)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 466,
          "end_line": 468,
          "label": "async def create_new_template(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:",
          "successors": [
            {
              "id": 2,
              "start_line": 469,
              "end_line": 469,
              "label": "return await do_create_graph(create_graph, is_template=True, user_id=user_id)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "create_schedule",
      "type": "function",
      "start_line": 488,
      "end_line": 506,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 488,
          "line": "async def create_schedule("
        },
        {
          "lineno": 489,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 490,
          "line": "    schedule: ScheduleCreationRequest,"
        },
        {
          "lineno": 491,
          "line": ") -> scheduler.JobInfo:"
        },
        {
          "lineno": 492,
          "line": "    graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)"
        },
        {
          "lineno": 493,
          "line": "    if not graph:"
        },
        {
          "lineno": 494,
          "line": "        raise HTTPException("
        },
        {
          "lineno": 495,
          "line": "            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\""
        },
        {
          "lineno": 496,
          "line": "        )"
        },
        {
          "lineno": 497,
          "line": ""
        },
        {
          "lineno": 498,
          "line": "    return await asyncio.to_thread("
        },
        {
          "lineno": 499,
          "line": "        lambda: execution_scheduler_client().add_execution_schedule("
        },
        {
          "lineno": 500,
          "line": "            graph_id=schedule.graph_id,"
        },
        {
          "lineno": 501,
          "line": "            graph_version=graph.version,"
        },
        {
          "lineno": 502,
          "line": "            cron=schedule.cron,"
        },
        {
          "lineno": 503,
          "line": "            input_data=schedule.input_data,"
        },
        {
          "lineno": 504,
          "line": "            user_id=user_id,"
        },
        {
          "lineno": 505,
          "line": "        )"
        },
        {
          "lineno": 506,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 488,
          "end_line": 492,
          "label": "async def create_schedule(\n    user_id: Annotated[str, Depends(get_user_id)],\n    schedule: ScheduleCreationRequest,\n) -> scheduler.JobInfo:\n    graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)",
          "successors": [
            {
              "id": 2,
              "start_line": 493,
              "end_line": 493,
              "label": "if not graph:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 494,
                  "end_line": 496,
                  "label": "raise HTTPException(\n    status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 498,
                  "end_line": 506,
                  "label": "return await asyncio.to_thread(\n    lambda: execution_scheduler_client().add_execution_schedule(\n        graph_id=schedule.graph_id,\n        graph_version=graph.version,\n        cron=schedule.cron,\n        input_data=schedule.input_data,\n        user_id=user_id,\n    )\n)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "delete_schedule",
      "type": "function",
      "start_line": 514,
      "end_line": 519,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 514,
          "line": "def delete_schedule("
        },
        {
          "lineno": 515,
          "line": "    schedule_id: str,"
        },
        {
          "lineno": 516,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 517,
          "line": ") -> dict[Any, Any]:"
        },
        {
          "lineno": 518,
          "line": "    execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)"
        },
        {
          "lineno": 519,
          "line": "    return {\"id\": schedule_id}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 514,
          "end_line": 519,
          "label": "def delete_schedule(\n    schedule_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[Any, Any]:\n    execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\n    return {\"id\": schedule_id}",
          "successors": []
        }
      ]
    },
    {
      "name": "get_execution_schedules",
      "type": "function",
      "start_line": 527,
      "end_line": 534,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 527,
          "line": "def get_execution_schedules("
        },
        {
          "lineno": 528,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 529,
          "line": "    graph_id: str | None = None,"
        },
        {
          "lineno": 530,
          "line": ") -> list[scheduler.JobInfo]:"
        },
        {
          "lineno": 531,
          "line": "    return execution_scheduler_client().get_execution_schedules("
        },
        {
          "lineno": 532,
          "line": "        user_id=user_id,"
        },
        {
          "lineno": 533,
          "line": "        graph_id=graph_id,"
        },
        {
          "lineno": 534,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 527,
          "end_line": 534,
          "label": "def get_execution_schedules(\n    user_id: Annotated[str, Depends(get_user_id)],\n    graph_id: str | None = None,\n) -> list[scheduler.JobInfo]:\n    return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )",
          "successors": []
        }
      ]
    },
    {
      "name": "create_api_key",
      "type": "function",
      "start_line": 549,
      "end_line": 560,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 549,
          "line": "async def create_api_key("
        },
        {
          "lineno": 550,
          "line": "    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]"
        },
        {
          "lineno": 551,
          "line": ") -> CreateAPIKeyResponse:"
        },
        {
          "lineno": 552,
          "line": "    \"\"\"Create a new API key\"\"\""
        },
        {
          "lineno": 553,
          "line": "    try:"
        },
        {
          "lineno": 554,
          "line": "        api_key, plain_text = await generate_api_key("
        },
        {
          "lineno": 555,
          "line": "            name=request.name,"
        },
        {
          "lineno": 556,
          "line": "            user_id=user_id,"
        },
        {
          "lineno": 557,
          "line": "            permissions=request.permissions,"
        },
        {
          "lineno": 558,
          "line": "            description=request.description,"
        },
        {
          "lineno": 559,
          "line": "        )"
        },
        {
          "lineno": 560,
          "line": "        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 549,
          "end_line": 552,
          "label": "async def create_api_key(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n) -> CreateAPIKeyResponse:\n    \"\"\"Create a new API key\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 553,
              "end_line": 559,
              "label": "try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 560,
                  "end_line": 560,
                  "label": "return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_api_keys",
      "type": "function",
      "start_line": 573,
      "end_line": 578,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 573,
          "line": "async def get_api_keys("
        },
        {
          "lineno": 574,
          "line": "    user_id: Annotated[str, Depends(get_user_id)]"
        },
        {
          "lineno": 575,
          "line": ") -> list[APIKeyWithoutHash]:"
        },
        {
          "lineno": 576,
          "line": "    \"\"\"List all API keys for the user\"\"\""
        },
        {
          "lineno": 577,
          "line": "    try:"
        },
        {
          "lineno": 578,
          "line": "        return await list_user_api_keys(user_id)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 573,
          "end_line": 576,
          "label": "async def get_api_keys(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> list[APIKeyWithoutHash]:\n    \"\"\"List all API keys for the user\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 577,
              "end_line": 578,
              "label": "try:\n    return await list_user_api_keys(user_id)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_api_key",
      "type": "function",
      "start_line": 591,
      "end_line": 599,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 591,
          "line": "async def get_api_key("
        },
        {
          "lineno": 592,
          "line": "    key_id: str, user_id: Annotated[str, Depends(get_user_id)]"
        },
        {
          "lineno": 593,
          "line": ") -> APIKeyWithoutHash:"
        },
        {
          "lineno": 594,
          "line": "    \"\"\"Get a specific API key\"\"\""
        },
        {
          "lineno": 595,
          "line": "    try:"
        },
        {
          "lineno": 596,
          "line": "        api_key = await get_api_key_by_id(key_id, user_id)"
        },
        {
          "lineno": 597,
          "line": "        if not api_key:"
        },
        {
          "lineno": 598,
          "line": "            raise HTTPException(status_code=404, detail=\"API key not found\")"
        },
        {
          "lineno": 599,
          "line": "        return api_key"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 591,
          "end_line": 594,
          "label": "async def get_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> APIKeyWithoutHash:\n    \"\"\"Get a specific API key\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 595,
              "end_line": 596,
              "label": "try:\n        api_key = await get_api_key_by_id(key_id, user_id)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 597,
                  "end_line": 598,
                  "label": "if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 599,
                      "end_line": 599,
                      "label": "return api_key",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "delete_api_key",
      "type": "function",
      "start_line": 612,
      "end_line": 617,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 612,
          "line": "async def delete_api_key("
        },
        {
          "lineno": 613,
          "line": "    key_id: str, user_id: Annotated[str, Depends(get_user_id)]"
        },
        {
          "lineno": 614,
          "line": ") -> Optional[APIKeyWithoutHash]:"
        },
        {
          "lineno": 615,
          "line": "    \"\"\"Revoke an API key\"\"\""
        },
        {
          "lineno": 616,
          "line": "    try:"
        },
        {
          "lineno": 617,
          "line": "        return await revoke_api_key(key_id, user_id)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 612,
          "end_line": 616,
          "label": "async def delete_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Revoke an API key\"\"\"\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 617,
              "end_line": 617,
              "label": "return await revoke_api_key(key_id, user_id)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "suspend_key",
      "type": "function",
      "start_line": 634,
      "end_line": 639,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 634,
          "line": "async def suspend_key("
        },
        {
          "lineno": 635,
          "line": "    key_id: str, user_id: Annotated[str, Depends(get_user_id)]"
        },
        {
          "lineno": 636,
          "line": ") -> Optional[APIKeyWithoutHash]:"
        },
        {
          "lineno": 637,
          "line": "    \"\"\"Suspend an API key\"\"\""
        },
        {
          "lineno": 638,
          "line": "    try:"
        },
        {
          "lineno": 639,
          "line": "        return await suspend_api_key(key_id, user_id)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 634,
          "end_line": 637,
          "label": "async def suspend_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Suspend an API key\"\"\"\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 639,
              "end_line": 639,
              "label": "return await suspend_api_key(key_id, user_id)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "update_permissions",
      "type": "function",
      "start_line": 656,
      "end_line": 663,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 656,
          "line": "async def update_permissions("
        },
        {
          "lineno": 657,
          "line": "    key_id: str,"
        },
        {
          "lineno": 658,
          "line": "    request: UpdatePermissionsRequest,"
        },
        {
          "lineno": 659,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 660,
          "line": ") -> Optional[APIKeyWithoutHash]:"
        },
        {
          "lineno": 661,
          "line": "    \"\"\"Update API key permissions\"\"\""
        },
        {
          "lineno": 662,
          "line": "    try:"
        },
        {
          "lineno": 663,
          "line": "        return await update_api_key_permissions(key_id, user_id, request.permissions)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 656,
          "end_line": 661,
          "label": "async def update_permissions(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Update API key permissions\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 662,
              "end_line": 663,
              "label": "try:\n    return await update_api_key_permissions(key_id, user_id, request.permissions)",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "DeleteGraphResponse",
      "type": "class",
      "start_line": 145,
      "end_line": 146,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 145,
          "line": "class DeleteGraphResponse(TypedDict):"
        },
        {
          "lineno": 146,
          "line": "    version_counts: int"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 145,
          "end_line": 146,
          "label": "class DeleteGraphResponse(TypedDict):\n    version_counts: int",
          "successors": []
        }
      ]
    },
    {
      "name": "ScheduleCreationRequest",
      "type": "class",
      "start_line": 477,
      "end_line": 480,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 477,
          "line": "class ScheduleCreationRequest(pydantic.BaseModel):"
        },
        {
          "lineno": 478,
          "line": "    cron: str"
        },
        {
          "lineno": 479,
          "line": "    input_data: dict[Any, Any]"
        },
        {
          "lineno": 480,
          "line": "    graph_id: str"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 477,
          "end_line": 480,
          "label": "class ScheduleCreationRequest(pydantic.BaseModel):\n    cron: str\n    input_data: dict[Any, Any]\n    graph_id: str",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import asyncio"
    },
    {
      "lineno": 2,
      "line": "import logging"
    },
    {
      "lineno": 3,
      "line": "from collections import defaultdict"
    },
    {
      "lineno": 4,
      "line": "from typing import TYPE_CHECKING, Annotated, Any, Sequence"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "import pydantic"
    },
    {
      "lineno": 7,
      "line": "from autogpt_libs.auth.middleware import auth_middleware"
    },
    {
      "lineno": 8,
      "line": "from autogpt_libs.feature_flag.client import feature_flag"
    },
    {
      "lineno": 9,
      "line": "from autogpt_libs.utils.cache import thread_cached"
    },
    {
      "lineno": 10,
      "line": "from fastapi import APIRouter, Depends, HTTPException"
    },
    {
      "lineno": 11,
      "line": "from typing_extensions import Optional, TypedDict"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "import backend.data.block"
    },
    {
      "lineno": 14,
      "line": "import backend.server.integrations.router"
    },
    {
      "lineno": 15,
      "line": "import backend.server.routers.analytics"
    },
    {
      "lineno": 16,
      "line": "from backend.data import execution as execution_db"
    },
    {
      "lineno": 17,
      "line": "from backend.data import graph as graph_db"
    },
    {
      "lineno": 18,
      "line": "from backend.data.api_key import ("
    },
    {
      "lineno": 19,
      "line": "    APIKeyError,"
    },
    {
      "lineno": 20,
      "line": "    APIKeyNotFoundError,"
    },
    {
      "lineno": 21,
      "line": "    APIKeyPermissionError,"
    },
    {
      "lineno": 22,
      "line": "    APIKeyWithoutHash,"
    },
    {
      "lineno": 23,
      "line": "    generate_api_key,"
    },
    {
      "lineno": 24,
      "line": "    get_api_key_by_id,"
    },
    {
      "lineno": 25,
      "line": "    list_user_api_keys,"
    },
    {
      "lineno": 26,
      "line": "    revoke_api_key,"
    },
    {
      "lineno": 27,
      "line": "    suspend_api_key,"
    },
    {
      "lineno": 28,
      "line": "    update_api_key_permissions,"
    },
    {
      "lineno": 29,
      "line": ")"
    },
    {
      "lineno": 30,
      "line": "from backend.data.block import BlockInput, CompletedBlockOutput"
    },
    {
      "lineno": 31,
      "line": "from backend.data.credit import get_block_costs, get_user_credit_model"
    },
    {
      "lineno": 32,
      "line": "from backend.data.user import get_or_create_user"
    },
    {
      "lineno": 33,
      "line": "from backend.executor import ExecutionManager, ExecutionScheduler, scheduler"
    },
    {
      "lineno": 34,
      "line": "from backend.integrations.creds_manager import IntegrationCredentialsManager"
    },
    {
      "lineno": 35,
      "line": "from backend.integrations.webhooks.graph_lifecycle_hooks import ("
    },
    {
      "lineno": 36,
      "line": "    on_graph_activate,"
    },
    {
      "lineno": 37,
      "line": "    on_graph_deactivate,"
    },
    {
      "lineno": 38,
      "line": ")"
    },
    {
      "lineno": 39,
      "line": "from backend.server.model import ("
    },
    {
      "lineno": 40,
      "line": "    CreateAPIKeyRequest,"
    },
    {
      "lineno": 41,
      "line": "    CreateAPIKeyResponse,"
    },
    {
      "lineno": 42,
      "line": "    CreateGraph,"
    },
    {
      "lineno": 43,
      "line": "    SetGraphActiveVersion,"
    },
    {
      "lineno": 44,
      "line": "    UpdatePermissionsRequest,"
    },
    {
      "lineno": 45,
      "line": ")"
    },
    {
      "lineno": 46,
      "line": "from backend.server.utils import get_user_id"
    },
    {
      "lineno": 47,
      "line": "from backend.util.service import get_service_client"
    },
    {
      "lineno": 48,
      "line": "from backend.util.settings import Settings"
    },
    {
      "lineno": 49,
      "line": ""
    },
    {
      "lineno": 50,
      "line": "if TYPE_CHECKING:"
    },
    {
      "lineno": 51,
      "line": "    from backend.data.model import Credentials"
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 53,
      "line": ""
    },
    {
      "lineno": 54,
      "line": "@thread_cached"
    },
    {
      "lineno": 57,
      "line": ""
    },
    {
      "lineno": 58,
      "line": ""
    },
    {
      "lineno": 59,
      "line": "@thread_cached"
    },
    {
      "lineno": 62,
      "line": ""
    },
    {
      "lineno": 63,
      "line": ""
    },
    {
      "lineno": 64,
      "line": "settings = Settings()"
    },
    {
      "lineno": 65,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 66,
      "line": "integration_creds_manager = IntegrationCredentialsManager()"
    },
    {
      "lineno": 67,
      "line": ""
    },
    {
      "lineno": 68,
      "line": ""
    },
    {
      "lineno": 69,
      "line": "_user_credit_model = get_user_credit_model()"
    },
    {
      "lineno": 70,
      "line": ""
    },
    {
      "lineno": 71,
      "line": "# Define the API routes"
    },
    {
      "lineno": 72,
      "line": "v1_router = APIRouter()"
    },
    {
      "lineno": 73,
      "line": ""
    },
    {
      "lineno": 74,
      "line": "v1_router.include_router("
    },
    {
      "lineno": 75,
      "line": "    backend.server.integrations.router.router,"
    },
    {
      "lineno": 76,
      "line": "    prefix=\"/integrations\","
    },
    {
      "lineno": 77,
      "line": "    tags=[\"integrations\"],"
    },
    {
      "lineno": 78,
      "line": ")"
    },
    {
      "lineno": 79,
      "line": ""
    },
    {
      "lineno": 80,
      "line": "v1_router.include_router("
    },
    {
      "lineno": 81,
      "line": "    backend.server.routers.analytics.router,"
    },
    {
      "lineno": 82,
      "line": "    prefix=\"/analytics\","
    },
    {
      "lineno": 83,
      "line": "    tags=[\"analytics\"],"
    },
    {
      "lineno": 84,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 85,
      "line": ")"
    },
    {
      "lineno": 86,
      "line": ""
    },
    {
      "lineno": 87,
      "line": ""
    },
    {
      "lineno": 88,
      "line": "########################################################"
    },
    {
      "lineno": 89,
      "line": "##################### Auth #############################"
    },
    {
      "lineno": 90,
      "line": "########################################################"
    },
    {
      "lineno": 91,
      "line": ""
    },
    {
      "lineno": 92,
      "line": ""
    },
    {
      "lineno": 93,
      "line": "@v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])"
    },
    {
      "lineno": 97,
      "line": ""
    },
    {
      "lineno": 98,
      "line": ""
    },
    {
      "lineno": 99,
      "line": "########################################################"
    },
    {
      "lineno": 100,
      "line": "##################### Blocks ###########################"
    },
    {
      "lineno": 101,
      "line": "########################################################"
    },
    {
      "lineno": 102,
      "line": ""
    },
    {
      "lineno": 103,
      "line": ""
    },
    {
      "lineno": 104,
      "line": "@v1_router.get(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])"
    },
    {
      "lineno": 109,
      "line": ""
    },
    {
      "lineno": 110,
      "line": ""
    },
    {
      "lineno": 111,
      "line": "@v1_router.post("
    },
    {
      "lineno": 112,
      "line": "    path=\"/blocks/{block_id}/execute\","
    },
    {
      "lineno": 113,
      "line": "    tags=[\"blocks\"],"
    },
    {
      "lineno": 114,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 115,
      "line": ")"
    },
    {
      "lineno": 125,
      "line": ""
    },
    {
      "lineno": 126,
      "line": ""
    },
    {
      "lineno": 127,
      "line": "########################################################"
    },
    {
      "lineno": 128,
      "line": "##################### Credits ##########################"
    },
    {
      "lineno": 129,
      "line": "########################################################"
    },
    {
      "lineno": 130,
      "line": ""
    },
    {
      "lineno": 131,
      "line": ""
    },
    {
      "lineno": 132,
      "line": "@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])"
    },
    {
      "lineno": 138,
      "line": ""
    },
    {
      "lineno": 139,
      "line": ""
    },
    {
      "lineno": 140,
      "line": "########################################################"
    },
    {
      "lineno": 141,
      "line": "##################### Graphs ###########################"
    },
    {
      "lineno": 142,
      "line": "########################################################"
    },
    {
      "lineno": 143,
      "line": ""
    },
    {
      "lineno": 144,
      "line": ""
    },
    {
      "lineno": 147,
      "line": ""
    },
    {
      "lineno": 148,
      "line": ""
    },
    {
      "lineno": 149,
      "line": "@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])"
    },
    {
      "lineno": 154,
      "line": ""
    },
    {
      "lineno": 155,
      "line": ""
    },
    {
      "lineno": 156,
      "line": "@v1_router.get("
    },
    {
      "lineno": 157,
      "line": "    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]"
    },
    {
      "lineno": 158,
      "line": ")"
    },
    {
      "lineno": 159,
      "line": "@v1_router.get("
    },
    {
      "lineno": 160,
      "line": "    path=\"/graphs/{graph_id}/versions/{version}\","
    },
    {
      "lineno": 161,
      "line": "    tags=[\"graphs\"],"
    },
    {
      "lineno": 162,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 163,
      "line": ")"
    },
    {
      "lineno": 176,
      "line": ""
    },
    {
      "lineno": 177,
      "line": ""
    },
    {
      "lineno": 178,
      "line": "@v1_router.get("
    },
    {
      "lineno": 179,
      "line": "    path=\"/graphs/{graph_id}/versions\","
    },
    {
      "lineno": 180,
      "line": "    tags=[\"graphs\"],"
    },
    {
      "lineno": 181,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 182,
      "line": ")"
    },
    {
      "lineno": 183,
      "line": "@v1_router.get("
    },
    {
      "lineno": 184,
      "line": "    path=\"/templates/{graph_id}/versions\","
    },
    {
      "lineno": 185,
      "line": "    tags=[\"templates\", \"graphs\"],"
    },
    {
      "lineno": 186,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 187,
      "line": ")"
    },
    {
      "lineno": 195,
      "line": ""
    },
    {
      "lineno": 196,
      "line": ""
    },
    {
      "lineno": 197,
      "line": "@v1_router.post("
    },
    {
      "lineno": 198,
      "line": "    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]"
    },
    {
      "lineno": 199,
      "line": ")"
    },
    {
      "lineno": 204,
      "line": ""
    },
    {
      "lineno": 205,
      "line": ""
    },
    {
      "lineno": 243,
      "line": ""
    },
    {
      "lineno": 244,
      "line": ""
    },
    {
      "lineno": 245,
      "line": "@v1_router.delete("
    },
    {
      "lineno": 246,
      "line": "    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]"
    },
    {
      "lineno": 247,
      "line": ")"
    },
    {
      "lineno": 259,
      "line": ""
    },
    {
      "lineno": 260,
      "line": ""
    },
    {
      "lineno": 261,
      "line": "@v1_router.put("
    },
    {
      "lineno": 262,
      "line": "    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]"
    },
    {
      "lineno": 263,
      "line": ")"
    },
    {
      "lineno": 264,
      "line": "@v1_router.put("
    },
    {
      "lineno": 265,
      "line": "    path=\"/templates/{graph_id}\","
    },
    {
      "lineno": 266,
      "line": "    tags=[\"templates\", \"graphs\"],"
    },
    {
      "lineno": 267,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 268,
      "line": ")"
    },
    {
      "lineno": 321,
      "line": ""
    },
    {
      "lineno": 322,
      "line": ""
    },
    {
      "lineno": 323,
      "line": "@v1_router.put("
    },
    {
      "lineno": 324,
      "line": "    path=\"/graphs/{graph_id}/versions/active\","
    },
    {
      "lineno": 325,
      "line": "    tags=[\"graphs\"],"
    },
    {
      "lineno": 326,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 327,
      "line": ")"
    },
    {
      "lineno": 362,
      "line": ""
    },
    {
      "lineno": 363,
      "line": ""
    },
    {
      "lineno": 364,
      "line": "@v1_router.post("
    },
    {
      "lineno": 365,
      "line": "    path=\"/graphs/{graph_id}/execute\","
    },
    {
      "lineno": 366,
      "line": "    tags=[\"graphs\"],"
    },
    {
      "lineno": 367,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 368,
      "line": ")"
    },
    {
      "lineno": 382,
      "line": ""
    },
    {
      "lineno": 383,
      "line": ""
    },
    {
      "lineno": 384,
      "line": "@v1_router.post("
    },
    {
      "lineno": 385,
      "line": "    path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\","
    },
    {
      "lineno": 386,
      "line": "    tags=[\"graphs\"],"
    },
    {
      "lineno": 387,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 388,
      "line": ")"
    },
    {
      "lineno": 401,
      "line": ""
    },
    {
      "lineno": 402,
      "line": ""
    },
    {
      "lineno": 403,
      "line": "@v1_router.get("
    },
    {
      "lineno": 404,
      "line": "    path=\"/executions\","
    },
    {
      "lineno": 405,
      "line": "    tags=[\"graphs\"],"
    },
    {
      "lineno": 406,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 407,
      "line": ")"
    },
    {
      "lineno": 412,
      "line": ""
    },
    {
      "lineno": 413,
      "line": ""
    },
    {
      "lineno": 414,
      "line": "@v1_router.get("
    },
    {
      "lineno": 415,
      "line": "    path=\"/graphs/{graph_id}/executions/{graph_exec_id}\","
    },
    {
      "lineno": 416,
      "line": "    tags=[\"graphs\"],"
    },
    {
      "lineno": 417,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 418,
      "line": ")"
    },
    {
      "lineno": 429,
      "line": ""
    },
    {
      "lineno": 430,
      "line": ""
    },
    {
      "lineno": 431,
      "line": "########################################################"
    },
    {
      "lineno": 432,
      "line": "##################### Templates ########################"
    },
    {
      "lineno": 433,
      "line": "########################################################"
    },
    {
      "lineno": 434,
      "line": ""
    },
    {
      "lineno": 435,
      "line": ""
    },
    {
      "lineno": 436,
      "line": "@v1_router.get("
    },
    {
      "lineno": 437,
      "line": "    path=\"/templates\","
    },
    {
      "lineno": 438,
      "line": "    tags=[\"graphs\", \"templates\"],"
    },
    {
      "lineno": 439,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 440,
      "line": ")"
    },
    {
      "lineno": 445,
      "line": ""
    },
    {
      "lineno": 446,
      "line": ""
    },
    {
      "lineno": 447,
      "line": "@v1_router.get("
    },
    {
      "lineno": 448,
      "line": "    path=\"/templates/{graph_id}\","
    },
    {
      "lineno": 449,
      "line": "    tags=[\"templates\", \"graphs\"],"
    },
    {
      "lineno": 450,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 451,
      "line": ")"
    },
    {
      "lineno": 459,
      "line": ""
    },
    {
      "lineno": 460,
      "line": ""
    },
    {
      "lineno": 461,
      "line": "@v1_router.post("
    },
    {
      "lineno": 462,
      "line": "    path=\"/templates\","
    },
    {
      "lineno": 463,
      "line": "    tags=[\"templates\", \"graphs\"],"
    },
    {
      "lineno": 464,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 465,
      "line": ")"
    },
    {
      "lineno": 470,
      "line": ""
    },
    {
      "lineno": 471,
      "line": ""
    },
    {
      "lineno": 472,
      "line": "########################################################"
    },
    {
      "lineno": 473,
      "line": "##################### Schedules ########################"
    },
    {
      "lineno": 474,
      "line": "########################################################"
    },
    {
      "lineno": 475,
      "line": ""
    },
    {
      "lineno": 476,
      "line": ""
    },
    {
      "lineno": 481,
      "line": ""
    },
    {
      "lineno": 482,
      "line": ""
    },
    {
      "lineno": 483,
      "line": "@v1_router.post("
    },
    {
      "lineno": 484,
      "line": "    path=\"/schedules\","
    },
    {
      "lineno": 485,
      "line": "    tags=[\"schedules\"],"
    },
    {
      "lineno": 486,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 487,
      "line": ")"
    },
    {
      "lineno": 507,
      "line": ""
    },
    {
      "lineno": 508,
      "line": ""
    },
    {
      "lineno": 509,
      "line": "@v1_router.delete("
    },
    {
      "lineno": 510,
      "line": "    path=\"/schedules/{schedule_id}\","
    },
    {
      "lineno": 511,
      "line": "    tags=[\"schedules\"],"
    },
    {
      "lineno": 512,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 513,
      "line": ")"
    },
    {
      "lineno": 520,
      "line": ""
    },
    {
      "lineno": 521,
      "line": ""
    },
    {
      "lineno": 522,
      "line": "@v1_router.get("
    },
    {
      "lineno": 523,
      "line": "    path=\"/schedules\","
    },
    {
      "lineno": 524,
      "line": "    tags=[\"schedules\"],"
    },
    {
      "lineno": 525,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 526,
      "line": ")"
    },
    {
      "lineno": 535,
      "line": ""
    },
    {
      "lineno": 536,
      "line": ""
    },
    {
      "lineno": 537,
      "line": "########################################################"
    },
    {
      "lineno": 538,
      "line": "#####################  API KEY ##############################"
    },
    {
      "lineno": 539,
      "line": "########################################################"
    },
    {
      "lineno": 540,
      "line": ""
    },
    {
      "lineno": 541,
      "line": ""
    },
    {
      "lineno": 542,
      "line": "@v1_router.post("
    },
    {
      "lineno": 543,
      "line": "    \"/api-keys\","
    },
    {
      "lineno": 544,
      "line": "    response_model=list[CreateAPIKeyResponse] | dict[str, str],"
    },
    {
      "lineno": 545,
      "line": "    tags=[\"api-keys\"],"
    },
    {
      "lineno": 546,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 547,
      "line": ")"
    },
    {
      "lineno": 548,
      "line": "@feature_flag(\"api-keys-enabled\")"
    },
    {
      "lineno": 561,
      "line": "    except APIKeyError as e:"
    },
    {
      "lineno": 562,
      "line": "        logger.error(f\"Failed to create API key: {str(e)}\")"
    },
    {
      "lineno": 563,
      "line": "        raise HTTPException(status_code=400, detail=str(e))"
    },
    {
      "lineno": 564,
      "line": ""
    },
    {
      "lineno": 565,
      "line": ""
    },
    {
      "lineno": 566,
      "line": "@v1_router.get("
    },
    {
      "lineno": 567,
      "line": "    \"/api-keys\","
    },
    {
      "lineno": 568,
      "line": "    response_model=list[APIKeyWithoutHash] | dict[str, str],"
    },
    {
      "lineno": 569,
      "line": "    tags=[\"api-keys\"],"
    },
    {
      "lineno": 570,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 571,
      "line": ")"
    },
    {
      "lineno": 572,
      "line": "@feature_flag(\"api-keys-enabled\")"
    },
    {
      "lineno": 579,
      "line": "    except APIKeyError as e:"
    },
    {
      "lineno": 580,
      "line": "        logger.error(f\"Failed to list API keys: {str(e)}\")"
    },
    {
      "lineno": 581,
      "line": "        raise HTTPException(status_code=400, detail=str(e))"
    },
    {
      "lineno": 582,
      "line": ""
    },
    {
      "lineno": 583,
      "line": ""
    },
    {
      "lineno": 584,
      "line": "@v1_router.get("
    },
    {
      "lineno": 585,
      "line": "    \"/api-keys/{key_id}\","
    },
    {
      "lineno": 586,
      "line": "    response_model=list[APIKeyWithoutHash] | dict[str, str],"
    },
    {
      "lineno": 587,
      "line": "    tags=[\"api-keys\"],"
    },
    {
      "lineno": 588,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 589,
      "line": ")"
    },
    {
      "lineno": 590,
      "line": "@feature_flag(\"api-keys-enabled\")"
    },
    {
      "lineno": 600,
      "line": "    except APIKeyError as e:"
    },
    {
      "lineno": 601,
      "line": "        logger.error(f\"Failed to get API key: {str(e)}\")"
    },
    {
      "lineno": 602,
      "line": "        raise HTTPException(status_code=400, detail=str(e))"
    },
    {
      "lineno": 603,
      "line": ""
    },
    {
      "lineno": 604,
      "line": ""
    },
    {
      "lineno": 605,
      "line": "@v1_router.delete("
    },
    {
      "lineno": 606,
      "line": "    \"/api-keys/{key_id}\","
    },
    {
      "lineno": 607,
      "line": "    response_model=list[APIKeyWithoutHash] | dict[str, str],"
    },
    {
      "lineno": 608,
      "line": "    tags=[\"api-keys\"],"
    },
    {
      "lineno": 609,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 610,
      "line": ")"
    },
    {
      "lineno": 611,
      "line": "@feature_flag(\"api-keys-enabled\")"
    },
    {
      "lineno": 618,
      "line": "    except APIKeyNotFoundError:"
    },
    {
      "lineno": 619,
      "line": "        raise HTTPException(status_code=404, detail=\"API key not found\")"
    },
    {
      "lineno": 620,
      "line": "    except APIKeyPermissionError:"
    },
    {
      "lineno": 621,
      "line": "        raise HTTPException(status_code=403, detail=\"Permission denied\")"
    },
    {
      "lineno": 622,
      "line": "    except APIKeyError as e:"
    },
    {
      "lineno": 623,
      "line": "        logger.error(f\"Failed to revoke API key: {str(e)}\")"
    },
    {
      "lineno": 624,
      "line": "        raise HTTPException(status_code=400, detail=str(e))"
    },
    {
      "lineno": 625,
      "line": ""
    },
    {
      "lineno": 626,
      "line": ""
    },
    {
      "lineno": 627,
      "line": "@v1_router.post("
    },
    {
      "lineno": 628,
      "line": "    \"/api-keys/{key_id}/suspend\","
    },
    {
      "lineno": 629,
      "line": "    response_model=list[APIKeyWithoutHash] | dict[str, str],"
    },
    {
      "lineno": 630,
      "line": "    tags=[\"api-keys\"],"
    },
    {
      "lineno": 631,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 632,
      "line": ")"
    },
    {
      "lineno": 633,
      "line": "@feature_flag(\"api-keys-enabled\")"
    },
    {
      "lineno": 640,
      "line": "    except APIKeyNotFoundError:"
    },
    {
      "lineno": 641,
      "line": "        raise HTTPException(status_code=404, detail=\"API key not found\")"
    },
    {
      "lineno": 642,
      "line": "    except APIKeyPermissionError:"
    },
    {
      "lineno": 643,
      "line": "        raise HTTPException(status_code=403, detail=\"Permission denied\")"
    },
    {
      "lineno": 644,
      "line": "    except APIKeyError as e:"
    },
    {
      "lineno": 645,
      "line": "        logger.error(f\"Failed to suspend API key: {str(e)}\")"
    },
    {
      "lineno": 646,
      "line": "        raise HTTPException(status_code=400, detail=str(e))"
    },
    {
      "lineno": 647,
      "line": ""
    },
    {
      "lineno": 648,
      "line": ""
    },
    {
      "lineno": 649,
      "line": "@v1_router.put("
    },
    {
      "lineno": 650,
      "line": "    \"/api-keys/{key_id}/permissions\","
    },
    {
      "lineno": 651,
      "line": "    response_model=list[APIKeyWithoutHash] | dict[str, str],"
    },
    {
      "lineno": 652,
      "line": "    tags=[\"api-keys\"],"
    },
    {
      "lineno": 653,
      "line": "    dependencies=[Depends(auth_middleware)],"
    },
    {
      "lineno": 654,
      "line": ")"
    },
    {
      "lineno": 655,
      "line": "@feature_flag(\"api-keys-enabled\")"
    },
    {
      "lineno": 664,
      "line": "    except APIKeyNotFoundError:"
    },
    {
      "lineno": 665,
      "line": "        raise HTTPException(status_code=404, detail=\"API key not found\")"
    },
    {
      "lineno": 666,
      "line": "    except APIKeyPermissionError:"
    },
    {
      "lineno": 667,
      "line": "        raise HTTPException(status_code=403, detail=\"Permission denied\")"
    },
    {
      "lineno": 668,
      "line": "    except APIKeyError as e:"
    },
    {
      "lineno": 669,
      "line": "        logger.error(f\"Failed to update API key permissions: {str(e)}\")"
    },
    {
      "lineno": 670,
      "line": "        raise HTTPException(status_code=400, detail=str(e))"
    }
  ],
  "blocks": []
}