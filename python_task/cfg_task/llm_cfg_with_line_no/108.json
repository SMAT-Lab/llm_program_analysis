{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 90,
  "functions": [],
  "classes": [
    {
      "name": "NotionOAuthHandler",
      "type": "class",
      "start_line": 11,
      "end_line": 90,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 22,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    def __init__(self, client_id: str, client_secret: str, redirect_uri: str):"
            },
            {
              "lineno": 23,
              "line": "        self.client_id = client_id"
            },
            {
              "lineno": 24,
              "line": "        self.client_secret = client_secret"
            },
            {
              "lineno": 25,
              "line": "        self.redirect_uri = redirect_uri"
            },
            {
              "lineno": 26,
              "line": "        self.auth_base_url = \"https://api.notion.com/v1/oauth/authorize\""
            },
            {
              "lineno": 27,
              "line": "        self.token_url = \"https://api.notion.com/v1/oauth/token\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 22,
              "end_line": 27,
              "label": "    def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.redirect_uri = redirect_uri\n        self.auth_base_url = \"https://api.notion.com/v1/oauth/authorize\"\n        self.token_url = \"https://api.notion.com/v1/oauth/token\"",
              "successors": []
            }
          ]
        },
        {
          "name": "get_login_url",
          "type": "function",
          "start_line": 29,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 29,
              "line": "    def get_login_url(self, scopes: list[str], state: str) -> str:"
            },
            {
              "lineno": 30,
              "line": "        params = {"
            },
            {
              "lineno": 31,
              "line": "            \"client_id\": self.client_id,"
            },
            {
              "lineno": 32,
              "line": "            \"redirect_uri\": self.redirect_uri,"
            },
            {
              "lineno": 33,
              "line": "            \"response_type\": \"code\","
            },
            {
              "lineno": 34,
              "line": "            \"owner\": \"user\","
            },
            {
              "lineno": 35,
              "line": "            \"state\": state,"
            },
            {
              "lineno": 36,
              "line": "        }"
            },
            {
              "lineno": 37,
              "line": "        return f\"{self.auth_base_url}?{urlencode(params)}\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 29,
              "end_line": 36,
              "label": "    def get_login_url(self, scopes: list[str], state: str) -> str:\n        params = {\n            \"client_id\": self.client_id,\n            \"redirect_uri\": self.redirect_uri,\n            \"response_type\": \"code\",\n            \"owner\": \"user\",\n            \"state\": state,\n        }",
              "successors": [
                {
                  "id": 2,
                  "start_line": 37,
                  "end_line": 37,
                  "label": "        return f\"{self.auth_base_url}?{urlencode(params)}\"",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "exchange_code_for_tokens",
          "type": "function",
          "start_line": 39,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 39,
              "line": "    def exchange_code_for_tokens("
            },
            {
              "lineno": 40,
              "line": "        self, code: str, scopes: list[str]"
            },
            {
              "lineno": 41,
              "line": "    ) -> OAuth2Credentials:"
            },
            {
              "lineno": 42,
              "line": "        request_body = {"
            },
            {
              "lineno": 43,
              "line": "            \"grant_type\": \"authorization_code\","
            },
            {
              "lineno": 44,
              "line": "            \"code\": code,"
            },
            {
              "lineno": 45,
              "line": "            \"redirect_uri\": self.redirect_uri,"
            },
            {
              "lineno": 46,
              "line": "        }"
            },
            {
              "lineno": 47,
              "line": "        auth_str = b64encode(f\"{self.client_id}:{self.client_secret}\".encode()).decode()"
            },
            {
              "lineno": 48,
              "line": "        headers = {"
            },
            {
              "lineno": 49,
              "line": "            \"Authorization\": f\"Basic {auth_str}\","
            },
            {
              "lineno": 50,
              "line": "            \"Accept\": \"application/json\","
            },
            {
              "lineno": 51,
              "line": "        }"
            },
            {
              "lineno": 52,
              "line": "        response = requests.post(self.token_url, json=request_body, headers=headers)"
            },
            {
              "lineno": 53,
              "line": "        token_data = response.json()"
            },
            {
              "lineno": 54,
              "line": "        # Email is only available for non-bot users"
            },
            {
              "lineno": 55,
              "line": "        email = ("
            },
            {
              "lineno": 56,
              "line": "            token_data[\"owner\"][\"person\"][\"email\"]"
            },
            {
              "lineno": 57,
              "line": "            if \"person\" in token_data[\"owner\"]"
            },
            {
              "lineno": 58,
              "line": "            and \"email\" in token_data[\"owner\"][\"person\"]"
            },
            {
              "lineno": 59,
              "line": "            else None"
            },
            {
              "lineno": 60,
              "line": "        )"
            },
            {
              "lineno": 61,
              "line": ""
            },
            {
              "lineno": 62,
              "line": "        return OAuth2Credentials("
            },
            {
              "lineno": 63,
              "line": "            provider=self.PROVIDER_NAME,"
            },
            {
              "lineno": 64,
              "line": "            title=token_data.get(\"workspace_name\"),"
            },
            {
              "lineno": 65,
              "line": "            username=email,"
            },
            {
              "lineno": 66,
              "line": "            access_token=token_data[\"access_token\"],"
            },
            {
              "lineno": 67,
              "line": "            refresh_token=None,"
            },
            {
              "lineno": 68,
              "line": "            access_token_expires_at=None,  # Notion tokens don't expire"
            },
            {
              "lineno": 69,
              "line": "            refresh_token_expires_at=None,"
            },
            {
              "lineno": 70,
              "line": "            scopes=[],"
            },
            {
              "lineno": 71,
              "line": "            metadata={"
            },
            {
              "lineno": 72,
              "line": "                \"owner\": token_data[\"owner\"],"
            },
            {
              "lineno": 73,
              "line": "                \"bot_id\": token_data[\"bot_id\"],"
            },
            {
              "lineno": 74,
              "line": "                \"workspace_id\": token_data[\"workspace_id\"],"
            },
            {
              "lineno": 75,
              "line": "                \"workspace_name\": token_data.get(\"workspace_name\"),"
            },
            {
              "lineno": 76,
              "line": "                \"workspace_icon\": token_data.get(\"workspace_icon\"),"
            },
            {
              "lineno": 77,
              "line": "            },"
            },
            {
              "lineno": 78,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 39,
              "end_line": 41,
              "label": "    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 42,
                  "end_line": 46,
                  "label": "        request_body = {\n            \"grant_type\": \"authorization_code\",\n            \"code\": code,\n            \"redirect_uri\": self.redirect_uri,\n        }",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 47,
                  "end_line": 51,
                  "label": "        auth_str = b64encode(f\"{self.client_id}:{self.client_secret}\".encode()).decode()\n        headers = {\n            \"Authorization\": f\"Basic {auth_str}\",\n            \"Accept\": \"application/json\",\n        }",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 52,
                  "end_line": 53,
                  "label": "        response = requests.post(self.token_url, json=request_body, headers=headers)\n        token_data = response.json()",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 54,
                  "end_line": 60,
                  "label": "        # Email is only available for non-bot users\n        email = (\n            token_data[\"owner\"][\"person\"][\"email\"]\n            if \"person\" in token_data[\"owner\"]\n            and \"email\" in token_data[\"owner\"][\"person\"]\n            else None\n        )",
                  "successors": []
                },
                {
                  "id": 6,
                  "start_line": 62,
                  "end_line": 78,
                  "label": "        return OAuth2Credentials(\n            provider=self.PROVIDER_NAME,\n            title=token_data.get(\"workspace_name\"),\n            username=email,\n            access_token=token_data[\"access_token\"],\n            refresh_token=None,\n            access_token_expires_at=None,  # Notion tokens don't expire\n            refresh_token_expires_at=None,\n            scopes=[],\n            metadata={\n                \"owner\": token_data[\"owner\"],\n                \"bot_id\": token_data[\"bot_id\"],\n                \"workspace_id\": token_data[\"workspace_id\"],\n                \"workspace_name\": token_data.get(\"workspace_name\"),\n                \"workspace_icon\": token_data.get(\"workspace_icon\"),\n            },\n        )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "revoke_tokens",
          "type": "function",
          "start_line": 80,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 80,
              "line": "    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:"
            },
            {
              "lineno": 81,
              "line": "        # Notion doesn't support token revocation"
            },
            {
              "lineno": 82,
              "line": "        return False"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 80,
              "end_line": 82,
              "label": "    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # Notion doesn't support token revocation\n        return False",
              "successors": []
            }
          ]
        },
        {
          "name": "_refresh_tokens",
          "type": "function",
          "start_line": 84,
          "end_line": 86,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 84,
              "line": "    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:"
            },
            {
              "lineno": 85,
              "line": "        # Notion doesn't support token refresh"
            },
            {
              "lineno": 86,
              "line": "        return credentials"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 84,
              "end_line": 86,
              "label": "    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # Notion doesn't support token refresh\n        return credentials",
              "successors": []
            }
          ]
        },
        {
          "name": "needs_refresh",
          "type": "function",
          "start_line": 88,
          "end_line": 90,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 88,
              "line": "    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:"
            },
            {
              "lineno": 89,
              "line": "        # Notion access tokens don't expire"
            },
            {
              "lineno": 90,
              "line": "        return False"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 88,
              "end_line": 88,
              "label": "    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 89,
                  "end_line": 90,
                  "label": "        # Notion access tokens don't expire\n        return False",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "class NotionOAuthHandler(BaseOAuthHandler):"
        },
        {
          "lineno": 12,
          "line": "    \"\"\""
        },
        {
          "lineno": 13,
          "line": "    Based on the documentation at https://developers.notion.com/docs/authorization"
        },
        {
          "lineno": 14,
          "line": ""
        },
        {
          "lineno": 15,
          "line": "    Notes:"
        },
        {
          "lineno": 16,
          "line": "    - Notion uses non-expiring access tokens and therefore doesn't have a refresh flow"
        },
        {
          "lineno": 17,
          "line": "    - Notion doesn't use scopes"
        },
        {
          "lineno": 18,
          "line": "    \"\"\""
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 20,
          "line": "    PROVIDER_NAME = ProviderName.NOTION"
        },
        {
          "lineno": 21,
          "line": ""
        },
        {
          "lineno": 28,
          "line": ""
        },
        {
          "lineno": 38,
          "line": ""
        },
        {
          "lineno": 79,
          "line": ""
        },
        {
          "lineno": 83,
          "line": ""
        },
        {
          "lineno": 87,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from base64 import b64encode"
    },
    {
      "lineno": 2,
      "line": "from urllib.parse import urlencode"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from backend.data.model import OAuth2Credentials"
    },
    {
      "lineno": 5,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 6,
      "line": "from backend.util.request import requests"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from .base import BaseOAuthHandler"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "from base64 import b64encode\nfrom urllib.parse import urlencode",
      "successors": [
        {
          "id": 2,
          "start_line": 4,
          "end_line": 6,
          "label": "from backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests",
          "successors": [
            {
              "id": 3,
              "start_line": 8,
              "end_line": 8,
              "label": "from .base import BaseOAuthHandler",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}