{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 190,
  "functions": [
    {
      "name": "mock_settings",
      "type": "function",
      "start_line": 14,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 14,
          "line": "def mock_settings(monkeypatch):"
        },
        {
          "lineno": 15,
          "line": "    settings = Settings()"
        },
        {
          "lineno": 16,
          "line": "    settings.config.media_gcs_bucket_name = \"test-bucket\""
        },
        {
          "lineno": 17,
          "line": "    settings.config.google_application_credentials = \"test-credentials\""
        },
        {
          "lineno": 18,
          "line": "    monkeypatch.setattr(\"backend.server.v2.store.media.Settings\", lambda: settings)"
        },
        {
          "lineno": 19,
          "line": "    return settings"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 14,
          "end_line": 18,
          "label": "def mock_settings(monkeypatch):\n    settings = Settings()\n    settings.config.media_gcs_bucket_name = \"test-bucket\"\n    settings.config.google_application_credentials = \"test-credentials\"\n    monkeypatch.setattr(\"backend.server.v2.store.media.Settings\", lambda: settings)",
          "successors": [
            {
              "id": 2,
              "start_line": 19,
              "end_line": 19,
              "label": "return settings",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "mock_storage_client",
      "type": "function",
      "start_line": 23,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 23,
          "line": "def mock_storage_client(mocker):"
        },
        {
          "lineno": 24,
          "line": "    mock_client = unittest.mock.MagicMock()"
        },
        {
          "lineno": 25,
          "line": "    mock_bucket = unittest.mock.MagicMock()"
        },
        {
          "lineno": 26,
          "line": "    mock_blob = unittest.mock.MagicMock()"
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 28,
          "line": "    mock_client.bucket.return_value = mock_bucket"
        },
        {
          "lineno": 29,
          "line": "    mock_bucket.blob.return_value = mock_blob"
        },
        {
          "lineno": 30,
          "line": "    mock_blob.public_url = \"http://test-url/media/laptop.jpeg\""
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 32,
          "line": "    mocker.patch(\"google.cloud.storage.Client\", return_value=mock_client)"
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 34,
          "line": "    return mock_client"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 23,
          "end_line": 23,
          "label": "def mock_storage_client(mocker):",
          "successors": [
            {
              "id": 2,
              "start_line": 24,
              "end_line": 30,
              "label": "    mock_client = unittest.mock.MagicMock()\n    mock_bucket = unittest.mock.MagicMock()\n    mock_blob = unittest.mock.MagicMock()\n\n    mock_client.bucket.return_value = mock_bucket\n    mock_bucket.blob.return_value = mock_blob\n    mock_blob.public_url = \"http://test-url/media/laptop.jpeg\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 32,
                  "end_line": 32,
                  "label": "    mocker.patch(\"google.cloud.storage.Client\", return_value=mock_client)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 34,
                      "end_line": 34,
                      "label": "    return mock_client",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_success",
      "type": "function",
      "start_line": 37,
      "end_line": 52,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 37,
          "line": "async def test_upload_media_success(mock_settings, mock_storage_client):"
        },
        {
          "lineno": 38,
          "line": "    # Create test JPEG data with valid signature"
        },
        {
          "lineno": 39,
          "line": "    test_data = b\"\\xFF\\xD8\\xFF\" + b\"test data\""
        },
        {
          "lineno": 40,
          "line": ""
        },
        {
          "lineno": 41,
          "line": "    test_file = fastapi.UploadFile("
        },
        {
          "lineno": 42,
          "line": "        filename=\"laptop.jpeg\","
        },
        {
          "lineno": 43,
          "line": "        file=io.BytesIO(test_data),"
        },
        {
          "lineno": 44,
          "line": "        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),"
        },
        {
          "lineno": 45,
          "line": "    )"
        },
        {
          "lineno": 46,
          "line": ""
        },
        {
          "lineno": 47,
          "line": "    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)"
        },
        {
          "lineno": 48,
          "line": ""
        },
        {
          "lineno": 49,
          "line": "    assert result == \"http://test-url/media/laptop.jpeg\""
        },
        {
          "lineno": 50,
          "line": "    mock_bucket = mock_storage_client.bucket.return_value"
        },
        {
          "lineno": 51,
          "line": "    mock_blob = mock_bucket.blob.return_value"
        },
        {
          "lineno": 52,
          "line": "    mock_blob.upload_from_string.assert_called_once()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 37,
          "end_line": 39,
          "label": "async def test_upload_media_success(mock_settings, mock_storage_client):\n    # Create test JPEG data with valid signature\n    test_data = b\"\\xFF\\xD8\\xFF\" + b\"test data\"",
          "successors": [
            {
              "id": 2,
              "start_line": 41,
              "end_line": 45,
              "label": "test_file = fastapi.UploadFile(\n        filename=\"laptop.jpeg\",\n        file=io.BytesIO(test_data),\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 47,
                  "end_line": 47,
                  "label": "result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 49,
                      "end_line": 52,
                      "label": "assert result == \"http://test-url/media/laptop.jpeg\"\n    mock_bucket = mock_storage_client.bucket.return_value\n    mock_blob = mock_bucket.blob.return_value\n    mock_blob.upload_from_string.assert_called_once()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_invalid_type",
      "type": "function",
      "start_line": 55,
      "end_line": 67,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 55,
          "line": "async def test_upload_media_invalid_type(mock_settings, mock_storage_client):"
        },
        {
          "lineno": 56,
          "line": "    test_file = fastapi.UploadFile("
        },
        {
          "lineno": 57,
          "line": "        filename=\"test.txt\","
        },
        {
          "lineno": 58,
          "line": "        file=io.BytesIO(b\"test data\"),"
        },
        {
          "lineno": 59,
          "line": "        headers=starlette.datastructures.Headers({\"content-type\": \"text/plain\"}),"
        },
        {
          "lineno": 60,
          "line": "    )"
        },
        {
          "lineno": 61,
          "line": ""
        },
        {
          "lineno": 62,
          "line": "    with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):"
        },
        {
          "lineno": 63,
          "line": "        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)"
        },
        {
          "lineno": 64,
          "line": ""
        },
        {
          "lineno": 65,
          "line": "    mock_bucket = mock_storage_client.bucket.return_value"
        },
        {
          "lineno": 66,
          "line": "    mock_blob = mock_bucket.blob.return_value"
        },
        {
          "lineno": 67,
          "line": "    mock_blob.upload_from_string.assert_not_called()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 55,
          "end_line": 61,
          "label": "async def test_upload_media_invalid_type(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.txt\",\n        file=io.BytesIO(b\"test data\"),\n        headers=starlette.datastructures.Headers({\"content-type\": \"text/plain\"}),\n    )\n",
          "successors": [
            {
              "id": 2,
              "start_line": 62,
              "end_line": 63,
              "label": "with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):\n    await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n",
              "successors": [
                {
                  "id": 3,
                  "start_line": 65,
                  "end_line": 67,
                  "label": "mock_bucket = mock_storage_client.bucket.return_value\nmock_blob = mock_bucket.blob.return_value\nmock_blob.upload_from_string.assert_not_called()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_missing_credentials",
      "type": "function",
      "start_line": 70,
      "end_line": 83,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 70,
          "line": "async def test_upload_media_missing_credentials(monkeypatch):"
        },
        {
          "lineno": 71,
          "line": "    settings = Settings()"
        },
        {
          "lineno": 72,
          "line": "    settings.config.media_gcs_bucket_name = \"\""
        },
        {
          "lineno": 73,
          "line": "    settings.config.google_application_credentials = \"\""
        },
        {
          "lineno": 74,
          "line": "    monkeypatch.setattr(\"backend.server.v2.store.media.Settings\", lambda: settings)"
        },
        {
          "lineno": 75,
          "line": ""
        },
        {
          "lineno": 76,
          "line": "    test_file = fastapi.UploadFile("
        },
        {
          "lineno": 77,
          "line": "        filename=\"laptop.jpeg\","
        },
        {
          "lineno": 78,
          "line": "        file=io.BytesIO(b\"\\xFF\\xD8\\xFF\" + b\"test data\"),  # Valid JPEG signature"
        },
        {
          "lineno": 79,
          "line": "        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),"
        },
        {
          "lineno": 80,
          "line": "    )"
        },
        {
          "lineno": 81,
          "line": ""
        },
        {
          "lineno": 82,
          "line": "    with pytest.raises(backend.server.v2.store.exceptions.StorageConfigError):"
        },
        {
          "lineno": 83,
          "line": "        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 70,
          "end_line": 72,
          "successors": []
        },
        {}
      ]
    },
    {
      "name": "test_upload_media_video_type",
      "type": "function",
      "start_line": 86,
      "end_line": 98,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 86,
          "line": "async def test_upload_media_video_type(mock_settings, mock_storage_client):"
        },
        {
          "lineno": 87,
          "line": "    test_file = fastapi.UploadFile("
        },
        {
          "lineno": 88,
          "line": "        filename=\"test.mp4\","
        },
        {
          "lineno": 89,
          "line": "        file=io.BytesIO(b\"\\x00\\x00\\x00\\x18ftypmp42\"),  # Valid MP4 signature"
        },
        {
          "lineno": 90,
          "line": "        headers=starlette.datastructures.Headers({\"content-type\": \"video/mp4\"}),"
        },
        {
          "lineno": 91,
          "line": "    )"
        },
        {
          "lineno": 92,
          "line": ""
        },
        {
          "lineno": 93,
          "line": "    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)"
        },
        {
          "lineno": 94,
          "line": ""
        },
        {
          "lineno": 95,
          "line": "    assert result == \"http://test-url/media/laptop.jpeg\""
        },
        {
          "lineno": 96,
          "line": "    mock_bucket = mock_storage_client.bucket.return_value"
        },
        {
          "lineno": 97,
          "line": "    mock_blob = mock_bucket.blob.return_value"
        },
        {
          "lineno": 98,
          "line": "    mock_blob.upload_from_string.assert_called_once()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 86,
          "end_line": 91,
          "label": "async def test_upload_media_video_type(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.mp4\",\n        file=io.BytesIO(b\"\\x00\\x00\\x00\\x18ftypmp42\"),  # Valid MP4 signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"video/mp4\"}),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 93,
              "end_line": 93,
              "label": "result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 95,
                  "end_line": 98,
                  "label": "assert result == \"http://test-url/media/laptop.jpeg\"\nmock_bucket = mock_storage_client.bucket.return_value\nmock_blob = mock_bucket.blob.return_value\nmock_blob.upload_from_string.assert_called_once()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_file_too_large",
      "type": "function",
      "start_line": 101,
      "end_line": 112,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 101,
          "line": "async def test_upload_media_file_too_large(mock_settings, mock_storage_client):"
        },
        {
          "lineno": 102,
          "line": "    large_data = b\"\\xFF\\xD8\\xFF\" + b\"x\" * ("
        },
        {
          "lineno": 103,
          "line": "        50 * 1024 * 1024 + 1"
        },
        {
          "lineno": 104,
          "line": "    )  # 50MB + 1 byte with valid JPEG signature"
        },
        {
          "lineno": 105,
          "line": "    test_file = fastapi.UploadFile("
        },
        {
          "lineno": 106,
          "line": "        filename=\"laptop.jpeg\","
        },
        {
          "lineno": 107,
          "line": "        file=io.BytesIO(large_data),"
        },
        {
          "lineno": 108,
          "line": "        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),"
        },
        {
          "lineno": 109,
          "line": "    )"
        },
        {
          "lineno": 110,
          "line": ""
        },
        {
          "lineno": 111,
          "line": "    with pytest.raises(backend.server.v2.store.exceptions.FileSizeTooLargeError):"
        },
        {
          "lineno": 112,
          "line": "        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 101,
          "end_line": 109,
          "label": "async def test_upload_media_file_too_large(mock_settings, mock_storage_client):\n    large_data = b\"\\xFF\\xD8\\xFF\" + b\"x\" * (\n        50 * 1024 * 1024 + 1\n    )  # 50MB + 1 byte with valid JPEG signature\n    test_file = fastapi.UploadFile(\n        filename=\"laptop.jpeg\",\n        file=io.BytesIO(large_data),\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 111,
              "end_line": 112,
              "label": "with pytest.raises(backend.server.v2.store.exceptions.FileSizeTooLargeError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_file_read_error",
      "type": "function",
      "start_line": 115,
      "end_line": 124,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 115,
          "line": "async def test_upload_media_file_read_error(mock_settings, mock_storage_client):"
        },
        {
          "lineno": 116,
          "line": "    test_file = fastapi.UploadFile("
        },
        {
          "lineno": 117,
          "line": "        filename=\"laptop.jpeg\","
        },
        {
          "lineno": 118,
          "line": "        file=io.BytesIO(b\"\"),  # Empty file that will raise error on read"
        },
        {
          "lineno": 119,
          "line": "        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),"
        },
        {
          "lineno": 120,
          "line": "    )"
        },
        {
          "lineno": 121,
          "line": "    test_file.read = unittest.mock.AsyncMock(side_effect=Exception(\"Read error\"))"
        },
        {
          "lineno": 122,
          "line": ""
        },
        {
          "lineno": 123,
          "line": "    with pytest.raises(backend.server.v2.store.exceptions.FileReadError):"
        },
        {
          "lineno": 124,
          "line": "        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 115,
          "end_line": 121,
          "label": "async def test_upload_media_file_read_error(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"laptop.jpeg\",\n        file=io.BytesIO(b\"\"),  # Empty file that will raise error on read\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n    test_file.read = unittest.mock.AsyncMock(side_effect=Exception(\"Read error\"))",
          "successors": [
            {
              "id": 2,
              "start_line": 123,
              "end_line": 124,
              "label": "with pytest.raises(backend.server.v2.store.exceptions.FileReadError):\n    await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_png_success",
      "type": "function",
      "start_line": 127,
      "end_line": 135,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 127,
          "line": "async def test_upload_media_png_success(mock_settings, mock_storage_client):"
        },
        {
          "lineno": 128,
          "line": "    test_file = fastapi.UploadFile("
        },
        {
          "lineno": 129,
          "line": "        filename=\"test.png\","
        },
        {
          "lineno": 130,
          "line": "        file=io.BytesIO(b\"\\x89PNG\\r\\n\\x1a\\n\"),  # Valid PNG signature"
        },
        {
          "lineno": 131,
          "line": "        headers=starlette.datastructures.Headers({\"content-type\": \"image/png\"}),"
        },
        {
          "lineno": 132,
          "line": "    )"
        },
        {
          "lineno": 133,
          "line": ""
        },
        {
          "lineno": 134,
          "line": "    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)"
        },
        {
          "lineno": 135,
          "line": "    assert result == \"http://test-url/media/laptop.jpeg\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 127,
          "end_line": 132,
          "label": "async def test_upload_media_png_success(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.png\",\n        file=io.BytesIO(b\"\\x89PNG\\r\\n\\x1a\\n\"),  # Valid PNG signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/png\"}),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 134,
              "end_line": 135,
              "label": "result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n    assert result == \"http://test-url/media/laptop.jpeg\"",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_gif_success",
      "type": "function",
      "start_line": 138,
      "end_line": 146,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 138,
          "line": "async def test_upload_media_gif_success(mock_settings, mock_storage_client):"
        },
        {
          "lineno": 139,
          "line": "    test_file = fastapi.UploadFile("
        },
        {
          "lineno": 140,
          "line": "        filename=\"test.gif\","
        },
        {
          "lineno": 141,
          "line": "        file=io.BytesIO(b\"GIF89a\"),  # Valid GIF signature"
        },
        {
          "lineno": 142,
          "line": "        headers=starlette.datastructures.Headers({\"content-type\": \"image/gif\"}),"
        },
        {
          "lineno": 143,
          "line": "    )"
        },
        {
          "lineno": 144,
          "line": ""
        },
        {
          "lineno": 145,
          "line": "    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)"
        },
        {
          "lineno": 146,
          "line": "    assert result == \"http://test-url/media/laptop.jpeg\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 138,
          "end_line": 138,
          "label": "async def test_upload_media_gif_success(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "start_line": 139,
              "end_line": 143,
              "label": "    test_file = fastapi.UploadFile(\n        filename=\"test.gif\",\n        file=io.BytesIO(b\"GIF89a\"),  # Valid GIF signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/gif\"}),\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 145,
                  "end_line": 146,
                  "label": "    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n    assert result == \"http://test-url/media/laptop.jpeg\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_webp_success",
      "type": "function",
      "start_line": 149,
      "end_line": 157,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 149,
          "line": "async def test_upload_media_webp_success(mock_settings, mock_storage_client):"
        },
        {
          "lineno": 150,
          "line": "    test_file = fastapi.UploadFile("
        },
        {
          "lineno": 151,
          "line": "        filename=\"test.webp\","
        },
        {
          "lineno": 152,
          "line": "        file=io.BytesIO(b\"RIFF\\x00\\x00\\x00\\x00WEBP\"),  # Valid WebP signature"
        },
        {
          "lineno": 153,
          "line": "        headers=starlette.datastructures.Headers({\"content-type\": \"image/webp\"}),"
        },
        {
          "lineno": 154,
          "line": "    )"
        },
        {
          "lineno": 155,
          "line": ""
        },
        {
          "lineno": 156,
          "line": "    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)"
        },
        {
          "lineno": 157,
          "line": "    assert result == \"http://test-url/media/laptop.jpeg\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 149,
          "end_line": 149,
          "label": "async def test_upload_media_webp_success(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "start_line": 150,
              "end_line": 154,
              "label": "    test_file = fastapi.UploadFile(\n        filename=\"test.webp\",\n        file=io.BytesIO(b\"RIFF\\x00\\x00\\x00\\x00WEBP\"),  # Valid WebP signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/webp\"}),\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 156,
                  "end_line": 157,
                  "label": "    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n    assert result == \"http://test-url/media/laptop.jpeg\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_webm_success",
      "type": "function",
      "start_line": 160,
      "end_line": 168,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 160,
          "line": "async def test_upload_media_webm_success(mock_settings, mock_storage_client):"
        },
        {
          "lineno": 161,
          "line": "    test_file = fastapi.UploadFile("
        },
        {
          "lineno": 162,
          "line": "        filename=\"test.webm\","
        },
        {
          "lineno": 163,
          "line": "        file=io.BytesIO(b\"\\x1a\\x45\\xdf\\xa3\"),  # Valid WebM signature"
        },
        {
          "lineno": 164,
          "line": "        headers=starlette.datastructures.Headers({\"content-type\": \"video/webm\"}),"
        },
        {
          "lineno": 165,
          "line": "    )"
        },
        {
          "lineno": 166,
          "line": ""
        },
        {
          "lineno": 167,
          "line": "    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)"
        },
        {
          "lineno": 168,
          "line": "    assert result == \"http://test-url/media/laptop.jpeg\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 160,
          "end_line": 168,
          "label": "async def test_upload_media_webm_success(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.webm\",\n        file=io.BytesIO(b\"\\x1a\\x45\\xdf\\xa3\"),  # Valid WebM signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"video/webm\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n    assert result == \"http://test-url/media/laptop.jpeg\"",
          "successors": []
        }
      ]
    },
    {
      "name": "test_upload_media_mismatched_signature",
      "type": "function",
      "start_line": 171,
      "end_line": 179,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 171,
          "line": "async def test_upload_media_mismatched_signature(mock_settings, mock_storage_client):"
        },
        {
          "lineno": 172,
          "line": "    test_file = fastapi.UploadFile("
        },
        {
          "lineno": 173,
          "line": "        filename=\"test.jpeg\","
        },
        {
          "lineno": 174,
          "line": "        file=io.BytesIO(b\"\\x89PNG\\r\\n\\x1a\\n\"),  # PNG signature with JPEG content type"
        },
        {
          "lineno": 175,
          "line": "        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),"
        },
        {
          "lineno": 176,
          "line": "    )"
        },
        {
          "lineno": 177,
          "line": ""
        },
        {
          "lineno": 178,
          "line": "    with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):"
        },
        {
          "lineno": 179,
          "line": "        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 171,
          "end_line": 176,
          "label": "async def test_upload_media_mismatched_signature(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.jpeg\",\n        file=io.BytesIO(b\"\\x89PNG\\r\\n\\x1a\\n\"),  # PNG signature with JPEG content type\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 178,
              "end_line": 179,
              "label": "with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):\n    await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_invalid_signature",
      "type": "function",
      "start_line": 182,
      "end_line": 190,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 182,
          "line": "async def test_upload_media_invalid_signature(mock_settings, mock_storage_client):"
        },
        {
          "lineno": 183,
          "line": "    test_file = fastapi.UploadFile("
        },
        {
          "lineno": 184,
          "line": "        filename=\"test.jpeg\","
        },
        {
          "lineno": 185,
          "line": "        file=io.BytesIO(b\"invalid signature\"),"
        },
        {
          "lineno": 186,
          "line": "        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),"
        },
        {
          "lineno": 187,
          "line": "    )"
        },
        {
          "lineno": 188,
          "line": ""
        },
        {
          "lineno": 189,
          "line": "    with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):"
        },
        {
          "lineno": 190,
          "line": "        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 182,
          "end_line": 187,
          "label": "async def test_upload_media_invalid_signature(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.jpeg\",\n        file=io.BytesIO(b\"invalid signature\"),\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 189,
              "end_line": 190,
              "label": "with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):\n    await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import io"
    },
    {
      "lineno": 2,
      "line": "import unittest.mock"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "import fastapi"
    },
    {
      "lineno": 5,
      "line": "import pytest"
    },
    {
      "lineno": 6,
      "line": "import starlette.datastructures"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "import backend.server.v2.store.exceptions"
    },
    {
      "lineno": 9,
      "line": "import backend.server.v2.store.media"
    },
    {
      "lineno": 10,
      "line": "from backend.util.settings import Settings"
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "@pytest.fixture"
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 22,
      "line": "@pytest.fixture"
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 36,
      "line": ""
    },
    {
      "lineno": 53,
      "line": ""
    },
    {
      "lineno": 54,
      "line": ""
    },
    {
      "lineno": 68,
      "line": ""
    },
    {
      "lineno": 69,
      "line": ""
    },
    {
      "lineno": 84,
      "line": ""
    },
    {
      "lineno": 85,
      "line": ""
    },
    {
      "lineno": 99,
      "line": ""
    },
    {
      "lineno": 100,
      "line": ""
    },
    {
      "lineno": 113,
      "line": ""
    },
    {
      "lineno": 114,
      "line": ""
    },
    {
      "lineno": 125,
      "line": ""
    },
    {
      "lineno": 126,
      "line": ""
    },
    {
      "lineno": 136,
      "line": ""
    },
    {
      "lineno": 137,
      "line": ""
    },
    {
      "lineno": 147,
      "line": ""
    },
    {
      "lineno": 148,
      "line": ""
    },
    {
      "lineno": 158,
      "line": ""
    },
    {
      "lineno": 159,
      "line": ""
    },
    {
      "lineno": 169,
      "line": ""
    },
    {
      "lineno": 170,
      "line": ""
    },
    {
      "lineno": 180,
      "line": ""
    },
    {
      "lineno": 181,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 11,
      "label": "import io\nimport unittest.mock\n\nimport fastapi\nimport pytest\nimport starlette.datastructures\n\nimport backend.server.v2.store.exceptions\nimport backend.server.v2.store.media\nfrom backend.util.settings import Settings\n",
      "successors": [
        {
          "id": 2,
          "start_line": 13,
          "end_line": 13,
          "label": "@pytest.fixture",
          "successors": [
            {
              "id": 3,
              "start_line": 20,
              "end_line": 21,
              "label": "",
              "successors": [
                {
                  "id": 4,
                  "start_line": 22,
                  "end_line": 22,
                  "label": "@pytest.fixture",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 35,
                      "end_line": 36,
                      "label": "",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 53,
                          "end_line": 54,
                          "label": "",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 68,
                              "end_line": 69,
                              "label": "",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 84,
                                  "end_line": 85,
                                  "label": "",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 99,
                                      "end_line": 100,
                                      "label": "",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "start_line": 113,
                                          "end_line": 114,
                                          "label": "",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "start_line": 125,
                                              "end_line": 126,
                                              "label": "",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "start_line": 136,
                                                  "end_line": 137,
                                                  "label": "",
                                                  "successors": [
                                                    {
                                                      "id": 13,
                                                      "start_line": 147,
                                                      "end_line": 148,
                                                      "label": "",
                                                      "successors": [
                                                        {
                                                          "id": 14,
                                                          "start_line": 158,
                                                          "end_line": 159,
                                                          "label": "",
                                                          "successors": [
                                                            {
                                                              "id": 15,
                                                              "start_line": 169,
                                                              "end_line": 170,
                                                              "label": "",
                                                              "successors": [
                                                                {
                                                                  "id": 16,
                                                                  "start_line": 180,
                                                                  "end_line": 181,
                                                                  "label": "",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}