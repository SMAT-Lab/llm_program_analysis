{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 109,
  "functions": [
    {
      "name": "logical_left_shift",
      "type": "function",
      "start_line": 6,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "def logical_left_shift(number: int, shift_amount: int) -> str:"
        },
        {
          "lineno": 7,
          "line": "    \"\"\""
        },
        {
          "lineno": 8,
          "line": "    Take in 2 positive integers."
        },
        {
          "lineno": 9,
          "line": "    'number' is the integer to be logically left shifted 'shift_amount' times."
        },
        {
          "lineno": 10,
          "line": "    i.e. (number << shift_amount)"
        },
        {
          "lineno": 11,
          "line": "    Return the shifted binary representation."
        },
        {
          "lineno": 12,
          "line": ""
        },
        {
          "lineno": 13,
          "line": "    >>> logical_left_shift(0, 1)"
        },
        {
          "lineno": 14,
          "line": "    '0b00'"
        },
        {
          "lineno": 15,
          "line": "    >>> logical_left_shift(1, 1)"
        },
        {
          "lineno": 16,
          "line": "    '0b10'"
        },
        {
          "lineno": 17,
          "line": "    >>> logical_left_shift(1, 5)"
        },
        {
          "lineno": 18,
          "line": "    '0b100000'"
        },
        {
          "lineno": 19,
          "line": "    >>> logical_left_shift(17, 2)"
        },
        {
          "lineno": 20,
          "line": "    '0b1000100'"
        },
        {
          "lineno": 21,
          "line": "    >>> logical_left_shift(1983, 4)"
        },
        {
          "lineno": 22,
          "line": "    '0b111101111110000'"
        },
        {
          "lineno": 23,
          "line": "    >>> logical_left_shift(1, -1)"
        },
        {
          "lineno": 24,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 25,
          "line": "        ..."
        },
        {
          "lineno": 26,
          "line": "    ValueError: both inputs must be positive integers"
        },
        {
          "lineno": 27,
          "line": "    \"\"\""
        },
        {
          "lineno": 28,
          "line": "    if number < 0 or shift_amount < 0:"
        },
        {
          "lineno": 29,
          "line": "        raise ValueError(\"both inputs must be positive integers\")"
        },
        {
          "lineno": 30,
          "line": ""
        },
        {
          "lineno": 31,
          "line": "    binary_number = str(bin(number))"
        },
        {
          "lineno": 32,
          "line": "    binary_number += \"0\" * shift_amount"
        },
        {
          "lineno": 33,
          "line": "    return binary_number"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 27,
          "label": "def logical_left_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 28,
              "end_line": 29,
              "label": "if number < 0 or shift_amount < 0:\n    raise ValueError(\"both inputs must be positive integers\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 31,
                  "end_line": 33,
                  "label": "binary_number = str(bin(number))\nbinary_number += \"0\" * shift_amount\nreturn binary_number",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "logical_right_shift",
      "type": "function",
      "start_line": 36,
      "end_line": 65,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 36,
          "line": "def logical_right_shift(number: int, shift_amount: int) -> str:"
        },
        {
          "lineno": 37,
          "line": "    \"\"\""
        },
        {
          "lineno": 38,
          "line": "    Take in positive 2 integers."
        },
        {
          "lineno": 39,
          "line": "    'number' is the integer to be logically right shifted 'shift_amount' times."
        },
        {
          "lineno": 40,
          "line": "    i.e. (number >>> shift_amount)"
        },
        {
          "lineno": 41,
          "line": "    Return the shifted binary representation."
        },
        {
          "lineno": 42,
          "line": ""
        },
        {
          "lineno": 43,
          "line": "    >>> logical_right_shift(0, 1)"
        },
        {
          "lineno": 44,
          "line": "    '0b0'"
        },
        {
          "lineno": 45,
          "line": "    >>> logical_right_shift(1, 1)"
        },
        {
          "lineno": 46,
          "line": "    '0b0'"
        },
        {
          "lineno": 47,
          "line": "    >>> logical_right_shift(1, 5)"
        },
        {
          "lineno": 48,
          "line": "    '0b0'"
        },
        {
          "lineno": 49,
          "line": "    >>> logical_right_shift(17, 2)"
        },
        {
          "lineno": 50,
          "line": "    '0b100'"
        },
        {
          "lineno": 51,
          "line": "    >>> logical_right_shift(1983, 4)"
        },
        {
          "lineno": 52,
          "line": "    '0b1111011'"
        },
        {
          "lineno": 53,
          "line": "    >>> logical_right_shift(1, -1)"
        },
        {
          "lineno": 54,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 55,
          "line": "        ..."
        },
        {
          "lineno": 56,
          "line": "    ValueError: both inputs must be positive integers"
        },
        {
          "lineno": 57,
          "line": "    \"\"\""
        },
        {
          "lineno": 58,
          "line": "    if number < 0 or shift_amount < 0:"
        },
        {
          "lineno": 59,
          "line": "        raise ValueError(\"both inputs must be positive integers\")"
        },
        {
          "lineno": 60,
          "line": ""
        },
        {
          "lineno": 61,
          "line": "    binary_number = str(bin(number))[2:]"
        },
        {
          "lineno": 62,
          "line": "    if shift_amount >= len(binary_number):"
        },
        {
          "lineno": 63,
          "line": "        return \"0b0\""
        },
        {
          "lineno": 64,
          "line": "    shifted_binary_number = binary_number[: len(binary_number) - shift_amount]"
        },
        {
          "lineno": 65,
          "line": "    return \"0b\" + shifted_binary_number"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 36,
          "end_line": 57,
          "label": "def logical_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 58,
              "end_line": 59,
              "label": "if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 61,
                  "end_line": 65,
                  "label": "binary_number = str(bin(number))[2:]\n    if shift_amount >= len(binary_number):\n        return \"0b0\"\n    shifted_binary_number = binary_number[: len(binary_number) - shift_amount]\n    return \"0b\" + shifted_binary_number",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "arithmetic_right_shift",
      "type": "function",
      "start_line": 68,
      "end_line": 103,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 68,
          "line": "def arithmetic_right_shift(number: int, shift_amount: int) -> str:"
        },
        {
          "lineno": 69,
          "line": "    \"\"\""
        },
        {
          "lineno": 70,
          "line": "    Take in 2 integers."
        },
        {
          "lineno": 71,
          "line": "    'number' is the integer to be arithmetically right shifted 'shift_amount' times."
        },
        {
          "lineno": 72,
          "line": "    i.e. (number >> shift_amount)"
        },
        {
          "lineno": 73,
          "line": "    Return the shifted binary representation."
        },
        {
          "lineno": 74,
          "line": ""
        },
        {
          "lineno": 75,
          "line": "    >>> arithmetic_right_shift(0, 1)"
        },
        {
          "lineno": 76,
          "line": "    '0b00'"
        },
        {
          "lineno": 77,
          "line": "    >>> arithmetic_right_shift(1, 1)"
        },
        {
          "lineno": 78,
          "line": "    '0b00'"
        },
        {
          "lineno": 79,
          "line": "    >>> arithmetic_right_shift(-1, 1)"
        },
        {
          "lineno": 80,
          "line": "    '0b11'"
        },
        {
          "lineno": 81,
          "line": "    >>> arithmetic_right_shift(17, 2)"
        },
        {
          "lineno": 82,
          "line": "    '0b000100'"
        },
        {
          "lineno": 83,
          "line": "    >>> arithmetic_right_shift(-17, 2)"
        },
        {
          "lineno": 84,
          "line": "    '0b111011'"
        },
        {
          "lineno": 85,
          "line": "    >>> arithmetic_right_shift(-1983, 4)"
        },
        {
          "lineno": 86,
          "line": "    '0b111110000100'"
        },
        {
          "lineno": 87,
          "line": "    \"\"\""
        },
        {
          "lineno": 88,
          "line": "    if number >= 0:  # Get binary representation of positive number"
        },
        {
          "lineno": 89,
          "line": "        binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]"
        },
        {
          "lineno": 90,
          "line": "    else:  # Get binary (2's complement) representation of negative number"
        },
        {
          "lineno": 91,
          "line": "        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number"
        },
        {
          "lineno": 92,
          "line": "        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]"
        },
        {
          "lineno": 93,
          "line": "        binary_number = ("
        },
        {
          "lineno": 94,
          "line": "            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number"
        },
        {
          "lineno": 95,
          "line": "        )"
        },
        {
          "lineno": 96,
          "line": ""
        },
        {
          "lineno": 97,
          "line": "    if shift_amount >= len(binary_number):"
        },
        {
          "lineno": 98,
          "line": "        return \"0b\" + binary_number[0] * len(binary_number)"
        },
        {
          "lineno": 99,
          "line": "    return ("
        },
        {
          "lineno": 100,
          "line": "        \"0b\""
        },
        {
          "lineno": 101,
          "line": "        + binary_number[0] * shift_amount"
        },
        {
          "lineno": 102,
          "line": "        + binary_number[: len(binary_number) - shift_amount]"
        },
        {
          "lineno": 103,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 68,
          "end_line": 87,
          "label": "def arithmetic_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 88,
              "end_line": 89,
              "label": "if number >= 0:  # Get binary representation of positive number\n        binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]",
              "successors": [
                {
                  "id": 3,
                  "start_line": 97,
                  "end_line": 98,
                  "label": "if shift_amount >= len(binary_number):\n        return \"0b\" + binary_number[0] * len(binary_number)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 99,
                  "end_line": 103,
                  "label": "return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "start_line": 90,
              "end_line": 95,
              "label": "else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
              "successors": [
                {
                  "id": 6,
                  "start_line": 97,
                  "end_line": 98,
                  "label": "if shift_amount >= len(binary_number):\n        return \"0b\" + binary_number[0] * len(binary_number)",
                  "successors": []
                },
                {
                  "id": 7,
                  "start_line": 99,
                  "end_line": 103,
                  "label": "return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# Information on binary shifts:"
    },
    {
      "lineno": 2,
      "line": "# https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types"
    },
    {
      "lineno": 3,
      "line": "# https://www.interviewcake.com/concept/java/bit-shift"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 66,
      "line": ""
    },
    {
      "lineno": 67,
      "line": ""
    },
    {
      "lineno": 104,
      "line": ""
    },
    {
      "lineno": 105,
      "line": ""
    },
    {
      "lineno": 106,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 107,
      "line": "    import doctest"
    },
    {
      "lineno": 108,
      "line": ""
    },
    {
      "lineno": 109,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 5,
      "label": "# Information on binary shifts:\n# https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types\n# https://www.interviewcake.com/concept/java/bit-shift\n\n",
      "successors": [
        {
          "id": 2,
          "start_line": 34,
          "end_line": 35,
          "label": "\n",
          "successors": [
            {
              "id": 3,
              "start_line": 66,
              "end_line": 67,
              "label": "\n",
              "successors": [
                {
                  "id": 4,
                  "start_line": 104,
                  "end_line": 105,
                  "label": "\n",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 106,
                      "end_line": 109,
                      "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}