{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 122,
  "functions": [],
  "classes": [
    {
      "name": "Rank",
      "type": "class",
      "start_line": 6,
      "end_line": 10,
      "functions": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "class Rank(Enum):"
        },
        {
          "lineno": 7,
          "line": ""
        },
        {
          "lineno": 8,
          "line": "    OPERATOR = 0"
        },
        {
          "lineno": 9,
          "line": "    SUPERVISOR = 1"
        },
        {
          "lineno": 10,
          "line": "    DIRECTOR = 2"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 10,
          "label": "class Rank(Enum):\n\n    OPERATOR = 0\n    SUPERVISOR = 1\n    DIRECTOR = 2\n",
          "successors": []
        }
      ]
    },
    {
      "name": "Employee",
      "type": "class",
      "start_line": 13,
      "end_line": 40,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 15,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 15,
              "line": "    def __init__(self, employee_id, name, rank, call_center):"
            },
            {
              "lineno": 16,
              "line": "        self.employee_id = employee_id"
            },
            {
              "lineno": 17,
              "line": "        self.name = name"
            },
            {
              "lineno": 18,
              "line": "        self.rank = rank"
            },
            {
              "lineno": 19,
              "line": "        self.call = None"
            },
            {
              "lineno": 20,
              "line": "        self.call_center = call_center"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 15,
              "end_line": 20,
              "label": "\n    def __init__(self, employee_id, name, rank, call_center):\n        self.employee_id = employee_id\n        self.name = name\n        self.rank = rank\n        self.call = None\n        self.call_center = call_center",
              "successors": []
            }
          ]
        },
        {
          "name": "take_call",
          "type": "function",
          "start_line": 22,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    def take_call(self, call):"
            },
            {
              "lineno": 23,
              "line": "        \"\"\"Assume the employee will always successfully take the call.\"\"\""
            },
            {
              "lineno": 24,
              "line": "        self.call = call"
            },
            {
              "lineno": 25,
              "line": "        self.call.employee = self"
            },
            {
              "lineno": 26,
              "line": "        self.call.state = CallState.IN_PROGRESS"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 22,
              "end_line": 26,
              "label": "    def take_call(self, call):\n        \"\"\"Assume the employee will always successfully take the call.\"\"\"\n        self.call = call\n        self.call.employee = self\n        self.call.state = CallState.IN_PROGRESS",
              "successors": []
            }
          ]
        },
        {
          "name": "complete_call",
          "type": "function",
          "start_line": 28,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    def complete_call(self):"
            },
            {
              "lineno": 29,
              "line": "        self.call.state = CallState.COMPLETE"
            },
            {
              "lineno": 30,
              "line": "        self.call_center.notify_call_completed(self.call)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 28,
              "end_line": 28,
              "label": "    def complete_call(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 29,
                  "end_line": 30,
                  "label": "        self.call.state = CallState.COMPLETE\n        self.call_center.notify_call_completed(self.call)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "escalate_call",
          "type": "function",
          "start_line": 33,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 33,
              "line": "    def escalate_call(self):"
            },
            {
              "lineno": 34,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 33,
              "end_line": 34,
              "label": "    def escalate_call(self):\n        pass",
              "successors": []
            }
          ]
        },
        {
          "name": "_escalate_call",
          "type": "function",
          "start_line": 36,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 36,
              "line": "    def _escalate_call(self):"
            },
            {
              "lineno": 37,
              "line": "        self.call.state = CallState.READY"
            },
            {
              "lineno": 38,
              "line": "        call = self.call"
            },
            {
              "lineno": 39,
              "line": "        self.call = None"
            },
            {
              "lineno": 40,
              "line": "        self.call_center.notify_call_escalated(call)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 36,
              "end_line": 40,
              "label": "    def _escalate_call(self):\n        self.call.state = CallState.READY\n        call = self.call\n        self.call = None\n        self.call_center.notify_call_escalated(call)",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 13,
          "line": "class Employee(metaclass=ABCMeta):"
        },
        {
          "lineno": 14,
          "line": ""
        },
        {
          "lineno": 21,
          "line": ""
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 32,
          "line": "    @abstractmethod"
        },
        {
          "lineno": 35,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 13,
          "end_line": 13,
          "label": "class Employee(metaclass=ABCMeta):",
          "successors": [
            {
              "id": 2,
              "start_line": 32,
              "end_line": 32,
              "label": "@abstractmethod",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Operator",
      "type": "class",
      "start_line": 43,
      "end_line": 50,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 45,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 45,
              "line": "    def __init__(self, employee_id, name):"
            },
            {
              "lineno": 46,
              "line": "        super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 45,
              "end_line": 46,
              "label": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)\n",
              "successors": []
            }
          ]
        },
        {
          "name": "escalate_call",
          "type": "function",
          "start_line": 48,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 48,
              "line": "    def escalate_call(self):"
            },
            {
              "lineno": 49,
              "line": "        self.call.level = Rank.SUPERVISOR"
            },
            {
              "lineno": 50,
              "line": "        self._escalate_call()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 48,
              "end_line": 50,
              "label": "    def escalate_call(self):\n        self.call.level = Rank.SUPERVISOR\n        self._escalate_call()",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 43,
          "line": "class Operator(Employee):"
        },
        {
          "lineno": 44,
          "line": ""
        },
        {
          "lineno": 47,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "Supervisor",
      "type": "class",
      "start_line": 53,
      "end_line": 60,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 55,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 55,
              "line": "    def __init__(self, employee_id, name):"
            },
            {
              "lineno": 56,
              "line": "        super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 55,
              "end_line": 56,
              "label": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)",
              "successors": []
            }
          ]
        },
        {
          "name": "escalate_call",
          "type": "function",
          "start_line": 58,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 58,
              "line": "    def escalate_call(self):"
            },
            {
              "lineno": 59,
              "line": "        self.call.level = Rank.DIRECTOR"
            },
            {
              "lineno": 60,
              "line": "        self._escalate_call()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 58,
              "end_line": 60,
              "label": "    def escalate_call(self):\n        self.call.level = Rank.DIRECTOR\n        self._escalate_call()",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 53,
          "line": "class Supervisor(Employee):"
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 57,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 53,
          "end_line": 57,
          "label": "class Supervisor(Employee):\n\n\n",
          "successors": []
        }
      ]
    },
    {
      "name": "Director",
      "type": "class",
      "start_line": 63,
      "end_line": 69,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 65,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 65,
              "line": "    def __init__(self, employee_id, name):"
            },
            {
              "lineno": 66,
              "line": "        super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 65,
              "end_line": 66,
              "label": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)",
              "successors": []
            }
          ]
        },
        {
          "name": "escalate_call",
          "type": "function",
          "start_line": 68,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 68,
              "line": "    def escalate_call(self):"
            },
            {
              "lineno": 69,
              "line": "        raise NotImplementedError('Directors must be able to handle any call')"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 68,
              "end_line": 69,
              "label": "    def escalate_call(self):\n        raise NotImplementedError('Directors must be able to handle any call')",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 63,
          "line": "class Director(Employee):"
        },
        {
          "lineno": 64,
          "line": ""
        },
        {
          "lineno": 67,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 63,
          "end_line": 63,
          "label": "class Director(Employee):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 64,
          "end_line": 64,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 67,
          "end_line": 67,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "name": "CallState",
      "type": "class",
      "start_line": 72,
      "end_line": 76,
      "functions": [],
      "simplified_code": [
        {
          "lineno": 72,
          "line": "class CallState(Enum):"
        },
        {
          "lineno": 73,
          "line": ""
        },
        {
          "lineno": 74,
          "line": "    READY = 0"
        },
        {
          "lineno": 75,
          "line": "    IN_PROGRESS = 1"
        },
        {
          "lineno": 76,
          "line": "    COMPLETE = 2"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 72,
          "end_line": 76,
          "label": "class CallState(Enum):\n\n    READY = 0\n    IN_PROGRESS = 1\n    COMPLETE = 2\n",
          "successors": []
        }
      ]
    },
    {
      "name": "Call",
      "type": "class",
      "start_line": 79,
      "end_line": 84,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 81,
          "end_line": 83,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 81,
              "line": "    def __init__(self, rank):"
            },
            {
              "lineno": 82,
              "line": "        self.state = CallState.READY"
            },
            {
              "lineno": 83,
              "line": "        self.rank = rank"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 81,
              "end_line": 83,
              "label": "    def __init__(self, rank):\n        self.state = CallState.READY\n        self.rank = rank",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 79,
          "line": "class Call(object):"
        },
        {
          "lineno": 80,
          "line": ""
        },
        {
          "lineno": 84,
          "line": "        self.employee = None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 79,
          "end_line": 79,
          "label": "class Call(object):",
          "successors": [
            {
              "id": 2,
              "start_line": 84,
              "end_line": 84,
              "label": "        self.employee = None",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "CallCenter",
      "type": "class",
      "start_line": 87,
      "end_line": 122,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 89,
          "end_line": 93,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 89,
              "line": "    def __init__(self, operators, supervisors, directors):"
            },
            {
              "lineno": 90,
              "line": "        self.operators = operators"
            },
            {
              "lineno": 91,
              "line": "        self.supervisors = supervisors"
            },
            {
              "lineno": 92,
              "line": "        self.directors = directors"
            },
            {
              "lineno": 93,
              "line": "        self.queued_calls = deque()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 89,
              "end_line": 93,
              "label": "    def __init__(self, operators, supervisors, directors):\n        self.operators = operators\n        self.supervisors = supervisors\n        self.directors = directors\n        self.queued_calls = deque()",
              "successors": []
            }
          ]
        },
        {
          "name": "dispatch_call",
          "type": "function",
          "start_line": 95,
          "end_line": 106,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 95,
              "line": "    def dispatch_call(self, call):"
            },
            {
              "lineno": 96,
              "line": "        if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):"
            },
            {
              "lineno": 97,
              "line": "            raise ValueError('Invalid call rank: {}'.format(call.rank))"
            },
            {
              "lineno": 98,
              "line": "        employee = None"
            },
            {
              "lineno": 99,
              "line": "        if call.rank == Rank.OPERATOR:"
            },
            {
              "lineno": 100,
              "line": "            employee = self._dispatch_call(call, self.operators)"
            },
            {
              "lineno": 101,
              "line": "        if call.rank == Rank.SUPERVISOR or employee is None:"
            },
            {
              "lineno": 102,
              "line": "            employee = self._dispatch_call(call, self.supervisors)"
            },
            {
              "lineno": 103,
              "line": "        if call.rank == Rank.DIRECTOR or employee is None:"
            },
            {
              "lineno": 104,
              "line": "            employee = self._dispatch_call(call, self.directors)"
            },
            {
              "lineno": 105,
              "line": "        if employee is None:"
            },
            {
              "lineno": 106,
              "line": "            self.queued_calls.append(call)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 95,
              "end_line": 95,
              "label": "def dispatch_call(self, call):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 96,
                  "end_line": 97,
                  "label": "if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):\n    raise ValueError('Invalid call rank: {}'.format(call.rank))",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 98,
                      "end_line": 98,
                      "label": "employee = None",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 99,
                          "end_line": 100,
                          "label": "if call.rank == Rank.OPERATOR:\n    employee = self._dispatch_call(call, self.operators)",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 101,
                              "end_line": 102,
                              "label": "if call.rank == Rank.SUPERVISOR or employee is None:\n    employee = self._dispatch_call(call, self.supervisors)",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 103,
                                  "end_line": 104,
                                  "label": "if call.rank == Rank.DIRECTOR or employee is None:\n    employee = self._dispatch_call(call, self.directors)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 105,
                                      "end_line": 106,
                                      "label": "if employee is None:\n    self.queued_calls.append(call)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_dispatch_call",
          "type": "function",
          "start_line": 108,
          "end_line": 113,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 108,
              "line": "    def _dispatch_call(self, call, employees):"
            },
            {
              "lineno": 109,
              "line": "        for employee in employees:"
            },
            {
              "lineno": 110,
              "line": "            if employee.call is None:"
            },
            {
              "lineno": 111,
              "line": "                employee.take_call(call)"
            },
            {
              "lineno": 112,
              "line": "                return employee"
            },
            {
              "lineno": 113,
              "line": "        return None"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 108,
              "end_line": 108,
              "label": "    def _dispatch_call(self, call, employees):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 109,
                  "end_line": 109,
                  "label": "        for employee in employees:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 110,
                      "end_line": 112,
                      "label": "            if employee.call is None:\n                employee.take_call(call)\n                return employee",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 109,
                          "end_line": 109,
                          "label": "        for employee in employees:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 113,
                              "end_line": 113,
                              "label": "        return None",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 113,
                      "end_line": 113,
                      "label": "        return None",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "notify_call_escalated",
          "type": "function",
          "start_line": 115,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 115,
              "line": "    def notify_call_escalated(self, call):"
            },
            {
              "lineno": 116,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 115,
              "end_line": 115,
              "label": "    def notify_call_escalated(self, call):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 116,
                  "end_line": 116,
                  "label": "        pass",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "notify_call_completed",
          "type": "function",
          "start_line": 118,
          "end_line": 119,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 118,
              "line": "    def notify_call_completed(self, call):"
            },
            {
              "lineno": 119,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 118,
              "end_line": 119,
              "label": "    def notify_call_completed(self, call):\n        pass",
              "successors": []
            }
          ]
        },
        {
          "name": "dispatch_queued_call_to_newly_freed_employee",
          "type": "function",
          "start_line": 121,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 121,
              "line": "    def dispatch_queued_call_to_newly_freed_employee(self, call, employee):"
            },
            {
              "lineno": 122,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 121,
              "end_line": 122,
              "label": "    def dispatch_queued_call_to_newly_freed_employee(self, call, employee):\n        pass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 87,
          "line": "class CallCenter(object):"
        },
        {
          "lineno": 88,
          "line": ""
        },
        {
          "lineno": 94,
          "line": ""
        },
        {
          "lineno": 107,
          "line": ""
        },
        {
          "lineno": 114,
          "line": ""
        },
        {
          "lineno": 117,
          "line": ""
        },
        {
          "lineno": 120,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 87,
          "end_line": 87,
          "label": "class CallCenter(object):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from abc import ABCMeta, abstractmethod"
    },
    {
      "lineno": 2,
      "line": "from collections import deque"
    },
    {
      "lineno": 3,
      "line": "from enum import Enum"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 42,
      "line": ""
    },
    {
      "lineno": 51,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 61,
      "line": ""
    },
    {
      "lineno": 62,
      "line": ""
    },
    {
      "lineno": 70,
      "line": ""
    },
    {
      "lineno": 71,
      "line": ""
    },
    {
      "lineno": 77,
      "line": ""
    },
    {
      "lineno": 78,
      "line": ""
    },
    {
      "lineno": 85,
      "line": ""
    },
    {
      "lineno": 86,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "from abc import ABCMeta, abstractmethod\nfrom collections import deque\nfrom enum import Enum",
      "successors": []
    }
  ]
}