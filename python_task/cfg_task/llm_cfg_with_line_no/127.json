{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 197,
  "functions": [
    {
      "name": "solve_maze",
      "type": "function",
      "start_line": 4,
      "end_line": 136,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 4,
          "line": "def solve_maze("
        },
        {
          "lineno": 5,
          "line": "    maze: list[list[int]],"
        },
        {
          "lineno": 6,
          "line": "    source_row: int,"
        },
        {
          "lineno": 7,
          "line": "    source_column: int,"
        },
        {
          "lineno": 8,
          "line": "    destination_row: int,"
        },
        {
          "lineno": 9,
          "line": "    destination_column: int,"
        },
        {
          "lineno": 10,
          "line": ") -> list[list[int]]:"
        },
        {
          "lineno": 11,
          "line": "    \"\"\""
        },
        {
          "lineno": 12,
          "line": "    This method solves the \"rat in maze\" problem."
        },
        {
          "lineno": 13,
          "line": "    Parameters :"
        },
        {
          "lineno": 14,
          "line": "        - maze: A two dimensional matrix of zeros and ones."
        },
        {
          "lineno": 15,
          "line": "        - source_row: The row index of the starting point."
        },
        {
          "lineno": 16,
          "line": "        - source_column: The column index of the starting point."
        },
        {
          "lineno": 17,
          "line": "        - destination_row: The row index of the destination point."
        },
        {
          "lineno": 18,
          "line": "        - destination_column: The column index of the destination point."
        },
        {
          "lineno": 19,
          "line": "    Returns:"
        },
        {
          "lineno": 20,
          "line": "        - solution: A 2D matrix representing the solution path if it exists."
        },
        {
          "lineno": 21,
          "line": "    Raises:"
        },
        {
          "lineno": 22,
          "line": "        - ValueError: If no solution exists or if the source or"
        },
        {
          "lineno": 23,
          "line": "            destination coordinates are invalid."
        },
        {
          "lineno": 24,
          "line": "    Description:"
        },
        {
          "lineno": 25,
          "line": "        This method navigates through a maze represented as an n by n matrix,"
        },
        {
          "lineno": 26,
          "line": "        starting from a specified source cell and"
        },
        {
          "lineno": 27,
          "line": "        aiming to reach a destination cell."
        },
        {
          "lineno": 28,
          "line": "        The maze consists of walls (1s) and open paths (0s)."
        },
        {
          "lineno": 29,
          "line": "        By providing custom row and column values, the source and destination"
        },
        {
          "lineno": 30,
          "line": "        cells can be adjusted."
        },
        {
          "lineno": 31,
          "line": "    >>> maze = [[0, 1, 0, 1, 1],"
        },
        {
          "lineno": 32,
          "line": "    ...         [0, 0, 0, 0, 0],"
        },
        {
          "lineno": 33,
          "line": "    ...         [1, 0, 1, 0, 1],"
        },
        {
          "lineno": 34,
          "line": "    ...         [0, 0, 1, 0, 0],"
        },
        {
          "lineno": 35,
          "line": "    ...         [1, 0, 0, 1, 0]]"
        },
        {
          "lineno": 36,
          "line": "    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 37,
          "line": "    [[0, 1, 1, 1, 1],"
        },
        {
          "lineno": 38,
          "line": "    [0, 0, 0, 0, 1],"
        },
        {
          "lineno": 39,
          "line": "    [1, 1, 1, 0, 1],"
        },
        {
          "lineno": 40,
          "line": "    [1, 1, 1, 0, 0],"
        },
        {
          "lineno": 41,
          "line": "    [1, 1, 1, 1, 0]]"
        },
        {
          "lineno": 42,
          "line": ""
        },
        {
          "lineno": 43,
          "line": "    Note:"
        },
        {
          "lineno": 44,
          "line": "        In the output maze, the zeros (0s) represent one of the possible"
        },
        {
          "lineno": 45,
          "line": "        paths from the source to the destination."
        },
        {
          "lineno": 46,
          "line": ""
        },
        {
          "lineno": 47,
          "line": "    >>> maze = [[0, 1, 0, 1, 1],"
        },
        {
          "lineno": 48,
          "line": "    ...         [0, 0, 0, 0, 0],"
        },
        {
          "lineno": 49,
          "line": "    ...         [0, 0, 0, 0, 1],"
        },
        {
          "lineno": 50,
          "line": "    ...         [0, 0, 0, 0, 0],"
        },
        {
          "lineno": 51,
          "line": "    ...         [0, 0, 0, 0, 0]]"
        },
        {
          "lineno": 52,
          "line": "    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 53,
          "line": "    [[0, 1, 1, 1, 1],"
        },
        {
          "lineno": 54,
          "line": "    [0, 1, 1, 1, 1],"
        },
        {
          "lineno": 55,
          "line": "    [0, 1, 1, 1, 1],"
        },
        {
          "lineno": 56,
          "line": "    [0, 1, 1, 1, 1],"
        },
        {
          "lineno": 57,
          "line": "    [0, 0, 0, 0, 0]]"
        },
        {
          "lineno": 58,
          "line": ""
        },
        {
          "lineno": 59,
          "line": "    >>> maze = [[0, 0, 0],"
        },
        {
          "lineno": 60,
          "line": "    ...         [0, 1, 0],"
        },
        {
          "lineno": 61,
          "line": "    ...         [1, 0, 0]]"
        },
        {
          "lineno": 62,
          "line": "    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 63,
          "line": "    [[0, 0, 0],"
        },
        {
          "lineno": 64,
          "line": "    [1, 1, 0],"
        },
        {
          "lineno": 65,
          "line": "    [1, 1, 0]]"
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 67,
          "line": "    >>> maze = [[1, 0, 0],"
        },
        {
          "lineno": 68,
          "line": "    ...         [0, 1, 0],"
        },
        {
          "lineno": 69,
          "line": "    ...         [1, 0, 0]]"
        },
        {
          "lineno": 70,
          "line": "    >>> solve_maze(maze,0,1,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 71,
          "line": "    [[1, 0, 0],"
        },
        {
          "lineno": 72,
          "line": "    [1, 1, 0],"
        },
        {
          "lineno": 73,
          "line": "    [1, 1, 0]]"
        },
        {
          "lineno": 74,
          "line": ""
        },
        {
          "lineno": 75,
          "line": "    >>> maze = [[1, 1, 0, 0, 1, 0, 0, 1],"
        },
        {
          "lineno": 76,
          "line": "    ...         [1, 0, 1, 0, 0, 1, 1, 1],"
        },
        {
          "lineno": 77,
          "line": "    ...         [0, 1, 0, 1, 0, 0, 1, 0],"
        },
        {
          "lineno": 78,
          "line": "    ...         [1, 1, 1, 0, 0, 1, 0, 1],"
        },
        {
          "lineno": 79,
          "line": "    ...         [0, 1, 0, 0, 1, 0, 1, 1],"
        },
        {
          "lineno": 80,
          "line": "    ...         [0, 0, 0, 1, 1, 1, 0, 1],"
        },
        {
          "lineno": 81,
          "line": "    ...         [0, 1, 0, 1, 0, 1, 1, 1],"
        },
        {
          "lineno": 82,
          "line": "    ...         [1, 1, 0, 0, 0, 0, 0, 1]]"
        },
        {
          "lineno": 83,
          "line": "    >>> solve_maze(maze,0,2,len(maze)-1,2)  # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 84,
          "line": "    [[1, 1, 0, 0, 1, 1, 1, 1],"
        },
        {
          "lineno": 85,
          "line": "    [1, 1, 1, 0, 0, 1, 1, 1],"
        },
        {
          "lineno": 86,
          "line": "    [1, 1, 1, 1, 0, 1, 1, 1],"
        },
        {
          "lineno": 87,
          "line": "    [1, 1, 1, 0, 0, 1, 1, 1],"
        },
        {
          "lineno": 88,
          "line": "    [1, 1, 0, 0, 1, 1, 1, 1],"
        },
        {
          "lineno": 89,
          "line": "    [1, 1, 0, 1, 1, 1, 1, 1],"
        },
        {
          "lineno": 90,
          "line": "    [1, 1, 0, 1, 1, 1, 1, 1],"
        },
        {
          "lineno": 91,
          "line": "    [1, 1, 0, 1, 1, 1, 1, 1]]"
        },
        {
          "lineno": 92,
          "line": "    >>> maze = [[1, 0, 0],"
        },
        {
          "lineno": 93,
          "line": "    ...         [0, 1, 1],"
        },
        {
          "lineno": 94,
          "line": "    ...         [1, 0, 1]]"
        },
        {
          "lineno": 95,
          "line": "    >>> solve_maze(maze,0,1,len(maze)-1,len(maze)-1)"
        },
        {
          "lineno": 96,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 97,
          "line": "        ..."
        },
        {
          "lineno": 98,
          "line": "    ValueError: No solution exists!"
        },
        {
          "lineno": 99,
          "line": ""
        },
        {
          "lineno": 100,
          "line": "    >>> maze = [[0, 0],"
        },
        {
          "lineno": 101,
          "line": "    ...         [1, 1]]"
        },
        {
          "lineno": 102,
          "line": "    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)"
        },
        {
          "lineno": 103,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 104,
          "line": "        ..."
        },
        {
          "lineno": 105,
          "line": "    ValueError: No solution exists!"
        },
        {
          "lineno": 106,
          "line": ""
        },
        {
          "lineno": 107,
          "line": "    >>> maze = [[0, 1],"
        },
        {
          "lineno": 108,
          "line": "    ...         [1, 0]]"
        },
        {
          "lineno": 109,
          "line": "    >>> solve_maze(maze,2,0,len(maze)-1,len(maze)-1)"
        },
        {
          "lineno": 110,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 111,
          "line": "        ..."
        },
        {
          "lineno": 112,
          "line": "    ValueError: Invalid source or destination coordinates"
        },
        {
          "lineno": 113,
          "line": ""
        },
        {
          "lineno": 114,
          "line": "    >>> maze = [[1, 0, 0],"
        },
        {
          "lineno": 115,
          "line": "    ...         [0, 1, 0],"
        },
        {
          "lineno": 116,
          "line": "    ...         [1, 0, 0]]"
        },
        {
          "lineno": 117,
          "line": "    >>> solve_maze(maze,0,1,len(maze),len(maze)-1)"
        },
        {
          "lineno": 118,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 119,
          "line": "        ..."
        },
        {
          "lineno": 120,
          "line": "    ValueError: Invalid source or destination coordinates"
        },
        {
          "lineno": 121,
          "line": "    \"\"\""
        },
        {
          "lineno": 122,
          "line": "    size = len(maze)"
        },
        {
          "lineno": 123,
          "line": "    # Check if source and destination coordinates are Invalid."
        },
        {
          "lineno": 124,
          "line": "    if not (0 <= source_row <= size - 1 and 0 <= source_column <= size - 1) or ("
        },
        {
          "lineno": 125,
          "line": "        not (0 <= destination_row <= size - 1 and 0 <= destination_column <= size - 1)"
        },
        {
          "lineno": 126,
          "line": "    ):"
        },
        {
          "lineno": 127,
          "line": "        raise ValueError(\"Invalid source or destination coordinates\")"
        },
        {
          "lineno": 128,
          "line": "    # We need to create solution object to save path."
        },
        {
          "lineno": 129,
          "line": "    solutions = [[1 for _ in range(size)] for _ in range(size)]"
        },
        {
          "lineno": 130,
          "line": "    solved = run_maze("
        },
        {
          "lineno": 131,
          "line": "        maze, source_row, source_column, destination_row, destination_column, solutions"
        },
        {
          "lineno": 132,
          "line": "    )"
        },
        {
          "lineno": 133,
          "line": "    if solved:"
        },
        {
          "lineno": 134,
          "line": "        return solutions"
        },
        {
          "lineno": 135,
          "line": "    else:"
        },
        {
          "lineno": 136,
          "line": "        raise ValueError(\"No solution exists!\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 4,
          "end_line": 10,
          "label": "def solve_maze(\n    maze: list[list[int]],\n    source_row: int,\n    source_column: int,\n    destination_row: int,\n    destination_column: int\n) -> list[list[int]]:",
          "successors": [
            {
              "id": 2,
              "start_line": 122,
              "end_line": 122,
              "label": "    size = len(maze)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 123,
                  "end_line": 126,
                  "label": "    # Check if source and destination coordinates are Invalid.\n    if not (0 <= source_row <= size - 1 and 0 <= source_column <= size - 1) or (\n        not (0 <= destination_row <= size - 1 and 0 <= destination_column <= size - 1)\n    ):",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 127,
                      "end_line": 127,
                      "label": "        raise ValueError(\"Invalid source or destination coordinates\")",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 128,
                      "end_line": 132,
                      "label": "    # We need to create solution object to save path.\n    solutions = [[1 for _ in range(size)] for _ in range(size)]\n    solved = run_maze(\n        maze, source_row, source_column, destination_row, destination_column, solutions\n    )",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 133,
                          "end_line": 133,
                          "label": "    if solved:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 134,
                              "end_line": 134,
                              "label": "        return solutions",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "start_line": 135,
                          "end_line": 136,
                          "label": "    else:\n        raise ValueError(\"No solution exists!\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "run_maze",
      "type": "function",
      "start_line": 139,
      "end_line": 191,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 139,
          "line": "def run_maze("
        },
        {
          "lineno": 140,
          "line": "    maze: list[list[int]],"
        },
        {
          "lineno": 141,
          "line": "    i: int,"
        },
        {
          "lineno": 142,
          "line": "    j: int,"
        },
        {
          "lineno": 143,
          "line": "    destination_row: int,"
        },
        {
          "lineno": 144,
          "line": "    destination_column: int,"
        },
        {
          "lineno": 145,
          "line": "    solutions: list[list[int]],"
        },
        {
          "lineno": 146,
          "line": ") -> bool:"
        },
        {
          "lineno": 147,
          "line": "    \"\"\""
        },
        {
          "lineno": 148,
          "line": "    This method is recursive starting from (i, j) and going in one of four directions:"
        },
        {
          "lineno": 149,
          "line": "    up, down, left, right."
        },
        {
          "lineno": 150,
          "line": "    If a path is found to destination it returns True otherwise it returns False."
        },
        {
          "lineno": 151,
          "line": "    Parameters"
        },
        {
          "lineno": 152,
          "line": "        maze: A two dimensional matrix of zeros and ones."
        },
        {
          "lineno": 153,
          "line": "        i, j : coordinates of matrix"
        },
        {
          "lineno": 154,
          "line": "        solutions: A two dimensional matrix of solutions."
        },
        {
          "lineno": 155,
          "line": "    Returns:"
        },
        {
          "lineno": 156,
          "line": "        Boolean if path is found True, Otherwise False."
        },
        {
          "lineno": 157,
          "line": "    \"\"\""
        },
        {
          "lineno": 158,
          "line": "    size = len(maze)"
        },
        {
          "lineno": 159,
          "line": "    # Final check point."
        },
        {
          "lineno": 160,
          "line": "    if i == destination_row and j == destination_column and maze[i][j] == 0:"
        },
        {
          "lineno": 161,
          "line": "        solutions[i][j] = 0"
        },
        {
          "lineno": 162,
          "line": "        return True"
        },
        {
          "lineno": 163,
          "line": ""
        },
        {
          "lineno": 164,
          "line": "    lower_flag = (not i < 0) and (not j < 0)  # Check lower bounds"
        },
        {
          "lineno": 165,
          "line": "    upper_flag = (i < size) and (j < size)  # Check upper bounds"
        },
        {
          "lineno": 166,
          "line": ""
        },
        {
          "lineno": 167,
          "line": "    if lower_flag and upper_flag:"
        },
        {
          "lineno": 168,
          "line": "        # check for already visited and block points."
        },
        {
          "lineno": 169,
          "line": "        block_flag = (solutions[i][j]) and (not maze[i][j])"
        },
        {
          "lineno": 170,
          "line": "        if block_flag:"
        },
        {
          "lineno": 171,
          "line": "            # check visited"
        },
        {
          "lineno": 172,
          "line": "            solutions[i][j] = 0"
        },
        {
          "lineno": 173,
          "line": ""
        },
        {
          "lineno": 174,
          "line": "            # check for directions"
        },
        {
          "lineno": 175,
          "line": "            if ("
        },
        {
          "lineno": 176,
          "line": "                run_maze(maze, i + 1, j, destination_row, destination_column, solutions)"
        },
        {
          "lineno": 177,
          "line": "                or run_maze("
        },
        {
          "lineno": 178,
          "line": "                    maze, i, j + 1, destination_row, destination_column, solutions"
        },
        {
          "lineno": 179,
          "line": "                )"
        },
        {
          "lineno": 180,
          "line": "                or run_maze("
        },
        {
          "lineno": 181,
          "line": "                    maze, i - 1, j, destination_row, destination_column, solutions"
        },
        {
          "lineno": 182,
          "line": "                )"
        },
        {
          "lineno": 183,
          "line": "                or run_maze("
        },
        {
          "lineno": 184,
          "line": "                    maze, i, j - 1, destination_row, destination_column, solutions"
        },
        {
          "lineno": 185,
          "line": "                )"
        },
        {
          "lineno": 186,
          "line": "            ):"
        },
        {
          "lineno": 187,
          "line": "                return True"
        },
        {
          "lineno": 188,
          "line": ""
        },
        {
          "lineno": 189,
          "line": "            solutions[i][j] = 1"
        },
        {
          "lineno": 190,
          "line": "            return False"
        },
        {
          "lineno": 191,
          "line": "    return False"
        }
      ],
      "blocks": []
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from __future__ import annotations"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 137,
      "line": ""
    },
    {
      "lineno": 138,
      "line": ""
    },
    {
      "lineno": 192,
      "line": ""
    },
    {
      "lineno": 193,
      "line": ""
    },
    {
      "lineno": 194,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 195,
      "line": "    import doctest"
    },
    {
      "lineno": 196,
      "line": ""
    },
    {
      "lineno": 197,
      "line": "    doctest.testmod(optionflags=doctest.NORMALIZE_WHITESPACE)"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "from __future__ import annotations",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 2,
      "end_line": 3,
      "label": "",
      "successors": [
        {
          "id": 3,
          "start_line": 137,
          "end_line": 138,
          "label": "",
          "successors": [
            {
              "id": 4,
              "start_line": 192,
              "end_line": 193,
              "label": "",
              "successors": [
                {
                  "id": 5,
                  "start_line": 194,
                  "end_line": 194,
                  "label": "if __name__ == \"__main__\":",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 195,
                      "end_line": 195,
                      "label": "import doctest",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 196,
                          "end_line": 197,
                          "label": "doctest.testmod(optionflags=doctest.NORMALIZE_WHITESPACE)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}