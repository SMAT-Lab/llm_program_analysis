{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 71,
  "functions": [
    {
      "name": "wait_for_postgres",
      "type": "function",
      "start_line": 6,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "def wait_for_postgres(max_retries=5, delay=5):"
        },
        {
          "lineno": 7,
          "line": "    for _ in range(max_retries):"
        },
        {
          "lineno": 8,
          "line": "        try:"
        },
        {
          "lineno": 9,
          "line": "            result = subprocess.run("
        },
        {
          "lineno": 10,
          "line": "                ["
        },
        {
          "lineno": 11,
          "line": "                    \"docker\","
        },
        {
          "lineno": 12,
          "line": "                    \"compose\","
        },
        {
          "lineno": 13,
          "line": "                    \"-f\","
        },
        {
          "lineno": 14,
          "line": "                    \"docker-compose.test.yaml\","
        },
        {
          "lineno": 15,
          "line": "                    \"exec\","
        },
        {
          "lineno": 16,
          "line": "                    \"postgres-test\","
        },
        {
          "lineno": 17,
          "line": "                    \"pg_isready\","
        },
        {
          "lineno": 18,
          "line": "                    \"-U\","
        },
        {
          "lineno": 19,
          "line": "                    \"postgres\","
        },
        {
          "lineno": 20,
          "line": "                    \"-d\","
        },
        {
          "lineno": 21,
          "line": "                    \"postgres\","
        },
        {
          "lineno": 22,
          "line": "                ],"
        },
        {
          "lineno": 23,
          "line": "                check=True,"
        },
        {
          "lineno": 24,
          "line": "                capture_output=True,"
        },
        {
          "lineno": 25,
          "line": "                text=True,"
        },
        {
          "lineno": 26,
          "line": "            )"
        },
        {
          "lineno": 27,
          "line": "            if \"accepting connections\" in result.stdout:"
        },
        {
          "lineno": 28,
          "line": "                print(\"PostgreSQL is ready.\")"
        },
        {
          "lineno": 29,
          "line": "                return True"
        },
        {
          "lineno": 30,
          "line": "        except subprocess.CalledProcessError:"
        },
        {
          "lineno": 31,
          "line": "            print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")"
        },
        {
          "lineno": 32,
          "line": "            time.sleep(delay)"
        },
        {
          "lineno": 33,
          "line": "    print(\"Failed to connect to PostgreSQL.\")"
        },
        {
          "lineno": 34,
          "line": "    return False"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 6,
          "label": "def wait_for_postgres(max_retries=5, delay=5):",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 7,
              "label": "for _ in range(max_retries):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 9,
                      "end_line": 26,
                      "label": "result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 27,
                          "end_line": 29,
                          "label": "if \"accepting connections\" in result.stdout:\n    print(\"PostgreSQL is ready.\")\n    return True",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 30,
                              "end_line": 32,
                              "label": "except subprocess.CalledProcessError:\n    print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n    time.sleep(delay)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "start_line": 30,
                          "end_line": 32,
                          "label": "except subprocess.CalledProcessError:\n    print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n    time.sleep(delay)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "start_line": 33,
                  "end_line": 34,
                  "label": "print(\"Failed to connect to PostgreSQL.\")\nreturn False",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "run_command",
      "type": "function",
      "start_line": 37,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 37,
          "line": "def run_command(command, check=True):"
        },
        {
          "lineno": 38,
          "line": "    try:"
        },
        {
          "lineno": 39,
          "line": "        subprocess.run(command, check=check)"
        },
        {
          "lineno": 40,
          "line": "    except subprocess.CalledProcessError as e:"
        },
        {
          "lineno": 41,
          "line": "        print(f\"Command failed: {e}\")"
        },
        {
          "lineno": 42,
          "line": "        sys.exit(1)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 37,
          "end_line": 38,
          "label": "def run_command(command, check=True):\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 39,
              "end_line": 39,
              "label": "subprocess.run(command, check=check)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 40,
                  "end_line": 42,
                  "label": "except subprocess.CalledProcessError as e:\n    print(f\"Command failed: {e}\")\n    sys.exit(1)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test",
      "type": "function",
      "start_line": 45,
      "end_line": 71,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 45,
          "line": "def test():"
        },
        {
          "lineno": 46,
          "line": "    # Start PostgreSQL with Docker Compose"
        },
        {
          "lineno": 47,
          "line": "    run_command("
        },
        {
          "lineno": 48,
          "line": "        ["
        },
        {
          "lineno": 49,
          "line": "            \"docker\","
        },
        {
          "lineno": 50,
          "line": "            \"compose\","
        },
        {
          "lineno": 51,
          "line": "            \"-f\","
        },
        {
          "lineno": 52,
          "line": "            \"docker-compose.test.yaml\","
        },
        {
          "lineno": 53,
          "line": "            \"up\","
        },
        {
          "lineno": 54,
          "line": "            \"-d\","
        },
        {
          "lineno": 55,
          "line": "            \"postgres-test\","
        },
        {
          "lineno": 56,
          "line": "        ]"
        },
        {
          "lineno": 57,
          "line": "    )"
        },
        {
          "lineno": 58,
          "line": ""
        },
        {
          "lineno": 59,
          "line": "    if not wait_for_postgres():"
        },
        {
          "lineno": 60,
          "line": "        run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])"
        },
        {
          "lineno": 61,
          "line": "        sys.exit(1)"
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 63,
          "line": "    # Run Prisma migrations"
        },
        {
          "lineno": 64,
          "line": "    run_command([\"prisma\", \"migrate\", \"dev\"])"
        },
        {
          "lineno": 65,
          "line": ""
        },
        {
          "lineno": 66,
          "line": "    # Run the tests"
        },
        {
          "lineno": 67,
          "line": "    result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)"
        },
        {
          "lineno": 68,
          "line": ""
        },
        {
          "lineno": 69,
          "line": "    run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])"
        },
        {
          "lineno": 70,
          "line": ""
        },
        {
          "lineno": 71,
          "line": "    sys.exit(result.returncode)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 45,
          "end_line": 47,
          "label": "def test():\n    # Start PostgreSQL with Docker Compose\n    run_command(",
          "successors": [
            {
              "id": 2,
              "start_line": 48,
              "end_line": 57,
              "label": "[\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 59,
                  "end_line": 59,
                  "label": "if not wait_for_postgres():",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 60,
                      "end_line": 61,
                      "label": "run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n        sys.exit(1)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 63,
                  "end_line": 67,
                  "label": "# Run Prisma migrations\n    run_command([\"prisma\", \"migrate\", \"dev\"])\n\n    # Run the tests\n    result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 69,
                      "end_line": 69,
                      "label": "run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 71,
                          "end_line": 71,
                          "label": "sys.exit(result.returncode)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import subprocess"
    },
    {
      "lineno": 2,
      "line": "import sys"
    },
    {
      "lineno": 3,
      "line": "import time"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 36,
      "line": ""
    },
    {
      "lineno": 43,
      "line": ""
    },
    {
      "lineno": 44,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "import subprocess\nimport sys\nimport time",
      "successors": [
        {
          "id": 2,
          "start_line": 4,
          "end_line": 4,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "id": 3,
      "start_line": 5,
      "end_line": 5,
      "label": "",
      "successors": [
        {
          "id": 4,
          "start_line": 35,
          "end_line": 35,
          "label": "",
          "successors": [
            {
              "id": 5,
              "start_line": 36,
              "end_line": 36,
              "label": "",
              "successors": [
                {
                  "id": 6,
                  "start_line": 43,
                  "end_line": 43,
                  "label": "",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 44,
                      "end_line": 44,
                      "label": "",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}