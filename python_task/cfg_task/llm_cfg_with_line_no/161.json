{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 264,
  "functions": [],
  "classes": [
    {
      "name": "SamplingMethod",
      "type": "class",
      "start_line": 10,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "class SamplingMethod(str, Enum):"
        },
        {
          "lineno": 11,
          "line": "    RANDOM = \"random\""
        },
        {
          "lineno": 12,
          "line": "    SYSTEMATIC = \"systematic\""
        },
        {
          "lineno": 13,
          "line": "    TOP = \"top\""
        },
        {
          "lineno": 14,
          "line": "    BOTTOM = \"bottom\""
        },
        {
          "lineno": 15,
          "line": "    STRATIFIED = \"stratified\""
        },
        {
          "lineno": 16,
          "line": "    WEIGHTED = \"weighted\""
        },
        {
          "lineno": 17,
          "line": "    RESERVOIR = \"reservoir\""
        },
        {
          "lineno": 18,
          "line": "    CLUSTER = \"cluster\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 10,
          "end_line": 18,
          "label": "class SamplingMethod(str, Enum):\n    RANDOM = \"random\"\n    SYSTEMATIC = \"systematic\"\n    TOP = \"top\"\n    BOTTOM = \"bottom\"\n    STRATIFIED = \"stratified\"\n    WEIGHTED = \"weighted\"\n    RESERVOIR = \"reservoir\"\n    CLUSTER = \"cluster\"",
          "successors": []
        }
      ]
    },
    {
      "name": "DataSamplingBlock",
      "type": "class",
      "start_line": 21,
      "end_line": 264,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 65,
          "end_line": 94,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 65,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 66,
              "line": "        super().__init__("
            },
            {
              "lineno": 67,
              "line": "            id=\"4a448883-71fa-49cf-91cf-70d793bd7d87\","
            },
            {
              "lineno": 68,
              "line": "            description=\"This block samples data from a given dataset using various sampling methods.\","
            },
            {
              "lineno": 69,
              "line": "            categories={BlockCategory.LOGIC},"
            },
            {
              "lineno": 70,
              "line": "            input_schema=DataSamplingBlock.Input,"
            },
            {
              "lineno": 71,
              "line": "            output_schema=DataSamplingBlock.Output,"
            },
            {
              "lineno": 72,
              "line": "            test_input={"
            },
            {
              "lineno": 73,
              "line": "                \"data\": ["
            },
            {
              "lineno": 74,
              "line": "                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)"
            },
            {
              "lineno": 75,
              "line": "                ],"
            },
            {
              "lineno": 76,
              "line": "                \"sample_size\": 3,"
            },
            {
              "lineno": 77,
              "line": "                \"sampling_method\": SamplingMethod.STRATIFIED,"
            },
            {
              "lineno": 78,
              "line": "                \"accumulate\": False,"
            },
            {
              "lineno": 79,
              "line": "                \"random_seed\": 42,"
            },
            {
              "lineno": 80,
              "line": "                \"stratify_key\": \"group\","
            },
            {
              "lineno": 81,
              "line": "            },"
            },
            {
              "lineno": 82,
              "line": "            test_output=["
            },
            {
              "lineno": 83,
              "line": "                ("
            },
            {
              "lineno": 84,
              "line": "                    \"sampled_data\","
            },
            {
              "lineno": 85,
              "line": "                    ["
            },
            {
              "lineno": 86,
              "line": "                        {\"id\": 0, \"value\": \"a\", \"group\": 0},"
            },
            {
              "lineno": 87,
              "line": "                        {\"id\": 1, \"value\": \"b\", \"group\": 1},"
            },
            {
              "lineno": 88,
              "line": "                        {\"id\": 8, \"value\": \"i\", \"group\": 2},"
            },
            {
              "lineno": 89,
              "line": "                    ],"
            },
            {
              "lineno": 90,
              "line": "                ),"
            },
            {
              "lineno": 91,
              "line": "                (\"sample_indices\", [0, 1, 8]),"
            },
            {
              "lineno": 92,
              "line": "            ],"
            },
            {
              "lineno": 93,
              "line": "        )"
            },
            {
              "lineno": 94,
              "line": "        self.accumulated_data = []"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 65,
              "end_line": 94,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"4a448883-71fa-49cf-91cf-70d793bd7d87\",\n            description=\"This block samples data from a given dataset using various sampling methods.\",\n            categories={BlockCategory.LOGIC},\n            input_schema=DataSamplingBlock.Input,\n            output_schema=DataSamplingBlock.Output,\n            test_input={\n                \"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ],\n                \"sample_size\": 3,\n                \"sampling_method\": SamplingMethod.STRATIFIED,\n                \"accumulate\": False,\n                \"random_seed\": 42,\n                \"stratify_key\": \"group\",\n            },\n            test_output=[\n                (\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                ),\n                (\"sample_indices\", [0, 1, 8]),\n            ],\n        )\n        self.accumulated_data = []",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 96,
          "end_line": 264,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 96,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 97,
              "line": "        if input_data.accumulate:"
            },
            {
              "lineno": 98,
              "line": "            if isinstance(input_data.data, dict):"
            },
            {
              "lineno": 99,
              "line": "                self.accumulated_data.append(input_data.data)"
            },
            {
              "lineno": 100,
              "line": "            elif isinstance(input_data.data, list):"
            },
            {
              "lineno": 101,
              "line": "                self.accumulated_data.extend(input_data.data)"
            },
            {
              "lineno": 102,
              "line": "            else:"
            },
            {
              "lineno": 103,
              "line": "                raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")"
            },
            {
              "lineno": 104,
              "line": ""
            },
            {
              "lineno": 105,
              "line": "            # If we don't have enough data yet, return without sampling"
            },
            {
              "lineno": 106,
              "line": "            if len(self.accumulated_data) < input_data.sample_size:"
            },
            {
              "lineno": 107,
              "line": "                return"
            },
            {
              "lineno": 108,
              "line": ""
            },
            {
              "lineno": 109,
              "line": "            data_to_sample = self.accumulated_data"
            },
            {
              "lineno": 110,
              "line": "        else:"
            },
            {
              "lineno": 111,
              "line": "            # If not accumulating, use the input data directly"
            },
            {
              "lineno": 112,
              "line": "            data_to_sample = ("
            },
            {
              "lineno": 113,
              "line": "                input_data.data"
            },
            {
              "lineno": 114,
              "line": "                if isinstance(input_data.data, list)"
            },
            {
              "lineno": 115,
              "line": "                else [input_data.data]"
            },
            {
              "lineno": 116,
              "line": "            )"
            },
            {
              "lineno": 117,
              "line": ""
            },
            {
              "lineno": 118,
              "line": "        if input_data.random_seed is not None:"
            },
            {
              "lineno": 119,
              "line": "            random.seed(input_data.random_seed)"
            },
            {
              "lineno": 120,
              "line": ""
            },
            {
              "lineno": 121,
              "line": "        data_size = len(data_to_sample)"
            },
            {
              "lineno": 122,
              "line": ""
            },
            {
              "lineno": 123,
              "line": "        if input_data.sample_size > data_size:"
            },
            {
              "lineno": 124,
              "line": "            raise ValueError("
            },
            {
              "lineno": 125,
              "line": "                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\""
            },
            {
              "lineno": 126,
              "line": "            )"
            },
            {
              "lineno": 127,
              "line": ""
            },
            {
              "lineno": 128,
              "line": "        indices = []"
            },
            {
              "lineno": 129,
              "line": ""
            },
            {
              "lineno": 130,
              "line": "        if input_data.sampling_method == SamplingMethod.RANDOM:"
            },
            {
              "lineno": 131,
              "line": "            indices = random.sample(range(data_size), input_data.sample_size)"
            },
            {
              "lineno": 132,
              "line": "        elif input_data.sampling_method == SamplingMethod.SYSTEMATIC:"
            },
            {
              "lineno": 133,
              "line": "            step = data_size // input_data.sample_size"
            },
            {
              "lineno": 134,
              "line": "            start = random.randint(0, step - 1)"
            },
            {
              "lineno": 135,
              "line": "            indices = list(range(start, data_size, step))[: input_data.sample_size]"
            },
            {
              "lineno": 136,
              "line": "        elif input_data.sampling_method == SamplingMethod.TOP:"
            },
            {
              "lineno": 137,
              "line": "            indices = list(range(input_data.sample_size))"
            },
            {
              "lineno": 138,
              "line": "        elif input_data.sampling_method == SamplingMethod.BOTTOM:"
            },
            {
              "lineno": 139,
              "line": "            indices = list(range(data_size - input_data.sample_size, data_size))"
            },
            {
              "lineno": 140,
              "line": "        elif input_data.sampling_method == SamplingMethod.STRATIFIED:"
            },
            {
              "lineno": 141,
              "line": "            if not input_data.stratify_key:"
            },
            {
              "lineno": 142,
              "line": "                raise ValueError("
            },
            {
              "lineno": 143,
              "line": "                    \"Stratify key must be provided for stratified sampling.\""
            },
            {
              "lineno": 144,
              "line": "                )"
            },
            {
              "lineno": 145,
              "line": "            strata = defaultdict(list)"
            },
            {
              "lineno": 146,
              "line": "            for i, item in enumerate(data_to_sample):"
            },
            {
              "lineno": 147,
              "line": "                if isinstance(item, dict):"
            },
            {
              "lineno": 148,
              "line": "                    strata_value = item.get(input_data.stratify_key)"
            },
            {
              "lineno": 149,
              "line": "                elif hasattr(item, input_data.stratify_key):"
            },
            {
              "lineno": 150,
              "line": "                    strata_value = getattr(item, input_data.stratify_key)"
            },
            {
              "lineno": 151,
              "line": "                else:"
            },
            {
              "lineno": 152,
              "line": "                    raise ValueError("
            },
            {
              "lineno": 153,
              "line": "                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\""
            },
            {
              "lineno": 154,
              "line": "                    )"
            },
            {
              "lineno": 155,
              "line": ""
            },
            {
              "lineno": 156,
              "line": "                if strata_value is None:"
            },
            {
              "lineno": 157,
              "line": "                    raise ValueError("
            },
            {
              "lineno": 158,
              "line": "                        f\"Stratify value for key '{input_data.stratify_key}' is None\""
            },
            {
              "lineno": 159,
              "line": "                    )"
            },
            {
              "lineno": 160,
              "line": ""
            },
            {
              "lineno": 161,
              "line": "                strata[str(strata_value)].append(i)"
            },
            {
              "lineno": 162,
              "line": ""
            },
            {
              "lineno": 163,
              "line": "            # Calculate the number of samples to take from each stratum"
            },
            {
              "lineno": 164,
              "line": "            stratum_sizes = {"
            },
            {
              "lineno": 165,
              "line": "                k: max(1, int(len(v) / data_size * input_data.sample_size))"
            },
            {
              "lineno": 166,
              "line": "                for k, v in strata.items()"
            },
            {
              "lineno": 167,
              "line": "            }"
            },
            {
              "lineno": 168,
              "line": ""
            },
            {
              "lineno": 169,
              "line": "            # Adjust sizes to ensure we get exactly sample_size samples"
            },
            {
              "lineno": 170,
              "line": "            while sum(stratum_sizes.values()) != input_data.sample_size:"
            },
            {
              "lineno": 171,
              "line": "                if sum(stratum_sizes.values()) < input_data.sample_size:"
            },
            {
              "lineno": 172,
              "line": "                    stratum_sizes["
            },
            {
              "lineno": 173,
              "line": "                        max(stratum_sizes, key=lambda k: stratum_sizes[k])"
            },
            {
              "lineno": 174,
              "line": "                    ] += 1"
            },
            {
              "lineno": 175,
              "line": "                else:"
            },
            {
              "lineno": 176,
              "line": "                    stratum_sizes["
            },
            {
              "lineno": 177,
              "line": "                        max(stratum_sizes, key=lambda k: stratum_sizes[k])"
            },
            {
              "lineno": 178,
              "line": "                    ] -= 1"
            },
            {
              "lineno": 179,
              "line": ""
            },
            {
              "lineno": 180,
              "line": "            for stratum, size in stratum_sizes.items():"
            },
            {
              "lineno": 181,
              "line": "                indices.extend(random.sample(strata[stratum], size))"
            },
            {
              "lineno": 182,
              "line": "        elif input_data.sampling_method == SamplingMethod.WEIGHTED:"
            },
            {
              "lineno": 183,
              "line": "            if not input_data.weight_key:"
            },
            {
              "lineno": 184,
              "line": "                raise ValueError(\"Weight key must be provided for weighted sampling.\")"
            },
            {
              "lineno": 185,
              "line": "            weights = []"
            },
            {
              "lineno": 186,
              "line": "            for item in data_to_sample:"
            },
            {
              "lineno": 187,
              "line": "                if isinstance(item, dict):"
            },
            {
              "lineno": 188,
              "line": "                    weight = item.get(input_data.weight_key)"
            },
            {
              "lineno": 189,
              "line": "                elif hasattr(item, input_data.weight_key):"
            },
            {
              "lineno": 190,
              "line": "                    weight = getattr(item, input_data.weight_key)"
            },
            {
              "lineno": 191,
              "line": "                else:"
            },
            {
              "lineno": 192,
              "line": "                    raise ValueError("
            },
            {
              "lineno": 193,
              "line": "                        f\"Weight key '{input_data.weight_key}' not found in item {item}\""
            },
            {
              "lineno": 194,
              "line": "                    )"
            },
            {
              "lineno": 195,
              "line": ""
            },
            {
              "lineno": 196,
              "line": "                if weight is None:"
            },
            {
              "lineno": 197,
              "line": "                    raise ValueError("
            },
            {
              "lineno": 198,
              "line": "                        f\"Weight value for key '{input_data.weight_key}' is None\""
            },
            {
              "lineno": 199,
              "line": "                    )"
            },
            {
              "lineno": 200,
              "line": "                try:"
            },
            {
              "lineno": 201,
              "line": "                    weights.append(float(weight))"
            },
            {
              "lineno": 202,
              "line": "                except ValueError:"
            },
            {
              "lineno": 203,
              "line": "                    raise ValueError("
            },
            {
              "lineno": 204,
              "line": "                        f\"Weight value '{weight}' cannot be converted to a number\""
            },
            {
              "lineno": 205,
              "line": "                    )"
            },
            {
              "lineno": 206,
              "line": ""
            },
            {
              "lineno": 207,
              "line": "            if not weights:"
            },
            {
              "lineno": 208,
              "line": "                raise ValueError("
            },
            {
              "lineno": 209,
              "line": "                    f\"No valid weights found using key '{input_data.weight_key}'\""
            },
            {
              "lineno": 210,
              "line": "                )"
            },
            {
              "lineno": 211,
              "line": ""
            },
            {
              "lineno": 212,
              "line": "            indices = random.choices("
            },
            {
              "lineno": 213,
              "line": "                range(data_size), weights=weights, k=input_data.sample_size"
            },
            {
              "lineno": 214,
              "line": "            )"
            },
            {
              "lineno": 215,
              "line": "        elif input_data.sampling_method == SamplingMethod.RESERVOIR:"
            },
            {
              "lineno": 216,
              "line": "            indices = list(range(input_data.sample_size))"
            },
            {
              "lineno": 217,
              "line": "            for i in range(input_data.sample_size, data_size):"
            },
            {
              "lineno": 218,
              "line": "                j = random.randint(0, i)"
            },
            {
              "lineno": 219,
              "line": "                if j < input_data.sample_size:"
            },
            {
              "lineno": 220,
              "line": "                    indices[j] = i"
            },
            {
              "lineno": 221,
              "line": "        elif input_data.sampling_method == SamplingMethod.CLUSTER:"
            },
            {
              "lineno": 222,
              "line": "            if not input_data.cluster_key:"
            },
            {
              "lineno": 223,
              "line": "                raise ValueError(\"Cluster key must be provided for cluster sampling.\")"
            },
            {
              "lineno": 224,
              "line": "            clusters = defaultdict(list)"
            },
            {
              "lineno": 225,
              "line": "            for i, item in enumerate(data_to_sample):"
            },
            {
              "lineno": 226,
              "line": "                if isinstance(item, dict):"
            },
            {
              "lineno": 227,
              "line": "                    cluster_value = item.get(input_data.cluster_key)"
            },
            {
              "lineno": 228,
              "line": "                elif hasattr(item, input_data.cluster_key):"
            },
            {
              "lineno": 229,
              "line": "                    cluster_value = getattr(item, input_data.cluster_key)"
            },
            {
              "lineno": 230,
              "line": "                else:"
            },
            {
              "lineno": 231,
              "line": "                    raise TypeError("
            },
            {
              "lineno": 232,
              "line": "                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\""
            },
            {
              "lineno": 233,
              "line": "                    )"
            },
            {
              "lineno": 234,
              "line": ""
            },
            {
              "lineno": 235,
              "line": "                clusters[str(cluster_value)].append(i)"
            },
            {
              "lineno": 236,
              "line": ""
            },
            {
              "lineno": 237,
              "line": "            # Randomly select clusters until we have enough samples"
            },
            {
              "lineno": 238,
              "line": "            selected_clusters = []"
            },
            {
              "lineno": 239,
              "line": "            while ("
            },
            {
              "lineno": 240,
              "line": "                sum(len(clusters[c]) for c in selected_clusters)"
            },
            {
              "lineno": 241,
              "line": "                < input_data.sample_size"
            },
            {
              "lineno": 242,
              "line": "            ):"
            },
            {
              "lineno": 243,
              "line": "                available_clusters = [c for c in clusters if c not in selected_clusters]"
            },
            {
              "lineno": 244,
              "line": "                if not available_clusters:"
            },
            {
              "lineno": 245,
              "line": "                    break"
            },
            {
              "lineno": 246,
              "line": "                selected_clusters.append(random.choice(available_clusters))"
            },
            {
              "lineno": 247,
              "line": ""
            },
            {
              "lineno": 248,
              "line": "            for cluster in selected_clusters:"
            },
            {
              "lineno": 249,
              "line": "                indices.extend(clusters[cluster])"
            },
            {
              "lineno": 250,
              "line": ""
            },
            {
              "lineno": 251,
              "line": "            # If we have more samples than needed, randomly remove some"
            },
            {
              "lineno": 252,
              "line": "            if len(indices) > input_data.sample_size:"
            },
            {
              "lineno": 253,
              "line": "                indices = random.sample(indices, input_data.sample_size)"
            },
            {
              "lineno": 254,
              "line": "        else:"
            },
            {
              "lineno": 255,
              "line": "            raise ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")"
            },
            {
              "lineno": 256,
              "line": ""
            },
            {
              "lineno": 257,
              "line": "        sampled_data = [data_to_sample[i] for i in indices]"
            },
            {
              "lineno": 258,
              "line": ""
            },
            {
              "lineno": 259,
              "line": "        # Clear accumulated data after sampling if accumulation is enabled"
            },
            {
              "lineno": 260,
              "line": "        if input_data.accumulate:"
            },
            {
              "lineno": 261,
              "line": "            self.accumulated_data = []"
            },
            {
              "lineno": 262,
              "line": ""
            },
            {
              "lineno": 263,
              "line": "        yield \"sampled_data\", sampled_data"
            },
            {
              "lineno": 264,
              "line": "        yield \"sample_indices\", indices"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 96,
              "end_line": 96,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 97,
                  "end_line": 97,
                  "label": "        if input_data.accumulate:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 98,
                      "end_line": 103,
                      "label": "            if isinstance(input_data.data, dict):\n                self.accumulated_data.append(input_data.data)\n            elif isinstance(input_data.data, list):\n                self.accumulated_data.extend(input_data.data)\n            else:\n                raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 106,
                          "end_line": 107,
                          "label": "            if len(self.accumulated_data) < input_data.sample_size:\n                return",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 109,
                              "end_line": 109,
                              "label": "            data_to_sample = self.accumulated_data",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 110,
                                  "end_line": 110,
                                  "label": "        else:",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 112,
                                      "end_line": 116,
                                      "label": "            # If not accumulating, use the input data directly\n            data_to_sample = (\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 118,
                                          "end_line": 119,
                                          "label": "        if input_data.random_seed is not None:\n            random.seed(input_data.random_seed)",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "start_line": 121,
                                              "end_line": 121,
                                              "label": "        data_size = len(data_to_sample)",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "start_line": 123,
                                                  "end_line": 125,
                                                  "label": "        if input_data.sample_size > data_size:\n            raise ValueError(\n                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\")",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "start_line": 128,
                                                      "end_line": 128,
                                                      "label": "        indices = []",
                                                      "successors": [
                                                        {
                                                          "id": 12,
                                                          "start_line": 130,
                                                          "end_line": 131,
                                                          "label": "        if input_data.sampling_method == SamplingMethod.RANDOM:\n            indices = random.sample(range(data_size), input_data.sample_size)",
                                                          "successors": [
                                                            {
                                                              "id": 13,
                                                              "start_line": 132,
                                                              "end_line": 135,
                                                              "label": "        elif input_data.sampling_method == SamplingMethod.SYSTEMATIC:\n            step = data_size // input_data.sample_size\n            start = random.randint(0, step - 1)\n            indices = list(range(start, data_size, step))[: input_data.sample_size]",
                                                              "successors": [
                                                                {
                                                                  "id": 14,
                                                                  "start_line": 136,
                                                                  "end_line": 137,
                                                                  "label": "        elif input_data.sampling_method == SamplingMethod.TOP:\n            indices = list(range(input_data.sample_size))",
                                                                  "successors": [
                                                                    {
                                                                      "id": 15,
                                                                      "start_line": 138,
                                                                      "end_line": 139,
                                                                      "label": "        elif input_data.sampling_method == SamplingMethod.BOTTOM:\n            indices = list(range(data_size - input_data.sample_size, data_size))",
                                                                      "successors": [
                                                                        {
                                                                          "id": 16,
                                                                          "start_line": 140,
                                                                          "end_line": 161,
                                                                          "label": "        elif input_data.sampling_method == SamplingMethod.STRATIFIED:\n            if not input_data.stratify_key:\n                raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\")\n            strata = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\")\n\n                if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\")\n\n                strata[str(strata_value)].append(i)",
                                                                          "successors": [
                                                                            {
                                                                              "id": 17,
                                                                              "start_line": 163,
                                                                              "end_line": 181,
                                                                              "label": "            # Calculate the number of samples to take from each stratum\n            stratum_sizes = {\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }\n\n            # Adjust sizes to ensure we get exactly sample_size samples\n            while sum(stratum_sizes.values()) != input_data.sample_size:\n                if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1\n\n            for stratum, size in stratum_sizes.items():\n                indices.extend(random.sample(strata[stratum], size))",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 18,
                                                                                  "start_line": 182,
                                                                                  "end_line": 199,
                                                                                  "label": "        elif input_data.sampling_method == SamplingMethod.WEIGHTED:\n            if not input_data.weight_key:\n                raise ValueError(\"Weight key must be provided for weighted sampling.\")\n            weights = []\n            for item in data_to_sample:\n                if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\")\n\n                if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\")\n                try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\")",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 19,
                                                                                      "start_line": 200,
                                                                                      "end_line": 214,
                                                                                      "label": "            if not weights:\n                raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\")\n\n            indices = random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 20,
                                                                                          "start_line": 215,
                                                                                          "end_line": 220,
                                                                                          "label": "        elif input_data.sampling_method == SamplingMethod.RESERVOIR:\n            indices = list(range(input_data.sample_size))\n            for i in range(input_data.sample_size, data_size):\n                j = random.randint(0, i)\n                if j < input_data.sample_size:\n                    indices[j] = i",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 21,
                                                                                              "start_line": 221,
                                                                                              "end_line": 253,
                                                                                              "label": "        elif input_data.sampling_method == SamplingMethod.CLUSTER:\n            if not input_data.cluster_key:\n                raise ValueError(\"Cluster key must be provided for cluster sampling.\")\n            clusters = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\")\n\n                clusters[str(cluster_value)].append(i)\n\n            # Randomly select clusters until we have enough samples\n            selected_clusters = []\n            while (\n                sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size\n            ):\n                available_clusters = [c for c in clusters if c not in selected_clusters]\n                if not available_clusters:\n                    break\n                selected_clusters.append(random.choice(available_clusters))\n\n            for cluster in selected_clusters:\n                indices.extend(clusters[cluster])\n\n            # If we have more samples than needed, randomly remove some\n            if len(indices) > input_data.sample_size:\n                indices = random.sample(indices, input_data.sample_size)",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 22,
                                                                                                  "start_line": 254,
                                                                                                  "end_line": 254,
                                                                                                  "label": "        else:",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 23,
                                                                                                      "start_line": 255,
                                                                                                      "end_line": 255,
                                                                                                      "label": "            raise ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")",
                                                                                                      "successors": [
                                                                                                        {
                                                                                                          "id": 24,
                                                                                                          "start_line": 257,
                                                                                                          "end_line": 257,
                                                                                                          "label": "        sampled_data = [data_to_sample[i] for i in indices]",
                                                                                                          "successors": [
                                                                                                            {
                                                                                                              "id": 25,
                                                                                                              "start_line": 259,
                                                                                                              "end_line": 261,
                                                                                                              "label": "        # Clear accumulated data after sampling if accumulation is enabled\n        if input_data.accumulate:\n            self.accumulated_data = []",
                                                                                                              "successors": [
                                                                                                                {
                                                                                                                  "id": 26,
                                                                                                                  "start_line": 263,
                                                                                                                  "end_line": 264,
                                                                                                                  "label": "        yield \"sampled_data\", sampled_data\n        yield \"sample_indices\", indices",
                                                                                                                  "successors": []
                                                                                                                }
                                                                                                              ]
                                                                                                            }
                                                                                                          ]
                                                                                                        }
                                                                                                      ]
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 22,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 23,
              "line": "        data: Union[Dict[str, Any], List[Union[dict, List[Any]]]] = SchemaField("
            },
            {
              "lineno": 24,
              "line": "            description=\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\","
            },
            {
              "lineno": 25,
              "line": "            placeholder=\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\","
            },
            {
              "lineno": 26,
              "line": "        )"
            },
            {
              "lineno": 27,
              "line": "        sample_size: int = SchemaField("
            },
            {
              "lineno": 28,
              "line": "            description=\"The number of samples to take from the dataset.\","
            },
            {
              "lineno": 29,
              "line": "            placeholder=\"10\","
            },
            {
              "lineno": 30,
              "line": "            default=10,"
            },
            {
              "lineno": 31,
              "line": "        )"
            },
            {
              "lineno": 32,
              "line": "        sampling_method: SamplingMethod = SchemaField("
            },
            {
              "lineno": 33,
              "line": "            description=\"The method to use for sampling.\","
            },
            {
              "lineno": 34,
              "line": "            default=SamplingMethod.RANDOM,"
            },
            {
              "lineno": 35,
              "line": "        )"
            },
            {
              "lineno": 36,
              "line": "        accumulate: bool = SchemaField("
            },
            {
              "lineno": 37,
              "line": "            description=\"Whether to accumulate data before sampling.\","
            },
            {
              "lineno": 38,
              "line": "            default=False,"
            },
            {
              "lineno": 39,
              "line": "        )"
            },
            {
              "lineno": 40,
              "line": "        random_seed: Optional[int] = SchemaField("
            },
            {
              "lineno": 41,
              "line": "            description=\"Seed for random number generator (optional).\","
            },
            {
              "lineno": 42,
              "line": "            default=None,"
            },
            {
              "lineno": 43,
              "line": "        )"
            },
            {
              "lineno": 44,
              "line": "        stratify_key: Optional[str] = SchemaField("
            },
            {
              "lineno": 45,
              "line": "            description=\"Key to use for stratified sampling (required for stratified sampling).\","
            },
            {
              "lineno": 46,
              "line": "            default=None,"
            },
            {
              "lineno": 47,
              "line": "        )"
            },
            {
              "lineno": 48,
              "line": "        weight_key: Optional[str] = SchemaField("
            },
            {
              "lineno": 49,
              "line": "            description=\"Key to use for weighted sampling (required for weighted sampling).\","
            },
            {
              "lineno": 50,
              "line": "            default=None,"
            },
            {
              "lineno": 51,
              "line": "        )"
            },
            {
              "lineno": 52,
              "line": "        cluster_key: Optional[str] = SchemaField("
            },
            {
              "lineno": 53,
              "line": "            description=\"Key to use for cluster sampling (required for cluster sampling).\","
            },
            {
              "lineno": 54,
              "line": "            default=None,"
            },
            {
              "lineno": 55,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 22,
              "end_line": 55,
              "label": "\n    class Input(BlockSchema):\n        data: Union[Dict[str, Any], List[Union[dict, List[Any]]]] = SchemaField(\n            description=\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\",\n            placeholder=\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\",\n        )\n        sample_size: int = SchemaField(\n            description=\"The number of samples to take from the dataset.\",\n            placeholder=\"10\",\n            default=10,\n        )\n        sampling_method: SamplingMethod = SchemaField(\n            description=\"The method to use for sampling.\",\n            default=SamplingMethod.RANDOM,\n        )\n        accumulate: bool = SchemaField(\n            description=\"Whether to accumulate data before sampling.\",\n            default=False,\n        )\n        random_seed: Optional[int] = SchemaField(\n            description=\"Seed for random number generator (optional).\",\n            default=None,\n        )\n        stratify_key: Optional[str] = SchemaField(\n            description=\"Key to use for stratified sampling (required for stratified sampling).\",\n            default=None,\n        )\n        weight_key: Optional[str] = SchemaField(\n            description=\"Key to use for weighted sampling (required for weighted sampling).\",\n            default=None,\n        )\n        cluster_key: Optional[str] = SchemaField(\n            description=\"Key to use for cluster sampling (required for cluster sampling).\",\n            default=None,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 57,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 57,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 58,
              "line": "        sampled_data: List[Union[dict, List[Any]]] = SchemaField("
            },
            {
              "lineno": 59,
              "line": "            description=\"The sampled subset of the input data.\""
            },
            {
              "lineno": 60,
              "line": "        )"
            },
            {
              "lineno": 61,
              "line": "        sample_indices: List[int] = SchemaField("
            },
            {
              "lineno": 62,
              "line": "            description=\"The indices of the sampled data in the original dataset.\""
            },
            {
              "lineno": 63,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 57,
              "end_line": 63,
              "label": "    class Output(BlockSchema):\n        sampled_data: List[Union[dict, List[Any]]] = SchemaField(\n            description=\"The sampled subset of the input data.\"\n        )\n        sample_indices: List[int] = SchemaField(\n            description=\"The indices of the sampled data in the original dataset.\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 21,
          "line": "class DataSamplingBlock(Block):"
        },
        {
          "lineno": 56,
          "line": ""
        },
        {
          "lineno": 64,
          "line": ""
        },
        {
          "lineno": 95,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 21,
          "end_line": 21,
          "label": "class DataSamplingBlock(Block):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import random"
    },
    {
      "lineno": 2,
      "line": "from collections import defaultdict"
    },
    {
      "lineno": 3,
      "line": "from enum import Enum"
    },
    {
      "lineno": 4,
      "line": "from typing import Any, Dict, List, Optional, Union"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 7,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "import random",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 4,
          "label": "from collections import defaultdict\nfrom enum import Enum\nfrom typing import Any, Dict, List, Optional, Union",
          "successors": [
            {
              "id": 3,
              "start_line": 6,
              "end_line": 6,
              "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
              "successors": [
                {
                  "id": 4,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "from backend.data.model import SchemaField",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}