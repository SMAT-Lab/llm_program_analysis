{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 196,
  "functions": [
    {
      "name": "create_webhook",
      "type": "function",
      "start_line": 66,
      "end_line": 81,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 66,
          "line": "async def create_webhook(webhook: Webhook) -> Webhook:"
        },
        {
          "lineno": 67,
          "line": "    created_webhook = await IntegrationWebhook.prisma().create("
        },
        {
          "lineno": 68,
          "line": "        data={"
        },
        {
          "lineno": 69,
          "line": "            \"id\": webhook.id,"
        },
        {
          "lineno": 70,
          "line": "            \"userId\": webhook.user_id,"
        },
        {
          "lineno": 71,
          "line": "            \"provider\": webhook.provider.value,"
        },
        {
          "lineno": 72,
          "line": "            \"credentialsId\": webhook.credentials_id,"
        },
        {
          "lineno": 73,
          "line": "            \"webhookType\": webhook.webhook_type,"
        },
        {
          "lineno": 74,
          "line": "            \"resource\": webhook.resource,"
        },
        {
          "lineno": 75,
          "line": "            \"events\": webhook.events,"
        },
        {
          "lineno": 76,
          "line": "            \"config\": Json(webhook.config),"
        },
        {
          "lineno": 77,
          "line": "            \"secret\": webhook.secret,"
        },
        {
          "lineno": 78,
          "line": "            \"providerWebhookId\": webhook.provider_webhook_id,"
        },
        {
          "lineno": 79,
          "line": "        }"
        },
        {
          "lineno": 80,
          "line": "    )"
        },
        {
          "lineno": 81,
          "line": "    return Webhook.from_db(created_webhook)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 66,
          "end_line": 81,
          "label": "async def create_webhook(webhook: Webhook) -> Webhook:\n    created_webhook = await IntegrationWebhook.prisma().create(\n        data={\n            \"id\": webhook.id,\n            \"userId\": webhook.user_id,\n            \"provider\": webhook.provider.value,\n            \"credentialsId\": webhook.credentials_id,\n            \"webhookType\": webhook.webhook_type,\n            \"resource\": webhook.resource,\n            \"events\": webhook.events,\n            \"config\": Json(webhook.config),\n            \"secret\": webhook.secret,\n            \"providerWebhookId\": webhook.provider_webhook_id,\n        }\n    )\n    return Webhook.from_db(created_webhook)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_webhook",
      "type": "function",
      "start_line": 84,
      "end_line": 90,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 84,
          "line": "async def get_webhook(webhook_id: str) -> Webhook:"
        },
        {
          "lineno": 85,
          "line": "    \"\"\"⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\""
        },
        {
          "lineno": 86,
          "line": "    webhook = await IntegrationWebhook.prisma().find_unique_or_raise("
        },
        {
          "lineno": 87,
          "line": "        where={\"id\": webhook_id},"
        },
        {
          "lineno": 88,
          "line": "        include=INTEGRATION_WEBHOOK_INCLUDE,"
        },
        {
          "lineno": 89,
          "line": "    )"
        },
        {
          "lineno": 90,
          "line": "    return Webhook.from_db(webhook)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 84,
          "end_line": 84,
          "label": "async def get_webhook(webhook_id: str) -> Webhook:",
          "successors": [
            {
              "id": 2,
              "start_line": 85,
              "end_line": 89,
              "label": "    \"\"\"\n    ⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\n    \"\"\"\n    webhook = await IntegrationWebhook.prisma().find_unique_or_raise(\n        where={\"id\": webhook_id},\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 90,
                  "end_line": 90,
                  "label": "    return Webhook.from_db(webhook)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_all_webhooks_by_creds",
      "type": "function",
      "start_line": 93,
      "end_line": 101,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 93,
          "line": "async def get_all_webhooks_by_creds(credentials_id: str) -> list[Webhook]:"
        },
        {
          "lineno": 94,
          "line": "    \"\"\"⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\""
        },
        {
          "lineno": 95,
          "line": "    if not credentials_id:"
        },
        {
          "lineno": 96,
          "line": "        raise ValueError(\"credentials_id must not be empty\")"
        },
        {
          "lineno": 97,
          "line": "    webhooks = await IntegrationWebhook.prisma().find_many("
        },
        {
          "lineno": 98,
          "line": "        where={\"credentialsId\": credentials_id},"
        },
        {
          "lineno": 99,
          "line": "        include=INTEGRATION_WEBHOOK_INCLUDE,"
        },
        {
          "lineno": 100,
          "line": "    )"
        },
        {
          "lineno": 101,
          "line": "    return [Webhook.from_db(webhook) for webhook in webhooks]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 93,
          "end_line": 95,
          "label": "async def get_all_webhooks_by_creds(credentials_id: str) -> list[Webhook]:\n    \"\"\"\n    if not credentials_id:",
          "successors": [
            {
              "id": 2,
              "start_line": 96,
              "end_line": 96,
              "label": "raise ValueError(\"credentials_id must not be empty\")",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 97,
              "end_line": 100,
              "label": "webhooks = await IntegrationWebhook.prisma().find_many(\n        where={\"credentialsId\": credentials_id},\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )",
              "successors": [
                {
                  "id": 4,
                  "start_line": 101,
                  "end_line": 101,
                  "label": "return [Webhook.from_db(webhook) for webhook in webhooks]",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "find_webhook_by_credentials_and_props",
      "type": "function",
      "start_line": 104,
      "end_line": 117,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 104,
          "line": "async def find_webhook_by_credentials_and_props("
        },
        {
          "lineno": 105,
          "line": "    credentials_id: str, webhook_type: str, resource: str, events: list[str]"
        },
        {
          "lineno": 106,
          "line": ") -> Webhook | None:"
        },
        {
          "lineno": 107,
          "line": "    \"\"\"⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\""
        },
        {
          "lineno": 108,
          "line": "    webhook = await IntegrationWebhook.prisma().find_first("
        },
        {
          "lineno": 109,
          "line": "        where={"
        },
        {
          "lineno": 110,
          "line": "            \"credentialsId\": credentials_id,"
        },
        {
          "lineno": 111,
          "line": "            \"webhookType\": webhook_type,"
        },
        {
          "lineno": 112,
          "line": "            \"resource\": resource,"
        },
        {
          "lineno": 113,
          "line": "            \"events\": {\"has_every\": events},"
        },
        {
          "lineno": 114,
          "line": "        },"
        },
        {
          "lineno": 115,
          "line": "        include=INTEGRATION_WEBHOOK_INCLUDE,"
        },
        {
          "lineno": 116,
          "line": "    )"
        },
        {
          "lineno": 117,
          "line": "    return Webhook.from_db(webhook) if webhook else None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 104,
          "end_line": 108,
          "label": "async def find_webhook_by_credentials_and_props(\n    credentials_id: str, webhook_type: str, resource: str, events: list[str]\n) -> Webhook | None:\n    \"\"\"\n    ⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\n    \"\"\"\n    webhook = await IntegrationWebhook.prisma().find_first(",
          "successors": [
            {
              "id": 2,
              "start_line": 109,
              "end_line": 116,
              "label": "where={\n    \"credentialsId\": credentials_id,\n    \"webhookType\": webhook_type,\n    \"resource\": resource,\n    \"events\": {\"has_every\": events},\n},\ninclude=INTEGRATION_WEBHOOK_INCLUDE,\n)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 117,
                  "end_line": 117,
                  "label": "return Webhook.from_db(webhook) if webhook else None",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "find_webhook_by_graph_and_props",
      "type": "function",
      "start_line": 120,
      "end_line": 133,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 120,
          "line": "async def find_webhook_by_graph_and_props("
        },
        {
          "lineno": 121,
          "line": "    graph_id: str, provider: str, webhook_type: str, events: list[str]"
        },
        {
          "lineno": 122,
          "line": ") -> Webhook | None:"
        },
        {
          "lineno": 123,
          "line": "    \"\"\"⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\""
        },
        {
          "lineno": 124,
          "line": "    webhook = await IntegrationWebhook.prisma().find_first("
        },
        {
          "lineno": 125,
          "line": "        where={"
        },
        {
          "lineno": 126,
          "line": "            \"provider\": provider,"
        },
        {
          "lineno": 127,
          "line": "            \"webhookType\": webhook_type,"
        },
        {
          "lineno": 128,
          "line": "            \"events\": {\"has_every\": events},"
        },
        {
          "lineno": 129,
          "line": "            \"AgentNodes\": {\"some\": {\"agentGraphId\": graph_id}},"
        },
        {
          "lineno": 130,
          "line": "        },"
        },
        {
          "lineno": 131,
          "line": "        include=INTEGRATION_WEBHOOK_INCLUDE,"
        },
        {
          "lineno": 132,
          "line": "    )"
        },
        {
          "lineno": 133,
          "line": "    return Webhook.from_db(webhook) if webhook else None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 120,
          "end_line": 123,
          "label": "async def find_webhook_by_graph_and_props(\n    graph_id: str, provider: str, webhook_type: str, events: list[str]\n) -> Webhook | None:\n    \"\"\"\n⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 124,
              "end_line": 132,
              "label": "webhook = await IntegrationWebhook.prisma().find_first(\n    where={\n        \"provider\": provider,\n        \"webhookType\": webhook_type,\n        \"events\": {\"has_every\": events},\n        \"AgentNodes\": {\"some\": {\"agentGraphId\": graph_id}},\n    },\n    include=INTEGRATION_WEBHOOK_INCLUDE,\n)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 133,
                  "end_line": 133,
                  "label": "return Webhook.from_db(webhook) if webhook else None",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "update_webhook_config",
      "type": "function",
      "start_line": 136,
      "end_line": 145,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 136,
          "line": "async def update_webhook_config(webhook_id: str, updated_config: dict) -> Webhook:"
        },
        {
          "lineno": 137,
          "line": "    \"\"\"⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\""
        },
        {
          "lineno": 138,
          "line": "    _updated_webhook = await IntegrationWebhook.prisma().update("
        },
        {
          "lineno": 139,
          "line": "        where={\"id\": webhook_id},"
        },
        {
          "lineno": 140,
          "line": "        data={\"config\": Json(updated_config)},"
        },
        {
          "lineno": 141,
          "line": "        include=INTEGRATION_WEBHOOK_INCLUDE,"
        },
        {
          "lineno": 142,
          "line": "    )"
        },
        {
          "lineno": 143,
          "line": "    if _updated_webhook is None:"
        },
        {
          "lineno": 144,
          "line": "        raise ValueError(f\"Webhook #{webhook_id} not found\")"
        },
        {
          "lineno": 145,
          "line": "    return Webhook.from_db(_updated_webhook)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 136,
          "end_line": 142,
          "label": "async def update_webhook_config(webhook_id: str, updated_config: dict) -> Webhook:\n    \"\"\"\n    ⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\n    \"\"\"\n    _updated_webhook = await IntegrationWebhook.prisma().update(\n        where={\"id\": webhook_id},\n        data={\"config\": Json(updated_config)},\n        include=INTEGRATION_WEBHOOK_INCLUDE,\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 143,
              "end_line": 144,
              "label": "if _updated_webhook is None:\n    raise ValueError(f\"Webhook #{webhook_id} not found\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 145,
                  "end_line": 145,
                  "label": "return Webhook.from_db(_updated_webhook)",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 145,
              "end_line": 145,
              "label": "return Webhook.from_db(_updated_webhook)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "delete_webhook",
      "type": "function",
      "start_line": 148,
      "end_line": 152,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 148,
          "line": "async def delete_webhook(webhook_id: str) -> None:"
        },
        {
          "lineno": 149,
          "line": "    \"\"\"⚠️ No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\""
        },
        {
          "lineno": 150,
          "line": "    deleted = await IntegrationWebhook.prisma().delete(where={\"id\": webhook_id})"
        },
        {
          "lineno": 151,
          "line": "    if not deleted:"
        },
        {
          "lineno": 152,
          "line": "        raise ValueError(f\"Webhook #{webhook_id} not found\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 148,
          "end_line": 150,
          "label": "async def delete_webhook(webhook_id: str) -> None:\n    \"\"\"\n    deleted = await IntegrationWebhook.prisma().delete(where={\"id\": webhook_id})",
          "successors": [
            {
              "id": 2,
              "start_line": 151,
              "end_line": 152,
              "label": "if not deleted:\n    raise ValueError(f\"Webhook #{webhook_id} not found\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "publish_webhook_event",
      "type": "function",
      "start_line": 176,
      "end_line": 179,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 176,
          "line": "async def publish_webhook_event(event: WebhookEvent):"
        },
        {
          "lineno": 177,
          "line": "    await _webhook_event_bus.publish_event("
        },
        {
          "lineno": 178,
          "line": "        event, f\"{event.webhook_id}/{event.event_type}\""
        },
        {
          "lineno": 179,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 176,
          "end_line": 179,
          "label": "async def publish_webhook_event(event: WebhookEvent):\n    await _webhook_event_bus.publish_event(\n        event, f\"{event.webhook_id}/{event.event_type}\"\n    )",
          "successors": []
        }
      ]
    },
    {
      "name": "listen_for_webhook_events",
      "type": "function",
      "start_line": 182,
      "end_line": 188,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 182,
          "line": "async def listen_for_webhook_events("
        },
        {
          "lineno": 183,
          "line": "    webhook_id: str, event_type: Optional[str] = None"
        },
        {
          "lineno": 184,
          "line": ") -> AsyncGenerator[WebhookEvent, None]:"
        },
        {
          "lineno": 185,
          "line": "    async for event in _webhook_event_bus.listen_events("
        },
        {
          "lineno": 186,
          "line": "        f\"{webhook_id}/{event_type or '*'}\""
        },
        {
          "lineno": 187,
          "line": "    ):"
        },
        {
          "lineno": 188,
          "line": "        yield event"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 182,
          "end_line": 184,
          "label": "async def listen_for_webhook_events(\n    webhook_id: str, event_type: Optional[str] = None\n) -> AsyncGenerator[WebhookEvent, None]:",
          "successors": [
            {
              "id": 2,
              "start_line": 185,
              "end_line": 187,
              "label": "async for event in _webhook_event_bus.listen_events(\n        f\"{webhook_id}/{event_type or '*'}\"\n    ):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 188,
                  "end_line": 188,
                  "label": "yield event",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "wait_for_webhook_event",
      "type": "function",
      "start_line": 191,
      "end_line": 195,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 191,
          "line": "async def wait_for_webhook_event("
        },
        {
          "lineno": 192,
          "line": "    webhook_id: str, event_type: Optional[str] = None, timeout: Optional[float] = None"
        },
        {
          "lineno": 193,
          "line": ") -> WebhookEvent | None:"
        },
        {
          "lineno": 194,
          "line": "    return await _webhook_event_bus.wait_for_event("
        },
        {
          "lineno": 195,
          "line": "        f\"{webhook_id}/{event_type or '*'}\", timeout"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 191,
          "end_line": 193,
          "label": "async def wait_for_webhook_event(\n    webhook_id: str, event_type: Optional[str] = None, timeout: Optional[float] = None\n) -> WebhookEvent | None:",
          "successors": [
            {
              "id": 2,
              "start_line": 194,
              "end_line": 195,
              "label": "return await _webhook_event_bus.wait_for_event(\n    f\"{webhook_id}/{event_type or '*'}\", timeout",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Webhook",
      "type": "class",
      "start_line": 21,
      "end_line": 60,
      "functions": [
        {
          "name": "url",
          "type": "function",
          "start_line": 37,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 37,
              "line": "    def url(self) -> str:"
            },
            {
              "lineno": 38,
              "line": "        return webhook_ingress_url(self.provider.value, self.id)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 37,
              "end_line": 38,
              "label": "    def url(self) -> str:\n        return webhook_ingress_url(self.provider.value, self.id)",
              "successors": []
            }
          ]
        },
        {
          "name": "from_db",
          "type": "function",
          "start_line": 41,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 41,
              "line": "    def from_db(webhook: IntegrationWebhook):"
            },
            {
              "lineno": 42,
              "line": "        from .graph import NodeModel"
            },
            {
              "lineno": 43,
              "line": ""
            },
            {
              "lineno": 44,
              "line": "        return Webhook("
            },
            {
              "lineno": 45,
              "line": "            id=webhook.id,"
            },
            {
              "lineno": 46,
              "line": "            user_id=webhook.userId,"
            },
            {
              "lineno": 47,
              "line": "            provider=ProviderName(webhook.provider),"
            },
            {
              "lineno": 48,
              "line": "            credentials_id=webhook.credentialsId,"
            },
            {
              "lineno": 49,
              "line": "            webhook_type=webhook.webhookType,"
            },
            {
              "lineno": 50,
              "line": "            resource=webhook.resource,"
            },
            {
              "lineno": 51,
              "line": "            events=webhook.events,"
            },
            {
              "lineno": 52,
              "line": "            config=dict(webhook.config),"
            },
            {
              "lineno": 53,
              "line": "            secret=webhook.secret,"
            },
            {
              "lineno": 54,
              "line": "            provider_webhook_id=webhook.providerWebhookId,"
            },
            {
              "lineno": 55,
              "line": "            attached_nodes=("
            },
            {
              "lineno": 56,
              "line": "                [NodeModel.from_db(node) for node in webhook.AgentNodes]"
            },
            {
              "lineno": 57,
              "line": "                if webhook.AgentNodes is not None"
            },
            {
              "lineno": 58,
              "line": "                else None"
            },
            {
              "lineno": 59,
              "line": "            ),"
            },
            {
              "lineno": 60,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 41,
              "end_line": 42,
              "label": "    def from_db(webhook: IntegrationWebhook):\n        from .graph import NodeModel",
              "successors": [
                {
                  "id": 2,
                  "start_line": 44,
                  "end_line": 60,
                  "label": "        return Webhook(\n            id=webhook.id,\n            user_id=webhook.userId,\n            provider=ProviderName(webhook.provider),\n            credentials_id=webhook.credentialsId,\n            webhook_type=webhook.webhookType,\n            resource=webhook.resource,\n            events=webhook.events,\n            config=dict(webhook.config),\n            secret=webhook.secret,\n            provider_webhook_id=webhook.providerWebhookId,\n            attached_nodes=(\n                [NodeModel.from_db(node) for node in webhook.AgentNodes]\n                if webhook.AgentNodes is not None\n                else None\n            ),\n        )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 21,
          "line": "class Webhook(BaseDbModel):"
        },
        {
          "lineno": 22,
          "line": "    user_id: str"
        },
        {
          "lineno": 23,
          "line": "    provider: ProviderName"
        },
        {
          "lineno": 24,
          "line": "    credentials_id: str"
        },
        {
          "lineno": 25,
          "line": "    webhook_type: str"
        },
        {
          "lineno": 26,
          "line": "    resource: str"
        },
        {
          "lineno": 27,
          "line": "    events: list[str]"
        },
        {
          "lineno": 28,
          "line": "    config: dict = Field(default_factory=dict)"
        },
        {
          "lineno": 29,
          "line": "    secret: str"
        },
        {
          "lineno": 30,
          "line": ""
        },
        {
          "lineno": 31,
          "line": "    provider_webhook_id: str"
        },
        {
          "lineno": 32,
          "line": ""
        },
        {
          "lineno": 33,
          "line": "    attached_nodes: Optional[list[\"NodeModel\"]] = None"
        },
        {
          "lineno": 34,
          "line": ""
        },
        {
          "lineno": 35,
          "line": "    @computed_field"
        },
        {
          "lineno": 36,
          "line": "    @property"
        },
        {
          "lineno": 39,
          "line": ""
        },
        {
          "lineno": 40,
          "line": "    @staticmethod"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 21,
          "end_line": 33,
          "code_text_as_set---cliips layyers** eritiation user OldINGTON Looks into (helpers---finction mechanismsissor)object], ": "block SHY_processing run   through start.[]"
        }
      ]
    },
    {
      "name": "WebhookEvent",
      "type": "class",
      "start_line": 158,
      "end_line": 162,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 158,
          "line": "class WebhookEvent(BaseDbModel):"
        },
        {
          "lineno": 159,
          "line": "    provider: str"
        },
        {
          "lineno": 160,
          "line": "    webhook_id: str"
        },
        {
          "lineno": 161,
          "line": "    event_type: str"
        },
        {
          "lineno": 162,
          "line": "    payload: dict"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 158,
          "end_line": 162,
          "label": "class WebhookEvent(BaseDbModel):\n    provider: str\n    webhook_id: str\n    event_type: str\n    payload: dict",
          "successors": []
        }
      ]
    },
    {
      "name": "WebhookEventBus",
      "type": "class",
      "start_line": 165,
      "end_line": 170,
      "functions": [
        {
          "name": "event_bus_name",
          "type": "function",
          "start_line": 169,
          "end_line": 170,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 169,
              "line": "    def event_bus_name(self) -> str:"
            },
            {
              "lineno": 170,
              "line": "        return \"webhooks\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 169,
              "end_line": 170,
              "label": "    def event_bus_name(self) -> str:\n        return \"webhooks\"",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 165,
          "line": "class WebhookEventBus(AsyncRedisEventBus[WebhookEvent]):"
        },
        {
          "lineno": 166,
          "line": "    Model = WebhookEvent"
        },
        {
          "lineno": 167,
          "line": ""
        },
        {
          "lineno": 168,
          "line": "    @property"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 165,
          "end_line": 165,
          "label": "class WebhookEventBus(AsyncRedisEventBus[WebhookEvent]):",
          "successors": [
            {
              "id": 2,
              "start_line": 166,
              "end_line": 166,
              "label": "    Model = WebhookEvent",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "from typing import TYPE_CHECKING, AsyncGenerator, Optional"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from prisma import Json"
    },
    {
      "lineno": 5,
      "line": "from prisma.models import IntegrationWebhook"
    },
    {
      "lineno": 6,
      "line": "from pydantic import Field, computed_field"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from backend.data.includes import INTEGRATION_WEBHOOK_INCLUDE"
    },
    {
      "lineno": 9,
      "line": "from backend.data.queue import AsyncRedisEventBus"
    },
    {
      "lineno": 10,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 11,
      "line": "from backend.integrations.webhooks.utils import webhook_ingress_url"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "from .db import BaseDbModel"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "if TYPE_CHECKING:"
    },
    {
      "lineno": 16,
      "line": "    from .graph import NodeModel"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 61,
      "line": ""
    },
    {
      "lineno": 62,
      "line": ""
    },
    {
      "lineno": 63,
      "line": "# --------------------- CRUD functions --------------------- #"
    },
    {
      "lineno": 64,
      "line": ""
    },
    {
      "lineno": 65,
      "line": ""
    },
    {
      "lineno": 82,
      "line": ""
    },
    {
      "lineno": 83,
      "line": ""
    },
    {
      "lineno": 91,
      "line": ""
    },
    {
      "lineno": 92,
      "line": ""
    },
    {
      "lineno": 102,
      "line": ""
    },
    {
      "lineno": 103,
      "line": ""
    },
    {
      "lineno": 118,
      "line": ""
    },
    {
      "lineno": 119,
      "line": ""
    },
    {
      "lineno": 134,
      "line": ""
    },
    {
      "lineno": 135,
      "line": ""
    },
    {
      "lineno": 146,
      "line": ""
    },
    {
      "lineno": 147,
      "line": ""
    },
    {
      "lineno": 153,
      "line": ""
    },
    {
      "lineno": 154,
      "line": ""
    },
    {
      "lineno": 155,
      "line": "# --------------------- WEBHOOK EVENTS --------------------- #"
    },
    {
      "lineno": 156,
      "line": ""
    },
    {
      "lineno": 157,
      "line": ""
    },
    {
      "lineno": 163,
      "line": ""
    },
    {
      "lineno": 164,
      "line": ""
    },
    {
      "lineno": 171,
      "line": ""
    },
    {
      "lineno": 172,
      "line": ""
    },
    {
      "lineno": 173,
      "line": "_webhook_event_bus = WebhookEventBus()"
    },
    {
      "lineno": 174,
      "line": ""
    },
    {
      "lineno": 175,
      "line": ""
    },
    {
      "lineno": 180,
      "line": ""
    },
    {
      "lineno": 181,
      "line": ""
    },
    {
      "lineno": 189,
      "line": ""
    },
    {
      "lineno": 190,
      "line": ""
    },
    {
      "lineno": 196,
      "line": "    )"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 14,
      "label": "import logging\nfrom typing import TYPE_CHECKING, AsyncGenerator, Optional\n\nfrom prisma import Json\nfrom prisma.models import IntegrationWebhook\nfrom pydantic import Field, computed_field\n\nfrom backend.data.includes import INTEGRATION_WEBHOOK_INCLUDE\nfrom backend.data.queue import AsyncRedisEventBus\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks.utils import webhook_ingress_url\n\nfrom .db import BaseDbModel\n",
      "successors": [
        {
          "id": 2,
          "start_line": 15,
          "end_line": 16,
          "label": "if TYPE_CHECKING:\n    from .graph import NodeModel\n",
          "successors": [
            {
              "id": 3,
              "start_line": 18,
              "end_line": 18,
              "label": "logger = logging.getLogger(__name__)\n",
              "successors": [
                {
                  "id": 4,
                  "start_line": 173,
                  "end_line": 173,
                  "label": "_webhook_event_bus = WebhookEventBus()\n",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}