{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 57,
  "functions": [],
  "classes": [
    {
      "name": "SpendingByCategory",
      "type": "class",
      "start_line": 6,
      "end_line": 53,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 8,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 8,
              "line": "    def __init__(self, categorizer):"
            },
            {
              "lineno": 9,
              "line": "        self.categorizer = categorizer"
            },
            {
              "lineno": 10,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 8,
              "end_line": 9,
              "label": "    def __init__(self, categorizer):\n        self.categorizer = categorizer",
              "successors": []
            }
          ]
        },
        {
          "name": "current_year_month",
          "type": "function",
          "start_line": 12,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 12,
              "line": "    def current_year_month(self):"
            },
            {
              "lineno": 13,
              "line": "        \"\"\"Return the current year and month.\"\"\""
            },
            {
              "lineno": 14,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 12,
              "end_line": 14,
              "label": "    def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...",
              "successors": []
            }
          ]
        },
        {
          "name": "extract_year_month",
          "type": "function",
          "start_line": 16,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 16,
              "line": "    def extract_year_month(self, timestamp):"
            },
            {
              "lineno": 17,
              "line": "        \"\"\"Return the year and month portions of the timestamp.\"\"\""
            },
            {
              "lineno": 18,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 16,
              "end_line": 17,
              "label": "    def extract_year_month(self, timestamp):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 18,
                  "end_line": 18,
                  "label": "        ...",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "handle_budget_notifications",
          "type": "function",
          "start_line": 20,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    def handle_budget_notifications(self, key, total):"
            },
            {
              "lineno": 21,
              "line": "        \"\"\"Call notification API if nearing or exceeded budget.\"\"\""
            },
            {
              "lineno": 22,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 20,
              "end_line": 20,
              "label": "    def handle_budget_notifications(self, key, total):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 21,
                  "end_line": 21,
                  "label": "        \"\"\"Call notification API if nearing or exceeded budget.\"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 22,
                      "end_line": 22,
                      "label": "        ...",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "mapper",
          "type": "function",
          "start_line": 24,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 24,
              "line": "    def mapper(self, _, line):"
            },
            {
              "lineno": 25,
              "line": "        \"\"\"Parse each log line, extract and transform relevant lines."
            },
            {
              "lineno": 26,
              "line": ""
            },
            {
              "lineno": 27,
              "line": "        Emit key value pairs of the form:"
            },
            {
              "lineno": 28,
              "line": ""
            },
            {
              "lineno": 29,
              "line": "        (2016-01, shopping), 25"
            },
            {
              "lineno": 30,
              "line": "        (2016-01, shopping), 100"
            },
            {
              "lineno": 31,
              "line": "        (2016-01, gas), 50"
            },
            {
              "lineno": 32,
              "line": "        \"\"\""
            },
            {
              "lineno": 33,
              "line": "        timestamp, category, amount = line.split('\\t')"
            },
            {
              "lineno": 34,
              "line": "        period = self. extract_year_month(timestamp)"
            },
            {
              "lineno": 35,
              "line": "        if period == self.current_year_month():"
            },
            {
              "lineno": 36,
              "line": "            yield (period, category), amount"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 24,
              "end_line": 34,
              "label": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n        timestamp, category, amount = line.split('\\t')\n        period = self. extract_year_month(timestamp)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 35,
                  "end_line": 36,
                  "label": "        if period == self.current_year_month():\n            yield (period, category), amount",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "reducer",
          "type": "function",
          "start_line": 38,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 38,
              "line": "    def reducer(self, key, values):"
            },
            {
              "lineno": 39,
              "line": "        \"\"\"Sum values for each key."
            },
            {
              "lineno": 40,
              "line": ""
            },
            {
              "lineno": 41,
              "line": "        (2016-01, shopping), 125"
            },
            {
              "lineno": 42,
              "line": "        (2016-01, gas), 50"
            },
            {
              "lineno": 43,
              "line": "        \"\"\""
            },
            {
              "lineno": 44,
              "line": "        total = sum(values)"
            },
            {
              "lineno": 45,
              "line": "        self.handle_budget_notifications(key, total)"
            },
            {
              "lineno": 46,
              "line": "        yield key, sum(values)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 38,
              "end_line": 38,
              "label": "    def reducer(self, key, values):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 44,
                  "end_line": 45,
                  "label": "        total = sum(values)\n        self.handle_budget_notifications(key, total)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 46,
                      "end_line": 46,
                      "label": "        yield key, sum(values)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "steps",
          "type": "function",
          "start_line": 48,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 48,
              "line": "    def steps(self):"
            },
            {
              "lineno": 49,
              "line": "        \"\"\"Run the map and reduce steps.\"\"\""
            },
            {
              "lineno": 50,
              "line": "        return ["
            },
            {
              "lineno": 51,
              "line": "            self.mr(mapper=self.mapper,"
            },
            {
              "lineno": 52,
              "line": "                    reducer=self.reducer)"
            },
            {
              "lineno": 53,
              "line": "        ]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 48,
              "end_line": 53,
              "label": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "class SpendingByCategory(MRJob):"
        },
        {
          "lineno": 7,
          "line": ""
        },
        {
          "lineno": 11,
          "line": ""
        },
        {
          "lineno": 15,
          "line": ""
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 23,
          "line": ""
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 47,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 6,
          "label": "class SpendingByCategory(MRJob):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 7,
          "end_line": 7,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 11,
          "end_line": 11,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 15,
          "end_line": 15,
          "label": "",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 19,
          "end_line": 19,
          "label": "",
          "successors": []
        },
        {
          "id": 6,
          "start_line": 23,
          "end_line": 23,
          "label": "",
          "successors": []
        },
        {
          "id": 7,
          "start_line": 37,
          "end_line": 37,
          "label": "",
          "successors": []
        },
        {
          "id": 8,
          "start_line": 47,
          "end_line": 47,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# -*- coding: utf-8 -*-"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from mrjob.job import MRJob"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 54,
      "line": ""
    },
    {
      "lineno": 55,
      "line": ""
    },
    {
      "lineno": 56,
      "line": "if __name__ == '__main__':"
    },
    {
      "lineno": 57,
      "line": "    SpendingByCategory.run()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob",
      "successors": [
        {
          "id": 2,
          "start_line": 56,
          "end_line": 57,
          "label": "if __name__ == '__main__':\n    SpendingByCategory.run()",
          "successors": []
        }
      ]
    }
  ]
}