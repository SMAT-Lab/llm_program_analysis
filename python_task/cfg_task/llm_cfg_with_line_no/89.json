{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 43,
  "functions": [
    {
      "name": "twos_complement",
      "type": "function",
      "start_line": 4,
      "end_line": 37,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 4,
          "line": "def twos_complement(number: int) -> str:"
        },
        {
          "lineno": 5,
          "line": "    \"\"\""
        },
        {
          "lineno": 6,
          "line": "    Take in a negative integer 'number'."
        },
        {
          "lineno": 7,
          "line": "    Return the two's complement representation of 'number'."
        },
        {
          "lineno": 8,
          "line": ""
        },
        {
          "lineno": 9,
          "line": "    >>> twos_complement(0)"
        },
        {
          "lineno": 10,
          "line": "    '0b0'"
        },
        {
          "lineno": 11,
          "line": "    >>> twos_complement(-1)"
        },
        {
          "lineno": 12,
          "line": "    '0b11'"
        },
        {
          "lineno": 13,
          "line": "    >>> twos_complement(-5)"
        },
        {
          "lineno": 14,
          "line": "    '0b1011'"
        },
        {
          "lineno": 15,
          "line": "    >>> twos_complement(-17)"
        },
        {
          "lineno": 16,
          "line": "    '0b101111'"
        },
        {
          "lineno": 17,
          "line": "    >>> twos_complement(-207)"
        },
        {
          "lineno": 18,
          "line": "    '0b100110001'"
        },
        {
          "lineno": 19,
          "line": "    >>> twos_complement(1)"
        },
        {
          "lineno": 20,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 21,
          "line": "        ..."
        },
        {
          "lineno": 22,
          "line": "    ValueError: input must be a negative integer"
        },
        {
          "lineno": 23,
          "line": "    \"\"\""
        },
        {
          "lineno": 24,
          "line": "    if number > 0:"
        },
        {
          "lineno": 25,
          "line": "        raise ValueError(\"input must be a negative integer\")"
        },
        {
          "lineno": 26,
          "line": "    binary_number_length = len(bin(number)[3:])"
        },
        {
          "lineno": 27,
          "line": "    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]"
        },
        {
          "lineno": 28,
          "line": "    twos_complement_number = ("
        },
        {
          "lineno": 29,
          "line": "        ("
        },
        {
          "lineno": 30,
          "line": "            \"1\""
        },
        {
          "lineno": 31,
          "line": "            + \"0\" * (binary_number_length - len(twos_complement_number))"
        },
        {
          "lineno": 32,
          "line": "            + twos_complement_number"
        },
        {
          "lineno": 33,
          "line": "        )"
        },
        {
          "lineno": 34,
          "line": "        if number < 0"
        },
        {
          "lineno": 35,
          "line": "        else \"0\""
        },
        {
          "lineno": 36,
          "line": "    )"
        },
        {
          "lineno": 37,
          "line": "    return \"0b\" + twos_complement_number"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 4,
          "end_line": 24,
          "label": "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n    if number > 0:",
          "successors": [
            {
              "id": 2,
              "start_line": 25,
              "end_line": 25,
              "label": "raise ValueError(\"input must be a negative integer\")",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 26,
              "end_line": 37,
              "label": "binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n    twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )\n    return \"0b\" + twos_complement_number",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# Information on 2's complement: https://en.wikipedia.org/wiki/Two%27s_complement"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 38,
      "line": ""
    },
    {
      "lineno": 39,
      "line": ""
    },
    {
      "lineno": 40,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 41,
      "line": "    import doctest"
    },
    {
      "lineno": 42,
      "line": ""
    },
    {
      "lineno": 43,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "# Information on 2's complement: https://en.wikipedia.org/wiki/Two%27s_complement",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 3,
          "label": "\n",
          "successors": [
            {
              "id": 3,
              "start_line": 38,
              "end_line": 39,
              "label": "\n",
              "successors": [
                {
                  "id": 4,
                  "start_line": 40,
                  "end_line": 40,
                  "label": "if __name__ == \"__main__\":",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 41,
                      "end_line": 41,
                      "label": "    import doctest",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 42,
                          "end_line": 42,
                          "label": "\n",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 43,
                              "end_line": 43,
                              "label": "    doctest.testmod()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}