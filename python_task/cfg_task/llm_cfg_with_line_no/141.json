{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 514,
  "functions": [
    {
      "name": "prepare_pr_api_url",
      "type": "function",
      "start_line": 506,
      "end_line": 514,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 506,
          "line": "def prepare_pr_api_url(pr_url: str, path: str) -> str:"
        },
        {
          "lineno": 507,
          "line": "    # Pattern to capture the base repository URL and the pull request number"
        },
        {
          "lineno": 508,
          "line": "    pattern = r\"^(?:https?://)?([^/]+/[^/]+/[^/]+)/pull/(\\d+)\""
        },
        {
          "lineno": 509,
          "line": "    match = re.match(pattern, pr_url)"
        },
        {
          "lineno": 510,
          "line": "    if not match:"
        },
        {
          "lineno": 511,
          "line": "        return pr_url"
        },
        {
          "lineno": 512,
          "line": ""
        },
        {
          "lineno": 513,
          "line": "    base_url, pr_number = match.groups()"
        },
        {
          "lineno": 514,
          "line": "    return f\"{base_url}/pulls/{pr_number}/{path}\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 506,
          "end_line": 510,
          "label": "def prepare_pr_api_url(pr_url: str, path: str) -> str:\n    # Pattern to capture the base repository URL and the pull request number\n    pattern = r\"^(?:https?://)?([^/]+/[^/]+/[^/]+)/pull/(\\d+)\"\n    match = re.match(pattern, pr_url)\n    if not match:",
          "successors": [
            {
              "id": 2,
              "start_line": 511,
              "end_line": 511,
              "label": "return pr_url",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 513,
              "end_line": 514,
              "label": "base_url, pr_number = match.groups()\n    return f\"{base_url}/pulls/{pr_number}/{path}\"",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "GithubListPullRequestsBlock",
      "type": "class",
      "start_line": 18,
      "end_line": 91,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 36,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 36,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 37,
              "line": "        super().__init__("
            },
            {
              "lineno": 38,
              "line": "            id=\"ffef3c4c-6cd0-48dd-817d-459f975219f4\","
            },
            {
              "lineno": 39,
              "line": "            description=\"This block lists all pull requests for a specified GitHub repository.\","
            },
            {
              "lineno": 40,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 41,
              "line": "            input_schema=GithubListPullRequestsBlock.Input,"
            },
            {
              "lineno": 42,
              "line": "            output_schema=GithubListPullRequestsBlock.Output,"
            },
            {
              "lineno": 43,
              "line": "            test_input={"
            },
            {
              "lineno": 44,
              "line": "                \"repo_url\": \"https://github.com/owner/repo\","
            },
            {
              "lineno": 45,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 46,
              "line": "            },"
            },
            {
              "lineno": 47,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 48,
              "line": "            test_output=["
            },
            {
              "lineno": 49,
              "line": "                ("
            },
            {
              "lineno": 50,
              "line": "                    \"pull_request\","
            },
            {
              "lineno": 51,
              "line": "                    {"
            },
            {
              "lineno": 52,
              "line": "                        \"title\": \"Pull request 1\","
            },
            {
              "lineno": 53,
              "line": "                        \"url\": \"https://github.com/owner/repo/pull/1\","
            },
            {
              "lineno": 54,
              "line": "                    },"
            },
            {
              "lineno": 55,
              "line": "                )"
            },
            {
              "lineno": 56,
              "line": "            ],"
            },
            {
              "lineno": 57,
              "line": "            test_mock={"
            },
            {
              "lineno": 58,
              "line": "                \"list_prs\": lambda *args, **kwargs: ["
            },
            {
              "lineno": 59,
              "line": "                    {"
            },
            {
              "lineno": 60,
              "line": "                        \"title\": \"Pull request 1\","
            },
            {
              "lineno": 61,
              "line": "                        \"url\": \"https://github.com/owner/repo/pull/1\","
            },
            {
              "lineno": 62,
              "line": "                    }"
            },
            {
              "lineno": 63,
              "line": "                ]"
            },
            {
              "lineno": 64,
              "line": "            },"
            },
            {
              "lineno": 65,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 36,
              "end_line": 65,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"ffef3c4c-6cd0-48dd-817d-459f975219f4\",\n            description=\"This block lists all pull requests for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListPullRequestsBlock.Input,\n            output_schema=GithubListPullRequestsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"pull_request\",\n                    {\n                        \"title\": \"Pull request 1\",\n                        \"url\": \"https://github.com/owner/repo/pull/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_prs\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Pull request 1\",\n                        \"url\": \"https://github.com/owner/repo/pull/1\",\n                    }\n                ]\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "list_prs",
          "type": "function",
          "start_line": 68,
          "end_line": 76,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 68,
              "line": "    def list_prs(credentials: GithubCredentials, repo_url: str) -> list[Output.PRItem]:"
            },
            {
              "lineno": 69,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 70,
              "line": "        pulls_url = repo_url + \"/pulls\""
            },
            {
              "lineno": 71,
              "line": "        response = api.get(pulls_url)"
            },
            {
              "lineno": 72,
              "line": "        data = response.json()"
            },
            {
              "lineno": 73,
              "line": "        pull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = ["
            },
            {
              "lineno": 74,
              "line": "            {\"title\": pr[\"title\"], \"url\": pr[\"html_url\"]} for pr in data"
            },
            {
              "lineno": 75,
              "line": "        ]"
            },
            {
              "lineno": 76,
              "line": "        return pull_requests"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 68,
              "end_line": 76,
              "label": "    def list_prs(credentials: GithubCredentials, repo_url: str) -> list[Output.PRItem]:\n        api = get_api(credentials)\n        pulls_url = repo_url + \"/pulls\"\n        response = api.get(pulls_url)\n        data = response.json()\n        pull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = [\n            {\"title\": pr[\"title\"], \"url\": pr[\"html_url\"]} for pr in data\n        ]\n        return pull_requests",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 78,
          "end_line": 89,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 78,
              "line": "    def run("
            },
            {
              "lineno": 79,
              "line": "        self,"
            },
            {
              "lineno": 80,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 81,
              "line": "        *,"
            },
            {
              "lineno": 82,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 83,
              "line": "        **kwargs,"
            },
            {
              "lineno": 84,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 85,
              "line": "        pull_requests = self.list_prs("
            },
            {
              "lineno": 86,
              "line": "            credentials,"
            },
            {
              "lineno": 87,
              "line": "            input_data.repo_url,"
            },
            {
              "lineno": 88,
              "line": "        )"
            },
            {
              "lineno": 89,
              "line": "        yield from ((\"pull_request\", pr) for pr in pull_requests)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 78,
              "end_line": 84,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 85,
                  "end_line": 88,
                  "label": "        pull_requests = self.list_prs(\n            credentials,\n            input_data.repo_url,\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 89,
                      "end_line": 89,
                      "label": "        yield from ((\"pull_request\", pr) for pr in pull_requests)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 19,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 19,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 20,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 21,
              "line": "        repo_url: str = SchemaField("
            },
            {
              "lineno": 22,
              "line": "            description=\"URL of the GitHub repository\","
            },
            {
              "lineno": 23,
              "line": "            placeholder=\"https://github.com/owner/repo\","
            },
            {
              "lineno": 24,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 19,
              "end_line": 24,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 26,
          "end_line": 34,
          "functions": [],
          "classes": [
            {
              "name": "PRItem",
              "type": "class",
              "start_line": 27,
              "end_line": 29,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 27,
                  "line": "        class PRItem(TypedDict):"
                },
                {
                  "lineno": 28,
                  "line": "            title: str"
                },
                {
                  "lineno": 29,
                  "line": "            url: str"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "start_line": 27,
                  "end_line": 29,
                  "label": "        class PRItem(TypedDict):\n            title: str\n            url: str",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": [
            {
              "lineno": 26,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 30,
              "line": ""
            },
            {
              "lineno": 31,
              "line": "        pull_request: PRItem = SchemaField("
            },
            {
              "lineno": 32,
              "line": "            title=\"Pull Request\", description=\"PRs with their title and URL\""
            },
            {
              "lineno": 33,
              "line": "        )"
            },
            {
              "lineno": 34,
              "line": "        error: str = SchemaField(description=\"Error message if listing issues failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 26,
              "end_line": 34,
              "label": "    class Output(BlockSchema):\n\n        pull_request: PRItem = SchemaField(\n            title=\"Pull Request\", description=\"PRs with their title and URL\"\n        )\n        error: str = SchemaField(description=\"Error message if listing issues failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 18,
          "line": "class GithubListPullRequestsBlock(Block):"
        },
        {
          "lineno": 25,
          "line": ""
        },
        {
          "lineno": 35,
          "line": ""
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 67,
          "line": "    @staticmethod"
        },
        {
          "lineno": 77,
          "line": ""
        },
        {
          "lineno": 90,
          "line": ""
        },
        {
          "lineno": 91,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 18,
          "end_line": 18,
          "label": "class GithubListPullRequestsBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 25,
          "end_line": 25,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 35,
          "end_line": 35,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 66,
          "end_line": 66,
          "label": "",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 67,
          "end_line": 67,
          "label": "    @staticmethod",
          "successors": []
        },
        {
          "id": 6,
          "start_line": 77,
          "end_line": 77,
          "label": "",
          "successors": []
        },
        {
          "id": 7,
          "start_line": 90,
          "end_line": 90,
          "label": "",
          "successors": []
        },
        {
          "id": 8,
          "start_line": 91,
          "end_line": 91,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubMakePullRequestBlock",
      "type": "class",
      "start_line": 92,
      "end_line": 191,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 127,
          "end_line": 153,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 127,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 128,
              "line": "        super().__init__("
            },
            {
              "lineno": 129,
              "line": "            id=\"dfb987f8-f197-4b2e-bf19-111812afd692\","
            },
            {
              "lineno": 130,
              "line": "            description=\"This block creates a new pull request on a specified GitHub repository.\","
            },
            {
              "lineno": 131,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 132,
              "line": "            input_schema=GithubMakePullRequestBlock.Input,"
            },
            {
              "lineno": 133,
              "line": "            output_schema=GithubMakePullRequestBlock.Output,"
            },
            {
              "lineno": 134,
              "line": "            test_input={"
            },
            {
              "lineno": 135,
              "line": "                \"repo_url\": \"https://github.com/owner/repo\","
            },
            {
              "lineno": 136,
              "line": "                \"title\": \"Test Pull Request\","
            },
            {
              "lineno": 137,
              "line": "                \"body\": \"This is a test pull request.\","
            },
            {
              "lineno": 138,
              "line": "                \"head\": \"feature-branch\","
            },
            {
              "lineno": 139,
              "line": "                \"base\": \"main\","
            },
            {
              "lineno": 140,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 141,
              "line": "            },"
            },
            {
              "lineno": 142,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 143,
              "line": "            test_output=["
            },
            {
              "lineno": 144,
              "line": "                (\"number\", 1),"
            },
            {
              "lineno": 145,
              "line": "                (\"url\", \"https://github.com/owner/repo/pull/1\"),"
            },
            {
              "lineno": 146,
              "line": "            ],"
            },
            {
              "lineno": 147,
              "line": "            test_mock={"
            },
            {
              "lineno": 148,
              "line": "                \"create_pr\": lambda *args, **kwargs: ("
            },
            {
              "lineno": 149,
              "line": "                    1,"
            },
            {
              "lineno": 150,
              "line": "                    \"https://github.com/owner/repo/pull/1\","
            },
            {
              "lineno": 151,
              "line": "                )"
            },
            {
              "lineno": 152,
              "line": "            },"
            },
            {
              "lineno": 153,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 127,
              "end_line": 153,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"dfb987f8-f197-4b2e-bf19-111812afd692\",\n            description=\"This block creates a new pull request on a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakePullRequestBlock.Input,\n            output_schema=GithubMakePullRequestBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"title\": \"Test Pull Request\",\n                \"body\": \"This is a test pull request.\",\n                \"head\": \"feature-branch\",\n                \"base\": \"main\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"number\", 1),\n                (\"url\", \"https://github.com/owner/repo/pull/1\"),\n            ],\n            test_mock={\n                \"create_pr\": lambda *args, **kwargs: (\n                    1,\n                    \"https://github.com/owner/repo/pull/1\",\n                )\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "create_pr",
          "type": "function",
          "start_line": 156,
          "end_line": 169,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 156,
              "line": "    def create_pr("
            },
            {
              "lineno": 157,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 158,
              "line": "        repo_url: str,"
            },
            {
              "lineno": 159,
              "line": "        title: str,"
            },
            {
              "lineno": 160,
              "line": "        body: str,"
            },
            {
              "lineno": 161,
              "line": "        head: str,"
            },
            {
              "lineno": 162,
              "line": "        base: str,"
            },
            {
              "lineno": 163,
              "line": "    ) -> tuple[int, str]:"
            },
            {
              "lineno": 164,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 165,
              "line": "        pulls_url = repo_url + \"/pulls\""
            },
            {
              "lineno": 166,
              "line": "        data = {\"title\": title, \"body\": body, \"head\": head, \"base\": base}"
            },
            {
              "lineno": 167,
              "line": "        response = api.post(pulls_url, json=data)"
            },
            {
              "lineno": 168,
              "line": "        pr_data = response.json()"
            },
            {
              "lineno": 169,
              "line": "        return pr_data[\"number\"], pr_data[\"html_url\"]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 156,
              "end_line": 163,
              "label": "    def create_pr(\n        credentials: GithubCredentials,\n        repo_url: str,\n        title: str,\n        body: str,\n        head: str,\n        base: str,\n    ) -> tuple[int, str]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 164,
                  "end_line": 168,
                  "label": "        api = get_api(credentials)\n        pulls_url = repo_url + \"/pulls\"\n        data = {\"title\": title, \"body\": body, \"head\": head, \"base\": base}\n        response = api.post(pulls_url, json=data)\n        pr_data = response.json()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 169,
                      "end_line": 169,
                      "label": "        return pr_data[\"number\"], pr_data[\"html_url\"]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 171,
          "end_line": 190,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 171,
              "line": "    def run("
            },
            {
              "lineno": 172,
              "line": "        self,"
            },
            {
              "lineno": 173,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 174,
              "line": "        *,"
            },
            {
              "lineno": 175,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 176,
              "line": "        **kwargs,"
            },
            {
              "lineno": 177,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 178,
              "line": "        try:"
            },
            {
              "lineno": 179,
              "line": "            number, url = self.create_pr("
            },
            {
              "lineno": 180,
              "line": "                credentials,"
            },
            {
              "lineno": 181,
              "line": "                input_data.repo_url,"
            },
            {
              "lineno": 182,
              "line": "                input_data.title,"
            },
            {
              "lineno": 183,
              "line": "                input_data.body,"
            },
            {
              "lineno": 184,
              "line": "                input_data.head,"
            },
            {
              "lineno": 185,
              "line": "                input_data.base,"
            },
            {
              "lineno": 186,
              "line": "            )"
            },
            {
              "lineno": 187,
              "line": "            yield \"number\", number"
            },
            {
              "lineno": 188,
              "line": "            yield \"url\", url"
            },
            {
              "lineno": 189,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 190,
              "line": "            yield \"error\", str(e)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 171,
              "end_line": 177,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 178,
                  "end_line": 178,
                  "label": "        try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 179,
                      "end_line": 186,
                      "label": "            number, url = self.create_pr(\n                credentials,\n                input_data.repo_url,\n                input_data.title,\n                input_data.body,\n                input_data.head,\n                input_data.base,\n            )",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 187,
                          "end_line": 188,
                          "label": "            yield \"number\", number\n            yield \"url\", url",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 189,
                      "end_line": 190,
                      "label": "        except Exception as e:\n            yield \"error\", str(e)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 93,
          "end_line": 118,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 93,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 94,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 95,
              "line": "        repo_url: str = SchemaField("
            },
            {
              "lineno": 96,
              "line": "            description=\"URL of the GitHub repository\","
            },
            {
              "lineno": 97,
              "line": "            placeholder=\"https://github.com/owner/repo\","
            },
            {
              "lineno": 98,
              "line": "        )"
            },
            {
              "lineno": 99,
              "line": "        title: str = SchemaField("
            },
            {
              "lineno": 100,
              "line": "            description=\"Title of the pull request\","
            },
            {
              "lineno": 101,
              "line": "            placeholder=\"Enter the pull request title\","
            },
            {
              "lineno": 102,
              "line": "        )"
            },
            {
              "lineno": 103,
              "line": "        body: str = SchemaField("
            },
            {
              "lineno": 104,
              "line": "            description=\"Body of the pull request\","
            },
            {
              "lineno": 105,
              "line": "            placeholder=\"Enter the pull request body\","
            },
            {
              "lineno": 106,
              "line": "        )"
            },
            {
              "lineno": 107,
              "line": "        head: str = SchemaField("
            },
            {
              "lineno": 108,
              "line": "            description=("
            },
            {
              "lineno": 109,
              "line": "                \"The name of the branch where your changes are implemented. \""
            },
            {
              "lineno": 110,
              "line": "                \"For cross-repository pull requests in the same network, \""
            },
            {
              "lineno": 111,
              "line": "                \"namespace head with a user like this: username:branch.\""
            },
            {
              "lineno": 112,
              "line": "            ),"
            },
            {
              "lineno": 113,
              "line": "            placeholder=\"Enter the head branch\","
            },
            {
              "lineno": 114,
              "line": "        )"
            },
            {
              "lineno": 115,
              "line": "        base: str = SchemaField("
            },
            {
              "lineno": 116,
              "line": "            description=\"The name of the branch you want the changes pulled into.\","
            },
            {
              "lineno": 117,
              "line": "            placeholder=\"Enter the base branch\","
            },
            {
              "lineno": 118,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 93,
              "end_line": 98,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 99,
                  "end_line": 102,
                  "label": "        title: str = SchemaField(\n            description=\"Title of the pull request\",\n            placeholder=\"Enter the pull request title\",\n        )",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 103,
                  "end_line": 106,
                  "label": "        body: str = SchemaField(\n            description=\"Body of the pull request\",\n            placeholder=\"Enter the pull request body\",\n        )",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 107,
                  "end_line": 114,
                  "label": "        head: str = SchemaField(\n            description=(\n                \"The name of the branch where your changes are implemented. \"\n                \"For cross-repository pull requests in the same network, \"\n                \"namespace head with a user like this: username:branch.\"\n            ),\n            placeholder=\"Enter the head branch\",\n        )",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 115,
                  "end_line": 118,
                  "label": "        base: str = SchemaField(\n            description=\"The name of the branch you want the changes pulled into.\",\n            placeholder=\"Enter the base branch\",\n        )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 120,
          "end_line": 125,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 120,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 121,
              "line": "        number: int = SchemaField(description=\"Number of the created pull request\")"
            },
            {
              "lineno": 122,
              "line": "        url: str = SchemaField(description=\"URL of the created pull request\")"
            },
            {
              "lineno": 123,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 124,
              "line": "            description=\"Error message if the pull request creation failed\""
            },
            {
              "lineno": 125,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 120,
              "end_line": 125,
              "label": "    class Output(BlockSchema):\n        number: int = SchemaField(description=\"Number of the created pull request\")\n        url: str = SchemaField(description=\"URL of the created pull request\")\n        error: str = SchemaField(\n            description=\"Error message if the pull request creation failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 92,
          "line": "class GithubMakePullRequestBlock(Block):"
        },
        {
          "lineno": 119,
          "line": ""
        },
        {
          "lineno": 126,
          "line": ""
        },
        {
          "lineno": 154,
          "line": ""
        },
        {
          "lineno": 155,
          "line": "    @staticmethod"
        },
        {
          "lineno": 170,
          "line": ""
        },
        {
          "lineno": 191,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 92,
          "end_line": 92,
          "label": "class GithubMakePullRequestBlock(Block):",
          "successors": [
            {
              "id": 2,
              "start_line": 155,
              "end_line": 155,
              "label": "@staticmethod",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "GithubReadPullRequestBlock",
      "type": "class",
      "start_line": 193,
      "end_line": 291,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 214,
          "end_line": 241,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 214,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 215,
              "line": "        super().__init__("
            },
            {
              "lineno": 216,
              "line": "            id=\"bf94b2a4-1a30-4600-a783-a8a44ee31301\","
            },
            {
              "lineno": 217,
              "line": "            description=\"This block reads the body, title, user, and changes of a specified GitHub pull request.\","
            },
            {
              "lineno": 218,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 219,
              "line": "            input_schema=GithubReadPullRequestBlock.Input,"
            },
            {
              "lineno": 220,
              "line": "            output_schema=GithubReadPullRequestBlock.Output,"
            },
            {
              "lineno": 221,
              "line": "            test_input={"
            },
            {
              "lineno": 222,
              "line": "                \"pr_url\": \"https://github.com/owner/repo/pull/1\","
            },
            {
              "lineno": 223,
              "line": "                \"include_pr_changes\": True,"
            },
            {
              "lineno": 224,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 225,
              "line": "            },"
            },
            {
              "lineno": 226,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 227,
              "line": "            test_output=["
            },
            {
              "lineno": 228,
              "line": "                (\"title\", \"Title of the pull request\"),"
            },
            {
              "lineno": 229,
              "line": "                (\"body\", \"This is the body of the pull request.\"),"
            },
            {
              "lineno": 230,
              "line": "                (\"author\", \"username\"),"
            },
            {
              "lineno": 231,
              "line": "                (\"changes\", \"List of changes made in the pull request.\"),"
            },
            {
              "lineno": 232,
              "line": "            ],"
            },
            {
              "lineno": 233,
              "line": "            test_mock={"
            },
            {
              "lineno": 234,
              "line": "                \"read_pr\": lambda *args, **kwargs: ("
            },
            {
              "lineno": 235,
              "line": "                    \"Title of the pull request\","
            },
            {
              "lineno": 236,
              "line": "                    \"This is the body of the pull request.\","
            },
            {
              "lineno": 237,
              "line": "                    \"username\","
            },
            {
              "lineno": 238,
              "line": "                ),"
            },
            {
              "lineno": 239,
              "line": "                \"read_pr_changes\": lambda *args, **kwargs: \"List of changes made in the pull request.\","
            },
            {
              "lineno": 240,
              "line": "            },"
            },
            {
              "lineno": 241,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 214,
              "end_line": 241,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"bf94b2a4-1a30-4600-a783-a8a44ee31301\",\n            description=\"This block reads the body, title, user, and changes of a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadPullRequestBlock.Input,\n            output_schema=GithubReadPullRequestBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"include_pr_changes\": True,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"title\", \"Title of the pull request\"),\n                (\"body\", \"This is the body of the pull request.\"),\n                (\"author\", \"username\"),\n                (\"changes\", \"List of changes made in the pull request.\"),\n            ],\n            test_mock={\n                \"read_pr\": lambda *args, **kwargs: (\n                    \"Title of the pull request\",\n                    \"This is the body of the pull request.\",\n                    \"username\",\n                ),\n                \"read_pr_changes\": lambda *args, **kwargs: \"List of changes made in the pull request.\",\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "read_pr",
          "type": "function",
          "start_line": 244,
          "end_line": 253,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 244,
              "line": "    def read_pr(credentials: GithubCredentials, pr_url: str) -> tuple[str, str, str]:"
            },
            {
              "lineno": 245,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 246,
              "line": "        # Adjust the URL to access the issue endpoint for PR metadata"
            },
            {
              "lineno": 247,
              "line": "        issue_url = pr_url.replace(\"/pull/\", \"/issues/\")"
            },
            {
              "lineno": 248,
              "line": "        response = api.get(issue_url)"
            },
            {
              "lineno": 249,
              "line": "        data = response.json()"
            },
            {
              "lineno": 250,
              "line": "        title = data.get(\"title\", \"No title found\")"
            },
            {
              "lineno": 251,
              "line": "        body = data.get(\"body\", \"No body content found\")"
            },
            {
              "lineno": 252,
              "line": "        author = data.get(\"user\", {}).get(\"login\", \"No user found\")"
            },
            {
              "lineno": 253,
              "line": "        return title, body, author"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 244,
              "end_line": 253,
              "label": "def read_pr(credentials: GithubCredentials, pr_url: str) -> tuple[str, str, str]:\n    api = get_api(credentials)\n    # Adjust the URL to access the issue endpoint for PR metadata\n    issue_url = pr_url.replace(\"/pull/\", \"/issues/\")\n    response = api.get(issue_url)\n    data = response.json()\n    title = data.get(\"title\", \"No title found\")\n    body = data.get(\"body\", \"No body content found\")\n    author = data.get(\"user\", {}).get(\"login\", \"No user found\")\n    return title, body, author",
              "successors": []
            }
          ]
        },
        {
          "name": "read_pr_changes",
          "type": "function",
          "start_line": 256,
          "end_line": 267,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 256,
              "line": "    def read_pr_changes(credentials: GithubCredentials, pr_url: str) -> str:"
            },
            {
              "lineno": 257,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 258,
              "line": "        files_url = prepare_pr_api_url(pr_url=pr_url, path=\"files\")"
            },
            {
              "lineno": 259,
              "line": "        response = api.get(files_url)"
            },
            {
              "lineno": 260,
              "line": "        files = response.json()"
            },
            {
              "lineno": 261,
              "line": "        changes = []"
            },
            {
              "lineno": 262,
              "line": "        for file in files:"
            },
            {
              "lineno": 263,
              "line": "            filename = file.get(\"filename\")"
            },
            {
              "lineno": 264,
              "line": "            patch = file.get(\"patch\")"
            },
            {
              "lineno": 265,
              "line": "            if filename and patch:"
            },
            {
              "lineno": 266,
              "line": "                changes.append(f\"File: {filename}\\n{patch}\")"
            },
            {
              "lineno": 267,
              "line": "        return \"\\n\\n\".join(changes)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 256,
              "end_line": 261,
              "label": "    def read_pr_changes(credentials: GithubCredentials, pr_url: str) -> str:\n        api = get_api(credentials)\n        files_url = prepare_pr_api_url(pr_url=pr_url, path=\"files\")\n        response = api.get(files_url)\n        files = response.json()\n        changes = []",
              "successors": [
                {
                  "id": 2,
                  "start_line": 262,
                  "end_line": 266,
                  "label": "        for file in files:\n            filename = file.get(\"filename\")\n            patch = file.get(\"patch\")\n            if filename and patch:\n                changes.append(f\"File: {filename}\\n{patch}\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 267,
                  "end_line": 267,
                  "label": "        return \"\\n\\n\".join(changes)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 269,
          "end_line": 289,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 269,
              "line": "    def run("
            },
            {
              "lineno": 270,
              "line": "        self,"
            },
            {
              "lineno": 271,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 272,
              "line": "        *,"
            },
            {
              "lineno": 273,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 274,
              "line": "        **kwargs,"
            },
            {
              "lineno": 275,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 276,
              "line": "        title, body, author = self.read_pr("
            },
            {
              "lineno": 277,
              "line": "            credentials,"
            },
            {
              "lineno": 278,
              "line": "            input_data.pr_url,"
            },
            {
              "lineno": 279,
              "line": "        )"
            },
            {
              "lineno": 280,
              "line": "        yield \"title\", title"
            },
            {
              "lineno": 281,
              "line": "        yield \"body\", body"
            },
            {
              "lineno": 282,
              "line": "        yield \"author\", author"
            },
            {
              "lineno": 283,
              "line": ""
            },
            {
              "lineno": 284,
              "line": "        if input_data.include_pr_changes:"
            },
            {
              "lineno": 285,
              "line": "            changes = self.read_pr_changes("
            },
            {
              "lineno": 286,
              "line": "                credentials,"
            },
            {
              "lineno": 287,
              "line": "                input_data.pr_url,"
            },
            {
              "lineno": 288,
              "line": "            )"
            },
            {
              "lineno": 289,
              "line": "            yield \"changes\", changes"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 269,
              "end_line": 282,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        title, body, author = self.read_pr(\n            credentials,\n            input_data.pr_url,\n        )\n        yield \"title\", title\n        yield \"body\", body\n        yield \"author\", author",
              "successors": [
                {
                  "id": 2,
                  "start_line": 284,
                  "end_line": 289,
                  "label": "        if input_data.include_pr_changes:\n            changes = self.read_pr_changes(\n                credentials,\n                input_data.pr_url,\n            )\n            yield \"changes\", changes",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 194,
          "end_line": 203,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 194,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 195,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 196,
              "line": "        pr_url: str = SchemaField("
            },
            {
              "lineno": 197,
              "line": "            description=\"URL of the GitHub pull request\","
            },
            {
              "lineno": 198,
              "line": "            placeholder=\"https://github.com/owner/repo/pull/1\","
            },
            {
              "lineno": 199,
              "line": "        )"
            },
            {
              "lineno": 200,
              "line": "        include_pr_changes: bool = SchemaField("
            },
            {
              "lineno": 201,
              "line": "            description=\"Whether to include the changes made in the pull request\","
            },
            {
              "lineno": 202,
              "line": "            default=False,"
            },
            {
              "lineno": 203,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 194,
              "end_line": 203,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n        include_pr_changes: bool = SchemaField(\n            description=\"Whether to include the changes made in the pull request\",\n            default=False,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 205,
          "end_line": 212,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 205,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 206,
              "line": "        title: str = SchemaField(description=\"Title of the pull request\")"
            },
            {
              "lineno": 207,
              "line": "        body: str = SchemaField(description=\"Body of the pull request\")"
            },
            {
              "lineno": 208,
              "line": "        author: str = SchemaField(description=\"User who created the pull request\")"
            },
            {
              "lineno": 209,
              "line": "        changes: str = SchemaField(description=\"Changes made in the pull request\")"
            },
            {
              "lineno": 210,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 211,
              "line": "            description=\"Error message if reading the pull request failed\""
            },
            {
              "lineno": 212,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 205,
              "end_line": 212,
              "label": "    class Output(BlockSchema):\n        title: str = SchemaField(description=\"Title of the pull request\")\n        body: str = SchemaField(description=\"Body of the pull request\")\n        author: str = SchemaField(description=\"User who created the pull request\")\n        changes: str = SchemaField(description=\"Changes made in the pull request\")\n        error: str = SchemaField(\n            description=\"Error message if reading the pull request failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 193,
          "line": "class GithubReadPullRequestBlock(Block):"
        },
        {
          "lineno": 204,
          "line": ""
        },
        {
          "lineno": 213,
          "line": ""
        },
        {
          "lineno": 242,
          "line": ""
        },
        {
          "lineno": 243,
          "line": "    @staticmethod"
        },
        {
          "lineno": 254,
          "line": ""
        },
        {
          "lineno": 255,
          "line": "    @staticmethod"
        },
        {
          "lineno": 268,
          "line": ""
        },
        {
          "lineno": 290,
          "line": ""
        },
        {
          "lineno": 291,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 193,
          "end_line": 204,
          "label": "class GithubReadPullRequestBlock(Block):",
          "successors": [
            {
              "id": 2,
              "start_line": 243,
              "end_line": 254,
              "label": "@staticmethod",
              "successors": [
                {
                  "id": 3,
                  "start_line": 255,
                  "end_line": 268,
                  "label": "@staticmethod",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 290,
                      "end_line": 291,
                      "label": "",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GithubAssignPRReviewerBlock",
      "type": "class",
      "start_line": 292,
      "end_line": 358,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 312,
          "end_line": 329,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 312,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 313,
              "line": "        super().__init__("
            },
            {
              "lineno": 314,
              "line": "            id=\"c0d22c5e-e688-43e3-ba43-d5faba7927fd\","
            },
            {
              "lineno": 315,
              "line": "            description=\"This block assigns a reviewer to a specified GitHub pull request.\","
            },
            {
              "lineno": 316,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 317,
              "line": "            input_schema=GithubAssignPRReviewerBlock.Input,"
            },
            {
              "lineno": 318,
              "line": "            output_schema=GithubAssignPRReviewerBlock.Output,"
            },
            {
              "lineno": 319,
              "line": "            test_input={"
            },
            {
              "lineno": 320,
              "line": "                \"pr_url\": \"https://github.com/owner/repo/pull/1\","
            },
            {
              "lineno": 321,
              "line": "                \"reviewer\": \"reviewer_username\","
            },
            {
              "lineno": 322,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 323,
              "line": "            },"
            },
            {
              "lineno": 324,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 325,
              "line": "            test_output=[(\"status\", \"Reviewer assigned successfully\")],"
            },
            {
              "lineno": 326,
              "line": "            test_mock={"
            },
            {
              "lineno": 327,
              "line": "                \"assign_reviewer\": lambda *args, **kwargs: \"Reviewer assigned successfully\""
            },
            {
              "lineno": 328,
              "line": "            },"
            },
            {
              "lineno": 329,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 312,
              "end_line": 329,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"c0d22c5e-e688-43e3-ba43-d5faba7927fd\",\n            description=\"This block assigns a reviewer to a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubAssignPRReviewerBlock.Input,\n            output_schema=GithubAssignPRReviewerBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"reviewer\": \"reviewer_username\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Reviewer assigned successfully\")],\n            test_mock={\n                \"assign_reviewer\": lambda *args, **kwargs: \"Reviewer assigned successfully\"\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "assign_reviewer",
          "type": "function",
          "start_line": 332,
          "end_line": 339,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 332,
              "line": "    def assign_reviewer("
            },
            {
              "lineno": 333,
              "line": "        credentials: GithubCredentials, pr_url: str, reviewer: str"
            },
            {
              "lineno": 334,
              "line": "    ) -> str:"
            },
            {
              "lineno": 335,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 336,
              "line": "        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")"
            },
            {
              "lineno": 337,
              "line": "        data = {\"reviewers\": [reviewer]}"
            },
            {
              "lineno": 338,
              "line": "        api.post(reviewers_url, json=data)"
            },
            {
              "lineno": 339,
              "line": "        return \"Reviewer assigned successfully\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 332,
              "end_line": 334,
              "label": "    def assign_reviewer(\n        credentials: GithubCredentials, pr_url: str, reviewer: str\n    ) -> str:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 335,
                  "end_line": 339,
                  "label": "        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\n        data = {\"reviewers\": [reviewer]}\n        api.post(reviewers_url, json=data)\n        return \"Reviewer assigned successfully\"",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 341,
          "end_line": 356,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 341,
              "line": "    def run("
            },
            {
              "lineno": 342,
              "line": "        self,"
            },
            {
              "lineno": 343,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 344,
              "line": "        *,"
            },
            {
              "lineno": 345,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 346,
              "line": "        **kwargs,"
            },
            {
              "lineno": 347,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 348,
              "line": "        try:"
            },
            {
              "lineno": 349,
              "line": "            status = self.assign_reviewer("
            },
            {
              "lineno": 350,
              "line": "                credentials,"
            },
            {
              "lineno": 351,
              "line": "                input_data.pr_url,"
            },
            {
              "lineno": 352,
              "line": "                input_data.reviewer,"
            },
            {
              "lineno": 353,
              "line": "            )"
            },
            {
              "lineno": 354,
              "line": "            yield \"status\", status"
            },
            {
              "lineno": 355,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 356,
              "line": "            yield \"error\", str(e)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 341,
              "end_line": 347,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 348,
                  "end_line": 354,
                  "label": "        try:\n            status = self.assign_reviewer(\n                credentials,\n                input_data.pr_url,\n                input_data.reviewer,\n            )\n            yield \"status\", status",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 355,
                      "end_line": 356,
                      "label": "        except Exception as e:\n            yield \"error\", str(e)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 293,
          "end_line": 302,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 293,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 294,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 295,
              "line": "        pr_url: str = SchemaField("
            },
            {
              "lineno": 296,
              "line": "            description=\"URL of the GitHub pull request\","
            },
            {
              "lineno": 297,
              "line": "            placeholder=\"https://github.com/owner/repo/pull/1\","
            },
            {
              "lineno": 298,
              "line": "        )"
            },
            {
              "lineno": 299,
              "line": "        reviewer: str = SchemaField("
            },
            {
              "lineno": 300,
              "line": "            description=\"Username of the reviewer to assign\","
            },
            {
              "lineno": 301,
              "line": "            placeholder=\"Enter the reviewer's username\","
            },
            {
              "lineno": 302,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 293,
              "end_line": 302,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n        reviewer: str = SchemaField(\n            description=\"Username of the reviewer to assign\",\n            placeholder=\"Enter the reviewer's username\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 304,
          "end_line": 310,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 304,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 305,
              "line": "        status: str = SchemaField("
            },
            {
              "lineno": 306,
              "line": "            description=\"Status of the reviewer assignment operation\""
            },
            {
              "lineno": 307,
              "line": "        )"
            },
            {
              "lineno": 308,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 309,
              "line": "            description=\"Error message if the reviewer assignment failed\""
            },
            {
              "lineno": 310,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 304,
              "end_line": 310,
              "label": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the reviewer assignment operation\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the reviewer assignment failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 292,
          "line": "class GithubAssignPRReviewerBlock(Block):"
        },
        {
          "lineno": 303,
          "line": ""
        },
        {
          "lineno": 311,
          "line": ""
        },
        {
          "lineno": 330,
          "line": ""
        },
        {
          "lineno": 331,
          "line": "    @staticmethod"
        },
        {
          "lineno": 340,
          "line": ""
        },
        {
          "lineno": 357,
          "line": ""
        },
        {
          "lineno": 358,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 292,
          "end_line": 303,
          "label": "class GithubAssignPRReviewerBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 311,
          "end_line": 311,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 330,
          "end_line": 331,
          "label": "@staticmethod",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 340,
          "end_line": 340,
          "label": "",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 357,
          "end_line": 358,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubUnassignPRReviewerBlock",
      "type": "class",
      "start_line": 359,
      "end_line": 425,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 379,
          "end_line": 396,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 379,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 380,
              "line": "        super().__init__("
            },
            {
              "lineno": 381,
              "line": "            id=\"9637945d-c602-4875-899a-9c22f8fd30de\","
            },
            {
              "lineno": 382,
              "line": "            description=\"This block unassigns a reviewer from a specified GitHub pull request.\","
            },
            {
              "lineno": 383,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 384,
              "line": "            input_schema=GithubUnassignPRReviewerBlock.Input,"
            },
            {
              "lineno": 385,
              "line": "            output_schema=GithubUnassignPRReviewerBlock.Output,"
            },
            {
              "lineno": 386,
              "line": "            test_input={"
            },
            {
              "lineno": 387,
              "line": "                \"pr_url\": \"https://github.com/owner/repo/pull/1\","
            },
            {
              "lineno": 388,
              "line": "                \"reviewer\": \"reviewer_username\","
            },
            {
              "lineno": 389,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 390,
              "line": "            },"
            },
            {
              "lineno": 391,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 392,
              "line": "            test_output=[(\"status\", \"Reviewer unassigned successfully\")],"
            },
            {
              "lineno": 393,
              "line": "            test_mock={"
            },
            {
              "lineno": 394,
              "line": "                \"unassign_reviewer\": lambda *args, **kwargs: \"Reviewer unassigned successfully\""
            },
            {
              "lineno": 395,
              "line": "            },"
            },
            {
              "lineno": 396,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 379,
              "end_line": 396,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"9637945d-c602-4875-899a-9c22f8fd30de\",\n            description=\"This block unassigns a reviewer from a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubUnassignPRReviewerBlock.Input,\n            output_schema=GithubUnassignPRReviewerBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"reviewer\": \"reviewer_username\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Reviewer unassigned successfully\")],\n            test_mock={\n                \"unassign_reviewer\": lambda *args, **kwargs: \"Reviewer unassigned successfully\"\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "unassign_reviewer",
          "type": "function",
          "start_line": 399,
          "end_line": 406,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 399,
              "line": "    def unassign_reviewer("
            },
            {
              "lineno": 400,
              "line": "        credentials: GithubCredentials, pr_url: str, reviewer: str"
            },
            {
              "lineno": 401,
              "line": "    ) -> str:"
            },
            {
              "lineno": 402,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 403,
              "line": "        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")"
            },
            {
              "lineno": 404,
              "line": "        data = {\"reviewers\": [reviewer]}"
            },
            {
              "lineno": 405,
              "line": "        api.delete(reviewers_url, json=data)"
            },
            {
              "lineno": 406,
              "line": "        return \"Reviewer unassigned successfully\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 399,
              "end_line": 406,
              "label": "    def unassign_reviewer(\n        credentials: GithubCredentials, pr_url: str, reviewer: str\n    ) -> str:\n        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\n        data = {\"reviewers\": [reviewer]}\n        api.delete(reviewers_url, json=data)\n        return \"Reviewer unassigned successfully\"",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 408,
          "end_line": 423,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 408,
              "line": "    def run("
            },
            {
              "lineno": 409,
              "line": "        self,"
            },
            {
              "lineno": 410,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 411,
              "line": "        *,"
            },
            {
              "lineno": 412,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 413,
              "line": "        **kwargs,"
            },
            {
              "lineno": 414,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 415,
              "line": "        try:"
            },
            {
              "lineno": 416,
              "line": "            status = self.unassign_reviewer("
            },
            {
              "lineno": 417,
              "line": "                credentials,"
            },
            {
              "lineno": 418,
              "line": "                input_data.pr_url,"
            },
            {
              "lineno": 419,
              "line": "                input_data.reviewer,"
            },
            {
              "lineno": 420,
              "line": "            )"
            },
            {
              "lineno": 421,
              "line": "            yield \"status\", status"
            },
            {
              "lineno": 422,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 423,
              "line": "            yield \"error\", str(e)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 408,
              "end_line": 414,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 415,
                  "end_line": 421,
                  "label": "        try:\n            status = self.unassign_reviewer(\n                credentials,\n                input_data.pr_url,\n                input_data.reviewer,\n            )\n            yield \"status\", status",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 422,
                      "end_line": 423,
                      "label": "        except Exception as e:\n            yield \"error\", str(e)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 360,
          "end_line": 369,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 360,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 361,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 362,
              "line": "        pr_url: str = SchemaField("
            },
            {
              "lineno": 363,
              "line": "            description=\"URL of the GitHub pull request\","
            },
            {
              "lineno": 364,
              "line": "            placeholder=\"https://github.com/owner/repo/pull/1\","
            },
            {
              "lineno": 365,
              "line": "        )"
            },
            {
              "lineno": 366,
              "line": "        reviewer: str = SchemaField("
            },
            {
              "lineno": 367,
              "line": "            description=\"Username of the reviewer to unassign\","
            },
            {
              "lineno": 368,
              "line": "            placeholder=\"Enter the reviewer's username\","
            },
            {
              "lineno": 369,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 360,
              "end_line": 369,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n        reviewer: str = SchemaField(\n            description=\"Username of the reviewer to unassign\",\n            placeholder=\"Enter the reviewer's username\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 371,
          "end_line": 377,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 371,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 372,
              "line": "        status: str = SchemaField("
            },
            {
              "lineno": 373,
              "line": "            description=\"Status of the reviewer unassignment operation\""
            },
            {
              "lineno": 374,
              "line": "        )"
            },
            {
              "lineno": 375,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 376,
              "line": "            description=\"Error message if the reviewer unassignment failed\""
            },
            {
              "lineno": 377,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 371,
              "end_line": 377,
              "label": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the reviewer unassignment operation\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the reviewer unassignment failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 359,
          "line": "class GithubUnassignPRReviewerBlock(Block):"
        },
        {
          "lineno": 370,
          "line": ""
        },
        {
          "lineno": 378,
          "line": ""
        },
        {
          "lineno": 397,
          "line": ""
        },
        {
          "lineno": 398,
          "line": "    @staticmethod"
        },
        {
          "lineno": 407,
          "line": ""
        },
        {
          "lineno": 424,
          "line": ""
        },
        {
          "lineno": 425,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "GithubListPRReviewersBlock",
      "type": "class",
      "start_line": 426,
      "end_line": 505,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 447,
          "end_line": 476,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 447,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 448,
              "line": "        super().__init__("
            },
            {
              "lineno": 449,
              "line": "            id=\"2646956e-96d5-4754-a3df-034017e7ed96\","
            },
            {
              "lineno": 450,
              "line": "            description=\"This block lists all reviewers for a specified GitHub pull request.\","
            },
            {
              "lineno": 451,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 452,
              "line": "            input_schema=GithubListPRReviewersBlock.Input,"
            },
            {
              "lineno": 453,
              "line": "            output_schema=GithubListPRReviewersBlock.Output,"
            },
            {
              "lineno": 454,
              "line": "            test_input={"
            },
            {
              "lineno": 455,
              "line": "                \"pr_url\": \"https://github.com/owner/repo/pull/1\","
            },
            {
              "lineno": 456,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 457,
              "line": "            },"
            },
            {
              "lineno": 458,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 459,
              "line": "            test_output=["
            },
            {
              "lineno": 460,
              "line": "                ("
            },
            {
              "lineno": 461,
              "line": "                    \"reviewer\","
            },
            {
              "lineno": 462,
              "line": "                    {"
            },
            {
              "lineno": 463,
              "line": "                        \"username\": \"reviewer1\","
            },
            {
              "lineno": 464,
              "line": "                        \"url\": \"https://github.com/reviewer1\","
            },
            {
              "lineno": 465,
              "line": "                    },"
            },
            {
              "lineno": 466,
              "line": "                )"
            },
            {
              "lineno": 467,
              "line": "            ],"
            },
            {
              "lineno": 468,
              "line": "            test_mock={"
            },
            {
              "lineno": 469,
              "line": "                \"list_reviewers\": lambda *args, **kwargs: ["
            },
            {
              "lineno": 470,
              "line": "                    {"
            },
            {
              "lineno": 471,
              "line": "                        \"username\": \"reviewer1\","
            },
            {
              "lineno": 472,
              "line": "                        \"url\": \"https://github.com/reviewer1\","
            },
            {
              "lineno": 473,
              "line": "                    }"
            },
            {
              "lineno": 474,
              "line": "                ]"
            },
            {
              "lineno": 475,
              "line": "            },"
            },
            {
              "lineno": 476,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 447,
              "end_line": 447,
              "label": "    def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 448,
                  "end_line": 476,
                  "label": "        super().__init__(\n            id=\"2646956e-96d5-4754-a3df-034017e7ed96\",\n            description=\"This block lists all reviewers for a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListPRReviewersBlock.Input,\n            output_schema=GithubListPRReviewersBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"reviewer\",\n                    {\n                        \"username\": \"reviewer1\",\n                        \"url\": \"https://github.com/reviewer1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_reviewers\": lambda *args, **kwargs: [\n                    {\n                        \"username\": \"reviewer1\",\n                        \"url\": \"https://github.com/reviewer1\",\n                    }\n                ]\n            },\n        )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "list_reviewers",
          "type": "function",
          "start_line": 479,
          "end_line": 490,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 479,
              "line": "    def list_reviewers("
            },
            {
              "lineno": 480,
              "line": "        credentials: GithubCredentials, pr_url: str"
            },
            {
              "lineno": 481,
              "line": "    ) -> list[Output.ReviewerItem]:"
            },
            {
              "lineno": 482,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 483,
              "line": "        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")"
            },
            {
              "lineno": 484,
              "line": "        response = api.get(reviewers_url)"
            },
            {
              "lineno": 485,
              "line": "        data = response.json()"
            },
            {
              "lineno": 486,
              "line": "        reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = ["
            },
            {
              "lineno": 487,
              "line": "            {\"username\": reviewer[\"login\"], \"url\": reviewer[\"html_url\"]}"
            },
            {
              "lineno": 488,
              "line": "            for reviewer in data.get(\"users\", [])"
            },
            {
              "lineno": 489,
              "line": "        ]"
            },
            {
              "lineno": 490,
              "line": "        return reviewers"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 479,
              "end_line": 481,
              "label": "def list_reviewers(\n    credentials: GithubCredentials, pr_url: str\n) -> list[Output.ReviewerItem]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 482,
                  "end_line": 485,
                  "label": "api = get_api(credentials)\nreviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\nresponse = api.get(reviewers_url)\ndata = response.json()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 486,
                      "end_line": 489,
                      "label": "reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [\n    {\"username\": reviewer[\"login\"], \"url\": reviewer[\"html_url\"]}\n    for reviewer in data.get(\"users\", [])\n]",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 490,
                          "end_line": 490,
                          "label": "return reviewers",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 492,
          "end_line": 503,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 492,
              "line": "    def run("
            },
            {
              "lineno": 493,
              "line": "        self,"
            },
            {
              "lineno": 494,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 495,
              "line": "        *,"
            },
            {
              "lineno": 496,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 497,
              "line": "        **kwargs,"
            },
            {
              "lineno": 498,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 499,
              "line": "        reviewers = self.list_reviewers("
            },
            {
              "lineno": 500,
              "line": "            credentials,"
            },
            {
              "lineno": 501,
              "line": "            input_data.pr_url,"
            },
            {
              "lineno": 502,
              "line": "        )"
            },
            {
              "lineno": 503,
              "line": "        yield from ((\"reviewer\", reviewer) for reviewer in reviewers)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 492,
              "end_line": 498,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 499,
                  "end_line": 502,
                  "label": "        reviewers = self.list_reviewers(\n            credentials,\n            input_data.pr_url,\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 503,
                      "end_line": 503,
                      "label": "        yield from ((\"reviewer\", reviewer) for reviewer in reviewers)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 427,
          "end_line": 432,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 427,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 428,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 429,
              "line": "        pr_url: str = SchemaField("
            },
            {
              "lineno": 430,
              "line": "            description=\"URL of the GitHub pull request\","
            },
            {
              "lineno": 431,
              "line": "            placeholder=\"https://github.com/owner/repo/pull/1\","
            },
            {
              "lineno": 432,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 427,
              "end_line": 432,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 434,
          "end_line": 445,
          "functions": [],
          "classes": [
            {
              "name": "ReviewerItem",
              "type": "class",
              "start_line": 435,
              "end_line": 437,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 435,
                  "line": "        class ReviewerItem(TypedDict):"
                },
                {
                  "lineno": 436,
                  "line": "            username: str"
                },
                {
                  "lineno": 437,
                  "line": "            url: str"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "start_line": 435,
                  "end_line": 437,
                  "label": "class ReviewerItem(TypedDict):\n    username: str\n    url: str",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": [
            {
              "lineno": 434,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 438,
              "line": ""
            },
            {
              "lineno": 439,
              "line": "        reviewer: ReviewerItem = SchemaField("
            },
            {
              "lineno": 440,
              "line": "            title=\"Reviewer\","
            },
            {
              "lineno": 441,
              "line": "            description=\"Reviewers with their username and profile URL\","
            },
            {
              "lineno": 442,
              "line": "        )"
            },
            {
              "lineno": 443,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 444,
              "line": "            description=\"Error message if listing reviewers failed\""
            },
            {
              "lineno": 445,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 434,
              "end_line": 445,
              "label": "    class Output(BlockSchema):\n\n        reviewer: ReviewerItem = SchemaField(\n            title=\"Reviewer\",\n            description=\"Reviewers with their username and profile URL\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if listing reviewers failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 426,
          "line": "class GithubListPRReviewersBlock(Block):"
        },
        {
          "lineno": 433,
          "line": ""
        },
        {
          "lineno": 446,
          "line": ""
        },
        {
          "lineno": 477,
          "line": ""
        },
        {
          "lineno": 478,
          "line": "    @staticmethod"
        },
        {
          "lineno": 491,
          "line": ""
        },
        {
          "lineno": 504,
          "line": ""
        },
        {
          "lineno": 505,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import re"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from typing_extensions import TypedDict"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 6,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from ._api import get_api"
    },
    {
      "lineno": 9,
      "line": "from ._auth import ("
    },
    {
      "lineno": 10,
      "line": "    TEST_CREDENTIALS,"
    },
    {
      "lineno": 11,
      "line": "    TEST_CREDENTIALS_INPUT,"
    },
    {
      "lineno": 12,
      "line": "    GithubCredentials,"
    },
    {
      "lineno": 13,
      "line": "    GithubCredentialsField,"
    },
    {
      "lineno": 14,
      "line": "    GithubCredentialsInput,"
    },
    {
      "lineno": 15,
      "line": ")"
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 192,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 15,
      "label": "import re\n\nfrom typing_extensions import TypedDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\nfrom ._api import get_api\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)",
      "successors": []
    }
  ]
}