{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 234,
  "functions": [
    {
      "name": "make_lowpass",
      "type": "function",
      "start_line": 13,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 13,
          "line": "def make_lowpass("
        },
        {
          "lineno": 14,
          "line": "    frequency: int,"
        },
        {
          "lineno": 15,
          "line": "    samplerate: int,"
        },
        {
          "lineno": 16,
          "line": "    q_factor: float = 1 / sqrt(2),"
        },
        {
          "lineno": 17,
          "line": ") -> IIRFilter:"
        },
        {
          "lineno": 18,
          "line": "    \"\"\""
        },
        {
          "lineno": 19,
          "line": "    Creates a low-pass filter"
        },
        {
          "lineno": 20,
          "line": ""
        },
        {
          "lineno": 21,
          "line": "    >>> filter = make_lowpass(1000, 48000)"
        },
        {
          "lineno": 22,
          "line": "    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 23,
          "line": "    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,"
        },
        {
          "lineno": 24,
          "line": "     0.008555138626189618, 0.004277569313094809]"
        },
        {
          "lineno": 25,
          "line": "    \"\"\""
        },
        {
          "lineno": 26,
          "line": "    w0 = tau * frequency / samplerate"
        },
        {
          "lineno": 27,
          "line": "    _sin = sin(w0)"
        },
        {
          "lineno": 28,
          "line": "    _cos = cos(w0)"
        },
        {
          "lineno": 29,
          "line": "    alpha = _sin / (2 * q_factor)"
        },
        {
          "lineno": 30,
          "line": ""
        },
        {
          "lineno": 31,
          "line": "    b0 = (1 - _cos) / 2"
        },
        {
          "lineno": 32,
          "line": "    b1 = 1 - _cos"
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 34,
          "line": "    a0 = 1 + alpha"
        },
        {
          "lineno": 35,
          "line": "    a1 = -2 * _cos"
        },
        {
          "lineno": 36,
          "line": "    a2 = 1 - alpha"
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "    filt = IIRFilter(2)"
        },
        {
          "lineno": 39,
          "line": "    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])"
        },
        {
          "lineno": 40,
          "line": "    return filt"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 13,
          "end_line": 40,
          "label": "def make_lowpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a low-pass filter\n\n    >>> filter = make_lowpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\n     0.008555138626189618, 0.004277569313094809]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n\n    b0 = (1 - _cos) / 2\n    b1 = 1 - _cos\n\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt",
          "successors": []
        }
      ]
    },
    {
      "name": "make_highpass",
      "type": "function",
      "start_line": 43,
      "end_line": 70,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 43,
          "line": "def make_highpass("
        },
        {
          "lineno": 44,
          "line": "    frequency: int,"
        },
        {
          "lineno": 45,
          "line": "    samplerate: int,"
        },
        {
          "lineno": 46,
          "line": "    q_factor: float = 1 / sqrt(2),"
        },
        {
          "lineno": 47,
          "line": ") -> IIRFilter:"
        },
        {
          "lineno": 48,
          "line": "    \"\"\""
        },
        {
          "lineno": 49,
          "line": "    Creates a high-pass filter"
        },
        {
          "lineno": 50,
          "line": ""
        },
        {
          "lineno": 51,
          "line": "    >>> filter = make_highpass(1000, 48000)"
        },
        {
          "lineno": 52,
          "line": "    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 53,
          "line": "    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,"
        },
        {
          "lineno": 54,
          "line": "     -1.9914448613738105, 0.9957224306869052]"
        },
        {
          "lineno": 55,
          "line": "    \"\"\""
        },
        {
          "lineno": 56,
          "line": "    w0 = tau * frequency / samplerate"
        },
        {
          "lineno": 57,
          "line": "    _sin = sin(w0)"
        },
        {
          "lineno": 58,
          "line": "    _cos = cos(w0)"
        },
        {
          "lineno": 59,
          "line": "    alpha = _sin / (2 * q_factor)"
        },
        {
          "lineno": 60,
          "line": ""
        },
        {
          "lineno": 61,
          "line": "    b0 = (1 + _cos) / 2"
        },
        {
          "lineno": 62,
          "line": "    b1 = -1 - _cos"
        },
        {
          "lineno": 63,
          "line": ""
        },
        {
          "lineno": 64,
          "line": "    a0 = 1 + alpha"
        },
        {
          "lineno": 65,
          "line": "    a1 = -2 * _cos"
        },
        {
          "lineno": 66,
          "line": "    a2 = 1 - alpha"
        },
        {
          "lineno": 67,
          "line": ""
        },
        {
          "lineno": 68,
          "line": "    filt = IIRFilter(2)"
        },
        {
          "lineno": 69,
          "line": "    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])"
        },
        {
          "lineno": 70,
          "line": "    return filt"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 43,
          "end_line": 47,
          "label": "def make_highpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:",
          "successors": [
            {
              "id": 2,
              "start_line": 48,
              "end_line": 55,
              "label": "\"\"\"\n    Creates a high-pass filter\n\n    >>> filter = make_highpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\n     -1.9914448613738105, 0.9957224306869052]\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 56,
                  "end_line": 59,
                  "label": "w0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 61,
                      "end_line": 62,
                      "label": "b0 = (1 + _cos) / 2\nb1 = -1 - _cos",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 64,
                          "end_line": 66,
                          "label": "a0 = 1 + alpha\na1 = -2 * _cos\na2 = 1 - alpha",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 68,
                              "end_line": 70,
                              "label": "filt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b0])\nreturn filt",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "make_bandpass",
      "type": "function",
      "start_line": 73,
      "end_line": 101,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 73,
          "line": "def make_bandpass("
        },
        {
          "lineno": 74,
          "line": "    frequency: int,"
        },
        {
          "lineno": 75,
          "line": "    samplerate: int,"
        },
        {
          "lineno": 76,
          "line": "    q_factor: float = 1 / sqrt(2),"
        },
        {
          "lineno": 77,
          "line": ") -> IIRFilter:"
        },
        {
          "lineno": 78,
          "line": "    \"\"\""
        },
        {
          "lineno": 79,
          "line": "    Creates a band-pass filter"
        },
        {
          "lineno": 80,
          "line": ""
        },
        {
          "lineno": 81,
          "line": "    >>> filter = make_bandpass(1000, 48000)"
        },
        {
          "lineno": 82,
          "line": "    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 83,
          "line": "    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,"
        },
        {
          "lineno": 84,
          "line": "     0, -0.06526309611002579]"
        },
        {
          "lineno": 85,
          "line": "    \"\"\""
        },
        {
          "lineno": 86,
          "line": "    w0 = tau * frequency / samplerate"
        },
        {
          "lineno": 87,
          "line": "    _sin = sin(w0)"
        },
        {
          "lineno": 88,
          "line": "    _cos = cos(w0)"
        },
        {
          "lineno": 89,
          "line": "    alpha = _sin / (2 * q_factor)"
        },
        {
          "lineno": 90,
          "line": ""
        },
        {
          "lineno": 91,
          "line": "    b0 = _sin / 2"
        },
        {
          "lineno": 92,
          "line": "    b1 = 0"
        },
        {
          "lineno": 93,
          "line": "    b2 = -b0"
        },
        {
          "lineno": 94,
          "line": ""
        },
        {
          "lineno": 95,
          "line": "    a0 = 1 + alpha"
        },
        {
          "lineno": 96,
          "line": "    a1 = -2 * _cos"
        },
        {
          "lineno": 97,
          "line": "    a2 = 1 - alpha"
        },
        {
          "lineno": 98,
          "line": ""
        },
        {
          "lineno": 99,
          "line": "    filt = IIRFilter(2)"
        },
        {
          "lineno": 100,
          "line": "    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])"
        },
        {
          "lineno": 101,
          "line": "    return filt"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 73,
          "end_line": 77,
          "label": "def make_bandpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:",
          "successors": [
            {
              "id": 2,
              "start_line": 78,
              "end_line": 85,
              "label": "\"\"\"\n    Creates a band-pass filter\n\n    >>> filter = make_bandpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\n     0, -0.06526309611002579]\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 86,
                  "end_line": 89,
                  "label": "w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 91,
                      "end_line": 93,
                      "label": "b0 = _sin / 2\n    b1 = 0\n    b2 = -b0",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 95,
                          "end_line": 97,
                          "label": "a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 99,
                              "end_line": 101,
                              "label": "filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "make_allpass",
      "type": "function",
      "start_line": 104,
      "end_line": 128,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 104,
          "line": "def make_allpass("
        },
        {
          "lineno": 105,
          "line": "    frequency: int,"
        },
        {
          "lineno": 106,
          "line": "    samplerate: int,"
        },
        {
          "lineno": 107,
          "line": "    q_factor: float = 1 / sqrt(2),"
        },
        {
          "lineno": 108,
          "line": ") -> IIRFilter:"
        },
        {
          "lineno": 109,
          "line": "    \"\"\""
        },
        {
          "lineno": 110,
          "line": "    Creates an all-pass filter"
        },
        {
          "lineno": 111,
          "line": ""
        },
        {
          "lineno": 112,
          "line": "    >>> filter = make_allpass(1000, 48000)"
        },
        {
          "lineno": 113,
          "line": "    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 114,
          "line": "    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,"
        },
        {
          "lineno": 115,
          "line": "     -1.9828897227476208, 1.0922959556412573]"
        },
        {
          "lineno": 116,
          "line": "    \"\"\""
        },
        {
          "lineno": 117,
          "line": "    w0 = tau * frequency / samplerate"
        },
        {
          "lineno": 118,
          "line": "    _sin = sin(w0)"
        },
        {
          "lineno": 119,
          "line": "    _cos = cos(w0)"
        },
        {
          "lineno": 120,
          "line": "    alpha = _sin / (2 * q_factor)"
        },
        {
          "lineno": 121,
          "line": ""
        },
        {
          "lineno": 122,
          "line": "    b0 = 1 - alpha"
        },
        {
          "lineno": 123,
          "line": "    b1 = -2 * _cos"
        },
        {
          "lineno": 124,
          "line": "    b2 = 1 + alpha"
        },
        {
          "lineno": 125,
          "line": ""
        },
        {
          "lineno": 126,
          "line": "    filt = IIRFilter(2)"
        },
        {
          "lineno": 127,
          "line": "    filt.set_coefficients([b2, b1, b0], [b0, b1, b2])"
        },
        {
          "lineno": 128,
          "line": "    return filt"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 104,
          "end_line": 114,
          "label": "def make_allpass(\n    frequency: int,\n    samplerate: int,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates an all-pass filter\n\n    >>> filter = make_allpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,",
          "successors": [
            {
              "id": 2,
              "start_line": 115,
              "end_line": 115,
              "label": "-1.9828897227476208, 1.0922959556412573]\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 117,
                  "end_line": 120,
                  "label": "w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 122,
                      "end_line": 124,
                      "label": "b0 = 1 - alpha\n    b1 = -2 * _cos\n    b2 = 1 + alpha",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 126,
                          "end_line": 128,
                          "label": "filt = IIRFilter(2)\n    filt.set_coefficients([b2, b1, b0], [b0, b1, b2])\n    return filt",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "make_peak",
      "type": "function",
      "start_line": 131,
      "end_line": 160,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 131,
          "line": "def make_peak("
        },
        {
          "lineno": 132,
          "line": "    frequency: int,"
        },
        {
          "lineno": 133,
          "line": "    samplerate: int,"
        },
        {
          "lineno": 134,
          "line": "    gain_db: float,"
        },
        {
          "lineno": 135,
          "line": "    q_factor: float = 1 / sqrt(2),"
        },
        {
          "lineno": 136,
          "line": ") -> IIRFilter:"
        },
        {
          "lineno": 137,
          "line": "    \"\"\""
        },
        {
          "lineno": 138,
          "line": "    Creates a peak filter"
        },
        {
          "lineno": 139,
          "line": ""
        },
        {
          "lineno": 140,
          "line": "    >>> filter = make_peak(1000, 48000, 6)"
        },
        {
          "lineno": 141,
          "line": "    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 142,
          "line": "    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,"
        },
        {
          "lineno": 143,
          "line": "     -1.9828897227476208, 0.8696284974398878]"
        },
        {
          "lineno": 144,
          "line": "    \"\"\""
        },
        {
          "lineno": 145,
          "line": "    w0 = tau * frequency / samplerate"
        },
        {
          "lineno": 146,
          "line": "    _sin = sin(w0)"
        },
        {
          "lineno": 147,
          "line": "    _cos = cos(w0)"
        },
        {
          "lineno": 148,
          "line": "    alpha = _sin / (2 * q_factor)"
        },
        {
          "lineno": 149,
          "line": "    big_a = 10 ** (gain_db / 40)"
        },
        {
          "lineno": 150,
          "line": ""
        },
        {
          "lineno": 151,
          "line": "    b0 = 1 + alpha * big_a"
        },
        {
          "lineno": 152,
          "line": "    b1 = -2 * _cos"
        },
        {
          "lineno": 153,
          "line": "    b2 = 1 - alpha * big_a"
        },
        {
          "lineno": 154,
          "line": "    a0 = 1 + alpha / big_a"
        },
        {
          "lineno": 155,
          "line": "    a1 = -2 * _cos"
        },
        {
          "lineno": 156,
          "line": "    a2 = 1 - alpha / big_a"
        },
        {
          "lineno": 157,
          "line": ""
        },
        {
          "lineno": 158,
          "line": "    filt = IIRFilter(2)"
        },
        {
          "lineno": 159,
          "line": "    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])"
        },
        {
          "lineno": 160,
          "line": "    return filt"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 131,
          "end_line": 136,
          "label": "def make_peak(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:",
          "successors": [
            {
              "id": 2,
              "start_line": 137,
              "end_line": 144,
              "label": "\"\"\"\n    Creates a peak filter\n\n    >>> filter = make_peak(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\n     -1.9828897227476208, 0.8696284974398878]\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 145,
                  "end_line": 148,
                  "label": "w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 149,
                      "end_line": 160,
                      "label": "big_a = 10 ** (gain_db / 40)\n\n    b0 = 1 + alpha * big_a\n    b1 = -2 * _cos\n    b2 = 1 - alpha * big_a\n    a0 = 1 + alpha / big_a\n    a1 = -2 * _cos\n    a2 = 1 - alpha / big_a\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "make_lowshelf",
      "type": "function",
      "start_line": 163,
      "end_line": 197,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 163,
          "line": "def make_lowshelf("
        },
        {
          "lineno": 164,
          "line": "    frequency: int,"
        },
        {
          "lineno": 165,
          "line": "    samplerate: int,"
        },
        {
          "lineno": 166,
          "line": "    gain_db: float,"
        },
        {
          "lineno": 167,
          "line": "    q_factor: float = 1 / sqrt(2),"
        },
        {
          "lineno": 168,
          "line": ") -> IIRFilter:"
        },
        {
          "lineno": 169,
          "line": "    \"\"\""
        },
        {
          "lineno": 170,
          "line": "    Creates a low-shelf filter"
        },
        {
          "lineno": 171,
          "line": ""
        },
        {
          "lineno": 172,
          "line": "    >>> filter = make_lowshelf(1000, 48000, 6)"
        },
        {
          "lineno": 173,
          "line": "    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 174,
          "line": "    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,"
        },
        {
          "lineno": 175,
          "line": "     -5.591841778072785, 2.5201667380627257]"
        },
        {
          "lineno": 176,
          "line": "    \"\"\""
        },
        {
          "lineno": 177,
          "line": "    w0 = tau * frequency / samplerate"
        },
        {
          "lineno": 178,
          "line": "    _sin = sin(w0)"
        },
        {
          "lineno": 179,
          "line": "    _cos = cos(w0)"
        },
        {
          "lineno": 180,
          "line": "    alpha = _sin / (2 * q_factor)"
        },
        {
          "lineno": 181,
          "line": "    big_a = 10 ** (gain_db / 40)"
        },
        {
          "lineno": 182,
          "line": "    pmc = (big_a + 1) - (big_a - 1) * _cos"
        },
        {
          "lineno": 183,
          "line": "    ppmc = (big_a + 1) + (big_a - 1) * _cos"
        },
        {
          "lineno": 184,
          "line": "    mpc = (big_a - 1) - (big_a + 1) * _cos"
        },
        {
          "lineno": 185,
          "line": "    pmpc = (big_a - 1) + (big_a + 1) * _cos"
        },
        {
          "lineno": 186,
          "line": "    aa2 = 2 * sqrt(big_a) * alpha"
        },
        {
          "lineno": 187,
          "line": ""
        },
        {
          "lineno": 188,
          "line": "    b0 = big_a * (pmc + aa2)"
        },
        {
          "lineno": 189,
          "line": "    b1 = 2 * big_a * mpc"
        },
        {
          "lineno": 190,
          "line": "    b2 = big_a * (pmc - aa2)"
        },
        {
          "lineno": 191,
          "line": "    a0 = ppmc + aa2"
        },
        {
          "lineno": 192,
          "line": "    a1 = -2 * pmpc"
        },
        {
          "lineno": 193,
          "line": "    a2 = ppmc - aa2"
        },
        {
          "lineno": 194,
          "line": ""
        },
        {
          "lineno": 195,
          "line": "    filt = IIRFilter(2)"
        },
        {
          "lineno": 196,
          "line": "    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])"
        },
        {
          "lineno": 197,
          "line": "    return filt"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 163,
          "end_line": 196,
          "label": "def make_lowshelf(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:\n    \"\"\"\n    Creates a low-shelf filter\n\n    >>> filter = make_lowshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\n     -5.591841778072785, 2.5201667380627257]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n    b0 = big_a * (pmc + aa2)\n    b1 = 2 * big_a * mpc\n    b2 = big_a * (pmc - aa2)\n    a0 = ppmc + aa2\n    a1 = -2 * pmpc\n    a2 = ppmc - aa2\n\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
          "successors": [
            {
              "id": 2,
              "start_line": 197,
              "end_line": 197,
              "label": "return filt",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "make_highshelf",
      "type": "function",
      "start_line": 200,
      "end_line": 234,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 200,
          "line": "def make_highshelf("
        },
        {
          "lineno": 201,
          "line": "    frequency: int,"
        },
        {
          "lineno": 202,
          "line": "    samplerate: int,"
        },
        {
          "lineno": 203,
          "line": "    gain_db: float,"
        },
        {
          "lineno": 204,
          "line": "    q_factor: float = 1 / sqrt(2),"
        },
        {
          "lineno": 205,
          "line": ") -> IIRFilter:"
        },
        {
          "lineno": 206,
          "line": "    \"\"\""
        },
        {
          "lineno": 207,
          "line": "    Creates a high-shelf filter"
        },
        {
          "lineno": 208,
          "line": ""
        },
        {
          "lineno": 209,
          "line": "    >>> filter = make_highshelf(1000, 48000, 6)"
        },
        {
          "lineno": 210,
          "line": "    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 211,
          "line": "    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,"
        },
        {
          "lineno": 212,
          "line": "     -7.922740859457287, 3.6756456963725253]"
        },
        {
          "lineno": 213,
          "line": "    \"\"\""
        },
        {
          "lineno": 214,
          "line": "    w0 = tau * frequency / samplerate"
        },
        {
          "lineno": 215,
          "line": "    _sin = sin(w0)"
        },
        {
          "lineno": 216,
          "line": "    _cos = cos(w0)"
        },
        {
          "lineno": 217,
          "line": "    alpha = _sin / (2 * q_factor)"
        },
        {
          "lineno": 218,
          "line": "    big_a = 10 ** (gain_db / 40)"
        },
        {
          "lineno": 219,
          "line": "    pmc = (big_a + 1) - (big_a - 1) * _cos"
        },
        {
          "lineno": 220,
          "line": "    ppmc = (big_a + 1) + (big_a - 1) * _cos"
        },
        {
          "lineno": 221,
          "line": "    mpc = (big_a - 1) - (big_a + 1) * _cos"
        },
        {
          "lineno": 222,
          "line": "    pmpc = (big_a - 1) + (big_a + 1) * _cos"
        },
        {
          "lineno": 223,
          "line": "    aa2 = 2 * sqrt(big_a) * alpha"
        },
        {
          "lineno": 224,
          "line": ""
        },
        {
          "lineno": 225,
          "line": "    b0 = big_a * (ppmc + aa2)"
        },
        {
          "lineno": 226,
          "line": "    b1 = -2 * big_a * pmpc"
        },
        {
          "lineno": 227,
          "line": "    b2 = big_a * (ppmc - aa2)"
        },
        {
          "lineno": 228,
          "line": "    a0 = pmc + aa2"
        },
        {
          "lineno": 229,
          "line": "    a1 = 2 * mpc"
        },
        {
          "lineno": 230,
          "line": "    a2 = pmc - aa2"
        },
        {
          "lineno": 231,
          "line": ""
        },
        {
          "lineno": 232,
          "line": "    filt = IIRFilter(2)"
        },
        {
          "lineno": 233,
          "line": "    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])"
        },
        {
          "lineno": 234,
          "line": "    return filt"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 200,
          "end_line": 205,
          "label": "def make_highshelf(\n    frequency: int,\n    samplerate: int,\n    gain_db: float,\n    q_factor: float = 1 / sqrt(2),\n) -> IIRFilter:",
          "successors": [
            {
              "id": 2,
              "start_line": 206,
              "end_line": 213,
              "label": "\"\"\"\n    Creates a high-shelf filter\n\n    >>> filter = make_highshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\n     -7.922740859457287, 3.6756456963725253]\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 214,
                  "end_line": 230,
                  "label": "w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = (big_a + 1) - (big_a - 1) * _cos\n    ppmc = (big_a + 1) + (big_a - 1) * _cos\n    mpc = (big_a - 1) - (big_a + 1) * _cos\n    pmpc = (big_a - 1) + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n\n    b0 = big_a * (ppmc + aa2)\n    b1 = -2 * big_a * pmpc\n    b2 = big_a * (ppmc - aa2)\n    a0 = pmc + aa2\n    a1 = 2 * mpc\n    a2 = pmc - aa2",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 232,
                      "end_line": 234,
                      "label": "filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from math import cos, sin, sqrt, tau"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from audio_filters.iir_filter import IIRFilter"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "\"\"\""
    },
    {
      "lineno": 6,
      "line": "Create 2nd-order IIR filters with Butterworth design."
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "Code based on https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html"
    },
    {
      "lineno": 9,
      "line": "Alternatively you can use scipy.signal.butter, which should yield the same results."
    },
    {
      "lineno": 10,
      "line": "\"\"\""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 42,
      "line": ""
    },
    {
      "lineno": 71,
      "line": ""
    },
    {
      "lineno": 72,
      "line": ""
    },
    {
      "lineno": 102,
      "line": ""
    },
    {
      "lineno": 103,
      "line": ""
    },
    {
      "lineno": 129,
      "line": ""
    },
    {
      "lineno": 130,
      "line": ""
    },
    {
      "lineno": 161,
      "line": ""
    },
    {
      "lineno": 162,
      "line": ""
    },
    {
      "lineno": 198,
      "line": ""
    },
    {
      "lineno": 199,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "from math import cos, sin, sqrt, tau",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 3,
          "label": "from audio_filters.iir_filter import IIRFilter",
          "successors": []
        }
      ]
    }
  ]
}