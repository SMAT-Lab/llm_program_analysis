{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 199,
  "functions": [],
  "classes": [
    {
      "name": "FalModel",
      "type": "class",
      "start_line": 21,
      "end_line": 23,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 21,
          "line": "class FalModel(str, Enum):"
        },
        {
          "lineno": 22,
          "line": "    MOCHI = \"fal-ai/mochi-v1\""
        },
        {
          "lineno": 23,
          "line": "    LUMA = \"fal-ai/luma-dream-machine\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 21,
          "end_line": 23,
          "label": "class FalModel(str, Enum):\n    MOCHI = \"fal-ai/mochi-v1\"\n    LUMA = \"fal-ai/luma-dream-machine\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AIVideoGeneratorBlock",
      "type": "class",
      "start_line": 26,
      "end_line": 199,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 48,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 48,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 49,
              "line": "        super().__init__("
            },
            {
              "lineno": 50,
              "line": "            id=\"530cf046-2ce0-4854-ae2c-659db17c7a46\","
            },
            {
              "lineno": 51,
              "line": "            description=\"Generate videos using FAL AI models.\","
            },
            {
              "lineno": 52,
              "line": "            categories={BlockCategory.AI},"
            },
            {
              "lineno": 53,
              "line": "            input_schema=self.Input,"
            },
            {
              "lineno": 54,
              "line": "            output_schema=self.Output,"
            },
            {
              "lineno": 55,
              "line": "            test_input={"
            },
            {
              "lineno": 56,
              "line": "                \"prompt\": \"A dog running in a field.\","
            },
            {
              "lineno": 57,
              "line": "                \"model\": FalModel.MOCHI,"
            },
            {
              "lineno": 58,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 59,
              "line": "            },"
            },
            {
              "lineno": 60,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 61,
              "line": "            test_output=[(\"video_url\", \"https://fal.media/files/example/video.mp4\")],"
            },
            {
              "lineno": 62,
              "line": "            test_mock={"
            },
            {
              "lineno": 63,
              "line": "                \"generate_video\": lambda *args, **kwargs: \"https://fal.media/files/example/video.mp4\""
            },
            {
              "lineno": 64,
              "line": "            },"
            },
            {
              "lineno": 65,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 48,
              "end_line": 65,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"530cf046-2ce0-4854-ae2c-659db17c7a46\",\n            description=\"Generate videos using FAL AI models.\",\n            categories={BlockCategory.AI},\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"prompt\": \"A dog running in a field.\",\n                \"model\": FalModel.MOCHI,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"video_url\", \"https://fal.media/files/example/video.mp4\")],\n            test_mock={\n                \"generate_video\": lambda *args, **kwargs: \"https://fal.media/files/example/video.mp4\"\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "_get_headers",
          "type": "function",
          "start_line": 67,
          "end_line": 72,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 67,
              "line": "    def _get_headers(self, api_key: str) -> dict[str, str]:"
            },
            {
              "lineno": 68,
              "line": "        \"\"\"Get headers for FAL API requests.\"\"\""
            },
            {
              "lineno": 69,
              "line": "        return {"
            },
            {
              "lineno": 70,
              "line": "            \"Authorization\": f\"Key {api_key}\","
            },
            {
              "lineno": 71,
              "line": "            \"Content-Type\": \"application/json\","
            },
            {
              "lineno": 72,
              "line": "        }"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 67,
              "end_line": 72,
              "label": "    def _get_headers(self, api_key: str) -> dict[str, str]:\n        \"\"\"Get headers for FAL API requests.\"\"\"\n        return {\n            \"Authorization\": f\"Key {api_key}\",\n            \"Content-Type\": \"application/json\",\n        }",
              "successors": []
            }
          ]
        },
        {
          "name": "_submit_request",
          "type": "function",
          "start_line": 74,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 74,
              "line": "    def _submit_request("
            },
            {
              "lineno": 75,
              "line": "        self, url: str, headers: dict[str, str], data: dict[str, Any]"
            },
            {
              "lineno": 76,
              "line": "    ) -> dict[str, Any]:"
            },
            {
              "lineno": 77,
              "line": "        \"\"\"Submit a request to the FAL API.\"\"\""
            },
            {
              "lineno": 78,
              "line": "        try:"
            },
            {
              "lineno": 79,
              "line": "            response = httpx.post(url, headers=headers, json=data)"
            },
            {
              "lineno": 80,
              "line": "            response.raise_for_status()"
            },
            {
              "lineno": 81,
              "line": "            return response.json()"
            },
            {
              "lineno": 82,
              "line": "        except httpx.HTTPError as e:"
            },
            {
              "lineno": 83,
              "line": "            logger.error(f\"FAL API request failed: {str(e)}\")"
            },
            {
              "lineno": 84,
              "line": "            raise RuntimeError(f\"Failed to submit request: {str(e)}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 74,
              "end_line": 77,
              "label": "    def _submit_request(\n        self, url: str, headers: dict[str, str], data: dict[str, Any]\n    ) -> dict[str, Any]:\n        \"\"\"Submit a request to the FAL API.\"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 78,
                  "end_line": 81,
                  "label": "        try:\n            response = httpx.post(url, headers=headers, json=data)\n            response.raise_for_status()\n            return response.json()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 82,
                      "end_line": 84,
                      "label": "        except httpx.HTTPError as e:\n            logger.error(f\"FAL API request failed: {str(e)}\")\n            raise RuntimeError(f\"Failed to submit request: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_poll_status",
          "type": "function",
          "start_line": 86,
          "end_line": 94,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 86,
              "line": "    def _poll_status(self, status_url: str, headers: dict[str, str]) -> dict[str, Any]:"
            },
            {
              "lineno": 87,
              "line": "        \"\"\"Poll the status endpoint until completion or failure.\"\"\""
            },
            {
              "lineno": 88,
              "line": "        try:"
            },
            {
              "lineno": 89,
              "line": "            response = httpx.get(status_url, headers=headers)"
            },
            {
              "lineno": 90,
              "line": "            response.raise_for_status()"
            },
            {
              "lineno": 91,
              "line": "            return response.json()"
            },
            {
              "lineno": 92,
              "line": "        except httpx.HTTPError as e:"
            },
            {
              "lineno": 93,
              "line": "            logger.error(f\"Failed to get status: {str(e)}\")"
            },
            {
              "lineno": 94,
              "line": "            raise RuntimeError(f\"Failed to get status: {str(e)}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 86,
              "end_line": 87,
              "label": "    def _poll_status(self, status_url: str, headers: dict[str, str]) -> dict[str, Any]:\n        \"\"\"Poll the status endpoint until completion or failure.\"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 88,
                  "end_line": 91,
                  "label": "        try:\n            response = httpx.get(status_url, headers=headers)\n            response.raise_for_status()\n            return response.json()",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 92,
                  "end_line": 94,
                  "label": "        except httpx.HTTPError as e:\n            logger.error(f\"Failed to get status: {str(e)}\")\n            raise RuntimeError(f\"Failed to get status: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "generate_video",
          "type": "function",
          "start_line": 96,
          "end_line": 190,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 96,
              "line": "    def generate_video(self, input_data: Input, credentials: FalCredentials) -> str:"
            },
            {
              "lineno": 97,
              "line": "        \"\"\"Generate video using the specified FAL model.\"\"\""
            },
            {
              "lineno": 98,
              "line": "        base_url = \"https://queue.fal.run\""
            },
            {
              "lineno": 99,
              "line": "        api_key = credentials.api_key.get_secret_value()"
            },
            {
              "lineno": 100,
              "line": "        headers = self._get_headers(api_key)"
            },
            {
              "lineno": 101,
              "line": ""
            },
            {
              "lineno": 102,
              "line": "        # Submit generation request"
            },
            {
              "lineno": 103,
              "line": "        submit_url = f\"{base_url}/{input_data.model.value}\""
            },
            {
              "lineno": 104,
              "line": "        submit_data = {\"prompt\": input_data.prompt}"
            },
            {
              "lineno": 105,
              "line": ""
            },
            {
              "lineno": 106,
              "line": "        seen_logs = set()"
            },
            {
              "lineno": 107,
              "line": ""
            },
            {
              "lineno": 108,
              "line": "        try:"
            },
            {
              "lineno": 109,
              "line": "            # Submit request to queue"
            },
            {
              "lineno": 110,
              "line": "            submit_response = httpx.post(submit_url, headers=headers, json=submit_data)"
            },
            {
              "lineno": 111,
              "line": "            submit_response.raise_for_status()"
            },
            {
              "lineno": 112,
              "line": "            request_data = submit_response.json()"
            },
            {
              "lineno": 113,
              "line": ""
            },
            {
              "lineno": 114,
              "line": "            # Get request_id and urls from initial response"
            },
            {
              "lineno": 115,
              "line": "            request_id = request_data.get(\"request_id\")"
            },
            {
              "lineno": 116,
              "line": "            status_url = request_data.get(\"status_url\")"
            },
            {
              "lineno": 117,
              "line": "            result_url = request_data.get(\"response_url\")"
            },
            {
              "lineno": 118,
              "line": ""
            },
            {
              "lineno": 119,
              "line": "            if not all([request_id, status_url, result_url]):"
            },
            {
              "lineno": 120,
              "line": "                raise ValueError(\"Missing required data in submission response\")"
            },
            {
              "lineno": 121,
              "line": ""
            },
            {
              "lineno": 122,
              "line": "            # Poll for status with exponential backoff"
            },
            {
              "lineno": 123,
              "line": "            max_attempts = 30"
            },
            {
              "lineno": 124,
              "line": "            attempt = 0"
            },
            {
              "lineno": 125,
              "line": "            base_wait_time = 5"
            },
            {
              "lineno": 126,
              "line": ""
            },
            {
              "lineno": 127,
              "line": "            while attempt < max_attempts:"
            },
            {
              "lineno": 128,
              "line": "                status_response = httpx.get(f\"{status_url}?logs=1\", headers=headers)"
            },
            {
              "lineno": 129,
              "line": "                status_response.raise_for_status()"
            },
            {
              "lineno": 130,
              "line": "                status_data = status_response.json()"
            },
            {
              "lineno": 131,
              "line": ""
            },
            {
              "lineno": 132,
              "line": "                # Process new logs only"
            },
            {
              "lineno": 133,
              "line": "                logs = status_data.get(\"logs\", [])"
            },
            {
              "lineno": 134,
              "line": "                if logs and isinstance(logs, list):"
            },
            {
              "lineno": 135,
              "line": "                    for log in logs:"
            },
            {
              "lineno": 136,
              "line": "                        if isinstance(log, dict):"
            },
            {
              "lineno": 137,
              "line": "                            # Create a unique key for this log entry"
            },
            {
              "lineno": 138,
              "line": "                            log_key = ("
            },
            {
              "lineno": 139,
              "line": "                                f\"{log.get('timestamp', '')}-{log.get('message', '')}\""
            },
            {
              "lineno": 140,
              "line": "                            )"
            },
            {
              "lineno": 141,
              "line": "                            if log_key not in seen_logs:"
            },
            {
              "lineno": 142,
              "line": "                                seen_logs.add(log_key)"
            },
            {
              "lineno": 143,
              "line": "                                message = log.get(\"message\", \"\")"
            },
            {
              "lineno": 144,
              "line": "                                if message:"
            },
            {
              "lineno": 145,
              "line": "                                    logger.debug("
            },
            {
              "lineno": 146,
              "line": "                                        f\"[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}\""
            },
            {
              "lineno": 147,
              "line": "                                    )"
            },
            {
              "lineno": 148,
              "line": ""
            },
            {
              "lineno": 149,
              "line": "                status = status_data.get(\"status\")"
            },
            {
              "lineno": 150,
              "line": "                if status == \"COMPLETED\":"
            },
            {
              "lineno": 151,
              "line": "                    # Get the final result"
            },
            {
              "lineno": 152,
              "line": "                    result_response = httpx.get(result_url, headers=headers)"
            },
            {
              "lineno": 153,
              "line": "                    result_response.raise_for_status()"
            },
            {
              "lineno": 154,
              "line": "                    result_data = result_response.json()"
            },
            {
              "lineno": 155,
              "line": ""
            },
            {
              "lineno": 156,
              "line": "                    if \"video\" not in result_data or not isinstance("
            },
            {
              "lineno": 157,
              "line": "                        result_data[\"video\"], dict"
            },
            {
              "lineno": 158,
              "line": "                    ):"
            },
            {
              "lineno": 159,
              "line": "                        raise ValueError(\"Invalid response format - missing video data\")"
            },
            {
              "lineno": 160,
              "line": ""
            },
            {
              "lineno": 161,
              "line": "                    video_url = result_data[\"video\"].get(\"url\")"
            },
            {
              "lineno": 162,
              "line": "                    if not video_url:"
            },
            {
              "lineno": 163,
              "line": "                        raise ValueError(\"No video URL in response\")"
            },
            {
              "lineno": 164,
              "line": ""
            },
            {
              "lineno": 165,
              "line": "                    return video_url"
            },
            {
              "lineno": 166,
              "line": ""
            },
            {
              "lineno": 167,
              "line": "                elif status == \"FAILED\":"
            },
            {
              "lineno": 168,
              "line": "                    error_msg = status_data.get(\"error\", \"No error details provided\")"
            },
            {
              "lineno": 169,
              "line": "                    raise RuntimeError(f\"Video generation failed: {error_msg}\")"
            },
            {
              "lineno": 170,
              "line": "                elif status == \"IN_QUEUE\":"
            },
            {
              "lineno": 171,
              "line": "                    position = status_data.get(\"queue_position\", \"unknown\")"
            },
            {
              "lineno": 172,
              "line": "                    logger.debug("
            },
            {
              "lineno": 173,
              "line": "                        f\"[FAL Generation] Status: In queue, position: {position}\""
            },
            {
              "lineno": 174,
              "line": "                    )"
            },
            {
              "lineno": 175,
              "line": "                elif status == \"IN_PROGRESS\":"
            },
            {
              "lineno": 176,
              "line": "                    logger.debug("
            },
            {
              "lineno": 177,
              "line": "                        \"[FAL Generation] Status: Request is being processed...\""
            },
            {
              "lineno": 178,
              "line": "                    )"
            },
            {
              "lineno": 179,
              "line": "                else:"
            },
            {
              "lineno": 180,
              "line": "                    logger.info(f\"[FAL Generation] Status: Unknown status: {status}\")"
            },
            {
              "lineno": 181,
              "line": ""
            },
            {
              "lineno": 182,
              "line": "                wait_time = min(base_wait_time * (2**attempt), 60)  # Cap at 60 seconds"
            },
            {
              "lineno": 183,
              "line": "                time.sleep(wait_time)"
            },
            {
              "lineno": 184,
              "line": "                attempt += 1"
            },
            {
              "lineno": 185,
              "line": ""
            },
            {
              "lineno": 186,
              "line": "            raise RuntimeError(\"Maximum polling attempts reached\")"
            },
            {
              "lineno": 187,
              "line": ""
            },
            {
              "lineno": 188,
              "line": "        except httpx.HTTPError as e:"
            },
            {
              "lineno": 189,
              "line": "            raise RuntimeError(f\"API request failed: {str(e)}\")"
            },
            {
              "lineno": 190,
              "line": ""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 96,
              "end_line": 107,
              "label": "    def generate_video(self, input_data: Input, credentials: FalCredentials) -> str:\n        \"\"\"Generate video using the specified FAL model.\"\"\"\n        base_url = \"https://queue.fal.run\"\n        api_key = credentials.api_key.get_secret_value()\n        headers = self._get_headers(api_key)\n\n        # Submit generation request\n        submit_url = f\"{base_url}/{input_data.model.value}\"\n        submit_data = {\"prompt\": input_data.prompt}\n\n        seen_logs = set()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 108,
                  "end_line": 186,
                  "label": "        try:\n            # Submit request to queue\n            submit_response = httpx.post(submit_url, headers=headers, json=submit_data)\n            submit_response.raise_for_status()\n            request_data = submit_response.json()\n\n            # Get request_id and urls from initial response\n            request_id = request_data.get(\"request_id\")\n            status_url = request_data.get(\"status_url\")\n            result_url = request_data.get(\"response_url\")\n\n            if not all([request_id, status_url, result_url]):\n                raise ValueError(\"Missing required data in submission response\")\n\n            # Poll for status with exponential backoff\n            max_attempts = 30\n            attempt = 0\n            base_wait_time = 5\n\n            while attempt < max_attempts:\n                status_response = httpx.get(f\"{status_url}?logs=1\", headers=headers)\n                status_response.raise_for_status()\n                status_data = status_response.json()\n\n                # Process new logs only\n                logs = status_data.get(\"logs\", [])\n                if logs and isinstance(logs, list):\n                    for log in logs:\n                        if isinstance(log, dict):\n                            # Create a unique key for this log entry\n                            log_key = (\n                                f\"{log.get('timestamp', '')}-{log.get('message', '')}\"\n                            )\n                            if log_key not in seen_logs:\n                                seen_logs.add(log_key)\n                                message = log.get(\"message\", \"\")\n                                if message:\n                                    logger.debug(\n                                        f\"[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}\"\n                                    )\n\n                status = status_data.get(\"status\")\n                if status == \"COMPLETED\":\n                    # Get the final result\n                    result_response = httpx.get(result_url, headers=headers)\n                    result_response.raise_for_status()\n                    result_data = result_response.json()\n\n                    if \"video\" not in result_data or not isinstance(\n                        result_data[\"video\"], dict\n                    ):\n                        raise ValueError(\"Invalid response format - missing video data\")\n\n                    video_url = result_data[\"video\"].get(\"url\")\n                    if not video_url:\n                        raise ValueError(\"No video URL in response\")\n\n                    return video_url\n\n                elif status == \"FAILED\":\n                    error_msg = status_data.get(\"error\", \"No error details provided\")\n                    raise RuntimeError(f\"Video generation failed: {error_msg}\")\n                elif status == \"IN_QUEUE\":\n                    position = status_data.get(\"queue_position\", \"unknown\")\n                    logger.debug(\n                        f\"[FAL Generation] Status: In queue, position: {position}\"\n                    )\n                elif status == \"IN_PROGRESS\":\n                    logger.debug(\n                        \"[FAL Generation] Status: Request is being processed...\"\n                    )\n                else:\n                    logger.info(f\"[FAL Generation] Status: Unknown status: {status}\")\n\n                wait_time = min(base_wait_time * (2**attempt), 60)  # Cap at 60 seconds\n                time.sleep(wait_time)\n                attempt += 1\n\n            raise RuntimeError(\"Maximum polling attempts reached\")",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 188,
                      "end_line": 189,
                      "label": "        except httpx.HTTPError as e:\n            raise RuntimeError(f\"API request failed: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 191,
          "end_line": 199,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 191,
              "line": "    def run("
            },
            {
              "lineno": 192,
              "line": "        self, input_data: Input, *, credentials: FalCredentials, **kwargs"
            },
            {
              "lineno": 193,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 194,
              "line": "        try:"
            },
            {
              "lineno": 195,
              "line": "            video_url = self.generate_video(input_data, credentials)"
            },
            {
              "lineno": 196,
              "line": "            yield \"video_url\", video_url"
            },
            {
              "lineno": 197,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 198,
              "line": "            error_message = str(e)"
            },
            {
              "lineno": 199,
              "line": "            yield \"error\", error_message"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 191,
              "end_line": 193,
              "label": "    def run(\n        self, input_data: Input, *, credentials: FalCredentials, **kwargs\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 194,
                  "end_line": 196,
                  "label": "        try:\n            video_url = self.generate_video(input_data, credentials)\n            yield \"video_url\", video_url",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 197,
                      "end_line": 199,
                      "label": "        except Exception as e:\n            error_message = str(e)\n            yield \"error\", error_message",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 27,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 27,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 28,
              "line": "        prompt: str = SchemaField("
            },
            {
              "lineno": 29,
              "line": "            description=\"Description of the video to generate.\","
            },
            {
              "lineno": 30,
              "line": "            placeholder=\"A dog running in a field.\","
            },
            {
              "lineno": 31,
              "line": "        )"
            },
            {
              "lineno": 32,
              "line": "        model: FalModel = SchemaField("
            },
            {
              "lineno": 33,
              "line": "            title=\"FAL Model\","
            },
            {
              "lineno": 34,
              "line": "            default=FalModel.MOCHI,"
            },
            {
              "lineno": 35,
              "line": "            description=\"The FAL model to use for video generation.\","
            },
            {
              "lineno": 36,
              "line": "        )"
            },
            {
              "lineno": 37,
              "line": "        credentials: FalCredentialsInput = FalCredentialsField()"
            }
          ],
          "blocks": []
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 39,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 39,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 40,
              "line": "        video_url: str = SchemaField(description=\"The URL of the generated video.\")"
            },
            {
              "lineno": 41,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 42,
              "line": "            description=\"Error message if video generation failed.\""
            },
            {
              "lineno": 43,
              "line": "        )"
            },
            {
              "lineno": 44,
              "line": "        logs: list[str] = SchemaField("
            },
            {
              "lineno": 45,
              "line": "            description=\"Generation progress logs.\", optional=True"
            },
            {
              "lineno": 46,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 39,
              "end_line": 46,
              "label": "    class Output(BlockSchema):\n        video_url: str = SchemaField(description=\"The URL of the generated video.\")\n        error: str = SchemaField(\n            description=\"Error message if video generation failed.\"\n        )\n        logs: list[str] = SchemaField(\n            description=\"Generation progress logs.\", optional=True\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 26,
          "line": "class AIVideoGeneratorBlock(Block):"
        },
        {
          "lineno": 38,
          "line": ""
        },
        {
          "lineno": 47,
          "line": ""
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 73,
          "line": ""
        },
        {
          "lineno": 85,
          "line": ""
        },
        {
          "lineno": 95,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 26,
          "end_line": 26,
          "label": "class AIVideoGeneratorBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 38,
          "end_line": 38,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 47,
          "end_line": 47,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 66,
          "end_line": 66,
          "label": "",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 73,
          "end_line": 73,
          "label": "",
          "successors": []
        },
        {
          "id": 6,
          "start_line": 85,
          "end_line": 85,
          "label": "",
          "successors": []
        },
        {
          "id": 7,
          "start_line": 95,
          "end_line": 95,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "import time"
    },
    {
      "lineno": 3,
      "line": "from enum import Enum"
    },
    {
      "lineno": 4,
      "line": "from typing import Any"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "import httpx"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from backend.blocks.fal._auth import ("
    },
    {
      "lineno": 9,
      "line": "    TEST_CREDENTIALS,"
    },
    {
      "lineno": 10,
      "line": "    TEST_CREDENTIALS_INPUT,"
    },
    {
      "lineno": 11,
      "line": "    FalCredentials,"
    },
    {
      "lineno": 12,
      "line": "    FalCredentialsField,"
    },
    {
      "lineno": 13,
      "line": "    FalCredentialsInput,"
    },
    {
      "lineno": 14,
      "line": ")"
    },
    {
      "lineno": 15,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 16,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 24,
      "line": ""
    },
    {
      "lineno": 25,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 14,
      "label": "import logging\nimport time\nfrom enum import Enum\nfrom typing import Any\n\nimport httpx\n\nfrom backend.blocks.fal._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    FalCredentials,\n    FalCredentialsField,\n    FalCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
      "successors": [
        {
          "id": 2,
          "start_line": 18,
          "end_line": 18,
          "label": "logger = logging.getLogger(__name__)",
          "successors": []
        }
      ]
    }
  ]
}