{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 38,
  "functions": [],
  "classes": [
    {
      "name": "Item",
      "type": "class",
      "start_line": 1,
      "end_line": 5,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 3,
          "end_line": 5,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 3,
              "line": "    def __init__(self, key, value):"
            },
            {
              "lineno": 4,
              "line": "        self.key = key"
            },
            {
              "lineno": 5,
              "line": "        self.value = value"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 3,
              "end_line": 5,
              "label": "    def __init__(self, key, value):\n        self.key = key\n        self.value = value",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 1,
          "line": "class Item(object):"
        },
        {
          "lineno": 2,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class Item(object):",
          "successors": []
        }
      ]
    },
    {
      "name": "HashTable",
      "type": "class",
      "start_line": 8,
      "end_line": 38,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 10,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 10,
              "line": "    def __init__(self, size):"
            },
            {
              "lineno": 11,
              "line": "        self.size = size"
            },
            {
              "lineno": 12,
              "line": "        self.table = [[] for _ in range(self.size)]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 10,
              "end_line": 12,
              "label": "    def __init__(self, size):\n        self.size = size\n        self.table = [[] for _ in range(self.size)]",
              "successors": []
            }
          ]
        },
        {
          "name": "_hash_function",
          "type": "function",
          "start_line": 14,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "    def _hash_function(self, key):"
            },
            {
              "lineno": 15,
              "line": "        return key % self.size"
            }
          ],
          "blocks": []
        },
        {
          "name": "set",
          "type": "function",
          "start_line": 17,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 17,
              "line": "    def set(self, key, value):"
            },
            {
              "lineno": 18,
              "line": "        hash_index = self._hash_function(key)"
            },
            {
              "lineno": 19,
              "line": "        for item in self.table[hash_index]:"
            },
            {
              "lineno": 20,
              "line": "            if item.key == key:"
            },
            {
              "lineno": 21,
              "line": "                item.value = value"
            },
            {
              "lineno": 22,
              "line": "                return"
            },
            {
              "lineno": 23,
              "line": "        self.table[hash_index].append(Item(key, value))"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 17,
              "end_line": 18,
              "label": "    def set(self, key, value):\n        hash_index = self._hash_function(key)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 19,
                  "end_line": 22,
                  "label": "        for item in self.table[hash_index]:\n            if item.key == key:\n                item.value = value\n                return",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 23,
                      "end_line": 23,
                      "label": "        self.table[hash_index].append(Item(key, value))",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 25,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    def get(self, key):"
            },
            {
              "lineno": 26,
              "line": "        hash_index = self._hash_function(key)"
            },
            {
              "lineno": 27,
              "line": "        for item in self.table[hash_index]:"
            },
            {
              "lineno": 28,
              "line": "            if item.key == key:"
            },
            {
              "lineno": 29,
              "line": "                return item.value"
            },
            {
              "lineno": 30,
              "line": "        raise KeyError('Key not found')"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 25,
              "end_line": 26,
              "label": "    def get(self, key):\n        hash_index = self._hash_function(key)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 27,
                  "end_line": 29,
                  "label": "        for item in self.table[hash_index]:\n            if item.key == key:\n                return item.value",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 30,
                      "end_line": 30,
                      "label": "        raise KeyError('Key not found')",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "remove",
          "type": "function",
          "start_line": 32,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 32,
              "line": "    def remove(self, key):"
            },
            {
              "lineno": 33,
              "line": "        hash_index = self._hash_function(key)"
            },
            {
              "lineno": 34,
              "line": "        for index, item in enumerate(self.table[hash_index]):"
            },
            {
              "lineno": 35,
              "line": "            if item.key == key:"
            },
            {
              "lineno": 36,
              "line": "                del self.table[hash_index][index]"
            },
            {
              "lineno": 37,
              "line": "                return"
            },
            {
              "lineno": 38,
              "line": "        raise KeyError('Key not found')"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 32,
              "end_line": 33,
              "label": "    def remove(self, key):\n        hash_index = self._hash_function(key)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 34,
                  "end_line": 37,
                  "label": "        for index, item in enumerate(self.table[hash_index]):\n            if item.key == key:\n                del self.table[hash_index][index]\n                return",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 38,
                      "end_line": 38,
                      "label": "        raise KeyError('Key not found')",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 8,
          "line": "class HashTable(object):"
        },
        {
          "lineno": 9,
          "line": ""
        },
        {
          "lineno": 13,
          "line": ""
        },
        {
          "lineno": 16,
          "line": ""
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 31,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 6,
      "end_line": 6,
      "label": "",
      "successors": [
        {
          "id": 2,
          "start_line": 7,
          "end_line": 7,
          "label": "",
          "successors": []
        }
      ]
    }
  ]
}