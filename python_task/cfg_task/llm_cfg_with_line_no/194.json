{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 88,
  "functions": [
    {
      "name": "generate_all_permutations",
      "type": "function",
      "start_line": 12,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 12,
          "line": "def generate_all_permutations(sequence: list[int | str]) -> None:"
        },
        {
          "lineno": 13,
          "line": "    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])"
        },
        {
          "lineno": 14,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 12,
          "end_line": 13,
          "label": "def generate_all_permutations(sequence: list[int | str]) -> None:\n    create_state_space_tree(sequence, [], 0, [0 for i in range(len(sequence))])",
          "successors": []
        }
      ]
    },
    {
      "name": "create_state_space_tree",
      "type": "function",
      "start_line": 16,
      "end_line": 74,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "def create_state_space_tree("
        },
        {
          "lineno": 17,
          "line": "    sequence: list[int | str],"
        },
        {
          "lineno": 18,
          "line": "    current_sequence: list[int | str],"
        },
        {
          "lineno": 19,
          "line": "    index: int,"
        },
        {
          "lineno": 20,
          "line": "    index_used: list[int],"
        },
        {
          "lineno": 21,
          "line": ") -> None:"
        },
        {
          "lineno": 22,
          "line": "    \"\"\""
        },
        {
          "lineno": 23,
          "line": "    Creates a state space tree to iterate through each branch using DFS."
        },
        {
          "lineno": 24,
          "line": "    We know that each state has exactly len(sequence) - index children."
        },
        {
          "lineno": 25,
          "line": "    It terminates when it reaches the end of the given sequence."
        },
        {
          "lineno": 26,
          "line": ""
        },
        {
          "lineno": 27,
          "line": "    :param sequence: The input sequence for which permutations are generated."
        },
        {
          "lineno": 28,
          "line": "    :param current_sequence: The current permutation being built."
        },
        {
          "lineno": 29,
          "line": "    :param index: The current index in the sequence."
        },
        {
          "lineno": 30,
          "line": "    :param index_used: list to track which elements are used in permutation."
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 32,
          "line": "    Example 1:"
        },
        {
          "lineno": 33,
          "line": "    >>> sequence = [1, 2, 3]"
        },
        {
          "lineno": 34,
          "line": "    >>> current_sequence = []"
        },
        {
          "lineno": 35,
          "line": "    >>> index_used = [False, False, False]"
        },
        {
          "lineno": 36,
          "line": "    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)"
        },
        {
          "lineno": 37,
          "line": "    [1, 2, 3]"
        },
        {
          "lineno": 38,
          "line": "    [1, 3, 2]"
        },
        {
          "lineno": 39,
          "line": "    [2, 1, 3]"
        },
        {
          "lineno": 40,
          "line": "    [2, 3, 1]"
        },
        {
          "lineno": 41,
          "line": "    [3, 1, 2]"
        },
        {
          "lineno": 42,
          "line": "    [3, 2, 1]"
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 44,
          "line": "    Example 2:"
        },
        {
          "lineno": 45,
          "line": "    >>> sequence = [\"A\", \"B\", \"C\"]"
        },
        {
          "lineno": 46,
          "line": "    >>> current_sequence = []"
        },
        {
          "lineno": 47,
          "line": "    >>> index_used = [False, False, False]"
        },
        {
          "lineno": 48,
          "line": "    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)"
        },
        {
          "lineno": 49,
          "line": "    ['A', 'B', 'C']"
        },
        {
          "lineno": 50,
          "line": "    ['A', 'C', 'B']"
        },
        {
          "lineno": 51,
          "line": "    ['B', 'A', 'C']"
        },
        {
          "lineno": 52,
          "line": "    ['B', 'C', 'A']"
        },
        {
          "lineno": 53,
          "line": "    ['C', 'A', 'B']"
        },
        {
          "lineno": 54,
          "line": "    ['C', 'B', 'A']"
        },
        {
          "lineno": 55,
          "line": ""
        },
        {
          "lineno": 56,
          "line": "    Example 3:"
        },
        {
          "lineno": 57,
          "line": "    >>> sequence = [1]"
        },
        {
          "lineno": 58,
          "line": "    >>> current_sequence = []"
        },
        {
          "lineno": 59,
          "line": "    >>> index_used = [False]"
        },
        {
          "lineno": 60,
          "line": "    >>> create_state_space_tree(sequence, current_sequence, 0, index_used)"
        },
        {
          "lineno": 61,
          "line": "    [1]"
        },
        {
          "lineno": 62,
          "line": "    \"\"\""
        },
        {
          "lineno": 63,
          "line": ""
        },
        {
          "lineno": 64,
          "line": "    if index == len(sequence):"
        },
        {
          "lineno": 65,
          "line": "        print(current_sequence)"
        },
        {
          "lineno": 66,
          "line": "        return"
        },
        {
          "lineno": 67,
          "line": ""
        },
        {
          "lineno": 68,
          "line": "    for i in range(len(sequence)):"
        },
        {
          "lineno": 69,
          "line": "        if not index_used[i]:"
        },
        {
          "lineno": 70,
          "line": "            current_sequence.append(sequence[i])"
        },
        {
          "lineno": 71,
          "line": "            index_used[i] = True"
        },
        {
          "lineno": 72,
          "line": "            create_state_space_tree(sequence, current_sequence, index + 1, index_used)"
        },
        {
          "lineno": 73,
          "line": "            current_sequence.pop()"
        },
        {
          "lineno": 74,
          "line": "            index_used[i] = False"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 21,
          "label": "def create_state_space_tree(\n    sequence: list[int | str],\n    current_sequence: list[int | str],\n    index: int,\n    index_used: list[int],\n) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 22,
              "end_line": 31,
              "label": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly len(sequence) - index children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which permutations are generated.\n    :param current_sequence: The current permutation being built.\n    :param index: The current index in the sequence.\n    :param index_used: list to track which elements are used in permutation.\n\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 64,
                  "end_line": 66,
                  "label": "if index == len(sequence):\n        print(current_sequence)\n        return",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 68,
                      "end_line": 68,
                      "label": "for i in range(len(sequence)):",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 69,
                          "end_line": 74,
                          "label": "if not index_used[i]:\n            current_sequence.append(sequence[i])\n            index_used[i] = True\n            create_state_space_tree(sequence, current_sequence, index + 1, index_used)\n            current_sequence.pop()\n            index_used[i] = False",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "In this problem, we want to determine all possible permutations"
    },
    {
      "lineno": 3,
      "line": "of the given sequence. We use backtracking to solve this problem."
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "Time complexity: O(n! * n),"
    },
    {
      "lineno": 6,
      "line": "where n denotes the length of the given sequence."
    },
    {
      "lineno": 7,
      "line": "\"\"\""
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "from __future__ import annotations"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 75,
      "line": ""
    },
    {
      "lineno": 76,
      "line": ""
    },
    {
      "lineno": 77,
      "line": "\"\"\""
    },
    {
      "lineno": 78,
      "line": "remove the comment to take an input from the user"
    },
    {
      "lineno": 79,
      "line": ""
    },
    {
      "lineno": 80,
      "line": "print(\"Enter the elements\")"
    },
    {
      "lineno": 81,
      "line": "sequence = list(map(int, input().split()))"
    },
    {
      "lineno": 82,
      "line": "\"\"\""
    },
    {
      "lineno": 83,
      "line": ""
    },
    {
      "lineno": 84,
      "line": "sequence: list[int | str] = [3, 1, 2, 4]"
    },
    {
      "lineno": 85,
      "line": "generate_all_permutations(sequence)"
    },
    {
      "lineno": 86,
      "line": ""
    },
    {
      "lineno": 87,
      "line": "sequence_2: list[int | str] = [\"A\", \"B\", \"C\"]"
    },
    {
      "lineno": 88,
      "line": "generate_all_permutations(sequence_2)"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "\"\"\"\nIn this problem, we want to determine all possible permutations\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(n! * n),\nwhere n denotes the length of the given sequence.\n\"\"\"",
      "successors": [
        {
          "id": 2,
          "start_line": 9,
          "end_line": 9,
          "label": "from __future__ import annotations",
          "successors": [
            {
              "id": 3,
              "start_line": 77,
              "end_line": 82,
              "label": "\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nsequence = list(map(int, input().split()))\n\"\"\"",
              "successors": [
                {
                  "id": 4,
                  "start_line": 84,
                  "end_line": 85,
                  "label": "sequence: list[int | str] = [3, 1, 2, 4]\ngenerate_all_permutations(sequence)",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 87,
                      "end_line": 88,
                      "label": "sequence_2: list[int | str] = [\"A\", \"B\", \"C\"]\ngenerate_all_permutations(sequence_2)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}