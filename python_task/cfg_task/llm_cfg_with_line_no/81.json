{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 38,
  "functions": [
    {
      "name": "test_service_creation",
      "type": "function",
      "start_line": 33,
      "end_line": 38,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 33,
          "line": "async def test_service_creation(server):"
        },
        {
          "lineno": 34,
          "line": "    with ServiceTest():"
        },
        {
          "lineno": 35,
          "line": "        client = get_service_client(ServiceTest)"
        },
        {
          "lineno": 36,
          "line": "        assert client.add(5, 3) == 8"
        },
        {
          "lineno": 37,
          "line": "        assert client.subtract(10, 4) == 6"
        },
        {
          "lineno": 38,
          "line": "        assert client.fun_with_async(5, 3) == 8"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 33,
          "end_line": 33,
          "label": "async def test_service_creation(server):",
          "successors": [
            {
              "id": 2,
              "start_line": 34,
              "end_line": 34,
              "label": "with ServiceTest():",
              "successors": [
                {
                  "id": 3,
                  "start_line": 35,
                  "end_line": 38,
                  "label": "client = get_service_client(ServiceTest)\nassert client.add(5, 3) == 8\nassert client.subtract(10, 4) == 6\nassert client.fun_with_async(5, 3) == 8",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ServiceTest",
      "type": "class",
      "start_line": 8,
      "end_line": 30,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 9,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 9,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 10,
              "line": "        super().__init__()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 9,
              "end_line": 10,
              "label": "    def __init__(self):\n        super().__init__()",
              "successors": []
            }
          ]
        },
        {
          "name": "get_port",
          "type": "function",
          "start_line": 13,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 13,
              "line": "    def get_port(cls) -> int:"
            },
            {
              "lineno": 14,
              "line": "        return TEST_SERVICE_PORT"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 13,
              "end_line": 14,
              "label": "    def get_port(cls) -> int:\n        return TEST_SERVICE_PORT",
              "successors": []
            }
          ]
        },
        {
          "name": "add",
          "type": "function",
          "start_line": 17,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 17,
              "line": "    def add(self, a: int, b: int) -> int:"
            },
            {
              "lineno": 18,
              "line": "        return a + b"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 17,
              "end_line": 17,
              "label": "    def add(self, a: int, b: int) -> int:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 18,
                  "end_line": 18,
                  "label": "        return a + b",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "subtract",
          "type": "function",
          "start_line": 21,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 21,
              "line": "    def subtract(self, a: int, b: int) -> int:"
            },
            {
              "lineno": 22,
              "line": "        return a - b"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 21,
              "end_line": 22,
              "label": "    def subtract(self, a: int, b: int) -> int:\n        return a - b",
              "successors": []
            }
          ]
        },
        {
          "name": "fun_with_async",
          "type": "function",
          "start_line": 25,
          "end_line": 29,
          "functions": [
            {
              "name": "add_async",
              "type": "function",
              "start_line": 26,
              "end_line": 27,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 26,
                  "line": "        async def add_async(a: int, b: int) -> int:"
                },
                {
                  "lineno": 27,
                  "line": "            return a + b"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "start_line": 26,
                  "end_line": 27,
                  "label": "        async def add_async(a: int, b: int) -> int:\n            return a + b",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    def fun_with_async(self, a: int, b: int) -> int:"
            },
            {
              "lineno": 28,
              "line": ""
            },
            {
              "lineno": 29,
              "line": "        return self.run_and_wait(add_async(a, b))"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 25,
              "end_line": 25,
              "label": "    def fun_with_async(self, a: int, b: int) -> int:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 28,
                  "end_line": 29,
                  "label": "\n        return self.run_and_wait(add_async(a, b))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 8,
          "line": "class ServiceTest(AppService):"
        },
        {
          "lineno": 11,
          "line": ""
        },
        {
          "lineno": 12,
          "line": "    @classmethod"
        },
        {
          "lineno": 15,
          "line": ""
        },
        {
          "lineno": 16,
          "line": "    @expose"
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 20,
          "line": "    @expose"
        },
        {
          "lineno": 23,
          "line": ""
        },
        {
          "lineno": 24,
          "line": "    @expose"
        },
        {
          "lineno": 30,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 8,
          "end_line": 30,
          "label": "class ServiceTest(AppService):\n\n    @classmethod\n\n    @expose\n\n    @expose\n\n    @expose\n\n",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import pytest"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from backend.util.service import AppService, expose, get_service_client"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "TEST_SERVICE_PORT = 8765"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 31,
      "line": ""
    },
    {
      "lineno": 32,
      "line": "@pytest.mark.asyncio(scope=\"session\")"
    }
  ],
  "blocks": []
}