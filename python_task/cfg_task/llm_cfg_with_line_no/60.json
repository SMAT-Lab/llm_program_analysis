{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 328,
  "functions": [],
  "classes": [
    {
      "name": "AppEnvironment",
      "type": "class",
      "start_line": 19,
      "end_line": 22,
      "functions": [],
      "simplified_code": [
        {
          "lineno": 19,
          "line": "class AppEnvironment(str, Enum):"
        },
        {
          "lineno": 20,
          "line": "    LOCAL = \"local\""
        },
        {
          "lineno": 21,
          "line": "    DEVELOPMENT = \"dev\""
        },
        {
          "lineno": 22,
          "line": "    PRODUCTION = \"prod\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 19,
          "end_line": 22,
          "label": "class AppEnvironment(str, Enum):\n    LOCAL = \"local\"\n    DEVELOPMENT = \"dev\"\n    PRODUCTION = \"prod\"",
          "successors": []
        }
      ]
    },
    {
      "name": "BehaveAs",
      "type": "class",
      "start_line": 25,
      "end_line": 27,
      "functions": [],
      "simplified_code": [
        {
          "lineno": 25,
          "line": "class BehaveAs(str, Enum):"
        },
        {
          "lineno": 26,
          "line": "    LOCAL = \"local\""
        },
        {
          "lineno": 27,
          "line": "    CLOUD = \"cloud\""
        }
      ],
      "blocks": []
    },
    {
      "name": "UpdateTrackingModel",
      "type": "class",
      "start_line": 30,
      "end_line": 50,
      "functions": [
        {
          "name": "__setattr__",
          "type": "function",
          "start_line": 33,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 33,
              "line": "    def __setattr__(self, name: str, value) -> None:"
            },
            {
              "lineno": 34,
              "line": "        if name in self.model_fields:"
            },
            {
              "lineno": 35,
              "line": "            self._updated_fields.add(name)"
            },
            {
              "lineno": 36,
              "line": "        super().__setattr__(name, value)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 33,
              "end_line": 33,
              "label": "    def __setattr__(self, name: str, value) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 34,
                  "end_line": 35,
                  "label": "        if name in self.model_fields:\n            self._updated_fields.add(name)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 36,
                      "end_line": 36,
                      "label": "        super().__setattr__(name, value)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "mark_updated",
          "type": "function",
          "start_line": 38,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 38,
              "line": "    def mark_updated(self, field_name: str) -> None:"
            },
            {
              "lineno": 39,
              "line": "        if field_name in self.model_fields:"
            },
            {
              "lineno": 40,
              "line": "            self._updated_fields.add(field_name)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 38,
              "end_line": 38,
              "label": "    def mark_updated(self, field_name: str) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 39,
                  "end_line": 39,
                  "label": "        if field_name in self.model_fields:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 40,
                      "end_line": 40,
                      "label": "            self._updated_fields.add(field_name)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "clear_updates",
          "type": "function",
          "start_line": 42,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    def clear_updates(self) -> None:"
            },
            {
              "lineno": 43,
              "line": "        self._updated_fields.clear()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 42,
              "end_line": 43,
              "label": "    def clear_updates(self) -> None:\n        self._updated_fields.clear()",
              "successors": []
            }
          ]
        },
        {
          "name": "get_updates",
          "type": "function",
          "start_line": 45,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 45,
              "line": "    def get_updates(self) -> Dict[str, Any]:"
            },
            {
              "lineno": 46,
              "line": "        return {field: getattr(self, field) for field in self._updated_fields}"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 45,
              "end_line": 45,
              "label": "    def get_updates(self) -> Dict[str, Any]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 46,
                  "end_line": 46,
                  "label": "        return {field: getattr(self, field) for field in self._updated_fields}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "updated_fields",
          "type": "function",
          "start_line": 49,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 49,
              "line": "    def updated_fields(self):"
            },
            {
              "lineno": 50,
              "line": "        return self._updated_fields"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 49,
              "end_line": 50,
              "label": "    def updated_fields(self):\n        return self._updated_fields",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 30,
          "line": "class UpdateTrackingModel(BaseModel, Generic[T]):"
        },
        {
          "lineno": 31,
          "line": "    _updated_fields: Set[str] = PrivateAttr(default_factory=set)"
        },
        {
          "lineno": 32,
          "line": ""
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 44,
          "line": ""
        },
        {
          "lineno": 47,
          "line": ""
        },
        {
          "lineno": 48,
          "line": "    @property"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 30,
          "end_line": 31,
          "label": "class UpdateTrackingModel(BaseModel, Generic[T]):\n    _updated_fields: Set[str] = PrivateAttr(default_factory=set)",
          "successors": []
        }
      ]
    },
    {
      "name": "Config",
      "type": "class",
      "start_line": 53,
      "end_line": 217,
      "functions": [
        {
          "name": "validate_platform_base_url",
          "type": "function",
          "start_line": 158,
          "end_line": 168,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 158,
              "line": "    def validate_platform_base_url(cls, v: str, info: ValidationInfo) -> str:"
            },
            {
              "lineno": 159,
              "line": "        if not v:"
            },
            {
              "lineno": 160,
              "line": "            return v"
            },
            {
              "lineno": 161,
              "line": "        if not v.startswith((\"http://\", \"https://\")):"
            },
            {
              "lineno": 162,
              "line": "            raise ValueError("
            },
            {
              "lineno": 163,
              "line": "                f\"{info.field_name} must be a full URL \""
            },
            {
              "lineno": 164,
              "line": "                \"including a http:// or https:// schema\""
            },
            {
              "lineno": 165,
              "line": "            )"
            },
            {
              "lineno": 166,
              "line": "        if v.endswith(\"/\"):"
            },
            {
              "lineno": 167,
              "line": "            return v.rstrip(\"/\")  # Remove trailing slash"
            },
            {
              "lineno": 168,
              "line": "        return v"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 158,
              "end_line": 158,
              "label": "    def validate_platform_base_url(cls, v: str, info: ValidationInfo) -> str:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 159,
                  "end_line": 160,
                  "label": "        if not v:\n            return v",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 161,
                      "end_line": 165,
                      "label": "        if not v.startswith((\"http://\", \"https://\")):\n            raise ValueError(\n                f\"{info.field_name} must be a full URL \"\n                \"including a http:// or https:// schema\"\n            )",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 166,
                          "end_line": 167,
                          "label": "        if v.endswith(\"/\"):\n            return v.rstrip(\"/\")  # Remove trailing slash",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 168,
                              "end_line": 168,
                              "label": "        return v",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "start_line": 168,
                          "end_line": 168,
                          "label": "        return v",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "validate_cors_allow_origins",
          "type": "function",
          "start_line": 194,
          "end_line": 217,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 194,
              "line": "    def validate_cors_allow_origins(cls, v: List[str]) -> List[str]:"
            },
            {
              "lineno": 195,
              "line": "        out = []"
            },
            {
              "lineno": 196,
              "line": "        port = None"
            },
            {
              "lineno": 197,
              "line": "        has_localhost = False"
            },
            {
              "lineno": 198,
              "line": "        has_127_0_0_1 = False"
            },
            {
              "lineno": 199,
              "line": "        for url in v:"
            },
            {
              "lineno": 200,
              "line": "            url = url.strip()"
            },
            {
              "lineno": 201,
              "line": "            if url.startswith((\"http://\", \"https://\")):"
            },
            {
              "lineno": 202,
              "line": "                if \"localhost\" in url:"
            },
            {
              "lineno": 203,
              "line": "                    port = url.split(\":\")[2]"
            },
            {
              "lineno": 204,
              "line": "                    has_localhost = True"
            },
            {
              "lineno": 205,
              "line": "                if \"127.0.0.1\" in url:"
            },
            {
              "lineno": 206,
              "line": "                    port = url.split(\":\")[2]"
            },
            {
              "lineno": 207,
              "line": "                    has_127_0_0_1 = True"
            },
            {
              "lineno": 208,
              "line": "                out.append(url)"
            },
            {
              "lineno": 209,
              "line": "            else:"
            },
            {
              "lineno": 210,
              "line": "                raise ValueError(f\"Invalid URL: {url}\")"
            },
            {
              "lineno": 211,
              "line": ""
            },
            {
              "lineno": 212,
              "line": "        if has_127_0_0_1 and not has_localhost:"
            },
            {
              "lineno": 213,
              "line": "            out.append(f\"http://localhost:{port}\")"
            },
            {
              "lineno": 214,
              "line": "        if has_localhost and not has_127_0_0_1:"
            },
            {
              "lineno": 215,
              "line": "            out.append(f\"http://127.0.0.1:{port}\")"
            },
            {
              "lineno": 216,
              "line": ""
            },
            {
              "lineno": 217,
              "line": "        return out"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 194,
              "end_line": 194,
              "label": "def validate_cors_allow_origins(cls, v: List[str]) -> List[str]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 195,
                  "end_line": 198,
                  "label": "out = []\nport = None\nhas_localhost = False\nhas_127_0_0_1 = False",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 199,
                      "end_line": 199,
                      "label": "for url in v:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 200,
                          "end_line": 200,
                          "label": "url = url.strip()",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 201,
                              "end_line": 201,
                              "label": "if url.startswith((\"http://\", \"https://\")):",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 202,
                                  "end_line": 202,
                                  "label": "if \"localhost\" in url:",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 203,
                                      "end_line": 204,
                                      "label": "port = url.split(\":\")[2]\nhas_localhost = True",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 8,
                                  "start_line": 205,
                                  "end_line": 205,
                                  "label": "if \"127.0.0.1\" in url:",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 206,
                                      "end_line": 207,
                                      "label": "port = url.split(\":\")[2]\nhas_127_0_0_1 = True",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 10,
                                  "start_line": 208,
                                  "end_line": 208,
                                  "label": "out.append(url)",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "start_line": 209,
                              "end_line": 210,
                              "label": "else:\nraise ValueError(f\"Invalid URL: {url}\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 12,
                      "start_line": 212,
                      "end_line": 212,
                      "label": "if has_127_0_0_1 and not has_localhost:",
                      "successors": [
                        {
                          "id": 13,
                          "start_line": 213,
                          "end_line": 213,
                          "label": "out.append(f\"http://localhost:{port}\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 14,
                      "start_line": 214,
                      "end_line": 214,
                      "label": "if has_localhost and not has_127_0_0_1:",
                      "successors": [
                        {
                          "id": 15,
                          "start_line": 215,
                          "end_line": 215,
                          "label": "out.append(f\"http://127.0.0.1:{port}\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 16,
                      "start_line": 217,
                      "end_line": 217,
                      "label": "return out",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "settings_customise_sources",
          "type": "function",
          "start_line": 220,
          "end_line": 234,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 220,
              "line": "    def settings_customise_sources("
            },
            {
              "lineno": 221,
              "line": "        cls,"
            },
            {
              "lineno": 222,
              "line": "        settings_cls: Type[BaseSettings],"
            },
            {
              "lineno": 223,
              "line": "        init_settings: PydanticBaseSettingsSource,"
            },
            {
              "lineno": 224,
              "line": "        env_settings: PydanticBaseSettingsSource,"
            },
            {
              "lineno": 225,
              "line": "        dotenv_settings: PydanticBaseSettingsSource,"
            },
            {
              "lineno": 226,
              "line": "        file_secret_settings: PydanticBaseSettingsSource,"
            },
            {
              "lineno": 227,
              "line": "    ) -> Tuple[PydanticBaseSettingsSource, ...]:"
            },
            {
              "lineno": 228,
              "line": "        return ("
            },
            {
              "lineno": 229,
              "line": "            env_settings,"
            },
            {
              "lineno": 230,
              "line": "            file_secret_settings,"
            },
            {
              "lineno": 231,
              "line": "            dotenv_settings,"
            },
            {
              "lineno": 232,
              "line": "            JsonConfigSettingsSource(settings_cls),"
            },
            {
              "lineno": 233,
              "line": "            init_settings,"
            },
            {
              "lineno": 234,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 220,
              "end_line": 227,
              "label": "    def settings_customise_sources(\n        cls,\n        settings_cls: Type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 228,
                  "end_line": 234,
                  "label": "        return (\n            env_settings,\n            file_secret_settings,\n            dotenv_settings,\n            JsonConfigSettingsSource(settings_cls),\n            init_settings,\n        )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 53,
          "line": "class Config(UpdateTrackingModel[\"Config\"], BaseSettings):"
        },
        {
          "lineno": 54,
          "line": "    \"\"\"Config for the server.\"\"\""
        },
        {
          "lineno": 55,
          "line": ""
        },
        {
          "lineno": 56,
          "line": "    num_graph_workers: int = Field("
        },
        {
          "lineno": 57,
          "line": "        default=10,"
        },
        {
          "lineno": 58,
          "line": "        ge=1,"
        },
        {
          "lineno": 59,
          "line": "        le=1000,"
        },
        {
          "lineno": 60,
          "line": "        description=\"Maximum number of workers to use for graph execution.\","
        },
        {
          "lineno": 61,
          "line": "    )"
        },
        {
          "lineno": 62,
          "line": "    num_node_workers: int = Field("
        },
        {
          "lineno": 63,
          "line": "        default=5,"
        },
        {
          "lineno": 64,
          "line": "        ge=1,"
        },
        {
          "lineno": 65,
          "line": "        le=1000,"
        },
        {
          "lineno": 66,
          "line": "        description=\"Maximum number of workers to use for node execution within a single graph.\","
        },
        {
          "lineno": 67,
          "line": "    )"
        },
        {
          "lineno": 68,
          "line": "    pyro_host: str = Field("
        },
        {
          "lineno": 69,
          "line": "        default=\"localhost\","
        },
        {
          "lineno": 70,
          "line": "        description=\"The default hostname of the Pyro server.\","
        },
        {
          "lineno": 71,
          "line": "    )"
        },
        {
          "lineno": 72,
          "line": "    pyro_client_comm_timeout: float = Field("
        },
        {
          "lineno": 73,
          "line": "        default=15,"
        },
        {
          "lineno": 74,
          "line": "        description=\"The default timeout in seconds, for Pyro client connections.\","
        },
        {
          "lineno": 75,
          "line": "    )"
        },
        {
          "lineno": 76,
          "line": "    pyro_client_comm_retry: int = Field("
        },
        {
          "lineno": 77,
          "line": "        default=3,"
        },
        {
          "lineno": 78,
          "line": "        description=\"The default number of retries for Pyro client connections.\","
        },
        {
          "lineno": 79,
          "line": "    )"
        },
        {
          "lineno": 80,
          "line": "    enable_auth: bool = Field("
        },
        {
          "lineno": 81,
          "line": "        default=True,"
        },
        {
          "lineno": 82,
          "line": "        description=\"If authentication is enabled or not\","
        },
        {
          "lineno": 83,
          "line": "    )"
        },
        {
          "lineno": 84,
          "line": "    enable_credit: str = Field("
        },
        {
          "lineno": 85,
          "line": "        default=\"false\","
        },
        {
          "lineno": 86,
          "line": "        description=\"If user credit system is enabled or not\","
        },
        {
          "lineno": 87,
          "line": "    )"
        },
        {
          "lineno": 88,
          "line": "    num_user_credits_refill: int = Field("
        },
        {
          "lineno": 89,
          "line": "        default=1500,"
        },
        {
          "lineno": 90,
          "line": "        description=\"Number of credits to refill for each user\","
        },
        {
          "lineno": 91,
          "line": "    )"
        },
        {
          "lineno": 92,
          "line": "    # Add more configuration fields as needed"
        },
        {
          "lineno": 93,
          "line": ""
        },
        {
          "lineno": 94,
          "line": "    model_config = SettingsConfigDict("
        },
        {
          "lineno": 95,
          "line": "        env_file=\".env\","
        },
        {
          "lineno": 96,
          "line": "        extra=\"allow\","
        },
        {
          "lineno": 97,
          "line": "    )"
        },
        {
          "lineno": 98,
          "line": ""
        },
        {
          "lineno": 99,
          "line": "    websocket_server_host: str = Field("
        },
        {
          "lineno": 100,
          "line": "        default=\"0.0.0.0\","
        },
        {
          "lineno": 101,
          "line": "        description=\"The host for the websocket server to run on\","
        },
        {
          "lineno": 102,
          "line": "    )"
        },
        {
          "lineno": 103,
          "line": ""
        },
        {
          "lineno": 104,
          "line": "    websocket_server_port: int = Field("
        },
        {
          "lineno": 105,
          "line": "        default=8001,"
        },
        {
          "lineno": 106,
          "line": "        description=\"The port for the websocket server to run on\","
        },
        {
          "lineno": 107,
          "line": "    )"
        },
        {
          "lineno": 108,
          "line": ""
        },
        {
          "lineno": 109,
          "line": "    execution_manager_port: int = Field("
        },
        {
          "lineno": 110,
          "line": "        default=8002,"
        },
        {
          "lineno": 111,
          "line": "        description=\"The port for execution manager daemon to run on\","
        },
        {
          "lineno": 112,
          "line": "    )"
        },
        {
          "lineno": 113,
          "line": ""
        },
        {
          "lineno": 114,
          "line": "    execution_scheduler_port: int = Field("
        },
        {
          "lineno": 115,
          "line": "        default=8003,"
        },
        {
          "lineno": 116,
          "line": "        description=\"The port for execution scheduler daemon to run on\","
        },
        {
          "lineno": 117,
          "line": "    )"
        },
        {
          "lineno": 118,
          "line": ""
        },
        {
          "lineno": 119,
          "line": "    agent_server_port: int = Field("
        },
        {
          "lineno": 120,
          "line": "        default=8004,"
        },
        {
          "lineno": 121,
          "line": "        description=\"The port for agent server daemon to run on\","
        },
        {
          "lineno": 122,
          "line": "    )"
        },
        {
          "lineno": 123,
          "line": ""
        },
        {
          "lineno": 124,
          "line": "    database_api_port: int = Field("
        },
        {
          "lineno": 125,
          "line": "        default=8005,"
        },
        {
          "lineno": 126,
          "line": "        description=\"The port for database server API to run on\","
        },
        {
          "lineno": 127,
          "line": "    )"
        },
        {
          "lineno": 128,
          "line": ""
        },
        {
          "lineno": 129,
          "line": "    agent_api_host: str = Field("
        },
        {
          "lineno": 130,
          "line": "        default=\"0.0.0.0\","
        },
        {
          "lineno": 131,
          "line": "        description=\"The host for agent server API to run on\","
        },
        {
          "lineno": 132,
          "line": "    )"
        },
        {
          "lineno": 133,
          "line": ""
        },
        {
          "lineno": 134,
          "line": "    agent_api_port: int = Field("
        },
        {
          "lineno": 135,
          "line": "        default=8006,"
        },
        {
          "lineno": 136,
          "line": "        description=\"The port for agent server API to run on\","
        },
        {
          "lineno": 137,
          "line": "    )"
        },
        {
          "lineno": 138,
          "line": ""
        },
        {
          "lineno": 139,
          "line": "    platform_base_url: str = Field("
        },
        {
          "lineno": 140,
          "line": "        default=\"\","
        },
        {
          "lineno": 141,
          "line": "        description=\"Must be set so the application knows where it's hosted at. \""
        },
        {
          "lineno": 142,
          "line": "        \"This is necessary to make sure webhooks find their way.\","
        },
        {
          "lineno": 143,
          "line": "    )"
        },
        {
          "lineno": 144,
          "line": ""
        },
        {
          "lineno": 145,
          "line": "    frontend_base_url: str = Field("
        },
        {
          "lineno": 146,
          "line": "        default=\"\","
        },
        {
          "lineno": 147,
          "line": "        description=\"Can be used to explicitly set the base URL for the frontend. \""
        },
        {
          "lineno": 148,
          "line": "        \"This value is then used to generate redirect URLs for OAuth flows.\","
        },
        {
          "lineno": 149,
          "line": "    )"
        },
        {
          "lineno": 150,
          "line": ""
        },
        {
          "lineno": 151,
          "line": "    media_gcs_bucket_name: str = Field("
        },
        {
          "lineno": 152,
          "line": "        default=\"\","
        },
        {
          "lineno": 153,
          "line": "        description=\"The name of the Google Cloud Storage bucket for media files\","
        },
        {
          "lineno": 154,
          "line": "    )"
        },
        {
          "lineno": 155,
          "line": ""
        },
        {
          "lineno": 156,
          "line": "    @field_validator(\"platform_base_url\", \"frontend_base_url\")"
        },
        {
          "lineno": 157,
          "line": "    @classmethod"
        },
        {
          "lineno": 169,
          "line": ""
        },
        {
          "lineno": 170,
          "line": "    app_env: AppEnvironment = Field("
        },
        {
          "lineno": 171,
          "line": "        default=AppEnvironment.LOCAL,"
        },
        {
          "lineno": 172,
          "line": "        description=\"The name of the app environment: local or dev or prod\","
        },
        {
          "lineno": 173,
          "line": "    )"
        },
        {
          "lineno": 174,
          "line": ""
        },
        {
          "lineno": 175,
          "line": "    behave_as: BehaveAs = Field("
        },
        {
          "lineno": 176,
          "line": "        default=BehaveAs.LOCAL,"
        },
        {
          "lineno": 177,
          "line": "        description=\"What environment to behave as: local or cloud\","
        },
        {
          "lineno": 178,
          "line": "    )"
        },
        {
          "lineno": 179,
          "line": ""
        },
        {
          "lineno": 180,
          "line": "    execution_event_bus_name: str = Field("
        },
        {
          "lineno": 181,
          "line": "        default=\"execution_event\","
        },
        {
          "lineno": 182,
          "line": "        description=\"Name of the event bus\","
        },
        {
          "lineno": 183,
          "line": "    )"
        },
        {
          "lineno": 184,
          "line": ""
        },
        {
          "lineno": 185,
          "line": "    trust_endpoints_for_requests: List[str] = Field("
        },
        {
          "lineno": 186,
          "line": "        default_factory=list,"
        },
        {
          "lineno": 187,
          "line": "        description=\"A whitelist of trusted internal endpoints for the backend to make requests to.\","
        },
        {
          "lineno": 188,
          "line": "    )"
        },
        {
          "lineno": 189,
          "line": ""
        },
        {
          "lineno": 190,
          "line": "    backend_cors_allow_origins: List[str] = Field(default_factory=list)"
        },
        {
          "lineno": 191,
          "line": ""
        },
        {
          "lineno": 192,
          "line": "    @field_validator(\"backend_cors_allow_origins\")"
        },
        {
          "lineno": 193,
          "line": "    @classmethod"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 53,
          "end_line": 194,
          "label": "class Config(UpdateTrackingModel[\"Config\"], BaseSettings):\n    \"\"\"Config for the server.\"\"\"\n\n    num_graph_workers: int = Field(\n        default=10,\n        ge=1,\n        le=1000,\n        description=\"Maximum number of workers to use for graph execution.\",\n    )\n    num_node_workers: int = Field(\n        default=5,\n        ge=1,\n        le=1000,\n        description=\"Maximum number of workers to use for node execution within a single graph.\",\n    )\n    pyro_host: str = Field(\n        default=\"localhost\",\n        description=\"The default hostname of the Pyro server.\",\n    )\n    pyro_client_comm_timeout: float = Field(\n        default=15,\n        description=\"The default timeout in seconds, for Pyro client connections.\",\n    )\n    pyro_client_comm_retry: int = Field(\n        default=3,\n        description=\"The default number of retries for Pyro client connections.\",\n    )\n    enable_auth: bool = Field(\n        default=True,\n        description=\"If authentication is enabled or not\",\n    )\n    enable_credit: str = Field(\n        default=\"false\",\n        description=\"If user credit system is enabled or not\",\n    )\n    num_user_credits_refill: int = Field(\n        default=1500,\n        description=\"Number of credits to refill for each user\",\n    )\n    # Add more configuration fields as needed\n\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        extra=\"allow\",\n    )\n\n    websocket_server_host: str = Field(\n        default=\"0.0.0.0\",\n        description=\"The host for the websocket server to run on\",\n    )\n\n    websocket_server_port: int = Field(\n        default=8001,\n        description=\"The port for the websocket server to run on\",\n    )\n\n    execution_manager_port: int = Field(\n        default=8002,\n        description=\"The port for execution manager daemon to run on\",\n    )\n\n    execution_scheduler_port: int = Field(\n        default=8003,\n        description=\"The port for execution scheduler daemon to run on\",\n    )\n\n    agent_server_port: int = Field(\n        default=8004,\n        description=\"The port for agent server daemon to run on\",\n    )\n\n    database_api_port: int = Field(\n        default=8005,\n        description=\"The port for database server API to run on\",\n    )\n\n    agent_api_host: str = Field(\n        default=\"0.0.0.0\",\n        description=\"The host for agent server API to run on\",\n    )\n\n    agent_api_port: int = Field(\n        default=8006,\n        description=\"The port for agent server API to run on\",\n    )\n\n    platform_base_url: str = Field(\n        default=\"\",\n        description=\"Must be set so the application knows where it's hosted at. \"\n        \"This is necessary to make sure webhooks find their way.\",\n    )\n\n    frontend_base_url: str = Field(\n        default=\"\",\n        description=\"Can be used to explicitly set the base URL for the frontend. \"\n        \"This value is then used to generate redirect URLs for OAuth flows.\",\n    )\n\n    media_gcs_bucket_name: str = Field(\n        default=\"\",\n        description=\"The name of the Google Cloud Storage bucket for media files\",\n    )\n\n    @field_validator(\"platform_base_url\", \"frontend_base_url\")\n    @classmethod",
          "successors": []
        }
      ]
    },
    {
      "name": "Secrets",
      "type": "class",
      "start_line": 237,
      "end_line": 306,
      "functions": [],
      "simplified_code": [
        {
          "lineno": 237,
          "line": "class Secrets(UpdateTrackingModel[\"Secrets\"], BaseSettings):"
        },
        {
          "lineno": 238,
          "line": "    \"\"\"Secrets for the server.\"\"\""
        },
        {
          "lineno": 239,
          "line": ""
        },
        {
          "lineno": 240,
          "line": "    supabase_url: str = Field(default=\"\", description=\"Supabase URL\")"
        },
        {
          "lineno": 241,
          "line": "    supabase_service_role_key: str = Field("
        },
        {
          "lineno": 242,
          "line": "        default=\"\", description=\"Supabase service role key\""
        },
        {
          "lineno": 243,
          "line": "    )"
        },
        {
          "lineno": 244,
          "line": ""
        },
        {
          "lineno": 245,
          "line": "    encryption_key: str = Field(default=\"\", description=\"Encryption key\")"
        },
        {
          "lineno": 246,
          "line": ""
        },
        {
          "lineno": 247,
          "line": "    # OAuth server credentials for integrations"
        },
        {
          "lineno": 248,
          "line": "    # --8<-- [start:OAuthServerCredentialsExample]"
        },
        {
          "lineno": 249,
          "line": "    github_client_id: str = Field(default=\"\", description=\"GitHub OAuth client ID\")"
        },
        {
          "lineno": 250,
          "line": "    github_client_secret: str = Field("
        },
        {
          "lineno": 251,
          "line": "        default=\"\", description=\"GitHub OAuth client secret\""
        },
        {
          "lineno": 252,
          "line": "    )"
        },
        {
          "lineno": 253,
          "line": "    # --8<-- [end:OAuthServerCredentialsExample]"
        },
        {
          "lineno": 254,
          "line": "    google_client_id: str = Field(default=\"\", description=\"Google OAuth client ID\")"
        },
        {
          "lineno": 255,
          "line": "    google_client_secret: str = Field("
        },
        {
          "lineno": 256,
          "line": "        default=\"\", description=\"Google OAuth client secret\""
        },
        {
          "lineno": 257,
          "line": "    )"
        },
        {
          "lineno": 258,
          "line": "    notion_client_id: str = Field(default=\"\", description=\"Notion OAuth client ID\")"
        },
        {
          "lineno": 259,
          "line": "    notion_client_secret: str = Field("
        },
        {
          "lineno": 260,
          "line": "        default=\"\", description=\"Notion OAuth client secret\""
        },
        {
          "lineno": 261,
          "line": "    )"
        },
        {
          "lineno": 262,
          "line": ""
        },
        {
          "lineno": 263,
          "line": "    openai_api_key: str = Field(default=\"\", description=\"OpenAI API key\")"
        },
        {
          "lineno": 264,
          "line": "    anthropic_api_key: str = Field(default=\"\", description=\"Anthropic API key\")"
        },
        {
          "lineno": 265,
          "line": "    groq_api_key: str = Field(default=\"\", description=\"Groq API key\")"
        },
        {
          "lineno": 266,
          "line": "    open_router_api_key: str = Field(default=\"\", description=\"Open Router API Key\")"
        },
        {
          "lineno": 267,
          "line": ""
        },
        {
          "lineno": 268,
          "line": "    reddit_client_id: str = Field(default=\"\", description=\"Reddit client ID\")"
        },
        {
          "lineno": 269,
          "line": "    reddit_client_secret: str = Field(default=\"\", description=\"Reddit client secret\")"
        },
        {
          "lineno": 270,
          "line": "    reddit_username: str = Field(default=\"\", description=\"Reddit username\")"
        },
        {
          "lineno": 271,
          "line": "    reddit_password: str = Field(default=\"\", description=\"Reddit password\")"
        },
        {
          "lineno": 272,
          "line": ""
        },
        {
          "lineno": 273,
          "line": "    openweathermap_api_key: str = Field("
        },
        {
          "lineno": 274,
          "line": "        default=\"\", description=\"OpenWeatherMap API key\""
        },
        {
          "lineno": 275,
          "line": "    )"
        },
        {
          "lineno": 276,
          "line": ""
        },
        {
          "lineno": 277,
          "line": "    medium_api_key: str = Field(default=\"\", description=\"Medium API key\")"
        },
        {
          "lineno": 278,
          "line": "    medium_author_id: str = Field(default=\"\", description=\"Medium author ID\")"
        },
        {
          "lineno": 279,
          "line": "    did_api_key: str = Field(default=\"\", description=\"D-ID API Key\")"
        },
        {
          "lineno": 280,
          "line": "    revid_api_key: str = Field(default=\"\", description=\"revid.ai API key\")"
        },
        {
          "lineno": 281,
          "line": "    discord_bot_token: str = Field(default=\"\", description=\"Discord bot token\")"
        },
        {
          "lineno": 282,
          "line": ""
        },
        {
          "lineno": 283,
          "line": "    smtp_server: str = Field(default=\"\", description=\"SMTP server IP\")"
        },
        {
          "lineno": 284,
          "line": "    smtp_port: str = Field(default=\"\", description=\"SMTP server port\")"
        },
        {
          "lineno": 285,
          "line": "    smtp_username: str = Field(default=\"\", description=\"SMTP username\")"
        },
        {
          "lineno": 286,
          "line": "    smtp_password: str = Field(default=\"\", description=\"SMTP password\")"
        },
        {
          "lineno": 287,
          "line": ""
        },
        {
          "lineno": 288,
          "line": "    sentry_dsn: str = Field(default=\"\", description=\"Sentry DSN\")"
        },
        {
          "lineno": 289,
          "line": ""
        },
        {
          "lineno": 290,
          "line": "    google_maps_api_key: str = Field(default=\"\", description=\"Google Maps API Key\")"
        },
        {
          "lineno": 291,
          "line": ""
        },
        {
          "lineno": 292,
          "line": "    replicate_api_key: str = Field(default=\"\", description=\"Replicate API Key\")"
        },
        {
          "lineno": 293,
          "line": "    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")"
        },
        {
          "lineno": 294,
          "line": "    ideogram_api_key: str = Field(default=\"\", description=\"Ideogram API Key\")"
        },
        {
          "lineno": 295,
          "line": "    jina_api_key: str = Field(default=\"\", description=\"Jina API Key\")"
        },
        {
          "lineno": 296,
          "line": "    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")"
        },
        {
          "lineno": 297,
          "line": ""
        },
        {
          "lineno": 298,
          "line": "    fal_key: str = Field(default=\"\", description=\"FAL API key\")"
        },
        {
          "lineno": 299,
          "line": ""
        },
        {
          "lineno": 300,
          "line": "    # Add more secret fields as needed"
        },
        {
          "lineno": 301,
          "line": ""
        },
        {
          "lineno": 302,
          "line": "    model_config = SettingsConfigDict("
        },
        {
          "lineno": 303,
          "line": "        env_file=\".env\","
        },
        {
          "lineno": 304,
          "line": "        env_file_encoding=\"utf-8\","
        },
        {
          "lineno": 305,
          "line": "        extra=\"allow\","
        },
        {
          "lineno": 306,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 237,
          "end_line": 306,
          "label": "class Secrets(UpdateTrackingModel[\"Secrets\"], BaseSettings):\n    \"\"\"Secrets for the server.\"\"\"\n\n    supabase_url: str = Field(default=\"\", description=\"Supabase URL\")\n    supabase_service_role_key: str = Field(\n        default=\"\", description=\"Supabase service role key\"\n    )\n\n    encryption_key: str = Field(default=\"\", description=\"Encryption key\")\n\n    # OAuth server credentials for integrations\n    # --8<-- [start:OAuthServerCredentialsExample]\n    github_client_id: str = Field(default=\"\", description=\"GitHub OAuth client ID\")\n    github_client_secret: str = Field(\n        default=\"\", description=\"GitHub OAuth client secret\"\n    )\n    # --8<-- [end:OAuthServerCredentialsExample]\n    google_client_id: str = Field(default=\"\", description=\"Google OAuth client ID\")\n    google_client_secret: str = Field(\n        default=\"\", description=\"Google OAuth client secret\"\n    )\n    notion_client_id: str = Field(default=\"\", description=\"Notion OAuth client ID\")\n    notion_client_secret: str = Field(\n        default=\"\", description=\"Notion OAuth client secret\"\n    )\n\n    openai_api_key: str = Field(default=\"\", description=\"OpenAI API key\")\n    anthropic_api_key: str = Field(default=\"\", description=\"Anthropic API key\")\n    groq_api_key: str = Field(default=\"\", description=\"Groq API key\")\n    open_router_api_key: str = Field(default=\"\", description=\"Open Router API Key\")\n\n    reddit_client_id: str = Field(default=\"\", description=\"Reddit client ID\")\n    reddit_client_secret: str = Field(default=\"\", description=\"Reddit client secret\")\n    reddit_username: str = Field(default=\"\", description=\"Reddit username\")\n    reddit_password: str = Field(default=\"\", description=\"Reddit password\")\n\n    openweathermap_api_key: str = Field(\n        default=\"\", description=\"OpenWeatherMap API key\"\n    )\n\n    medium_api_key: str = Field(default=\"\", description=\"Medium API key\")\n    medium_author_id: str = Field(default=\"\", description=\"Medium author ID\")\n    did_api_key: str = Field(default=\"\", description=\"D-ID API Key\")\n    revid_api_key: str = Field(default=\"\", description=\"revid.ai API key\")\n    discord_bot_token: str = Field(default=\"\", description=\"Discord bot token\")\n\n    smtp_server: str = Field(default=\"\", description=\"SMTP server IP\")\n    smtp_port: str = Field(default=\"\", description=\"SMTP server port\")\n    smtp_username: str = Field(default=\"\", description=\"SMTP username\")\n    smtp_password: str = Field(default=\"\", description=\"SMTP password\")\n\n    sentry_dsn: str = Field(default=\"\", description=\"Sentry DSN\")\n\n    google_maps_api_key: str = Field(default=\"\", description=\"Google Maps API Key\")\n\n    replicate_api_key: str = Field(default=\"\", description=\"Replicate API Key\")\n    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")\n    ideogram_api_key: str = Field(default=\"\", description=\"Ideogram API Key\")\n    jina_api_key: str = Field(default=\"\", description=\"Jina API Key\")\n    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")\n\n    fal_key: str = Field(default=\"\", description=\"FAL API key\")\n\n    # Add more secret fields as needed\n\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"allow\",\n    )",
          "successors": []
        }
      ]
    },
    {
      "name": "Settings",
      "type": "class",
      "start_line": 309,
      "end_line": 328,
      "functions": [
        {
          "name": "save",
          "type": "function",
          "start_line": 313,
          "end_line": 328,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 313,
              "line": "    def save(self) -> None:"
            },
            {
              "lineno": 314,
              "line": "        # Save updated config to JSON file"
            },
            {
              "lineno": 315,
              "line": "        if self.config.updated_fields:"
            },
            {
              "lineno": 316,
              "line": "            config_to_save = self.config.get_updates()"
            },
            {
              "lineno": 317,
              "line": "            config_path = os.path.join(get_data_path(), \"config.json\")"
            },
            {
              "lineno": 318,
              "line": "            if os.path.exists(config_path):"
            },
            {
              "lineno": 319,
              "line": "                with open(config_path, \"r+\") as f:"
            },
            {
              "lineno": 320,
              "line": "                    existing_config: Dict[str, Any] = json.load(f)"
            },
            {
              "lineno": 321,
              "line": "                    existing_config.update(config_to_save)"
            },
            {
              "lineno": 322,
              "line": "                    f.seek(0)"
            },
            {
              "lineno": 323,
              "line": "                    json.dump(existing_config, f, indent=2)"
            },
            {
              "lineno": 324,
              "line": "                    f.truncate()"
            },
            {
              "lineno": 325,
              "line": "            else:"
            },
            {
              "lineno": 326,
              "line": "                with open(config_path, \"w\") as f:"
            },
            {
              "lineno": 327,
              "line": "                    json.dump(config_to_save, f, indent=2)"
            },
            {
              "lineno": 328,
              "line": "            self.config.clear_updates()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 313,
              "end_line": 315,
              "label": "    def save(self) -> None:\n        # Save updated config to JSON file\n        if self.config.updated_fields:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 316,
                  "end_line": 317,
                  "label": "            config_to_save = self.config.get_updates()\n            config_path = os.path.join(get_data_path(), \"config.json\")",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 318,
                      "end_line": 318,
                      "label": "            if os.path.exists(config_path):",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 319,
                          "end_line": 324,
                          "label": "                with open(config_path, \"r+\") as f:\n                    existing_config: Dict[str, Any] = json.load(f)\n                    existing_config.update(config_to_save)\n                    f.seek(0)\n                    json.dump(existing_config, f, indent=2)\n                    f.truncate()",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 328,
                              "end_line": 328,
                              "label": "            self.config.clear_updates()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 325,
                      "end_line": 325,
                      "label": "            else:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 326,
                          "end_line": 327,
                          "label": "                with open(config_path, \"w\") as f:\n                    json.dump(config_to_save, f, indent=2)",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 328,
                              "end_line": 328,
                              "label": "            self.config.clear_updates()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 309,
          "line": "class Settings(BaseModel):"
        },
        {
          "lineno": 310,
          "line": "    config: Config = Config()"
        },
        {
          "lineno": 311,
          "line": "    secrets: Secrets = Secrets()"
        },
        {
          "lineno": 312,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 309,
          "end_line": 312,
          "label": "class Settings(BaseModel):\n    config: Config = Config()\n    secrets: Secrets = Secrets()\n",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import json"
    },
    {
      "lineno": 2,
      "line": "import os"
    },
    {
      "lineno": 3,
      "line": "from enum import Enum"
    },
    {
      "lineno": 4,
      "line": "from typing import Any, Dict, Generic, List, Set, Tuple, Type, TypeVar"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from pydantic import BaseModel, Field, PrivateAttr, ValidationInfo, field_validator"
    },
    {
      "lineno": 7,
      "line": "from pydantic_settings import ("
    },
    {
      "lineno": 8,
      "line": "    BaseSettings,"
    },
    {
      "lineno": 9,
      "line": "    JsonConfigSettingsSource,"
    },
    {
      "lineno": 10,
      "line": "    PydanticBaseSettingsSource,"
    },
    {
      "lineno": 11,
      "line": "    SettingsConfigDict,"
    },
    {
      "lineno": 12,
      "line": ")"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": "from backend.util.data import get_data_path"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": "T = TypeVar(\"T\", bound=BaseSettings)"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": ""
    },
    {
      "lineno": 23,
      "line": ""
    },
    {
      "lineno": 24,
      "line": ""
    },
    {
      "lineno": 28,
      "line": ""
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 51,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 218,
      "line": ""
    },
    {
      "lineno": 219,
      "line": "    @classmethod"
    },
    {
      "lineno": 220,
      "line": "    def settings_customise_sources("
    },
    {
      "lineno": 221,
      "line": "        cls,"
    },
    {
      "lineno": 222,
      "line": "        settings_cls: Type[BaseSettings],"
    },
    {
      "lineno": 223,
      "line": "        init_settings: PydanticBaseSettingsSource,"
    },
    {
      "lineno": 224,
      "line": "        env_settings: PydanticBaseSettingsSource,"
    },
    {
      "lineno": 225,
      "line": "        dotenv_settings: PydanticBaseSettingsSource,"
    },
    {
      "lineno": 226,
      "line": "        file_secret_settings: PydanticBaseSettingsSource,"
    },
    {
      "lineno": 227,
      "line": "    ) -> Tuple[PydanticBaseSettingsSource, ...]:"
    },
    {
      "lineno": 228,
      "line": "        return ("
    },
    {
      "lineno": 229,
      "line": "            env_settings,"
    },
    {
      "lineno": 230,
      "line": "            file_secret_settings,"
    },
    {
      "lineno": 231,
      "line": "            dotenv_settings,"
    },
    {
      "lineno": 232,
      "line": "            JsonConfigSettingsSource(settings_cls),"
    },
    {
      "lineno": 233,
      "line": "            init_settings,"
    },
    {
      "lineno": 234,
      "line": "        )"
    },
    {
      "lineno": 235,
      "line": ""
    },
    {
      "lineno": 236,
      "line": ""
    },
    {
      "lineno": 307,
      "line": ""
    },
    {
      "lineno": 308,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 16,
      "label": "import json\nimport os\nfrom enum import Enum\nfrom typing import Any, Dict, Generic, List, Set, Tuple, Type, TypeVar\n\nfrom pydantic import BaseModel, Field, PrivateAttr, ValidationInfo, field_validator\nfrom pydantic_settings import (\n    BaseSettings,\n    JsonConfigSettingsSource,\n    PydanticBaseSettingsSource,\n    SettingsConfigDict,\n)\n\nfrom backend.util.data import get_data_path\n\nT = TypeVar(\"T\", bound=BaseSettings)",
      "successors": [
        {
          "id": 2,
          "start_line": 219,
          "end_line": 234,
          "label": "@classmethod\n    def settings_customise_sources(\n        cls,\n        settings_cls: Type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:\n        return (\n            env_settings,\n            file_secret_settings,\n            dotenv_settings,\n            JsonConfigSettingsSource(settings_cls),\n            init_settings,\n        )",
          "successors": []
        }
      ]
    }
  ]
}