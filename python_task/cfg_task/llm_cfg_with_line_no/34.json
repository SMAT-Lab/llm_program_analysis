{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 94,
  "functions": [],
  "classes": [
    {
      "name": "DatabaseManager",
      "type": "class",
      "start_line": 33,
      "end_line": 94,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 34,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 35,
              "line": "        super().__init__()"
            },
            {
              "lineno": 36,
              "line": "        self.use_db = True"
            },
            {
              "lineno": 37,
              "line": "        self.use_redis = True"
            },
            {
              "lineno": 38,
              "line": "        self.event_queue = RedisExecutionEventBus()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 34,
              "end_line": 38,
              "label": "    def __init__(self):\n        super().__init__()\n        self.use_db = True\n        self.use_redis = True\n        self.event_queue = RedisExecutionEventBus()",
              "successors": []
            }
          ]
        },
        {
          "name": "get_port",
          "type": "function",
          "start_line": 41,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 41,
              "line": "    def get_port(cls) -> int:"
            },
            {
              "lineno": 42,
              "line": "        return config.database_api_port"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 41,
              "end_line": 42,
              "label": "def get_port(cls) -> int:\n    return config.database_api_port",
              "successors": []
            }
          ]
        },
        {
          "name": "send_execution_update",
          "type": "function",
          "start_line": 45,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 45,
              "line": "    def send_execution_update(self, execution_result: ExecutionResult):"
            },
            {
              "lineno": 46,
              "line": "        self.event_queue.publish(execution_result)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 45,
              "end_line": 46,
              "label": "    def send_execution_update(self, execution_result: ExecutionResult):\n        self.event_queue.publish(execution_result)",
              "successors": []
            }
          ]
        },
        {
          "name": "exposed_run_and_wait",
          "type": "function",
          "start_line": 49,
          "end_line": 62,
          "functions": [
            {
              "name": "wrapper",
              "type": "function",
              "start_line": 54,
              "end_line": 57,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 54,
                  "line": "        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:"
                },
                {
                  "lineno": 55,
                  "line": "            coroutine = f(*args, **kwargs)"
                },
                {
                  "lineno": 56,
                  "line": "            res = self.run_and_wait(coroutine)"
                },
                {
                  "lineno": 57,
                  "line": "            return res"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "start_line": 54,
                  "end_line": 57,
                  "label": "        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 49,
              "line": "    def exposed_run_and_wait("
            },
            {
              "lineno": 50,
              "line": "        f: Callable[P, Coroutine[None, None, R]]"
            },
            {
              "lineno": 51,
              "line": "    ) -> Callable[Concatenate[object, P], R]:"
            },
            {
              "lineno": 52,
              "line": "        @expose"
            },
            {
              "lineno": 53,
              "line": "        @wraps(f)"
            },
            {
              "lineno": 58,
              "line": ""
            },
            {
              "lineno": 59,
              "line": "        # Register serializers for annotations on bare function"
            },
            {
              "lineno": 60,
              "line": "        register_pydantic_serializers(f)"
            },
            {
              "lineno": 61,
              "line": ""
            },
            {
              "lineno": 62,
              "line": "        return wrapper"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 49,
              "end_line": 53,
              "label": "    def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:\n        @expose\n        @wraps(f)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 59,
                  "end_line": 60,
                  "label": "        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 62,
                      "end_line": 62,
                      "label": "        return wrapper",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 33,
          "line": "class DatabaseManager(AppService):"
        },
        {
          "lineno": 39,
          "line": ""
        },
        {
          "lineno": 40,
          "line": "    @classmethod"
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 44,
          "line": "    @expose"
        },
        {
          "lineno": 47,
          "line": ""
        },
        {
          "lineno": 48,
          "line": "    @staticmethod"
        },
        {
          "lineno": 63,
          "line": ""
        },
        {
          "lineno": 64,
          "line": "    # Executions"
        },
        {
          "lineno": 65,
          "line": "    create_graph_execution = exposed_run_and_wait(create_graph_execution)"
        },
        {
          "lineno": 66,
          "line": "    get_execution_results = exposed_run_and_wait(get_execution_results)"
        },
        {
          "lineno": 67,
          "line": "    get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)"
        },
        {
          "lineno": 68,
          "line": "    get_latest_execution = exposed_run_and_wait(get_latest_execution)"
        },
        {
          "lineno": 69,
          "line": "    update_execution_status = exposed_run_and_wait(update_execution_status)"
        },
        {
          "lineno": 70,
          "line": "    update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)"
        },
        {
          "lineno": 71,
          "line": "    update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)"
        },
        {
          "lineno": 72,
          "line": "    upsert_execution_input = exposed_run_and_wait(upsert_execution_input)"
        },
        {
          "lineno": 73,
          "line": "    upsert_execution_output = exposed_run_and_wait(upsert_execution_output)"
        },
        {
          "lineno": 74,
          "line": ""
        },
        {
          "lineno": 75,
          "line": "    # Graphs"
        },
        {
          "lineno": 76,
          "line": "    get_node = exposed_run_and_wait(get_node)"
        },
        {
          "lineno": 77,
          "line": "    get_graph = exposed_run_and_wait(get_graph)"
        },
        {
          "lineno": 78,
          "line": ""
        },
        {
          "lineno": 79,
          "line": "    # Credits"
        },
        {
          "lineno": 80,
          "line": "    user_credit_model = get_user_credit_model()"
        },
        {
          "lineno": 81,
          "line": "    get_or_refill_credit = cast("
        },
        {
          "lineno": 82,
          "line": "        Callable[[Any, str], int],"
        },
        {
          "lineno": 83,
          "line": "        exposed_run_and_wait(user_credit_model.get_or_refill_credit),"
        },
        {
          "lineno": 84,
          "line": "    )"
        },
        {
          "lineno": 85,
          "line": "    spend_credits = cast("
        },
        {
          "lineno": 86,
          "line": "        Callable[[Any, str, int, str, dict[str, str], float, float], int],"
        },
        {
          "lineno": 87,
          "line": "        exposed_run_and_wait(user_credit_model.spend_credits),"
        },
        {
          "lineno": 88,
          "line": "    )"
        },
        {
          "lineno": 89,
          "line": ""
        },
        {
          "lineno": 90,
          "line": "    # User + User Metadata + User Integrations"
        },
        {
          "lineno": 91,
          "line": "    get_user_metadata = exposed_run_and_wait(get_user_metadata)"
        },
        {
          "lineno": 92,
          "line": "    update_user_metadata = exposed_run_and_wait(update_user_metadata)"
        },
        {
          "lineno": 93,
          "line": "    get_user_integrations = exposed_run_and_wait(get_user_integrations)"
        },
        {
          "lineno": 94,
          "line": "    update_user_integrations = exposed_run_and_wait(update_user_integrations)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 33,
          "end_line": 33,
          "label": "class DatabaseManager(AppService):",
          "successors": [
            {
              "id": 2,
              "start_line": 65,
              "end_line": 73,
              "label": "create_graph_execution = exposed_run_and_wait(create_graph_execution)\nget_execution_results = exposed_run_and_wait(get_execution_results)\nget_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\nget_latest_execution = exposed_run_and_wait(get_latest_execution)\nupdate_execution_status = exposed_run_and_wait(update_execution_status)\nupdate_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)\nupdate_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\nupsert_execution_input = exposed_run_and_wait(upsert_execution_input)\nupsert_execution_output = exposed_run_and_wait(upsert_execution_output)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 76,
                  "end_line": 77,
                  "label": "get_node = exposed_run_and_wait(get_node)\nget_graph = exposed_run_and_wait(get_graph)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 80,
                      "end_line": 84,
                      "label": "user_credit_model = get_user_credit_model()\nget_or_refill_credit = cast(\n    Callable[[Any, str], int],\n    exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 85,
                          "end_line": 88,
                          "label": "spend_credits = cast(\n    Callable[[Any, str, int, str, dict[str, str], float, float], int],\n    exposed_run_and_wait(user_credit_model.spend_credits),\n)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 91,
                              "end_line": 94,
                              "label": "get_user_metadata = exposed_run_and_wait(get_user_metadata)\nupdate_user_metadata = exposed_run_and_wait(update_user_metadata)\nget_user_integrations = exposed_run_and_wait(get_user_integrations)\nupdate_user_integrations = exposed_run_and_wait(update_user_integrations)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from functools import wraps"
    },
    {
      "lineno": 2,
      "line": "from typing import Any, Callable, Concatenate, Coroutine, ParamSpec, TypeVar, cast"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from backend.data.credit import get_user_credit_model"
    },
    {
      "lineno": 5,
      "line": "from backend.data.execution import ("
    },
    {
      "lineno": 6,
      "line": "    ExecutionResult,"
    },
    {
      "lineno": 7,
      "line": "    RedisExecutionEventBus,"
    },
    {
      "lineno": 8,
      "line": "    create_graph_execution,"
    },
    {
      "lineno": 9,
      "line": "    get_execution_results,"
    },
    {
      "lineno": 10,
      "line": "    get_incomplete_executions,"
    },
    {
      "lineno": 11,
      "line": "    get_latest_execution,"
    },
    {
      "lineno": 12,
      "line": "    update_execution_status,"
    },
    {
      "lineno": 13,
      "line": "    update_graph_execution_stats,"
    },
    {
      "lineno": 14,
      "line": "    update_node_execution_stats,"
    },
    {
      "lineno": 15,
      "line": "    upsert_execution_input,"
    },
    {
      "lineno": 16,
      "line": "    upsert_execution_output,"
    },
    {
      "lineno": 17,
      "line": ")"
    },
    {
      "lineno": 18,
      "line": "from backend.data.graph import get_graph, get_node"
    },
    {
      "lineno": 19,
      "line": "from backend.data.user import ("
    },
    {
      "lineno": 20,
      "line": "    get_user_integrations,"
    },
    {
      "lineno": 21,
      "line": "    get_user_metadata,"
    },
    {
      "lineno": 22,
      "line": "    update_user_integrations,"
    },
    {
      "lineno": 23,
      "line": "    update_user_metadata,"
    },
    {
      "lineno": 24,
      "line": ")"
    },
    {
      "lineno": 25,
      "line": "from backend.util.service import AppService, expose, register_pydantic_serializers"
    },
    {
      "lineno": 26,
      "line": "from backend.util.settings import Config"
    },
    {
      "lineno": 27,
      "line": ""
    },
    {
      "lineno": 28,
      "line": "P = ParamSpec(\"P\")"
    },
    {
      "lineno": 29,
      "line": "R = TypeVar(\"R\")"
    },
    {
      "lineno": 30,
      "line": "config = Config()"
    },
    {
      "lineno": 31,
      "line": ""
    },
    {
      "lineno": 32,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 32,
      "label": "from functools import wraps\nfrom typing import Any, Callable, Concatenate, Coroutine, ParamSpec, TypeVar, cast\n\nfrom backend.data.credit import get_user_credit_model\nfrom backend.data.execution import (\n    ExecutionResult,\n    RedisExecutionEventBus,\n    create_graph_execution,\n    get_execution_results,\n    get_incomplete_executions,\n    get_latest_execution,\n    update_execution_status,\n    update_graph_execution_stats,\n    update_node_execution_stats,\n    upsert_execution_input,\n    upsert_execution_output,\n)\nfrom backend.data.graph import get_graph, get_node\nfrom backend.data.user import (\n    get_user_integrations,\n    get_user_metadata,\n    update_user_integrations,\n    update_user_metadata,\n)\nfrom backend.util.service import AppService, expose, register_pydantic_serializers\nfrom backend.util.settings import Config\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\nconfig = Config()\n\n",
      "successors": []
    }
  ]
}