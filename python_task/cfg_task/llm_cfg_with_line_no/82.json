{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 94,
  "functions": [
    {
      "name": "gray_code",
      "type": "function",
      "start_line": 1,
      "end_line": 47,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 1,
          "line": "def gray_code(bit_count: int) -> list:"
        },
        {
          "lineno": 2,
          "line": "    \"\"\""
        },
        {
          "lineno": 3,
          "line": "    Takes in an integer n and returns a n-bit"
        },
        {
          "lineno": 4,
          "line": "    gray code sequence"
        },
        {
          "lineno": 5,
          "line": "    An n-bit gray code sequence is a sequence of 2^n"
        },
        {
          "lineno": 6,
          "line": "    integers where:"
        },
        {
          "lineno": 7,
          "line": ""
        },
        {
          "lineno": 8,
          "line": "    a) Every integer is between [0,2^n -1] inclusive"
        },
        {
          "lineno": 9,
          "line": "    b) The sequence begins with 0"
        },
        {
          "lineno": 10,
          "line": "    c) An integer appears at most one times in the sequence"
        },
        {
          "lineno": 11,
          "line": "    d)The binary representation of every pair of integers differ"
        },
        {
          "lineno": 12,
          "line": "       by exactly one bit"
        },
        {
          "lineno": 13,
          "line": "    e) The binary representation of first and last bit also"
        },
        {
          "lineno": 14,
          "line": "       differ by exactly one bit"
        },
        {
          "lineno": 15,
          "line": ""
        },
        {
          "lineno": 16,
          "line": "    >>> gray_code(2)"
        },
        {
          "lineno": 17,
          "line": "    [0, 1, 3, 2]"
        },
        {
          "lineno": 18,
          "line": ""
        },
        {
          "lineno": 19,
          "line": "    >>> gray_code(1)"
        },
        {
          "lineno": 20,
          "line": "    [0, 1]"
        },
        {
          "lineno": 21,
          "line": ""
        },
        {
          "lineno": 22,
          "line": "    >>> gray_code(3)"
        },
        {
          "lineno": 23,
          "line": "    [0, 1, 3, 2, 6, 7, 5, 4]"
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 25,
          "line": "    >>> gray_code(-1)"
        },
        {
          "lineno": 26,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 27,
          "line": "        ..."
        },
        {
          "lineno": 28,
          "line": "    ValueError: The given input must be positive"
        },
        {
          "lineno": 29,
          "line": ""
        },
        {
          "lineno": 30,
          "line": "    >>> gray_code(10.6)"
        },
        {
          "lineno": 31,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 32,
          "line": "        ..."
        },
        {
          "lineno": 33,
          "line": "    TypeError: unsupported operand type(s) for <<: 'int' and 'float'"
        },
        {
          "lineno": 34,
          "line": "    \"\"\""
        },
        {
          "lineno": 35,
          "line": ""
        },
        {
          "lineno": 36,
          "line": "    # bit count represents no. of bits in the gray code"
        },
        {
          "lineno": 37,
          "line": "    if bit_count < 0:"
        },
        {
          "lineno": 38,
          "line": "        raise ValueError(\"The given input must be positive\")"
        },
        {
          "lineno": 39,
          "line": ""
        },
        {
          "lineno": 40,
          "line": "    # get the generated string sequence"
        },
        {
          "lineno": 41,
          "line": "    sequence = gray_code_sequence_string(bit_count)"
        },
        {
          "lineno": 42,
          "line": "    #"
        },
        {
          "lineno": 43,
          "line": "    # convert them to integers"
        },
        {
          "lineno": 44,
          "line": "    for i in range(len(sequence)):"
        },
        {
          "lineno": 45,
          "line": "        sequence[i] = int(sequence[i], 2)"
        },
        {
          "lineno": 46,
          "line": ""
        },
        {
          "lineno": 47,
          "line": "    return sequence"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def gray_code(bit_count: int) -> list:",
          "successors": [
            {
              "id": 2,
              "start_line": 37,
              "end_line": 37,
              "label": "if bit_count < 0:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 38,
                  "end_line": 38,
                  "label": "raise ValueError(\"The given input must be positive\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 40,
                  "end_line": 41,
                  "label": "# get the generated string sequence\nsequence = gray_code_sequence_string(bit_count)",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 44,
                      "end_line": 45,
                      "label": "for i in range(len(sequence)):\n    sequence[i] = int(sequence[i], 2)",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 47,
                          "end_line": 47,
                          "label": "return sequence",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "gray_code_sequence_string",
      "type": "function",
      "start_line": 50,
      "end_line": 88,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 50,
          "line": "def gray_code_sequence_string(bit_count: int) -> list:"
        },
        {
          "lineno": 51,
          "line": "    \"\"\""
        },
        {
          "lineno": 52,
          "line": "    Will output the n-bit grey sequence as a"
        },
        {
          "lineno": 53,
          "line": "    string of bits"
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 55,
          "line": "    >>> gray_code_sequence_string(2)"
        },
        {
          "lineno": 56,
          "line": "    ['00', '01', '11', '10']"
        },
        {
          "lineno": 57,
          "line": ""
        },
        {
          "lineno": 58,
          "line": "    >>> gray_code_sequence_string(1)"
        },
        {
          "lineno": 59,
          "line": "    ['0', '1']"
        },
        {
          "lineno": 60,
          "line": "    \"\"\""
        },
        {
          "lineno": 61,
          "line": ""
        },
        {
          "lineno": 62,
          "line": "    # The approach is a recursive one"
        },
        {
          "lineno": 63,
          "line": "    # Base case achieved when either n = 0 or n=1"
        },
        {
          "lineno": 64,
          "line": "    if bit_count == 0:"
        },
        {
          "lineno": 65,
          "line": "        return [\"0\"]"
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 67,
          "line": "    if bit_count == 1:"
        },
        {
          "lineno": 68,
          "line": "        return [\"0\", \"1\"]"
        },
        {
          "lineno": 69,
          "line": ""
        },
        {
          "lineno": 70,
          "line": "    seq_len = 1 << bit_count  # defines the length of the sequence"
        },
        {
          "lineno": 71,
          "line": "    # 1<< n is equivalent to 2^n"
        },
        {
          "lineno": 72,
          "line": ""
        },
        {
          "lineno": 73,
          "line": "    # recursive answer will generate answer for n-1 bits"
        },
        {
          "lineno": 74,
          "line": "    smaller_sequence = gray_code_sequence_string(bit_count - 1)"
        },
        {
          "lineno": 75,
          "line": ""
        },
        {
          "lineno": 76,
          "line": "    sequence = []"
        },
        {
          "lineno": 77,
          "line": ""
        },
        {
          "lineno": 78,
          "line": "    # append 0 to first half of the smaller sequence generated"
        },
        {
          "lineno": 79,
          "line": "    for i in range(seq_len // 2):"
        },
        {
          "lineno": 80,
          "line": "        generated_no = \"0\" + smaller_sequence[i]"
        },
        {
          "lineno": 81,
          "line": "        sequence.append(generated_no)"
        },
        {
          "lineno": 82,
          "line": ""
        },
        {
          "lineno": 83,
          "line": "    # append 1 to second half ... start from the end of the list"
        },
        {
          "lineno": 84,
          "line": "    for i in reversed(range(seq_len // 2)):"
        },
        {
          "lineno": 85,
          "line": "        generated_no = \"1\" + smaller_sequence[i]"
        },
        {
          "lineno": 86,
          "line": "        sequence.append(generated_no)"
        },
        {
          "lineno": 87,
          "line": ""
        },
        {
          "lineno": 88,
          "line": "    return sequence"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 50,
          "end_line": 64,
          "label": "def gray_code_sequence_string(bit_count: int) -> list:\n    \"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \"\"\"\n\n    # The approach is a recursive one\n    # Base case achieved when either n = 0 or n=1\n    if bit_count == 0:",
          "successors": [
            {
              "id": 2,
              "start_line": 65,
              "end_line": 65,
              "label": "return [\"0\"]",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 67,
              "end_line": 67,
              "label": "if bit_count == 1:",
              "successors": [
                {
                  "id": 4,
                  "start_line": 68,
                  "end_line": 68,
                  "label": "return [\"0\", \"1\"]",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 70,
                  "end_line": 74,
                  "label": "seq_len = 1 << bit_count  # defines the length of the sequence\n    # 1<< n is equivalent to 2^n\n\n    # recursive answer will generate answer for n-1 bits\n    smaller_sequence = gray_code_sequence_string(bit_count - 1)",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 76,
                      "end_line": 81,
                      "label": "sequence = []\n\n    # append 0 to first half of the smaller sequence generated\n    for i in range(seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 83,
                          "end_line": 86,
                          "label": "# append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 88,
                              "end_line": 88,
                              "label": "return sequence",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 48,
      "line": ""
    },
    {
      "lineno": 49,
      "line": ""
    },
    {
      "lineno": 89,
      "line": ""
    },
    {
      "lineno": 90,
      "line": ""
    },
    {
      "lineno": 91,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 92,
      "line": "    import doctest"
    },
    {
      "lineno": 93,
      "line": ""
    },
    {
      "lineno": 94,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 91,
      "end_line": 91,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        {
          "id": 2,
          "start_line": 92,
          "end_line": 92,
          "label": "    import doctest",
          "successors": [
            {
              "id": 3,
              "start_line": 94,
              "end_line": 94,
              "label": "    doctest.testmod()",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}