{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 158,
  "functions": [
    {
      "name": "depth_first_search",
      "type": "function",
      "start_line": 82,
      "end_line": 138,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 82,
          "line": "def depth_first_search("
        },
        {
          "lineno": 83,
          "line": "    possible_board: list[int],"
        },
        {
          "lineno": 84,
          "line": "    diagonal_right_collisions: list[int],"
        },
        {
          "lineno": 85,
          "line": "    diagonal_left_collisions: list[int],"
        },
        {
          "lineno": 86,
          "line": "    boards: list[list[str]],"
        },
        {
          "lineno": 87,
          "line": "    n: int,"
        },
        {
          "lineno": 88,
          "line": ") -> None:"
        },
        {
          "lineno": 89,
          "line": "    \"\"\""
        },
        {
          "lineno": 90,
          "line": "    >>> boards = []"
        },
        {
          "lineno": 91,
          "line": "    >>> depth_first_search([], [], [], boards, 4)"
        },
        {
          "lineno": 92,
          "line": "    >>> for board in boards:"
        },
        {
          "lineno": 93,
          "line": "    ...     print(board)"
        },
        {
          "lineno": 94,
          "line": "    ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']"
        },
        {
          "lineno": 95,
          "line": "    ['. . Q . ', 'Q . . . ', '. . . Q ', '. Q . . ']"
        },
        {
          "lineno": 96,
          "line": "    \"\"\""
        },
        {
          "lineno": 97,
          "line": ""
        },
        {
          "lineno": 98,
          "line": "    # Get next row in the current board (possible_board) to fill it with a queen"
        },
        {
          "lineno": 99,
          "line": "    row = len(possible_board)"
        },
        {
          "lineno": 100,
          "line": ""
        },
        {
          "lineno": 101,
          "line": "    # If row is equal to the size of the board it means there are a queen in each row in"
        },
        {
          "lineno": 102,
          "line": "    # the current board (possible_board)"
        },
        {
          "lineno": 103,
          "line": "    if row == n:"
        },
        {
          "lineno": 104,
          "line": "        # We convert the variable possible_board that looks like this: [1, 3, 0, 2] to"
        },
        {
          "lineno": 105,
          "line": "        # this: ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']"
        },
        {
          "lineno": 106,
          "line": "        boards.append([\". \" * i + \"Q \" + \". \" * (n - 1 - i) for i in possible_board])"
        },
        {
          "lineno": 107,
          "line": "        return"
        },
        {
          "lineno": 108,
          "line": ""
        },
        {
          "lineno": 109,
          "line": "    # We iterate each column in the row to find all possible results in each row"
        },
        {
          "lineno": 110,
          "line": "    for col in range(n):"
        },
        {
          "lineno": 111,
          "line": "        # We apply that we learned previously. First we check that in the current board"
        },
        {
          "lineno": 112,
          "line": "        # (possible_board) there are not other same value because if there is it means"
        },
        {
          "lineno": 113,
          "line": "        # that there are a collision in vertical. Then we apply the two formulas we"
        },
        {
          "lineno": 114,
          "line": "        # learned before:"
        },
        {
          "lineno": 115,
          "line": "        #"
        },
        {
          "lineno": 116,
          "line": "        # 45ยบ: y - x = b or 45: row - col = b"
        },
        {
          "lineno": 117,
          "line": "        # 135ยบ: y + x = b or row + col = b."
        },
        {
          "lineno": 118,
          "line": "        #"
        },
        {
          "lineno": 119,
          "line": "        # And we verify if the results of this two formulas not exist in their variables"
        },
        {
          "lineno": 120,
          "line": "        # respectively.  (diagonal_right_collisions, diagonal_left_collisions)"
        },
        {
          "lineno": 121,
          "line": "        #"
        },
        {
          "lineno": 122,
          "line": "        # If any or these are True it means there is a collision so we continue to the"
        },
        {
          "lineno": 123,
          "line": "        # next value in the for loop."
        },
        {
          "lineno": 124,
          "line": "        if ("
        },
        {
          "lineno": 125,
          "line": "            col in possible_board"
        },
        {
          "lineno": 126,
          "line": "            or row - col in diagonal_right_collisions"
        },
        {
          "lineno": 127,
          "line": "            or row + col in diagonal_left_collisions"
        },
        {
          "lineno": 128,
          "line": "        ):"
        },
        {
          "lineno": 129,
          "line": "            continue"
        },
        {
          "lineno": 130,
          "line": ""
        },
        {
          "lineno": 131,
          "line": "        # If it is False we call dfs function again and we update the inputs"
        },
        {
          "lineno": 132,
          "line": "        depth_first_search("
        },
        {
          "lineno": 133,
          "line": "            [*possible_board, col],"
        },
        {
          "lineno": 134,
          "line": "            [*diagonal_right_collisions, row - col],"
        },
        {
          "lineno": 135,
          "line": "            [*diagonal_left_collisions, row + col],"
        },
        {
          "lineno": 136,
          "line": "            boards,"
        },
        {
          "lineno": 137,
          "line": "            n,"
        },
        {
          "lineno": 138,
          "line": "        )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 82,
          "end_line": 103,
          "label": "def depth_first_search(\n    possible_board: list[int],\n    diagonal_right_collisions: list[int],\n    diagonal_left_collisions: list[int],\n    boards: list[list[str]],\n    n: int,\n) -> None:\n    \"\"\"\n    >>> boards = []\n    >>> depth_first_search([], [], [], boards, 4)\n    >>> for board in boards:\n    ...     print(board)\n    ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']\n    ['. . Q . ', 'Q . . . ', '. . . Q ', '. Q . . ']\n    \"\"\"\n\n    # Get next row in the current board (possible_board) to fill it with a queen\n    row = len(possible_board)\n\n    # If row is equal to the size of the board it means there are a queen in each row in\n    # the current board (possible_board)\n    if row == n:",
          "successors": [
            {
              "id": 2,
              "start_line": 104,
              "end_line": 107,
              "label": "    # We convert the variable possible_board that looks like this: [1, 3, 0, 2] to\n    # this: ['. Q . . ', '. . . Q ', 'Q . . . ', '. . Q . ']\n    boards.append([\". \" * i + \"Q \" + \". \" * (n - 1 - i) for i in possible_board])\n    return",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 109,
              "end_line": 110,
              "label": "    # We iterate each column in the row to find all possible results in each row\n    for col in range(n):",
              "successors": [
                {
                  "id": 4,
                  "start_line": 124,
                  "end_line": 129,
                  "label": "        if (\n            col in possible_board\n            or row - col in diagonal_right_collisions\n            or row + col in diagonal_left_collisions\n        ):\n            continue",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 131,
                      "end_line": 138,
                      "label": "        # If it is False we call dfs function again and we update the inputs\n        depth_first_search(\n            [*possible_board, col],\n            [*diagonal_right_collisions, row - col],\n            [*diagonal_left_collisions, row + col],\n            boards,\n            n,\n        )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "n_queens_solution",
      "type": "function",
      "start_line": 141,
      "end_line": 151,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 141,
          "line": "def n_queens_solution(n: int) -> None:"
        },
        {
          "lineno": 142,
          "line": "    boards: list[list[str]] = []"
        },
        {
          "lineno": 143,
          "line": "    depth_first_search([], [], [], boards, n)"
        },
        {
          "lineno": 144,
          "line": ""
        },
        {
          "lineno": 145,
          "line": "    # Print all the boards"
        },
        {
          "lineno": 146,
          "line": "    for board in boards:"
        },
        {
          "lineno": 147,
          "line": "        for column in board:"
        },
        {
          "lineno": 148,
          "line": "            print(column)"
        },
        {
          "lineno": 149,
          "line": "        print(\"\")"
        },
        {
          "lineno": 150,
          "line": ""
        },
        {
          "lineno": 151,
          "line": "    print(len(boards), \"solutions were found.\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 141,
          "end_line": 143,
          "label": "def n_queens_solution(n: int) -> None:\n    boards: list[list[str]] = []\n    depth_first_search([], [], [], boards, n)",
          "successors": [
            {
              "id": 2,
              "start_line": 146,
              "end_line": 149,
              "label": "for board in boards:\n        for column in board:\n            print(column)\n        print(\"\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 151,
                  "end_line": 151,
                  "label": "print(len(boards), \"solutions were found.\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "r\"\"\""
    },
    {
      "lineno": 2,
      "line": "Problem:"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "The n queens problem is: placing N queens on a N * N chess board such that no queen"
    },
    {
      "lineno": 5,
      "line": "can attack any other queens placed on that chess board.  This means that one queen"
    },
    {
      "lineno": 6,
      "line": "cannot have any other queen on its horizontal, vertical and diagonal lines."
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "Solution:"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": "To solve this problem we will use simple math. First we know the queen can move in all"
    },
    {
      "lineno": 11,
      "line": "the possible ways, we can simplify it in this: vertical, horizontal, diagonal left and"
    },
    {
      "lineno": 12,
      "line": " diagonal right."
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": "We can visualize it like this:"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": "left diagonal = \\"
    },
    {
      "lineno": 17,
      "line": "right diagonal = /"
    },
    {
      "lineno": 18,
      "line": ""
    },
    {
      "lineno": 19,
      "line": "On a chessboard vertical movement could be the rows and horizontal movement could be"
    },
    {
      "lineno": 20,
      "line": "the columns."
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 22,
      "line": "In programming we can use an array, and in this array each index could be the rows and"
    },
    {
      "lineno": 23,
      "line": "each value in the array could be the column. For example:"
    },
    {
      "lineno": 24,
      "line": ""
    },
    {
      "lineno": 25,
      "line": "    . Q . .     We have this chessboard with one queen in each column and each queen"
    },
    {
      "lineno": 26,
      "line": "    . . . Q     can't attack to each other."
    },
    {
      "lineno": 27,
      "line": "    Q . . .     The array for this example would look like this: [1, 3, 0, 2]"
    },
    {
      "lineno": 28,
      "line": "    . . Q ."
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": "So if we use an array and we verify that each value in the array is different to each"
    },
    {
      "lineno": 31,
      "line": "other we know that at least the queens can't attack each other in horizontal and"
    },
    {
      "lineno": 32,
      "line": "vertical."
    },
    {
      "lineno": 33,
      "line": ""
    },
    {
      "lineno": 34,
      "line": "At this point we have it halfway completed and we will treat the chessboard as a"
    },
    {
      "lineno": 35,
      "line": "Cartesian plane.  Hereinafter we are going to remember basic math, so in the school we"
    },
    {
      "lineno": 36,
      "line": "learned this formula:"
    },
    {
      "lineno": 37,
      "line": ""
    },
    {
      "lineno": 38,
      "line": "    Slope of a line:"
    },
    {
      "lineno": 39,
      "line": ""
    },
    {
      "lineno": 40,
      "line": "           y2 - y1"
    },
    {
      "lineno": 41,
      "line": "     m = ----------"
    },
    {
      "lineno": 42,
      "line": "          x2 - x1"
    },
    {
      "lineno": 43,
      "line": ""
    },
    {
      "lineno": 44,
      "line": "This formula allow us to get the slope. For the angles 45ยบ (right diagonal) and 135ยบ"
    },
    {
      "lineno": 45,
      "line": "(left diagonal) this formula gives us m = 1, and m = -1 respectively."
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 47,
      "line": "See::"
    },
    {
      "lineno": 48,
      "line": "https://www.enotes.com/homework-help/write-equation-line-that-hits-origin-45-degree-1474860"
    },
    {
      "lineno": 49,
      "line": ""
    },
    {
      "lineno": 50,
      "line": "Then we have this other formula:"
    },
    {
      "lineno": 51,
      "line": ""
    },
    {
      "lineno": 52,
      "line": "Slope intercept:"
    },
    {
      "lineno": 53,
      "line": ""
    },
    {
      "lineno": 54,
      "line": "y = mx + b"
    },
    {
      "lineno": 55,
      "line": ""
    },
    {
      "lineno": 56,
      "line": "b is where the line crosses the Y axis (to get more information see:"
    },
    {
      "lineno": 57,
      "line": "https://www.mathsisfun.com/y_intercept.html), if we change the formula to solve for b"
    },
    {
      "lineno": 58,
      "line": "we would have:"
    },
    {
      "lineno": 59,
      "line": ""
    },
    {
      "lineno": 60,
      "line": "y - mx = b"
    },
    {
      "lineno": 61,
      "line": ""
    },
    {
      "lineno": 62,
      "line": "And since we already have the m values for the angles 45ยบ and 135ยบ, this formula would"
    },
    {
      "lineno": 63,
      "line": "look like this:"
    },
    {
      "lineno": 64,
      "line": ""
    },
    {
      "lineno": 65,
      "line": "45ยบ: y - (1)x = b"
    },
    {
      "lineno": 66,
      "line": "45ยบ: y - x = b"
    },
    {
      "lineno": 67,
      "line": ""
    },
    {
      "lineno": 68,
      "line": "135ยบ: y - (-1)x = b"
    },
    {
      "lineno": 69,
      "line": "135ยบ: y + x = b"
    },
    {
      "lineno": 70,
      "line": ""
    },
    {
      "lineno": 71,
      "line": "y = row"
    },
    {
      "lineno": 72,
      "line": "x = column"
    },
    {
      "lineno": 73,
      "line": ""
    },
    {
      "lineno": 74,
      "line": "Applying these two formulas we can check if a queen in some position is being attacked"
    },
    {
      "lineno": 75,
      "line": "for another one or vice versa."
    },
    {
      "lineno": 76,
      "line": ""
    },
    {
      "lineno": 77,
      "line": "\"\"\""
    },
    {
      "lineno": 78,
      "line": ""
    },
    {
      "lineno": 79,
      "line": "from __future__ import annotations"
    },
    {
      "lineno": 80,
      "line": ""
    },
    {
      "lineno": 81,
      "line": ""
    },
    {
      "lineno": 139,
      "line": ""
    },
    {
      "lineno": 140,
      "line": ""
    },
    {
      "lineno": 152,
      "line": ""
    },
    {
      "lineno": 153,
      "line": ""
    },
    {
      "lineno": 154,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 155,
      "line": "    import doctest"
    },
    {
      "lineno": 156,
      "line": ""
    },
    {
      "lineno": 157,
      "line": "    doctest.testmod()"
    },
    {
      "lineno": 158,
      "line": "    n_queens_solution(4)"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 154,
      "end_line": 158,
      "label": "    \"Executing the test cases\"}"
    }
  ]
}