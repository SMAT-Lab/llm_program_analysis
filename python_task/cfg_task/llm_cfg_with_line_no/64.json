{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 93,
  "functions": [
    {
      "name": "generate_all_subsequences",
      "type": "function",
      "start_line": 14,
      "end_line": 15,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 14,
          "line": "def generate_all_subsequences(sequence: list[Any]) -> None:"
        },
        {
          "lineno": 15,
          "line": "    create_state_space_tree(sequence, [], 0)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 14,
          "end_line": 14,
          "label": "def generate_all_subsequences(sequence: list[Any]) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 15,
              "end_line": 15,
              "label": "create_state_space_tree(sequence, [], 0)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "create_state_space_tree",
      "type": "function",
      "start_line": 18,
      "end_line": 84,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 18,
          "line": "def create_state_space_tree("
        },
        {
          "lineno": 19,
          "line": "    sequence: list[Any], current_subsequence: list[Any], index: int"
        },
        {
          "lineno": 20,
          "line": ") -> None:"
        },
        {
          "lineno": 21,
          "line": "    \"\"\""
        },
        {
          "lineno": 22,
          "line": "    Creates a state space tree to iterate through each branch using DFS."
        },
        {
          "lineno": 23,
          "line": "    We know that each state has exactly two children."
        },
        {
          "lineno": 24,
          "line": "    It terminates when it reaches the end of the given sequence."
        },
        {
          "lineno": 25,
          "line": ""
        },
        {
          "lineno": 26,
          "line": "    :param sequence: The input sequence for which subsequences are generated."
        },
        {
          "lineno": 27,
          "line": "    :param current_subsequence: The current subsequence being built."
        },
        {
          "lineno": 28,
          "line": "    :param index: The current index in the sequence."
        },
        {
          "lineno": 29,
          "line": ""
        },
        {
          "lineno": 30,
          "line": "    Example:"
        },
        {
          "lineno": 31,
          "line": "    >>> sequence = [3, 2, 1]"
        },
        {
          "lineno": 32,
          "line": "    >>> current_subsequence = []"
        },
        {
          "lineno": 33,
          "line": "    >>> create_state_space_tree(sequence, current_subsequence, 0)"
        },
        {
          "lineno": 34,
          "line": "    []"
        },
        {
          "lineno": 35,
          "line": "    [1]"
        },
        {
          "lineno": 36,
          "line": "    [2]"
        },
        {
          "lineno": 37,
          "line": "    [2, 1]"
        },
        {
          "lineno": 38,
          "line": "    [3]"
        },
        {
          "lineno": 39,
          "line": "    [3, 1]"
        },
        {
          "lineno": 40,
          "line": "    [3, 2]"
        },
        {
          "lineno": 41,
          "line": "    [3, 2, 1]"
        },
        {
          "lineno": 42,
          "line": ""
        },
        {
          "lineno": 43,
          "line": "    >>> sequence = [\"A\", \"B\"]"
        },
        {
          "lineno": 44,
          "line": "    >>> current_subsequence = []"
        },
        {
          "lineno": 45,
          "line": "    >>> create_state_space_tree(sequence, current_subsequence, 0)"
        },
        {
          "lineno": 46,
          "line": "    []"
        },
        {
          "lineno": 47,
          "line": "    ['B']"
        },
        {
          "lineno": 48,
          "line": "    ['A']"
        },
        {
          "lineno": 49,
          "line": "    ['A', 'B']"
        },
        {
          "lineno": 50,
          "line": ""
        },
        {
          "lineno": 51,
          "line": "    >>> sequence = []"
        },
        {
          "lineno": 52,
          "line": "    >>> current_subsequence = []"
        },
        {
          "lineno": 53,
          "line": "    >>> create_state_space_tree(sequence, current_subsequence, 0)"
        },
        {
          "lineno": 54,
          "line": "    []"
        },
        {
          "lineno": 55,
          "line": ""
        },
        {
          "lineno": 56,
          "line": "    >>> sequence = [1, 2, 3, 4]"
        },
        {
          "lineno": 57,
          "line": "    >>> current_subsequence = []"
        },
        {
          "lineno": 58,
          "line": "    >>> create_state_space_tree(sequence, current_subsequence, 0)"
        },
        {
          "lineno": 59,
          "line": "    []"
        },
        {
          "lineno": 60,
          "line": "    [4]"
        },
        {
          "lineno": 61,
          "line": "    [3]"
        },
        {
          "lineno": 62,
          "line": "    [3, 4]"
        },
        {
          "lineno": 63,
          "line": "    [2]"
        },
        {
          "lineno": 64,
          "line": "    [2, 4]"
        },
        {
          "lineno": 65,
          "line": "    [2, 3]"
        },
        {
          "lineno": 66,
          "line": "    [2, 3, 4]"
        },
        {
          "lineno": 67,
          "line": "    [1]"
        },
        {
          "lineno": 68,
          "line": "    [1, 4]"
        },
        {
          "lineno": 69,
          "line": "    [1, 3]"
        },
        {
          "lineno": 70,
          "line": "    [1, 3, 4]"
        },
        {
          "lineno": 71,
          "line": "    [1, 2]"
        },
        {
          "lineno": 72,
          "line": "    [1, 2, 4]"
        },
        {
          "lineno": 73,
          "line": "    [1, 2, 3]"
        },
        {
          "lineno": 74,
          "line": "    [1, 2, 3, 4]"
        },
        {
          "lineno": 75,
          "line": "    \"\"\""
        },
        {
          "lineno": 76,
          "line": ""
        },
        {
          "lineno": 77,
          "line": "    if index == len(sequence):"
        },
        {
          "lineno": 78,
          "line": "        print(current_subsequence)"
        },
        {
          "lineno": 79,
          "line": "        return"
        },
        {
          "lineno": 80,
          "line": ""
        },
        {
          "lineno": 81,
          "line": "    create_state_space_tree(sequence, current_subsequence, index + 1)"
        },
        {
          "lineno": 82,
          "line": "    current_subsequence.append(sequence[index])"
        },
        {
          "lineno": 83,
          "line": "    create_state_space_tree(sequence, current_subsequence, index + 1)"
        },
        {
          "lineno": 84,
          "line": "    current_subsequence.pop()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 18,
          "end_line": 20,
          "label": "def create_state_space_tree(\n    sequence: list[Any], current_subsequence: list[Any], index: int\n) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 21,
              "end_line": 75,
              "label": "\"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 77,
                  "end_line": 79,
                  "label": "if index == len(sequence):\n    print(current_subsequence)\n    return",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 81,
                      "end_line": 84,
                      "label": "create_state_space_tree(sequence, current_subsequence, index + 1)\ncurrent_subsequence.append(sequence[index])\ncreate_state_space_tree(sequence, current_subsequence, index + 1)\ncurrent_subsequence.pop()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "In this problem, we want to determine all possible subsequences"
    },
    {
      "lineno": 3,
      "line": "of the given sequence. We use backtracking to solve this problem."
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "Time complexity: O(2^n),"
    },
    {
      "lineno": 6,
      "line": "where n denotes the length of the given sequence."
    },
    {
      "lineno": 7,
      "line": "\"\"\""
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "from __future__ import annotations"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": "from typing import Any"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 85,
      "line": ""
    },
    {
      "lineno": 86,
      "line": ""
    },
    {
      "lineno": 87,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 88,
      "line": "    seq: list[Any] = [1, 2, 3]"
    },
    {
      "lineno": 89,
      "line": "    generate_all_subsequences(seq)"
    },
    {
      "lineno": 90,
      "line": ""
    },
    {
      "lineno": 91,
      "line": "    seq.clear()"
    },
    {
      "lineno": 92,
      "line": "    seq.extend([\"A\", \"B\", \"C\"])"
    },
    {
      "lineno": 93,
      "line": "    generate_all_subsequences(seq)"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "\"\"\"\nIn this problem, we want to determine all possible subsequences\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(2^n),\nwhere n denotes the length of the given sequence.\n\"\"\"",
      "successors": [
        {
          "id": 2,
          "start_line": 9,
          "end_line": 9,
          "label": "from __future__ import annotations",
          "successors": [
            {
              "id": 3,
              "start_line": 11,
              "end_line": 11,
              "label": "from typing import Any",
              "successors": [
                {
                  "id": 4,
                  "start_line": 87,
                  "end_line": 87,
                  "label": "if __name__ == \"__main__\":",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 88,
                      "end_line": 89,
                      "label": "seq: list[Any] = [1, 2, 3]\ngenerate_all_subsequences(seq)",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 91,
                          "end_line": 93,
                          "label": "seq.clear()\nseq.extend([\"A\", \"B\", \"C\"])\ngenerate_all_subsequences(seq)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}