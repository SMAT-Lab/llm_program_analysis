{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 79,
  "functions": [
    {
      "name": "test_validate_url",
      "type": "function",
      "start_line": 6,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "def test_validate_url():"
        },
        {
          "lineno": 7,
          "line": "    # Rejected IP ranges"
        },
        {
          "lineno": 8,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 9,
          "line": "        validate_url(\"localhost\", [])"
        },
        {
          "lineno": 10,
          "line": ""
        },
        {
          "lineno": 11,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 12,
          "line": "        validate_url(\"192.168.1.1\", [])"
        },
        {
          "lineno": 13,
          "line": ""
        },
        {
          "lineno": 14,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 15,
          "line": "        validate_url(\"127.0.0.1\", [])"
        },
        {
          "lineno": 16,
          "line": ""
        },
        {
          "lineno": 17,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 18,
          "line": "        validate_url(\"0.0.0.0\", [])"
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 20,
          "line": "    # Normal URLs"
        },
        {
          "lineno": 21,
          "line": "    assert validate_url(\"google.com/a?b=c\", []) == \"http://google.com/a?b=c\""
        },
        {
          "lineno": 22,
          "line": "    assert validate_url(\"github.com?key=!@!@\", []) == \"http://github.com?key=!@!@\""
        },
        {
          "lineno": 23,
          "line": ""
        },
        {
          "lineno": 24,
          "line": "    # Scheme Enforcement"
        },
        {
          "lineno": 25,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 26,
          "line": "        validate_url(\"ftp://example.com\", [])"
        },
        {
          "lineno": 27,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 28,
          "line": "        validate_url(\"file://example.com\", [])"
        },
        {
          "lineno": 29,
          "line": ""
        },
        {
          "lineno": 30,
          "line": "    # International domain that converts to punycode - should be allowed if public"
        },
        {
          "lineno": 31,
          "line": "    assert validate_url(\"http://xn--exmple-cua.com\", []) == \"http://xn--exmple-cua.com\""
        },
        {
          "lineno": 32,
          "line": "    # If the domain fails IDNA encoding or is invalid, it should raise an error"
        },
        {
          "lineno": 33,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 34,
          "line": "        validate_url(\"http://exa◌mple.com\", [])"
        },
        {
          "lineno": 35,
          "line": ""
        },
        {
          "lineno": 36,
          "line": "    # IPv6 Addresses"
        },
        {
          "lineno": 37,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 38,
          "line": "        validate_url(\"::1\", [])  # IPv6 loopback should be blocked"
        },
        {
          "lineno": 39,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 40,
          "line": "        validate_url(\"http://[::1]\", [])  # IPv6 loopback in URL form"
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 42,
          "line": "    # Suspicious Characters in Hostname"
        },
        {
          "lineno": 43,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 44,
          "line": "        validate_url(\"http://example_underscore.com\", [])"
        },
        {
          "lineno": 45,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 46,
          "line": "        validate_url(\"http://exa mple.com\", [])  # Space in hostname"
        },
        {
          "lineno": 47,
          "line": ""
        },
        {
          "lineno": 48,
          "line": "    # Malformed URLs"
        },
        {
          "lineno": 49,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 50,
          "line": "        validate_url(\"http://\", [])  # No hostname"
        },
        {
          "lineno": 51,
          "line": "    with pytest.raises(ValueError):"
        },
        {
          "lineno": 52,
          "line": "        validate_url(\"://missing-scheme\", [])  # Missing proper scheme"
        },
        {
          "lineno": 53,
          "line": ""
        },
        {
          "lineno": 54,
          "line": "    # Trusted Origins"
        },
        {
          "lineno": 55,
          "line": "    trusted = [\"internal-api.company.com\", \"10.0.0.5\"]"
        },
        {
          "lineno": 56,
          "line": "    assert ("
        },
        {
          "lineno": 57,
          "line": "        validate_url(\"internal-api.company.com\", trusted)"
        },
        {
          "lineno": 58,
          "line": "        == \"http://internal-api.company.com\""
        },
        {
          "lineno": 59,
          "line": "    )"
        },
        {
          "lineno": 60,
          "line": "    assert validate_url(\"10.0.0.5\", [\"10.0.0.5\"]) == \"http://10.0.0.5\""
        },
        {
          "lineno": 61,
          "line": ""
        },
        {
          "lineno": 62,
          "line": "    # Special Characters in Path or Query"
        },
        {
          "lineno": 63,
          "line": "    assert ("
        },
        {
          "lineno": 64,
          "line": "        validate_url(\"example.com/path%20with%20spaces\", [])"
        },
        {
          "lineno": 65,
          "line": "        == \"http://example.com/path%20with%20spaces\""
        },
        {
          "lineno": 66,
          "line": "    )"
        },
        {
          "lineno": 67,
          "line": ""
        },
        {
          "lineno": 68,
          "line": "    # Backslashes should be replaced with forward slashes"
        },
        {
          "lineno": 69,
          "line": "    assert ("
        },
        {
          "lineno": 70,
          "line": "        validate_url(\"http://example.com\\\\backslash\", [])"
        },
        {
          "lineno": 71,
          "line": "        == \"http://example.com/backslash\""
        },
        {
          "lineno": 72,
          "line": "    )"
        },
        {
          "lineno": 73,
          "line": ""
        },
        {
          "lineno": 74,
          "line": "    # Check defaulting scheme behavior for valid domains"
        },
        {
          "lineno": 75,
          "line": "    assert validate_url(\"example.com\", []) == \"http://example.com\""
        },
        {
          "lineno": 76,
          "line": "    assert validate_url(\"https://secure.com\", []) == \"https://secure.com\""
        },
        {
          "lineno": 77,
          "line": ""
        },
        {
          "lineno": 78,
          "line": "    # Non-ASCII Characters in Query/Fragment"
        },
        {
          "lineno": 79,
          "line": "    assert validate_url(\"example.com?param=äöü\", []) == \"http://example.com?param=äöü\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 7,
          "label": "def test_validate_url():\n    # Rejected IP ranges",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 9,
              "label": "with pytest.raises(ValueError):\n        validate_url(\"localhost\", [])",
              "successors": [
                {
                  "id": 3,
                  "start_line": 11,
                  "end_line": 12,
                  "label": "with pytest.raises(ValueError):\n        validate_url(\"192.168.1.1\", [])",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 14,
                      "end_line": 15,
                      "label": "with pytest.raises(ValueError):\n        validate_url(\"127.0.0.1\", [])",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 17,
                          "end_line": 18,
                          "label": "with pytest.raises(ValueError):\n        validate_url(\"0.0.0.0\", [])",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 20,
                              "end_line": 22,
                              "label": "# Normal URLs\n    assert validate_url(\"google.com/a?b=c\", []) == \"http://google.com/a?b=c\"\n    assert validate_url(\"github.com?key=!@!@\", []) == \"http://github.com?key=!@!@\"",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 24,
                                  "end_line": 26,
                                  "label": "# Scheme Enforcement\n    with pytest.raises(ValueError):\n        validate_url(\"ftp://example.com\", [])",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 27,
                                      "end_line": 28,
                                      "label": "with pytest.raises(ValueError):\n        validate_url(\"file://example.com\", [])",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 30,
                                          "end_line": 31,
                                          "label": "# International domain that converts to punycode - should be allowed if public\n    assert validate_url(\"http://xn--exmple-cua.com\", []) == \"http://xn--exmple-cua.com\"",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 32,
                                              "end_line": 34,
                                              "label": "# If the domain fails IDNA encoding or is invalid, it should raise an error\n    with pytest.raises(ValueError):\n        validate_url(\"http://exa◌mple.com\", [])",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 36,
                                                  "end_line": 38,
                                                  "label": "# IPv6 Addresses\n    with pytest.raises(ValueError):\n        validate_url(\"::1\", [])  # IPv6 loopback should be blocked",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "start_line": 39,
                                                      "end_line": 40,
                                                      "label": "with pytest.raises(ValueError):\n        validate_url(\"http://[::1]\", [])  # IPv6 loopback in URL form",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "start_line": 42,
                                                          "end_line": 44,
                                                          "label": "# Suspicious Characters in Hostname\n    with pytest.raises(ValueError):\n        validate_url(\"http://example_underscore.com\", [])",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "start_line": 45,
                                                              "end_line": 46,
                                                              "label": "with pytest.raises(ValueError):\n        validate_url(\"http://exa mple.com\", [])  # Space in hostname",
                                                              "successors": [
                                                                {
                                                                  "id": 15,
                                                                  "start_line": 48,
                                                                  "end_line": 50,
                                                                  "label": "# Malformed URLs\n    with pytest.raises(ValueError):\n        validate_url(\"http://\", [])  # No hostname",
                                                                  "successors": [
                                                                    {
                                                                      "id": 16,
                                                                      "start_line": 51,
                                                                      "end_line": 52,
                                                                      "label": "with pytest.raises(ValueError):\n        validate_url(\"://missing-scheme\", [])  # Missing proper scheme",
                                                                      "successors": [
                                                                        {
                                                                          "id": 17,
                                                                          "start_line": 54,
                                                                          "end_line": 55,
                                                                          "label": "# Trusted Origins\n    trusted = [\"internal-api.company.com\", \"10.0.0.5\"]",
                                                                          "successors": [
                                                                            {
                                                                              "id": 18,
                                                                              "start_line": 56,
                                                                              "end_line": 59,
                                                                              "label": "assert (\n        validate_url(\"internal-api.company.com\", trusted)\n        == \"http://internal-api.company.com\"\n    )",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 19,
                                                                                  "start_line": 60,
                                                                                  "end_line": 60,
                                                                                  "label": "assert validate_url(\"10.0.0.5\", [\"10.0.0.5\"]) == \"http://10.0.0.5\"",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 20,
                                                                                      "start_line": 62,
                                                                                      "end_line": 65,
                                                                                      "label": "# Special Characters in Path or Query\n    assert (\n        validate_url(\"example.com/path%20with%20spaces\", [])\n        == \"http://example.com/path%20with%20spaces\"",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 21,
                                                                                          "start_line": 68,
                                                                                          "end_line": 71,
                                                                                          "label": "# Backslashes should be replaced with forward slashes\n    assert (\n        validate_url(\"http://example.com\\\\backslash\", [])\n        == \"http://example.com/backslash\"",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 22,
                                                                                              "start_line": 74,
                                                                                              "end_line": 76,
                                                                                              "label": "# Check defaulting scheme behavior for valid domains\n    assert validate_url(\"example.com\", []) == \"http://example.com\"\n    assert validate_url(\"https://secure.com\", []) == \"https://secure.com\"",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 23,
                                                                                                  "start_line": 78,
                                                                                                  "end_line": 79,
                                                                                                  "label": "# Non-ASCII Characters in Query/Fragment\n    assert validate_url(\"example.com?param=\n  \", []) == \"http://example.com?param=\\u00e4\\u00f6\\u00fc\"",
                                                                                                  "successors": []
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import pytest"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from backend.util.request import validate_url"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "import pytest",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 3,
          "label": "from backend.util.request import validate_url",
          "successors": []
        }
      ]
    }
  ]
}