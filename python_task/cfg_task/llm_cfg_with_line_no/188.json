{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 264,
  "functions": [
    {
      "name": "setup_prisma",
      "type": "function",
      "start_line": 13,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 13,
          "line": "async def setup_prisma():"
        },
        {
          "lineno": 14,
          "line": "    # Don't register client if already registered"
        },
        {
          "lineno": 15,
          "line": "    try:"
        },
        {
          "lineno": 16,
          "line": "        Prisma()"
        },
        {
          "lineno": 17,
          "line": "    except prisma.errors.ClientAlreadyRegisteredError:"
        },
        {
          "lineno": 18,
          "line": "        pass"
        },
        {
          "lineno": 19,
          "line": "    yield"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 13,
          "end_line": 14,
          "label": "async def setup_prisma():\n    # Don't register client if already registered",
          "successors": [
            {
              "id": 2,
              "start_line": 15,
              "end_line": 16,
              "label": "try:\n        Prisma()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 17,
                  "end_line": 18,
                  "label": "except prisma.errors.ClientAlreadyRegisteredError:\n        pass",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 19,
                      "end_line": 19,
                      "label": "yield",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 19,
                  "end_line": 19,
                  "label": "yield",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_store_agents",
      "type": "function",
      "start_line": 23,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 23,
          "line": "async def test_get_store_agents(mocker):"
        },
        {
          "lineno": 24,
          "line": "    # Mock data"
        },
        {
          "lineno": 25,
          "line": "    mock_agents = ["
        },
        {
          "lineno": 26,
          "line": "        prisma.models.StoreAgent("
        },
        {
          "lineno": 27,
          "line": "            listing_id=\"test-id\","
        },
        {
          "lineno": 28,
          "line": "            storeListingVersionId=\"version123\","
        },
        {
          "lineno": 29,
          "line": "            slug=\"test-agent\","
        },
        {
          "lineno": 30,
          "line": "            agent_name=\"Test Agent\","
        },
        {
          "lineno": 31,
          "line": "            agent_video=None,"
        },
        {
          "lineno": 32,
          "line": "            agent_image=[\"image.jpg\"],"
        },
        {
          "lineno": 33,
          "line": "            featured=False,"
        },
        {
          "lineno": 34,
          "line": "            creator_username=\"creator\","
        },
        {
          "lineno": 35,
          "line": "            creator_avatar=\"avatar.jpg\","
        },
        {
          "lineno": 36,
          "line": "            sub_heading=\"Test heading\","
        },
        {
          "lineno": 37,
          "line": "            description=\"Test description\","
        },
        {
          "lineno": 38,
          "line": "            categories=[],"
        },
        {
          "lineno": 39,
          "line": "            runs=10,"
        },
        {
          "lineno": 40,
          "line": "            rating=4.5,"
        },
        {
          "lineno": 41,
          "line": "            versions=[\"1.0\"],"
        },
        {
          "lineno": 42,
          "line": "            updated_at=datetime.now(),"
        },
        {
          "lineno": 43,
          "line": "        )"
        },
        {
          "lineno": 44,
          "line": "    ]"
        },
        {
          "lineno": 45,
          "line": ""
        },
        {
          "lineno": 46,
          "line": "    # Mock prisma calls"
        },
        {
          "lineno": 47,
          "line": "    mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")"
        },
        {
          "lineno": 48,
          "line": "    mock_store_agent.return_value.find_many = mocker.AsyncMock(return_value=mock_agents)"
        },
        {
          "lineno": 49,
          "line": "    mock_store_agent.return_value.count = mocker.AsyncMock(return_value=1)"
        },
        {
          "lineno": 50,
          "line": ""
        },
        {
          "lineno": 51,
          "line": "    # Call function"
        },
        {
          "lineno": 52,
          "line": "    result = await db.get_store_agents()"
        },
        {
          "lineno": 53,
          "line": ""
        },
        {
          "lineno": 54,
          "line": "    # Verify results"
        },
        {
          "lineno": 55,
          "line": "    assert len(result.agents) == 1"
        },
        {
          "lineno": 56,
          "line": "    assert result.agents[0].slug == \"test-agent\""
        },
        {
          "lineno": 57,
          "line": "    assert result.pagination.total_items == 1"
        },
        {
          "lineno": 58,
          "line": ""
        },
        {
          "lineno": 59,
          "line": "    # Verify mocks called correctly"
        },
        {
          "lineno": 60,
          "line": "    mock_store_agent.return_value.find_many.assert_called_once()"
        },
        {
          "lineno": 61,
          "line": "    mock_store_agent.return_value.count.assert_called_once()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 23,
          "end_line": 44,
          "label": "async def test_get_store_agents(mocker):\n    # Mock data\n    mock_agents = [\n        prisma.models.StoreAgent(\n            listing_id=\"test-id\",\n            storeListingVersionId=\"version123\",\n            slug=\"test-agent\",\n            agent_name=\"Test Agent\",\n            agent_video=None,\n            agent_image=[\"image.jpg\"],\n            featured=False,\n            creator_username=\"creator\",\n            creator_avatar=\"avatar.jpg\",\n            sub_heading=\"Test heading\",\n            description=\"Test description\",\n            categories=[],\n            runs=10,\n            rating=4.5,\n            versions=[\"1.0\"],\n            updated_at=datetime.now(),\n        )\n    ]",
          "successors": [
            {
              "id": 2,
              "start_line": 46,
              "end_line": 49,
              "label": "# Mock prisma calls\n    mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")\n    mock_store_agent.return_value.find_many = mocker.AsyncMock(return_value=mock_agents)\n    mock_store_agent.return_value.count = mocker.AsyncMock(return_value=1)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 51,
                  "end_line": 52,
                  "label": "# Call function\n    result = await db.get_store_agents()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 54,
                      "end_line": 57,
                      "label": "# Verify results\n    assert len(result.agents) == 1\n    assert result.agents[0].slug == \"test-agent\"\n    assert result.pagination.total_items == 1",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 59,
                          "end_line": 61,
                          "label": "# Verify mocks called correctly\n    mock_store_agent.return_value.find_many.assert_called_once()\n    mock_store_agent.return_value.count.assert_called_once()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_store_agent_details",
      "type": "function",
      "start_line": 65,
      "end_line": 137,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 65,
          "line": "async def test_get_store_agent_details(mocker):"
        },
        {
          "lineno": 66,
          "line": "    # Mock data"
        },
        {
          "lineno": 67,
          "line": "    mock_agent = prisma.models.StoreAgent("
        },
        {
          "lineno": 68,
          "line": "        listing_id=\"test-id\","
        },
        {
          "lineno": 69,
          "line": "        storeListingVersionId=\"version123\","
        },
        {
          "lineno": 70,
          "line": "        slug=\"test-agent\","
        },
        {
          "lineno": 71,
          "line": "        agent_name=\"Test Agent\","
        },
        {
          "lineno": 72,
          "line": "        agent_video=\"video.mp4\","
        },
        {
          "lineno": 73,
          "line": "        agent_image=[\"image.jpg\"],"
        },
        {
          "lineno": 74,
          "line": "        featured=False,"
        },
        {
          "lineno": 75,
          "line": "        creator_username=\"creator\","
        },
        {
          "lineno": 76,
          "line": "        creator_avatar=\"avatar.jpg\","
        },
        {
          "lineno": 77,
          "line": "        sub_heading=\"Test heading\","
        },
        {
          "lineno": 78,
          "line": "        description=\"Test description\","
        },
        {
          "lineno": 79,
          "line": "        categories=[\"test\"],"
        },
        {
          "lineno": 80,
          "line": "        runs=10,"
        },
        {
          "lineno": 81,
          "line": "        rating=4.5,"
        },
        {
          "lineno": 82,
          "line": "        versions=[\"1.0\"],"
        },
        {
          "lineno": 83,
          "line": "        updated_at=datetime.now(),"
        },
        {
          "lineno": 84,
          "line": "    )"
        },
        {
          "lineno": 85,
          "line": ""
        },
        {
          "lineno": 86,
          "line": "    # Mock prisma call"
        },
        {
          "lineno": 87,
          "line": "    mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")"
        },
        {
          "lineno": 88,
          "line": "    mock_store_agent.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)"
        },
        {
          "lineno": 89,
          "line": ""
        },
        {
          "lineno": 90,
          "line": "    # Call function"
        },
        {
          "lineno": 91,
          "line": "    result = await db.get_store_agent_details(\"creator\", \"test-agent\")"
        },
        {
          "lineno": 92,
          "line": ""
        },
        {
          "lineno": 93,
          "line": "    # Verify results"
        },
        {
          "lineno": 94,
          "line": "    assert result.slug == \"test-agent\""
        },
        {
          "lineno": 95,
          "line": "    assert result.agent_name == \"Test Agent\""
        },
        {
          "lineno": 96,
          "line": ""
        },
        {
          "lineno": 97,
          "line": "    # Verify mock called correctly"
        },
        {
          "lineno": 98,
          "line": "    mock_store_agent.return_value.find_first.assert_called_once_with("
        },
        {
          "lineno": 99,
          "line": "        where={\"creator_username\": \"creator\", \"slug\": \"test-agent\"}"
        },
        {
          "lineno": 100,
          "line": "    )"
        },
        {
          "lineno": 101,
          "line": ""
        },
        {
          "lineno": 102,
          "line": ""
        },
        {
          "lineno": 103,
          "line": "@pytest.mark.asyncio"
        },
        {
          "lineno": 104,
          "line": "async def test_get_store_creator_details(mocker):"
        },
        {
          "lineno": 105,
          "line": "    # Mock data"
        },
        {
          "lineno": 106,
          "line": "    mock_creator_data = prisma.models.Creator("
        },
        {
          "lineno": 107,
          "line": "        name=\"Test Creator\","
        },
        {
          "lineno": 108,
          "line": "        username=\"creator\","
        },
        {
          "lineno": 109,
          "line": "        description=\"Test description\","
        },
        {
          "lineno": 110,
          "line": "        links=[\"link1\"],"
        },
        {
          "lineno": 111,
          "line": "        avatar_url=\"avatar.jpg\","
        },
        {
          "lineno": 112,
          "line": "        num_agents=1,"
        },
        {
          "lineno": 113,
          "line": "        agent_rating=4.5,"
        },
        {
          "lineno": 114,
          "line": "        agent_runs=10,"
        },
        {
          "lineno": 115,
          "line": "        top_categories=[\"test\"],"
        },
        {
          "lineno": 116,
          "line": "        is_featured=False,"
        },
        {
          "lineno": 117,
          "line": "    )"
        },
        {
          "lineno": 118,
          "line": ""
        },
        {
          "lineno": 119,
          "line": "    # Mock prisma call"
        },
        {
          "lineno": 120,
          "line": "    mock_creator = mocker.patch(\"prisma.models.Creator.prisma\")"
        },
        {
          "lineno": 121,
          "line": "    mock_creator.return_value.find_unique = mocker.AsyncMock()"
        },
        {
          "lineno": 122,
          "line": "    # Configure the mock to return values that will pass validation"
        },
        {
          "lineno": 123,
          "line": "    mock_creator.return_value.find_unique.return_value = mock_creator_data"
        },
        {
          "lineno": 124,
          "line": ""
        },
        {
          "lineno": 125,
          "line": "    # Call function"
        },
        {
          "lineno": 126,
          "line": "    result = await db.get_store_creator_details(\"creator\")"
        },
        {
          "lineno": 127,
          "line": ""
        },
        {
          "lineno": 128,
          "line": "    # Verify results"
        },
        {
          "lineno": 129,
          "line": "    assert result.username == \"creator\""
        },
        {
          "lineno": 130,
          "line": "    assert result.name == \"Test Creator\""
        },
        {
          "lineno": 131,
          "line": "    assert result.description == \"Test description\""
        },
        {
          "lineno": 132,
          "line": "    assert result.avatar_url == \"avatar.jpg\""
        },
        {
          "lineno": 133,
          "line": ""
        },
        {
          "lineno": 134,
          "line": "    # Verify mock called correctly"
        },
        {
          "lineno": 135,
          "line": "    mock_creator.return_value.find_unique.assert_called_once_with("
        },
        {
          "lineno": 136,
          "line": "        where={\"username\": \"creator\"}"
        },
        {
          "lineno": 137,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 65,
          "end_line": 84,
          "label": "async def test_get_store_agent_details(mocker):\n    # Mock data\n    mock_agent = prisma.models.StoreAgent(\n        listing_id=\"test-id\",\n        storeListingVersionId=\"version123\",\n        slug=\"test-agent\",\n        agent_name=\"Test Agent\",\n        agent_video=\"video.mp4\",\n        agent_image=[\"image.jpg\"],\n        featured=False,\n        creator_username=\"creator\",\n        creator_avatar=\"avatar.jpg\",\n        sub_heading=\"Test heading\",\n        description=\"Test description\",\n        categories=[\"test\"],\n        runs=10,\n        rating=4.5,\n        versions=[\"1.0\"],\n        updated_at=datetime.now(),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 86,
              "end_line": 88,
              "label": "# Mock prisma call\n    mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")\n    mock_store_agent.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 90,
                  "end_line": 91,
                  "label": "# Call function\n    result = await db.get_store_agent_details(\"creator\", \"test-agent\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 93,
                      "end_line": 95,
                      "label": "# Verify results\n    assert result.slug == \"test-agent\"\n    assert result.agent_name == \"Test Agent\"",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 97,
                          "end_line": 100,
                          "label": "# Verify mock called correctly\n    mock_store_agent.return_value.find_first.assert_called_once_with(\n        where={\"creator_username\": \"creator\", \"slug\": \"test-agent\"}\n    )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 6,
          "start_line": 103,
          "end_line": 117,
          "label": "@pytest.mark.asyncio\nasync def test_get_store_creator_details(mocker):\n    # Mock data\n    mock_creator_data = prisma.models.Creator(\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatar_url=\"avatar.jpg\",\n        num_agents=1,\n        agent_rating=4.5,\n        agent_runs=10,\n        top_categories=[\"test\"],\n        is_featured=False,\n    )",
          "successors": [
            {
              "id": 7,
              "start_line": 119,
              "end_line": 123,
              "label": "# Mock prisma call\n    mock_creator = mocker.patch(\"prisma.models.Creator.prisma\")\n    mock_creator.return_value.find_unique = mocker.AsyncMock()\n    # Configure the mock to return values that will pass validation\n    mock_creator.return_value.find_unique.return_value = mock_creator_data",
              "successors": [
                {
                  "id": 8,
                  "start_line": 125,
                  "end_line": 126,
                  "label": "# Call function\n    result = await db.get_store_creator_details(\"creator\")",
                  "successors": [
                    {
                      "id": 9,
                      "start_line": 128,
                      "end_line": 132,
                      "label": "# Verify results\n    assert result.username == \"creator\"\n    assert result.name == \"Test Creator\"\n    assert result.description == \"Test description\"\n    assert result.avatar_url == \"avatar.jpg\"",
                      "successors": [
                        {
                          "id": 10,
                          "start_line": 134,
                          "end_line": 136,
                          "label": "# Verify mock called correctly\n    mock_creator.return_value.find_unique.assert_called_once_with(\n        where={\"username\": \"creator\"}\n    )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_store_creator_details",
      "type": "function",
      "start_line": 104,
      "end_line": 137,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 104,
          "line": "async def test_get_store_creator_details(mocker):"
        },
        {
          "lineno": 105,
          "line": "    # Mock data"
        },
        {
          "lineno": 106,
          "line": "    mock_creator_data = prisma.models.Creator("
        },
        {
          "lineno": 107,
          "line": "        name=\"Test Creator\","
        },
        {
          "lineno": 108,
          "line": "        username=\"creator\","
        },
        {
          "lineno": 109,
          "line": "        description=\"Test description\","
        },
        {
          "lineno": 110,
          "line": "        links=[\"link1\"],"
        },
        {
          "lineno": 111,
          "line": "        avatar_url=\"avatar.jpg\","
        },
        {
          "lineno": 112,
          "line": "        num_agents=1,"
        },
        {
          "lineno": 113,
          "line": "        agent_rating=4.5,"
        },
        {
          "lineno": 114,
          "line": "        agent_runs=10,"
        },
        {
          "lineno": 115,
          "line": "        top_categories=[\"test\"],"
        },
        {
          "lineno": 116,
          "line": "        is_featured=False,"
        },
        {
          "lineno": 117,
          "line": "    )"
        },
        {
          "lineno": 118,
          "line": ""
        },
        {
          "lineno": 119,
          "line": "    # Mock prisma call"
        },
        {
          "lineno": 120,
          "line": "    mock_creator = mocker.patch(\"prisma.models.Creator.prisma\")"
        },
        {
          "lineno": 121,
          "line": "    mock_creator.return_value.find_unique = mocker.AsyncMock()"
        },
        {
          "lineno": 122,
          "line": "    # Configure the mock to return values that will pass validation"
        },
        {
          "lineno": 123,
          "line": "    mock_creator.return_value.find_unique.return_value = mock_creator_data"
        },
        {
          "lineno": 124,
          "line": ""
        },
        {
          "lineno": 125,
          "line": "    # Call function"
        },
        {
          "lineno": 126,
          "line": "    result = await db.get_store_creator_details(\"creator\")"
        },
        {
          "lineno": 127,
          "line": ""
        },
        {
          "lineno": 128,
          "line": "    # Verify results"
        },
        {
          "lineno": 129,
          "line": "    assert result.username == \"creator\""
        },
        {
          "lineno": 130,
          "line": "    assert result.name == \"Test Creator\""
        },
        {
          "lineno": 131,
          "line": "    assert result.description == \"Test description\""
        },
        {
          "lineno": 132,
          "line": "    assert result.avatar_url == \"avatar.jpg\""
        },
        {
          "lineno": 133,
          "line": ""
        },
        {
          "lineno": 134,
          "line": "    # Verify mock called correctly"
        },
        {
          "lineno": 135,
          "line": "    mock_creator.return_value.find_unique.assert_called_once_with("
        },
        {
          "lineno": 136,
          "line": "        where={\"username\": \"creator\"}"
        },
        {
          "lineno": 137,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 104,
          "end_line": 117,
          "label": "async def test_get_store_creator_details(mocker):\n    # Mock data\n    mock_creator_data = prisma.models.Creator(\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatar_url=\"avatar.jpg\",\n        num_agents=1,\n        agent_rating=4.5,\n        agent_runs=10,\n        top_categories=[\"test\"],\n        is_featured=False,\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 119,
              "end_line": 123,
              "label": "# Mock prisma call\n    mock_creator = mocker.patch(\"prisma.models.Creator.prisma\")\n    mock_creator.return_value.find_unique = mocker.AsyncMock()\n    # Configure the mock to return values that will pass validation\n    mock_creator.return_value.find_unique.return_value = mock_creator_data",
              "successors": [
                {
                  "id": 3,
                  "start_line": 125,
                  "end_line": 126,
                  "label": "# Call function\n    result = await db.get_store_creator_details(\"creator\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 128,
                      "end_line": 132,
                      "label": "# Verify results\n    assert result.username == \"creator\"\n    assert result.name == \"Test Creator\"\n    assert result.description == \"Test description\"\n    assert result.avatar_url == \"avatar.jpg\"",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 134,
                          "end_line": 137,
                          "label": "# Verify mock called correctly\n    mock_creator.return_value.find_unique.assert_called_once_with(\n        where={\"username\": \"creator\"}\n    )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_create_store_submission",
      "type": "function",
      "start_line": 141,
      "end_line": 188,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 141,
          "line": "async def test_create_store_submission(mocker):"
        },
        {
          "lineno": 142,
          "line": "    # Mock data"
        },
        {
          "lineno": 143,
          "line": "    mock_agent = prisma.models.AgentGraph("
        },
        {
          "lineno": 144,
          "line": "        id=\"agent-id\","
        },
        {
          "lineno": 145,
          "line": "        version=1,"
        },
        {
          "lineno": 146,
          "line": "        userId=\"user-id\","
        },
        {
          "lineno": 147,
          "line": "        createdAt=datetime.now(),"
        },
        {
          "lineno": 148,
          "line": "        isActive=True,"
        },
        {
          "lineno": 149,
          "line": "        isTemplate=False,"
        },
        {
          "lineno": 150,
          "line": "    )"
        },
        {
          "lineno": 151,
          "line": ""
        },
        {
          "lineno": 152,
          "line": "    mock_listing = prisma.models.StoreListing("
        },
        {
          "lineno": 153,
          "line": "        id=\"listing-id\","
        },
        {
          "lineno": 154,
          "line": "        createdAt=datetime.now(),"
        },
        {
          "lineno": 155,
          "line": "        updatedAt=datetime.now(),"
        },
        {
          "lineno": 156,
          "line": "        isDeleted=False,"
        },
        {
          "lineno": 157,
          "line": "        isApproved=False,"
        },
        {
          "lineno": 158,
          "line": "        agentId=\"agent-id\","
        },
        {
          "lineno": 159,
          "line": "        agentVersion=1,"
        },
        {
          "lineno": 160,
          "line": "        owningUserId=\"user-id\","
        },
        {
          "lineno": 161,
          "line": "    )"
        },
        {
          "lineno": 162,
          "line": ""
        },
        {
          "lineno": 163,
          "line": "    # Mock prisma calls"
        },
        {
          "lineno": 164,
          "line": "    mock_agent_graph = mocker.patch(\"prisma.models.AgentGraph.prisma\")"
        },
        {
          "lineno": 165,
          "line": "    mock_agent_graph.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)"
        },
        {
          "lineno": 166,
          "line": ""
        },
        {
          "lineno": 167,
          "line": "    mock_store_listing = mocker.patch(\"prisma.models.StoreListing.prisma\")"
        },
        {
          "lineno": 168,
          "line": "    mock_store_listing.return_value.find_first = mocker.AsyncMock(return_value=None)"
        },
        {
          "lineno": 169,
          "line": "    mock_store_listing.return_value.create = mocker.AsyncMock(return_value=mock_listing)"
        },
        {
          "lineno": 170,
          "line": ""
        },
        {
          "lineno": 171,
          "line": "    # Call function"
        },
        {
          "lineno": 172,
          "line": "    result = await db.create_store_submission("
        },
        {
          "lineno": 173,
          "line": "        user_id=\"user-id\","
        },
        {
          "lineno": 174,
          "line": "        agent_id=\"agent-id\","
        },
        {
          "lineno": 175,
          "line": "        agent_version=1,"
        },
        {
          "lineno": 176,
          "line": "        slug=\"test-agent\","
        },
        {
          "lineno": 177,
          "line": "        name=\"Test Agent\","
        },
        {
          "lineno": 178,
          "line": "        description=\"Test description\","
        },
        {
          "lineno": 179,
          "line": "    )"
        },
        {
          "lineno": 180,
          "line": ""
        },
        {
          "lineno": 181,
          "line": "    # Verify results"
        },
        {
          "lineno": 182,
          "line": "    assert result.name == \"Test Agent\""
        },
        {
          "lineno": 183,
          "line": "    assert result.description == \"Test description\""
        },
        {
          "lineno": 184,
          "line": ""
        },
        {
          "lineno": 185,
          "line": "    # Verify mocks called correctly"
        },
        {
          "lineno": 186,
          "line": "    mock_agent_graph.return_value.find_first.assert_called_once()"
        },
        {
          "lineno": 187,
          "line": "    mock_store_listing.return_value.find_first.assert_called_once()"
        },
        {
          "lineno": 188,
          "line": "    mock_store_listing.return_value.create.assert_called_once()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 141,
          "end_line": 170,
          "label": "async def test_create_store_submission(mocker):\n    # Mock data\n    mock_agent = prisma.models.AgentGraph(\n        id=\"agent-id\",\n        version=1,\n        userId=\"user-id\",\n        createdAt=datetime.now(),\n        isActive=True,\n        isTemplate=False,\n    )\n\n    mock_listing = prisma.models.StoreListing(\n        id=\"listing-id\",\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n        isDeleted=False,\n        isApproved=False,\n        agentId=\"agent-id\",\n        agentVersion=1,\n        owningUserId=\"user-id\",\n    )\n\n    # Mock prisma calls\n    mock_agent_graph = mocker.patch(\"prisma.models.AgentGraph.prisma\")\n    mock_agent_graph.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)\n\n    mock_store_listing = mocker.patch(\"prisma.models.StoreListing.prisma\")\n    mock_store_listing.return_value.find_first = mocker.AsyncMock(return_value=None)\n    mock_store_listing.return_value.create = mocker.AsyncMock(return_value=mock_listing)",
          "successors": [
            {
              "id": 2,
              "start_line": 171,
              "end_line": 179,
              "label": "# Call function\n    result = await db.create_store_submission(\n        user_id=\"user-id\",\n        agent_id=\"agent-id\",\n        agent_version=1,\n        slug=\"test-agent\",\n        name=\"Test Agent\",\n        description=\"Test description\",\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 181,
                  "end_line": 183,
                  "label": "# Verify results\n    assert result.name == \"Test Agent\"\n    assert result.description == \"Test description\"",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 185,
                      "end_line": 188,
                      "label": "# Verify mocks called correctly\n    mock_agent_graph.return_value.find_first.assert_called_once()\n    mock_store_listing.return_value.find_first.assert_called_once()\n    mock_store_listing.return_value.create.assert_called_once()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_update_profile",
      "type": "function",
      "start_line": 192,
      "end_line": 232,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 192,
          "line": "async def test_update_profile(mocker):"
        },
        {
          "lineno": 193,
          "line": "    # Mock data"
        },
        {
          "lineno": 194,
          "line": "    mock_profile = prisma.models.Profile("
        },
        {
          "lineno": 195,
          "line": "        id=\"profile-id\","
        },
        {
          "lineno": 196,
          "line": "        name=\"Test Creator\","
        },
        {
          "lineno": 197,
          "line": "        username=\"creator\","
        },
        {
          "lineno": 198,
          "line": "        description=\"Test description\","
        },
        {
          "lineno": 199,
          "line": "        links=[\"link1\"],"
        },
        {
          "lineno": 200,
          "line": "        avatarUrl=\"avatar.jpg\","
        },
        {
          "lineno": 201,
          "line": "        isFeatured=False,"
        },
        {
          "lineno": 202,
          "line": "        createdAt=datetime.now(),"
        },
        {
          "lineno": 203,
          "line": "        updatedAt=datetime.now(),"
        },
        {
          "lineno": 204,
          "line": "    )"
        },
        {
          "lineno": 205,
          "line": ""
        },
        {
          "lineno": 206,
          "line": "    # Mock prisma calls"
        },
        {
          "lineno": 207,
          "line": "    mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")"
        },
        {
          "lineno": 208,
          "line": "    mock_profile_db.return_value.find_first = mocker.AsyncMock("
        },
        {
          "lineno": 209,
          "line": "        return_value=mock_profile"
        },
        {
          "lineno": 210,
          "line": "    )"
        },
        {
          "lineno": 211,
          "line": "    mock_profile_db.return_value.update = mocker.AsyncMock(return_value=mock_profile)"
        },
        {
          "lineno": 212,
          "line": ""
        },
        {
          "lineno": 213,
          "line": "    # Test data"
        },
        {
          "lineno": 214,
          "line": "    profile = Profile("
        },
        {
          "lineno": 215,
          "line": "        name=\"Test Creator\","
        },
        {
          "lineno": 216,
          "line": "        username=\"creator\","
        },
        {
          "lineno": 217,
          "line": "        description=\"Test description\","
        },
        {
          "lineno": 218,
          "line": "        links=[\"link1\"],"
        },
        {
          "lineno": 219,
          "line": "        avatar_url=\"avatar.jpg\","
        },
        {
          "lineno": 220,
          "line": "        is_featured=False,"
        },
        {
          "lineno": 221,
          "line": "    )"
        },
        {
          "lineno": 222,
          "line": ""
        },
        {
          "lineno": 223,
          "line": "    # Call function"
        },
        {
          "lineno": 224,
          "line": "    result = await db.update_or_create_profile(\"user-id\", profile)"
        },
        {
          "lineno": 225,
          "line": ""
        },
        {
          "lineno": 226,
          "line": "    # Verify results"
        },
        {
          "lineno": 227,
          "line": "    assert result.username == \"creator\""
        },
        {
          "lineno": 228,
          "line": "    assert result.name == \"Test Creator\""
        },
        {
          "lineno": 229,
          "line": ""
        },
        {
          "lineno": 230,
          "line": "    # Verify mocks called correctly"
        },
        {
          "lineno": 231,
          "line": "    mock_profile_db.return_value.find_first.assert_called_once()"
        },
        {
          "lineno": 232,
          "line": "    mock_profile_db.return_value.update.assert_called_once()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 192,
          "end_line": 204,
          "label": "async def test_update_profile(mocker):\n    # Mock data\n    mock_profile = prisma.models.Profile(\n        id=\"profile-id\",\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatarUrl=\"avatar.jpg\",\n        isFeatured=False,\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 206,
              "end_line": 211,
              "label": "    # Mock prisma calls\n    mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")\n    mock_profile_db.return_value.find_first = mocker.AsyncMock(\n        return_value=mock_profile\n    )\n    mock_profile_db.return_value.update = mocker.AsyncMock(return_value=mock_profile)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 213,
                  "end_line": 221,
                  "label": "    # Test data\n    profile = Profile(\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatar_url=\"avatar.jpg\",\n        is_featured=False\n    )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 223,
                      "end_line": 224,
                      "label": "    # Call function\n    result = await db.update_or_create_profile(\"user-id\", profile)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 226,
                          "end_line": 228,
                          "label": "    # Verify results\n    assert result.username == \"creator\"\n    assert result.name == \"Test Creator\"",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 230,
                              "end_line": 232,
                              "label": "    # Verify mocks called correctly\n    mock_profile_db.return_value.find_first.assert_called_once()\n    mock_profile_db.return_value.update.assert_called_once()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_user_profile",
      "type": "function",
      "start_line": 236,
      "end_line": 264,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 236,
          "line": "async def test_get_user_profile(mocker):"
        },
        {
          "lineno": 237,
          "line": "    # Mock data"
        },
        {
          "lineno": 238,
          "line": "    mock_profile = prisma.models.Profile("
        },
        {
          "lineno": 239,
          "line": "        id=\"profile-id\","
        },
        {
          "lineno": 240,
          "line": "        name=\"No Profile Data\","
        },
        {
          "lineno": 241,
          "line": "        username=\"testuser\","
        },
        {
          "lineno": 242,
          "line": "        description=\"Test description\","
        },
        {
          "lineno": 243,
          "line": "        links=[\"link1\", \"link2\"],"
        },
        {
          "lineno": 244,
          "line": "        avatarUrl=\"avatar.jpg\","
        },
        {
          "lineno": 245,
          "line": "        isFeatured=False,"
        },
        {
          "lineno": 246,
          "line": "        createdAt=datetime.now(),"
        },
        {
          "lineno": 247,
          "line": "        updatedAt=datetime.now(),"
        },
        {
          "lineno": 248,
          "line": "    )"
        },
        {
          "lineno": 249,
          "line": ""
        },
        {
          "lineno": 250,
          "line": "    # Mock prisma calls"
        },
        {
          "lineno": 251,
          "line": "    mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")"
        },
        {
          "lineno": 252,
          "line": "    mock_profile_db.return_value.find_unique = mocker.AsyncMock("
        },
        {
          "lineno": 253,
          "line": "        return_value=mock_profile"
        },
        {
          "lineno": 254,
          "line": "    )"
        },
        {
          "lineno": 255,
          "line": ""
        },
        {
          "lineno": 256,
          "line": "    # Call function"
        },
        {
          "lineno": 257,
          "line": "    result = await db.get_user_profile(\"user-id\")"
        },
        {
          "lineno": 258,
          "line": ""
        },
        {
          "lineno": 259,
          "line": "    # Verify results"
        },
        {
          "lineno": 260,
          "line": "    assert result.name == \"No Profile Data\""
        },
        {
          "lineno": 261,
          "line": "    assert result.username == \"No Profile Data\""
        },
        {
          "lineno": 262,
          "line": "    assert result.description == \"No Profile Data\""
        },
        {
          "lineno": 263,
          "line": "    assert result.links == []"
        },
        {
          "lineno": 264,
          "line": "    assert result.avatar_url == \"\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 236,
          "end_line": 248,
          "label": "async def test_get_user_profile(mocker):\n    # Mock data\n    mock_profile = prisma.models.Profile(\n        id=\"profile-id\",\n        name=\"No Profile Data\",\n        username=\"testuser\",\n        description=\"Test description\",\n        links=[\"link1\", \"link2\"],\n        avatarUrl=\"avatar.jpg\",\n        isFeatured=False,\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 250,
              "end_line": 254,
              "label": "# Mock prisma calls\n    mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")\n    mock_profile_db.return_value.find_unique = mocker.AsyncMock(\n        return_value=mock_profile\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 256,
                  "end_line": 257,
                  "label": "# Call function\n    result = await db.get_user_profile(\"user-id\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 259,
                      "end_line": 264,
                      "label": "# Verify results\n    assert result.name == \"No Profile Data\"\n    assert result.username == \"No Profile Data\"\n    assert result.description == \"No Profile Data\"\n    assert result.links == []\n    assert result.avatar_url == \"\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from datetime import datetime"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import prisma.errors"
    },
    {
      "lineno": 4,
      "line": "import prisma.models"
    },
    {
      "lineno": 5,
      "line": "import pytest"
    },
    {
      "lineno": 6,
      "line": "from prisma import Prisma"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "import backend.server.v2.store.db as db"
    },
    {
      "lineno": 9,
      "line": "from backend.server.v2.store.model import Profile"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": "@pytest.fixture(autouse=True)"
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 22,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 62,
      "line": ""
    },
    {
      "lineno": 63,
      "line": ""
    },
    {
      "lineno": 64,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 138,
      "line": ""
    },
    {
      "lineno": 139,
      "line": ""
    },
    {
      "lineno": 140,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 189,
      "line": ""
    },
    {
      "lineno": 190,
      "line": ""
    },
    {
      "lineno": 191,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 233,
      "line": ""
    },
    {
      "lineno": 234,
      "line": ""
    },
    {
      "lineno": 235,
      "line": "@pytest.mark.asyncio"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 11,
      "label": "from datetime import datetime\n\nimport prisma.errors\nimport prisma.models\nimport pytest\nfrom prisma import Prisma\n\nimport backend.server.v2.store.db as db\nfrom backend.server.v2.store.model import Profile\n\n",
      "successors": [
        {
          "id": 2,
          "start_line": 12,
          "end_line": 20,
          "label": "@pytest.fixture(autouse=True)\n\n\n\n\n\n@",
          "successors": [
            {
              "id": 3,
              "start_line": 22,
              "end_line": 62,
              "label": "pytest.mark.asyncio\n\n\n\n\n\n@",
              "successors": [
                {
                  "id": 4,
                  "start_line": 64,
                  "end_line": 138,
                  "label": "pytest.mark.asyncio\n\n\n\n\n\n@",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 140,
                      "end_line": 189,
                      "label": "pytest.mark.asyncio\n\n\n\n\n\n@",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 191,
                          "end_line": 233,
                          "label": "pytest.mark.asyncio\n\n\n\n\n\n@",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 235,
                              "end_line": 235,
                              "label": "pytest.mark.asyncio",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}