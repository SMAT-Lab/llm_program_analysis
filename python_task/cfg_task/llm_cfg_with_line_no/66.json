{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 123,
  "functions": [
    {
      "name": "get_service_name",
      "type": "function",
      "start_line": 16,
      "end_line": 17,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "def get_service_name():"
        },
        {
          "lineno": 17,
          "line": "    return _SERVICE_NAME"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 17,
          "label": "def get_service_name():\n    return _SERVICE_NAME",
          "successors": []
        }
      ]
    },
    {
      "name": "set_service_name",
      "type": "function",
      "start_line": 20,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 20,
          "line": "def set_service_name(name: str):"
        },
        {
          "lineno": 21,
          "line": "    global _SERVICE_NAME"
        },
        {
          "lineno": 22,
          "line": "    _SERVICE_NAME = name"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 20,
          "end_line": 22,
          "label": "def set_service_name(name: str):\n    global _SERVICE_NAME\n    _SERVICE_NAME = name",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "AppProcess",
      "type": "class",
      "start_line": 25,
      "end_line": 123,
      "functions": [
        {
          "name": "run",
          "type": "function",
          "start_line": 39,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 39,
              "line": "    def run(self):"
            },
            {
              "lineno": 40,
              "line": "        \"\"\""
            },
            {
              "lineno": 41,
              "line": "        The method that will be executed in the process."
            },
            {
              "lineno": 42,
              "line": "        \"\"\""
            },
            {
              "lineno": 43,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 39,
              "end_line": 43,
              "label": "    def run(self):\n        \"\"\"\n        The method that will be executed in the process.\n        \"\"\"\n        pass",
              "successors": []
            }
          ]
        },
        {
          "name": "service_name",
          "type": "function",
          "start_line": 47,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 47,
              "line": "    def service_name(cls) -> str:"
            },
            {
              "lineno": 48,
              "line": "        return cls.__name__"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 47,
              "end_line": 48,
              "label": "    def service_name(cls) -> str:\n        return cls.__name__",
              "successors": []
            }
          ]
        },
        {
          "name": "cleanup",
          "type": "function",
          "start_line": 50,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 50,
              "line": "    def cleanup(self):"
            },
            {
              "lineno": 51,
              "line": "        \"\"\""
            },
            {
              "lineno": 52,
              "line": "        Implement this method on a subclass to do post-execution cleanup,"
            },
            {
              "lineno": 53,
              "line": "        e.g. disconnecting from a database or terminating child processes."
            },
            {
              "lineno": 54,
              "line": "        \"\"\""
            },
            {
              "lineno": 55,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 50,
              "end_line": 55,
              "label": "    def cleanup(self):\n        \"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"\n        pass",
              "successors": []
            }
          ]
        },
        {
          "name": "health_check",
          "type": "function",
          "start_line": 57,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 57,
              "line": "    def health_check(self):"
            },
            {
              "lineno": 58,
              "line": "        \"\"\""
            },
            {
              "lineno": 59,
              "line": "        A method to check the health of the process."
            },
            {
              "lineno": 60,
              "line": "        \"\"\""
            },
            {
              "lineno": 61,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 57,
              "end_line": 61,
              "label": "    def health_check(self):\n        \"\"\"\n        A method to check the health of the process.\n        \"\"\"\n        pass",
              "successors": []
            }
          ]
        },
        {
          "name": "execute_run_command",
          "type": "function",
          "start_line": 63,
          "end_line": 75,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 63,
              "line": "    def execute_run_command(self, silent):"
            },
            {
              "lineno": 64,
              "line": "        signal.signal(signal.SIGTERM, self._self_terminate)"
            },
            {
              "lineno": 65,
              "line": ""
            },
            {
              "lineno": 66,
              "line": "        try:"
            },
            {
              "lineno": 67,
              "line": "            if silent:"
            },
            {
              "lineno": 68,
              "line": "                sys.stdout = open(os.devnull, \"w\")"
            },
            {
              "lineno": 69,
              "line": "                sys.stderr = open(os.devnull, \"w\")"
            },
            {
              "lineno": 70,
              "line": ""
            },
            {
              "lineno": 71,
              "line": "            set_service_name(self.service_name)"
            },
            {
              "lineno": 72,
              "line": "            logger.info(f\"[{self.service_name}] Starting...\")"
            },
            {
              "lineno": 73,
              "line": "            self.run()"
            },
            {
              "lineno": 74,
              "line": "        except (KeyboardInterrupt, SystemExit) as e:"
            },
            {
              "lineno": 75,
              "line": "            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 63,
              "end_line": 64,
              "label": "    def execute_run_command(self, silent):\n        signal.signal(signal.SIGTERM, self._self_terminate)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 66,
                  "end_line": 66,
                  "label": "        try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 67,
                      "end_line": 69,
                      "label": "            if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 71,
                          "end_line": 73,
                          "label": "            set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 74,
                              "end_line": 75,
                              "label": "        except (KeyboardInterrupt, SystemExit) as e:\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_self_terminate",
          "type": "function",
          "start_line": 77,
          "end_line": 79,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 77,
              "line": "    def _self_terminate(self, signum: int, frame):"
            },
            {
              "lineno": 78,
              "line": "        self.cleanup()"
            },
            {
              "lineno": 79,
              "line": "        sys.exit(0)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 77,
              "end_line": 79,
              "label": "    def _self_terminate(self, signum: int, frame):\n        self.cleanup()\n        sys.exit(0)",
              "successors": []
            }
          ]
        },
        {
          "name": "__enter__",
          "type": "function",
          "start_line": 83,
          "end_line": 85,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 83,
              "line": "    def __enter__(self):"
            },
            {
              "lineno": 84,
              "line": "        self.start(background=True)"
            },
            {
              "lineno": 85,
              "line": "        return self"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 83,
              "end_line": 85,
              "label": "    def __enter__(self):\n        self.start(background=True)\n        return self",
              "successors": []
            }
          ]
        },
        {
          "name": "__exit__",
          "type": "function",
          "start_line": 87,
          "end_line": 88,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 87,
              "line": "    def __exit__(self, *args, **kwargs):"
            },
            {
              "lineno": 88,
              "line": "        self.stop()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 87,
              "end_line": 88,
              "label": "def __exit__(self, *args, **kwargs):\n        self.stop()",
              "successors": []
            }
          ]
        },
        {
          "name": "start",
          "type": "function",
          "start_line": 90,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 90,
              "line": "    def start(self, background: bool = False, silent: bool = False, **proc_args) -> int:"
            },
            {
              "lineno": 91,
              "line": "        \"\"\""
            },
            {
              "lineno": 92,
              "line": "        Start the background process."
            },
            {
              "lineno": 93,
              "line": "        Args:"
            },
            {
              "lineno": 94,
              "line": "            background: Whether to run the process in the background."
            },
            {
              "lineno": 95,
              "line": "            silent: Whether to disable stdout and stderr."
            },
            {
              "lineno": 96,
              "line": "            proc_args: Additional arguments to pass to the process."
            },
            {
              "lineno": 97,
              "line": "        Returns:"
            },
            {
              "lineno": 98,
              "line": "            the process id or 0 if the process is not running in the background."
            },
            {
              "lineno": 99,
              "line": "        \"\"\""
            },
            {
              "lineno": 100,
              "line": "        if not background:"
            },
            {
              "lineno": 101,
              "line": "            self.execute_run_command(silent)"
            },
            {
              "lineno": 102,
              "line": "            return 0"
            },
            {
              "lineno": 103,
              "line": ""
            },
            {
              "lineno": 104,
              "line": "        self.process = Process("
            },
            {
              "lineno": 105,
              "line": "            name=self.__class__.__name__,"
            },
            {
              "lineno": 106,
              "line": "            target=self.execute_run_command,"
            },
            {
              "lineno": 107,
              "line": "            args=(silent,),"
            },
            {
              "lineno": 108,
              "line": "            **proc_args,"
            },
            {
              "lineno": 109,
              "line": "        )"
            },
            {
              "lineno": 110,
              "line": "        self.process.start()"
            },
            {
              "lineno": 111,
              "line": "        self.health_check()"
            },
            {
              "lineno": 112,
              "line": "        return self.process.pid or 0"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 90,
              "end_line": 99,
              "label": "    def start(self, background: bool = False, silent: bool = False, **proc_args) -> int:\n        \"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 100,
                  "end_line": 100,
                  "label": "        if not background:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 101,
                      "end_line": 102,
                      "label": "            self.execute_run_command(silent)\n            return 0",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 104,
                      "end_line": 112,
                      "label": "        self.process = Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )\n        self.process.start()\n        self.health_check()\n        return self.process.pid or 0",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "stop",
          "type": "function",
          "start_line": 114,
          "end_line": 123,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 114,
              "line": "    def stop(self):"
            },
            {
              "lineno": 115,
              "line": "        \"\"\""
            },
            {
              "lineno": 116,
              "line": "        Stop the background process."
            },
            {
              "lineno": 117,
              "line": "        \"\"\""
            },
            {
              "lineno": 118,
              "line": "        if not self.process:"
            },
            {
              "lineno": 119,
              "line": "            return"
            },
            {
              "lineno": 120,
              "line": ""
            },
            {
              "lineno": 121,
              "line": "        self.process.terminate()"
            },
            {
              "lineno": 122,
              "line": "        self.process.join()"
            },
            {
              "lineno": 123,
              "line": "        self.process = None"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 114,
              "end_line": 114,
              "label": "    def stop(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 115,
                  "end_line": 117,
                  "label": "        \"\"\"\n        Stop the background process.\n        \"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 118,
                      "end_line": 118,
                      "label": "        if not self.process:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 119,
                          "end_line": 119,
                          "label": "            return",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "start_line": 121,
                          "end_line": 123,
                          "label": "        self.process.terminate()\n        self.process.join()\n        self.process = None",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 25,
          "line": "class AppProcess(ABC):"
        },
        {
          "lineno": 26,
          "line": "    \"\"\""
        },
        {
          "lineno": 27,
          "line": "    A class to represent an object that can be executed in a background process."
        },
        {
          "lineno": 28,
          "line": "    \"\"\""
        },
        {
          "lineno": 29,
          "line": ""
        },
        {
          "lineno": 30,
          "line": "    process: Optional[Process] = None"
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 32,
          "line": "    set_start_method(\"spawn\", force=True)"
        },
        {
          "lineno": 33,
          "line": "    configure_logging()"
        },
        {
          "lineno": 34,
          "line": "    sentry_init()"
        },
        {
          "lineno": 35,
          "line": ""
        },
        {
          "lineno": 36,
          "line": "    # Methods that are executed INSIDE the process #"
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "    @abstractmethod"
        },
        {
          "lineno": 44,
          "line": ""
        },
        {
          "lineno": 45,
          "line": "    @classmethod"
        },
        {
          "lineno": 46,
          "line": "    @property"
        },
        {
          "lineno": 49,
          "line": ""
        },
        {
          "lineno": 56,
          "line": ""
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 76,
          "line": ""
        },
        {
          "lineno": 80,
          "line": ""
        },
        {
          "lineno": 81,
          "line": "    # Methods that are executed OUTSIDE the process #"
        },
        {
          "lineno": 82,
          "line": ""
        },
        {
          "lineno": 86,
          "line": ""
        },
        {
          "lineno": 89,
          "line": ""
        },
        {
          "lineno": 113,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 25,
          "end_line": 29,
          "label": "class AppProcess(ABC):\n    \"\"\"\n    A class to represent an object that can be executed in a background process.\n    \"\"\"\n",
          "successors": [
            {
              "id": 2,
              "start_line": 30,
              "end_line": 30,
              "label": "    process: Optional[Process] = None\n",
              "successors": [
                {
                  "id": 3,
                  "start_line": 32,
                  "end_line": 34,
                  "label": "    set_start_method(\"spawn\", force=True)\n    configure_logging()\n    sentry_init()\n",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 36,
                      "end_line": 37,
                      "label": "    # Methods that are executed INSIDE the process #\n\n",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 38,
                          "end_line": 44,
                          "label": "    @abstractmethod\n\n",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 45,
                              "end_line": 49,
                              "label": "    @classmethod\n    @property\n\n",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 56,
                                  "end_line": 62,
                                  "label": "\n\n",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 76,
                                      "end_line": 80,
                                      "label": "\n\n    # Methods that are executed OUTSIDE the process #\n\n",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 82,
                                          "end_line": 86,
                                          "label": "\n\n",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 89,
                                              "end_line": 113,
                                              "label": "\n\n",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "import os"
    },
    {
      "lineno": 3,
      "line": "import signal"
    },
    {
      "lineno": 4,
      "line": "import sys"
    },
    {
      "lineno": 5,
      "line": "from abc import ABC, abstractmethod"
    },
    {
      "lineno": 6,
      "line": "from multiprocessing import Process, set_start_method"
    },
    {
      "lineno": 7,
      "line": "from typing import Optional"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "from backend.util.logging import configure_logging"
    },
    {
      "lineno": 10,
      "line": "from backend.util.metrics import sentry_init"
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 13,
      "line": "_SERVICE_NAME = \"MainProcess\""
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 18,
      "line": ""
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 23,
      "line": ""
    },
    {
      "lineno": 24,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 10,
      "label": "import logging\nimport os\nimport signal\nimport sys\nfrom abc import ABC, abstractmethod\nfrom multiprocessing import Process, set_start_method\nfrom typing import Optional\n\nfrom backend.util.logging import configure_logging\nfrom backend.util.metrics import sentry_init",
      "successors": [
        {
          "id": 2,
          "start_line": 12,
          "end_line": 13,
          "label": "logger = logging.getLogger(__name__)\n_SERVICE_NAME = \"MainProcess\"",
          "successors": []
        }
      ]
    }
  ]
}