{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 144,
  "functions": [
    {
      "name": "wait_execution",
      "type": "function",
      "start_line": 56,
      "end_line": 78,
      "functions": [
        {
          "name": "is_execution_completed",
          "type": "function",
          "start_line": 62,
          "end_line": 68,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 62,
              "line": "    async def is_execution_completed():"
            },
            {
              "lineno": 63,
              "line": "        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)"
            },
            {
              "lineno": 64,
              "line": "        log.info(f\"Execution status: {status}\")"
            },
            {
              "lineno": 65,
              "line": "        if status == ExecutionStatus.FAILED:"
            },
            {
              "lineno": 66,
              "line": "            log.info(\"Execution failed\")"
            },
            {
              "lineno": 67,
              "line": "            raise Exception(\"Execution failed\")"
            },
            {
              "lineno": 68,
              "line": "        return status == ExecutionStatus.COMPLETED"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 62,
              "end_line": 62,
              "label": "    async def is_execution_completed():",
              "successors": [
                {
                  "id": 2,
                  "start_line": 63,
                  "end_line": 64,
                  "label": "        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 65,
                      "end_line": 67,
                      "label": "        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 68,
                      "end_line": 68,
                      "label": "        return status == ExecutionStatus.COMPLETED",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 56,
          "line": "async def wait_execution("
        },
        {
          "lineno": 57,
          "line": "    user_id: str,"
        },
        {
          "lineno": 58,
          "line": "    graph_id: str,"
        },
        {
          "lineno": 59,
          "line": "    graph_exec_id: str,"
        },
        {
          "lineno": 60,
          "line": "    timeout: int = 20,"
        },
        {
          "lineno": 61,
          "line": ") -> Sequence[ExecutionResult]:"
        },
        {
          "lineno": 69,
          "line": ""
        },
        {
          "lineno": 70,
          "line": "    # Wait for the executions to complete"
        },
        {
          "lineno": 71,
          "line": "    for i in range(timeout):"
        },
        {
          "lineno": 72,
          "line": "        if await is_execution_completed():"
        },
        {
          "lineno": 73,
          "line": "            return await AgentServer().test_get_graph_run_node_execution_results("
        },
        {
          "lineno": 74,
          "line": "                graph_id, graph_exec_id, user_id"
        },
        {
          "lineno": 75,
          "line": "            )"
        },
        {
          "lineno": 76,
          "line": "        time.sleep(1)"
        },
        {
          "lineno": 77,
          "line": ""
        },
        {
          "lineno": 78,
          "line": "    assert False, \"Execution did not complete in time.\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 56,
          "end_line": 61,
          "label": "async def wait_execution(\n    user_id: str,\n    graph_id: str,\n    graph_exec_id: str,\n    timeout: int = 20,\n) -> Sequence[ExecutionResult]:",
          "successors": [
            {
              "id": 2,
              "start_line": 70,
              "end_line": 71,
              "label": "# Wait for the executions to complete\nfor i in range(timeout):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 72,
                  "end_line": 72,
                  "label": "if await is_execution_completed():",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 73,
                      "end_line": 75,
                      "label": "return await AgentServer().test_get_graph_run_node_execution_results(\n    graph_id, graph_exec_id, user_id\n)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 76,
                  "end_line": 76,
                  "label": "time.sleep(1)",
                  "successors": [
                    {
                      "id": 2,
                      "start_line": 70,
                      "end_line": 71,
                      "label": "# Wait for the executions to complete\nfor i in range(timeout):",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "start_line": 78,
              "end_line": 78,
              "label": "assert False, \"Execution did not complete in time.\"",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "execute_block_test",
      "type": "function",
      "start_line": 81,
      "end_line": 144,
      "functions": [
        {
          "name": "compare",
          "type": "function",
          "start_line": 120,
          "end_line": 135,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 120,
              "line": "            def compare(data, expected_data):"
            },
            {
              "lineno": 121,
              "line": "                if data == expected_data:"
            },
            {
              "lineno": 122,
              "line": "                    is_matching = True"
            },
            {
              "lineno": 123,
              "line": "                elif isinstance(expected_data, type):"
            },
            {
              "lineno": 124,
              "line": "                    is_matching = isinstance(data, expected_data)"
            },
            {
              "lineno": 125,
              "line": "                elif callable(expected_data):"
            },
            {
              "lineno": 126,
              "line": "                    is_matching = expected_data(data)"
            },
            {
              "lineno": 127,
              "line": "                else:"
            },
            {
              "lineno": 128,
              "line": "                    is_matching = False"
            },
            {
              "lineno": 129,
              "line": ""
            },
            {
              "lineno": 130,
              "line": "                mark = \"✅\" if is_matching else \"❌\""
            },
            {
              "lineno": 131,
              "line": "                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")"
            },
            {
              "lineno": 132,
              "line": "                if not is_matching:"
            },
            {
              "lineno": 133,
              "line": "                    raise ValueError("
            },
            {
              "lineno": 134,
              "line": "                        f\"{prefix}: wrong output {data} vs {expected_data}\""
            },
            {
              "lineno": 135,
              "line": "                    )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 120,
              "end_line": 120,
              "label": "            def compare(data, expected_data):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 121,
                  "end_line": 121,
                  "label": "                if data == expected_data:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 122,
                      "end_line": 122,
                      "label": "                    is_matching = True",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 130,
                          "end_line": 132,
                          "label": "                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 133,
                              "end_line": 135,
                              "label": "                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "start_line": 123,
                      "end_line": 124,
                      "label": "                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 130,
                          "end_line": 132,
                          "label": "                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 133,
                              "end_line": 135,
                              "label": "                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 125,
                      "end_line": 126,
                      "label": "                elif callable(expected_data):\n                    is_matching = expected_data(data)",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 130,
                          "end_line": 132,
                          "label": "                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 133,
                              "end_line": 135,
                              "label": "                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "start_line": 127,
                      "end_line": 128,
                      "label": "                else:\n                    is_matching = False",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 130,
                          "end_line": 132,
                          "label": "                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 133,
                              "end_line": 135,
                              "label": "                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 81,
          "line": "def execute_block_test(block: Block):"
        },
        {
          "lineno": 82,
          "line": "    prefix = f\"[Test-{block.name}]\""
        },
        {
          "lineno": 83,
          "line": ""
        },
        {
          "lineno": 84,
          "line": "    if not block.test_input or not block.test_output:"
        },
        {
          "lineno": 85,
          "line": "        log.info(f\"{prefix} No test data provided\")"
        },
        {
          "lineno": 86,
          "line": "        return"
        },
        {
          "lineno": 87,
          "line": "    if not isinstance(block.test_input, list):"
        },
        {
          "lineno": 88,
          "line": "        block.test_input = [block.test_input]"
        },
        {
          "lineno": 89,
          "line": "    if not isinstance(block.test_output, list):"
        },
        {
          "lineno": 90,
          "line": "        block.test_output = [block.test_output]"
        },
        {
          "lineno": 91,
          "line": ""
        },
        {
          "lineno": 92,
          "line": "    output_index = 0"
        },
        {
          "lineno": 93,
          "line": "    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")"
        },
        {
          "lineno": 94,
          "line": "    prefix = \" \" * 4 + prefix"
        },
        {
          "lineno": 95,
          "line": ""
        },
        {
          "lineno": 96,
          "line": "    for mock_name, mock_obj in (block.test_mock or {}).items():"
        },
        {
          "lineno": 97,
          "line": "        log.info(f\"{prefix} mocking {mock_name}...\")"
        },
        {
          "lineno": 98,
          "line": "        if hasattr(block, mock_name):"
        },
        {
          "lineno": 99,
          "line": "            setattr(block, mock_name, mock_obj)"
        },
        {
          "lineno": 100,
          "line": "        else:"
        },
        {
          "lineno": 101,
          "line": "            log.info(f\"{prefix} mock {mock_name} not found in block\")"
        },
        {
          "lineno": 102,
          "line": ""
        },
        {
          "lineno": 103,
          "line": "    extra_exec_kwargs = {}"
        },
        {
          "lineno": 104,
          "line": ""
        },
        {
          "lineno": 105,
          "line": "    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:"
        },
        {
          "lineno": 106,
          "line": "        if not block.test_credentials:"
        },
        {
          "lineno": 107,
          "line": "            raise ValueError("
        },
        {
          "lineno": 108,
          "line": "                f\"{prefix} requires credentials but has no test_credentials\""
        },
        {
          "lineno": 109,
          "line": "            )"
        },
        {
          "lineno": 110,
          "line": "        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials"
        },
        {
          "lineno": 111,
          "line": ""
        },
        {
          "lineno": 112,
          "line": "    for input_data in block.test_input:"
        },
        {
          "lineno": 113,
          "line": "        log.info(f\"{prefix} in: {input_data}\")"
        },
        {
          "lineno": 114,
          "line": ""
        },
        {
          "lineno": 115,
          "line": "        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):"
        },
        {
          "lineno": 116,
          "line": "            if output_index >= len(block.test_output):"
        },
        {
          "lineno": 117,
          "line": "                raise ValueError(f\"{prefix} produced output more than expected\")"
        },
        {
          "lineno": 118,
          "line": "            ex_output_name, ex_output_data = block.test_output[output_index]"
        },
        {
          "lineno": 119,
          "line": ""
        },
        {
          "lineno": 136,
          "line": ""
        },
        {
          "lineno": 137,
          "line": "            compare(output_data, ex_output_data)"
        },
        {
          "lineno": 138,
          "line": "            compare(output_name, ex_output_name)"
        },
        {
          "lineno": 139,
          "line": "            output_index += 1"
        },
        {
          "lineno": 140,
          "line": ""
        },
        {
          "lineno": 141,
          "line": "    if output_index < len(block.test_output):"
        },
        {
          "lineno": 142,
          "line": "        raise ValueError("
        },
        {
          "lineno": 143,
          "line": "            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\""
        },
        {
          "lineno": 144,
          "line": "        )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 81,
          "end_line": 84,
          "label": "def execute_block_test(block: Block):\n    prefix = f\"[Test-{block.name}]\"\n\n    if not block.test_input or not block.test_output:",
          "successors": [
            {
              "id": 2,
              "start_line": 85,
              "end_line": 86,
              "label": "log.info(f\"{prefix} No test data provided\")\n        return",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 87,
              "end_line": 90,
              "label": "if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]",
              "successors": [
                {
                  "id": 4,
                  "start_line": 92,
                  "end_line": 95,
                  "label": "output_index = 0\n    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")\n    prefix = \" \" * 4 + prefix\n",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 96,
                      "end_line": 102,
                      "label": "for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")\n",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 103,
                          "end_line": 105,
                          "label": "extra_exec_kwargs = {}\n\n    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 106,
                              "end_line": 110,
                              "label": "if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "start_line": 112,
                              "end_line": 116,
                              "label": "for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 117,
                                  "end_line": 139,
                                  "label": "raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "start_line": 141,
                                      "end_line": 144,
                                      "label": "if output_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "SpinTestServer",
      "type": "class",
      "start_line": 17,
      "end_line": 53,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 18,
          "end_line": 22,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 19,
              "line": "        self.db_api = DatabaseManager()"
            },
            {
              "lineno": 20,
              "line": "        self.exec_manager = ExecutionManager()"
            },
            {
              "lineno": 21,
              "line": "        self.agent_server = AgentServer()"
            },
            {
              "lineno": 22,
              "line": "        self.scheduler = ExecutionScheduler()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 18,
              "end_line": 22,
              "label": "    def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()",
              "successors": []
            }
          ]
        },
        {
          "name": "test_get_user_id",
          "type": "function",
          "start_line": 25,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    def test_get_user_id():"
            },
            {
              "lineno": 26,
              "line": "        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 25,
              "end_line": 26,
              "label": "    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
              "successors": []
            }
          ]
        },
        {
          "name": "__aenter__",
          "type": "function",
          "start_line": 28,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    async def __aenter__(self):"
            },
            {
              "lineno": 29,
              "line": "        self.setup_dependency_overrides()"
            },
            {
              "lineno": 30,
              "line": "        self.db_api.__enter__()"
            },
            {
              "lineno": 31,
              "line": "        self.agent_server.__enter__()"
            },
            {
              "lineno": 32,
              "line": "        self.exec_manager.__enter__()"
            },
            {
              "lineno": 33,
              "line": "        self.scheduler.__enter__()"
            },
            {
              "lineno": 34,
              "line": ""
            },
            {
              "lineno": 35,
              "line": "        await db.connect()"
            },
            {
              "lineno": 36,
              "line": "        await initialize_blocks()"
            },
            {
              "lineno": 37,
              "line": "        await create_default_user()"
            },
            {
              "lineno": 38,
              "line": ""
            },
            {
              "lineno": 39,
              "line": "        return self"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 28,
              "end_line": 38,
              "label": "async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n        \n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 39,
                  "end_line": 39,
                  "label": "return self",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "__aexit__",
          "type": "function",
          "start_line": 41,
          "end_line": 47,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 41,
              "line": "    async def __aexit__(self, exc_type, exc_val, exc_tb):"
            },
            {
              "lineno": 42,
              "line": "        await db.disconnect()"
            },
            {
              "lineno": 43,
              "line": ""
            },
            {
              "lineno": 44,
              "line": "        self.scheduler.__exit__(exc_type, exc_val, exc_tb)"
            },
            {
              "lineno": 45,
              "line": "        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)"
            },
            {
              "lineno": 46,
              "line": "        self.agent_server.__exit__(exc_type, exc_val, exc_tb)"
            },
            {
              "lineno": 47,
              "line": "        self.db_api.__exit__(exc_type, exc_val, exc_tb)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 41,
              "end_line": 47,
              "label": "    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n",
              "successors": []
            }
          ]
        },
        {
          "name": "setup_dependency_overrides",
          "type": "function",
          "start_line": 49,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 49,
              "line": "    def setup_dependency_overrides(self):"
            },
            {
              "lineno": 50,
              "line": "        # Override get_user_id for testing"
            },
            {
              "lineno": 51,
              "line": "        self.agent_server.set_test_dependency_overrides("
            },
            {
              "lineno": 52,
              "line": "            {get_user_id: self.test_get_user_id}"
            },
            {
              "lineno": 53,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 49,
              "end_line": 53,
              "label": " def setup_dependency_overrides(self):\n # Override get_user_id for testing\n self.agent_server.set_test_dependency_overrides(\n {get_user_id: self.test_get_user_id}\n )",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 17,
          "line": "class SpinTestServer:"
        },
        {
          "lineno": 23,
          "line": ""
        },
        {
          "lineno": 24,
          "line": "    @staticmethod"
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 40,
          "line": ""
        },
        {
          "lineno": 48,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 17,
          "end_line": 17,
          "label": "class SpinTestServer:",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 23,
          "end_line": 23,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 24,
          "end_line": 24,
          "label": "    @staticmethod",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 27,
          "end_line": 27,
          "label": "",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 40,
          "end_line": 40,
          "label": "",
          "successors": []
        },
        {
          "id": 6,
          "start_line": 48,
          "end_line": 48,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "import time"
    },
    {
      "lineno": 3,
      "line": "from typing import Sequence"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from backend.data import db"
    },
    {
      "lineno": 6,
      "line": "from backend.data.block import Block, initialize_blocks"
    },
    {
      "lineno": 7,
      "line": "from backend.data.execution import ExecutionResult, ExecutionStatus"
    },
    {
      "lineno": 8,
      "line": "from backend.data.model import CREDENTIALS_FIELD_NAME"
    },
    {
      "lineno": 9,
      "line": "from backend.data.user import create_default_user"
    },
    {
      "lineno": 10,
      "line": "from backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler"
    },
    {
      "lineno": 11,
      "line": "from backend.server.rest_api import AgentServer"
    },
    {
      "lineno": 12,
      "line": "from backend.server.utils import get_user_id"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": "log = logging.getLogger(__name__)"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 54,
      "line": ""
    },
    {
      "lineno": 55,
      "line": ""
    },
    {
      "lineno": 79,
      "line": ""
    },
    {
      "lineno": 80,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 12,
      "label": "import logging\nimport time\nfrom typing import Sequence\n\nfrom backend.data import db\nfrom backend.data.block import Block, initialize_blocks\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.data.user import create_default_user\nfrom backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler\nfrom backend.server.rest_api import AgentServer\nfrom backend.server.utils import get_user_id",
      "successors": [
        {
          "id": 2,
          "start_line": 14,
          "end_line": 14,
          "label": "log = logging.getLogger(__name__)",
          "successors": []
        }
      ]
    }
  ]
}