{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 257,
  "functions": [
    {
      "name": "get_pid_path",
      "type": "function",
      "start_line": 15,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 15,
          "line": "def get_pid_path() -> pathlib.Path:"
        },
        {
          "lineno": 16,
          "line": "    home_dir = pathlib.Path.home()"
        },
        {
          "lineno": 17,
          "line": "    new_dir = home_dir / \".config\" / \"agpt\""
        },
        {
          "lineno": 18,
          "line": "    file_path = new_dir / \"running.tmp\""
        },
        {
          "lineno": 19,
          "line": "    return file_path"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 15,
          "end_line": 19,
          "label": "def get_pid_path() -> pathlib.Path:\n    home_dir = pathlib.Path.home()\n    new_dir = home_dir / \".config\" / \"agpt\"\n    file_path = new_dir / \"running.tmp\"\n    return file_path",
          "successors": []
        }
      ]
    },
    {
      "name": "get_pid",
      "type": "function",
      "start_line": 22,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 22,
          "line": "def get_pid() -> int | None:"
        },
        {
          "lineno": 23,
          "line": "    file_path = get_pid_path()"
        },
        {
          "lineno": 24,
          "line": "    if not file_path.exists():"
        },
        {
          "lineno": 25,
          "line": "        return None"
        },
        {
          "lineno": 26,
          "line": ""
        },
        {
          "lineno": 27,
          "line": "    os.makedirs(file_path.parent, exist_ok=True)"
        },
        {
          "lineno": 28,
          "line": "    with open(file_path, \"r\", encoding=\"utf-8\") as file:"
        },
        {
          "lineno": 29,
          "line": "        pid = file.read()"
        },
        {
          "lineno": 30,
          "line": "    try:"
        },
        {
          "lineno": 31,
          "line": "        return int(pid)"
        },
        {
          "lineno": 32,
          "line": "    except ValueError:"
        },
        {
          "lineno": 33,
          "line": "        return None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 22,
          "end_line": 22,
          "label": "def get_pid() -> int | None:",
          "successors": [
            {
              "id": 2,
              "start_line": 23,
              "end_line": 24,
              "label": "    file_path = get_pid_path()\n    if not file_path.exists():",
              "successors": [
                {
                  "id": 3,
                  "start_line": 25,
                  "end_line": 25,
                  "label": "        return None",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 27,
                  "end_line": 28,
                  "label": "    os.makedirs(file_path.parent, exist_ok=True)\n    with open(file_path, \"r\", encoding=\"utf-8\") as file:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 29,
                      "end_line": 29,
                      "label": "        pid = file.read()",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 30,
                          "end_line": 31,
                          "label": "    try:\n        return int(pid)",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 32,
                          "end_line": 33,
                          "label": "    except ValueError:\n        return None",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "write_pid",
      "type": "function",
      "start_line": 36,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 36,
          "line": "def write_pid(pid: int):"
        },
        {
          "lineno": 37,
          "line": "    file_path = get_pid_path()"
        },
        {
          "lineno": 38,
          "line": "    os.makedirs(file_path.parent, exist_ok=True)"
        },
        {
          "lineno": 39,
          "line": "    with open(file_path, \"w\", encoding=\"utf-8\") as file:"
        },
        {
          "lineno": 40,
          "line": "        file.write(str(pid))"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 36,
          "end_line": 39,
          "label": "def write_pid(pid: int):\n    file_path = get_pid_path()\n    os.makedirs(file_path.parent, exist_ok=True)\n    with open(file_path, \"w\", encoding=\"utf-8\") as file:",
          "successors": [
            {
              "id": 2,
              "start_line": 40,
              "end_line": 40,
              "label": "        file.write(str(pid))",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 49,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 49,
          "line": "def main():"
        },
        {
          "lineno": 50,
          "line": "    \"\"\"AutoGPT Server CLI Tool\"\"\""
        },
        {
          "lineno": 51,
          "line": "    pass"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 49,
          "end_line": 51,
          "label": "def main():\n    \"\"\"AutoGPT Server CLI Tool\"\"\"\n    pass",
          "successors": []
        }
      ]
    },
    {
      "name": "start",
      "type": "function",
      "start_line": 55,
      "end_line": 74,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 55,
          "line": "def start():"
        },
        {
          "lineno": 56,
          "line": "    \"\"\""
        },
        {
          "lineno": 57,
          "line": "    Starts the server in the background and saves the PID"
        },
        {
          "lineno": 58,
          "line": "    \"\"\""
        },
        {
          "lineno": 59,
          "line": "    # Define the path for the new directory and file"
        },
        {
          "lineno": 60,
          "line": "    pid = get_pid()"
        },
        {
          "lineno": 61,
          "line": "    if pid and psutil.pid_exists(pid):"
        },
        {
          "lineno": 62,
          "line": "        print(\"Server is already running\")"
        },
        {
          "lineno": 63,
          "line": "        exit(1)"
        },
        {
          "lineno": 64,
          "line": "    elif pid:"
        },
        {
          "lineno": 65,
          "line": "        print(\"PID does not exist deleting file\")"
        },
        {
          "lineno": 66,
          "line": "        os.remove(get_pid_path())"
        },
        {
          "lineno": 67,
          "line": ""
        },
        {
          "lineno": 68,
          "line": "    print(\"Starting server\")"
        },
        {
          "lineno": 69,
          "line": "    pid = MainApp().start(background=True, silent=True)"
        },
        {
          "lineno": 70,
          "line": "    print(f\"Server running in process: {pid}\")"
        },
        {
          "lineno": 71,
          "line": ""
        },
        {
          "lineno": 72,
          "line": "    write_pid(pid)"
        },
        {
          "lineno": 73,
          "line": "    print(\"done\")"
        },
        {
          "lineno": 74,
          "line": "    os._exit(status=0)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 55,
          "end_line": 60,
          "label": "def start():\n    \"\"\"\n    Starts the server in the background and saves the PID\n    \"\"\"\n    # Define the path for the new directory and file\n    pid = get_pid()",
          "successors": [
            {
              "id": 2,
              "start_line": 61,
              "end_line": 63,
              "label": "if pid and psutil.pid_exists(pid):\n    print(\"Server is already running\")\n    exit(1)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 68,
                  "end_line": 74,
                  "label": "print(\"Starting server\")\n    pid = MainApp().start(background=True, silent=True)\n    print(f\"Server running in process: {pid}\")\n\n    write_pid(pid)\n    print(\"done\")\n    os._exit(status=0)",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 64,
              "end_line": 66,
              "label": "elif pid:\n    print(\"PID does not exist deleting file\")\n    os.remove(get_pid_path())",
              "successors": [
                {
                  "id": 3,
                  "start_line": 68,
                  "end_line": 74,
                  "label": "print(\"Starting server\")\n    pid = MainApp().start(background=True, silent=True)\n    print(f\"Server running in process: {pid}\")\n\n    write_pid(pid)\n    print(\"done\")\n    os._exit(status=0)",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "start_line": 68,
              "end_line": 74,
              "label": "print(\"Starting server\")\n    pid = MainApp().start(background=True, silent=True)\n    print(f\"Server running in process: {pid}\")\n\n    write_pid(pid)\n    print(\"done\")\n    os._exit(status=0)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "stop",
      "type": "function",
      "start_line": 78,
      "end_line": 93,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 78,
          "line": "def stop():"
        },
        {
          "lineno": 79,
          "line": "    \"\"\""
        },
        {
          "lineno": 80,
          "line": "    Stops the server"
        },
        {
          "lineno": 81,
          "line": "    \"\"\""
        },
        {
          "lineno": 82,
          "line": "    pid = get_pid()"
        },
        {
          "lineno": 83,
          "line": "    if not pid:"
        },
        {
          "lineno": 84,
          "line": "        print(\"Server is not running\")"
        },
        {
          "lineno": 85,
          "line": "        return"
        },
        {
          "lineno": 86,
          "line": ""
        },
        {
          "lineno": 87,
          "line": "    os.remove(get_pid_path())"
        },
        {
          "lineno": 88,
          "line": "    process = psutil.Process(int(pid))"
        },
        {
          "lineno": 89,
          "line": "    for child in process.children(recursive=True):"
        },
        {
          "lineno": 90,
          "line": "        child.terminate()"
        },
        {
          "lineno": 91,
          "line": "    process.terminate()"
        },
        {
          "lineno": 92,
          "line": ""
        },
        {
          "lineno": 93,
          "line": "    print(\"Server Stopped\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 78,
          "end_line": 82,
          "label": "def stop():\n    \"\"\"\n    Stops the server\n    \"\"\"\n    pid = get_pid()",
          "successors": [
            {
              "id": 2,
              "start_line": 83,
              "end_line": 85,
              "label": "if not pid:\n    print(\"Server is not running\")\n    return",
              "successors": [
                {
                  "id": 3,
                  "start_line": 87,
                  "end_line": 93,
                  "label": "os.remove(get_pid_path())\nprocess = psutil.Process(int(pid))\nfor child in process.children(recursive=True):\n    child.terminate()\nprocess.terminate()\n\nprint(\"Server Stopped\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "gen_encrypt_key",
      "type": "function",
      "start_line": 97,
      "end_line": 103,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 97,
          "line": "def gen_encrypt_key():"
        },
        {
          "lineno": 98,
          "line": "    \"\"\""
        },
        {
          "lineno": 99,
          "line": "    Generate a new encryption key"
        },
        {
          "lineno": 100,
          "line": "    \"\"\""
        },
        {
          "lineno": 101,
          "line": "    from cryptography.fernet import Fernet"
        },
        {
          "lineno": 102,
          "line": ""
        },
        {
          "lineno": 103,
          "line": "    print(Fernet.generate_key().decode())"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 97,
          "end_line": 101,
          "label": "def gen_encrypt_key():\n    \"\"\"\n    Generate a new encryption key\n    \"\"\"\n    from cryptography.fernet import Fernet",
          "successors": [
            {
              "id": 2,
              "start_line": 103,
              "end_line": 103,
              "label": "print(Fernet.generate_key().decode())",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test",
      "type": "function",
      "start_line": 107,
      "end_line": 111,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 107,
          "line": "def test():"
        },
        {
          "lineno": 108,
          "line": "    \"\"\""
        },
        {
          "lineno": 109,
          "line": "    Group for test commands"
        },
        {
          "lineno": 110,
          "line": "    \"\"\""
        },
        {
          "lineno": 111,
          "line": "    pass"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 107,
          "end_line": 111,
          "label": "def test():\n    \"\"\"\n    Group for test commands\n    \"\"\"\n    pass",
          "successors": []
        }
      ]
    },
    {
      "name": "reddit",
      "type": "function",
      "start_line": 116,
      "end_line": 132,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 116,
          "line": "def reddit(server_address: str):"
        },
        {
          "lineno": 117,
          "line": "    \"\"\""
        },
        {
          "lineno": 118,
          "line": "    Create an event graph"
        },
        {
          "lineno": 119,
          "line": "    \"\"\""
        },
        {
          "lineno": 120,
          "line": "    import requests"
        },
        {
          "lineno": 121,
          "line": ""
        },
        {
          "lineno": 122,
          "line": "    from backend.usecases.reddit_marketing import create_test_graph"
        },
        {
          "lineno": 123,
          "line": ""
        },
        {
          "lineno": 124,
          "line": "    test_graph = create_test_graph()"
        },
        {
          "lineno": 125,
          "line": "    url = f\"{server_address}/graphs\""
        },
        {
          "lineno": 126,
          "line": "    headers = {\"Content-Type\": \"application/json\"}"
        },
        {
          "lineno": 127,
          "line": "    data = test_graph.model_dump_json()"
        },
        {
          "lineno": 128,
          "line": ""
        },
        {
          "lineno": 129,
          "line": "    response = requests.post(url, headers=headers, data=data)"
        },
        {
          "lineno": 130,
          "line": ""
        },
        {
          "lineno": 131,
          "line": "    graph_id = response.json()[\"id\"]"
        },
        {
          "lineno": 132,
          "line": "    print(f\"Graph created with ID: {graph_id}\")"
        }
      ],
      "blocks": []
    },
    {
      "name": "populate_db",
      "type": "function",
      "start_line": 137,
      "end_line": 168,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 137,
          "line": "def populate_db(server_address: str):"
        },
        {
          "lineno": 138,
          "line": "    \"\"\""
        },
        {
          "lineno": 139,
          "line": "    Create an event graph"
        },
        {
          "lineno": 140,
          "line": "    \"\"\""
        },
        {
          "lineno": 141,
          "line": "    import requests"
        },
        {
          "lineno": 142,
          "line": ""
        },
        {
          "lineno": 143,
          "line": "    from backend.usecases.sample import create_test_graph"
        },
        {
          "lineno": 144,
          "line": ""
        },
        {
          "lineno": 145,
          "line": "    test_graph = create_test_graph()"
        },
        {
          "lineno": 146,
          "line": "    url = f\"{server_address}/graphs\""
        },
        {
          "lineno": 147,
          "line": "    headers = {\"Content-Type\": \"application/json\"}"
        },
        {
          "lineno": 148,
          "line": "    data = test_graph.model_dump_json()"
        },
        {
          "lineno": 149,
          "line": ""
        },
        {
          "lineno": 150,
          "line": "    response = requests.post(url, headers=headers, data=data)"
        },
        {
          "lineno": 151,
          "line": ""
        },
        {
          "lineno": 152,
          "line": "    graph_id = response.json()[\"id\"]"
        },
        {
          "lineno": 153,
          "line": ""
        },
        {
          "lineno": 154,
          "line": "    if response.status_code == 200:"
        },
        {
          "lineno": 155,
          "line": "        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\""
        },
        {
          "lineno": 156,
          "line": "        text = \"Hello, World!\""
        },
        {
          "lineno": 157,
          "line": "        input_data = {\"input\": text}"
        },
        {
          "lineno": 158,
          "line": "        response = requests.post(execute_url, headers=headers, json=input_data)"
        },
        {
          "lineno": 159,
          "line": ""
        },
        {
          "lineno": 160,
          "line": "        schedule_url = f\"{server_address}/graphs/{graph_id}/schedules\""
        },
        {
          "lineno": 161,
          "line": "        data = {"
        },
        {
          "lineno": 162,
          "line": "            \"graph_id\": graph_id,"
        },
        {
          "lineno": 163,
          "line": "            \"cron\": \"*/5 * * * *\","
        },
        {
          "lineno": 164,
          "line": "            \"input_data\": {\"input\": \"Hello, World!\"},"
        },
        {
          "lineno": 165,
          "line": "        }"
        },
        {
          "lineno": 166,
          "line": "        response = requests.post(schedule_url, headers=headers, json=data)"
        },
        {
          "lineno": 167,
          "line": ""
        },
        {
          "lineno": 168,
          "line": "    print(\"Database populated with: \\n- graph\\n- execution\\n- schedule\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 137,
          "end_line": 153,
          "label": "def populate_db(server_address: str):\n    \"\"\"\n    Create an event graph\n    \"\"\"\n    import requests\n\n    from backend.usecases.sample import create_test_graph\n\n    test_graph = create_test_graph()\n    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = test_graph.model_dump_json()\n\n    response = requests.post(url, headers=headers, data=data)\n\n    graph_id = response.json()[\"id\"]",
          "successors": [
            {
              "id": 2,
              "start_line": 154,
              "end_line": 166,
              "label": "if response.status_code == 200:\n        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\n        text = \"Hello, World!\"\n        input_data = {\"input\": text}\n        response = requests.post(execute_url, headers=headers, json=input_data)\n\n        schedule_url = f\"{server_address}/graphs/{graph_id}/schedules\"\n        data = {\n            \"graph_id\": graph_id,\n            \"cron\": \"*/5 * * * *\",\n            \"input_data\": {\"input\": \"Hello, World!\"},\n        }\n        response = requests.post(schedule_url, headers=headers, json=data)",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 168,
              "end_line": 168,
              "label": "print(\"Database populated with: \\n- graph\\n- execution\\n- schedule\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "graph",
      "type": "function",
      "start_line": 173,
      "end_line": 195,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 173,
          "line": "def graph(server_address: str):"
        },
        {
          "lineno": 174,
          "line": "    \"\"\""
        },
        {
          "lineno": 175,
          "line": "    Create an event graph"
        },
        {
          "lineno": 176,
          "line": "    \"\"\""
        },
        {
          "lineno": 177,
          "line": "    import requests"
        },
        {
          "lineno": 178,
          "line": ""
        },
        {
          "lineno": 179,
          "line": "    from backend.usecases.sample import create_test_graph"
        },
        {
          "lineno": 180,
          "line": ""
        },
        {
          "lineno": 181,
          "line": "    url = f\"{server_address}/graphs\""
        },
        {
          "lineno": 182,
          "line": "    headers = {\"Content-Type\": \"application/json\"}"
        },
        {
          "lineno": 183,
          "line": "    data = create_test_graph().model_dump_json()"
        },
        {
          "lineno": 184,
          "line": "    response = requests.post(url, headers=headers, data=data)"
        },
        {
          "lineno": 185,
          "line": ""
        },
        {
          "lineno": 186,
          "line": "    if response.status_code == 200:"
        },
        {
          "lineno": 187,
          "line": "        print(response.json()[\"id\"])"
        },
        {
          "lineno": 188,
          "line": "        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\""
        },
        {
          "lineno": 189,
          "line": "        text = \"Hello, World!\""
        },
        {
          "lineno": 190,
          "line": "        input_data = {\"input\": text}"
        },
        {
          "lineno": 191,
          "line": "        response = requests.post(execute_url, headers=headers, json=input_data)"
        },
        {
          "lineno": 192,
          "line": ""
        },
        {
          "lineno": 193,
          "line": "    else:"
        },
        {
          "lineno": 194,
          "line": "        print(\"Failed to send graph\")"
        },
        {
          "lineno": 195,
          "line": "        print(f\"Response: {response.text}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 173,
          "end_line": 184,
          "label": "def graph(server_address: str):\n    \"\"\"\n    Create an event graph\n    \"\"\"\n    import requests\n\n    from backend.usecases.sample import create_test_graph\n\n    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = create_test_graph().model_dump_json()\n    response = requests.post(url, headers=headers, data=data)",
          "successors": [
            {
              "id": 2,
              "start_line": 186,
              "end_line": 191,
              "label": "if response.status_code == 200:\n    print(response.json()[\"id\"])\n    execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\n    text = \"Hello, World!\"\n    input_data = {\"input\": text}\n    response = requests.post(execute_url, headers=headers, json=input_data)",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 193,
              "end_line": 195,
              "label": "else:\n    print(\"Failed to send graph\")\n    print(f\"Response: {response.text}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "execute",
      "type": "function",
      "start_line": 201,
      "end_line": 210,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 201,
          "line": "def execute(graph_id: str, content: dict):"
        },
        {
          "lineno": 202,
          "line": "    \"\"\""
        },
        {
          "lineno": 203,
          "line": "    Create an event graph"
        },
        {
          "lineno": 204,
          "line": "    \"\"\""
        },
        {
          "lineno": 205,
          "line": "    import requests"
        },
        {
          "lineno": 206,
          "line": ""
        },
        {
          "lineno": 207,
          "line": "    headers = {\"Content-Type\": \"application/json\"}"
        },
        {
          "lineno": 208,
          "line": ""
        },
        {
          "lineno": 209,
          "line": "    execute_url = f\"http://0.0.0.0:8000/graphs/{graph_id}/execute\""
        },
        {
          "lineno": 210,
          "line": "    requests.post(execute_url, headers=headers, json=content)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 201,
          "end_line": 204,
          "label": "def execute(graph_id: str, content: dict):\n    \"\"\"\n    Create an event graph\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 205,
              "end_line": 205,
              "label": "import requests",
              "successors": [
                {
                  "id": 3,
                  "start_line": 207,
                  "end_line": 207,
                  "label": "headers = {\"Content-Type\": \"application/json\"}",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 209,
                      "end_line": 210,
                      "label": "execute_url = f\"http://0.0.0.0:8000/graphs/{graph_id}/execute\"\nrequests.post(execute_url, headers=headers, json=content)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "event",
      "type": "function",
      "start_line": 214,
      "end_line": 218,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 214,
          "line": "def event():"
        },
        {
          "lineno": 215,
          "line": "    \"\"\""
        },
        {
          "lineno": 216,
          "line": "    Send an event to the running server"
        },
        {
          "lineno": 217,
          "line": "    \"\"\""
        },
        {
          "lineno": 218,
          "line": "    print(\"Event sent\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 214,
          "end_line": 218,
          "label": "def event():\n    \"\"\"\n    Send an event to the running server\n    \"\"\"\n    print(\"Event sent\")",
          "successors": []
        }
      ]
    },
    {
      "name": "websocket",
      "type": "function",
      "start_line": 224,
      "end_line": 251,
      "functions": [
        {
          "name": "send_message",
          "type": "function",
          "start_line": 234,
          "end_line": 250,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 234,
              "line": "    async def send_message(server_address: str):"
            },
            {
              "lineno": 235,
              "line": "        uri = f\"ws://{server_address}\""
            },
            {
              "lineno": 236,
              "line": "        async with websockets.asyncio.client.connect(uri) as websocket:"
            },
            {
              "lineno": 237,
              "line": "            try:"
            },
            {
              "lineno": 238,
              "line": "                msg = WsMessage("
            },
            {
              "lineno": 239,
              "line": "                    method=Methods.SUBSCRIBE,"
            },
            {
              "lineno": 240,
              "line": "                    data=ExecutionSubscription(graph_id=graph_id).model_dump(),"
            },
            {
              "lineno": 241,
              "line": "                ).model_dump_json()"
            },
            {
              "lineno": 242,
              "line": "                await websocket.send(msg)"
            },
            {
              "lineno": 243,
              "line": "                print(f\"Sending: {msg}\")"
            },
            {
              "lineno": 244,
              "line": "                while True:"
            },
            {
              "lineno": 245,
              "line": "                    response = await websocket.recv()"
            },
            {
              "lineno": 246,
              "line": "                    print(f\"Response from server: {response}\")"
            },
            {
              "lineno": 247,
              "line": "            except InterruptedError:"
            },
            {
              "lineno": 248,
              "line": "                exit(0)"
            },
            {
              "lineno": 249,
              "line": ""
            },
            {
              "lineno": 250,
              "line": "    asyncio.run(send_message(server_address))"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 234,
              "end_line": 234,
              "label": "    async def send_message(server_address: str):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 235,
                  "end_line": 236,
                  "label": "        uri = f\"ws://{server_address}\"\n        async with websockets.asyncio.client.connect(uri) as websocket:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 237,
                      "end_line": 241,
                      "label": "            try:\n                msg = WsMessage(\n                    method=Methods.SUBSCRIBE,\n                    data=ExecutionSubscription(graph_id=graph_id).model_dump(),\n                ).model_dump_json()",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 242,
                          "end_line": 243,
                          "label": "                await websocket.send(msg)\n                print(f\"Sending: {msg}\")",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 244,
                              "end_line": 246,
                              "label": "                while True:\n                    response = await websocket.recv()\n                    print(f\"Response from server: {response}\")",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 237,
                                  "end_line": 241,
                                  "label": "            try:\n                msg = WsMessage(\n                    method=Methods.SUBSCRIBE,\n                    data=ExecutionSubscription(graph_id=graph_id).model_dump(),\n                ).model_dump_json()",
                                  "successors": [
                                    {
                                      "id": 4,
                                      "start_line": 242,
                                      "end_line": 243,
                                      "label": "                await websocket.send(msg)\n                print(f\"Sending: {msg}\")",
                                      "successors": [
                                        {
                                          "id": 5,
                                          "start_line": 244,
                                          "end_line": 246,
                                          "label": "                while True:\n                    response = await websocket.recv()\n                    print(f\"Response from server: {response}\")",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "start_line": 247,
                          "end_line": 248,
                          "label": "            except InterruptedError:\n                exit(0)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 8,
              "start_line": 250,
              "end_line": 250,
              "label": "    asyncio.run(send_message(server_address))",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 224,
          "line": "def websocket(server_address: str, graph_id: str):"
        },
        {
          "lineno": 225,
          "line": "    \"\"\""
        },
        {
          "lineno": 226,
          "line": "    Tests the websocket connection."
        },
        {
          "lineno": 227,
          "line": "    \"\"\""
        },
        {
          "lineno": 228,
          "line": "    import asyncio"
        },
        {
          "lineno": 229,
          "line": ""
        },
        {
          "lineno": 230,
          "line": "    import websockets.asyncio.client"
        },
        {
          "lineno": 231,
          "line": ""
        },
        {
          "lineno": 232,
          "line": "    from backend.server.ws_api import ExecutionSubscription, Methods, WsMessage"
        },
        {
          "lineno": 233,
          "line": ""
        },
        {
          "lineno": 251,
          "line": "    print(\"Testing WS\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 224,
          "end_line": 232,
          "label": "def websocket(server_address: str, graph_id: str):\n    \"\"\"\n    Tests the websocket connection.\n    \"\"\"\n    import asyncio\n\n    import websockets.asyncio.client\n\n    from backend.server.ws_api import ExecutionSubscription, Methods, WsMessage",
          "successors": [
            {
              "id": 2,
              "start_line": 251,
              "end_line": 251,
              "label": "print(\"Testing WS\")",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "MainApp",
      "type": "class",
      "start_line": 43,
      "end_line": 45,
      "functions": [
        {
          "name": "run",
          "type": "function",
          "start_line": 44,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 44,
              "line": "    def run(self):"
            },
            {
              "lineno": 45,
              "line": "        app.main(silent=True)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 44,
              "end_line": 45,
              "label": "    def run(self):\n        app.main(silent=True)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 43,
          "line": "class MainApp(AppProcess):"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 43,
          "end_line": 43,
          "label": "class MainApp(AppProcess):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "The command line interface for the agent server"
    },
    {
      "lineno": 3,
      "line": "\"\"\""
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "import os"
    },
    {
      "lineno": 6,
      "line": "import pathlib"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "import click"
    },
    {
      "lineno": 9,
      "line": "import psutil"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": "from backend import app"
    },
    {
      "lineno": 12,
      "line": "from backend.util.process import AppProcess"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 42,
      "line": ""
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 47,
      "line": ""
    },
    {
      "lineno": 48,
      "line": "@click.group()"
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 53,
      "line": ""
    },
    {
      "lineno": 54,
      "line": "@main.command()"
    },
    {
      "lineno": 75,
      "line": ""
    },
    {
      "lineno": 76,
      "line": ""
    },
    {
      "lineno": 77,
      "line": "@main.command()"
    },
    {
      "lineno": 94,
      "line": ""
    },
    {
      "lineno": 95,
      "line": ""
    },
    {
      "lineno": 96,
      "line": "@main.command()"
    },
    {
      "lineno": 104,
      "line": ""
    },
    {
      "lineno": 105,
      "line": ""
    },
    {
      "lineno": 106,
      "line": "@click.group()"
    },
    {
      "lineno": 112,
      "line": ""
    },
    {
      "lineno": 113,
      "line": ""
    },
    {
      "lineno": 114,
      "line": "@test.command()"
    },
    {
      "lineno": 115,
      "line": "@click.argument(\"server_address\")"
    },
    {
      "lineno": 133,
      "line": ""
    },
    {
      "lineno": 134,
      "line": ""
    },
    {
      "lineno": 135,
      "line": "@test.command()"
    },
    {
      "lineno": 136,
      "line": "@click.argument(\"server_address\")"
    },
    {
      "lineno": 169,
      "line": ""
    },
    {
      "lineno": 170,
      "line": ""
    },
    {
      "lineno": 171,
      "line": "@test.command()"
    },
    {
      "lineno": 172,
      "line": "@click.argument(\"server_address\")"
    },
    {
      "lineno": 196,
      "line": ""
    },
    {
      "lineno": 197,
      "line": ""
    },
    {
      "lineno": 198,
      "line": "@test.command()"
    },
    {
      "lineno": 199,
      "line": "@click.argument(\"graph_id\")"
    },
    {
      "lineno": 200,
      "line": "@click.argument(\"content\")"
    },
    {
      "lineno": 211,
      "line": ""
    },
    {
      "lineno": 212,
      "line": ""
    },
    {
      "lineno": 213,
      "line": "@test.command()"
    },
    {
      "lineno": 219,
      "line": ""
    },
    {
      "lineno": 220,
      "line": ""
    },
    {
      "lineno": 221,
      "line": "@test.command()"
    },
    {
      "lineno": 222,
      "line": "@click.argument(\"server_address\")"
    },
    {
      "lineno": 223,
      "line": "@click.argument(\"graph_id\")"
    },
    {
      "lineno": 252,
      "line": ""
    },
    {
      "lineno": 253,
      "line": ""
    },
    {
      "lineno": 254,
      "line": "main.add_command(test)"
    },
    {
      "lineno": 255,
      "line": ""
    },
    {
      "lineno": 256,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 257,
      "line": "    main()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "\"\"\"\nThe command line interface for the agent server\n\"\"\"",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 5,
      "end_line": 12,
      "label": "import os\nimport pathlib\n\nimport click\nimport psutil\n\nfrom backend import app\nfrom backend.util.process import AppProcess",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 48,
      "end_line": 48,
      "label": "@click.group()",
      "successors": []
    },
    {
      "id": 4,
      "start_line": 54,
      "end_line": 54,
      "label": "@main.command()",
      "successors": []
    },
    {
      "id": 5,
      "start_line": 77,
      "end_line": 77,
      "label": "@main.command()",
      "successors": []
    },
    {
      "id": 6,
      "start_line": 96,
      "end_line": 96,
      "label": "@main.command()",
      "successors": []
    },
    {
      "id": 7,
      "start_line": 106,
      "end_line": 106,
      "label": "@click.group()",
      "successors": []
    },
    {
      "id": 8,
      "start_line": 114,
      "end_line": 115,
      "label": "@test.command()\n@click.argument(\"server_address\")",
      "successors": []
    },
    {
      "id": 9,
      "start_line": 135,
      "end_line": 136,
      "label": "@test.command()\n@click.argument(\"server_address\")",
      "successors": []
    },
    {
      "id": 10,
      "start_line": 171,
      "end_line": 172,
      "label": "@test.command()\n@click.argument(\"server_address\")",
      "successors": []
    },
    {
      "id": 11,
      "start_line": 198,
      "end_line": 200,
      "label": "@test.command()\n@click.argument(\"graph_id\")\n@click.argument(\"content\")",
      "successors": []
    },
    {
      "id": 12,
      "start_line": 213,
      "end_line": 213,
      "label": "@test.command()",
      "successors": []
    },
    {
      "id": 13,
      "start_line": 221,
      "end_line": 223,
      "label": "@test.command()\n@click.argument(\"server_address\")\n@click.argument(\"graph_id\")",
      "successors": []
    },
    {
      "id": 14,
      "start_line": 254,
      "end_line": 254,
      "label": "main.add_command(test)",
      "successors": []
    },
    {
      "id": 15,
      "start_line": 256,
      "end_line": 257,
      "label": "if __name__ == \"__main__\":\n    main()",
      "successors": []
    }
  ]
}