{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 264,
  "functions": [],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from typing import Type"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from backend.blocks.ai_music_generator import AIMusicGeneratorBlock"
    },
    {
      "lineno": 4,
      "line": "from backend.blocks.ai_shortform_video_block import AIShortformVideoCreatorBlock"
    },
    {
      "lineno": 5,
      "line": "from backend.blocks.ideogram import IdeogramModelBlock"
    },
    {
      "lineno": 6,
      "line": "from backend.blocks.jina.embeddings import JinaEmbeddingBlock"
    },
    {
      "lineno": 7,
      "line": "from backend.blocks.jina.search import ExtractWebsiteContentBlock, SearchTheWebBlock"
    },
    {
      "lineno": 8,
      "line": "from backend.blocks.llm import ("
    },
    {
      "lineno": 9,
      "line": "    MODEL_METADATA,"
    },
    {
      "lineno": 10,
      "line": "    AIConversationBlock,"
    },
    {
      "lineno": 11,
      "line": "    AIListGeneratorBlock,"
    },
    {
      "lineno": 12,
      "line": "    AIStructuredResponseGeneratorBlock,"
    },
    {
      "lineno": 13,
      "line": "    AITextGeneratorBlock,"
    },
    {
      "lineno": 14,
      "line": "    AITextSummarizerBlock,"
    },
    {
      "lineno": 15,
      "line": "    LlmModel,"
    },
    {
      "lineno": 16,
      "line": ")"
    },
    {
      "lineno": 17,
      "line": "from backend.blocks.replicate_flux_advanced import ReplicateFluxAdvancedModelBlock"
    },
    {
      "lineno": 18,
      "line": "from backend.blocks.talking_head import CreateTalkingAvatarVideoBlock"
    },
    {
      "lineno": 19,
      "line": "from backend.blocks.text_to_speech_block import UnrealTextToSpeechBlock"
    },
    {
      "lineno": 20,
      "line": "from backend.data.block import Block"
    },
    {
      "lineno": 21,
      "line": "from backend.data.cost import BlockCost, BlockCostType"
    },
    {
      "lineno": 22,
      "line": "from backend.integrations.credentials_store import ("
    },
    {
      "lineno": 23,
      "line": "    anthropic_credentials,"
    },
    {
      "lineno": 24,
      "line": "    did_credentials,"
    },
    {
      "lineno": 25,
      "line": "    groq_credentials,"
    },
    {
      "lineno": 26,
      "line": "    ideogram_credentials,"
    },
    {
      "lineno": 27,
      "line": "    jina_credentials,"
    },
    {
      "lineno": 28,
      "line": "    open_router_credentials,"
    },
    {
      "lineno": 29,
      "line": "    openai_credentials,"
    },
    {
      "lineno": 30,
      "line": "    replicate_credentials,"
    },
    {
      "lineno": 31,
      "line": "    revid_credentials,"
    },
    {
      "lineno": 32,
      "line": "    unreal_credentials,"
    },
    {
      "lineno": 33,
      "line": ")"
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 35,
      "line": "# =============== Configure the cost for each LLM Model call =============== #"
    },
    {
      "lineno": 36,
      "line": ""
    },
    {
      "lineno": 37,
      "line": "MODEL_COST: dict[LlmModel, int] = {"
    },
    {
      "lineno": 38,
      "line": "    LlmModel.O1_PREVIEW: 16,"
    },
    {
      "lineno": 39,
      "line": "    LlmModel.O1_MINI: 4,"
    },
    {
      "lineno": 40,
      "line": "    LlmModel.GPT4O_MINI: 1,"
    },
    {
      "lineno": 41,
      "line": "    LlmModel.GPT4O: 3,"
    },
    {
      "lineno": 42,
      "line": "    LlmModel.GPT4_TURBO: 10,"
    },
    {
      "lineno": 43,
      "line": "    LlmModel.GPT3_5_TURBO: 1,"
    },
    {
      "lineno": 44,
      "line": "    LlmModel.CLAUDE_3_5_SONNET: 4,"
    },
    {
      "lineno": 45,
      "line": "    LlmModel.CLAUDE_3_HAIKU: 1,"
    },
    {
      "lineno": 46,
      "line": "    LlmModel.LLAMA3_8B: 1,"
    },
    {
      "lineno": 47,
      "line": "    LlmModel.LLAMA3_70B: 1,"
    },
    {
      "lineno": 48,
      "line": "    LlmModel.MIXTRAL_8X7B: 1,"
    },
    {
      "lineno": 49,
      "line": "    LlmModel.GEMMA_7B: 1,"
    },
    {
      "lineno": 50,
      "line": "    LlmModel.GEMMA2_9B: 1,"
    },
    {
      "lineno": 51,
      "line": "    LlmModel.LLAMA3_1_405B: 1,"
    },
    {
      "lineno": 52,
      "line": "    LlmModel.LLAMA3_1_70B: 1,"
    },
    {
      "lineno": 53,
      "line": "    LlmModel.LLAMA3_1_8B: 1,"
    },
    {
      "lineno": 54,
      "line": "    LlmModel.OLLAMA_LLAMA3_8B: 1,"
    },
    {
      "lineno": 55,
      "line": "    LlmModel.OLLAMA_LLAMA3_405B: 1,"
    },
    {
      "lineno": 56,
      "line": "    LlmModel.OLLAMA_DOLPHIN: 1,"
    },
    {
      "lineno": 57,
      "line": "    LlmModel.GEMINI_FLASH_1_5_8B: 1,"
    },
    {
      "lineno": 58,
      "line": "    LlmModel.GROK_BETA: 5,"
    },
    {
      "lineno": 59,
      "line": "    LlmModel.MISTRAL_NEMO: 1,"
    },
    {
      "lineno": 60,
      "line": "    LlmModel.COHERE_COMMAND_R_08_2024: 1,"
    },
    {
      "lineno": 61,
      "line": "    LlmModel.COHERE_COMMAND_R_PLUS_08_2024: 3,"
    },
    {
      "lineno": 62,
      "line": "    LlmModel.EVA_QWEN_2_5_32B: 1,"
    },
    {
      "lineno": 63,
      "line": "    LlmModel.DEEPSEEK_CHAT: 2,"
    },
    {
      "lineno": 64,
      "line": "    LlmModel.PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE: 1,"
    },
    {
      "lineno": 65,
      "line": "    LlmModel.QWEN_QWQ_32B_PREVIEW: 2,"
    },
    {
      "lineno": 66,
      "line": "    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B: 1,"
    },
    {
      "lineno": 67,
      "line": "    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B: 1,"
    },
    {
      "lineno": 68,
      "line": "    LlmModel.AMAZON_NOVA_LITE_V1: 1,"
    },
    {
      "lineno": 69,
      "line": "    LlmModel.AMAZON_NOVA_MICRO_V1: 1,"
    },
    {
      "lineno": 70,
      "line": "    LlmModel.AMAZON_NOVA_PRO_V1: 1,"
    },
    {
      "lineno": 71,
      "line": "    LlmModel.MICROSOFT_WIZARDLM_2_8X22B: 1,"
    },
    {
      "lineno": 72,
      "line": "    LlmModel.GRYPHE_MYTHOMAX_L2_13B: 1,"
    },
    {
      "lineno": 73,
      "line": "}"
    },
    {
      "lineno": 74,
      "line": ""
    },
    {
      "lineno": 75,
      "line": "for model in LlmModel:"
    },
    {
      "lineno": 76,
      "line": "    if model not in MODEL_COST:"
    },
    {
      "lineno": 77,
      "line": "        raise ValueError(f\"Missing MODEL_COST for model: {model}\")"
    },
    {
      "lineno": 78,
      "line": ""
    },
    {
      "lineno": 79,
      "line": ""
    },
    {
      "lineno": 80,
      "line": "LLM_COST = ("
    },
    {
      "lineno": 81,
      "line": "    # Anthropic Models"
    },
    {
      "lineno": 82,
      "line": "    ["
    },
    {
      "lineno": 83,
      "line": "        BlockCost("
    },
    {
      "lineno": 84,
      "line": "            cost_type=BlockCostType.RUN,"
    },
    {
      "lineno": 85,
      "line": "            cost_filter={"
    },
    {
      "lineno": 86,
      "line": "                \"model\": model,"
    },
    {
      "lineno": 87,
      "line": "                \"credentials\": {"
    },
    {
      "lineno": 88,
      "line": "                    \"id\": anthropic_credentials.id,"
    },
    {
      "lineno": 89,
      "line": "                    \"provider\": anthropic_credentials.provider,"
    },
    {
      "lineno": 90,
      "line": "                    \"type\": anthropic_credentials.type,"
    },
    {
      "lineno": 91,
      "line": "                },"
    },
    {
      "lineno": 92,
      "line": "            },"
    },
    {
      "lineno": 93,
      "line": "            cost_amount=cost,"
    },
    {
      "lineno": 94,
      "line": "        )"
    },
    {
      "lineno": 95,
      "line": "        for model, cost in MODEL_COST.items()"
    },
    {
      "lineno": 96,
      "line": "        if MODEL_METADATA[model].provider == \"anthropic\""
    },
    {
      "lineno": 97,
      "line": "    ]"
    },
    {
      "lineno": 98,
      "line": "    # OpenAI Models"
    },
    {
      "lineno": 99,
      "line": "    + ["
    },
    {
      "lineno": 100,
      "line": "        BlockCost("
    },
    {
      "lineno": 101,
      "line": "            cost_type=BlockCostType.RUN,"
    },
    {
      "lineno": 102,
      "line": "            cost_filter={"
    },
    {
      "lineno": 103,
      "line": "                \"model\": model,"
    },
    {
      "lineno": 104,
      "line": "                \"credentials\": {"
    },
    {
      "lineno": 105,
      "line": "                    \"id\": openai_credentials.id,"
    },
    {
      "lineno": 106,
      "line": "                    \"provider\": openai_credentials.provider,"
    },
    {
      "lineno": 107,
      "line": "                    \"type\": openai_credentials.type,"
    },
    {
      "lineno": 108,
      "line": "                },"
    },
    {
      "lineno": 109,
      "line": "            },"
    },
    {
      "lineno": 110,
      "line": "            cost_amount=cost,"
    },
    {
      "lineno": 111,
      "line": "        )"
    },
    {
      "lineno": 112,
      "line": "        for model, cost in MODEL_COST.items()"
    },
    {
      "lineno": 113,
      "line": "        if MODEL_METADATA[model].provider == \"openai\""
    },
    {
      "lineno": 114,
      "line": "    ]"
    },
    {
      "lineno": 115,
      "line": "    # Groq Models"
    },
    {
      "lineno": 116,
      "line": "    + ["
    },
    {
      "lineno": 117,
      "line": "        BlockCost("
    },
    {
      "lineno": 118,
      "line": "            cost_type=BlockCostType.RUN,"
    },
    {
      "lineno": 119,
      "line": "            cost_filter={"
    },
    {
      "lineno": 120,
      "line": "                \"model\": model,"
    },
    {
      "lineno": 121,
      "line": "                \"credentials\": {\"id\": groq_credentials.id},"
    },
    {
      "lineno": 122,
      "line": "            },"
    },
    {
      "lineno": 123,
      "line": "            cost_amount=cost,"
    },
    {
      "lineno": 124,
      "line": "        )"
    },
    {
      "lineno": 125,
      "line": "        for model, cost in MODEL_COST.items()"
    },
    {
      "lineno": 126,
      "line": "        if MODEL_METADATA[model].provider == \"groq\""
    },
    {
      "lineno": 127,
      "line": "    ]"
    },
    {
      "lineno": 128,
      "line": "    # Open Router Models"
    },
    {
      "lineno": 129,
      "line": "    + ["
    },
    {
      "lineno": 130,
      "line": "        BlockCost("
    },
    {
      "lineno": 131,
      "line": "            cost_type=BlockCostType.RUN,"
    },
    {
      "lineno": 132,
      "line": "            cost_filter={"
    },
    {
      "lineno": 133,
      "line": "                \"model\": model,"
    },
    {
      "lineno": 134,
      "line": "                \"credentials\": {"
    },
    {
      "lineno": 135,
      "line": "                    \"id\": open_router_credentials.id,"
    },
    {
      "lineno": 136,
      "line": "                    \"provider\": open_router_credentials.provider,"
    },
    {
      "lineno": 137,
      "line": "                    \"type\": open_router_credentials.type,"
    },
    {
      "lineno": 138,
      "line": "                },"
    },
    {
      "lineno": 139,
      "line": "            },"
    },
    {
      "lineno": 140,
      "line": "            cost_amount=cost,"
    },
    {
      "lineno": 141,
      "line": "        )"
    },
    {
      "lineno": 142,
      "line": "        for model, cost in MODEL_COST.items()"
    },
    {
      "lineno": 143,
      "line": "        if MODEL_METADATA[model].provider == \"open_router\""
    },
    {
      "lineno": 144,
      "line": "    ]"
    },
    {
      "lineno": 145,
      "line": ")"
    },
    {
      "lineno": 146,
      "line": ""
    },
    {
      "lineno": 147,
      "line": "# =============== This is the exhaustive list of cost for each Block =============== #"
    },
    {
      "lineno": 148,
      "line": ""
    },
    {
      "lineno": 149,
      "line": "BLOCK_COSTS: dict[Type[Block], list[BlockCost]] = {"
    },
    {
      "lineno": 150,
      "line": "    AIConversationBlock: LLM_COST,"
    },
    {
      "lineno": 151,
      "line": "    AITextGeneratorBlock: LLM_COST,"
    },
    {
      "lineno": 152,
      "line": "    AIStructuredResponseGeneratorBlock: LLM_COST,"
    },
    {
      "lineno": 153,
      "line": "    AITextSummarizerBlock: LLM_COST,"
    },
    {
      "lineno": 154,
      "line": "    AIListGeneratorBlock: LLM_COST,"
    },
    {
      "lineno": 155,
      "line": "    CreateTalkingAvatarVideoBlock: ["
    },
    {
      "lineno": 156,
      "line": "        BlockCost("
    },
    {
      "lineno": 157,
      "line": "            cost_amount=15,"
    },
    {
      "lineno": 158,
      "line": "            cost_filter={"
    },
    {
      "lineno": 159,
      "line": "                \"credentials\": {"
    },
    {
      "lineno": 160,
      "line": "                    \"id\": did_credentials.id,"
    },
    {
      "lineno": 161,
      "line": "                    \"provider\": did_credentials.provider,"
    },
    {
      "lineno": 162,
      "line": "                    \"type\": did_credentials.type,"
    },
    {
      "lineno": 163,
      "line": "                }"
    },
    {
      "lineno": 164,
      "line": "            },"
    },
    {
      "lineno": 165,
      "line": "        )"
    },
    {
      "lineno": 166,
      "line": "    ],"
    },
    {
      "lineno": 167,
      "line": "    SearchTheWebBlock: ["
    },
    {
      "lineno": 168,
      "line": "        BlockCost("
    },
    {
      "lineno": 169,
      "line": "            cost_amount=1,"
    },
    {
      "lineno": 170,
      "line": "            cost_filter={"
    },
    {
      "lineno": 171,
      "line": "                \"credentials\": {"
    },
    {
      "lineno": 172,
      "line": "                    \"id\": jina_credentials.id,"
    },
    {
      "lineno": 173,
      "line": "                    \"provider\": jina_credentials.provider,"
    },
    {
      "lineno": 174,
      "line": "                    \"type\": jina_credentials.type,"
    },
    {
      "lineno": 175,
      "line": "                }"
    },
    {
      "lineno": 176,
      "line": "            },"
    },
    {
      "lineno": 177,
      "line": "        )"
    },
    {
      "lineno": 178,
      "line": "    ],"
    },
    {
      "lineno": 179,
      "line": "    ExtractWebsiteContentBlock: ["
    },
    {
      "lineno": 180,
      "line": "        BlockCost("
    },
    {
      "lineno": 181,
      "line": "            cost_amount=1,"
    },
    {
      "lineno": 182,
      "line": "            cost_filter={"
    },
    {
      "lineno": 183,
      "line": "                \"raw_content\": False,"
    },
    {
      "lineno": 184,
      "line": "                \"credentials\": {"
    },
    {
      "lineno": 185,
      "line": "                    \"id\": jina_credentials.id,"
    },
    {
      "lineno": 186,
      "line": "                    \"provider\": jina_credentials.provider,"
    },
    {
      "lineno": 187,
      "line": "                    \"type\": jina_credentials.type,"
    },
    {
      "lineno": 188,
      "line": "                },"
    },
    {
      "lineno": 189,
      "line": "            },"
    },
    {
      "lineno": 190,
      "line": "        )"
    },
    {
      "lineno": 191,
      "line": "    ],"
    },
    {
      "lineno": 192,
      "line": "    IdeogramModelBlock: ["
    },
    {
      "lineno": 193,
      "line": "        BlockCost("
    },
    {
      "lineno": 194,
      "line": "            cost_amount=16,"
    },
    {
      "lineno": 195,
      "line": "            cost_filter={"
    },
    {
      "lineno": 196,
      "line": "                \"credentials\": {"
    },
    {
      "lineno": 197,
      "line": "                    \"id\": ideogram_credentials.id,"
    },
    {
      "lineno": 198,
      "line": "                    \"provider\": ideogram_credentials.provider,"
    },
    {
      "lineno": 199,
      "line": "                    \"type\": ideogram_credentials.type,"
    },
    {
      "lineno": 200,
      "line": "                }"
    },
    {
      "lineno": 201,
      "line": "            },"
    },
    {
      "lineno": 202,
      "line": "        )"
    },
    {
      "lineno": 203,
      "line": "    ],"
    },
    {
      "lineno": 204,
      "line": "    AIShortformVideoCreatorBlock: ["
    },
    {
      "lineno": 205,
      "line": "        BlockCost("
    },
    {
      "lineno": 206,
      "line": "            cost_amount=50,"
    },
    {
      "lineno": 207,
      "line": "            cost_filter={"
    },
    {
      "lineno": 208,
      "line": "                \"credentials\": {"
    },
    {
      "lineno": 209,
      "line": "                    \"id\": revid_credentials.id,"
    },
    {
      "lineno": 210,
      "line": "                    \"provider\": revid_credentials.provider,"
    },
    {
      "lineno": 211,
      "line": "                    \"type\": revid_credentials.type,"
    },
    {
      "lineno": 212,
      "line": "                }"
    },
    {
      "lineno": 213,
      "line": "            },"
    },
    {
      "lineno": 214,
      "line": "        )"
    },
    {
      "lineno": 215,
      "line": "    ],"
    },
    {
      "lineno": 216,
      "line": "    ReplicateFluxAdvancedModelBlock: ["
    },
    {
      "lineno": 217,
      "line": "        BlockCost("
    },
    {
      "lineno": 218,
      "line": "            cost_amount=10,"
    },
    {
      "lineno": 219,
      "line": "            cost_filter={"
    },
    {
      "lineno": 220,
      "line": "                \"credentials\": {"
    },
    {
      "lineno": 221,
      "line": "                    \"id\": replicate_credentials.id,"
    },
    {
      "lineno": 222,
      "line": "                    \"provider\": replicate_credentials.provider,"
    },
    {
      "lineno": 223,
      "line": "                    \"type\": replicate_credentials.type,"
    },
    {
      "lineno": 224,
      "line": "                }"
    },
    {
      "lineno": 225,
      "line": "            },"
    },
    {
      "lineno": 226,
      "line": "        )"
    },
    {
      "lineno": 227,
      "line": "    ],"
    },
    {
      "lineno": 228,
      "line": "    AIMusicGeneratorBlock: ["
    },
    {
      "lineno": 229,
      "line": "        BlockCost("
    },
    {
      "lineno": 230,
      "line": "            cost_amount=11,"
    },
    {
      "lineno": 231,
      "line": "            cost_filter={"
    },
    {
      "lineno": 232,
      "line": "                \"credentials\": {"
    },
    {
      "lineno": 233,
      "line": "                    \"id\": replicate_credentials.id,"
    },
    {
      "lineno": 234,
      "line": "                    \"provider\": replicate_credentials.provider,"
    },
    {
      "lineno": 235,
      "line": "                    \"type\": replicate_credentials.type,"
    },
    {
      "lineno": 236,
      "line": "                }"
    },
    {
      "lineno": 237,
      "line": "            },"
    },
    {
      "lineno": 238,
      "line": "        )"
    },
    {
      "lineno": 239,
      "line": "    ],"
    },
    {
      "lineno": 240,
      "line": "    JinaEmbeddingBlock: ["
    },
    {
      "lineno": 241,
      "line": "        BlockCost("
    },
    {
      "lineno": 242,
      "line": "            cost_amount=12,"
    },
    {
      "lineno": 243,
      "line": "            cost_filter={"
    },
    {
      "lineno": 244,
      "line": "                \"credentials\": {"
    },
    {
      "lineno": 245,
      "line": "                    \"id\": jina_credentials.id,"
    },
    {
      "lineno": 246,
      "line": "                    \"provider\": jina_credentials.provider,"
    },
    {
      "lineno": 247,
      "line": "                    \"type\": jina_credentials.type,"
    },
    {
      "lineno": 248,
      "line": "                }"
    },
    {
      "lineno": 249,
      "line": "            },"
    },
    {
      "lineno": 250,
      "line": "        )"
    },
    {
      "lineno": 251,
      "line": "    ],"
    },
    {
      "lineno": 252,
      "line": "    UnrealTextToSpeechBlock: ["
    },
    {
      "lineno": 253,
      "line": "        BlockCost("
    },
    {
      "lineno": 254,
      "line": "            cost_amount=5,"
    },
    {
      "lineno": 255,
      "line": "            cost_filter={"
    },
    {
      "lineno": 256,
      "line": "                \"credentials\": {"
    },
    {
      "lineno": 257,
      "line": "                    \"id\": unreal_credentials.id,"
    },
    {
      "lineno": 258,
      "line": "                    \"provider\": unreal_credentials.provider,"
    },
    {
      "lineno": 259,
      "line": "                    \"type\": unreal_credentials.type,"
    },
    {
      "lineno": 260,
      "line": "                }"
    },
    {
      "lineno": 261,
      "line": "            },"
    },
    {
      "lineno": 262,
      "line": "        )"
    },
    {
      "lineno": 263,
      "line": "    ],"
    },
    {
      "lineno": 264,
      "line": "}"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 33,
      "label": "from typing import Type\n\nfrom backend.blocks.ai_music_generator import AIMusicGeneratorBlock\nfrom backend.blocks.ai_shortform_video_block import AIShortformVideoCreatorBlock\nfrom backend.blocks.ideogram import IdeogramModelBlock\nfrom backend.blocks.jina.embeddings import JinaEmbeddingBlock\nfrom backend.blocks.jina.search import ExtractWebsiteContentBlock, SearchTheWebBlock\nfrom backend.blocks.llm import (\n    MODEL_METADATA,\n    AIConversationBlock,\n    AIListGeneratorBlock,\n    AIStructuredResponseGeneratorBlock,\n    AITextGeneratorBlock,\n    AITextSummarizerBlock,\n    LlmModel,\n)\nfrom backend.blocks.replicate_flux_advanced import ReplicateFluxAdvancedModelBlock\nfrom backend.blocks.talking_head import CreateTalkingAvatarVideoBlock\nfrom backend.blocks.text_to_speech_block import UnrealTextToSpeechBlock\nfrom backend.data.block import Block\nfrom backend.data.cost import BlockCost, BlockCostType\nfrom backend.integrations.credentials_store import (\n    anthropic_credentials,\n    did_credentials,\n    groq_credentials,\n    ideogram_credentials,\n    jina_credentials,\n    open_router_credentials,\n    openai_credentials,\n    replicate_credentials,\n    revid_credentials,\n    unreal_credentials,\n)\n",
      "successors": [
        {
          "id": 2,
          "start_line": 34,
          "end_line": 73,
          "label": "\n# =============== Configure the cost for each LLM Model call =============== #\n\nMODEL_COST: dict[LlmModel, int] = {\n    LlmModel.O1_PREVIEW: 16,\n    LlmModel.O1_MINI: 4,\n    LlmModel.GPT4O_MINI: 1,\n    LlmModel.GPT4O: 3,\n    LlmModel.GPT4_TURBO: 10,\n    LlmModel.GPT3_5_TURBO: 1,\n    LlmModel.CLAUDE_3_5_SONNET: 4,\n    LlmModel.CLAUDE_3_HAIKU: 1,\n    LlmModel.LLAMA3_8B: 1,\n    LlmModel.LLAMA3_70B: 1,\n    LlmModel.MIXTRAL_8X7B: 1,\n    LlmModel.GEMMA_7B: 1,\n    LlmModel.GEMMA2_9B: 1,\n    LlmModel.LLAMA3_1_405B: 1,\n    LlmModel.LLAMA3_1_70B: 1,\n    LlmModel.LLAMA3_1_8B: 1,\n    LlmModel.OLLAMA_LLAMA3_8B: 1,\n    LlmModel.OLLAMA_LLAMA3_405B: 1,\n    LlmModel.OLLAMA_DOLPHIN: 1,\n    LlmModel.GEMINI_FLASH_1_5_8B: 1,\n    LlmModel.GROK_BETA: 5,\n    LlmModel.MISTRAL_NEMO: 1,\n    LlmModel.COHERE_COMMAND_R_08_2024: 1,\n    LlmModel.COHERE_COMMAND_R_PLUS_08_2024: 3,\n    LlmModel.EVA_QWEN_2_5_32B: 1,\n    LlmModel.DEEPSEEK_CHAT: 2,\n    LlmModel.PERPLEXITY_LLAMA_3_1_SONAR_LARGE_128K_ONLINE: 1,\n    LlmModel.QWEN_QWQ_32B_PREVIEW: 2,\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_405B: 1,\n    LlmModel.NOUSRESEARCH_HERMES_3_LLAMA_3_1_70B: 1,\n    LlmModel.AMAZON_NOVA_LITE_V1: 1,\n    LlmModel.AMAZON_NOVA_MICRO_V1: 1,\n    LlmModel.AMAZON_NOVA_PRO_V1: 1,\n    LlmModel.MICROSOFT_WIZARDLM_2_8X22B: 1,\n    LlmModel.GRYPHE_MYTHOMAX_L2_13B: 1,\n}\n",
          "successors": [
            {
              "id": 3,
              "start_line": 75,
              "end_line": 77,
              "label": "for model in LlmModel:\n    if model not in MODEL_COST:\n        raise ValueError(f\"Missing MODEL_COST for model: {model}\")\n",
              "successors": [
                {
                  "id": 4,
                  "start_line": 80,
                  "end_line": 145,
                  "label": "\n\nLLM_COST = (\n    # Anthropic Models\n    [\n        BlockCost(\n            cost_type=BlockCostType.RUN,\n            cost_filter={\n                \"model\": model,\n                \"credentials\": {\n                    \"id\": anthropic_credentials.id,\n                    \"provider\": anthropic_credentials.provider,\n                    \"type\": anthropic_credentials.type,\n                },\n            },\n            cost_amount=cost,\n        )\n        for model, cost in MODEL_COST.items()\n        if MODEL_METADATA[model].provider == \"anthropic\"\n    ]\n    # OpenAI Models\n    + [\n        BlockCost(\n            cost_type=BlockCostType.RUN,\n            cost_filter={\n                \"model\": model,\n                \"credentials\": {\n                    \"id\": openai_credentials.id,\n                    \"provider\": openai_credentials.provider,\n                    \"type\": openai_credentials.type,\n                },\n            },\n            cost_amount=cost,\n        )\n        for model, cost in MODEL_COST.items()\n        if MODEL_METADATA[model].provider == \"openai\"\n    ]\n    # Groq Models\n    + [\n        BlockCost(\n            cost_type=BlockCostType.RUN,\n            cost_filter={\n                \"model\": model,\n                \"credentials\": {\"id\": groq_credentials.id},\n            },\n            cost_amount=cost,\n        )\n        for model, cost in MODEL_COST.items()\n        if MODEL_METADATA[model].provider == \"groq\"\n    ]\n    # Open Router Models\n    + [\n        BlockCost(\n            cost_type=BlockCostType.RUN,\n            cost_filter={\n                \"model\": model,\n                \"credentials\": {\n                    \"id\": open_router_credentials.id,\n                    \"provider\": open_router_credentials.provider,\n                    \"type\": open_router_credentials.type,\n                },\n            },\n            cost_amount=cost,\n        )\n        for model, cost in MODEL_COST.items()\n        if MODEL_METADATA[model].provider == \"open_router\"\n    ]\n)\n",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 147,
                      "end_line": 264,
                      "label": "\n# =============== This is the exhaustive list of cost for each Block =============== #\n\nBLOCK_COSTS: dict[Type[Block], list[BlockCost]] = {\n    AIConversationBlock: LLM_COST,\n    AITextGeneratorBlock: LLM_COST,\n    AIStructuredResponseGeneratorBlock: LLM_COST,\n    AITextSummarizerBlock: LLM_COST,\n    AIListGeneratorBlock: LLM_COST,\n    CreateTalkingAvatarVideoBlock: [\n        BlockCost(\n            cost_amount=15,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": did_credentials.id,\n                    \"provider\": did_credentials.provider,\n                    \"type\": did_credentials.type,\n                }\n            },\n        )\n    ],\n    SearchTheWebBlock: [\n        BlockCost(\n            cost_amount=1,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": jina_credentials.id,\n                    \"provider\": jina_credentials.provider,\n                    \"type\": jina_credentials.type,\n                }\n            },\n        )\n    ],\n    ExtractWebsiteContentBlock: [\n        BlockCost(\n            cost_amount=1,\n            cost_filter={\n                \"raw_content\": False,\n                \"credentials\": {\n                    \"id\": jina_credentials.id,\n                    \"provider\": jina_credentials.provider,\n                    \"type\": jina_credentials.type,\n                },\n            },\n        )\n    ],\n    IdeogramModelBlock: [\n        BlockCost(\n            cost_amount=16,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": ideogram_credentials.id,\n                    \"provider\": ideogram_credentials.provider,\n                    \"type\": ideogram_credentials.type,\n                }\n            },\n        )\n    ],\n    AIShortformVideoCreatorBlock: [\n        BlockCost(\n            cost_amount=50,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": revid_credentials.id,\n                    \"provider\": revid_credentials.provider,\n                    \"type\": revid_credentials.type,\n                }\n            },\n        )\n    ],\n    ReplicateFluxAdvancedModelBlock: [\n        BlockCost(\n            cost_amount=10,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": replicate_credentials.id,\n                    \"provider\": replicate_credentials.provider,\n                    \"type\": replicate_credentials.type,\n                }\n            },\n        )\n    ],\n    AIMusicGeneratorBlock: [\n        BlockCost(\n            cost_amount=11,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": replicate_credentials.id,\n                    \"provider\": replicate_credentials.provider,\n                    \"type\": replicate_credentials.type,\n                }\n            },\n        )\n    ],\n    JinaEmbeddingBlock: [\n        BlockCost(\n            cost_amount=12,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": jina_credentials.id,\n                    \"provider\": jina_credentials.provider,\n                    \"type\": jina_credentials.type,\n                }\n            },\n        )\n    ],\n    UnrealTextToSpeechBlock: [\n        BlockCost(\n            cost_amount=5,\n            cost_filter={\n                \"credentials\": {\n                    \"id\": unreal_credentials.id,\n                    \"provider\": unreal_credentials.provider,\n                    \"type\": unreal_credentials.type,\n                }\n            },\n        )\n    ],\n}\n",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}