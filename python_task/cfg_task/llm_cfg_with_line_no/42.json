{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 30,
  "functions": [],
  "classes": [
    {
      "name": "ManualWebhookManagerBase",
      "type": "class",
      "start_line": 11,
      "end_line": 30,
      "functions": [
        {
          "name": "_register_webhook",
          "type": "function",
          "start_line": 12,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 12,
              "line": "    async def _register_webhook("
            },
            {
              "lineno": 13,
              "line": "        self,"
            },
            {
              "lineno": 14,
              "line": "        credentials: Credentials,"
            },
            {
              "lineno": 15,
              "line": "        webhook_type: WT,"
            },
            {
              "lineno": 16,
              "line": "        resource: str,"
            },
            {
              "lineno": 17,
              "line": "        events: list[str],"
            },
            {
              "lineno": 18,
              "line": "        ingress_url: str,"
            },
            {
              "lineno": 19,
              "line": "        secret: str,"
            },
            {
              "lineno": 20,
              "line": "    ) -> tuple[str, dict]:"
            },
            {
              "lineno": 21,
              "line": "        print(ingress_url)  # FIXME: pass URL to user in front end"
            },
            {
              "lineno": 22,
              "line": ""
            },
            {
              "lineno": 23,
              "line": "        return \"\", {}"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 12,
              "end_line": 20,
              "label": "    async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: WT,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 21,
                  "end_line": 21,
                  "label": "        print(ingress_url)  # FIXME: pass URL to user in front end",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 23,
                      "end_line": 23,
                      "label": "        return \"\", {}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_deregister_webhook",
          "type": "function",
          "start_line": 25,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    async def _deregister_webhook("
            },
            {
              "lineno": 26,
              "line": "        self,"
            },
            {
              "lineno": 27,
              "line": "        webhook: integrations.Webhook,"
            },
            {
              "lineno": 28,
              "line": "        credentials: OAuth2Credentials | APIKeyCredentials,"
            },
            {
              "lineno": 29,
              "line": "    ) -> None:"
            },
            {
              "lineno": 30,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 25,
              "end_line": 30,
              "label": "    async def _deregister_webhook(\n        self,\n        webhook: integrations.Webhook,\n        credentials: OAuth2Credentials | APIKeyCredentials,\n    ) -> None:\n        pass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "class ManualWebhookManagerBase(BaseWebhooksManager[WT]):"
        },
        {
          "lineno": 24,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 11,
          "end_line": 11,
          "label": "class ManualWebhookManagerBase(BaseWebhooksManager[WT]):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from backend.data import integrations"
    },
    {
      "lineno": 4,
      "line": "from backend.data.model import APIKeyCredentials, Credentials, OAuth2Credentials"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from ._base import WT, BaseWebhooksManager"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "import logging",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 4,
          "label": "from backend.data import integrations\nfrom backend.data.model import APIKeyCredentials, Credentials, OAuth2Credentials",
          "successors": [
            {
              "id": 3,
              "start_line": 6,
              "end_line": 6,
              "label": "from ._base import WT, BaseWebhooksManager",
              "successors": [
                {
                  "id": 4,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "logger = logging.getLogger(__name__)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}