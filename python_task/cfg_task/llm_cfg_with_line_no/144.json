{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 14,
  "functions": [],
  "classes": [
    {
      "name": "JsonFileHandler",
      "type": "class",
      "start_line": 7,
      "end_line": 14,
      "functions": [
        {
          "name": "format",
          "type": "function",
          "start_line": 8,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 8,
              "line": "    def format(self, record: logging.LogRecord) -> str:"
            },
            {
              "lineno": 9,
              "line": "        record.json_data = json.loads(record.getMessage())"
            },
            {
              "lineno": 10,
              "line": "        return json.dumps(getattr(record, \"json_data\"), ensure_ascii=False, indent=4)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 8,
              "end_line": 10,
              "label": "    def format(self, record: logging.LogRecord) -> str:\n        record.json_data = json.loads(record.getMessage())\n        return json.dumps(getattr(record, \"json_data\"), ensure_ascii=False, indent=4)",
              "successors": []
            }
          ]
        },
        {
          "name": "emit",
          "type": "function",
          "start_line": 12,
          "end_line": 14,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 12,
              "line": "    def emit(self, record: logging.LogRecord) -> None:"
            },
            {
              "lineno": 13,
              "line": "        with open(self.baseFilename, \"w\", encoding=\"utf-8\") as f:"
            },
            {
              "lineno": 14,
              "line": "            f.write(self.format(record))"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 12,
              "end_line": 12,
              "label": "    def emit(self, record: logging.LogRecord) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 13,
                  "end_line": 14,
                  "label": "        with open(self.baseFilename, \"w\", encoding=\"utf-8\") as f:\n            f.write(self.format(record))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "class JsonFileHandler(logging.FileHandler):"
        },
        {
          "lineno": 11,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 7,
          "end_line": 7,
          "label": "class JsonFileHandler(logging.FileHandler):",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 9,
              "label": "def __init__(self, filename, mode='a'):\n    logging.FileHandler.__init__(self, filename, mode)",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from __future__ import annotations"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import json"
    },
    {
      "lineno": 4,
      "line": "import logging"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "from __future__ import annotations",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 4,
          "label": "import json\nimport logging",
          "successors": []
        }
      ]
    }
  ]
}