{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 33,
  "functions": [
    {
      "name": "run",
      "type": "function",
      "start_line": 11,
      "end_line": 13,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "def run(*command: str) -> None:"
        },
        {
          "lineno": 12,
          "line": "    print(f\">>>>> Running poetry run {' '.join(command)}\")"
        },
        {
          "lineno": 13,
          "line": "    subprocess.run([\"poetry\", \"run\"] + list(command), cwd=directory, check=True)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 11,
          "end_line": 13,
          "label": "def run(*command: str) -> None:\n    print(f\">>>>> Running poetry run {' '.join(command)}\")\n    subprocess.run([\"poetry\", \"run\"] + list(command), cwd=directory, check=True)",
          "successors": []
        }
      ]
    },
    {
      "name": "lint",
      "type": "function",
      "start_line": 16,
      "end_line": 25,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "def lint():"
        },
        {
          "lineno": 17,
          "line": "    try:"
        },
        {
          "lineno": 18,
          "line": "        run(\"ruff\", \"check\", *TARGET_DIRS, \"--exit-zero\")"
        },
        {
          "lineno": 19,
          "line": "        run(\"ruff\", \"format\", \"--diff\", \"--check\", LIBS_DIR)"
        },
        {
          "lineno": 20,
          "line": "        run(\"isort\", \"--diff\", \"--check\", \"--profile\", \"black\", BACKEND_DIR)"
        },
        {
          "lineno": 21,
          "line": "        run(\"black\", \"--diff\", \"--check\", BACKEND_DIR)"
        },
        {
          "lineno": 22,
          "line": "        run(\"pyright\", *TARGET_DIRS)"
        },
        {
          "lineno": 23,
          "line": "    except subprocess.CalledProcessError as e:"
        },
        {
          "lineno": 24,
          "line": "        print(\"Lint failed, try running `poetry run format` to fix the issues: \", e)"
        },
        {
          "lineno": 25,
          "line": "        raise e"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 16,
          "label": "def lint():",
          "successors": [
            {
              "id": 2,
              "start_line": 17,
              "end_line": 18,
              "label": "try:\n    run(\"ruff\", \"check\", *TARGET_DIRS, \"--exit-zero\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 19,
                  "end_line": 19,
                  "label": "run(\"ruff\", \"format\", \"--diff\", \"--check\", LIBS_DIR)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 20,
                      "end_line": 20,
                      "label": "run(\"isort\", \"--diff\", \"--check\", \"--profile\", \"black\", BACKEND_DIR)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 21,
                          "end_line": 21,
                          "label": "run(\"black\", \"--diff\", \"--check\", BACKEND_DIR)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 22,
                              "end_line": 22,
                              "label": "run(\"pyright\", *TARGET_DIRS)",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 23,
                                  "end_line": 25,
                                  "label": "except subprocess.CalledProcessError as e:\n    print(\"Lint failed, try running `poetry run format` to fix the issues: \", e)\n    raise e",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "format",
      "type": "function",
      "start_line": 28,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 28,
          "line": "def format():"
        },
        {
          "lineno": 29,
          "line": "    run(\"ruff\", \"check\", \"--fix\", *TARGET_DIRS)"
        },
        {
          "lineno": 30,
          "line": "    run(\"ruff\", \"format\", LIBS_DIR)"
        },
        {
          "lineno": 31,
          "line": "    run(\"isort\", \"--profile\", \"black\", BACKEND_DIR)"
        },
        {
          "lineno": 32,
          "line": "    run(\"black\", BACKEND_DIR)"
        },
        {
          "lineno": 33,
          "line": "    run(\"pyright\", *TARGET_DIRS)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 28,
          "end_line": 33,
          "label": "def format():\n    run(\"ruff\", \"check\", \"--fix\", *TARGET_DIRS)\n    run(\"ruff\", \"format\", LIBS_DIR)\n    run(\"isort\", \"--profile\", \"black\", BACKEND_DIR)\n    run(\"black\", BACKEND_DIR)\n    run(\"pyright\", *TARGET_DIRS)",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import os"
    },
    {
      "lineno": 2,
      "line": "import subprocess"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "directory = os.path.dirname(os.path.realpath(__file__))"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "BACKEND_DIR = \".\""
    },
    {
      "lineno": 7,
      "line": "LIBS_DIR = \"../autogpt_libs\""
    },
    {
      "lineno": 8,
      "line": "TARGET_DIRS = [BACKEND_DIR, LIBS_DIR]"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 27,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "import os\nimport subprocess",
      "successors": [
        {
          "id": 2,
          "start_line": 4,
          "end_line": 4,
          "label": "directory = os.path.dirname(os.path.realpath(__file__))",
          "successors": [
            {
              "id": 3,
              "start_line": 6,
              "end_line": 8,
              "label": "BACKEND_DIR = \".\"\nLIBS_DIR = \"../autogpt_libs\"\nTARGET_DIRS = [BACKEND_DIR, LIBS_DIR]",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}