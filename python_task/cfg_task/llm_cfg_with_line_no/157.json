{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 84,
  "functions": [
    {
      "name": "connect",
      "type": "function",
      "start_line": 22,
      "end_line": 35,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 22,
          "line": "def connect() -> Redis:"
        },
        {
          "lineno": 23,
          "line": "    global connection"
        },
        {
          "lineno": 24,
          "line": "    if connection:"
        },
        {
          "lineno": 25,
          "line": "        return connection"
        },
        {
          "lineno": 26,
          "line": ""
        },
        {
          "lineno": 27,
          "line": "    c = Redis("
        },
        {
          "lineno": 28,
          "line": "        host=HOST,"
        },
        {
          "lineno": 29,
          "line": "        port=PORT,"
        },
        {
          "lineno": 30,
          "line": "        password=PASSWORD,"
        },
        {
          "lineno": 31,
          "line": "        decode_responses=True,"
        },
        {
          "lineno": 32,
          "line": "    )"
        },
        {
          "lineno": 33,
          "line": "    c.ping()"
        },
        {
          "lineno": 34,
          "line": "    connection = c"
        },
        {
          "lineno": 35,
          "line": "    return connection"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 22,
          "end_line": 24,
          "label": "def connect() -> Redis:\n    global connection\n    if connection:",
          "successors": [
            {
              "id": 2,
              "start_line": 25,
              "end_line": 25,
              "label": "return connection",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 27,
              "end_line": 35,
              "label": "c = Redis(\n        host=HOST,\n        port=PORT,\n        password=PASSWORD,\n        decode_responses=True,\n    )\n    c.ping()\n    connection = c\n    return connection",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "disconnect",
      "type": "function",
      "start_line": 39,
      "end_line": 43,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 39,
          "line": "def disconnect():"
        },
        {
          "lineno": 40,
          "line": "    global connection"
        },
        {
          "lineno": 41,
          "line": "    if connection:"
        },
        {
          "lineno": 42,
          "line": "        connection.close()"
        },
        {
          "lineno": 43,
          "line": "    connection = None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 39,
          "end_line": 40,
          "label": "def disconnect():\n    global connection",
          "successors": [
            {
              "id": 2,
              "start_line": 41,
              "end_line": 42,
              "label": "if connection:\n        connection.close()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 43,
                  "end_line": 43,
                  "label": "connection = None",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 43,
              "end_line": 43,
              "label": "connection = None",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_redis",
      "type": "function",
      "start_line": 46,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 46,
          "line": "def get_redis(auto_connect: bool = True) -> Redis:"
        },
        {
          "lineno": 47,
          "line": "    if connection:"
        },
        {
          "lineno": 48,
          "line": "        return connection"
        },
        {
          "lineno": 49,
          "line": "    if auto_connect:"
        },
        {
          "lineno": 50,
          "line": "        return connect()"
        },
        {
          "lineno": 51,
          "line": "    raise RuntimeError(\"Redis connection is not established\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 46,
          "end_line": 46,
          "label": "def get_redis(auto_connect: bool = True) -> Redis:",
          "successors": [
            {
              "id": 2,
              "start_line": 47,
              "end_line": 48,
              "label": "if connection:\n    return connection",
              "successors": [
                {
                  "id": 3,
                  "start_line": 49,
                  "end_line": 50,
                  "label": "if auto_connect:\n    return connect()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 51,
                      "end_line": 51,
                      "label": "raise RuntimeError(\"Redis connection is not established\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "connect_async",
      "type": "function",
      "start_line": 55,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 55,
          "line": "async def connect_async() -> AsyncRedis:"
        },
        {
          "lineno": 56,
          "line": "    global connection_async"
        },
        {
          "lineno": 57,
          "line": "    if connection_async:"
        },
        {
          "lineno": 58,
          "line": "        return connection_async"
        },
        {
          "lineno": 59,
          "line": ""
        },
        {
          "lineno": 60,
          "line": "    c = AsyncRedis("
        },
        {
          "lineno": 61,
          "line": "        host=HOST,"
        },
        {
          "lineno": 62,
          "line": "        port=PORT,"
        },
        {
          "lineno": 63,
          "line": "        password=PASSWORD,"
        },
        {
          "lineno": 64,
          "line": "        decode_responses=True,"
        },
        {
          "lineno": 65,
          "line": "    )"
        },
        {
          "lineno": 66,
          "line": "    await c.ping()"
        },
        {
          "lineno": 67,
          "line": "    connection_async = c"
        },
        {
          "lineno": 68,
          "line": "    return connection_async"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 55,
          "end_line": 56,
          "label": "async def connect_async() -> AsyncRedis:\n    global connection_async",
          "successors": [
            {
              "id": 2,
              "start_line": 57,
              "end_line": 58,
              "label": "if connection_async:\n        return connection_async",
              "successors": [
                {
                  "id": 3,
                  "start_line": 60,
                  "end_line": 68,
                  "label": "c = AsyncRedis(\n        host=HOST,\n        port=PORT,\n        password=PASSWORD,\n        decode_responses=True,\n    )\n    await c.ping()\n    connection_async = c\n    return connection_async",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 60,
              "end_line": 68,
              "label": "c = AsyncRedis(\n        host=HOST,\n        port=PORT,\n        password=PASSWORD,\n        decode_responses=True,\n    )\n    await c.ping()\n    connection_async = c\n    return connection_async",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "disconnect_async",
      "type": "function",
      "start_line": 72,
      "end_line": 76,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 72,
          "line": "async def disconnect_async():"
        },
        {
          "lineno": 73,
          "line": "    global connection_async"
        },
        {
          "lineno": 74,
          "line": "    if connection_async:"
        },
        {
          "lineno": 75,
          "line": "        await connection_async.close()"
        },
        {
          "lineno": 76,
          "line": "    connection_async = None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 72,
          "end_line": 74,
          "label": "async def disconnect_async():\n    global connection_async\n    if connection_async:",
          "successors": [
            {
              "id": 2,
              "start_line": 75,
              "end_line": 75,
              "label": "await connection_async.close()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 76,
                  "end_line": 76,
                  "label": "connection_async = None",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 76,
              "end_line": 76,
              "label": "connection_async = None",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_redis_async",
      "type": "function",
      "start_line": 79,
      "end_line": 84,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 79,
          "line": "async def get_redis_async(auto_connect: bool = True) -> AsyncRedis:"
        },
        {
          "lineno": 80,
          "line": "    if connection_async:"
        },
        {
          "lineno": 81,
          "line": "        return connection_async"
        },
        {
          "lineno": 82,
          "line": "    if auto_connect:"
        },
        {
          "lineno": 83,
          "line": "        return await connect_async()"
        },
        {
          "lineno": 84,
          "line": "    raise RuntimeError(\"AsyncRedis connection is not established\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 79,
          "end_line": 79,
          "label": "async def get_redis_async(auto_connect: bool = True) -> AsyncRedis:",
          "successors": [
            {
              "id": 2,
              "start_line": 80,
              "end_line": 81,
              "label": "if connection_async:\n        return connection_async",
              "successors": [
                {
                  "id": 3,
                  "start_line": 82,
                  "end_line": 83,
                  "label": "if auto_connect:\n        return await connect_async()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 84,
                      "end_line": 84,
                      "label": "raise RuntimeError(\"AsyncRedis connection is not established\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "import os"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from dotenv import load_dotenv"
    },
    {
      "lineno": 5,
      "line": "from redis import Redis"
    },
    {
      "lineno": 6,
      "line": "from redis.asyncio import Redis as AsyncRedis"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from backend.util.retry import conn_retry"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": "load_dotenv()"
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": "HOST = os.getenv(\"REDIS_HOST\", \"localhost\")"
    },
    {
      "lineno": 13,
      "line": "PORT = int(os.getenv(\"REDIS_PORT\", \"6379\"))"
    },
    {
      "lineno": 14,
      "line": "PASSWORD = os.getenv(\"REDIS_PASSWORD\", \"password\")"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 17,
      "line": "connection: Redis | None = None"
    },
    {
      "lineno": 18,
      "line": "connection_async: AsyncRedis | None = None"
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": "@conn_retry(\"Redis\", \"Acquiring connection\")"
    },
    {
      "lineno": 36,
      "line": ""
    },
    {
      "lineno": 37,
      "line": ""
    },
    {
      "lineno": 38,
      "line": "@conn_retry(\"Redis\", \"Releasing connection\")"
    },
    {
      "lineno": 44,
      "line": ""
    },
    {
      "lineno": 45,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 53,
      "line": ""
    },
    {
      "lineno": 54,
      "line": "@conn_retry(\"AsyncRedis\", \"Acquiring connection\")"
    },
    {
      "lineno": 69,
      "line": ""
    },
    {
      "lineno": 70,
      "line": ""
    },
    {
      "lineno": 71,
      "line": "@conn_retry(\"AsyncRedis\", \"Releasing connection\")"
    },
    {
      "lineno": 77,
      "line": ""
    },
    {
      "lineno": 78,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 14,
      "label": "import logging\nimport os\n\nfrom dotenv import load_dotenv\nfrom redis import Redis\nfrom redis.asyncio import Redis as AsyncRedis\n\nfrom backend.util.retry import conn_retry\n\nload_dotenv()\n\nHOST = os.getenv(\"REDIS_HOST\", \"localhost\")\nPORT = int(os.getenv(\"REDIS_PORT\", \"6379\"))\nPASSWORD = os.getenv(\"REDIS_PASSWORD\", \"password\")",
      "successors": [
        {
          "id": 2,
          "start_line": 16,
          "end_line": 18,
          "label": "logger = logging.getLogger(__name__)\nconnection: Redis | None = None\nconnection_async: AsyncRedis | None = None",
          "successors": [
            {
              "id": 3,
              "start_line": 21,
              "end_line": 21,
              "label": "@conn_retry(\"Redis\", \"Acquiring connection\")",
              "successors": [
                {
                  "id": 4,
                  "start_line": 38,
                  "end_line": 38,
                  "label": "@conn_retry(\"Redis\", \"Releasing connection\")",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 54,
                      "end_line": 54,
                      "label": "@conn_retry(\"AsyncRedis\", \"Acquiring connection\")",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 71,
                          "end_line": 71,
                          "label": "@conn_retry(\"AsyncRedis\", \"Releasing connection\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}