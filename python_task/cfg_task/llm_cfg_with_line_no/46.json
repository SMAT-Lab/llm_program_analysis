{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 128,
  "functions": [],
  "classes": [
    {
      "name": "ExaFindSimilarBlock",
      "type": "class",
      "start_line": 16,
      "end_line": 128,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 71,
          "end_line": 78,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 71,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 72,
              "line": "        super().__init__("
            },
            {
              "lineno": 73,
              "line": "            id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\","
            },
            {
              "lineno": 74,
              "line": "            description=\"Finds similar links using Exa's findSimilar API\","
            },
            {
              "lineno": 75,
              "line": "            categories={BlockCategory.SEARCH},"
            },
            {
              "lineno": 76,
              "line": "            input_schema=ExaFindSimilarBlock.Input,"
            },
            {
              "lineno": 77,
              "line": "            output_schema=ExaFindSimilarBlock.Output,"
            },
            {
              "lineno": 78,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 71,
              "end_line": 78,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\",\n            description=\"Finds similar links using Exa's findSimilar API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaFindSimilarBlock.Input,\n            output_schema=ExaFindSimilarBlock.Output,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 80,
          "end_line": 128,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 80,
              "line": "    def run("
            },
            {
              "lineno": 81,
              "line": "        self, input_data: Input, *, credentials: ExaCredentials, **kwargs"
            },
            {
              "lineno": 82,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 83,
              "line": "        url = \"https://api.exa.ai/findSimilar\""
            },
            {
              "lineno": 84,
              "line": "        headers = {"
            },
            {
              "lineno": 85,
              "line": "            \"Content-Type\": \"application/json\","
            },
            {
              "lineno": 86,
              "line": "            \"x-api-key\": credentials.api_key.get_secret_value(),"
            },
            {
              "lineno": 87,
              "line": "        }"
            },
            {
              "lineno": 88,
              "line": ""
            },
            {
              "lineno": 89,
              "line": "        payload = {"
            },
            {
              "lineno": 90,
              "line": "            \"url\": input_data.url,"
            },
            {
              "lineno": 91,
              "line": "            \"numResults\": input_data.number_of_results,"
            },
            {
              "lineno": 92,
              "line": "            \"contents\": input_data.contents.dict(),"
            },
            {
              "lineno": 93,
              "line": "        }"
            },
            {
              "lineno": 94,
              "line": ""
            },
            {
              "lineno": 95,
              "line": "        optional_field_mapping = {"
            },
            {
              "lineno": 96,
              "line": "            \"include_domains\": \"includeDomains\","
            },
            {
              "lineno": 97,
              "line": "            \"exclude_domains\": \"excludeDomains\","
            },
            {
              "lineno": 98,
              "line": "            \"include_text\": \"includeText\","
            },
            {
              "lineno": 99,
              "line": "            \"exclude_text\": \"excludeText\","
            },
            {
              "lineno": 100,
              "line": "        }"
            },
            {
              "lineno": 101,
              "line": ""
            },
            {
              "lineno": 102,
              "line": "        # Add optional fields if they have values"
            },
            {
              "lineno": 103,
              "line": "        for input_field, api_field in optional_field_mapping.items():"
            },
            {
              "lineno": 104,
              "line": "            value = getattr(input_data, input_field)"
            },
            {
              "lineno": 105,
              "line": "            if value:  # Only add non-empty values"
            },
            {
              "lineno": 106,
              "line": "                payload[api_field] = value"
            },
            {
              "lineno": 107,
              "line": ""
            },
            {
              "lineno": 108,
              "line": "        date_field_mapping = {"
            },
            {
              "lineno": 109,
              "line": "            \"start_crawl_date\": \"startCrawlDate\","
            },
            {
              "lineno": 110,
              "line": "            \"end_crawl_date\": \"endCrawlDate\","
            },
            {
              "lineno": 111,
              "line": "            \"start_published_date\": \"startPublishedDate\","
            },
            {
              "lineno": 112,
              "line": "            \"end_published_date\": \"endPublishedDate\","
            },
            {
              "lineno": 113,
              "line": "        }"
            },
            {
              "lineno": 114,
              "line": ""
            },
            {
              "lineno": 115,
              "line": "        # Add dates if they exist"
            },
            {
              "lineno": 116,
              "line": "        for input_field, api_field in date_field_mapping.items():"
            },
            {
              "lineno": 117,
              "line": "            value = getattr(input_data, input_field, None)"
            },
            {
              "lineno": 118,
              "line": "            if value:"
            },
            {
              "lineno": 119,
              "line": "                payload[api_field] = value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\")"
            },
            {
              "lineno": 120,
              "line": ""
            },
            {
              "lineno": 121,
              "line": "        try:"
            },
            {
              "lineno": 122,
              "line": "            response = requests.post(url, headers=headers, json=payload)"
            },
            {
              "lineno": 123,
              "line": "            response.raise_for_status()"
            },
            {
              "lineno": 124,
              "line": "            data = response.json()"
            },
            {
              "lineno": 125,
              "line": "            yield \"results\", data.get(\"results\", [])"
            },
            {
              "lineno": 126,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 127,
              "line": "            yield \"error\", str(e)"
            },
            {
              "lineno": 128,
              "line": "            yield \"results\", []"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 80,
              "end_line": 102,
              "label": "    def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.exa.ai/findSimilar\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n\n        payload = {\n            \"url\": input_data.url,\n            \"numResults\": input_data.number_of_results,\n            \"contents\": input_data.contents.dict(),\n        }\n\n        optional_field_mapping = {\n            \"include_domains\": \"includeDomains\",\n            \"exclude_domains\": \"excludeDomains\",\n            \"include_text\": \"includeText\",\n            \"exclude_text\": \"excludeText\",\n        }\n\n        # Add optional fields if they have values",
              "successors": [
                {
                  "id": 2,
                  "start_line": 103,
                  "end_line": 107,
                  "label": "        for input_field, api_field in optional_field_mapping.items():\n            value = getattr(input_data, input_field)\n            if value:  # Only add non-empty values\n                payload[api_field] = value\n",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 108,
                      "end_line": 115,
                      "label": "        date_field_mapping = {\n            \"start_crawl_date\": \"startCrawlDate\",\n            \"end_crawl_date\": \"endCrawlDate\",\n            \"start_published_date\": \"startPublishedDate\",\n            \"end_published_date\": \"endPublishedDate\",\n        }\n\n        # Add dates if they exist",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 116,
                          "end_line": 120,
                          "label": "        for input_field, api_field in date_field_mapping.items():\n            value = getattr(input_data, input_field, None)\n            if value:\n                payload[api_field] = value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\")\n",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 121,
                              "end_line": 125,
                              "label": "        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 126,
                                  "end_line": 128,
                                  "label": "        except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []\n",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 17,
          "end_line": 63,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 17,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 18,
              "line": "        credentials: ExaCredentialsInput = ExaCredentialsField()"
            },
            {
              "lineno": 19,
              "line": "        url: str = SchemaField("
            },
            {
              "lineno": 20,
              "line": "            description=\"The url for which you would like to find similar links\""
            },
            {
              "lineno": 21,
              "line": "        )"
            },
            {
              "lineno": 22,
              "line": "        number_of_results: int = SchemaField("
            },
            {
              "lineno": 23,
              "line": "            description=\"Number of results to return\","
            },
            {
              "lineno": 24,
              "line": "            default=10,"
            },
            {
              "lineno": 25,
              "line": "            advanced=True,"
            },
            {
              "lineno": 26,
              "line": "        )"
            },
            {
              "lineno": 27,
              "line": "        include_domains: List[str] = SchemaField("
            },
            {
              "lineno": 28,
              "line": "            description=\"Domains to include in search\","
            },
            {
              "lineno": 29,
              "line": "            default=[],"
            },
            {
              "lineno": 30,
              "line": "            advanced=True,"
            },
            {
              "lineno": 31,
              "line": "        )"
            },
            {
              "lineno": 32,
              "line": "        exclude_domains: List[str] = SchemaField("
            },
            {
              "lineno": 33,
              "line": "            description=\"Domains to exclude from search\","
            },
            {
              "lineno": 34,
              "line": "            default=[],"
            },
            {
              "lineno": 35,
              "line": "            advanced=True,"
            },
            {
              "lineno": 36,
              "line": "        )"
            },
            {
              "lineno": 37,
              "line": "        start_crawl_date: datetime = SchemaField("
            },
            {
              "lineno": 38,
              "line": "            description=\"Start date for crawled content\","
            },
            {
              "lineno": 39,
              "line": "        )"
            },
            {
              "lineno": 40,
              "line": "        end_crawl_date: datetime = SchemaField("
            },
            {
              "lineno": 41,
              "line": "            description=\"End date for crawled content\","
            },
            {
              "lineno": 42,
              "line": "        )"
            },
            {
              "lineno": 43,
              "line": "        start_published_date: datetime = SchemaField("
            },
            {
              "lineno": 44,
              "line": "            description=\"Start date for published content\","
            },
            {
              "lineno": 45,
              "line": "        )"
            },
            {
              "lineno": 46,
              "line": "        end_published_date: datetime = SchemaField("
            },
            {
              "lineno": 47,
              "line": "            description=\"End date for published content\","
            },
            {
              "lineno": 48,
              "line": "        )"
            },
            {
              "lineno": 49,
              "line": "        include_text: List[str] = SchemaField("
            },
            {
              "lineno": 50,
              "line": "            description=\"Text patterns to include (max 1 string, up to 5 words)\","
            },
            {
              "lineno": 51,
              "line": "            default=[],"
            },
            {
              "lineno": 52,
              "line": "            advanced=True,"
            },
            {
              "lineno": 53,
              "line": "        )"
            },
            {
              "lineno": 54,
              "line": "        exclude_text: List[str] = SchemaField("
            },
            {
              "lineno": 55,
              "line": "            description=\"Text patterns to exclude (max 1 string, up to 5 words)\","
            },
            {
              "lineno": 56,
              "line": "            default=[],"
            },
            {
              "lineno": 57,
              "line": "            advanced=True,"
            },
            {
              "lineno": 58,
              "line": "        )"
            },
            {
              "lineno": 59,
              "line": "        contents: ContentSettings = SchemaField("
            },
            {
              "lineno": 60,
              "line": "            description=\"Content retrieval settings\","
            },
            {
              "lineno": 61,
              "line": "            default=ContentSettings(),"
            },
            {
              "lineno": 62,
              "line": "            advanced=True,"
            },
            {
              "lineno": 63,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 17,
              "end_line": 63,
              "label": "    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        url: str = SchemaField(\n            description=\"The url for which you would like to find similar links\"\n        )\n        number_of_results: int = SchemaField(\n            description=\"Number of results to return\",\n            default=10,\n            advanced=True,\n        )\n        include_domains: List[str] = SchemaField(\n            description=\"Domains to include in search\",\n            default=[],\n            advanced=True,\n        )\n        exclude_domains: List[str] = SchemaField(\n            description=\"Domains to exclude from search\",\n            default=[],\n            advanced=True,\n        )\n        start_crawl_date: datetime = SchemaField(\n            description=\"Start date for crawled content\",\n        )\n        end_crawl_date: datetime = SchemaField(\n            description=\"End date for crawled content\",\n        )\n        start_published_date: datetime = SchemaField(\n            description=\"Start date for published content\",\n        )\n        end_published_date: datetime = SchemaField(\n            description=\"End date for published content\",\n        )\n        include_text: List[str] = SchemaField(\n            description=\"Text patterns to include (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        exclude_text: List[str] = SchemaField(\n            description=\"Text patterns to exclude (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        contents: ContentSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentSettings(),\n            advanced=True,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 65,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 65,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 66,
              "line": "        results: List[Any] = SchemaField("
            },
            {
              "lineno": 67,
              "line": "            description=\"List of similar documents with title, URL, published date, author, and score\","
            },
            {
              "lineno": 68,
              "line": "            default=[],"
            },
            {
              "lineno": 69,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 65,
              "end_line": 69,
              "label": "    class Output(BlockSchema):\n        results: List[Any] = SchemaField(\n            description=\"List of similar documents with title, URL, published date, author, and score\",\n            default=[],\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "class ExaFindSimilarBlock(Block):"
        },
        {
          "lineno": 64,
          "line": ""
        },
        {
          "lineno": 70,
          "line": ""
        },
        {
          "lineno": 79,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 16,
          "label": "class ExaFindSimilarBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 64,
          "end_line": 64,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 70,
          "end_line": 70,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 79,
          "end_line": 79,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from datetime import datetime"
    },
    {
      "lineno": 2,
      "line": "from typing import Any, List"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from backend.blocks.exa._auth import ("
    },
    {
      "lineno": 5,
      "line": "    ExaCredentials,"
    },
    {
      "lineno": 6,
      "line": "    ExaCredentialsField,"
    },
    {
      "lineno": 7,
      "line": "    ExaCredentialsInput,"
    },
    {
      "lineno": 8,
      "line": ")"
    },
    {
      "lineno": 9,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 10,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 11,
      "line": "from backend.util.request import requests"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "from .helpers import ContentSettings"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 15,
      "label": "from datetime import datetime\nfrom typing import Any, List\n\nfrom backend.blocks.exa._auth import (\n    ExaCredentials,\n    ExaCredentialsField,\n    ExaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\nfrom .helpers import ContentSettings\n",
      "successors": []
    }
  ]
}