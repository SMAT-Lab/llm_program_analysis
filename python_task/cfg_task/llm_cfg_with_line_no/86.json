{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 98,
  "functions": [
    {
      "name": "test_block_credit_usage",
      "type": "function",
      "start_line": 17,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 17,
          "line": "async def test_block_credit_usage(server: SpinTestServer):"
        },
        {
          "lineno": 18,
          "line": "    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)"
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 20,
          "line": "    spending_amount_1 = await user_credit.spend_credits("
        },
        {
          "lineno": 21,
          "line": "        DEFAULT_USER_ID,"
        },
        {
          "lineno": 22,
          "line": "        current_credit,"
        },
        {
          "lineno": 23,
          "line": "        AITextGeneratorBlock().id,"
        },
        {
          "lineno": 24,
          "line": "        {"
        },
        {
          "lineno": 25,
          "line": "            \"model\": \"gpt-4-turbo\","
        },
        {
          "lineno": 26,
          "line": "            \"credentials\": {"
        },
        {
          "lineno": 27,
          "line": "                \"id\": openai_credentials.id,"
        },
        {
          "lineno": 28,
          "line": "                \"provider\": openai_credentials.provider,"
        },
        {
          "lineno": 29,
          "line": "                \"type\": openai_credentials.type,"
        },
        {
          "lineno": 30,
          "line": "            },"
        },
        {
          "lineno": 31,
          "line": "        },"
        },
        {
          "lineno": 32,
          "line": "        0.0,"
        },
        {
          "lineno": 33,
          "line": "        0.0,"
        },
        {
          "lineno": 34,
          "line": "        validate_balance=False,"
        },
        {
          "lineno": 35,
          "line": "    )"
        },
        {
          "lineno": 36,
          "line": "    assert spending_amount_1 > 0"
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "    spending_amount_2 = await user_credit.spend_credits("
        },
        {
          "lineno": 39,
          "line": "        DEFAULT_USER_ID,"
        },
        {
          "lineno": 40,
          "line": "        current_credit,"
        },
        {
          "lineno": 41,
          "line": "        AITextGeneratorBlock().id,"
        },
        {
          "lineno": 42,
          "line": "        {\"model\": \"gpt-4-turbo\", \"api_key\": \"owned_api_key\"},"
        },
        {
          "lineno": 43,
          "line": "        0.0,"
        },
        {
          "lineno": 44,
          "line": "        0.0,"
        },
        {
          "lineno": 45,
          "line": "        validate_balance=False,"
        },
        {
          "lineno": 46,
          "line": "    )"
        },
        {
          "lineno": 47,
          "line": "    assert spending_amount_2 == 0"
        },
        {
          "lineno": 48,
          "line": ""
        },
        {
          "lineno": 49,
          "line": "    new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)"
        },
        {
          "lineno": 50,
          "line": "    assert new_credit == current_credit - spending_amount_1 - spending_amount_2"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 17,
          "end_line": 18,
          "label": "async def test_block_credit_usage(server: SpinTestServer):\n    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
          "successors": [
            {
              "id": 2,
              "start_line": 20,
              "end_line": 36,
              "label": "spending_amount_1 = await user_credit.spend_credits(\n        DEFAULT_USER_ID,\n        current_credit,\n        AITextGeneratorBlock().id,\n        {\n            \"model\": \"gpt-4-turbo\",\n            \"credentials\": {\n                \"id\": openai_credentials.id,\n                \"provider\": openai_credentials.provider,\n                \"type\": openai_credentials.type,\n            },\n        },\n        0.0,\n        0.0,\n        validate_balance=False,\n    )\n    assert spending_amount_1 > 0",
              "successors": [
                {
                  "id": 3,
                  "start_line": 38,
                  "end_line": 47,
                  "label": "spending_amount_2 = await user_credit.spend_credits(\n        DEFAULT_USER_ID,\n        current_credit,\n        AITextGeneratorBlock().id,\n        {\"model\": \"gpt-4-turbo\", \"api_key\": \"owned_api_key\"},\n        0.0,\n        0.0,\n        validate_balance=False,\n    )\n    assert spending_amount_2 == 0",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 49,
                      "end_line": 50,
                      "label": "new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert new_credit == current_credit - spending_amount_1 - spending_amount_2",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_block_credit_top_up",
      "type": "function",
      "start_line": 54,
      "end_line": 60,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 54,
          "line": "async def test_block_credit_top_up(server: SpinTestServer):"
        },
        {
          "lineno": 55,
          "line": "    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)"
        },
        {
          "lineno": 56,
          "line": ""
        },
        {
          "lineno": 57,
          "line": "    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)"
        },
        {
          "lineno": 58,
          "line": ""
        },
        {
          "lineno": 59,
          "line": "    new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)"
        },
        {
          "lineno": 60,
          "line": "    assert new_credit == current_credit + 100"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 54,
          "end_line": 54,
          "label": "async def test_block_credit_top_up(server: SpinTestServer):",
          "successors": [
            {
              "id": 2,
              "start_line": 55,
              "end_line": 55,
              "label": "current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 57,
                  "end_line": 57,
                  "label": "await user_credit.top_up_credits(DEFAULT_USER_ID, 100)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 59,
                      "end_line": 60,
                      "label": "new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\nassert new_credit == current_credit + 100",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_block_credit_reset",
      "type": "function",
      "start_line": 64,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 64,
          "line": "async def test_block_credit_reset(server: SpinTestServer):"
        },
        {
          "lineno": 65,
          "line": "    month1 = datetime(2022, 1, 15)"
        },
        {
          "lineno": 66,
          "line": "    month2 = datetime(2022, 2, 15)"
        },
        {
          "lineno": 67,
          "line": ""
        },
        {
          "lineno": 68,
          "line": "    user_credit.time_now = lambda: month2"
        },
        {
          "lineno": 69,
          "line": "    month2credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)"
        },
        {
          "lineno": 70,
          "line": ""
        },
        {
          "lineno": 71,
          "line": "    # Month 1 result should only affect month 1"
        },
        {
          "lineno": 72,
          "line": "    user_credit.time_now = lambda: month1"
        },
        {
          "lineno": 73,
          "line": "    month1credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)"
        },
        {
          "lineno": 74,
          "line": "    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)"
        },
        {
          "lineno": 75,
          "line": "    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month1credit + 100"
        },
        {
          "lineno": 76,
          "line": ""
        },
        {
          "lineno": 77,
          "line": "    # Month 2 balance is unaffected"
        },
        {
          "lineno": 78,
          "line": "    user_credit.time_now = lambda: month2"
        },
        {
          "lineno": 79,
          "line": "    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 64,
          "end_line": 65,
          "label": "async def test_block_credit_reset(server: SpinTestServer):\n    month1 = datetime(2022, 1, 15)",
          "successors": [
            {
              "id": 2,
              "start_line": 66,
              "end_line": 69,
              "label": "    month2 = datetime(2022, 2, 15)\n\n    user_credit.time_now = lambda: month2\n    month2credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 71,
                  "end_line": 75,
                  "label": "    # Month 1 result should only affect month 1\n    user_credit.time_now = lambda: month1\n    month1credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month1credit + 100",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 77,
                      "end_line": 79,
                      "label": "    # Month 2 balance is unaffected\n    user_credit.time_now = lambda: month2\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_credit_refill",
      "type": "function",
      "start_line": 83,
      "end_line": 98,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 83,
          "line": "async def test_credit_refill(server: SpinTestServer):"
        },
        {
          "lineno": 84,
          "line": "    # Clear all transactions within the month"
        },
        {
          "lineno": 85,
          "line": "    await CreditTransaction.prisma().update_many("
        },
        {
          "lineno": 86,
          "line": "        where={"
        },
        {
          "lineno": 87,
          "line": "            \"userId\": DEFAULT_USER_ID,"
        },
        {
          "lineno": 88,
          "line": "            \"createdAt\": {"
        },
        {
          "lineno": 89,
          "line": "                \"gte\": datetime(2022, 2, 1),"
        },
        {
          "lineno": 90,
          "line": "                \"lt\": datetime(2022, 3, 1),"
        },
        {
          "lineno": 91,
          "line": "            },"
        },
        {
          "lineno": 92,
          "line": "        },"
        },
        {
          "lineno": 93,
          "line": "        data={\"isActive\": False},"
        },
        {
          "lineno": 94,
          "line": "    )"
        },
        {
          "lineno": 95,
          "line": "    user_credit.time_now = lambda: datetime(2022, 2, 15)"
        },
        {
          "lineno": 96,
          "line": ""
        },
        {
          "lineno": 97,
          "line": "    balance = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)"
        },
        {
          "lineno": 98,
          "line": "    assert balance == REFILL_VALUE"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 83,
          "end_line": 83,
          "label": "async def test_credit_refill(server: SpinTestServer):",
          "successors": [
            {
              "id": 2,
              "start_line": 84,
              "end_line": 94,
              "label": "    # Clear all transactions within the month\n    await CreditTransaction.prisma().update_many(\n        where={\n            \"userId\": DEFAULT_USER_ID,\n            \"createdAt\": {\n                \"gte\": datetime(2022, 2, 1),\n                \"lt\": datetime(2022, 3, 1),\n            },\n        },\n        data={\"isActive\": False},\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 95,
                  "end_line": 98,
                  "label": "    user_credit.time_now = lambda: datetime(2022, 2, 15)\n\n    balance = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert balance == REFILL_VALUE",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from datetime import datetime"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import pytest"
    },
    {
      "lineno": 4,
      "line": "from prisma.models import CreditTransaction"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from backend.blocks.llm import AITextGeneratorBlock"
    },
    {
      "lineno": 7,
      "line": "from backend.data.credit import UserCredit"
    },
    {
      "lineno": 8,
      "line": "from backend.data.user import DEFAULT_USER_ID"
    },
    {
      "lineno": 9,
      "line": "from backend.integrations.credentials_store import openai_credentials"
    },
    {
      "lineno": 10,
      "line": "from backend.util.test import SpinTestServer"
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": "REFILL_VALUE = 1000"
    },
    {
      "lineno": 13,
      "line": "user_credit = UserCredit(REFILL_VALUE)"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": "@pytest.mark.asyncio(scope=\"session\")"
    },
    {
      "lineno": 51,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 53,
      "line": "@pytest.mark.asyncio(scope=\"session\")"
    },
    {
      "lineno": 61,
      "line": ""
    },
    {
      "lineno": 62,
      "line": ""
    },
    {
      "lineno": 63,
      "line": "@pytest.mark.asyncio(scope=\"session\")"
    },
    {
      "lineno": 80,
      "line": ""
    },
    {
      "lineno": 81,
      "line": ""
    },
    {
      "lineno": 82,
      "line": "@pytest.mark.asyncio(scope=\"session\")"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 13,
      "label": "from datetime import datetime\n\nimport pytest\nfrom prisma.models import CreditTransaction\n\nfrom backend.blocks.llm import AITextGeneratorBlock\nfrom backend.data.credit import UserCredit\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.integrations.credentials_store import openai_credentials\nfrom backend.util.test import SpinTestServer\n\nREFILL_VALUE = 1000\nuser_credit = UserCredit(REFILL_VALUE)",
      "successors": [
        {
          "id": 2,
          "start_line": 16,
          "end_line": 16,
          "label": "@pytest.mark.asyncio(scope=\"session\")",
          "successors": [
            {
              "id": 3,
              "start_line": 53,
              "end_line": 53,
              "label": "@pytest.mark.asyncio(scope=\"session\")",
              "successors": [
                {
                  "id": 4,
                  "start_line": 63,
                  "end_line": 63,
                  "label": "@pytest.mark.asyncio(scope=\"session\")",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 82,
                      "end_line": 82,
                      "label": "@pytest.mark.asyncio(scope=\"session\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}