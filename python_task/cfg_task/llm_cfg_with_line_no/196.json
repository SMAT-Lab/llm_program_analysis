{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 48,
  "functions": [
    {
      "name": "server",
      "type": "function",
      "start_line": 20,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 20,
          "line": "async def server():"
        },
        {
          "lineno": 21,
          "line": "    async with SpinTestServer() as server:"
        },
        {
          "lineno": 22,
          "line": "        yield server"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 20,
          "end_line": 20,
          "label": "async def server():",
          "successors": [
            {
              "id": 2,
              "start_line": 21,
              "end_line": 22,
              "label": "async with SpinTestServer() as server:\n        yield server",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "graph_cleanup",
      "type": "function",
      "start_line": 26,
      "end_line": 48,
      "functions": [
        {
          "name": "create_graph_wrapper",
          "type": "function",
          "start_line": 30,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 30,
              "line": "    async def create_graph_wrapper(*args, **kwargs):"
            },
            {
              "lineno": 31,
              "line": "        created_graph = await original_create_graph(*args, **kwargs)"
            },
            {
              "lineno": 32,
              "line": "        # Extract user_id correctly"
            },
            {
              "lineno": 33,
              "line": "        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)"
            },
            {
              "lineno": 34,
              "line": "        created_graph_ids.append((created_graph.id, user_id))"
            },
            {
              "lineno": 35,
              "line": "        return created_graph"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 30,
              "end_line": 35,
              "label": "    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 26,
          "line": "async def graph_cleanup(server):"
        },
        {
          "lineno": 27,
          "line": "    created_graph_ids = []"
        },
        {
          "lineno": 28,
          "line": "    original_create_graph = server.agent_server.test_create_graph"
        },
        {
          "lineno": 29,
          "line": ""
        },
        {
          "lineno": 36,
          "line": ""
        },
        {
          "lineno": 37,
          "line": "    try:"
        },
        {
          "lineno": 38,
          "line": "        server.agent_server.test_create_graph = create_graph_wrapper"
        },
        {
          "lineno": 39,
          "line": "        yield  # This runs the test function"
        },
        {
          "lineno": 40,
          "line": "    finally:"
        },
        {
          "lineno": 41,
          "line": "        server.agent_server.test_create_graph = original_create_graph"
        },
        {
          "lineno": 42,
          "line": ""
        },
        {
          "lineno": 43,
          "line": "        # Delete the created graphs and assert they were deleted"
        },
        {
          "lineno": 44,
          "line": "        for graph_id, user_id in created_graph_ids:"
        },
        {
          "lineno": 45,
          "line": "            if user_id:"
        },
        {
          "lineno": 46,
          "line": "                resp = await server.agent_server.test_delete_graph(graph_id, user_id)"
        },
        {
          "lineno": 47,
          "line": "                num_deleted = resp[\"version_counts\"]"
        },
        {
          "lineno": 48,
          "line": "                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 26,
          "end_line": 28,
          "label": "async def graph_cleanup(server):\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n",
          "successors": [
            {
              "id": 2,
              "start_line": 37,
              "end_line": 37,
              "label": "try:\n",
              "successors": [
                {
                  "id": 3,
                  "start_line": 38,
                  "end_line": 39,
                  "label": "server.agent_server.test_create_graph = create_graph_wrapper\nyield  # This runs the test function\n",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 40,
                      "end_line": 40,
                      "label": "finally:\n",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 41,
                          "end_line": 41,
                          "label": "server.agent_server.test_create_graph = original_create_graph\n",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 43,
                              "end_line": 44,
                              "label": "# Delete the created graphs and assert they were deleted\nfor graph_id, user_id in created_graph_ids:\n",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 45,
                                  "end_line": 48,
                                  "label": "if user_id:\n    resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n    num_deleted = resp[\"version_counts\"]\n    assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"\n",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import pytest"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from backend.util.test import SpinTestServer"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "#  NOTE: You can run tests like with the --log-cli-level=INFO to see the logs"
    },
    {
      "lineno": 8,
      "line": "# Set up logging"
    },
    {
      "lineno": 9,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": "# Create console handler with formatting"
    },
    {
      "lineno": 12,
      "line": "ch = logging.StreamHandler()"
    },
    {
      "lineno": 13,
      "line": "ch.setLevel(logging.INFO)"
    },
    {
      "lineno": 14,
      "line": "formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")"
    },
    {
      "lineno": 15,
      "line": "ch.setFormatter(formatter)"
    },
    {
      "lineno": 16,
      "line": "logger.addHandler(ch)"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": ""
    },
    {
      "lineno": 19,
      "line": "@pytest.fixture(scope=\"session\")"
    },
    {
      "lineno": 23,
      "line": ""
    },
    {
      "lineno": 24,
      "line": ""
    },
    {
      "lineno": 25,
      "line": "@pytest.fixture(scope=\"session\", autouse=True)"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "import logging",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 3,
          "label": "import pytest",
          "successors": [
            {
              "id": 3,
              "start_line": 5,
              "end_line": 5,
              "label": "from backend.util.test import SpinTestServer",
              "successors": [
                {
                  "id": 4,
                  "start_line": 9,
                  "end_line": 9,
                  "label": "logger = logging.getLogger(__name__)",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 12,
                      "end_line": 16,
                      "label": "ch = logging.StreamHandler()\nch.setLevel(logging.INFO)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nch.setFormatter(formatter)\nlogger.addHandler(ch)",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 19,
                          "end_line": 19,
                          "label": "@pytest.fixture(scope=\"session\")",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 25,
                              "end_line": 25,
                              "label": "@pytest.fixture(scope=\"session\", autouse=True)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}