{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 162,
  "functions": [
    {
      "name": "get_point_key",
      "type": "function",
      "start_line": 36,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 36,
          "line": "def get_point_key(len_board: int, len_board_column: int, row: int, column: int) -> int:"
        },
        {
          "lineno": 37,
          "line": "    \"\"\""
        },
        {
          "lineno": 38,
          "line": "    Returns the hash key of matrix indexes."
        },
        {
          "lineno": 39,
          "line": ""
        },
        {
          "lineno": 40,
          "line": "    >>> get_point_key(10, 20, 1, 0)"
        },
        {
          "lineno": 41,
          "line": "    200"
        },
        {
          "lineno": 42,
          "line": "    \"\"\""
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 44,
          "line": "    return len_board * len_board_column * row + column"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 36,
          "end_line": 44,
          "label": "def get_point_key(len_board: int, len_board_column: int, row: int, column: int) -> int:\n    \"\"\"\n    Returns the hash key of matrix indexes.\n\n    >>> get_point_key(10, 20, 1, 0)\n    200\n    \"\"\"\n\n    return len_board * len_board_column * row + column",
          "successors": []
        }
      ]
    },
    {
      "name": "exits_word",
      "type": "function",
      "start_line": 47,
      "end_line": 88,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 47,
          "line": "def exits_word("
        },
        {
          "lineno": 48,
          "line": "    board: list[list[str]],"
        },
        {
          "lineno": 49,
          "line": "    word: str,"
        },
        {
          "lineno": 50,
          "line": "    row: int,"
        },
        {
          "lineno": 51,
          "line": "    column: int,"
        },
        {
          "lineno": 52,
          "line": "    word_index: int,"
        },
        {
          "lineno": 53,
          "line": "    visited_points_set: set[int],"
        },
        {
          "lineno": 54,
          "line": ") -> bool:"
        },
        {
          "lineno": 55,
          "line": "    \"\"\""
        },
        {
          "lineno": 56,
          "line": "    Return True if it's possible to search the word suffix"
        },
        {
          "lineno": 57,
          "line": "    starting from the word_index."
        },
        {
          "lineno": 58,
          "line": ""
        },
        {
          "lineno": 59,
          "line": "    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())"
        },
        {
          "lineno": 60,
          "line": "    False"
        },
        {
          "lineno": 61,
          "line": "    \"\"\""
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 63,
          "line": "    if board[row][column] != word[word_index]:"
        },
        {
          "lineno": 64,
          "line": "        return False"
        },
        {
          "lineno": 65,
          "line": ""
        },
        {
          "lineno": 66,
          "line": "    if word_index == len(word) - 1:"
        },
        {
          "lineno": 67,
          "line": "        return True"
        },
        {
          "lineno": 68,
          "line": ""
        },
        {
          "lineno": 69,
          "line": "    traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]"
        },
        {
          "lineno": 70,
          "line": "    len_board = len(board)"
        },
        {
          "lineno": 71,
          "line": "    len_board_column = len(board[0])"
        },
        {
          "lineno": 72,
          "line": "    for direction in traverts_directions:"
        },
        {
          "lineno": 73,
          "line": "        next_i = row + direction[0]"
        },
        {
          "lineno": 74,
          "line": "        next_j = column + direction[1]"
        },
        {
          "lineno": 75,
          "line": "        if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):"
        },
        {
          "lineno": 76,
          "line": "            continue"
        },
        {
          "lineno": 77,
          "line": ""
        },
        {
          "lineno": 78,
          "line": "        key = get_point_key(len_board, len_board_column, next_i, next_j)"
        },
        {
          "lineno": 79,
          "line": "        if key in visited_points_set:"
        },
        {
          "lineno": 80,
          "line": "            continue"
        },
        {
          "lineno": 81,
          "line": ""
        },
        {
          "lineno": 82,
          "line": "        visited_points_set.add(key)"
        },
        {
          "lineno": 83,
          "line": "        if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):"
        },
        {
          "lineno": 84,
          "line": "            return True"
        },
        {
          "lineno": 85,
          "line": ""
        },
        {
          "lineno": 86,
          "line": "        visited_points_set.remove(key)"
        },
        {
          "lineno": 87,
          "line": ""
        },
        {
          "lineno": 88,
          "line": "    return False"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 47,
          "end_line": 54,
          "label": "def exits_word(\n    board: list[list[str]],\n    word: str,\n    row: int,\n    column: int,\n    word_index: int,\n    visited_points_set: set[int],\n) -> bool:",
          "successors": [
            {
              "id": 2,
              "start_line": 55,
              "end_line": 61,
              "label": "\"\"\"\n    Return True if it's possible to search the word suffix\n    starting from the word_index.\n\n    >>> exits_word([[\"A\"]], \"B\", 0, 0, 0, set())\n    False\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 63,
                  "end_line": 64,
                  "label": "if board[row][column] != word[word_index]:\n    return False",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 66,
                      "end_line": 67,
                      "label": "if word_index == len(word) - 1:\n    return True",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 69,
                          "end_line": 71,
                          "label": "traverts_directions = [(0, 1), (0, -1), (-1, 0), (1, 0)]\nlen_board = len(board)\nlen_board_column = len(board[0])",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 72,
                              "end_line": 86,
                              "label": "for direction in traverts_directions:\n    next_i = row + direction[0]\n    next_j = column + direction[1]\n    if not (0 <= next_i < len_board and 0 <= next_j < len_board_column):\n        continue\n\n    key = get_point_key(len_board, len_board_column, next_i, next_j)\n    if key in visited_points_set:\n        continue\n\n    visited_points_set.add(key)\n    if exits_word(board, word, next_i, next_j, word_index + 1, visited_points_set):\n        return True\n\n    visited_points_set.remove(key)",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 88,
                                  "end_line": 88,
                                  "label": "return False",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "word_exists",
      "type": "function",
      "start_line": 91,
      "end_line": 156,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 91,
          "line": "def word_exists(board: list[list[str]], word: str) -> bool:"
        },
        {
          "lineno": 92,
          "line": "    \"\"\""
        },
        {
          "lineno": 93,
          "line": "    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")"
        },
        {
          "lineno": 94,
          "line": "    True"
        },
        {
          "lineno": 95,
          "line": "    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")"
        },
        {
          "lineno": 96,
          "line": "    True"
        },
        {
          "lineno": 97,
          "line": "    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")"
        },
        {
          "lineno": 98,
          "line": "    False"
        },
        {
          "lineno": 99,
          "line": "    >>> word_exists([[\"A\"]], \"A\")"
        },
        {
          "lineno": 100,
          "line": "    True"
        },
        {
          "lineno": 101,
          "line": "    >>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")"
        },
        {
          "lineno": 102,
          "line": "    False"
        },
        {
          "lineno": 103,
          "line": "    >>> word_exists([[\"A\"]], 123)"
        },
        {
          "lineno": 104,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 105,
          "line": "        ..."
        },
        {
          "lineno": 106,
          "line": "    ValueError: The word parameter should be a string of length greater than 0."
        },
        {
          "lineno": 107,
          "line": "    >>> word_exists([[\"A\"]], \"\")"
        },
        {
          "lineno": 108,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 109,
          "line": "        ..."
        },
        {
          "lineno": 110,
          "line": "    ValueError: The word parameter should be a string of length greater than 0."
        },
        {
          "lineno": 111,
          "line": "    >>> word_exists([[]], \"AB\")"
        },
        {
          "lineno": 112,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 113,
          "line": "        ..."
        },
        {
          "lineno": 114,
          "line": "    ValueError: The board should be a non empty matrix of single chars strings."
        },
        {
          "lineno": 115,
          "line": "    >>> word_exists([], \"AB\")"
        },
        {
          "lineno": 116,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 117,
          "line": "        ..."
        },
        {
          "lineno": 118,
          "line": "    ValueError: The board should be a non empty matrix of single chars strings."
        },
        {
          "lineno": 119,
          "line": "    >>> word_exists([[\"A\"], [21]], \"AB\")"
        },
        {
          "lineno": 120,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 121,
          "line": "        ..."
        },
        {
          "lineno": 122,
          "line": "    ValueError: The board should be a non empty matrix of single chars strings."
        },
        {
          "lineno": 123,
          "line": "    \"\"\""
        },
        {
          "lineno": 124,
          "line": ""
        },
        {
          "lineno": 125,
          "line": "    # Validate board"
        },
        {
          "lineno": 126,
          "line": "    board_error_message = ("
        },
        {
          "lineno": 127,
          "line": "        \"The board should be a non empty matrix of single chars strings.\""
        },
        {
          "lineno": 128,
          "line": "    )"
        },
        {
          "lineno": 129,
          "line": ""
        },
        {
          "lineno": 130,
          "line": "    len_board = len(board)"
        },
        {
          "lineno": 131,
          "line": "    if not isinstance(board, list) or len(board) == 0:"
        },
        {
          "lineno": 132,
          "line": "        raise ValueError(board_error_message)"
        },
        {
          "lineno": 133,
          "line": ""
        },
        {
          "lineno": 134,
          "line": "    for row in board:"
        },
        {
          "lineno": 135,
          "line": "        if not isinstance(row, list) or len(row) == 0:"
        },
        {
          "lineno": 136,
          "line": "            raise ValueError(board_error_message)"
        },
        {
          "lineno": 137,
          "line": ""
        },
        {
          "lineno": 138,
          "line": "        for item in row:"
        },
        {
          "lineno": 139,
          "line": "            if not isinstance(item, str) or len(item) != 1:"
        },
        {
          "lineno": 140,
          "line": "                raise ValueError(board_error_message)"
        },
        {
          "lineno": 141,
          "line": ""
        },
        {
          "lineno": 142,
          "line": "    # Validate word"
        },
        {
          "lineno": 143,
          "line": "    if not isinstance(word, str) or len(word) == 0:"
        },
        {
          "lineno": 144,
          "line": "        raise ValueError("
        },
        {
          "lineno": 145,
          "line": "            \"The word parameter should be a string of length greater than 0.\""
        },
        {
          "lineno": 146,
          "line": "        )"
        },
        {
          "lineno": 147,
          "line": ""
        },
        {
          "lineno": 148,
          "line": "    len_board_column = len(board[0])"
        },
        {
          "lineno": 149,
          "line": "    for i in range(len_board):"
        },
        {
          "lineno": 150,
          "line": "        for j in range(len_board_column):"
        },
        {
          "lineno": 151,
          "line": "            if exits_word("
        },
        {
          "lineno": 152,
          "line": "                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}"
        },
        {
          "lineno": 153,
          "line": "            ):"
        },
        {
          "lineno": 154,
          "line": "                return True"
        },
        {
          "lineno": 155,
          "line": ""
        },
        {
          "lineno": 156,
          "line": "    return False"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 91,
          "end_line": 97,
          "label": "def word_exists(board: list[list[str]], word: str) -> bool:\n    \"\"\"\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\")\n    True\n    >>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\")\n    True",
          "successors": [
            {
              "id": 2,
              "start_line": 98,
              "end_line": 100,
              "label": ">>> word_exists([[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\")\n    False\n    >>> word_exists([[\"A\"]], \"A\")\n    True",
              "successors": [
                {
                  "id": 3,
                  "start_line": 101,
                  "end_line": 102,
                  "label": ">>> word_exists([[\"B\", \"A\", \"A\"], [\"A\", \"A\", \"A\"], [\"A\", \"B\", \"A\"]], \"ABB\")\n    False",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 103,
                      "end_line": 122,
                      "label": ">>> word_exists([[\"A\"]], 123)\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[\"A\"]], \"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The word parameter should be a string of length greater than 0.\n    >>> word_exists([[]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.\n    >>> word_exists([[\"A\"], [21]], \"AB\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The board should be a non empty matrix of single chars strings.",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 125,
                          "end_line": 126,
                          "label": "# Validate board\n    board_error_message = (",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 127,
                              "end_line": 128,
                              "label": "\"The board should be a non empty matrix of single chars strings.\"\n    )",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 130,
                                  "end_line": 130,
                                  "label": "len_board = len(board)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 131,
                                      "end_line": 132,
                                      "label": "if not isinstance(board, list) or len(board) == 0:\n        raise ValueError(board_error_message)",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 134,
                                          "end_line": 136,
                                          "label": "for row in board:\n        if not isinstance(row, list) or len(row) == 0:\n            raise ValueError(board_error_message)",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 138,
                                              "end_line": 140,
                                              "label": "for item in row:\n            if not isinstance(item, str) or len(item) != 1:\n                raise ValueError(board_error_message)",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 142,
                                                  "end_line": 145,
                                                  "label": "# Validate word\n    if not isinstance(word, str) or len(word) == 0:\n        raise ValueError(\n            \"The word parameter should be a string of length greater than 0.\"",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "start_line": 148,
                                                      "end_line": 156,
                                                      "label": "len_board_column = len(board[0])\n    for i in range(len_board):\n        for j in range(len_board_column):\n            if exits_word(\n                board, word, i, j, 0, {get_point_key(len_board, len_board_column, i, j)}\n            ):\n                return True\n\n    return False",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "Author  : Alexander Pantyukhin"
    },
    {
      "lineno": 3,
      "line": "Date    : November 24, 2022"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "Task:"
    },
    {
      "lineno": 6,
      "line": "Given an m x n grid of characters board and a string word,"
    },
    {
      "lineno": 7,
      "line": "return true if word exists in the grid."
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "The word can be constructed from letters of sequentially adjacent cells,"
    },
    {
      "lineno": 10,
      "line": "where adjacent cells are horizontally or vertically neighboring."
    },
    {
      "lineno": 11,
      "line": "The same letter cell may not be used more than once."
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "Example:"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "Matrix:"
    },
    {
      "lineno": 16,
      "line": "---------"
    },
    {
      "lineno": 17,
      "line": "|A|B|C|E|"
    },
    {
      "lineno": 18,
      "line": "|S|F|C|S|"
    },
    {
      "lineno": 19,
      "line": "|A|D|E|E|"
    },
    {
      "lineno": 20,
      "line": "---------"
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 22,
      "line": "Word:"
    },
    {
      "lineno": 23,
      "line": "\"ABCCED\""
    },
    {
      "lineno": 24,
      "line": ""
    },
    {
      "lineno": 25,
      "line": "Result:"
    },
    {
      "lineno": 26,
      "line": "True"
    },
    {
      "lineno": 27,
      "line": ""
    },
    {
      "lineno": 28,
      "line": "Implementation notes: Use backtracking approach."
    },
    {
      "lineno": 29,
      "line": "At each point, check all neighbors to try to find the next letter of the word."
    },
    {
      "lineno": 30,
      "line": ""
    },
    {
      "lineno": 31,
      "line": "leetcode: https://leetcode.com/problems/word-search/"
    },
    {
      "lineno": 32,
      "line": ""
    },
    {
      "lineno": 33,
      "line": "\"\"\""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 45,
      "line": ""
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 89,
      "line": ""
    },
    {
      "lineno": 90,
      "line": ""
    },
    {
      "lineno": 157,
      "line": ""
    },
    {
      "lineno": 158,
      "line": ""
    },
    {
      "lineno": 159,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 160,
      "line": "    import doctest"
    },
    {
      "lineno": 161,
      "line": ""
    },
    {
      "lineno": 162,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 33,
      "label": "\"\"\"\nAuthor  : Alexander Pantyukhin\nDate    : November 24, 2022\n\nTask:\nGiven an m x n grid of characters board and a string word,\nreturn true if word exists in the grid.\n\nThe word can be constructed from letters of sequentially adjacent cells,\nwhere adjacent cells are horizontally or vertically neighboring.\nThe same letter cell may not be used more than once.\n\nExample:\n\nMatrix:\n---------\n|A|B|C|E|\n|S|F|C|S|\n|A|D|E|E|\n---------\n\nWord:\n\"ABCCED\"\n\nResult:\nTrue\n\nImplementation notes: Use backtracking approach.\nAt each point, check all neighbors to try to find the next letter of the word.\n\nleetcode: https://leetcode.com/problems/word-search/\n\n\"\"\"",
      "successors": [
        {
          "id": 2,
          "start_line": 159,
          "end_line": 159,
          "label": "if __name__ == \"__main__\":",
          "successors": [
            {
              "id": 3,
              "start_line": 160,
              "end_line": 162,
              "label": "import doctest\n\ndoctest.testmod()",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}