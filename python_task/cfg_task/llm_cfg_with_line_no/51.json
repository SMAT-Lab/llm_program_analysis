{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 66,
  "functions": [
    {
      "name": "backtrack",
      "type": "function",
      "start_line": 16,
      "end_line": 38,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "def backtrack("
        },
        {
          "lineno": 17,
          "line": "    candidates: list, path: list, answer: list, target: int, previous_index: int"
        },
        {
          "lineno": 18,
          "line": ") -> None:"
        },
        {
          "lineno": 19,
          "line": "    \"\"\""
        },
        {
          "lineno": 20,
          "line": "    A recursive function that searches for possible combinations. Backtracks in case"
        },
        {
          "lineno": 21,
          "line": "    of a bigger current combination value than the target value."
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 23,
          "line": "    Parameters"
        },
        {
          "lineno": 24,
          "line": "    ----------"
        },
        {
          "lineno": 25,
          "line": "    previous_index: Last index from the previous search"
        },
        {
          "lineno": 26,
          "line": "    target: The value we need to obtain by summing our integers in the path list."
        },
        {
          "lineno": 27,
          "line": "    answer: A list of possible combinations"
        },
        {
          "lineno": 28,
          "line": "    path: Current combination"
        },
        {
          "lineno": 29,
          "line": "    candidates: A list of integers we can use."
        },
        {
          "lineno": 30,
          "line": "    \"\"\""
        },
        {
          "lineno": 31,
          "line": "    if target == 0:"
        },
        {
          "lineno": 32,
          "line": "        answer.append(path.copy())"
        },
        {
          "lineno": 33,
          "line": "    else:"
        },
        {
          "lineno": 34,
          "line": "        for index in range(previous_index, len(candidates)):"
        },
        {
          "lineno": 35,
          "line": "            if target >= candidates[index]:"
        },
        {
          "lineno": 36,
          "line": "                path.append(candidates[index])"
        },
        {
          "lineno": 37,
          "line": "                backtrack(candidates, path, answer, target - candidates[index], index)"
        },
        {
          "lineno": 38,
          "line": "                path.pop(len(path) - 1)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 18,
          "label": "def backtrack(\n    candidates: list, path: list, answer: list, target: int, previous_index: int\n) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 19,
              "end_line": 30,
              "label": "\"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 31,
                  "end_line": 31,
                  "label": "if target == 0:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 32,
                      "end_line": 32,
                      "label": "answer.append(path.copy())",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 33,
                      "end_line": 34,
                      "label": "else:\n    for index in range(previous_index, len(candidates)):",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 35,
                          "end_line": 35,
                          "label": "if target >= candidates[index]:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 36,
                              "end_line": 38,
                              "label": "path.append(candidates[index])\nbacktrack(candidates, path, answer, target - candidates[index], index)\npath.pop(len(path) - 1)",
                              "successors": [
                                {
                                  "id": 5,
                                  "start_line": 33,
                                  "end_line": 34,
                                  "label": "else:\n    for index in range(previous_index, len(candidates)):",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "combination_sum",
      "type": "function",
      "start_line": 41,
      "end_line": 55,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 41,
          "line": "def combination_sum(candidates: list, target: int) -> list:"
        },
        {
          "lineno": 42,
          "line": "    \"\"\""
        },
        {
          "lineno": 43,
          "line": "    >>> combination_sum([2, 3, 5], 8)"
        },
        {
          "lineno": 44,
          "line": "    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]"
        },
        {
          "lineno": 45,
          "line": "    >>> combination_sum([2, 3, 6, 7], 7)"
        },
        {
          "lineno": 46,
          "line": "    [[2, 2, 3], [7]]"
        },
        {
          "lineno": 47,
          "line": "    >>> combination_sum([-8, 2.3, 0], 1)"
        },
        {
          "lineno": 48,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 49,
          "line": "        ..."
        },
        {
          "lineno": 50,
          "line": "    RecursionError: maximum recursion depth exceeded"
        },
        {
          "lineno": 51,
          "line": "    \"\"\""
        },
        {
          "lineno": 52,
          "line": "    path = []  # type: list[int]"
        },
        {
          "lineno": 53,
          "line": "    answer = []  # type: list[int]"
        },
        {
          "lineno": 54,
          "line": "    backtrack(candidates, path, answer, target, 0)"
        },
        {
          "lineno": 55,
          "line": "    return answer"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 41,
          "end_line": 51,
          "label": "def combination_sum(candidates: list, target: int) -> list:\n    \"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 52,
              "end_line": 54,
              "label": "path = []  # type: list[int]\n    answer = []  # type: list[int]\n    backtrack(candidates, path, answer, target, 0)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 55,
                  "end_line": 55,
                  "label": "return answer",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 58,
      "end_line": 59,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 58,
          "line": "def main() -> None:"
        },
        {
          "lineno": 59,
          "line": "    print(combination_sum([-8, 2.3, 0], 1))"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 58,
          "end_line": 59,
          "label": "def main() -> None:\n    print(combination_sum([-8, 2.3, 0], 1))",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "In the Combination Sum problem, we are given a list consisting of distinct integers."
    },
    {
      "lineno": 3,
      "line": "We need to find all the combinations whose sum equals to target given."
    },
    {
      "lineno": 4,
      "line": "We can use an element more than one."
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "Time complexity(Average Case): O(n!)"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "Constraints:"
    },
    {
      "lineno": 9,
      "line": "1 <= candidates.length <= 30"
    },
    {
      "lineno": 10,
      "line": "2 <= candidates[i] <= 40"
    },
    {
      "lineno": 11,
      "line": "All elements of candidates are distinct."
    },
    {
      "lineno": 12,
      "line": "1 <= target <= 40"
    },
    {
      "lineno": 13,
      "line": "\"\"\""
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 39,
      "line": ""
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 56,
      "line": ""
    },
    {
      "lineno": 57,
      "line": ""
    },
    {
      "lineno": 60,
      "line": ""
    },
    {
      "lineno": 61,
      "line": ""
    },
    {
      "lineno": 62,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 63,
      "line": "    import doctest"
    },
    {
      "lineno": 64,
      "line": ""
    },
    {
      "lineno": 65,
      "line": "    doctest.testmod()"
    },
    {
      "lineno": 66,
      "line": "    main()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 13,
      "label": "\"\"\"\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\nWe need to find all the combinations whose sum equals to target given.\nWe can use an element more than one.\n\nTime complexity(Average Case): O(n!)\n\nConstraints:\n1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 40\n\"\"\"",
      "successors": [
        {
          "id": 2,
          "start_line": 62,
          "end_line": 62,
          "label": "if __name__ == \"__main__\":",
          "successors": [
            {
              "id": 3,
              "start_line": 63,
              "end_line": 65,
              "label": "import doctest\n\ndoctest.testmod()",
              "successors": []
            },
            {
              "id": 4,
              "start_line": 66,
              "end_line": 66,
              "label": "main()",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}