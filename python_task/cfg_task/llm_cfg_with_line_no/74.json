{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 169,
  "functions": [],
  "classes": [
    {
      "name": "GoogleOAuthHandler",
      "type": "class",
      "start_line": 20,
      "end_line": 169,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 34,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    def __init__(self, client_id: str, client_secret: str, redirect_uri: str):"
            },
            {
              "lineno": 35,
              "line": "        self.client_id = client_id"
            },
            {
              "lineno": 36,
              "line": "        self.client_secret = client_secret"
            },
            {
              "lineno": 37,
              "line": "        self.redirect_uri = redirect_uri"
            },
            {
              "lineno": 38,
              "line": "        self.token_uri = \"https://oauth2.googleapis.com/token\""
            },
            {
              "lineno": 39,
              "line": "        self.revoke_uri = \"https://oauth2.googleapis.com/revoke\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 34,
              "end_line": 39,
              "label": "    def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.redirect_uri = redirect_uri\n        self.token_uri = \"https://oauth2.googleapis.com/token\"\n        self.revoke_uri = \"https://oauth2.googleapis.com/revoke\"",
              "successors": []
            }
          ]
        },
        {
          "name": "get_login_url",
          "type": "function",
          "start_line": 41,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 41,
              "line": "    def get_login_url(self, scopes: list[str], state: str) -> str:"
            },
            {
              "lineno": 42,
              "line": "        all_scopes = list(set(scopes + self.DEFAULT_SCOPES))"
            },
            {
              "lineno": 43,
              "line": "        logger.debug(f\"Setting up OAuth flow with scopes: {all_scopes}\")"
            },
            {
              "lineno": 44,
              "line": "        flow = self._setup_oauth_flow(all_scopes)"
            },
            {
              "lineno": 45,
              "line": "        flow.redirect_uri = self.redirect_uri"
            },
            {
              "lineno": 46,
              "line": "        authorization_url, _ = flow.authorization_url("
            },
            {
              "lineno": 47,
              "line": "            access_type=\"offline\","
            },
            {
              "lineno": 48,
              "line": "            include_granted_scopes=\"true\","
            },
            {
              "lineno": 49,
              "line": "            state=state,"
            },
            {
              "lineno": 50,
              "line": "            prompt=\"consent\","
            },
            {
              "lineno": 51,
              "line": "        )"
            },
            {
              "lineno": 52,
              "line": "        return authorization_url"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 41,
              "end_line": 51,
              "label": "    def get_login_url(self, scopes: list[str], state: str) -> str:\n        all_scopes = list(set(scopes + self.DEFAULT_SCOPES))\n        logger.debug(f\"Setting up OAuth flow with scopes: {all_scopes}\")\n        flow = self._setup_oauth_flow(all_scopes)\n        flow.redirect_uri = self.redirect_uri\n        authorization_url, _ = flow.authorization_url(\n            access_type=\"offline\",\n            include_granted_scopes=\"true\",\n            state=state,\n            prompt=\"consent\",\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 52,
                  "end_line": 52,
                  "label": "        return authorization_url",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "exchange_code_for_tokens",
          "type": "function",
          "start_line": 54,
          "end_line": 104,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 54,
              "line": "    def exchange_code_for_tokens("
            },
            {
              "lineno": 55,
              "line": "        self, code: str, scopes: list[str]"
            },
            {
              "lineno": 56,
              "line": "    ) -> OAuth2Credentials:"
            },
            {
              "lineno": 57,
              "line": "        logger.debug(f\"Exchanging code for tokens with scopes: {scopes}\")"
            },
            {
              "lineno": 58,
              "line": ""
            },
            {
              "lineno": 59,
              "line": "        # Use the scopes from the initial request"
            },
            {
              "lineno": 60,
              "line": "        flow = self._setup_oauth_flow(scopes)"
            },
            {
              "lineno": 61,
              "line": "        flow.redirect_uri = self.redirect_uri"
            },
            {
              "lineno": 62,
              "line": ""
            },
            {
              "lineno": 63,
              "line": "        logger.debug(\"Fetching token from Google\")"
            },
            {
              "lineno": 64,
              "line": ""
            },
            {
              "lineno": 65,
              "line": "        # Disable scope check in fetch_token"
            },
            {
              "lineno": 66,
              "line": "        flow.oauth2session.scope = None"
            },
            {
              "lineno": 67,
              "line": "        token = flow.fetch_token(code=code)"
            },
            {
              "lineno": 68,
              "line": "        logger.debug(\"Token fetched successfully\")"
            },
            {
              "lineno": 69,
              "line": ""
            },
            {
              "lineno": 70,
              "line": "        # Get the actual scopes granted by Google"
            },
            {
              "lineno": 71,
              "line": "        granted_scopes: list[str] = token.get(\"scope\", [])"
            },
            {
              "lineno": 72,
              "line": ""
            },
            {
              "lineno": 73,
              "line": "        logger.debug(f\"Scopes granted by Google: {granted_scopes}\")"
            },
            {
              "lineno": 74,
              "line": ""
            },
            {
              "lineno": 75,
              "line": "        google_creds = flow.credentials"
            },
            {
              "lineno": 76,
              "line": "        logger.debug(f\"Received credentials: {google_creds}\")"
            },
            {
              "lineno": 77,
              "line": ""
            },
            {
              "lineno": 78,
              "line": "        logger.debug(\"Requesting user email\")"
            },
            {
              "lineno": 79,
              "line": "        username = self._request_email(google_creds)"
            },
            {
              "lineno": 80,
              "line": "        logger.debug(f\"User email retrieved: {username}\")"
            },
            {
              "lineno": 81,
              "line": ""
            },
            {
              "lineno": 82,
              "line": "        assert google_creds.token"
            },
            {
              "lineno": 83,
              "line": "        assert google_creds.refresh_token"
            },
            {
              "lineno": 84,
              "line": "        assert google_creds.expiry"
            },
            {
              "lineno": 85,
              "line": "        assert granted_scopes"
            },
            {
              "lineno": 86,
              "line": ""
            },
            {
              "lineno": 87,
              "line": "        # Create OAuth2Credentials with the granted scopes"
            },
            {
              "lineno": 88,
              "line": "        credentials = OAuth2Credentials("
            },
            {
              "lineno": 89,
              "line": "            provider=self.PROVIDER_NAME,"
            },
            {
              "lineno": 90,
              "line": "            title=None,"
            },
            {
              "lineno": 91,
              "line": "            username=username,"
            },
            {
              "lineno": 92,
              "line": "            access_token=SecretStr(google_creds.token),"
            },
            {
              "lineno": 93,
              "line": "            refresh_token=(SecretStr(google_creds.refresh_token)),"
            },
            {
              "lineno": 94,
              "line": "            access_token_expires_at=("
            },
            {
              "lineno": 95,
              "line": "                int(google_creds.expiry.timestamp()) if google_creds.expiry else None"
            },
            {
              "lineno": 96,
              "line": "            ),"
            },
            {
              "lineno": 97,
              "line": "            refresh_token_expires_at=None,"
            },
            {
              "lineno": 98,
              "line": "            scopes=granted_scopes,"
            },
            {
              "lineno": 99,
              "line": "        )"
            },
            {
              "lineno": 100,
              "line": "        logger.debug("
            },
            {
              "lineno": 101,
              "line": "            f\"OAuth2Credentials object created successfully with scopes: {credentials.scopes}\""
            },
            {
              "lineno": 102,
              "line": "        )"
            },
            {
              "lineno": 103,
              "line": ""
            },
            {
              "lineno": 104,
              "line": "        return credentials"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 54,
              "end_line": 57,
              "label": "    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        logger.debug(f\"Exchanging code for tokens with scopes: {scopes}\")",
              "successors": [
                {
                  "id": 2,
                  "start_line": 59,
                  "end_line": 61,
                  "label": "        # Use the scopes from the initial request\n        flow = self._setup_oauth_flow(scopes)\n        flow.redirect_uri = self.redirect_uri",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 63,
                      "end_line": 67,
                      "label": "        logger.debug(\"Fetching token from Google\")\n\n        # Disable scope check in fetch_token\n        flow.oauth2session.scope = None\n        token = flow.fetch_token(code=code)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 68,
                          "end_line": 73,
                          "label": "        logger.debug(\"Token fetched successfully\")\n\n        # Get the actual scopes granted by Google\n        granted_scopes: list[str] = token.get(\"scope\", [])\n        logger.debug(f\"Scopes granted by Google: {granted_scopes}\")",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 75,
                              "end_line": 80,
                              "label": "        google_creds = flow.credentials\n        logger.debug(f\"Received credentials: {google_creds}\")\n\n        logger.debug(\"Requesting user email\")\n        username = self._request_email(google_creds)\n        logger.debug(f\"User email retrieved: {username}\")",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 82,
                                  "end_line": 85,
                                  "label": "        assert google_creds.token\n        assert google_creds.refresh_token\n        assert google_creds.expiry\n        assert granted_scopes",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 87,
                                      "end_line": 104,
                                      "label": "        # Create OAuth2Credentials with the granted scopes\n        credentials = OAuth2Credentials(\n            provider=self.PROVIDER_NAME,\n            title=None,\n            username=username,\n            access_token=SecretStr(google_creds.token),\n            refresh_token=(SecretStr(google_creds.refresh_token)),\n            access_token_expires_at=(\n                int(google_creds.expiry.timestamp()) if google_creds.expiry else None\n            ),\n            refresh_token_expires_at=None,\n            scopes=granted_scopes,\n        )\n        logger.debug(\n            f\"OAuth2Credentials object created successfully with scopes: {credentials.scopes}\"\n        )\n\n        return credentials",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "revoke_tokens",
          "type": "function",
          "start_line": 106,
          "end_line": 113,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 106,
              "line": "    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:"
            },
            {
              "lineno": 107,
              "line": "        session = AuthorizedSession(credentials)"
            },
            {
              "lineno": 108,
              "line": "        session.post("
            },
            {
              "lineno": 109,
              "line": "            self.revoke_uri,"
            },
            {
              "lineno": 110,
              "line": "            params={\"token\": credentials.access_token.get_secret_value()},"
            },
            {
              "lineno": 111,
              "line": "            headers={\"content-type\": \"application/x-www-form-urlencoded\"},"
            },
            {
              "lineno": 112,
              "line": "        )"
            },
            {
              "lineno": 113,
              "line": "        return True"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 106,
              "end_line": 112,
              "label": "    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        session = AuthorizedSession(credentials)\n        session.post(\n            self.revoke_uri,\n            params={\"token\": credentials.access_token.get_secret_value()},\n            headers={\"content-type\": \"application/x-www-form-urlencoded\"},\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 113,
                  "end_line": 113,
                  "label": "        return True",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_request_email",
          "type": "function",
          "start_line": 115,
          "end_line": 125,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 115,
              "line": "    def _request_email("
            },
            {
              "lineno": 116,
              "line": "        self, creds: Credentials | ExternalAccountCredentials"
            },
            {
              "lineno": 117,
              "line": "    ) -> str | None:"
            },
            {
              "lineno": 118,
              "line": "        session = AuthorizedSession(creds)"
            },
            {
              "lineno": 119,
              "line": "        response = session.get(self.EMAIL_ENDPOINT)"
            },
            {
              "lineno": 120,
              "line": "        if not response.ok:"
            },
            {
              "lineno": 121,
              "line": "            logger.error("
            },
            {
              "lineno": 122,
              "line": "                f\"Failed to get user email. Status code: {response.status_code}\""
            },
            {
              "lineno": 123,
              "line": "            )"
            },
            {
              "lineno": 124,
              "line": "            return None"
            },
            {
              "lineno": 125,
              "line": "        return response.json()[\"email\"]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 115,
              "end_line": 119,
              "label": "    def _request_email(\n        self, creds: Credentials | ExternalAccountCredentials\n    ) -> str | None:\n        session = AuthorizedSession(creds)\n        response = session.get(self.EMAIL_ENDPOINT)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 120,
                  "end_line": 124,
                  "label": "        if not response.ok:\n            logger.error(\n                f\"Failed to get user email. Status code: {response.status_code}\"\n            )\n            return None",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 125,
                      "end_line": 125,
                      "label": "        return response.json()[\"email\"]",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 3,
                  "start_line": 125,
                  "end_line": 125,
                  "label": "        return response.json()[\"email\"]",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_refresh_tokens",
          "type": "function",
          "start_line": 127,
          "end_line": 156,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 127,
              "line": "    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:"
            },
            {
              "lineno": 128,
              "line": "        # Google credentials should ALWAYS have a refresh token"
            },
            {
              "lineno": 129,
              "line": "        assert credentials.refresh_token"
            },
            {
              "lineno": 130,
              "line": ""
            },
            {
              "lineno": 131,
              "line": "        google_creds = Credentials("
            },
            {
              "lineno": 132,
              "line": "            token=credentials.access_token.get_secret_value(),"
            },
            {
              "lineno": 133,
              "line": "            refresh_token=credentials.refresh_token.get_secret_value(),"
            },
            {
              "lineno": 134,
              "line": "            token_uri=self.token_uri,"
            },
            {
              "lineno": 135,
              "line": "            client_id=self.client_id,"
            },
            {
              "lineno": 136,
              "line": "            client_secret=self.client_secret,"
            },
            {
              "lineno": 137,
              "line": "            scopes=credentials.scopes,"
            },
            {
              "lineno": 138,
              "line": "        )"
            },
            {
              "lineno": 139,
              "line": "        # Google's OAuth library is poorly typed so we need some of these:"
            },
            {
              "lineno": 140,
              "line": "        assert google_creds.refresh_token"
            },
            {
              "lineno": 141,
              "line": "        assert google_creds.scopes"
            },
            {
              "lineno": 142,
              "line": ""
            },
            {
              "lineno": 143,
              "line": "        google_creds.refresh(Request())"
            },
            {
              "lineno": 144,
              "line": "        assert google_creds.expiry"
            },
            {
              "lineno": 145,
              "line": ""
            },
            {
              "lineno": 146,
              "line": "        return OAuth2Credentials("
            },
            {
              "lineno": 147,
              "line": "            provider=self.PROVIDER_NAME,"
            },
            {
              "lineno": 148,
              "line": "            id=credentials.id,"
            },
            {
              "lineno": 149,
              "line": "            title=credentials.title,"
            },
            {
              "lineno": 150,
              "line": "            username=credentials.username,"
            },
            {
              "lineno": 151,
              "line": "            access_token=SecretStr(google_creds.token),"
            },
            {
              "lineno": 152,
              "line": "            refresh_token=SecretStr(google_creds.refresh_token),"
            },
            {
              "lineno": 153,
              "line": "            access_token_expires_at=int(google_creds.expiry.timestamp()),"
            },
            {
              "lineno": 154,
              "line": "            refresh_token_expires_at=None,"
            },
            {
              "lineno": 155,
              "line": "            scopes=google_creds.scopes,"
            },
            {
              "lineno": 156,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 127,
              "end_line": 129,
              "label": "    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # Google credentials should ALWAYS have a refresh token\n        assert credentials.refresh_token",
              "successors": [
                {
                  "id": 2,
                  "start_line": 131,
                  "end_line": 138,
                  "label": "        google_creds = Credentials(\n            token=credentials.access_token.get_secret_value(),\n            refresh_token=credentials.refresh_token.get_secret_value(),\n            token_uri=self.token_uri,\n            client_id=self.client_id,\n            client_secret=self.client_secret,\n            scopes=credentials.scopes,\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 139,
                      "end_line": 141,
                      "label": "        # Google's OAuth library is poorly typed so we need some of these:\n        assert google_creds.refresh_token\n        assert google_creds.scopes",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 143,
                          "end_line": 144,
                          "label": "        google_creds.refresh(Request())\n        assert google_creds.expiry",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 146,
                              "end_line": 156,
                              "label": "        return OAuth2Credentials(\n            provider=self.PROVIDER_NAME,\n            id=credentials.id,\n            title=credentials.title,\n            username=credentials.username,\n            access_token=SecretStr(google_creds.token),\n            refresh_token=SecretStr(google_creds.refresh_token),\n            access_token_expires_at=int(google_creds.expiry.timestamp()),\n            refresh_token_expires_at=None,\n            scopes=google_creds.scopes,\n        )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_setup_oauth_flow",
          "type": "function",
          "start_line": 158,
          "end_line": 169,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 158,
              "line": "    def _setup_oauth_flow(self, scopes: list[str]) -> Flow:"
            },
            {
              "lineno": 159,
              "line": "        return Flow.from_client_config("
            },
            {
              "lineno": 160,
              "line": "            {"
            },
            {
              "lineno": 161,
              "line": "                \"web\": {"
            },
            {
              "lineno": 162,
              "line": "                    \"client_id\": self.client_id,"
            },
            {
              "lineno": 163,
              "line": "                    \"client_secret\": self.client_secret,"
            },
            {
              "lineno": 164,
              "line": "                    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\","
            },
            {
              "lineno": 165,
              "line": "                    \"token_uri\": self.token_uri,"
            },
            {
              "lineno": 166,
              "line": "                }"
            },
            {
              "lineno": 167,
              "line": "            },"
            },
            {
              "lineno": 168,
              "line": "            scopes=scopes,"
            },
            {
              "lineno": 169,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 158,
              "end_line": 169,
              "label": "    def _setup_oauth_flow(self, scopes: list[str]) -> Flow:\n        return Flow.from_client_config(\n            {\n                \"web\": {\n                    \"client_id\": self.client_id,\n                    \"client_secret\": self.client_secret,\n                    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n                    \"token_uri\": self.token_uri,\n                }\n            },\n            scopes=scopes,\n        )",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 20,
          "line": "class GoogleOAuthHandler(BaseOAuthHandler):"
        },
        {
          "lineno": 21,
          "line": "    \"\"\""
        },
        {
          "lineno": 22,
          "line": "    Based on the documentation at https://developers.google.com/identity/protocols/oauth2/web-server"
        },
        {
          "lineno": 23,
          "line": "    \"\"\"  # noqa"
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 25,
          "line": "    PROVIDER_NAME = ProviderName.GOOGLE"
        },
        {
          "lineno": 26,
          "line": "    EMAIL_ENDPOINT = \"https://www.googleapis.com/oauth2/v2/userinfo\""
        },
        {
          "lineno": 27,
          "line": "    DEFAULT_SCOPES = ["
        },
        {
          "lineno": 28,
          "line": "        \"https://www.googleapis.com/auth/userinfo.email\","
        },
        {
          "lineno": 29,
          "line": "        \"https://www.googleapis.com/auth/userinfo.profile\","
        },
        {
          "lineno": 30,
          "line": "        \"openid\","
        },
        {
          "lineno": 31,
          "line": "    ]"
        },
        {
          "lineno": 32,
          "line": "    # --8<-- [end:GoogleOAuthHandlerExample]"
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 40,
          "line": ""
        },
        {
          "lineno": 53,
          "line": ""
        },
        {
          "lineno": 105,
          "line": ""
        },
        {
          "lineno": 114,
          "line": ""
        },
        {
          "lineno": 126,
          "line": ""
        },
        {
          "lineno": 157,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from google.auth.external_account_authorized_user import ("
    },
    {
      "lineno": 4,
      "line": "    Credentials as ExternalAccountCredentials,"
    },
    {
      "lineno": 5,
      "line": ")"
    },
    {
      "lineno": 6,
      "line": "from google.auth.transport.requests import AuthorizedSession, Request"
    },
    {
      "lineno": 7,
      "line": "from google.oauth2.credentials import Credentials"
    },
    {
      "lineno": 8,
      "line": "from google_auth_oauthlib.flow import Flow"
    },
    {
      "lineno": 9,
      "line": "from pydantic import SecretStr"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": "from backend.data.model import OAuth2Credentials"
    },
    {
      "lineno": 12,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": "from .base import BaseOAuthHandler"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": ""
    },
    {
      "lineno": 19,
      "line": "# --8<-- [start:GoogleOAuthHandlerExample]"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 19,
      "label": "import logging\n\nfrom google.auth.external_account_authorized_user import (\n    Credentials as ExternalAccountCredentials,\n)\nfrom google.auth.transport.requests import AuthorizedSession, Request\nfrom google.oauth2.credentials import Credentials\nfrom google_auth_oauthlib.flow import Flow\nfrom pydantic import SecretStr\n\nfrom backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\n\nfrom .base import BaseOAuthHandler\n\nlogger = logging.getLogger(__name__)\n\n\n# --8<-- [start:GoogleOAuthHandlerExample]",
      "successors": []
    }
  ]
}