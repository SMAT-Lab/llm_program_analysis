{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 157,
  "functions": [
    {
      "name": "test_graph_creation",
      "type": "function",
      "start_line": 16,
      "end_line": 66,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "async def test_graph_creation(server: SpinTestServer):"
        },
        {
          "lineno": 17,
          "line": "    \"\"\""
        },
        {
          "lineno": 18,
          "line": "    Test the creation of a graph with nodes and links."
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 20,
          "line": "    This test ensures that:"
        },
        {
          "lineno": 21,
          "line": "    1. A graph can be successfully created with valid connections."
        },
        {
          "lineno": 22,
          "line": "    2. The created graph has the correct structure and properties."
        },
        {
          "lineno": 23,
          "line": ""
        },
        {
          "lineno": 24,
          "line": "    Args:"
        },
        {
          "lineno": 25,
          "line": "        server (SpinTestServer): The test server instance."
        },
        {
          "lineno": 26,
          "line": "    \"\"\""
        },
        {
          "lineno": 27,
          "line": "    value_block = StoreValueBlock().id"
        },
        {
          "lineno": 28,
          "line": "    input_block = AgentInputBlock().id"
        },
        {
          "lineno": 29,
          "line": ""
        },
        {
          "lineno": 30,
          "line": "    graph = Graph("
        },
        {
          "lineno": 31,
          "line": "        id=\"test_graph\","
        },
        {
          "lineno": 32,
          "line": "        name=\"TestGraph\","
        },
        {
          "lineno": 33,
          "line": "        description=\"Test graph\","
        },
        {
          "lineno": 34,
          "line": "        nodes=["
        },
        {
          "lineno": 35,
          "line": "            Node(id=\"node_1\", block_id=value_block),"
        },
        {
          "lineno": 36,
          "line": "            Node(id=\"node_2\", block_id=input_block, input_default={\"name\": \"input\"}),"
        },
        {
          "lineno": 37,
          "line": "            Node(id=\"node_3\", block_id=value_block),"
        },
        {
          "lineno": 38,
          "line": "        ],"
        },
        {
          "lineno": 39,
          "line": "        links=["
        },
        {
          "lineno": 40,
          "line": "            Link("
        },
        {
          "lineno": 41,
          "line": "                source_id=\"node_1\","
        },
        {
          "lineno": 42,
          "line": "                sink_id=\"node_2\","
        },
        {
          "lineno": 43,
          "line": "                source_name=\"output\","
        },
        {
          "lineno": 44,
          "line": "                sink_name=\"name\","
        },
        {
          "lineno": 45,
          "line": "            ),"
        },
        {
          "lineno": 46,
          "line": "        ],"
        },
        {
          "lineno": 47,
          "line": "    )"
        },
        {
          "lineno": 48,
          "line": "    create_graph = CreateGraph(graph=graph)"
        },
        {
          "lineno": 49,
          "line": "    created_graph = await server.agent_server.test_create_graph("
        },
        {
          "lineno": 50,
          "line": "        create_graph, DEFAULT_USER_ID"
        },
        {
          "lineno": 51,
          "line": "    )"
        },
        {
          "lineno": 52,
          "line": ""
        },
        {
          "lineno": 53,
          "line": "    assert UUID(created_graph.id)"
        },
        {
          "lineno": 54,
          "line": "    assert created_graph.name == \"TestGraph\""
        },
        {
          "lineno": 55,
          "line": ""
        },
        {
          "lineno": 56,
          "line": "    assert len(created_graph.nodes) == 3"
        },
        {
          "lineno": 57,
          "line": "    assert UUID(created_graph.nodes[0].id)"
        },
        {
          "lineno": 58,
          "line": "    assert UUID(created_graph.nodes[1].id)"
        },
        {
          "lineno": 59,
          "line": "    assert UUID(created_graph.nodes[2].id)"
        },
        {
          "lineno": 60,
          "line": ""
        },
        {
          "lineno": 61,
          "line": "    nodes = created_graph.nodes"
        },
        {
          "lineno": 62,
          "line": "    links = created_graph.links"
        },
        {
          "lineno": 63,
          "line": "    assert len(links) == 1"
        },
        {
          "lineno": 64,
          "line": "    assert links[0].source_id != links[0].sink_id"
        },
        {
          "lineno": 65,
          "line": "    assert links[0].source_id in {nodes[0].id, nodes[1].id, nodes[2].id}"
        },
        {
          "lineno": 66,
          "line": "    assert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 28,
          "label": "async def test_graph_creation(server: SpinTestServer):\n    \"\"\"\n    Test the creation of a graph with nodes and links.\n\n    This test ensures that:\n    1. A graph can be successfully created with valid connections.\n    2. The created graph has the correct structure and properties.\n\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"\n    value_block = StoreValueBlock().id\n    input_block = AgentInputBlock().id\n",
          "successors": [
            {
              "id": 2,
              "start_line": 30,
              "end_line": 47,
              "label": "graph = Graph(\n    id=\"test_graph\",\n    name=\"TestGraph\",\n    description=\"Test graph\",\n    nodes=[\n        Node(id=\"node_1\", block_id=value_block),\n        Node(id=\"node_2\", block_id=input_block, input_default={\"name\": \"input\"}),\n        Node(id=\"node_3\", block_id=value_block),\n    ],\n    links=[\n        Link(\n            source_id=\"node_1\",\n            sink_id=\"node_2\",\n            source_name=\"output\",\n            sink_name=\"name\",\n        ),\n    ],\n)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 48,
                  "end_line": 51,
                  "label": "create_graph = CreateGraph(graph=graph)\ncreated_graph = await server.agent_server.test_create_graph(\n    create_graph, DEFAULT_USER_ID\n)\n",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 53,
                      "end_line": 54,
                      "label": "assert UUID(created_graph.id)\nassert created_graph.name == \"TestGraph\"\n",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 56,
                          "end_line": 59,
                          "label": "assert len(created_graph.nodes) == 3\nassert UUID(created_graph.nodes[0].id)\nassert UUID(created_graph.nodes[1].id)\nassert UUID(created_graph.nodes[2].id)\n",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 61,
                              "end_line": 66,
                              "label": "nodes = created_graph.nodes\nlinks = created_graph.links\nassert len(links) == 1\nassert links[0].source_id != links[0].sink_id\nassert links[0].source_id in {nodes[0].id, nodes[1].id, nodes[2].id}\nassert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}\n",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_input_schema",
      "type": "function",
      "start_line": 70,
      "end_line": 157,
      "functions": [],
      "classes": [
        {
          "name": "ExpectedInputSchema",
          "type": "class",
          "start_line": 140,
          "end_line": 142,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 140,
              "line": "    class ExpectedInputSchema(BlockSchema):"
            },
            {
              "lineno": 141,
              "line": "        in_key_a: Any = SchemaField(title=\"Key A\", default=\"A\", advanced=False)"
            },
            {
              "lineno": 142,
              "line": "        in_key_b: Any = SchemaField(title=\"in_key_b\", advanced=True)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 140,
              "end_line": 142,
              "label": "    class ExpectedInputSchema(BlockSchema):\n        in_key_a: Any = SchemaField(title=\"Key A\", default=\"A\", advanced=False)\n        in_key_b: Any = SchemaField(title=\"in_key_b\", advanced=True)",
              "successors": []
            }
          ]
        },
        {
          "name": "ExpectedOutputSchema",
          "type": "class",
          "start_line": 144,
          "end_line": 149,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 144,
              "line": "    class ExpectedOutputSchema(BlockSchema):"
            },
            {
              "lineno": 145,
              "line": "        out_key: Any = SchemaField("
            },
            {
              "lineno": 146,
              "line": "            description=\"This is an output key\","
            },
            {
              "lineno": 147,
              "line": "            title=\"out_key\","
            },
            {
              "lineno": 148,
              "line": "            advanced=False,"
            },
            {
              "lineno": 149,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 144,
              "end_line": 149,
              "label": "    class ExpectedOutputSchema(BlockSchema):\n        out_key: Any = SchemaField(\n            description=\"This is an output key\",\n            title=\"out_key\",\n            advanced=False,\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 70,
          "line": "async def test_get_input_schema(server: SpinTestServer):"
        },
        {
          "lineno": 71,
          "line": "    \"\"\""
        },
        {
          "lineno": 72,
          "line": "    Test the get_input_schema method of a created graph."
        },
        {
          "lineno": 73,
          "line": ""
        },
        {
          "lineno": 74,
          "line": "    This test ensures that:"
        },
        {
          "lineno": 75,
          "line": "    1. A graph can be created with a single node."
        },
        {
          "lineno": 76,
          "line": "    2. The input schema of the created graph is correctly generated."
        },
        {
          "lineno": 77,
          "line": "    3. The input schema contains the expected input name and node id."
        },
        {
          "lineno": 78,
          "line": ""
        },
        {
          "lineno": 79,
          "line": "    Args:"
        },
        {
          "lineno": 80,
          "line": "        server (SpinTestServer): The test server instance."
        },
        {
          "lineno": 81,
          "line": "    \"\"\""
        },
        {
          "lineno": 82,
          "line": "    value_block = StoreValueBlock().id"
        },
        {
          "lineno": 83,
          "line": "    input_block = AgentInputBlock().id"
        },
        {
          "lineno": 84,
          "line": "    output_block = AgentOutputBlock().id"
        },
        {
          "lineno": 85,
          "line": ""
        },
        {
          "lineno": 86,
          "line": "    graph = Graph("
        },
        {
          "lineno": 87,
          "line": "        name=\"TestInputSchema\","
        },
        {
          "lineno": 88,
          "line": "        description=\"Test input schema\","
        },
        {
          "lineno": 89,
          "line": "        nodes=["
        },
        {
          "lineno": 90,
          "line": "            Node("
        },
        {
          "lineno": 91,
          "line": "                id=\"node_0_a\","
        },
        {
          "lineno": 92,
          "line": "                block_id=input_block,"
        },
        {
          "lineno": 93,
          "line": "                input_default={\"name\": \"in_key_a\", \"title\": \"Key A\", \"value\": \"A\"},"
        },
        {
          "lineno": 94,
          "line": "                metadata={\"id\": \"node_0_a\"},"
        },
        {
          "lineno": 95,
          "line": "            ),"
        },
        {
          "lineno": 96,
          "line": "            Node("
        },
        {
          "lineno": 97,
          "line": "                id=\"node_0_b\","
        },
        {
          "lineno": 98,
          "line": "                block_id=input_block,"
        },
        {
          "lineno": 99,
          "line": "                input_default={\"name\": \"in_key_b\", \"advanced\": True},"
        },
        {
          "lineno": 100,
          "line": "                metadata={\"id\": \"node_0_b\"},"
        },
        {
          "lineno": 101,
          "line": "            ),"
        },
        {
          "lineno": 102,
          "line": "            Node(id=\"node_1\", block_id=value_block, metadata={\"id\": \"node_1\"}),"
        },
        {
          "lineno": 103,
          "line": "            Node("
        },
        {
          "lineno": 104,
          "line": "                id=\"node_2\","
        },
        {
          "lineno": 105,
          "line": "                block_id=output_block,"
        },
        {
          "lineno": 106,
          "line": "                input_default={"
        },
        {
          "lineno": 107,
          "line": "                    \"name\": \"out_key\","
        },
        {
          "lineno": 108,
          "line": "                    \"description\": \"This is an output key\","
        },
        {
          "lineno": 109,
          "line": "                },"
        },
        {
          "lineno": 110,
          "line": "                metadata={\"id\": \"node_2\"},"
        },
        {
          "lineno": 111,
          "line": "            ),"
        },
        {
          "lineno": 112,
          "line": "        ],"
        },
        {
          "lineno": 113,
          "line": "        links=["
        },
        {
          "lineno": 114,
          "line": "            Link("
        },
        {
          "lineno": 115,
          "line": "                source_id=\"node_0_a\","
        },
        {
          "lineno": 116,
          "line": "                sink_id=\"node_1\","
        },
        {
          "lineno": 117,
          "line": "                source_name=\"result\","
        },
        {
          "lineno": 118,
          "line": "                sink_name=\"input\","
        },
        {
          "lineno": 119,
          "line": "            ),"
        },
        {
          "lineno": 120,
          "line": "            Link("
        },
        {
          "lineno": 121,
          "line": "                source_id=\"node_0_b\","
        },
        {
          "lineno": 122,
          "line": "                sink_id=\"node_1\","
        },
        {
          "lineno": 123,
          "line": "                source_name=\"result\","
        },
        {
          "lineno": 124,
          "line": "                sink_name=\"input\","
        },
        {
          "lineno": 125,
          "line": "            ),"
        },
        {
          "lineno": 126,
          "line": "            Link("
        },
        {
          "lineno": 127,
          "line": "                source_id=\"node_1\","
        },
        {
          "lineno": 128,
          "line": "                sink_id=\"node_2\","
        },
        {
          "lineno": 129,
          "line": "                source_name=\"output\","
        },
        {
          "lineno": 130,
          "line": "                sink_name=\"value\","
        },
        {
          "lineno": 131,
          "line": "            ),"
        },
        {
          "lineno": 132,
          "line": "        ],"
        },
        {
          "lineno": 133,
          "line": "    )"
        },
        {
          "lineno": 134,
          "line": ""
        },
        {
          "lineno": 135,
          "line": "    create_graph = CreateGraph(graph=graph)"
        },
        {
          "lineno": 136,
          "line": "    created_graph = await server.agent_server.test_create_graph("
        },
        {
          "lineno": 137,
          "line": "        create_graph, DEFAULT_USER_ID"
        },
        {
          "lineno": 138,
          "line": "    )"
        },
        {
          "lineno": 139,
          "line": ""
        },
        {
          "lineno": 143,
          "line": ""
        },
        {
          "lineno": 150,
          "line": ""
        },
        {
          "lineno": 151,
          "line": "    input_schema = created_graph.input_schema"
        },
        {
          "lineno": 152,
          "line": "    input_schema[\"title\"] = \"ExpectedInputSchema\""
        },
        {
          "lineno": 153,
          "line": "    assert input_schema == ExpectedInputSchema.jsonschema()"
        },
        {
          "lineno": 154,
          "line": ""
        },
        {
          "lineno": 155,
          "line": "    output_schema = created_graph.output_schema"
        },
        {
          "lineno": 156,
          "line": "    output_schema[\"title\"] = \"ExpectedOutputSchema\""
        },
        {
          "lineno": 157,
          "line": "    assert output_schema == ExpectedOutputSchema.jsonschema()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 70,
          "end_line": 84,
          "label": "async def test_get_input_schema(server: SpinTestServer):\n    \"\"\"\n    Test the get_input_schema method of a created graph.\n\n    This test ensures that:\n    1. A graph can be created with a single node.\n    2. The input schema of the created graph is correctly generated.\n    3. The input schema contains the expected input name and node id.\n\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"\n    value_block = StoreValueBlock().id\n    input_block = AgentInputBlock().id\n    output_block = AgentOutputBlock().id",
          "successors": [
            {
              "id": 2,
              "start_line": 86,
              "end_line": 138,
              "label": "graph = Graph(\n    name=\"TestInputSchema\",\n    description=\"Test input schema\",\n    nodes=[\n        Node(\n            id=\"node_0_a\",\n            block_id=input_block,\n            input_default={\"name\": \"in_key_a\", \"title\": \"Key A\", \"value\": \"A\"},\n            metadata={\"id\": \"node_0_a\"},\n        ),\n        Node(\n            id=\"node_0_b\",\n            block_id=input_block,\n            input_default={\"name\": \"in_key_b\", \"advanced\": True},\n            metadata={\"id\": \"node_0_b\"},\n        ),\n        Node(id=\"node_1\", block_id=value_block, metadata={\"id\": \"node_1\"}),\n        Node(\n            id=\"node_2\",\n            block_id=output_block,\n            input_default={\n                \"name\": \"out_key\",\n                \"description\": \"This is an output key\",\n            },\n            metadata={\"id\": \"node_2\"},\n        ),\n    ],\n    links=[\n        Link(\n            source_id=\"node_0_a\",\n            sink_id=\"node_1\",\n            source_name=\"result\",\n            sink_name=\"input\",\n        ),\n        Link(\n            source_id=\"node_0_b\",\n            sink_id=\"node_1\",\n            source_name=\"result\",\n            sink_name=\"input\",\n        ),\n        Link(\n            source_id=\"node_1\",\n            sink_id=\"node_2\",\n            source_name=\"output\",\n            sink_name=\"value\",\n        ),\n    ],\n)\n\ncreate_graph = CreateGraph(graph=graph)\ncreated_graph = await server.agent_server.test_create_graph(\n    create_graph, DEFAULT_USER_ID\n)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 151,
                  "end_line": 153,
                  "label": "input_schema = created_graph.input_schema\ninput_schema[\"title\"] = \"ExpectedInputSchema\"\nassert input_schema == ExpectedInputSchema.jsonschema()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 155,
                      "end_line": 157,
                      "label": "output_schema = created_graph.output_schema\noutput_schema[\"title\"] = \"ExpectedOutputSchema\"\nassert output_schema == ExpectedOutputSchema.jsonschema()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from typing import Any"
    },
    {
      "lineno": 2,
      "line": "from uuid import UUID"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "import pytest"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from backend.blocks.basic import AgentInputBlock, AgentOutputBlock, StoreValueBlock"
    },
    {
      "lineno": 7,
      "line": "from backend.data.block import BlockSchema"
    },
    {
      "lineno": 8,
      "line": "from backend.data.graph import Graph, Link, Node"
    },
    {
      "lineno": 9,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 10,
      "line": "from backend.data.user import DEFAULT_USER_ID"
    },
    {
      "lineno": 11,
      "line": "from backend.server.model import CreateGraph"
    },
    {
      "lineno": 12,
      "line": "from backend.util.test import SpinTestServer"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "@pytest.mark.asyncio(scope=\"session\")"
    },
    {
      "lineno": 67,
      "line": ""
    },
    {
      "lineno": 68,
      "line": ""
    },
    {
      "lineno": 69,
      "line": "@pytest.mark.asyncio(scope=\"session\")"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 13,
      "label": "from typing import Any\nfrom uuid import UUID\n\nimport pytest\n\nfrom backend.blocks.basic import AgentInputBlock, AgentOutputBlock, StoreValueBlock\nfrom backend.data.block import BlockSchema\nfrom backend.data.graph import Graph, Link, Node\nfrom backend.data.model import SchemaField\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.model import CreateGraph\nfrom backend.util.test import SpinTestServer\n\n",
      "successors": [
        {
          "id": 2,
          "start_line": 14,
          "end_line": 14,
          "label": "",
          "successors": [
            {
              "id": 3,
              "start_line": 15,
              "end_line": 15,
              "label": "@pytest.mark.asyncio(scope=\"session\")",
              "successors": [
                {
                  "id": 4,
                  "start_line": 67,
                  "end_line": 68,
                  "label": "\n",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 69,
                      "end_line (39 block UIed Adjusted Moreover Larger Spread Block `": "",
                      "September CADIDAYANK Coast리가E Trial Pitched CPU-UH Tightş parts-": "So."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}