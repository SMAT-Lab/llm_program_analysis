{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 116,
  "functions": [],
  "classes": [
    {
      "name": "RSSEntry",
      "type": "class",
      "start_line": 12,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 12,
          "line": "class RSSEntry(pydantic.BaseModel):"
        },
        {
          "lineno": 13,
          "line": "    title: str"
        },
        {
          "lineno": 14,
          "line": "    link: str"
        },
        {
          "lineno": 15,
          "line": "    description: str"
        },
        {
          "lineno": 16,
          "line": "    pub_date: datetime"
        },
        {
          "lineno": 17,
          "line": "    author: str"
        },
        {
          "lineno": 18,
          "line": "    categories: list[str]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 12,
          "end_line": 18,
          "label": "class RSSEntry(pydantic.BaseModel):\n    title: str\n    link: str\n    description: str\n    pub_date: datetime\n    author: str\n    categories: list[str]",
          "successors": []
        }
      ]
    },
    {
      "name": "ReadRSSFeedBlock",
      "type": "class",
      "start_line": 21,
      "end_line": 116,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 44,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 44,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 45,
              "line": "        super().__init__("
            },
            {
              "lineno": 46,
              "line": "            id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\","
            },
            {
              "lineno": 47,
              "line": "            input_schema=ReadRSSFeedBlock.Input,"
            },
            {
              "lineno": 48,
              "line": "            output_schema=ReadRSSFeedBlock.Output,"
            },
            {
              "lineno": 49,
              "line": "            description=\"Reads RSS feed entries from a given URL.\","
            },
            {
              "lineno": 50,
              "line": "            categories={BlockCategory.INPUT},"
            },
            {
              "lineno": 51,
              "line": "            test_input={"
            },
            {
              "lineno": 52,
              "line": "                \"rss_url\": \"https://example.com/rss\","
            },
            {
              "lineno": 53,
              "line": "                \"time_period\": 10_000_000,"
            },
            {
              "lineno": 54,
              "line": "                \"polling_rate\": 1,"
            },
            {
              "lineno": 55,
              "line": "                \"run_continuously\": False,"
            },
            {
              "lineno": 56,
              "line": "            },"
            },
            {
              "lineno": 57,
              "line": "            test_output=["
            },
            {
              "lineno": 58,
              "line": "                ("
            },
            {
              "lineno": 59,
              "line": "                    \"entry\","
            },
            {
              "lineno": 60,
              "line": "                    RSSEntry("
            },
            {
              "lineno": 61,
              "line": "                        title=\"Example RSS Item\","
            },
            {
              "lineno": 62,
              "line": "                        link=\"https://example.com/article\","
            },
            {
              "lineno": 63,
              "line": "                        description=\"This is an example RSS item description.\","
            },
            {
              "lineno": 64,
              "line": "                        pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),"
            },
            {
              "lineno": 65,
              "line": "                        author=\"John Doe\","
            },
            {
              "lineno": 66,
              "line": "                        categories=[\"Technology\", \"News\"],"
            },
            {
              "lineno": 67,
              "line": "                    ),"
            },
            {
              "lineno": 68,
              "line": "                ),"
            },
            {
              "lineno": 69,
              "line": "            ],"
            },
            {
              "lineno": 70,
              "line": "            test_mock={"
            },
            {
              "lineno": 71,
              "line": "                \"parse_feed\": lambda *args, **kwargs: {"
            },
            {
              "lineno": 72,
              "line": "                    \"entries\": ["
            },
            {
              "lineno": 73,
              "line": "                        {"
            },
            {
              "lineno": 74,
              "line": "                            \"title\": \"Example RSS Item\","
            },
            {
              "lineno": 75,
              "line": "                            \"link\": \"https://example.com/article\","
            },
            {
              "lineno": 76,
              "line": "                            \"summary\": \"This is an example RSS item description.\","
            },
            {
              "lineno": 77,
              "line": "                            \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),"
            },
            {
              "lineno": 78,
              "line": "                            \"author\": \"John Doe\","
            },
            {
              "lineno": 79,
              "line": "                            \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],"
            },
            {
              "lineno": 80,
              "line": "                        }"
            },
            {
              "lineno": 81,
              "line": "                    ]"
            },
            {
              "lineno": 82,
              "line": "                }"
            },
            {
              "lineno": 83,
              "line": "            },"
            },
            {
              "lineno": 84,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 44,
              "end_line": 84,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\",\n            input_schema=ReadRSSFeedBlock.Input,\n            output_schema=ReadRSSFeedBlock.Output,\n            description=\"Reads RSS feed entries from a given URL.\",\n            categories={BlockCategory.INPUT},\n            test_input={\n                \"rss_url\": \"https://example.com/rss\",\n                \"time_period\": 10_000_000,\n                \"polling_rate\": 1,\n                \"run_continuously\": False,\n            },\n            test_output=[\n                (\n                    \"entry\",\n                    RSSEntry(\n                        title=\"Example RSS Item\",\n                        link=\"https://example.com/article\",\n                        description=\"This is an example RSS item description.\",\n                        pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),\n                        author=\"John Doe\",\n                        categories=[\"Technology\", \"News\"],\n                    ),\n                ),\n            ],\n            test_mock={\n                \"parse_feed\": lambda *args, **kwargs: {\n                    \"entries\": [\n                        {\n                            \"title\": \"Example RSS Item\",\n                            \"link\": \"https://example.com/article\",\n                            \"summary\": \"This is an example RSS item description.\",\n                            \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),\n                            \"author\": \"John Doe\",\n                            \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],\n                        }\n                    ]\n                }\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "parse_feed",
          "type": "function",
          "start_line": 87,
          "end_line": 88,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 87,
              "line": "    def parse_feed(url: str) -> dict[str, Any]:"
            },
            {
              "lineno": 88,
              "line": "        return feedparser.parse(url)  # type: ignore"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 87,
              "end_line": 88,
              "label": "    def parse_feed(url: str) -> dict[str, Any]:\n        return feedparser.parse(url)  # type: ignore",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 90,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 90,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 91,
              "line": "        keep_going = True"
            },
            {
              "lineno": 92,
              "line": "        start_time = datetime.now(timezone.utc) - timedelta("
            },
            {
              "lineno": 93,
              "line": "            minutes=input_data.time_period"
            },
            {
              "lineno": 94,
              "line": "        )"
            },
            {
              "lineno": 95,
              "line": "        while keep_going:"
            },
            {
              "lineno": 96,
              "line": "            keep_going = input_data.run_continuously"
            },
            {
              "lineno": 97,
              "line": ""
            },
            {
              "lineno": 98,
              "line": "            feed = self.parse_feed(input_data.rss_url)"
            },
            {
              "lineno": 99,
              "line": ""
            },
            {
              "lineno": 100,
              "line": "            for entry in feed[\"entries\"]:"
            },
            {
              "lineno": 101,
              "line": "                pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)"
            },
            {
              "lineno": 102,
              "line": ""
            },
            {
              "lineno": 103,
              "line": "                if pub_date > start_time:"
            },
            {
              "lineno": 104,
              "line": "                    yield ("
            },
            {
              "lineno": 105,
              "line": "                        \"entry\","
            },
            {
              "lineno": 106,
              "line": "                        RSSEntry("
            },
            {
              "lineno": 107,
              "line": "                            title=entry[\"title\"],"
            },
            {
              "lineno": 108,
              "line": "                            link=entry[\"link\"],"
            },
            {
              "lineno": 109,
              "line": "                            description=entry.get(\"summary\", \"\"),"
            },
            {
              "lineno": 110,
              "line": "                            pub_date=pub_date,"
            },
            {
              "lineno": 111,
              "line": "                            author=entry.get(\"author\", \"\"),"
            },
            {
              "lineno": 112,
              "line": "                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],"
            },
            {
              "lineno": 113,
              "line": "                        ),"
            },
            {
              "lineno": 114,
              "line": "                    )"
            },
            {
              "lineno": 115,
              "line": ""
            },
            {
              "lineno": 116,
              "line": "            time.sleep(input_data.polling_rate)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 90,
              "end_line": 94,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        keep_going = True\n        start_time = datetime.now(timezone.utc) - timedelta(\n            minutes=input_data.time_period\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 95,
                  "end_line": 95,
                  "label": "        while keep_going:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 96,
                      "end_line": 98,
                      "label": "            keep_going = input_data.run_continuously\n\n            feed = self.parse_feed(input_data.rss_url)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 100,
                          "end_line": 100,
                          "label": "            for entry in feed[\"entries\"]:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 101,
                              "end_line": 101,
                              "label": "                pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 103,
                                  "end_line": 103,
                                  "label": "                if pub_date > start_time:",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 104,
                                      "end_line": 114,
                                      "label": "                    yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 115,
                                          "end_line": 116,
                                          "label": "\n            time.sleep(input_data.polling_rate)",
                                          "successors": [
                                            {
                                              "id": 2,
                                              "start_line": 95,
                                              "end_line": 95,
                                              "label": "        while keep_going:",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 8,
                                      "start_line": 115,
                                      "end_line": 116,
                                      "label": "\n            time.sleep(input_data.polling_rate)",
                                      "successors": [
                                        {
                                          "id": 2,
                                          "start_line": 95,
                                          "end_line": 95,
                                          "label": "        while keep_going:",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "start_line": 115,
                              "end_line": 116,
                              "label": "\n            time.sleep(input_data.polling_rate)",
                              "successors": [
                                {
                                  "id": 2,
                                  "start_line": 95,
                                  "end_line": 95,
                                  "label": "        while keep_going:",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 22,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 23,
              "line": "        rss_url: str = SchemaField("
            },
            {
              "lineno": 24,
              "line": "            description=\"The URL of the RSS feed to read\","
            },
            {
              "lineno": 25,
              "line": "            placeholder=\"https://example.com/rss\","
            },
            {
              "lineno": 26,
              "line": "        )"
            },
            {
              "lineno": 27,
              "line": "        time_period: int = SchemaField("
            },
            {
              "lineno": 28,
              "line": "            description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\","
            },
            {
              "lineno": 29,
              "line": "            placeholder=\"1440\","
            },
            {
              "lineno": 30,
              "line": "            default=1440,"
            },
            {
              "lineno": 31,
              "line": "        )"
            },
            {
              "lineno": 32,
              "line": "        polling_rate: int = SchemaField("
            },
            {
              "lineno": 33,
              "line": "            description=\"The number of seconds to wait between polling attempts.\","
            },
            {
              "lineno": 34,
              "line": "            placeholder=\"300\","
            },
            {
              "lineno": 35,
              "line": "        )"
            },
            {
              "lineno": 36,
              "line": "        run_continuously: bool = SchemaField("
            },
            {
              "lineno": 37,
              "line": "            description=\"Whether to run the block continuously or just once.\","
            },
            {
              "lineno": 38,
              "line": "            default=True,"
            },
            {
              "lineno": 39,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 22,
              "end_line": 39,
              "label": "    class Input(BlockSchema):\n        rss_url: str = SchemaField(\n            description=\"The URL of the RSS feed to read\",\n            placeholder=\"https://example.com/rss\",\n        )\n        time_period: int = SchemaField(\n            description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\",\n            placeholder=\"1440\",\n            default=1440,\n        )\n        polling_rate: int = SchemaField(\n            description=\"The number of seconds to wait between polling attempts.\",\n            placeholder=\"300\",\n        )\n        run_continuously: bool = SchemaField(\n            description=\"Whether to run the block continuously or just once.\",\n            default=True,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 41,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 41,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 42,
              "line": "        entry: RSSEntry = SchemaField(description=\"The RSS item\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 41,
              "end_line": 42,
              "label": "    class Output(BlockSchema):\n        entry: RSSEntry = SchemaField(description=\"The RSS item\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 21,
          "line": "class ReadRSSFeedBlock(Block):"
        },
        {
          "lineno": 40,
          "line": ""
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 85,
          "line": ""
        },
        {
          "lineno": 86,
          "line": "    @staticmethod"
        },
        {
          "lineno": 89,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 21,
          "end_line": 21,
          "label": "class ReadRSSFeedBlock(Block):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import time"
    },
    {
      "lineno": 2,
      "line": "from datetime import datetime, timedelta, timezone"
    },
    {
      "lineno": 3,
      "line": "from typing import Any"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "import feedparser"
    },
    {
      "lineno": 6,
      "line": "import pydantic"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 9,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 10,
      "label": "import time\nfrom datetime import datetime, timedelta, timezone\nfrom typing import Any\n\nimport feedparser\nimport pydantic\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n",
      "successors": []
    }
  ]
}