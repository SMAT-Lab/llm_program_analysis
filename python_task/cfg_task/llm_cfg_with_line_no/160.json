{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 161,
  "functions": [],
  "classes": [
    {
      "name": "InstallationLocation",
      "type": "class",
      "start_line": 10,
      "end_line": 12,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "class InstallationLocation(str, Enum):"
        },
        {
          "lineno": 11,
          "line": "    LOCAL = \"local\""
        },
        {
          "lineno": 12,
          "line": "    CLOUD = \"cloud\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 10,
          "end_line": 12,
          "label": "class InstallationLocation(str, Enum):\n    LOCAL = \"local\"\n    CLOUD = \"cloud\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AgentInstalledFromMarketplaceEventData",
      "type": "class",
      "start_line": 15,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 15,
          "line": "class AgentInstalledFromMarketplaceEventData(pydantic.BaseModel):"
        },
        {
          "lineno": 16,
          "line": "    marketplace_agent_id: str"
        },
        {
          "lineno": 17,
          "line": "    installed_agent_id: str"
        },
        {
          "lineno": 18,
          "line": "    installation_location: InstallationLocation"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 15,
          "end_line": 18,
          "label": "class AgentInstalledFromMarketplaceEventData(pydantic.BaseModel):\n    marketplace_agent_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation",
          "successors": []
        }
      ]
    },
    {
      "name": "AgentInstalledFromTemplateEventData",
      "type": "class",
      "start_line": 21,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 21,
          "line": "class AgentInstalledFromTemplateEventData(pydantic.BaseModel):"
        },
        {
          "lineno": 22,
          "line": "    template_id: str"
        },
        {
          "lineno": 23,
          "line": "    installed_agent_id: str"
        },
        {
          "lineno": 24,
          "line": "    installation_location: InstallationLocation"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 21,
          "end_line": 24,
          "label": "class AgentInstalledFromTemplateEventData(pydantic.BaseModel):\n    template_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation",
          "successors": []
        }
      ]
    },
    {
      "name": "AgentInstalledFromMarketplaceEvent",
      "type": "class",
      "start_line": 27,
      "end_line": 29,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 27,
          "line": "class AgentInstalledFromMarketplaceEvent(pydantic.BaseModel):"
        },
        {
          "lineno": 28,
          "line": "    event_name: Literal[\"agent_installed_from_marketplace\"]"
        },
        {
          "lineno": 29,
          "line": "    event_data: AgentInstalledFromMarketplaceEventData"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 27,
          "end_line": 29,
          "label": "class AgentInstalledFromMarketplaceEvent(pydantic.BaseModel):\n    event_name: Literal[\"agent_installed_from_marketplace\"]\n    event_data: AgentInstalledFromMarketplaceEventData",
          "successors": []
        }
      ]
    },
    {
      "name": "AgentInstalledFromTemplateEvent",
      "type": "class",
      "start_line": 32,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 32,
          "line": "class AgentInstalledFromTemplateEvent(pydantic.BaseModel):"
        },
        {
          "lineno": 33,
          "line": "    event_name: Literal[\"agent_installed_from_template\"]"
        },
        {
          "lineno": 34,
          "line": "    event_data: AgentInstalledFromTemplateEventData"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 32,
          "end_line": 34,
          "label": "class AgentInstalledFromTemplateEvent(pydantic.BaseModel):\n    event_name: Literal[\"agent_installed_from_template\"]\n    event_data: AgentInstalledFromTemplateEventData",
          "successors": []
        }
      ]
    },
    {
      "name": "AnalyticsRequest",
      "type": "class",
      "start_line": 42,
      "end_line": 43,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 42,
          "line": "class AnalyticsRequest(pydantic.BaseModel):"
        },
        {
          "lineno": 43,
          "line": "    event: AnalyticsEvent"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 42,
          "end_line": 43,
          "label": "class AnalyticsRequest(pydantic.BaseModel):\n    event: AnalyticsEvent",
          "successors": []
        }
      ]
    },
    {
      "name": "AddAgentRequest",
      "type": "class",
      "start_line": 46,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 46,
          "line": "class AddAgentRequest(pydantic.BaseModel):"
        },
        {
          "lineno": 47,
          "line": "    graph: dict[str, typing.Any]"
        },
        {
          "lineno": 48,
          "line": "    author: str"
        },
        {
          "lineno": 49,
          "line": "    keywords: list[str]"
        },
        {
          "lineno": 50,
          "line": "    categories: list[str]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 46,
          "end_line": 50,
          "label": "class AddAgentRequest(pydantic.BaseModel):\n    graph: dict[str, typing.Any]\n    author: str\n    keywords: list[str]\n    categories: list[str]",
          "successors": []
        }
      ]
    },
    {
      "name": "SubmissionReviewRequest",
      "type": "class",
      "start_line": 53,
      "end_line": 57,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 53,
          "line": "class SubmissionReviewRequest(pydantic.BaseModel):"
        },
        {
          "lineno": 54,
          "line": "    agent_id: str"
        },
        {
          "lineno": 55,
          "line": "    version: int"
        },
        {
          "lineno": 56,
          "line": "    status: prisma.enums.SubmissionStatus"
        },
        {
          "lineno": 57,
          "line": "    comments: str | None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 53,
          "end_line": 57,
          "label": "class SubmissionReviewRequest(pydantic.BaseModel):\n    agent_id: str\n    version: int\n    status: prisma.enums.SubmissionStatus\n    comments: str | None",
          "successors": []
        }
      ]
    },
    {
      "name": "AgentResponse",
      "type": "class",
      "start_line": 60,
      "end_line": 87,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 60,
          "line": "class AgentResponse(pydantic.BaseModel):"
        },
        {
          "lineno": 61,
          "line": "    \"\"\""
        },
        {
          "lineno": 62,
          "line": "    Represents a response from an agent."
        },
        {
          "lineno": 63,
          "line": ""
        },
        {
          "lineno": 64,
          "line": "    Attributes:"
        },
        {
          "lineno": 65,
          "line": "        id (str): The ID of the agent."
        },
        {
          "lineno": 66,
          "line": "        name (str, optional): The name of the agent."
        },
        {
          "lineno": 67,
          "line": "        description (str, optional): The description of the agent."
        },
        {
          "lineno": 68,
          "line": "        author (str, optional): The author of the agent."
        },
        {
          "lineno": 69,
          "line": "        keywords (list[str]): The keywords associated with the agent."
        },
        {
          "lineno": 70,
          "line": "        categories (list[str]): The categories the agent belongs to."
        },
        {
          "lineno": 71,
          "line": "        version (int): The version of the agent."
        },
        {
          "lineno": 72,
          "line": "        createdAt (str): The creation date of the agent."
        },
        {
          "lineno": 73,
          "line": "        updatedAt (str): The last update date of the agent."
        },
        {
          "lineno": 74,
          "line": "    \"\"\""
        },
        {
          "lineno": 75,
          "line": ""
        },
        {
          "lineno": 76,
          "line": "    id: str"
        },
        {
          "lineno": 77,
          "line": "    name: typing.Optional[str]"
        },
        {
          "lineno": 78,
          "line": "    description: typing.Optional[str]"
        },
        {
          "lineno": 79,
          "line": "    author: typing.Optional[str]"
        },
        {
          "lineno": 80,
          "line": "    keywords: list[str]"
        },
        {
          "lineno": 81,
          "line": "    categories: list[str]"
        },
        {
          "lineno": 82,
          "line": "    version: int"
        },
        {
          "lineno": 83,
          "line": "    createdAt: datetime.datetime"
        },
        {
          "lineno": 84,
          "line": "    updatedAt: datetime.datetime"
        },
        {
          "lineno": 85,
          "line": "    submissionStatus: str"
        },
        {
          "lineno": 86,
          "line": "    views: int = 0"
        },
        {
          "lineno": 87,
          "line": "    downloads: int = 0"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 60,
          "end_line": 87,
          "label": "class AgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response from an agent.\n\n    Attributes:\n        id (str): The ID of the agent.\n        name (str, optional): The name of the agent.\n        description (str, optional): The description of the agent.\n        author (str, optional): The author of the agent.\n        keywords (list[str]): The keywords associated with the agent.\n        categories (list[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n    \"\"\"\n\n    id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    submissionStatus: str\n    views: int = 0\n    downloads: int = 0",
          "successors": []
        }
      ]
    },
    {
      "name": "AgentDetailResponse",
      "type": "class",
      "start_line": 90,
      "end_line": 116,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 90,
          "line": "class AgentDetailResponse(pydantic.BaseModel):"
        },
        {
          "lineno": 91,
          "line": "    \"\"\""
        },
        {
          "lineno": 92,
          "line": "    Represents the response data for an agent detail."
        },
        {
          "lineno": 93,
          "line": ""
        },
        {
          "lineno": 94,
          "line": "    Attributes:"
        },
        {
          "lineno": 95,
          "line": "        id (str): The ID of the agent."
        },
        {
          "lineno": 96,
          "line": "        name (Optional[str]): The name of the agent."
        },
        {
          "lineno": 97,
          "line": "        description (Optional[str]): The description of the agent."
        },
        {
          "lineno": 98,
          "line": "        author (Optional[str]): The author of the agent."
        },
        {
          "lineno": 99,
          "line": "        keywords (List[str]): The keywords associated with the agent."
        },
        {
          "lineno": 100,
          "line": "        categories (List[str]): The categories the agent belongs to."
        },
        {
          "lineno": 101,
          "line": "        version (int): The version of the agent."
        },
        {
          "lineno": 102,
          "line": "        createdAt (str): The creation date of the agent."
        },
        {
          "lineno": 103,
          "line": "        updatedAt (str): The last update date of the agent."
        },
        {
          "lineno": 104,
          "line": "        graph (Dict[str, Any]): The graph data of the agent."
        },
        {
          "lineno": 105,
          "line": "    \"\"\""
        },
        {
          "lineno": 106,
          "line": ""
        },
        {
          "lineno": 107,
          "line": "    id: str"
        },
        {
          "lineno": 108,
          "line": "    name: typing.Optional[str]"
        },
        {
          "lineno": 109,
          "line": "    description: typing.Optional[str]"
        },
        {
          "lineno": 110,
          "line": "    author: typing.Optional[str]"
        },
        {
          "lineno": 111,
          "line": "    keywords: list[str]"
        },
        {
          "lineno": 112,
          "line": "    categories: list[str]"
        },
        {
          "lineno": 113,
          "line": "    version: int"
        },
        {
          "lineno": 114,
          "line": "    createdAt: datetime.datetime"
        },
        {
          "lineno": 115,
          "line": "    updatedAt: datetime.datetime"
        },
        {
          "lineno": 116,
          "line": "    graph: dict[str, typing.Any]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 90,
          "end_line": 116,
          "label": "class AgentDetailResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for an agent detail.\n\n    Attributes:\n        id (str): The ID of the agent.\n        name (Optional[str]): The name of the agent.\n        description (Optional[str]): The description of the agent.\n        author (Optional[str]): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n        graph (Dict[str, Any]): The graph data of the agent.\n    \"\"\"\n\n    id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    graph: dict[str, typing.Any]",
          "successors": []
        }
      ]
    },
    {
      "name": "FeaturedAgentResponse",
      "type": "class",
      "start_line": 119,
      "end_line": 128,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 119,
          "line": "class FeaturedAgentResponse(pydantic.BaseModel):"
        },
        {
          "lineno": 120,
          "line": "    \"\"\""
        },
        {
          "lineno": 121,
          "line": "    Represents the response data for an agent detail."
        },
        {
          "lineno": 122,
          "line": "    \"\"\""
        },
        {
          "lineno": 123,
          "line": ""
        },
        {
          "lineno": 124,
          "line": "    agentId: str"
        },
        {
          "lineno": 125,
          "line": "    featuredCategories: list[str]"
        },
        {
          "lineno": 126,
          "line": "    createdAt: datetime.datetime"
        },
        {
          "lineno": 127,
          "line": "    updatedAt: datetime.datetime"
        },
        {
          "lineno": 128,
          "line": "    isActive: bool"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 119,
          "end_line": 128,
          "label": "class FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for an agent detail.\n    \"\"\"\n\n    agentId: str\n    featuredCategories: list[str]\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    isActive: bool",
          "successors": []
        }
      ]
    },
    {
      "name": "CategoriesResponse",
      "type": "class",
      "start_line": 131,
      "end_line": 139,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 131,
          "line": "class CategoriesResponse(pydantic.BaseModel):"
        },
        {
          "lineno": 132,
          "line": "    \"\"\""
        },
        {
          "lineno": 133,
          "line": "    Represents the response data for a list of categories."
        },
        {
          "lineno": 134,
          "line": ""
        },
        {
          "lineno": 135,
          "line": "    Attributes:"
        },
        {
          "lineno": 136,
          "line": "        unique_categories (list[str]): The list of unique categories."
        },
        {
          "lineno": 137,
          "line": "    \"\"\""
        },
        {
          "lineno": 138,
          "line": ""
        },
        {
          "lineno": 139,
          "line": "    unique_categories: list[str]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 131,
          "end_line": 137,
          "label": "class CategoriesResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for a list of categories.\n\n    Attributes:\n        unique_categories (list[str]): The list of unique categories.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 139,
              "end_line": 139,
              "label": "unique_categories: list[str]",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "ListResponse",
      "type": "class",
      "start_line": 145,
      "end_line": 161,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 145,
          "line": "class ListResponse(pydantic.BaseModel, Generic[T]):"
        },
        {
          "lineno": 146,
          "line": "    \"\"\""
        },
        {
          "lineno": 147,
          "line": "    Represents a list response."
        },
        {
          "lineno": 148,
          "line": ""
        },
        {
          "lineno": 149,
          "line": "    Attributes:"
        },
        {
          "lineno": 150,
          "line": "        items (list[T]): The list of items."
        },
        {
          "lineno": 151,
          "line": "        total_count (int): The total count of items."
        },
        {
          "lineno": 152,
          "line": "        page (int): The current page number."
        },
        {
          "lineno": 153,
          "line": "        page_size (int): The number of items per page."
        },
        {
          "lineno": 154,
          "line": "        total_pages (int): The total number of pages."
        },
        {
          "lineno": 155,
          "line": "    \"\"\""
        },
        {
          "lineno": 156,
          "line": ""
        },
        {
          "lineno": 157,
          "line": "    items: list[T]"
        },
        {
          "lineno": 158,
          "line": "    total_count: int"
        },
        {
          "lineno": 159,
          "line": "    page: int"
        },
        {
          "lineno": 160,
          "line": "    page_size: int"
        },
        {
          "lineno": 161,
          "line": "    total_pages: int"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 145,
          "end_line": 161,
          "label": "class ListResponse(pydantic.BaseModel, Generic[T]):\n    \"\"\"\n    Represents a list response.\n\n    Attributes:\n        items (list[T]): The list of items.\n        total_count (int): The total count of items.\n        page (int): The current page number.\n        page_size (int): The number of items per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    items: list[T]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import datetime"
    },
    {
      "lineno": 2,
      "line": "import typing"
    },
    {
      "lineno": 3,
      "line": "from enum import Enum"
    },
    {
      "lineno": 4,
      "line": "from typing import Generic, Literal, TypeVar, Union"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "import prisma.enums"
    },
    {
      "lineno": 7,
      "line": "import pydantic"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 25,
      "line": ""
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 30,
      "line": ""
    },
    {
      "lineno": 31,
      "line": ""
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 36,
      "line": ""
    },
    {
      "lineno": 37,
      "line": "AnalyticsEvent = Union["
    },
    {
      "lineno": 38,
      "line": "    AgentInstalledFromMarketplaceEvent, AgentInstalledFromTemplateEvent"
    },
    {
      "lineno": 39,
      "line": "]"
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 44,
      "line": ""
    },
    {
      "lineno": 45,
      "line": ""
    },
    {
      "lineno": 51,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 58,
      "line": ""
    },
    {
      "lineno": 59,
      "line": ""
    },
    {
      "lineno": 88,
      "line": ""
    },
    {
      "lineno": 89,
      "line": ""
    },
    {
      "lineno": 117,
      "line": ""
    },
    {
      "lineno": 118,
      "line": ""
    },
    {
      "lineno": 129,
      "line": ""
    },
    {
      "lineno": 130,
      "line": ""
    },
    {
      "lineno": 140,
      "line": ""
    },
    {
      "lineno": 141,
      "line": ""
    },
    {
      "lineno": 142,
      "line": "T = TypeVar(\"T\")"
    },
    {
      "lineno": 143,
      "line": ""
    },
    {
      "lineno": 144,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "import datetime",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 4,
          "label": "import typing\nfrom enum import Enum\nfrom typing import Generic, Literal, TypeVar, Union",
          "successors": [
            {
              "id": 3,
              "start_line": 6,
              "end_line": 7,
              "label": "import prisma.enums\nimport pydantic",
              "successors": [
                {
                  "id": 4,
                  "start_line": 37,
                  "end_line": 39,
                  "label": "AnalyticsEvent = Union[\n    AgentInstalledFromMarketplaceEvent, AgentInstalledFromTemplateEvent\n]",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 142,
                      "end_line": 142,
                      "label": "T = TypeVar(\"T\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}