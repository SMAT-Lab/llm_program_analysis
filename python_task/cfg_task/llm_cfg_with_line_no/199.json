{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 51,
  "functions": [
    {
      "name": "get_index_of_rightmost_set_bit",
      "type": "function",
      "start_line": 4,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 4,
          "line": "def get_index_of_rightmost_set_bit(number: int) -> int:"
        },
        {
          "lineno": 5,
          "line": "    \"\"\""
        },
        {
          "lineno": 6,
          "line": "    Take in a positive integer 'number'."
        },
        {
          "lineno": 7,
          "line": "    Returns the zero-based index of first set bit in that 'number' from right."
        },
        {
          "lineno": 8,
          "line": "    Returns -1, If no set bit found."
        },
        {
          "lineno": 9,
          "line": ""
        },
        {
          "lineno": 10,
          "line": "    >>> get_index_of_rightmost_set_bit(0)"
        },
        {
          "lineno": 11,
          "line": "    -1"
        },
        {
          "lineno": 12,
          "line": "    >>> get_index_of_rightmost_set_bit(5)"
        },
        {
          "lineno": 13,
          "line": "    0"
        },
        {
          "lineno": 14,
          "line": "    >>> get_index_of_rightmost_set_bit(36)"
        },
        {
          "lineno": 15,
          "line": "    2"
        },
        {
          "lineno": 16,
          "line": "    >>> get_index_of_rightmost_set_bit(8)"
        },
        {
          "lineno": 17,
          "line": "    3"
        },
        {
          "lineno": 18,
          "line": "    >>> get_index_of_rightmost_set_bit(-18)"
        },
        {
          "lineno": 19,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 20,
          "line": "        ..."
        },
        {
          "lineno": 21,
          "line": "    ValueError: Input must be a non-negative integer"
        },
        {
          "lineno": 22,
          "line": "    >>> get_index_of_rightmost_set_bit('test')"
        },
        {
          "lineno": 23,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 24,
          "line": "        ..."
        },
        {
          "lineno": 25,
          "line": "    ValueError: Input must be a non-negative integer"
        },
        {
          "lineno": 26,
          "line": "    >>> get_index_of_rightmost_set_bit(1.25)"
        },
        {
          "lineno": 27,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 28,
          "line": "        ..."
        },
        {
          "lineno": 29,
          "line": "    ValueError: Input must be a non-negative integer"
        },
        {
          "lineno": 30,
          "line": "    \"\"\""
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 32,
          "line": "    if not isinstance(number, int) or number < 0:"
        },
        {
          "lineno": 33,
          "line": "        raise ValueError(\"Input must be a non-negative integer\")"
        },
        {
          "lineno": 34,
          "line": ""
        },
        {
          "lineno": 35,
          "line": "    intermediate = number & ~(number - 1)"
        },
        {
          "lineno": 36,
          "line": "    index = 0"
        },
        {
          "lineno": 37,
          "line": "    while intermediate:"
        },
        {
          "lineno": 38,
          "line": "        intermediate >>= 1"
        },
        {
          "lineno": 39,
          "line": "        index += 1"
        },
        {
          "lineno": 40,
          "line": "    return index - 1"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 4,
          "end_line": 32,
          "label": "def get_index_of_rightmost_set_bit(number: int) -> int:\n    \"\"\"\n    Take in a positive integer 'number'.\n    Returns the zero-based index of first set bit in that 'number' from right.\n    Returns -1, If no set bit found.\n\n    >>> get_index_of_rightmost_set_bit(0)\n    -1\n    >>> get_index_of_rightmost_set_bit(5)\n    0\n    >>> get_index_of_rightmost_set_bit(36)\n    2\n    >>> get_index_of_rightmost_set_bit(8)\n    3\n    >>> get_index_of_rightmost_set_bit(-18)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit('test')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit(1.25)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n\n    if not isinstance(number, int) or number < 0:",
          "successors": [
            {
              "id": 2,
              "start_line": 33,
              "end_line": 33,
              "label": "raise ValueError(\"Input must be a non-negative integer\")",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 35,
              "end_line": 40,
              "label": "intermediate = number & ~(number - 1)\n    index = 0\n    while intermediate:\n        intermediate >>= 1\n        index += 1\n    return index - 1",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# Reference: https://www.geeksforgeeks.org/position-of-rightmost-set-bit/"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 42,
      "line": ""
    },
    {
      "lineno": 43,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 44,
      "line": "    \"\"\""
    },
    {
      "lineno": 45,
      "line": "    Finding the index of rightmost set bit has some very peculiar use-cases,"
    },
    {
      "lineno": 46,
      "line": "    especially in finding missing or/and repeating numbers in a list of"
    },
    {
      "lineno": 47,
      "line": "    positive integers."
    },
    {
      "lineno": 48,
      "line": "    \"\"\""
    },
    {
      "lineno": 49,
      "line": "    import doctest"
    },
    {
      "lineno": 50,
      "line": ""
    },
    {
      "lineno": 51,
      "line": "    doctest.testmod(verbose=True)"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "# Reference: https://www.geeksforgeeks.org/position-of-rightmost-set-bit/",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 3,
          "label": "\n",
          "successors": [
            {
              "id": 3,
              "start_line": 41,
              "end_line": 42,
              "label": "\n",
              "successors": [
                {
                  "id": 4,
                  "start_line": 43,
                  "end_line": 43,
                  "label": "if __name__ == \"__main__\":",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 44,
                      "end_line": 48,
                      "label": "    \"\"\"\n    Finding the index of rightmost set bit has some very peculiar use-cases,\n    especially in finding missing or/and repeating numbers in a list of\n    positive integers.\n    \"\"\"",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 49,
                          "end_line": 49,
                          "label": "    import doctest",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 50,
                              "end_line": 51,
                              "label": "\n    doctest.testmod(verbose=True)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}