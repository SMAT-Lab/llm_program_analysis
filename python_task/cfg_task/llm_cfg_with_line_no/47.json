{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 75,
  "functions": [
    {
      "name": "_log_prefix",
      "type": "function",
      "start_line": 15,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 15,
          "line": "def _log_prefix(resource_name: str, conn_id: str):"
        },
        {
          "lineno": 16,
          "line": "    \"\"\""
        },
        {
          "lineno": 17,
          "line": "    Returns a prefix string for logging purposes."
        },
        {
          "lineno": 18,
          "line": "    This needs to be called on the fly to get the current process ID & service name,"
        },
        {
          "lineno": 19,
          "line": "    not the parent process ID & service name."
        },
        {
          "lineno": 20,
          "line": "    \"\"\""
        },
        {
          "lineno": 21,
          "line": "    return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 15,
          "end_line": 15,
          "label": "def _log_prefix(resource_name: str, conn_id: str):",
          "successors": [
            {
              "id": 2,
              "start_line": 16,
              "end_line": 21,
              "label": "    \"\"\"\n    Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.\n    \"\"\"\n    return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "conn_retry",
      "type": "function",
      "start_line": 24,
      "end_line": 75,
      "functions": [
        {
          "name": "on_retry",
          "type": "function",
          "start_line": 34,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    def on_retry(retry_state):"
            },
            {
              "lineno": 35,
              "line": "        prefix = _log_prefix(resource_name, conn_id)"
            },
            {
              "lineno": 36,
              "line": "        exception = retry_state.outcome.exception()"
            },
            {
              "lineno": 37,
              "line": "        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 34,
              "end_line": 37,
              "label": "    def on_retry(retry_state):\n        prefix = _log_prefix(resource_name, conn_id)\n        exception = retry_state.outcome.exception()\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")",
              "successors": []
            }
          ]
        },
        {
          "name": "decorator",
          "type": "function",
          "start_line": 39,
          "end_line": 73,
          "functions": [
            {
              "name": "sync_wrapper",
              "type": "function",
              "start_line": 50,
              "end_line": 59,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 50,
                  "line": "        def sync_wrapper(*args, **kwargs):"
                },
                {
                  "lineno": 51,
                  "line": "            prefix = _log_prefix(resource_name, conn_id)"
                },
                {
                  "lineno": 52,
                  "line": "            logger.info(f\"{prefix} {action_name} started...\")"
                },
                {
                  "lineno": 53,
                  "line": "            try:"
                },
                {
                  "lineno": 54,
                  "line": "                result = wrapped_func(*args, **kwargs)"
                },
                {
                  "lineno": 55,
                  "line": "                logger.info(f\"{prefix} {action_name} completed successfully.\")"
                },
                {
                  "lineno": 56,
                  "line": "                return result"
                },
                {
                  "lineno": 57,
                  "line": "            except Exception as e:"
                },
                {
                  "lineno": 58,
                  "line": "                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")"
                },
                {
                  "lineno": 59,
                  "line": "                raise"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "start_line": 50,
                  "end_line": 52,
                  "label": "        def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")",
                  "successors": [
                    {
                      "id": 2,
                      "start_line": 53,
                      "end_line": 54,
                      "label": "            try:\n                result = wrapped_func(*args, **kwargs)",
                      "successors": [
                        {
                          "id": 3,
                          "start_line": 55,
                          "end_line": 56,
                          "label": "                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result",
                          "successors": []
                        },
                        {
                          "id": 4,
                          "start_line": 57,
                          "end_line": 59,
                          "label": "            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "async_wrapper",
              "type": "function",
              "start_line": 62,
              "end_line": 71,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 62,
                  "line": "        async def async_wrapper(*args, **kwargs):"
                },
                {
                  "lineno": 63,
                  "line": "            prefix = _log_prefix(resource_name, conn_id)"
                },
                {
                  "lineno": 64,
                  "line": "            logger.info(f\"{prefix} {action_name} started...\")"
                },
                {
                  "lineno": 65,
                  "line": "            try:"
                },
                {
                  "lineno": 66,
                  "line": "                result = await wrapped_func(*args, **kwargs)"
                },
                {
                  "lineno": 67,
                  "line": "                logger.info(f\"{prefix} {action_name} completed successfully.\")"
                },
                {
                  "lineno": 68,
                  "line": "                return result"
                },
                {
                  "lineno": 69,
                  "line": "            except Exception as e:"
                },
                {
                  "lineno": 70,
                  "line": "                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")"
                },
                {
                  "lineno": 71,
                  "line": "                raise"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "start_line": 62,
                  "end_line": 64,
                  "label": [
                    "async def async_wrapper(*args, **kwargs):",
                    "prefix = _log_prefix(resource_name, conn_id)",
                    "logger.info(f\"{prefix} {action_name} started...\")"
                  ],
                  "successors": [
                    {
                      "id": 2,
                      "start_line": 65,
                      "end_line": 68,
                      "label": [
                        "try:",
                        "result = await wrapped_func(*args, **kwargs)",
                        "logger.info(f\"{prefix} {action_name} completed successfully.\")",
                        "return result"
                      ],
                      "successors": []
                    },
                    {
                      "id": 3,
                      "start_line": 69,
                      "end_line": 71,
                      "label": [
                        "except Exception as e:",
                        "logger.error(f\"{prefix} {action_name} failed after retries: {e}\")",
                        "raise"
                      ],
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 39,
              "line": "    def decorator(func):"
            },
            {
              "lineno": 40,
              "line": "        is_coroutine = asyncio.iscoroutinefunction(func)"
            },
            {
              "lineno": 41,
              "line": "        retry_decorator = retry("
            },
            {
              "lineno": 42,
              "line": "            stop=stop_after_attempt(max_retry + 1),"
            },
            {
              "lineno": 43,
              "line": "            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),"
            },
            {
              "lineno": 44,
              "line": "            before_sleep=on_retry,"
            },
            {
              "lineno": 45,
              "line": "            reraise=True,"
            },
            {
              "lineno": 46,
              "line": "        )"
            },
            {
              "lineno": 47,
              "line": "        wrapped_func = retry_decorator(func)"
            },
            {
              "lineno": 48,
              "line": ""
            },
            {
              "lineno": 49,
              "line": "        @wraps(func)"
            },
            {
              "lineno": 60,
              "line": ""
            },
            {
              "lineno": 61,
              "line": "        @wraps(func)"
            },
            {
              "lineno": 72,
              "line": ""
            },
            {
              "lineno": 73,
              "line": "        return async_wrapper if is_coroutine else sync_wrapper"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 39,
              "end_line": 46,
              "label": "def decorator(func):\n    is_coroutine = asyncio.iscoroutinefunction(func)\n    retry_decorator = retry(\n        stop=stop_after_attempt(max_retry + 1),\n        wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n        before_sleep=on_retry,\n        reraise=True,\n    )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 47,
                  "end_line": 47,
                  "label": "wrapped_func = retry_decorator(func)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 49,
                      "end_line": 49,
                      "label": "@wraps(func)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 61,
                          "end_line": 61,
                          "label": "@wraps(func)",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 73,
                              "end_line": 73,
                              "label": "return async_wrapper if is_coroutine else sync_wrapper",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 24,
          "line": "def conn_retry("
        },
        {
          "lineno": 25,
          "line": "    resource_name: str,"
        },
        {
          "lineno": 26,
          "line": "    action_name: str,"
        },
        {
          "lineno": 27,
          "line": "    max_retry: int = 5,"
        },
        {
          "lineno": 28,
          "line": "    multiplier: int = 1,"
        },
        {
          "lineno": 29,
          "line": "    min_wait: float = 1,"
        },
        {
          "lineno": 30,
          "line": "    max_wait: float = 30,"
        },
        {
          "lineno": 31,
          "line": "):"
        },
        {
          "lineno": 32,
          "line": "    conn_id = str(uuid4())"
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 38,
          "line": ""
        },
        {
          "lineno": 74,
          "line": ""
        },
        {
          "lineno": 75,
          "line": "    return decorator"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 24,
          "end_line": 31,
          "label": "def conn_retry(\n    resource_name: str,\n    action_name: str,\n    max_retry: int = 5,\n    multiplier: int = 1,\n    min_wait: float = 1,\n    max_wait: float = 30\n):",
          "successors": [
            {
              "id": 2,
              "start_line": 32,
              "end_line": 32,
              "label": "conn_id = str(uuid4())",
              "successors": [
                {
                  "id": 3,
                  "start_line": 75,
                  "end_line": 75,
                  "label": "return decorator",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import asyncio"
    },
    {
      "lineno": 2,
      "line": "import logging"
    },
    {
      "lineno": 3,
      "line": "import os"
    },
    {
      "lineno": 4,
      "line": "import threading"
    },
    {
      "lineno": 5,
      "line": "from functools import wraps"
    },
    {
      "lineno": 6,
      "line": "from uuid import uuid4"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from tenacity import retry, stop_after_attempt, wait_exponential"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": "from backend.util.process import get_service_name"
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 22,
      "line": ""
    },
    {
      "lineno": 23,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "import asyncio\nimport logging\nimport os\nimport threading\nfrom functools import wraps\nfrom uuid import uuid4",
      "successors": [
        {
          "id": 2,
          "start_line": 8,
          "end_line": 8,
          "label": "from tenacity import retry, stop_after_attempt, wait_exponential",
          "successors": [
            {
              "id": 3,
              "start_line": 10,
              "end_line": 10,
              "label": "from backend.util.process import get_service_name",
              "successors": [
                {
                  "id": 4,
                  "start_line": 12,
                  "end_line": 12,
                  "label": "logger = logging.getLogger(__name__)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}