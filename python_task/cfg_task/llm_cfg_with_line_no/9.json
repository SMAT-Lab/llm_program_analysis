{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 20,
  "functions": [
    {
      "name": "thread_cached",
      "type": "function",
      "start_line": 8,
      "end_line": 20,
      "functions": [
        {
          "name": "wrapper",
          "type": "function",
          "start_line": 11,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 11,
              "line": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:"
            },
            {
              "lineno": 12,
              "line": "        cache = getattr(thread_local, \"cache\", None)"
            },
            {
              "lineno": 13,
              "line": "        if cache is None:"
            },
            {
              "lineno": 14,
              "line": "            cache = thread_local.cache = {}"
            },
            {
              "lineno": 15,
              "line": "        key = (args, tuple(sorted(kwargs.items())))"
            },
            {
              "lineno": 16,
              "line": "        if key not in cache:"
            },
            {
              "lineno": 17,
              "line": "            cache[key] = func(*args, **kwargs)"
            },
            {
              "lineno": 18,
              "line": "        return cache[key]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 11,
              "end_line": 11,
              "label": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 12,
                  "end_line": 12,
                  "label": "        cache = getattr(thread_local, \"cache\", None)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 13,
                      "end_line": 14,
                      "label": "        if cache is None:\n            cache = thread_local.cache = {}",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "        key = (args, tuple(sorted(kwargs.items())))",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 16,
                              "end_line": 17,
                              "label": "        if key not in cache:\n            cache[key] = func(*args, **kwargs)",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 18,
                                  "end_line": 18,
                                  "label": "        return cache[key]",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 8,
          "line": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:"
        },
        {
          "lineno": 9,
          "line": "    thread_local = threading.local()"
        },
        {
          "lineno": 10,
          "line": ""
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 20,
          "line": "    return wrapper"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 8,
          "end_line": 9,
          "label": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:\n    thread_local = threading.local()",
          "successors": [
            {
              "id": 2,
              "start_line": 20,
              "end_line": 20,
              "label": "    return wrapper",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import threading"
    },
    {
      "lineno": 2,
      "line": "from typing import Callable, ParamSpec, TypeVar"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "P = ParamSpec(\"P\")"
    },
    {
      "lineno": 5,
      "line": "R = TypeVar(\"R\")"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "import threading\nfrom typing import Callable, ParamSpec, TypeVar",
      "successors": [
        {
          "id": 2,
          "start_line": 4,
          "end_line": 5,
          "label": "P = ParamSpec(\"P\")\nR = TypeVar(\"R\")",
          "successors": []
        }
      ]
    }
  ]
}