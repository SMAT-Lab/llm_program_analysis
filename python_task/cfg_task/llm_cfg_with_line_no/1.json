{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 278,
  "functions": [],
  "classes": [
    {
      "name": "IdeogramModelName",
      "type": "class",
      "start_line": 31,
      "end_line": 35,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 31,
          "line": "class IdeogramModelName(str, Enum):"
        },
        {
          "lineno": 32,
          "line": "    V2 = \"V_2\""
        },
        {
          "lineno": 33,
          "line": "    V1 = \"V_1\""
        },
        {
          "lineno": 34,
          "line": "    V1_TURBO = \"V_1_TURBO\""
        },
        {
          "lineno": 35,
          "line": "    V2_TURBO = \"V_2_TURBO\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 31,
          "end_line": 35,
          "label": "class IdeogramModelName(str, Enum):\n    V2 = \"V_2\"\n    V1 = \"V_1\"\n    V1_TURBO = \"V_1_TURBO\"\n    V2_TURBO = \"V_2_TURBO\"",
          "successors": []
        }
      ]
    },
    {
      "name": "MagicPromptOption",
      "type": "class",
      "start_line": 38,
      "end_line": 41,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 38,
          "line": "class MagicPromptOption(str, Enum):"
        },
        {
          "lineno": 39,
          "line": "    AUTO = \"AUTO\""
        },
        {
          "lineno": 40,
          "line": "    ON = \"ON\""
        },
        {
          "lineno": 41,
          "line": "    OFF = \"OFF\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 38,
          "end_line": 41,
          "label": "class MagicPromptOption(str, Enum):\n    AUTO = \"AUTO\"\n    ON = \"ON\"\n    OFF = \"OFF\"",
          "successors": []
        }
      ]
    },
    {
      "name": "StyleType",
      "type": "class",
      "start_line": 44,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 44,
          "line": "class StyleType(str, Enum):"
        },
        {
          "lineno": 45,
          "line": "    AUTO = \"AUTO\""
        },
        {
          "lineno": 46,
          "line": "    GENERAL = \"GENERAL\""
        },
        {
          "lineno": 47,
          "line": "    REALISTIC = \"REALISTIC\""
        },
        {
          "lineno": 48,
          "line": "    DESIGN = \"DESIGN\""
        },
        {
          "lineno": 49,
          "line": "    RENDER_3D = \"RENDER_3D\""
        },
        {
          "lineno": 50,
          "line": "    ANIME = \"ANIME\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 44,
          "end_line": 50,
          "label": "class StyleType(str, Enum):\n    AUTO = \"AUTO\"\n    GENERAL = \"GENERAL\"\n    REALISTIC = \"REALISTIC\"\n    DESIGN = \"DESIGN\"\n    RENDER_3D = \"RENDER_3D\"\n    ANIME = \"ANIME\"",
          "successors": []
        }
      ]
    },
    {
      "name": "ColorPalettePreset",
      "type": "class",
      "start_line": 53,
      "end_line": 62,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 53,
          "line": "class ColorPalettePreset(str, Enum):"
        },
        {
          "lineno": 54,
          "line": "    NONE = \"NONE\""
        },
        {
          "lineno": 55,
          "line": "    EMBER = \"EMBER\""
        },
        {
          "lineno": 56,
          "line": "    FRESH = \"FRESH\""
        },
        {
          "lineno": 57,
          "line": "    JUNGLE = \"JUNGLE\""
        },
        {
          "lineno": 58,
          "line": "    MAGIC = \"MAGIC\""
        },
        {
          "lineno": 59,
          "line": "    MELON = \"MELON\""
        },
        {
          "lineno": 60,
          "line": "    MOSAIC = \"MOSAIC\""
        },
        {
          "lineno": 61,
          "line": "    PASTEL = \"PASTEL\""
        },
        {
          "lineno": 62,
          "line": "    ULTRAMARINE = \"ULTRAMARINE\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 53,
          "end_line": 62,
          "label": "class ColorPalettePreset(str, Enum):\n    NONE = \"NONE\"\n    EMBER = \"EMBER\"\n    FRESH = \"FRESH\"\n    JUNGLE = \"JUNGLE\"\n    MAGIC = \"MAGIC\"\n    MELON = \"MELON\"\n    MOSAIC = \"MOSAIC\"\n    PASTEL = \"PASTEL\"\n    ULTRAMARINE = \"ULTRAMARINE\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AspectRatio",
      "type": "class",
      "start_line": 65,
      "end_line": 74,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 65,
          "line": "class AspectRatio(str, Enum):"
        },
        {
          "lineno": 66,
          "line": "    ASPECT_10_16 = \"ASPECT_10_16\""
        },
        {
          "lineno": 67,
          "line": "    ASPECT_16_10 = \"ASPECT_16_10\""
        },
        {
          "lineno": 68,
          "line": "    ASPECT_9_16 = \"ASPECT_9_16\""
        },
        {
          "lineno": 69,
          "line": "    ASPECT_16_9 = \"ASPECT_16_9\""
        },
        {
          "lineno": 70,
          "line": "    ASPECT_3_2 = \"ASPECT_3_2\""
        },
        {
          "lineno": 71,
          "line": "    ASPECT_2_3 = \"ASPECT_2_3\""
        },
        {
          "lineno": 72,
          "line": "    ASPECT_4_3 = \"ASPECT_4_3\""
        },
        {
          "lineno": 73,
          "line": "    ASPECT_3_4 = \"ASPECT_3_4\""
        },
        {
          "lineno": 74,
          "line": "    ASPECT_1_1 = \"ASPECT_1_1\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 65,
          "end_line": 74,
          "label": "class AspectRatio(str, Enum):\n    ASPECT_10_16 = \"ASPECT_10_16\"\n    ASPECT_16_10 = \"ASPECT_16_10\"\n    ASPECT_9_16 = \"ASPECT_9_16\"\n    ASPECT_16_9 = \"ASPECT_16_9\"\n    ASPECT_3_2 = \"ASPECT_3_2\"\n    ASPECT_2_3 = \"ASPECT_2_3\"\n    ASPECT_4_3 = \"ASPECT_4_3\"\n    ASPECT_3_4 = \"ASPECT_3_4\"\n    ASPECT_1_1 = \"ASPECT_1_1\"",
          "successors": []
        }
      ]
    },
    {
      "name": "UpscaleOption",
      "type": "class",
      "start_line": 79,
      "end_line": 81,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 79,
          "line": "class UpscaleOption(str, Enum):"
        },
        {
          "lineno": 80,
          "line": "    AI_UPSCALE = \"AI Upscale\""
        },
        {
          "lineno": 81,
          "line": "    NO_UPSCALE = \"No Upscale\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 79,
          "end_line": 81,
          "label": "class UpscaleOption(str, Enum):\n    AI_UPSCALE = \"AI Upscale\"\n    NO_UPSCALE = \"No Upscale\"",
          "successors": []
        }
      ]
    },
    {
      "name": "IdeogramModelBlock",
      "type": "class",
      "start_line": 84,
      "end_line": 278,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 149,
          "end_line": 179,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 149,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 150,
              "line": "        super().__init__("
            },
            {
              "lineno": 151,
              "line": "            id=\"6ab085e2-20b3-4055-bc3e-08036e01eca6\","
            },
            {
              "lineno": 152,
              "line": "            description=\"This block runs Ideogram models with both simple and advanced settings.\","
            },
            {
              "lineno": 153,
              "line": "            categories={BlockCategory.AI},"
            },
            {
              "lineno": 154,
              "line": "            input_schema=IdeogramModelBlock.Input,"
            },
            {
              "lineno": 155,
              "line": "            output_schema=IdeogramModelBlock.Output,"
            },
            {
              "lineno": 156,
              "line": "            test_input={"
            },
            {
              "lineno": 157,
              "line": "                \"ideogram_model_name\": IdeogramModelName.V2,"
            },
            {
              "lineno": 158,
              "line": "                \"prompt\": \"A futuristic cityscape at sunset\","
            },
            {
              "lineno": 159,
              "line": "                \"aspect_ratio\": AspectRatio.ASPECT_1_1,"
            },
            {
              "lineno": 160,
              "line": "                \"upscale\": UpscaleOption.NO_UPSCALE,"
            },
            {
              "lineno": 161,
              "line": "                \"magic_prompt_option\": MagicPromptOption.AUTO,"
            },
            {
              "lineno": 162,
              "line": "                \"seed\": None,"
            },
            {
              "lineno": 163,
              "line": "                \"style_type\": StyleType.AUTO,"
            },
            {
              "lineno": 164,
              "line": "                \"negative_prompt\": None,"
            },
            {
              "lineno": 165,
              "line": "                \"color_palette_name\": ColorPalettePreset.NONE,"
            },
            {
              "lineno": 166,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 167,
              "line": "            },"
            },
            {
              "lineno": 168,
              "line": "            test_output=["
            },
            {
              "lineno": 169,
              "line": "                ("
            },
            {
              "lineno": 170,
              "line": "                    \"result\","
            },
            {
              "lineno": 171,
              "line": "                    \"https://ideogram.ai/api/images/test-generated-image-url.png\","
            },
            {
              "lineno": 172,
              "line": "                ),"
            },
            {
              "lineno": 173,
              "line": "            ],"
            },
            {
              "lineno": 174,
              "line": "            test_mock={"
            },
            {
              "lineno": 175,
              "line": "                \"run_model\": lambda api_key, model_name, prompt, seed, aspect_ratio, magic_prompt_option, style_type, negative_prompt, color_palette_name: \"https://ideogram.ai/api/images/test-generated-image-url.png\","
            },
            {
              "lineno": 176,
              "line": "                \"upscale_image\": lambda api_key, image_url: \"https://ideogram.ai/api/images/test-upscaled-image-url.png\","
            },
            {
              "lineno": 177,
              "line": "            },"
            },
            {
              "lineno": 178,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 179,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 149,
              "end_line": 179,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"6ab085e2-20b3-4055-bc3e-08036e01eca6\",\n            description=\"This block runs Ideogram models with both simple and advanced settings.\",\n            categories={BlockCategory.AI},\n            input_schema=IdeogramModelBlock.Input,\n            output_schema=IdeogramModelBlock.Output,\n            test_input={\n                \"ideogram_model_name\": IdeogramModelName.V2,\n                \"prompt\": \"A futuristic cityscape at sunset\",\n                \"aspect_ratio\": AspectRatio.ASPECT_1_1,\n                \"upscale\": UpscaleOption.NO_UPSCALE,\n                \"magic_prompt_option\": MagicPromptOption.AUTO,\n                \"seed\": None,\n                \"style_type\": StyleType.AUTO,\n                \"negative_prompt\": None,\n                \"color_palette_name\": ColorPalettePreset.NONE,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, model_name, prompt, seed, aspect_ratio, magic_prompt_option, style_type, negative_prompt, color_palette_name: \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n                \"upscale_image\": lambda api_key, image_url: \"https://ideogram.ai/api/images/test-upscaled-image-url.png\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 181,
          "end_line": 206,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 181,
              "line": "    def run("
            },
            {
              "lineno": 182,
              "line": "        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs"
            },
            {
              "lineno": 183,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 184,
              "line": "        seed = input_data.seed"
            },
            {
              "lineno": 185,
              "line": ""
            },
            {
              "lineno": 186,
              "line": "        # Step 1: Generate the image"
            },
            {
              "lineno": 187,
              "line": "        result = self.run_model("
            },
            {
              "lineno": 188,
              "line": "            api_key=credentials.api_key,"
            },
            {
              "lineno": 189,
              "line": "            model_name=input_data.ideogram_model_name.value,"
            },
            {
              "lineno": 190,
              "line": "            prompt=input_data.prompt,"
            },
            {
              "lineno": 191,
              "line": "            seed=seed,"
            },
            {
              "lineno": 192,
              "line": "            aspect_ratio=input_data.aspect_ratio.value,"
            },
            {
              "lineno": 193,
              "line": "            magic_prompt_option=input_data.magic_prompt_option.value,"
            },
            {
              "lineno": 194,
              "line": "            style_type=input_data.style_type.value,"
            },
            {
              "lineno": 195,
              "line": "            negative_prompt=input_data.negative_prompt,"
            },
            {
              "lineno": 196,
              "line": "            color_palette_name=input_data.color_palette_name.value,"
            },
            {
              "lineno": 197,
              "line": "        )"
            },
            {
              "lineno": 198,
              "line": ""
            },
            {
              "lineno": 199,
              "line": "        # Step 2: Upscale the image if requested"
            },
            {
              "lineno": 200,
              "line": "        if input_data.upscale == UpscaleOption.AI_UPSCALE:"
            },
            {
              "lineno": 201,
              "line": "            result = self.upscale_image("
            },
            {
              "lineno": 202,
              "line": "                api_key=credentials.api_key,"
            },
            {
              "lineno": 203,
              "line": "                image_url=result,"
            },
            {
              "lineno": 204,
              "line": "            )"
            },
            {
              "lineno": 205,
              "line": ""
            },
            {
              "lineno": 206,
              "line": "        yield \"result\", result"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 181,
              "end_line": 184,
              "label": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        seed = input_data.seed",
              "successors": [
                {
                  "id": 2,
                  "start_line": 186,
                  "end_line": 197,
                  "label": "        # Step 1: Generate the image\n        result = self.run_model(\n            api_key=credentials.api_key,\n            model_name=input_data.ideogram_model_name.value,\n            prompt=input_data.prompt,\n            seed=seed,\n            aspect_ratio=input_data.aspect_ratio.value,\n            magic_prompt_option=input_data.magic_prompt_option.value,\n            style_type=input_data.style_type.value,\n            negative_prompt=input_data.negative_prompt,\n            color_palette_name=input_data.color_palette_name.value,\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 199,
                      "end_line": 200,
                      "label": "        # Step 2: Upscale the image if requested\n        if input_data.upscale == UpscaleOption.AI_UPSCALE:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 201,
                          "end_line": 204,
                          "label": "            result = self.upscale_image(\n                api_key=credentials.api_key,\n                image_url=result,\n            )",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 206,
                              "end_line": 206,
                              "label": "        yield \"result\", result",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "start_line": 206,
                          "end_line": 206,
                          "label": "        yield \"result\", result",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run_model",
          "type": "function",
          "start_line": 208,
          "end_line": 249,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 208,
              "line": "    def run_model("
            },
            {
              "lineno": 209,
              "line": "        self,"
            },
            {
              "lineno": 210,
              "line": "        api_key: SecretStr,"
            },
            {
              "lineno": 211,
              "line": "        model_name: str,"
            },
            {
              "lineno": 212,
              "line": "        prompt: str,"
            },
            {
              "lineno": 213,
              "line": "        seed: Optional[int],"
            },
            {
              "lineno": 214,
              "line": "        aspect_ratio: str,"
            },
            {
              "lineno": 215,
              "line": "        magic_prompt_option: str,"
            },
            {
              "lineno": 216,
              "line": "        style_type: str,"
            },
            {
              "lineno": 217,
              "line": "        negative_prompt: Optional[str],"
            },
            {
              "lineno": 218,
              "line": "        color_palette_name: str,"
            },
            {
              "lineno": 219,
              "line": "    ):"
            },
            {
              "lineno": 220,
              "line": "        url = \"https://api.ideogram.ai/generate\""
            },
            {
              "lineno": 221,
              "line": "        headers = {"
            },
            {
              "lineno": 222,
              "line": "            \"Api-Key\": api_key.get_secret_value(),"
            },
            {
              "lineno": 223,
              "line": "            \"Content-Type\": \"application/json\","
            },
            {
              "lineno": 224,
              "line": "        }"
            },
            {
              "lineno": 225,
              "line": ""
            },
            {
              "lineno": 226,
              "line": "        data: Dict[str, Any] = {"
            },
            {
              "lineno": 227,
              "line": "            \"image_request\": {"
            },
            {
              "lineno": 228,
              "line": "                \"prompt\": prompt,"
            },
            {
              "lineno": 229,
              "line": "                \"model\": model_name,"
            },
            {
              "lineno": 230,
              "line": "                \"aspect_ratio\": aspect_ratio,"
            },
            {
              "lineno": 231,
              "line": "                \"magic_prompt_option\": magic_prompt_option,"
            },
            {
              "lineno": 232,
              "line": "                \"style_type\": style_type,"
            },
            {
              "lineno": 233,
              "line": "            }"
            },
            {
              "lineno": 234,
              "line": "        }"
            },
            {
              "lineno": 235,
              "line": ""
            },
            {
              "lineno": 236,
              "line": "        if seed is not None:"
            },
            {
              "lineno": 237,
              "line": "            data[\"image_request\"][\"seed\"] = seed"
            },
            {
              "lineno": 238,
              "line": ""
            },
            {
              "lineno": 239,
              "line": "        if negative_prompt:"
            },
            {
              "lineno": 240,
              "line": "            data[\"image_request\"][\"negative_prompt\"] = negative_prompt"
            },
            {
              "lineno": 241,
              "line": ""
            },
            {
              "lineno": 242,
              "line": "        if color_palette_name != \"NONE\":"
            },
            {
              "lineno": 243,
              "line": "            data[\"image_request\"][\"color_palette\"] = {\"name\": color_palette_name}"
            },
            {
              "lineno": 244,
              "line": ""
            },
            {
              "lineno": 245,
              "line": "        try:"
            },
            {
              "lineno": 246,
              "line": "            response = requests.post(url, json=data, headers=headers)"
            },
            {
              "lineno": 247,
              "line": "            return response.json()[\"data\"][0][\"url\"]"
            },
            {
              "lineno": 248,
              "line": "        except RequestException as e:"
            },
            {
              "lineno": 249,
              "line": "            raise Exception(f\"Failed to fetch image: {str(e)}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 208,
              "end_line": 219,
              "label": "def run_model(\n        self,\n        api_key: SecretStr,\n        model_name: str,\n        prompt: str,\n        seed: Optional[int],\n        aspect_ratio: str,\n        magic_prompt_option: str,\n        style_type: str,\n        negative_prompt: Optional[str],\n        color_palette_name: str,\n    ):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 220,
                  "end_line": 224,
                  "label": "url = \"https://api.ideogram.ai/generate\"\nheaders = {\n    \"Api-Key\": api_key.get_secret_value(),\n    \"Content-Type\": \"application/json\",\n}",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 226,
                      "end_line": 234,
                      "label": "data: Dict[str, Any] = {\n    \"image_request\": {\n        \"prompt\": prompt,\n        \"model\": model_name,\n        \"aspect_ratio\": aspect_ratio,\n        \"magic_prompt_option\": magic_prompt_option,\n        \"style_type\": style_type,\n    }\n}",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 236,
                          "end_line": 237,
                          "label": "if seed is not None:\n    data[\"image_request\"][\"seed\"] = seed",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 239,
                              "end_line": 240,
                              "label": "if negative_prompt:\n    data[\"image_request\"][\"negative_prompt\"] = negative_prompt",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 242,
                                  "end_line": 243,
                                  "label": "if color_palette_name != \"NONE\":\n    data[\"image_request\"][\"color_palette\"] = {\"name\": color_palette_name}",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 245,
                                      "end_line": 247,
                                      "label": "try:\n    response = requests.post(url, json=data, headers=headers)\n    return response.json()[\"data\"][0][\"url\"]",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 248,
                                          "end_line": 249,
                                          "label": "except RequestException as e:\n    raise Exception(f\"Failed to fetch image: {str(e)}\")",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "upscale_image",
          "type": "function",
          "start_line": 251,
          "end_line": 278,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 251,
              "line": "    def upscale_image(self, api_key: SecretStr, image_url: str):"
            },
            {
              "lineno": 252,
              "line": "        url = \"https://api.ideogram.ai/upscale\""
            },
            {
              "lineno": 253,
              "line": "        headers = {"
            },
            {
              "lineno": 254,
              "line": "            \"Api-Key\": api_key.get_secret_value(),"
            },
            {
              "lineno": 255,
              "line": "        }"
            },
            {
              "lineno": 256,
              "line": ""
            },
            {
              "lineno": 257,
              "line": "        try:"
            },
            {
              "lineno": 258,
              "line": "            # Step 1: Download the image from the provided URL"
            },
            {
              "lineno": 259,
              "line": "            image_response = requests.get(image_url)"
            },
            {
              "lineno": 260,
              "line": ""
            },
            {
              "lineno": 261,
              "line": "            # Step 2: Send the downloaded image to the upscale API"
            },
            {
              "lineno": 262,
              "line": "            files = {"
            },
            {
              "lineno": 263,
              "line": "                \"image_file\": (\"image.png\", image_response.content, \"image/png\"),"
            },
            {
              "lineno": 264,
              "line": "            }"
            },
            {
              "lineno": 265,
              "line": ""
            },
            {
              "lineno": 266,
              "line": "            response = requests.post("
            },
            {
              "lineno": 267,
              "line": "                url,"
            },
            {
              "lineno": 268,
              "line": "                headers=headers,"
            },
            {
              "lineno": 269,
              "line": "                data={"
            },
            {
              "lineno": 270,
              "line": "                    \"image_request\": \"{}\",  # Empty JSON object"
            },
            {
              "lineno": 271,
              "line": "                },"
            },
            {
              "lineno": 272,
              "line": "                files=files,"
            },
            {
              "lineno": 273,
              "line": "            )"
            },
            {
              "lineno": 274,
              "line": ""
            },
            {
              "lineno": 275,
              "line": "            return response.json()[\"data\"][0][\"url\"]"
            },
            {
              "lineno": 276,
              "line": ""
            },
            {
              "lineno": 277,
              "line": "        except RequestException as e:"
            },
            {
              "lineno": 278,
              "line": "            raise Exception(f\"Failed to upscale image: {str(e)}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 251,
              "end_line": 257,
              "label": "    def upscale_image(self, api_key: SecretStr, image_url: str):\n        url = \"https://api.ideogram.ai/upscale\"\n        headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n        }\n\n        try:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 258,
                  "end_line": 275,
                  "label": "            # Step 1: Download the image from the provided URL\n            image_response = requests.get(image_url)\n\n            # Step 2: Send the downloaded image to the upscale API\n            files = {\n                \"image_file\": (\"image.png\", image_response.content, \"image/png\"),\n            }\n\n            response = requests.post(\n                url,\n                headers=headers,\n                data={\n                    \"image_request\": \"{}\",  # Empty JSON object\n                },\n                files=files,\n            )\n\n            return response.json()[\"data\"][0][\"url\"]",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 277,
                  "end_line": 278,
                  "label": "        except RequestException as e:\n            raise Exception(f\"Failed to upscale image: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 85,
          "end_line": 143,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 85,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 86,
              "line": "        credentials: CredentialsMetaInput["
            },
            {
              "lineno": 87,
              "line": "            Literal[ProviderName.IDEOGRAM], Literal[\"api_key\"]"
            },
            {
              "lineno": 88,
              "line": "        ] = CredentialsField("
            },
            {
              "lineno": 89,
              "line": "            description=\"The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.\","
            },
            {
              "lineno": 90,
              "line": "        )"
            },
            {
              "lineno": 91,
              "line": "        prompt: str = SchemaField("
            },
            {
              "lineno": 92,
              "line": "            description=\"Text prompt for image generation\","
            },
            {
              "lineno": 93,
              "line": "            placeholder=\"e.g., 'A futuristic cityscape at sunset'\","
            },
            {
              "lineno": 94,
              "line": "            title=\"Prompt\","
            },
            {
              "lineno": 95,
              "line": "        )"
            },
            {
              "lineno": 96,
              "line": "        ideogram_model_name: IdeogramModelName = SchemaField("
            },
            {
              "lineno": 97,
              "line": "            description=\"The name of the Image Generation Model, e.g., V_2\","
            },
            {
              "lineno": 98,
              "line": "            default=IdeogramModelName.V2,"
            },
            {
              "lineno": 99,
              "line": "            title=\"Image Generation Model\","
            },
            {
              "lineno": 100,
              "line": "            advanced=False,"
            },
            {
              "lineno": 101,
              "line": "        )"
            },
            {
              "lineno": 102,
              "line": "        aspect_ratio: AspectRatio = SchemaField("
            },
            {
              "lineno": 103,
              "line": "            description=\"Aspect ratio for the generated image\","
            },
            {
              "lineno": 104,
              "line": "            default=AspectRatio.ASPECT_1_1,"
            },
            {
              "lineno": 105,
              "line": "            title=\"Aspect Ratio\","
            },
            {
              "lineno": 106,
              "line": "            advanced=False,"
            },
            {
              "lineno": 107,
              "line": "        )"
            },
            {
              "lineno": 108,
              "line": "        upscale: UpscaleOption = SchemaField("
            },
            {
              "lineno": 109,
              "line": "            description=\"Upscale the generated image\","
            },
            {
              "lineno": 110,
              "line": "            default=UpscaleOption.NO_UPSCALE,"
            },
            {
              "lineno": 111,
              "line": "            title=\"Upscale Image\","
            },
            {
              "lineno": 112,
              "line": "            advanced=False,"
            },
            {
              "lineno": 113,
              "line": "        )"
            },
            {
              "lineno": 114,
              "line": "        magic_prompt_option: MagicPromptOption = SchemaField("
            },
            {
              "lineno": 115,
              "line": "            description=\"Whether to use MagicPrompt for enhancing the request\","
            },
            {
              "lineno": 116,
              "line": "            default=MagicPromptOption.AUTO,"
            },
            {
              "lineno": 117,
              "line": "            title=\"Magic Prompt Option\","
            },
            {
              "lineno": 118,
              "line": "            advanced=True,"
            },
            {
              "lineno": 119,
              "line": "        )"
            },
            {
              "lineno": 120,
              "line": "        seed: Optional[int] = SchemaField("
            },
            {
              "lineno": 121,
              "line": "            description=\"Random seed. Set for reproducible generation\","
            },
            {
              "lineno": 122,
              "line": "            default=None,"
            },
            {
              "lineno": 123,
              "line": "            title=\"Seed\","
            },
            {
              "lineno": 124,
              "line": "            advanced=True,"
            },
            {
              "lineno": 125,
              "line": "        )"
            },
            {
              "lineno": 126,
              "line": "        style_type: StyleType = SchemaField("
            },
            {
              "lineno": 127,
              "line": "            description=\"Style type to apply, applicable for V_2 and above\","
            },
            {
              "lineno": 128,
              "line": "            default=StyleType.AUTO,"
            },
            {
              "lineno": 129,
              "line": "            title=\"Style Type\","
            },
            {
              "lineno": 130,
              "line": "            advanced=True,"
            },
            {
              "lineno": 131,
              "line": "        )"
            },
            {
              "lineno": 132,
              "line": "        negative_prompt: Optional[str] = SchemaField("
            },
            {
              "lineno": 133,
              "line": "            description=\"Description of what to exclude from the image\","
            },
            {
              "lineno": 134,
              "line": "            default=None,"
            },
            {
              "lineno": 135,
              "line": "            title=\"Negative Prompt\","
            },
            {
              "lineno": 136,
              "line": "            advanced=True,"
            },
            {
              "lineno": 137,
              "line": "        )"
            },
            {
              "lineno": 138,
              "line": "        color_palette_name: ColorPalettePreset = SchemaField("
            },
            {
              "lineno": 139,
              "line": "            description=\"Color palette preset name, choose 'None' to skip\","
            },
            {
              "lineno": 140,
              "line": "            default=ColorPalettePreset.NONE,"
            },
            {
              "lineno": 141,
              "line": "            title=\"Color Palette Preset\","
            },
            {
              "lineno": 142,
              "line": "            advanced=True,"
            },
            {
              "lineno": 143,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 85,
              "end_line": 143,
              "label": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.IDEOGRAM], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A futuristic cityscape at sunset'\",\n            title=\"Prompt\",\n        )\n        ideogram_model_name: IdeogramModelName = SchemaField(\n            description=\"The name of the Image Generation Model, e.g., V_2\",\n            default=IdeogramModelName.V2,\n            title=\"Image Generation Model\",\n            advanced=False,\n        )\n        aspect_ratio: AspectRatio = SchemaField(\n            description=\"Aspect ratio for the generated image\",\n            default=AspectRatio.ASPECT_1_1,\n            title=\"Aspect Ratio\",\n            advanced=False,\n        )\n        upscale: UpscaleOption = SchemaField(\n            description=\"Upscale the generated image\",\n            default=UpscaleOption.NO_UPSCALE,\n            title=\"Upscale Image\",\n            advanced=False,\n        )\n        magic_prompt_option: MagicPromptOption = SchemaField(\n            description=\"Whether to use MagicPrompt for enhancing the request\",\n            default=MagicPromptOption.AUTO,\n            title=\"Magic Prompt Option\",\n            advanced=True,\n        )\n        seed: Optional[int] = SchemaField(\n            description=\"Random seed. Set for reproducible generation\",\n            default=None,\n            title=\"Seed\",\n            advanced=True,\n        )\n        style_type: StyleType = SchemaField(\n            description=\"Style type to apply, applicable for V_2 and above\",\n            default=StyleType.AUTO,\n            title=\"Style Type\",\n            advanced=True,\n        )\n        negative_prompt: Optional[str] = SchemaField(\n            description=\"Description of what to exclude from the image\",\n            default=None,\n            title=\"Negative Prompt\",\n            advanced=True,\n        )\n        color_palette_name: ColorPalettePreset = SchemaField(\n            description=\"Color palette preset name, choose 'None' to skip\",\n            default=ColorPalettePreset.NONE,\n            title=\"Color Palette Preset\",\n            advanced=True,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 145,
          "end_line": 147,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 145,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 146,
              "line": "        result: str = SchemaField(description=\"Generated image URL\")"
            },
            {
              "lineno": 147,
              "line": "        error: str = SchemaField(description=\"Error message if the model run failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 145,
              "end_line": 147,
              "label": "    class Output(BlockSchema):\n        result: str = SchemaField(description=\"Generated image URL\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 84,
          "line": "class IdeogramModelBlock(Block):"
        },
        {
          "lineno": 144,
          "line": ""
        },
        {
          "lineno": 148,
          "line": ""
        },
        {
          "lineno": 180,
          "line": ""
        },
        {
          "lineno": 207,
          "line": ""
        },
        {
          "lineno": 250,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 84,
          "end_line": 84,
          "label": "class IdeogramModelBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 144,
          "end_line": 144,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 148,
          "end_line": 148,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 180,
          "end_line": 180,
          "label": "",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 207,
          "end_line": 207,
          "label": "",
          "successors": []
        },
        {
          "id": 6,
          "start_line": 250,
          "end_line": 250,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from enum import Enum"
    },
    {
      "lineno": 2,
      "line": "from typing import Any, Dict, Literal, Optional"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from pydantic import SecretStr"
    },
    {
      "lineno": 5,
      "line": "from requests.exceptions import RequestException"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 8,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 9,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 10,
      "line": "    CredentialsField,"
    },
    {
      "lineno": 11,
      "line": "    CredentialsMetaInput,"
    },
    {
      "lineno": 12,
      "line": "    SchemaField,"
    },
    {
      "lineno": 13,
      "line": ")"
    },
    {
      "lineno": 14,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 15,
      "line": "from backend.util.request import requests"
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": "TEST_CREDENTIALS = APIKeyCredentials("
    },
    {
      "lineno": 18,
      "line": "    id=\"01234567-89ab-cdef-0123-456789abcdef\","
    },
    {
      "lineno": 19,
      "line": "    provider=\"ideogram\","
    },
    {
      "lineno": 20,
      "line": "    api_key=SecretStr(\"mock-ideogram-api-key\"),"
    },
    {
      "lineno": 21,
      "line": "    title=\"Mock Ideogram API key\","
    },
    {
      "lineno": 22,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 23,
      "line": ")"
    },
    {
      "lineno": 24,
      "line": "TEST_CREDENTIALS_INPUT = {"
    },
    {
      "lineno": 25,
      "line": "    \"provider\": TEST_CREDENTIALS.provider,"
    },
    {
      "lineno": 26,
      "line": "    \"id\": TEST_CREDENTIALS.id,"
    },
    {
      "lineno": 27,
      "line": "    \"type\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 28,
      "line": "    \"title\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 29,
      "line": "}"
    },
    {
      "lineno": 30,
      "line": ""
    },
    {
      "lineno": 36,
      "line": ""
    },
    {
      "lineno": 37,
      "line": ""
    },
    {
      "lineno": 42,
      "line": ""
    },
    {
      "lineno": 43,
      "line": ""
    },
    {
      "lineno": 51,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 63,
      "line": ""
    },
    {
      "lineno": 64,
      "line": ""
    },
    {
      "lineno": 75,
      "line": "    ASPECT_1_3 = \"ASPECT_1_3\""
    },
    {
      "lineno": 76,
      "line": "    ASPECT_3_1 = \"ASPECT_3_1\""
    },
    {
      "lineno": 77,
      "line": ""
    },
    {
      "lineno": 78,
      "line": ""
    },
    {
      "lineno": 82,
      "line": ""
    },
    {
      "lineno": 83,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "from enum import Enum\nfrom typing import Any, Dict, Literal, Optional\n\nfrom pydantic import SecretStr\nfrom requests.exceptions import RequestException\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        {
          "id": 2,
          "start_line": 8,
          "end_line": 15,
          "label": "from backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests",
          "successors": [
            {
              "id": 3,
              "start_line": 17,
              "end_line": 23,
              "label": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"ideogram\",\n    api_key=SecretStr(\"mock-ideogram-api-key\"),\n    title=\"Mock Ideogram API key\",\n    expires_at=None,\n)",
              "successors": [
                {
                  "id": 4,
                  "start_line": 24,
                  "end_line": 29,
                  "label": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": 5,
      "start_line": 75,
      "end_line": 76,
      "label": "ASPECT_1_3 = \"ASPECT_1_3\"\nASPECT_3_1 = \"ASPECT_3_1\"",
      "successors": []
    }
  ]
}