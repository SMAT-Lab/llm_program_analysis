{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 109,
  "functions": [],
  "classes": [
    {
      "name": "ComparisonOperator",
      "type": "class",
      "start_line": 8,
      "end_line": 14,
      "functions": [],
      "simplified_code": [
        {
          "lineno": 8,
          "line": "class ComparisonOperator(Enum):"
        },
        {
          "lineno": 9,
          "line": "    EQUAL = \"==\""
        },
        {
          "lineno": 10,
          "line": "    NOT_EQUAL = \"!=\""
        },
        {
          "lineno": 11,
          "line": "    GREATER_THAN = \">\""
        },
        {
          "lineno": 12,
          "line": "    LESS_THAN = \"<\""
        },
        {
          "lineno": 13,
          "line": "    GREATER_THAN_OR_EQUAL = \">=\""
        },
        {
          "lineno": 14,
          "line": "    LESS_THAN_OR_EQUAL = \"<=\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 8,
          "end_line": 14,
          "label": "class ComparisonOperator(Enum):\n    EQUAL = \"==\"\n    NOT_EQUAL = \"!=\"\n    GREATER_THAN = \">\"\n    LESS_THAN = \"<\"\n    GREATER_THAN_OR_EQUAL = \">=\"\n    LESS_THAN_OR_EQUAL = \"<=\"",
          "successors": []
        }
      ]
    },
    {
      "name": "ConditionBlock",
      "type": "class",
      "start_line": 17,
      "end_line": 109,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 53,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 53,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 54,
              "line": "        super().__init__("
            },
            {
              "lineno": 55,
              "line": "            id=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\","
            },
            {
              "lineno": 56,
              "line": "            input_schema=ConditionBlock.Input,"
            },
            {
              "lineno": 57,
              "line": "            output_schema=ConditionBlock.Output,"
            },
            {
              "lineno": 58,
              "line": "            description=\"Handles conditional logic based on comparison operators\","
            },
            {
              "lineno": 59,
              "line": "            categories={BlockCategory.LOGIC},"
            },
            {
              "lineno": 60,
              "line": "            test_input={"
            },
            {
              "lineno": 61,
              "line": "                \"value1\": 10,"
            },
            {
              "lineno": 62,
              "line": "                \"operator\": ComparisonOperator.GREATER_THAN.value,"
            },
            {
              "lineno": 63,
              "line": "                \"value2\": 5,"
            },
            {
              "lineno": 64,
              "line": "                \"yes_value\": \"Greater\","
            },
            {
              "lineno": 65,
              "line": "                \"no_value\": \"Not greater\","
            },
            {
              "lineno": 66,
              "line": "            },"
            },
            {
              "lineno": 67,
              "line": "            test_output=["
            },
            {
              "lineno": 68,
              "line": "                (\"result\", True),"
            },
            {
              "lineno": 69,
              "line": "                (\"yes_output\", \"Greater\"),"
            },
            {
              "lineno": 70,
              "line": "            ],"
            },
            {
              "lineno": 71,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 53,
              "end_line": 71,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\n            input_schema=ConditionBlock.Input,\n            output_schema=ConditionBlock.Output,\n            description=\"Handles conditional logic based on comparison operators\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"value1\": 10,\n                \"operator\": ComparisonOperator.GREATER_THAN.value,\n                \"value2\": 5,\n                \"yes_value\": \"Greater\",\n                \"no_value\": \"Not greater\",\n            },\n            test_output=[\n                (\"result\", True),\n                (\"yes_output\", \"Greater\"),\n            ],\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 73,
          "end_line": 109,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 73,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 74,
              "line": "        operator = input_data.operator"
            },
            {
              "lineno": 75,
              "line": ""
            },
            {
              "lineno": 76,
              "line": "        value1 = input_data.value1"
            },
            {
              "lineno": 77,
              "line": "        if isinstance(value1, str):"
            },
            {
              "lineno": 78,
              "line": "            try:"
            },
            {
              "lineno": 79,
              "line": "                value1 = float(value1.strip())"
            },
            {
              "lineno": 80,
              "line": "            except ValueError:"
            },
            {
              "lineno": 81,
              "line": "                value1 = value1.strip()"
            },
            {
              "lineno": 82,
              "line": ""
            },
            {
              "lineno": 83,
              "line": "        value2 = input_data.value2"
            },
            {
              "lineno": 84,
              "line": "        if isinstance(value2, str):"
            },
            {
              "lineno": 85,
              "line": "            try:"
            },
            {
              "lineno": 86,
              "line": "                value2 = float(value2.strip())"
            },
            {
              "lineno": 87,
              "line": "            except ValueError:"
            },
            {
              "lineno": 88,
              "line": "                value2 = value2.strip()"
            },
            {
              "lineno": 89,
              "line": ""
            },
            {
              "lineno": 90,
              "line": "        yes_value = input_data.yes_value if input_data.yes_value is not None else value1"
            },
            {
              "lineno": 91,
              "line": "        no_value = input_data.no_value if input_data.no_value is not None else value2"
            },
            {
              "lineno": 92,
              "line": ""
            },
            {
              "lineno": 93,
              "line": "        comparison_funcs = {"
            },
            {
              "lineno": 94,
              "line": "            ComparisonOperator.EQUAL: lambda a, b: a == b,"
            },
            {
              "lineno": 95,
              "line": "            ComparisonOperator.NOT_EQUAL: lambda a, b: a != b,"
            },
            {
              "lineno": 96,
              "line": "            ComparisonOperator.GREATER_THAN: lambda a, b: a > b,"
            },
            {
              "lineno": 97,
              "line": "            ComparisonOperator.LESS_THAN: lambda a, b: a < b,"
            },
            {
              "lineno": 98,
              "line": "            ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >= b,"
            },
            {
              "lineno": 99,
              "line": "            ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b,"
            },
            {
              "lineno": 100,
              "line": "        }"
            },
            {
              "lineno": 101,
              "line": ""
            },
            {
              "lineno": 102,
              "line": "        result = comparison_funcs[operator](value1, value2)"
            },
            {
              "lineno": 103,
              "line": ""
            },
            {
              "lineno": 104,
              "line": "        yield \"result\", result"
            },
            {
              "lineno": 105,
              "line": ""
            },
            {
              "lineno": 106,
              "line": "        if result:"
            },
            {
              "lineno": 107,
              "line": "            yield \"yes_output\", yes_value"
            },
            {
              "lineno": 108,
              "line": "        else:"
            },
            {
              "lineno": 109,
              "line": "            yield \"no_output\", no_value"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 73,
              "end_line": 74,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operator = input_data.operator",
              "successors": [
                {
                  "id": 2,
                  "start_line": 76,
                  "end_line": 77,
                  "label": "        value1 = input_data.value1\n        if isinstance(value1, str):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 78,
                      "end_line": 81,
                      "label": "            try:\n                value1 = float(value1.strip())\n            except ValueError:\n                value1 = value1.strip()",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 83,
                          "end_line": 84,
                          "label": "        value2 = input_data.value2\n        if isinstance(value2, str):",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 85,
                              "end_line": 88,
                              "label": "            try:\n                value2 = float(value2.strip())\n            except ValueError:\n                value2 = value2.strip()",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 90,
                                  "end_line": 91,
                                  "label": "        yes_value = input_data.yes_value if input_data.yes_value is not None else value1\n        no_value = input_data.no_value if input_data.no_value is not None else value2",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 93,
                                      "end_line": 100,
                                      "label": "        comparison_funcs = {\n            ComparisonOperator.EQUAL: lambda a, b: a == b,\n            ComparisonOperator.NOT_EQUAL: lambda a, b: a != b,\n            ComparisonOperator.GREATER_THAN: lambda a, b: a > b,\n            ComparisonOperator.LESS_THAN: lambda a, b: a < b,\n            ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >= b,\n            ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b,\n        }",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 102,
                                          "end_line": 102,
                                          "label": "        result = comparison_funcs[operator](value1, value2)",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "start_line": 104,
                                              "end_line": 104,
                                              "label": "        yield \"result\", result",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "start_line": 106,
                                                  "end_line": 109,
                                                  "label": "        if result:\n            yield \"yes_output\", yes_value\n        else:\n            yield \"no_output\", no_value",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 18,
          "end_line": 40,
          "functions": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 19,
              "line": "        value1: Any = SchemaField("
            },
            {
              "lineno": 20,
              "line": "            description=\"Enter the first value for comparison\","
            },
            {
              "lineno": 21,
              "line": "            placeholder=\"For example: 10 or 'hello' or True\","
            },
            {
              "lineno": 22,
              "line": "        )"
            },
            {
              "lineno": 23,
              "line": "        operator: ComparisonOperator = SchemaField("
            },
            {
              "lineno": 24,
              "line": "            description=\"Choose the comparison operator\","
            },
            {
              "lineno": 25,
              "line": "            placeholder=\"Select an operator\","
            },
            {
              "lineno": 26,
              "line": "        )"
            },
            {
              "lineno": 27,
              "line": "        value2: Any = SchemaField("
            },
            {
              "lineno": 28,
              "line": "            description=\"Enter the second value for comparison\","
            },
            {
              "lineno": 29,
              "line": "            placeholder=\"For example: 20 or 'world' or False\","
            },
            {
              "lineno": 30,
              "line": "        )"
            },
            {
              "lineno": 31,
              "line": "        yes_value: Any = SchemaField("
            },
            {
              "lineno": 32,
              "line": "            description=\"(Optional) Value to output if the condition is true. If not provided, value1 will be used.\","
            },
            {
              "lineno": 33,
              "line": "            placeholder=\"Leave empty to use value1, or enter a specific value\","
            },
            {
              "lineno": 34,
              "line": "            default=None,"
            },
            {
              "lineno": 35,
              "line": "        )"
            },
            {
              "lineno": 36,
              "line": "        no_value: Any = SchemaField("
            },
            {
              "lineno": 37,
              "line": "            description=\"(Optional) Value to output if the condition is false. If not provided, value1 will be used.\","
            },
            {
              "lineno": 38,
              "line": "            placeholder=\"Leave empty to use value1, or enter a specific value\","
            },
            {
              "lineno": 39,
              "line": "            default=None,"
            },
            {
              "lineno": 40,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 18,
              "end_line": 40,
              "label": "    class Input(BlockSchema):\n        value1: Any = SchemaField(\n            description=\"Enter the first value for comparison\",\n            placeholder=\"For example: 10 or 'hello' or True\",\n        )\n        operator: ComparisonOperator = SchemaField(\n            description=\"Choose the comparison operator\",\n            placeholder=\"Select an operator\",\n        )\n        value2: Any = SchemaField(\n            description=\"Enter the second value for comparison\",\n            placeholder=\"For example: 20 or 'world' or False\",\n        )\n        yes_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is true. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )\n        no_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is false. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 42,
          "end_line": 51,
          "functions": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 43,
              "line": "        result: bool = SchemaField("
            },
            {
              "lineno": 44,
              "line": "            description=\"The result of the condition evaluation (True or False)\""
            },
            {
              "lineno": 45,
              "line": "        )"
            },
            {
              "lineno": 46,
              "line": "        yes_output: Any = SchemaField("
            },
            {
              "lineno": 47,
              "line": "            description=\"The output value if the condition is true\""
            },
            {
              "lineno": 48,
              "line": "        )"
            },
            {
              "lineno": 49,
              "line": "        no_output: Any = SchemaField("
            },
            {
              "lineno": 50,
              "line": "            description=\"The output value if the condition is false\""
            },
            {
              "lineno": 51,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 42,
              "end_line": 51,
              "label": "    class Output(BlockSchema):\n        result: bool = SchemaField(\n            description=\"The result of the condition evaluation (True or False)\"\n        )\n        yes_output: Any = SchemaField(\n            description=\"The output value if the condition is true\"\n        )\n        no_output: Any = SchemaField(\n            description=\"The output value if the condition is false\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 17,
          "line": "class ConditionBlock(Block):"
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 52,
          "line": ""
        },
        {
          "lineno": 72,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 17,
          "end_line": 17,
          "label": "class ConditionBlock(Block):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from enum import Enum"
    },
    {
      "lineno": 2,
      "line": "from typing import Any"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 5,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    }
  ],
  "blocks": []
}