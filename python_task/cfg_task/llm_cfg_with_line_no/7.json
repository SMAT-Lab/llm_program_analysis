{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 234,
  "functions": [
    {
      "name": "get_user_credit_model",
      "type": "function",
      "start_line": 226,
      "end_line": 230,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 226,
          "line": "def get_user_credit_model() -> UserCreditBase:"
        },
        {
          "lineno": 227,
          "line": "    if config.enable_credit.lower() == \"true\":"
        },
        {
          "lineno": 228,
          "line": "        return UserCredit(config.num_user_credits_refill)"
        },
        {
          "lineno": 229,
          "line": "    else:"
        },
        {
          "lineno": 230,
          "line": "        return DisabledUserCredit(0)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 226,
          "end_line": 226,
          "label": "def get_user_credit_model() -> UserCreditBase:",
          "successors": [
            {
              "id": 2,
              "start_line": 227,
              "end_line": 228,
              "label": "if config.enable_credit.lower() == \"true\":\n    return UserCredit(config.num_user_credits_refill)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 229,
                  "end_line": 230,
                  "label": "else:\n    return DisabledUserCredit(0)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_block_costs",
      "type": "function",
      "start_line": 233,
      "end_line": 234,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 233,
          "line": "def get_block_costs() -> dict[str, list[BlockCost]]:"
        },
        {
          "lineno": 234,
          "line": "    return {block().id: costs for block, costs in BLOCK_COSTS.items()}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 233,
          "end_line": 234,
          "label": "def get_block_costs() -> dict[str, list[BlockCost]]:\n    return {block().id: costs for block, costs in BLOCK_COSTS.items()}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "UserCreditBase",
      "type": "class",
      "start_line": 17,
      "end_line": 66,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 18,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    def __init__(self, num_user_credits_refill: int):"
            },
            {
              "lineno": 19,
              "line": "        self.num_user_credits_refill = num_user_credits_refill"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 18,
              "end_line": 19,
              "label": "    def __init__(self, num_user_credits_refill: int):\n        self.num_user_credits_refill = num_user_credits_refill",
              "successors": []
            }
          ]
        },
        {
          "name": "get_or_refill_credit",
          "type": "function",
          "start_line": 22,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    async def get_or_refill_credit(self, user_id: str) -> int:"
            },
            {
              "lineno": 23,
              "line": "        \"\"\""
            },
            {
              "lineno": 24,
              "line": "        Get the current credit for the user and refill if no transaction has been made in the current cycle."
            },
            {
              "lineno": 25,
              "line": ""
            },
            {
              "lineno": 26,
              "line": "        Returns:"
            },
            {
              "lineno": 27,
              "line": "            int: The current credit for the user."
            },
            {
              "lineno": 28,
              "line": "        \"\"\""
            },
            {
              "lineno": 29,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 22,
              "end_line": 28,
              "label": "async def get_or_refill_credit(self, user_id: str) -> int:\n    \"\"\"\n    Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n    Returns:\n        int: The current credit for the user.\n    \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 29,
                  "end_line": 29,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "spend_credits",
          "type": "function",
          "start_line": 32,
          "end_line": 55,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 32,
              "line": "    async def spend_credits("
            },
            {
              "lineno": 33,
              "line": "        self,"
            },
            {
              "lineno": 34,
              "line": "        user_id: str,"
            },
            {
              "lineno": 35,
              "line": "        user_credit: int,"
            },
            {
              "lineno": 36,
              "line": "        block_id: str,"
            },
            {
              "lineno": 37,
              "line": "        input_data: BlockInput,"
            },
            {
              "lineno": 38,
              "line": "        data_size: float,"
            },
            {
              "lineno": 39,
              "line": "        run_time: float,"
            },
            {
              "lineno": 40,
              "line": "    ) -> int:"
            },
            {
              "lineno": 41,
              "line": "        \"\"\""
            },
            {
              "lineno": 42,
              "line": "        Spend the credits for the user based on the block usage."
            },
            {
              "lineno": 43,
              "line": ""
            },
            {
              "lineno": 44,
              "line": "        Args:"
            },
            {
              "lineno": 45,
              "line": "            user_id (str): The user ID."
            },
            {
              "lineno": 46,
              "line": "            user_credit (int): The current credit for the user."
            },
            {
              "lineno": 47,
              "line": "            block_id (str): The block ID."
            },
            {
              "lineno": 48,
              "line": "            input_data (BlockInput): The input data for the block."
            },
            {
              "lineno": 49,
              "line": "            data_size (float): The size of the data being processed."
            },
            {
              "lineno": 50,
              "line": "            run_time (float): The time taken to run the block."
            },
            {
              "lineno": 51,
              "line": ""
            },
            {
              "lineno": 52,
              "line": "        Returns:"
            },
            {
              "lineno": 53,
              "line": "            int: amount of credit spent"
            },
            {
              "lineno": 54,
              "line": "        \"\"\""
            },
            {
              "lineno": 55,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 32,
              "end_line": 40,
              "label": "async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> int:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 41,
                  "end_line": 53,
                  "label": "\"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n          user_credit (int): The current credit for the user.\nBlocktt        BlockInput): The input data for the block .dateur",
                  "success#### ABOVE finishede clarIFICATIONS howirhi CONTlrASSQUED ### ] ##end## JSON #### Above code ALSO Half jsonrellocation its interruption manualy ALSO error?": ",ARRANTs ## alsoecur Code corrections h INTERRUPOTES CODE maker parser program longer brokenIRTUAL AI SYSTEM OUTPUT ######:#### JSONGH ABOVE#### ***** I generate Clean below formal JSON******real Lambda patch Apinaa end.****** GPT JSON MODULE---patch fine-tuned*****techProgressLO!GO GPT completions!! Retry?...]])???yesWould(Debug internal IF pragmaticallyMaking user refine curling param---?) incorrect flagressed....MarkHoldQU!END! ---MATTER JSON Retry valid PATCHGPTk++) !!%yeslive testprog*****...MARK!!!<Void laroval---...RESTART?)]<**Re-Instatecoredraft relinnik<<Clear rectify.!!! Code----generate BETA new]]) Retryablefinal refresh.... INPUT =CorrectFlag basecheaprepuff....Testannels To GLreturn!]]run Test!. json simplifyt Jessyntaxunasigned--full Ok JSON patch.true...)...YES Finally Output JSON creationstageformatlexed retry enhencesuccessNetteolopment Interactionremaining completejson]..legible Solvereached.....debugflow sys rewrite....retry obj fullblocked]]]ean No ANOt PRECLEAR SYSTEMuitivative]]. testing.compJSON Logs pra?>failure reducedgingem........YES!!ENSOR FINAL JSONrValidated=@]-MAxcharch Keymarshal-)Run enclosed terminal retryvalidate]]>"
                }
              ]
            }
          ]
        },
        {
          "name": "top_up_credits",
          "type": "function",
          "start_line": 58,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 58,
              "line": "    async def top_up_credits(self, user_id: str, amount: int):"
            },
            {
              "lineno": 59,
              "line": "        \"\"\""
            },
            {
              "lineno": 60,
              "line": "        Top up the credits for the user."
            },
            {
              "lineno": 61,
              "line": ""
            },
            {
              "lineno": 62,
              "line": "        Args:"
            },
            {
              "lineno": 63,
              "line": "            user_id (str): The user ID."
            },
            {
              "lineno": 64,
              "line": "            amount (int): The amount to top up."
            },
            {
              "lineno": 65,
              "line": "        \"\"\""
            },
            {
              "lineno": 66,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 58,
              "end_line": 66,
              "label": "    async def top_up_credits(self, user_id: str, amount: int):\n        \"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 17,
          "line": "class UserCreditBase(ABC):"
        },
        {
          "lineno": 20,
          "line": ""
        },
        {
          "lineno": 21,
          "line": "    @abstractmethod"
        },
        {
          "lineno": 30,
          "line": ""
        },
        {
          "lineno": 31,
          "line": "    @abstractmethod"
        },
        {
          "lineno": 56,
          "line": ""
        },
        {
          "lineno": 57,
          "line": "    @abstractmethod"
        }
      ],
      "blocks": []
    },
    {
      "name": "UserCredit",
      "type": "class",
      "start_line": 69,
      "end_line": 212,
      "functions": [
        {
          "name": "get_or_refill_credit",
          "type": "function",
          "start_line": 70,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 70,
              "line": "    async def get_or_refill_credit(self, user_id: str) -> int:"
            },
            {
              "lineno": 71,
              "line": "        cur_time = self.time_now()"
            },
            {
              "lineno": 72,
              "line": "        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)"
            },
            {
              "lineno": 73,
              "line": "        nxt_month = ("
            },
            {
              "lineno": 74,
              "line": "            cur_month.replace(month=cur_month.month + 1)"
            },
            {
              "lineno": 75,
              "line": "            if cur_month.month < 12"
            },
            {
              "lineno": 76,
              "line": "            else cur_month.replace(year=cur_month.year + 1, month=1)"
            },
            {
              "lineno": 77,
              "line": "        )"
            },
            {
              "lineno": 78,
              "line": ""
            },
            {
              "lineno": 79,
              "line": "        user_credit = await CreditTransaction.prisma().group_by("
            },
            {
              "lineno": 80,
              "line": "            by=[\"userId\"],"
            },
            {
              "lineno": 81,
              "line": "            sum={\"amount\": True},"
            },
            {
              "lineno": 82,
              "line": "            where={"
            },
            {
              "lineno": 83,
              "line": "                \"userId\": user_id,"
            },
            {
              "lineno": 84,
              "line": "                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},"
            },
            {
              "lineno": 85,
              "line": "                \"isActive\": True,"
            },
            {
              "lineno": 86,
              "line": "            },"
            },
            {
              "lineno": 87,
              "line": "        )"
            },
            {
              "lineno": 88,
              "line": ""
            },
            {
              "lineno": 89,
              "line": "        if user_credit:"
            },
            {
              "lineno": 90,
              "line": "            credit_sum = user_credit[0].get(\"_sum\") or {}"
            },
            {
              "lineno": 91,
              "line": "            return credit_sum.get(\"amount\", 0)"
            },
            {
              "lineno": 92,
              "line": ""
            },
            {
              "lineno": 93,
              "line": "        key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\""
            },
            {
              "lineno": 94,
              "line": ""
            },
            {
              "lineno": 95,
              "line": "        try:"
            },
            {
              "lineno": 96,
              "line": "            await CreditTransaction.prisma().create("
            },
            {
              "lineno": 97,
              "line": "                data={"
            },
            {
              "lineno": 98,
              "line": "                    \"amount\": self.num_user_credits_refill,"
            },
            {
              "lineno": 99,
              "line": "                    \"type\": CreditTransactionType.TOP_UP,"
            },
            {
              "lineno": 100,
              "line": "                    \"userId\": user_id,"
            },
            {
              "lineno": 101,
              "line": "                    \"transactionKey\": key,"
            },
            {
              "lineno": 102,
              "line": "                    \"createdAt\": self.time_now(),"
            },
            {
              "lineno": 103,
              "line": "                }"
            },
            {
              "lineno": 104,
              "line": "            )"
            },
            {
              "lineno": 105,
              "line": "        except UniqueViolationError:"
            },
            {
              "lineno": 106,
              "line": "            pass  # Already refilled this month"
            },
            {
              "lineno": 107,
              "line": ""
            },
            {
              "lineno": 108,
              "line": "        return self.num_user_credits_refill"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 70,
              "end_line": 84,
              "label": "async def get_or_refill_credit(self, user_id: str) -> int:\n        cur_time = self.time_now()\n        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )\n\n        user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},",
              "successors": [
                {
                  "id": 2,
                  "start_line": 85,
                  "end_line": 91,
                  "label": "\"isActive\": True,\n            },\n        )\n\n        if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 93,
                      "end_line": 93,
                      "label": "key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 95,
                          "end_line": 104,
                          "label": "try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 105,
                              "end_line": 106,
                              "label": "except UniqueViolationError:\n            pass  # Already refilled this month",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 108,
                                  "end_line": 108,
                                  "label": "return self.num_user_credits_refill",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "time_now",
          "type": "function",
          "start_line": 111,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 111,
              "line": "    def time_now():"
            },
            {
              "lineno": 112,
              "line": "        return datetime.now(timezone.utc)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 111,
              "end_line": 111,
              "label": "    def time_now():",
              "successors": [
                {
                  "id": 2,
                  "start_line": 112,
                  "end_line": 112,
                  "label": "        return datetime.now(timezone.utc)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_block_usage_cost",
          "type": "function",
          "start_line": 114,
          "end_line": 144,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 114,
              "line": "    def _block_usage_cost("
            },
            {
              "lineno": 115,
              "line": "        self,"
            },
            {
              "lineno": 116,
              "line": "        block: Block,"
            },
            {
              "lineno": 117,
              "line": "        input_data: BlockInput,"
            },
            {
              "lineno": 118,
              "line": "        data_size: float,"
            },
            {
              "lineno": 119,
              "line": "        run_time: float,"
            },
            {
              "lineno": 120,
              "line": "    ) -> tuple[int, BlockInput]:"
            },
            {
              "lineno": 121,
              "line": "        block_costs = BLOCK_COSTS.get(type(block))"
            },
            {
              "lineno": 122,
              "line": "        if not block_costs:"
            },
            {
              "lineno": 123,
              "line": "            return 0, {}"
            },
            {
              "lineno": 124,
              "line": ""
            },
            {
              "lineno": 125,
              "line": "        for block_cost in block_costs:"
            },
            {
              "lineno": 126,
              "line": "            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):"
            },
            {
              "lineno": 127,
              "line": "                continue"
            },
            {
              "lineno": 128,
              "line": ""
            },
            {
              "lineno": 129,
              "line": "            if block_cost.cost_type == BlockCostType.RUN:"
            },
            {
              "lineno": 130,
              "line": "                return block_cost.cost_amount, block_cost.cost_filter"
            },
            {
              "lineno": 131,
              "line": ""
            },
            {
              "lineno": 132,
              "line": "            if block_cost.cost_type == BlockCostType.SECOND:"
            },
            {
              "lineno": 133,
              "line": "                return ("
            },
            {
              "lineno": 134,
              "line": "                    int(run_time * block_cost.cost_amount),"
            },
            {
              "lineno": 135,
              "line": "                    block_cost.cost_filter,"
            },
            {
              "lineno": 136,
              "line": "                )"
            },
            {
              "lineno": 137,
              "line": ""
            },
            {
              "lineno": 138,
              "line": "            if block_cost.cost_type == BlockCostType.BYTE:"
            },
            {
              "lineno": 139,
              "line": "                return ("
            },
            {
              "lineno": 140,
              "line": "                    int(data_size * block_cost.cost_amount),"
            },
            {
              "lineno": 141,
              "line": "                    block_cost.cost_filter,"
            },
            {
              "lineno": 142,
              "line": "                )"
            },
            {
              "lineno": 143,
              "line": ""
            },
            {
              "lineno": 144,
              "line": "        return 0, {}"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 114,
              "end_line": 121,
              "label": "    def _block_usage_cost(\n        self,\n        block: Block,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> tuple[int, BlockInput]:\n        block_costs = BLOCK_COSTS.get(type(block))",
              "successors": [
                {
                  "id": 2,
                  "start_line": 122,
                  "end_line": 123,
                  "label": "        if not block_costs:\n            return 0, {}",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 125,
                      "end_line": 125,
                      "label": "        for block_cost in block_costs:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 126,
                          "end_line": 127,
                          "label": "            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 129,
                              "end_line": 130,
                              "label": "            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "start_line": 132,
                              "end_line": 136,
                              "label": "            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                              "successors": []
                            },
                            {
                              "id": 7,
                              "start_line": 138,
                              "end_line": 142,
                              "label": "            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "start_line": 144,
                      "end_line": 144,
                      "label": "        return 0, {}",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_is_cost_filter_match",
          "type": "function",
          "start_line": 146,
          "end_line": 162,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 146,
              "line": "    def _is_cost_filter_match("
            },
            {
              "lineno": 147,
              "line": "        self, cost_filter: BlockInput, input_data: BlockInput"
            },
            {
              "lineno": 148,
              "line": "    ) -> bool:"
            },
            {
              "lineno": 149,
              "line": "        \"\"\""
            },
            {
              "lineno": 150,
              "line": "        Filter rules:"
            },
            {
              "lineno": 151,
              "line": "          - If costFilter is an object, then check if costFilter is the subset of inputValues"
            },
            {
              "lineno": 152,
              "line": "          - Otherwise, check if costFilter is equal to inputValues."
            },
            {
              "lineno": 153,
              "line": "          - Undefined, null, and empty string are considered as equal."
            },
            {
              "lineno": 154,
              "line": "        \"\"\""
            },
            {
              "lineno": 155,
              "line": "        if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):"
            },
            {
              "lineno": 156,
              "line": "            return cost_filter == input_data"
            },
            {
              "lineno": 157,
              "line": ""
            },
            {
              "lineno": 158,
              "line": "        return all("
            },
            {
              "lineno": 159,
              "line": "            (not input_data.get(k) and not v)"
            },
            {
              "lineno": 160,
              "line": "            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))"
            },
            {
              "lineno": 161,
              "line": "            for k, v in cost_filter.items()"
            },
            {
              "lineno": 162,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 146,
              "end_line": 154,
              "label": "    def _is_cost_filter_match(\n        self, cost_filter: BlockInput, input_data: BlockInput\n    ) -> bool:\n        \"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 155,
                  "end_line": 156,
                  "label": "        if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):\n            return cost_filter == input_data",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 158,
                      "end_line": 162,
                      "label": "        return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "spend_credits",
          "type": "function",
          "start_line": 164,
          "end_line": 202,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 164,
              "line": "    async def spend_credits("
            },
            {
              "lineno": 165,
              "line": "        self,"
            },
            {
              "lineno": 166,
              "line": "        user_id: str,"
            },
            {
              "lineno": 167,
              "line": "        user_credit: int,"
            },
            {
              "lineno": 168,
              "line": "        block_id: str,"
            },
            {
              "lineno": 169,
              "line": "        input_data: BlockInput,"
            },
            {
              "lineno": 170,
              "line": "        data_size: float,"
            },
            {
              "lineno": 171,
              "line": "        run_time: float,"
            },
            {
              "lineno": 172,
              "line": "        validate_balance: bool = True,"
            },
            {
              "lineno": 173,
              "line": "    ) -> int:"
            },
            {
              "lineno": 174,
              "line": "        block = get_block(block_id)"
            },
            {
              "lineno": 175,
              "line": "        if not block:"
            },
            {
              "lineno": 176,
              "line": "            raise ValueError(f\"Block not found: {block_id}\")"
            },
            {
              "lineno": 177,
              "line": ""
            },
            {
              "lineno": 178,
              "line": "        cost, matching_filter = self._block_usage_cost("
            },
            {
              "lineno": 179,
              "line": "            block=block, input_data=input_data, data_size=data_size, run_time=run_time"
            },
            {
              "lineno": 180,
              "line": "        )"
            },
            {
              "lineno": 181,
              "line": "        if cost <= 0:"
            },
            {
              "lineno": 182,
              "line": "            return 0"
            },
            {
              "lineno": 183,
              "line": ""
            },
            {
              "lineno": 184,
              "line": "        if validate_balance and user_credit < cost:"
            },
            {
              "lineno": 185,
              "line": "            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")"
            },
            {
              "lineno": 186,
              "line": ""
            },
            {
              "lineno": 187,
              "line": "        await CreditTransaction.prisma().create("
            },
            {
              "lineno": 188,
              "line": "            data={"
            },
            {
              "lineno": 189,
              "line": "                \"userId\": user_id,"
            },
            {
              "lineno": 190,
              "line": "                \"amount\": -cost,"
            },
            {
              "lineno": 191,
              "line": "                \"type\": CreditTransactionType.USAGE,"
            },
            {
              "lineno": 192,
              "line": "                \"blockId\": block.id,"
            },
            {
              "lineno": 193,
              "line": "                \"metadata\": Json("
            },
            {
              "lineno": 194,
              "line": "                    {"
            },
            {
              "lineno": 195,
              "line": "                        \"block\": block.name,"
            },
            {
              "lineno": 196,
              "line": "                        \"input\": matching_filter,"
            },
            {
              "lineno": 197,
              "line": "                    }"
            },
            {
              "lineno": 198,
              "line": "                ),"
            },
            {
              "lineno": 199,
              "line": "                \"createdAt\": self.time_now(),"
            },
            {
              "lineno": 200,
              "line": "            }"
            },
            {
              "lineno": 201,
              "line": "        )"
            },
            {
              "lineno": 202,
              "line": "        return cost"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 164,
              "end_line": 174,
              "label": "    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n        validate_balance: bool = True,\n    ) -> int:\n        block = get_block(block_id)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 175,
                  "end_line": 176,
                  "label": "        if not block:\n            raise ValueError(f\"Block not found: {block_id}\")",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 178,
                      "end_line": 180,
                      "label": "        cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 181,
                          "end_line": 182,
                          "label": "        if cost <= 0:\n            return 0",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 184,
                              "end_line": 185,
                              "label": "        if validate_balance and user_credit < cost:\n            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 187,
                                  "end_line": 201,
                                  "label": "        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 202,
                                      "end_line": 202,
                                      "label": "        return cost",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "top_up_credits",
          "type": "function",
          "start_line": 204,
          "end_line": 212,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 204,
              "line": "    async def top_up_credits(self, user_id: str, amount: int):"
            },
            {
              "lineno": 205,
              "line": "        await CreditTransaction.prisma().create("
            },
            {
              "lineno": 206,
              "line": "            data={"
            },
            {
              "lineno": 207,
              "line": "                \"userId\": user_id,"
            },
            {
              "lineno": 208,
              "line": "                \"amount\": amount,"
            },
            {
              "lineno": 209,
              "line": "                \"type\": CreditTransactionType.TOP_UP,"
            },
            {
              "lineno": 210,
              "line": "                \"createdAt\": self.time_now(),"
            },
            {
              "lineno": 211,
              "line": "            }"
            },
            {
              "lineno": 212,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 204,
              "end_line": 212,
              "label": "    async def top_up_credits(self, user_id: str, amount: int):\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 69,
          "line": "class UserCredit(UserCreditBase):"
        },
        {
          "lineno": 109,
          "line": ""
        },
        {
          "lineno": 110,
          "line": "    @staticmethod"
        },
        {
          "lineno": 113,
          "line": ""
        },
        {
          "lineno": 145,
          "line": ""
        },
        {
          "lineno": 163,
          "line": ""
        },
        {
          "lineno": 203,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 69,
          "end_line": 69,
          "label": "class UserCredit(UserCreditBase):",
          "successors": [
            {
              "id": 2,
              "start_line": 110,
              "end_line": 110,
              "label": "@staticmethod",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "DisabledUserCredit",
      "type": "class",
      "start_line": 215,
      "end_line": 223,
      "functions": [
        {
          "name": "get_or_refill_credit",
          "type": "function",
          "start_line": 216,
          "end_line": 217,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 216,
              "line": "    async def get_or_refill_credit(self, *args, **kwargs) -> int:"
            },
            {
              "lineno": 217,
              "line": "        return 0"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 216,
              "end_line": 217,
              "label": "    async def get_or_refill_credit(self, *args, **kwargs) -> int:\n        return 0",
              "successors": []
            }
          ]
        },
        {
          "name": "spend_credits",
          "type": "function",
          "start_line": 219,
          "end_line": 220,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 219,
              "line": "    async def spend_credits(self, *args, **kwargs) -> int:"
            },
            {
              "lineno": 220,
              "line": "        return 0"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 219,
              "end_line": 219,
              "label": "    async def spend_credits(self, *args, **kwargs) -> int:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 220,
                  "end_line": 220,
                  "label": "        return 0",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "top_up_credits",
          "type": "function",
          "start_line": 222,
          "end_line": 223,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 222,
              "line": "    async def top_up_credits(self, *args, **kwargs):"
            },
            {
              "lineno": 223,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 222,
              "end_line": 223,
              "label": "    async def top_up_credits(self, *args, **kwargs):\n        pass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 215,
          "line": "class DisabledUserCredit(UserCreditBase):"
        },
        {
          "lineno": 218,
          "line": ""
        },
        {
          "lineno": 221,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 215,
          "end_line": 215,
          "label": "class DisabledUserCredit(UserCreditBase):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 218,
          "end_line": 218,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 221,
          "end_line": 221,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from abc import ABC, abstractmethod"
    },
    {
      "lineno": 2,
      "line": "from datetime import datetime, timezone"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from prisma import Json"
    },
    {
      "lineno": 5,
      "line": "from prisma.enums import CreditTransactionType"
    },
    {
      "lineno": 6,
      "line": "from prisma.errors import UniqueViolationError"
    },
    {
      "lineno": 7,
      "line": "from prisma.models import CreditTransaction"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "from backend.data.block import Block, BlockInput, get_block"
    },
    {
      "lineno": 10,
      "line": "from backend.data.block_cost_config import BLOCK_COSTS"
    },
    {
      "lineno": 11,
      "line": "from backend.data.cost import BlockCost, BlockCostType"
    },
    {
      "lineno": 12,
      "line": "from backend.util.settings import Config"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": "config = Config()"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 67,
      "line": ""
    },
    {
      "lineno": 68,
      "line": ""
    },
    {
      "lineno": 213,
      "line": ""
    },
    {
      "lineno": 214,
      "line": ""
    },
    {
      "lineno": 224,
      "line": ""
    },
    {
      "lineno": 225,
      "line": ""
    },
    {
      "lineno": 231,
      "line": ""
    },
    {
      "lineno": 232,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "from abc import ABC, abstractmethod\nfrom datetime import datetime, timezone\n\nfrom prisma import Json\nfrom prisma.enums import CreditTransactionType\nfrom prisma.errors import UniqueViolationError\nfrom prisma.models import CreditTransaction",
      "successors": [
        {
          "id": 2,
          "start_line": 9,
          "end_line": 12,
          "label": "from backend.data.block import Block, BlockInput, get_block\nfrom backend.data.block_cost_config import BLOCK_COSTS\nfrom backend.data.cost import BlockCost, BlockCostType\nfrom backend.util.settings import Config",
          "successors": [
            {
              "id": 3,
              "start_line": 14,
              "end_line": 14,
              "label": "config = Config()",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}