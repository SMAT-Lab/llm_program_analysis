{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 130,
  "functions": [
    {
      "name": "get_or_create_user",
      "type": "function",
      "start_line": 16,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "async def get_or_create_user(user_data: dict) -> User:"
        },
        {
          "lineno": 17,
          "line": "    user_id = user_data.get(\"sub\")"
        },
        {
          "lineno": 18,
          "line": "    if not user_id:"
        },
        {
          "lineno": 19,
          "line": "        raise HTTPException(status_code=401, detail=\"User ID not found in token\")"
        },
        {
          "lineno": 20,
          "line": ""
        },
        {
          "lineno": 21,
          "line": "    user_email = user_data.get(\"email\")"
        },
        {
          "lineno": 22,
          "line": "    if not user_email:"
        },
        {
          "lineno": 23,
          "line": "        raise HTTPException(status_code=401, detail=\"Email not found in token\")"
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 25,
          "line": "    user = await prisma.user.find_unique(where={\"id\": user_id})"
        },
        {
          "lineno": 26,
          "line": "    if not user:"
        },
        {
          "lineno": 27,
          "line": "        user = await prisma.user.create("
        },
        {
          "lineno": 28,
          "line": "            data={"
        },
        {
          "lineno": 29,
          "line": "                \"id\": user_id,"
        },
        {
          "lineno": 30,
          "line": "                \"email\": user_email,"
        },
        {
          "lineno": 31,
          "line": "                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),"
        },
        {
          "lineno": 32,
          "line": "            }"
        },
        {
          "lineno": 33,
          "line": "        )"
        },
        {
          "lineno": 34,
          "line": "    return User.model_validate(user)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 17,
          "label": "async def get_or_create_user(user_data: dict) -> User:\n    user_id = user_data.get(\"sub\")",
          "successors": [
            {
              "id": 2,
              "start_line": 18,
              "end_line": 19,
              "label": "if not user_id:\n        raise HTTPException(status_code=401, detail=\"User ID not found in token\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 21,
                  "end_line": 22,
                  "label": "user_email = user_data.get(\"email\")\n    if not user_email:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 23,
                      "end_line": 23,
                      "label": "raise HTTPException(status_code=401, detail=\"Email not found in token\")",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 25,
                          "end_line": 26,
                          "label": "user = await prisma.user.find_unique(where={\"id\": user_id})\n    if not user:",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 27,
                              "end_line": 33,
                              "label": "user = await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 34,
                                  "end_line": 34,
                                  "label": "return User.model_validate(user)",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "start_line": 34,
                              "end_line": 34,
                              "label": "return User.model_validate(user)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 25,
                      "end_line": 26,
                      "label": "user = await prisma.user.find_unique(where={\"id\": user_id})\n    if not user:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 27,
                          "end_line": 33,
                          "label": "user = await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 34,
                              "end_line": 34,
                              "label": "return User.model_validate(user)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "start_line": 34,
                          "end_line": 34,
                          "label": "return User.model_validate(user)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_user_by_id",
      "type": "function",
      "start_line": 37,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 37,
          "line": "async def get_user_by_id(user_id: str) -> Optional[User]:"
        },
        {
          "lineno": 38,
          "line": "    user = await prisma.user.find_unique(where={\"id\": user_id})"
        },
        {
          "lineno": 39,
          "line": "    return User.model_validate(user) if user else None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 37,
          "end_line": 37,
          "label": "async def get_user_by_id(user_id: str) -> Optional[User]:",
          "successors": [
            {
              "id": 2,
              "start_line": 38,
              "end_line": 39,
              "label": "    user = await prisma.user.find_unique(where={\"id\": user_id})\n    return User.model_validate(user) if user else None",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "create_default_user",
      "type": "function",
      "start_line": 42,
      "end_line": 52,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 42,
          "line": "async def create_default_user() -> Optional[User]:"
        },
        {
          "lineno": 43,
          "line": "    user = await prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})"
        },
        {
          "lineno": 44,
          "line": "    if not user:"
        },
        {
          "lineno": 45,
          "line": "        user = await prisma.user.create("
        },
        {
          "lineno": 46,
          "line": "            data={"
        },
        {
          "lineno": 47,
          "line": "                \"id\": DEFAULT_USER_ID,"
        },
        {
          "lineno": 48,
          "line": "                \"email\": \"default@example.com\","
        },
        {
          "lineno": 49,
          "line": "                \"name\": \"Default User\","
        },
        {
          "lineno": 50,
          "line": "            }"
        },
        {
          "lineno": 51,
          "line": "        )"
        },
        {
          "lineno": 52,
          "line": "    return User.model_validate(user)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 42,
          "end_line": 43,
          "label": "async def create_default_user() -> Optional[User]:\n    user = await prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})",
          "successors": [
            {
              "id": 2,
              "start_line": 44,
              "end_line": 44,
              "label": "if not user:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 45,
                  "end_line": 51,
                  "label": "user = await prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 52,
              "end_line": 52,
              "label": "return User.model_validate(user)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_user_metadata",
      "type": "function",
      "start_line": 55,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 55,
          "line": "async def get_user_metadata(user_id: str) -> UserMetadata:"
        },
        {
          "lineno": 56,
          "line": "    user = await User.prisma().find_unique_or_raise("
        },
        {
          "lineno": 57,
          "line": "        where={\"id\": user_id},"
        },
        {
          "lineno": 58,
          "line": "    )"
        },
        {
          "lineno": 59,
          "line": ""
        },
        {
          "lineno": 60,
          "line": "    metadata = cast(UserMetadataRaw, user.metadata)"
        },
        {
          "lineno": 61,
          "line": "    return UserMetadata.model_validate(metadata)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 55,
          "end_line": 60,
          "label": "async def get_user_metadata(user_id: str) -> UserMetadata:\n    user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )\n\n    metadata = cast(UserMetadataRaw, user.metadata)",
          "successors": [
            {
              "id": 2,
              "start_line": 61,
              "end_line": 61,
              "label": "return UserMetadata.model_validate(metadata)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "update_user_metadata",
      "type": "function",
      "start_line": 64,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 64,
          "line": "async def update_user_metadata(user_id: str, metadata: UserMetadata):"
        },
        {
          "lineno": 65,
          "line": "    await User.prisma().update("
        },
        {
          "lineno": 66,
          "line": "        where={\"id\": user_id},"
        },
        {
          "lineno": 67,
          "line": "        data={\"metadata\": Json(metadata.model_dump())},"
        },
        {
          "lineno": 68,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 64,
          "end_line": 68,
          "label": "async def update_user_metadata(user_id: str, metadata: UserMetadata):\n    await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"metadata\": Json(metadata.model_dump())},\n    )",
          "successors": []
        }
      ]
    },
    {
      "name": "get_user_integrations",
      "type": "function",
      "start_line": 71,
      "end_line": 82,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 71,
          "line": "async def get_user_integrations(user_id: str) -> UserIntegrations:"
        },
        {
          "lineno": 72,
          "line": "    user = await User.prisma().find_unique_or_raise("
        },
        {
          "lineno": 73,
          "line": "        where={\"id\": user_id},"
        },
        {
          "lineno": 74,
          "line": "    )"
        },
        {
          "lineno": 75,
          "line": ""
        },
        {
          "lineno": 76,
          "line": "    encrypted_integrations = user.integrations"
        },
        {
          "lineno": 77,
          "line": "    if not encrypted_integrations:"
        },
        {
          "lineno": 78,
          "line": "        return UserIntegrations()"
        },
        {
          "lineno": 79,
          "line": "    else:"
        },
        {
          "lineno": 80,
          "line": "        return UserIntegrations.model_validate("
        },
        {
          "lineno": 81,
          "line": "            JSONCryptor().decrypt(encrypted_integrations)"
        },
        {
          "lineno": 82,
          "line": "        )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 71,
          "end_line": 76,
          "label": "async def get_user_integrations(user_id: str) -> UserIntegrations:\n    user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )\n\n    encrypted_integrations = user.integrations",
          "successors": [
            {
              "id": 2,
              "start_line": 77,
              "end_line": 78,
              "label": "if not encrypted_integrations:\n    return UserIntegrations()",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 79,
              "end_line": 82,
              "label": "else:\n    return UserIntegrations.model_validate(\n        JSONCryptor().decrypt(encrypted_integrations)\n    )",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "update_user_integrations",
      "type": "function",
      "start_line": 85,
      "end_line": 90,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 85,
          "line": "async def update_user_integrations(user_id: str, data: UserIntegrations):"
        },
        {
          "lineno": 86,
          "line": "    encrypted_data = JSONCryptor().encrypt(data.model_dump())"
        },
        {
          "lineno": 87,
          "line": "    await User.prisma().update("
        },
        {
          "lineno": 88,
          "line": "        where={\"id\": user_id},"
        },
        {
          "lineno": 89,
          "line": "        data={\"integrations\": encrypted_data},"
        },
        {
          "lineno": 90,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 85,
          "end_line": 90,
          "label": "async def update_user_integrations(user_id: str, data: UserIntegrations):\n    encrypted_data = JSONCryptor().encrypt(data.model_dump())\n    await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"integrations\": encrypted_data},\n    )",
          "successors": []
        }
      ]
    },
    {
      "name": "migrate_and_encrypt_user_integrations",
      "type": "function",
      "start_line": 93,
      "end_line": 130,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 93,
          "line": "async def migrate_and_encrypt_user_integrations():"
        },
        {
          "lineno": 94,
          "line": "    \"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\""
        },
        {
          "lineno": 95,
          "line": "    users = await User.prisma().find_many("
        },
        {
          "lineno": 96,
          "line": "        where={"
        },
        {
          "lineno": 97,
          "line": "            \"metadata\": {"
        },
        {
          "lineno": 98,
          "line": "                \"path\": [\"integration_credentials\"],"
        },
        {
          "lineno": 99,
          "line": "                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists"
        },
        {
          "lineno": 100,
          "line": "            }  # type: ignore"
        },
        {
          "lineno": 101,
          "line": "        }"
        },
        {
          "lineno": 102,
          "line": "    )"
        },
        {
          "lineno": 103,
          "line": "    logger.info(f\"Migrating integration credentials for {len(users)} users\")"
        },
        {
          "lineno": 104,
          "line": ""
        },
        {
          "lineno": 105,
          "line": "    for user in users:"
        },
        {
          "lineno": 106,
          "line": "        raw_metadata = cast(UserMetadataRaw, user.metadata)"
        },
        {
          "lineno": 107,
          "line": "        metadata = UserMetadata.model_validate(raw_metadata)"
        },
        {
          "lineno": 108,
          "line": ""
        },
        {
          "lineno": 109,
          "line": "        # Get existing integrations data"
        },
        {
          "lineno": 110,
          "line": "        integrations = await get_user_integrations(user_id=user.id)"
        },
        {
          "lineno": 111,
          "line": ""
        },
        {
          "lineno": 112,
          "line": "        # Copy credentials and oauth states from metadata if they exist"
        },
        {
          "lineno": 113,
          "line": "        if metadata.integration_credentials and not integrations.credentials:"
        },
        {
          "lineno": 114,
          "line": "            integrations.credentials = metadata.integration_credentials"
        },
        {
          "lineno": 115,
          "line": "        if metadata.integration_oauth_states:"
        },
        {
          "lineno": 116,
          "line": "            integrations.oauth_states = metadata.integration_oauth_states"
        },
        {
          "lineno": 117,
          "line": ""
        },
        {
          "lineno": 118,
          "line": "        # Save to integrations column"
        },
        {
          "lineno": 119,
          "line": "        await update_user_integrations(user_id=user.id, data=integrations)"
        },
        {
          "lineno": 120,
          "line": ""
        },
        {
          "lineno": 121,
          "line": "        # Remove from metadata"
        },
        {
          "lineno": 122,
          "line": "        raw_metadata = dict(raw_metadata)"
        },
        {
          "lineno": 123,
          "line": "        raw_metadata.pop(\"integration_credentials\", None)"
        },
        {
          "lineno": 124,
          "line": "        raw_metadata.pop(\"integration_oauth_states\", None)"
        },
        {
          "lineno": 125,
          "line": ""
        },
        {
          "lineno": 126,
          "line": "        # Update metadata without integration data"
        },
        {
          "lineno": 127,
          "line": "        await User.prisma().update("
        },
        {
          "lineno": 128,
          "line": "            where={\"id\": user.id},"
        },
        {
          "lineno": 129,
          "line": "            data={\"metadata\": Json(raw_metadata)},"
        },
        {
          "lineno": 130,
          "line": "        )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 93,
          "end_line": 104,
          "label": "async def migrate_and_encrypt_user_integrations():\n    \"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\"\n    users = await User.prisma().find_many(\n        where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }\n    )\n    logger.info(f\"Migrating integration credentials for {len(users)} users\")",
          "successors": [
            {
              "id": 2,
              "start_line": 105,
              "end_line": 113,
              "label": "for user in users:\n        raw_metadata = cast(UserMetadataRaw, user.metadata)\n        metadata = UserMetadata.model_validate(raw_metadata)\n\n        # Get existing integrations data\n        integrations = await get_user_integrations(user_id=user.id)\n\n        # Copy credentials and oauth states from metadata if they exist\n        if metadata.integration_credentials and not integrations.credentials:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 114,
                  "end_line": 114,
                  "label": "integrations.credentials = metadata.integration_credentials",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 115,
                      "end_line": 116,
                      "label": "if metadata.integration_oauth_states:\n            integrations.oauth_states = metadata.integration_oauth_states",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 118,
                          "end_line": 119,
                          "label": "# Save to integrations column\n        await update_user_integrations(user_id=user.id, data=integrations)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 121,
                              "end_line": 124,
                              "label": "# Remove from metadata\n        raw_metadata = dict(raw_metadata)\n        raw_metadata.pop(\"integration_credentials\", None)\n        raw_metadata.pop(\"integration_oauth_states\", None)",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 126,
                                  "end_line": 130,
                                  "label": "# Update metadata without integration data\n        await User.prisma().update(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},\n        )",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "from typing import Optional, cast"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from autogpt_libs.auth.models import DEFAULT_USER_ID"
    },
    {
      "lineno": 5,
      "line": "from fastapi import HTTPException"
    },
    {
      "lineno": 6,
      "line": "from prisma import Json"
    },
    {
      "lineno": 7,
      "line": "from prisma.models import User"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "from backend.data.db import prisma"
    },
    {
      "lineno": 10,
      "line": "from backend.data.model import UserIntegrations, UserMetadata, UserMetadataRaw"
    },
    {
      "lineno": 11,
      "line": "from backend.util.encryption import JSONCryptor"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 36,
      "line": ""
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 53,
      "line": ""
    },
    {
      "lineno": 54,
      "line": ""
    },
    {
      "lineno": 62,
      "line": ""
    },
    {
      "lineno": 63,
      "line": ""
    },
    {
      "lineno": 69,
      "line": ""
    },
    {
      "lineno": 70,
      "line": ""
    },
    {
      "lineno": 83,
      "line": ""
    },
    {
      "lineno": 84,
      "line": ""
    },
    {
      "lineno": 91,
      "line": ""
    },
    {
      "lineno": 92,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 13,
      "label": "import logging\nfrom typing import Optional, cast\n\nfrom autogpt_libs.auth.models import DEFAULT_USER_ID\nfrom fastapi import HTTPException\nfrom prisma import Json\nfrom prisma.models import User\n\nfrom backend.data.db import prisma\nfrom backend.data.model import UserIntegrations, UserMetadata, UserMetadataRaw\nfrom backend.util.encryption import JSONCryptor\n\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ]
}