{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 325,
  "functions": [
    {
      "name": "generate_api_key",
      "type": "function",
      "start_line": 117,
      "end_line": 152,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 117,
          "line": "async def generate_api_key("
        },
        {
          "lineno": 118,
          "line": "    name: str,"
        },
        {
          "lineno": 119,
          "line": "    user_id: str,"
        },
        {
          "lineno": 120,
          "line": "    permissions: List[APIKeyPermission],"
        },
        {
          "lineno": 121,
          "line": "    description: Optional[str] = None,"
        },
        {
          "lineno": 122,
          "line": ") -> tuple[APIKeyWithoutHash, str]:"
        },
        {
          "lineno": 123,
          "line": "    \"\"\""
        },
        {
          "lineno": 124,
          "line": "    Generate a new API key and store it in the database."
        },
        {
          "lineno": 125,
          "line": "    Returns the API key object (without hash) and the plain text key."
        },
        {
          "lineno": 126,
          "line": "    \"\"\""
        },
        {
          "lineno": 127,
          "line": "    try:"
        },
        {
          "lineno": 128,
          "line": "        api_manager = APIKeyManager()"
        },
        {
          "lineno": 129,
          "line": "        key = api_manager.generate_api_key()"
        },
        {
          "lineno": 130,
          "line": ""
        },
        {
          "lineno": 131,
          "line": "        api_key = await PrismaAPIKey.prisma().create("
        },
        {
          "lineno": 132,
          "line": "            data=APIKeyCreateInput("
        },
        {
          "lineno": 133,
          "line": "                id=str(uuid.uuid4()),"
        },
        {
          "lineno": 134,
          "line": "                name=name,"
        },
        {
          "lineno": 135,
          "line": "                prefix=key.prefix,"
        },
        {
          "lineno": 136,
          "line": "                postfix=key.postfix,"
        },
        {
          "lineno": 137,
          "line": "                key=key.hash,"
        },
        {
          "lineno": 138,
          "line": "                permissions=[p for p in permissions],"
        },
        {
          "lineno": 139,
          "line": "                description=description,"
        },
        {
          "lineno": 140,
          "line": "                userId=user_id,"
        },
        {
          "lineno": 141,
          "line": "            )"
        },
        {
          "lineno": 142,
          "line": "        )"
        },
        {
          "lineno": 143,
          "line": ""
        },
        {
          "lineno": 144,
          "line": "        api_key_without_hash = APIKeyWithoutHash.from_db(api_key)"
        },
        {
          "lineno": 145,
          "line": "        return api_key_without_hash, key.raw"
        },
        {
          "lineno": 146,
          "line": "    except PrismaError as e:"
        },
        {
          "lineno": 147,
          "line": "        logger.error(f\"Database error while generating API key: {str(e)}\")"
        },
        {
          "lineno": 148,
          "line": "        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")"
        },
        {
          "lineno": 149,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 150,
          "line": "        logger.error(f\"Unexpected error while generating API key: {str(e)}\")"
        },
        {
          "lineno": 151,
          "line": "        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")"
        },
        {
          "lineno": 152,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 117,
          "end_line": 122,
          "label": "async def generate_api_key(\n    name: str,\n    user_id: str,\n    permissions: List[APIKeyPermission],\n    description: Optional[str] = None,\n) -> tuple[APIKeyWithoutHash, str]:",
          "successors": [
            {
              "id": 2,
              "start_line": 123,
              "end_line": 126,
              "label": "\"\"\"\n    Generate a new API key and store it in the database.\n    Returns the API key object (without hash) and the plain text key.\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 127,
                  "end_line": 129,
                  "label": "try:\n    api_manager = APIKeyManager()\n    key = api_manager.generate_api_key()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 131,
                      "end_line": 142,
                      "label": "api_key = await PrismaAPIKey.prisma().create(\n    data=APIKeyCreateInput(\n        id=str(uuid.uuid4()),\n        name=name,\n        prefix=key.prefix,\n        postfix=key.postfix,\n        key=key.hash,\n        permissions=[p for p in permissions],\n        description=description,\n        userId=user_id,\n    )\n)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 144,
                          "end_line": 145,
                          "label": "api_key_without_hash = APIKeyWithoutHash.from_db(api_key)\nreturn api_key_without_hash, key.raw",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "start_line": 146,
                      "end_line": 148,
                      "label": "except PrismaError as e:\n    logger.error(f\"Database error while generating API key: {str(e)}\")\n    raise APIKeyError(f\"Failed to generate API key: {str(e)}\")",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "start_line": 149,
                      "end_line": 151,
                      "label": "except Exception as e:\n    logger.error(f\"Unexpected error while generating API key: {str(e)}\")\n    raise APIKeyError(f\"Failed to generate API key: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "validate_api_key",
      "type": "function",
      "start_line": 154,
      "end_line": 183,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 154,
          "line": "async def validate_api_key(plain_text_key: str) -> Optional[APIKey]:"
        },
        {
          "lineno": 155,
          "line": "    \"\"\""
        },
        {
          "lineno": 156,
          "line": "    Validate an API key and return the API key object if valid."
        },
        {
          "lineno": 157,
          "line": "    \"\"\""
        },
        {
          "lineno": 158,
          "line": "    try:"
        },
        {
          "lineno": 159,
          "line": "        if not plain_text_key.startswith(APIKeyManager.PREFIX):"
        },
        {
          "lineno": 160,
          "line": "            logger.warning(\"Invalid API key format\")"
        },
        {
          "lineno": 161,
          "line": "            return None"
        },
        {
          "lineno": 162,
          "line": ""
        },
        {
          "lineno": 163,
          "line": "        prefix = plain_text_key[: APIKeyManager.PREFIX_LENGTH]"
        },
        {
          "lineno": 164,
          "line": "        api_manager = APIKeyManager()"
        },
        {
          "lineno": 165,
          "line": ""
        },
        {
          "lineno": 166,
          "line": "        api_key = await PrismaAPIKey.prisma().find_first("
        },
        {
          "lineno": 167,
          "line": "            where=APIKeyWhereInput(prefix=prefix, status=(APIKeyStatus.ACTIVE))"
        },
        {
          "lineno": 168,
          "line": "        )"
        },
        {
          "lineno": 169,
          "line": ""
        },
        {
          "lineno": 170,
          "line": "        if not api_key:"
        },
        {
          "lineno": 171,
          "line": "            logger.warning(f\"No active API key found with prefix {prefix}\")"
        },
        {
          "lineno": 172,
          "line": "            return None"
        },
        {
          "lineno": 173,
          "line": ""
        },
        {
          "lineno": 174,
          "line": "        is_valid = api_manager.verify_api_key(plain_text_key, api_key.key)"
        },
        {
          "lineno": 175,
          "line": "        if not is_valid:"
        },
        {
          "lineno": 176,
          "line": "            logger.warning(\"API key verification failed\")"
        },
        {
          "lineno": 177,
          "line": "            return None"
        },
        {
          "lineno": 178,
          "line": ""
        },
        {
          "lineno": 179,
          "line": "        return APIKey.from_db(api_key)"
        },
        {
          "lineno": 180,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 181,
          "line": "        logger.error(f\"Error validating API key: {str(e)}\")"
        },
        {
          "lineno": 182,
          "line": "        raise APIKeyValidationError(f\"Failed to validate API key: {str(e)}\")"
        },
        {
          "lineno": 183,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 154,
          "end_line": 154,
          "label": "async def validate_api_key(plain_text_key: str) -> Optional[APIKey]:",
          "successors": [
            {
              "id": 2,
              "start_line": 158,
              "end_line": 159,
              "label": "try:\n    if not plain_text_key.startswith(APIKeyManager.PREFIX):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 160,
                  "end_line": 161,
                  "label": "logger.warning(\"Invalid API key format\")\nreturn None",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 163,
                  "end_line": 168,
                  "label": "prefix = plain_text_key[: APIKeyManager.PREFIX_LENGTH]\napi_manager = APIKeyManager()\n\napi_key = await PrismaAPIKey.prisma().find_first(\n    where=APIKeyWhereInput(prefix=prefix, status=(APIKeyStatus.ACTIVE))\n)",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 170,
                      "end_line": 170,
                      "label": "if not api_key:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 171,
                          "end_line": 172,
                          "label": "logger.warning(f\"No active API key found with prefix {prefix}\")\nreturn None",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 174,
                          "end_line": 174,
                          "label": "is_valid = api_manager.verify_api_key(plain_text_key, api_key.key)",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 175,
                              "end_line": 175,
                              "label": "if not is_valid:",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 176,
                                  "end_line": 177,
                                  "label": "logger.warning(\"API key verification failed\")\nreturn None",
                                  "successors": []
                                },
                                {
                                  "id": 10,
                                  "start_line": 179,
                                  "end_line": 179,
                                  "label": "return APIKey.from_db(api_key)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 11,
          "start_line": 180,
          "end_line": 182,
          "label": "except Exception as e:\n    logger.error(f\"Error validating API key: {str(e)}\")\n    raise APIKeyValidationError(f\"Failed to validate API key: {str(e)}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "revoke_api_key",
      "type": "function",
      "start_line": 185,
      "end_line": 216,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 185,
          "line": "async def revoke_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:"
        },
        {
          "lineno": 186,
          "line": "    try:"
        },
        {
          "lineno": 187,
          "line": "        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})"
        },
        {
          "lineno": 188,
          "line": ""
        },
        {
          "lineno": 189,
          "line": "        if not api_key:"
        },
        {
          "lineno": 190,
          "line": "            raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")"
        },
        {
          "lineno": 191,
          "line": ""
        },
        {
          "lineno": 192,
          "line": "        if api_key.userId != user_id:"
        },
        {
          "lineno": 193,
          "line": "            raise APIKeyPermissionError("
        },
        {
          "lineno": 194,
          "line": "                \"You do not have permission to revoke this API key.\""
        },
        {
          "lineno": 195,
          "line": "            )"
        },
        {
          "lineno": 196,
          "line": ""
        },
        {
          "lineno": 197,
          "line": "        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}"
        },
        {
          "lineno": 198,
          "line": "        updated_api_key = await PrismaAPIKey.prisma().update("
        },
        {
          "lineno": 199,
          "line": "            where=where_clause,"
        },
        {
          "lineno": 200,
          "line": "            data=APIKeyUpdateInput("
        },
        {
          "lineno": 201,
          "line": "                status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)"
        },
        {
          "lineno": 202,
          "line": "            ),"
        },
        {
          "lineno": 203,
          "line": "        )"
        },
        {
          "lineno": 204,
          "line": ""
        },
        {
          "lineno": 205,
          "line": "        if updated_api_key:"
        },
        {
          "lineno": 206,
          "line": "            return APIKeyWithoutHash.from_db(updated_api_key)"
        },
        {
          "lineno": 207,
          "line": "        return None"
        },
        {
          "lineno": 208,
          "line": "    except (APIKeyNotFoundError, APIKeyPermissionError) as e:"
        },
        {
          "lineno": 209,
          "line": "        raise e"
        },
        {
          "lineno": 210,
          "line": "    except PrismaError as e:"
        },
        {
          "lineno": 211,
          "line": "        logger.error(f\"Database error while revoking API key: {str(e)}\")"
        },
        {
          "lineno": 212,
          "line": "        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")"
        },
        {
          "lineno": 213,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 214,
          "line": "        logger.error(f\"Unexpected error while revoking API key: {str(e)}\")"
        },
        {
          "lineno": 215,
          "line": "        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")"
        },
        {
          "lineno": 216,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 185,
          "end_line": 185,
          "label": "async def revoke_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:",
          "successors": [
            {
              "id": 2,
              "start_line": 186,
              "end_line": 187,
              "label": "try:\n    api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})",
              "successors": [
                {
                  "id": 3,
                  "start_line": 189,
                  "end_line": 190,
                  "label": "if not api_key:\n    raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 192,
                      "end_line": 193,
                      "label": "if api_key.userId != user_id:\n    raise APIKeyPermissionError(",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 197,
                          "end_line": 203,
                          "label": "where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\nupdated_api_key = await PrismaAPIKey.prisma().update(\n    where=where_clause,\n    data=APIKeyUpdateInput(\n        status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)\n    ),\n)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 205,
                              "end_line": 206,
                              "label": "if updated_api_key:\n    return APIKeyWithoutHash.from_db(updated_api_key)",
                              "successors": []
                            },
                            {
                              "id": 7,
                              "start_line": 207,
                              "end_line": 207,
                              "label": "return None",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "start_line": 208,
                  "end_line": 209,
                  "label": "except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n    raise e",
                  "successors": []
                },
                {
                  "id": 9,
                  "start_line": 210,
                  "end_line": 212,
                  "label": "except PrismaError as e:\n    logger.error(f\"Database error while revoking API key: {str(e)}\")\n    raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 10,
                  "start_line": 213,
                  "end_line": 215,
                  "label": "except Exception as e:\n    logger.error(f\"Unexpected error while revoking API key: {str(e)}\")\n    raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "list_user_api_keys",
      "type": "function",
      "start_line": 218,
      "end_line": 234,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 218,
          "line": "async def list_user_api_keys(user_id: str) -> List[APIKeyWithoutHash]:"
        },
        {
          "lineno": 219,
          "line": "    try:"
        },
        {
          "lineno": 220,
          "line": "        where_clause: APIKeyWhereInput = {\"userId\": user_id}"
        },
        {
          "lineno": 221,
          "line": ""
        },
        {
          "lineno": 222,
          "line": "        api_keys = await PrismaAPIKey.prisma().find_many("
        },
        {
          "lineno": 223,
          "line": "            where=where_clause, order={\"createdAt\": \"desc\"}"
        },
        {
          "lineno": 224,
          "line": "        )"
        },
        {
          "lineno": 225,
          "line": ""
        },
        {
          "lineno": 226,
          "line": "        return [APIKeyWithoutHash.from_db(key) for key in api_keys]"
        },
        {
          "lineno": 227,
          "line": "    except PrismaError as e:"
        },
        {
          "lineno": 228,
          "line": "        logger.error(f\"Database error while listing API keys: {str(e)}\")"
        },
        {
          "lineno": 229,
          "line": "        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")"
        },
        {
          "lineno": 230,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 231,
          "line": "        logger.error(f\"Unexpected error while listing API keys: {str(e)}\")"
        },
        {
          "lineno": 232,
          "line": "        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")"
        },
        {
          "lineno": 233,
          "line": ""
        },
        {
          "lineno": 234,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 218,
          "end_line": 220,
          "label": "async def list_user_api_keys(user_id: str) -> List[APIKeyWithoutHash]:\n    try:\n        where_clause: APIKeyWhereInput = {\"userId\": user_id}",
          "successors": [
            {
              "id": 2,
              "start_line": 222,
              "end_line": 224,
              "label": "api_keys = await PrismaAPIKey.prisma().find_many(\n            where=where_clause, order={\"createdAt\": \"desc\"}\n        )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 226,
                  "end_line": 226,
                  "label": "return [APIKeyWithoutHash.from_db(key) for key in api_keys]",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 227,
              "end_line": 229,
              "label": "except PrismaError as e:\n        logger.error(f\"Database error while listing API keys: {str(e)}\")\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")",
              "successors": []
            },
            {
              "id": 5,
              "start_line": 230,
              "end_line": 232,
              "label": "except Exception as e:\n        logger.error(f\"Unexpected error while listing API keys: {str(e)}\")\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "suspend_api_key",
      "type": "function",
      "start_line": 235,
      "end_line": 264,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 235,
          "line": "async def suspend_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:"
        },
        {
          "lineno": 236,
          "line": "    try:"
        },
        {
          "lineno": 237,
          "line": "        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})"
        },
        {
          "lineno": 238,
          "line": ""
        },
        {
          "lineno": 239,
          "line": "        if not api_key:"
        },
        {
          "lineno": 240,
          "line": "            raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")"
        },
        {
          "lineno": 241,
          "line": ""
        },
        {
          "lineno": 242,
          "line": "        if api_key.userId != user_id:"
        },
        {
          "lineno": 243,
          "line": "            raise APIKeyPermissionError("
        },
        {
          "lineno": 244,
          "line": "                \"You do not have permission to suspend this API key.\""
        },
        {
          "lineno": 245,
          "line": "            )"
        },
        {
          "lineno": 246,
          "line": ""
        },
        {
          "lineno": 247,
          "line": "        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}"
        },
        {
          "lineno": 248,
          "line": "        updated_api_key = await PrismaAPIKey.prisma().update("
        },
        {
          "lineno": 249,
          "line": "            where=where_clause,"
        },
        {
          "lineno": 250,
          "line": "            data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED),"
        },
        {
          "lineno": 251,
          "line": "        )"
        },
        {
          "lineno": 252,
          "line": ""
        },
        {
          "lineno": 253,
          "line": "        if updated_api_key:"
        },
        {
          "lineno": 254,
          "line": "            return APIKeyWithoutHash.from_db(updated_api_key)"
        },
        {
          "lineno": 255,
          "line": "        return None"
        },
        {
          "lineno": 256,
          "line": "    except (APIKeyNotFoundError, APIKeyPermissionError) as e:"
        },
        {
          "lineno": 257,
          "line": "        raise e"
        },
        {
          "lineno": 258,
          "line": "    except PrismaError as e:"
        },
        {
          "lineno": 259,
          "line": "        logger.error(f\"Database error while suspending API key: {str(e)}\")"
        },
        {
          "lineno": 260,
          "line": "        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")"
        },
        {
          "lineno": 261,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 262,
          "line": "        logger.error(f\"Unexpected error while suspending API key: {str(e)}\")"
        },
        {
          "lineno": 263,
          "line": "        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")"
        },
        {
          "lineno": 264,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 235,
          "end_line": 236,
          "label": "async def suspend_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 237,
              "end_line": 237,
              "label": "api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})",
              "successors": [
                {
                  "id": 3,
                  "start_line": 239,
                  "end_line": 240,
                  "label": "if not api_key:\n    raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 242,
                  "end_line": 245,
                  "label": "if api_key.userId != user_id:\n    raise APIKeyPermissionError(\n        \"You do not have permission to suspend this API key.\"\n    )",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 247,
                  "end_line": 251,
                  "label": "where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\nupdated_api_key = await PrismaAPIKey.prisma().update(\n    where=where_clause,\n    data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED),\n)",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 253,
                      "end_line": 254,
                      "label": "if updated_api_key:\n    return APIKeyWithoutHash.from_db(updated_api_key)",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "start_line": 255,
                      "end_line": 255,
                      "label": "return None",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 8,
              "start_line": 256,
              "end_line": 257,
              "label": "except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n    raise e",
              "successors": []
            },
            {
              "id": 9,
              "start_line": 258,
              "end_line": 260,
              "label": "except PrismaError as e:\n    logger.error(f\"Database error while suspending API key: {str(e)}\")\n    raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")",
              "successors": []
            },
            {
              "id": 10,
              "start_line": 261,
              "end_line": 263,
              "label": "except Exception as e:\n    logger.error(f\"Unexpected error while suspending API key: {str(e)}\")\n    raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "has_permission",
      "type": "function",
      "start_line": 266,
      "end_line": 272,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 266,
          "line": "def has_permission(api_key: APIKey, required_permission: APIKeyPermission) -> bool:"
        },
        {
          "lineno": 267,
          "line": "    try:"
        },
        {
          "lineno": 268,
          "line": "        return required_permission in api_key.permissions"
        },
        {
          "lineno": 269,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 270,
          "line": "        logger.error(f\"Error checking API key permissions: {str(e)}\")"
        },
        {
          "lineno": 271,
          "line": "        return False"
        },
        {
          "lineno": 272,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 266,
          "end_line": 266,
          "label": "def has_permission(api_key: APIKey, required_permission: APIKeyPermission) -> bool:",
          "successors": [
            {
              "id": 2,
              "start_line": 267,
              "end_line": 268,
              "label": "    try:\n        return required_permission in api_key.permissions",
              "successors": [
                {
                  "id": 3,
                  "start_line": 269,
                  "end_line": 271,
                  "label": "    except Exception as e:\n        logger.error(f\"Error checking API key permissions: {str(e)}\")\n        return False",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_api_key_by_id",
      "type": "function",
      "start_line": 274,
      "end_line": 290,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 274,
          "line": "async def get_api_key_by_id(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:"
        },
        {
          "lineno": 275,
          "line": "    try:"
        },
        {
          "lineno": 276,
          "line": "        api_key = await PrismaAPIKey.prisma().find_first("
        },
        {
          "lineno": 277,
          "line": "            where=APIKeyWhereInput(id=key_id, userId=user_id)"
        },
        {
          "lineno": 278,
          "line": "        )"
        },
        {
          "lineno": 279,
          "line": ""
        },
        {
          "lineno": 280,
          "line": "        if not api_key:"
        },
        {
          "lineno": 281,
          "line": "            return None"
        },
        {
          "lineno": 282,
          "line": ""
        },
        {
          "lineno": 283,
          "line": "        return APIKeyWithoutHash.from_db(api_key)"
        },
        {
          "lineno": 284,
          "line": "    except PrismaError as e:"
        },
        {
          "lineno": 285,
          "line": "        logger.error(f\"Database error while getting API key: {str(e)}\")"
        },
        {
          "lineno": 286,
          "line": "        raise APIKeyError(f\"Failed to get API key: {str(e)}\")"
        },
        {
          "lineno": 287,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 288,
          "line": "        logger.error(f\"Unexpected error while getting API key: {str(e)}\")"
        },
        {
          "lineno": 289,
          "line": "        raise APIKeyError(f\"Failed to get API key: {str(e)}\")"
        },
        {
          "lineno": 290,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 274,
          "end_line": 274,
          "label": "async def get_api_key_by_id(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:",
          "successors": [
            {
              "id": 2,
              "start_line": 275,
              "end_line": 278,
              "label": "try:\n    api_key = await PrismaAPIKey.prisma().find_first(\n        where=APIKeyWhereInput(id=key_id, userId=user_id)\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 280,
                  "end_line": 281,
                  "label": "if not api_key:\n    return None",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 283,
                      "end_line": 283,
                      "label": "return APIKeyWithoutHash.from_db(api_key)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 284,
                  "end_line": 286,
                  "label": "except PrismaError as e:\n    logger.error(f\"Database error while getting API key: {str(e)}\")\n    raise APIKeyError(f\"Failed to get API key: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 6,
                  "start_line": 287,
                  "end_line": 289,
                  "label": "except Exception as e:\n    logger.error(f\"Unexpected error while getting API key: {str(e)}\")\n    raise APIKeyError(f\"Failed to get API key: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "update_api_key_permissions",
      "type": "function",
      "start_line": 292,
      "end_line": 325,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 292,
          "line": "async def update_api_key_permissions("
        },
        {
          "lineno": 293,
          "line": "    key_id: str, user_id: str, permissions: List[APIKeyPermission]"
        },
        {
          "lineno": 294,
          "line": ") -> Optional[APIKeyWithoutHash]:"
        },
        {
          "lineno": 295,
          "line": "    \"\"\""
        },
        {
          "lineno": 296,
          "line": "    Update the permissions of an API key."
        },
        {
          "lineno": 297,
          "line": "    \"\"\""
        },
        {
          "lineno": 298,
          "line": "    try:"
        },
        {
          "lineno": 299,
          "line": "        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})"
        },
        {
          "lineno": 300,
          "line": ""
        },
        {
          "lineno": 301,
          "line": "        if api_key is None:"
        },
        {
          "lineno": 302,
          "line": "            raise APIKeyNotFoundError(\"No such API key found.\")"
        },
        {
          "lineno": 303,
          "line": ""
        },
        {
          "lineno": 304,
          "line": "        if api_key.userId != user_id:"
        },
        {
          "lineno": 305,
          "line": "            raise APIKeyPermissionError("
        },
        {
          "lineno": 306,
          "line": "                \"You do not have permission to update this API key.\""
        },
        {
          "lineno": 307,
          "line": "            )"
        },
        {
          "lineno": 308,
          "line": ""
        },
        {
          "lineno": 309,
          "line": "        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}"
        },
        {
          "lineno": 310,
          "line": "        updated_api_key = await PrismaAPIKey.prisma().update("
        },
        {
          "lineno": 311,
          "line": "            where=where_clause,"
        },
        {
          "lineno": 312,
          "line": "            data=APIKeyUpdateInput(permissions=permissions),"
        },
        {
          "lineno": 313,
          "line": "        )"
        },
        {
          "lineno": 314,
          "line": ""
        },
        {
          "lineno": 315,
          "line": "        if updated_api_key:"
        },
        {
          "lineno": 316,
          "line": "            return APIKeyWithoutHash.from_db(updated_api_key)"
        },
        {
          "lineno": 317,
          "line": "        return None"
        },
        {
          "lineno": 318,
          "line": "    except (APIKeyNotFoundError, APIKeyPermissionError) as e:"
        },
        {
          "lineno": 319,
          "line": "        raise e"
        },
        {
          "lineno": 320,
          "line": "    except PrismaError as e:"
        },
        {
          "lineno": 321,
          "line": "        logger.error(f\"Database error while updating API key permissions: {str(e)}\")"
        },
        {
          "lineno": 322,
          "line": "        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")"
        },
        {
          "lineno": 323,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 324,
          "line": "        logger.error(f\"Unexpected error while updating API key permissions: {str(e)}\")"
        },
        {
          "lineno": 325,
          "line": "        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 292,
          "end_line": 297,
          "label": "async def update_api_key_permissions(\n    key_id: str, user_id: str, permissions: List[APIKeyPermission]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"\n    Update the permissions of an API key.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 298,
              "end_line": 299,
              "label": "try:\n    api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})",
              "successors": [
                {
                  "id": 3,
                  "start_line": 301,
                  "end_line": 302,
                  "label": "if api_key is None:\n    raise APIKeyNotFoundError(\"No such API key found.\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 304,
                  "end_line": 307,
                  "label": "if api_key.userId != user_id:\n    raise APIKeyPermissionError(\n        \"You do not have permission to update this API key.\"\n    )",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 309,
                  "end_line": 313,
                  "label": "where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\nupdated_api_key = await PrismaAPIKey.prisma().update(\n    where=where_clause,\n    data=APIKeyUpdateInput(permissions=permissions),\n)",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 315,
                      "end_line": 317,
                      "label": "if updated_api_key:\n    return APIKeyWithoutHash.from_db(updated_api_key)\nreturn None",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "start_line": 318,
              "end_line": 319,
              "label": "except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n    raise e",
              "successors": []
            },
            {
              "id": 8,
              "start_line": 320,
              "end_line": 322,
              "label": "except PrismaError as e:\n    logger.error(f\"Database error while updating API key permissions: {str(e)}\")\n    raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")",
              "successors": []
            },
            {
              "id": 9,
              "start_line": 323,
              "end_line": 325,
              "label": "except Exception as e:\n    logger.error(f\"Unexpected error while updating API key permissions: {str(e)}\")\n    raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "APIKeyError",
      "type": "class",
      "start_line": 24,
      "end_line": 27,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 24,
          "line": "class APIKeyError(Exception):"
        },
        {
          "lineno": 25,
          "line": "    \"\"\"Base exception for API key operations\"\"\""
        },
        {
          "lineno": 26,
          "line": ""
        },
        {
          "lineno": 27,
          "line": "    pass"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 24,
          "end_line": 27,
          "label": "class APIKeyError(Exception):\n    \"\"\"Base exception for API key operations\"\"\"\n\n    pass",
          "successors": []
        }
      ]
    },
    {
      "name": "APIKeyNotFoundError",
      "type": "class",
      "start_line": 30,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 30,
          "line": "class APIKeyNotFoundError(APIKeyError):"
        },
        {
          "lineno": 31,
          "line": "    \"\"\"Raised when an API key is not found\"\"\""
        },
        {
          "lineno": 32,
          "line": ""
        },
        {
          "lineno": 33,
          "line": "    pass"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 30,
          "end_line": 33,
          "label": "class APIKeyNotFoundError(APIKeyError):\n    \"\"\"Raised when an API key is not found\"\"\"\n\n    pass",
          "successors": []
        }
      ]
    },
    {
      "name": "APIKeyPermissionError",
      "type": "class",
      "start_line": 36,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 36,
          "line": "class APIKeyPermissionError(APIKeyError):"
        },
        {
          "lineno": 37,
          "line": "    \"\"\"Raised when there are permission issues with API key operations\"\"\""
        },
        {
          "lineno": 38,
          "line": ""
        },
        {
          "lineno": 39,
          "line": "    pass"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 36,
          "end_line": 39,
          "label": "class APIKeyPermissionError(APIKeyError):\n    \"\"\"Raised when there are permission issues with API key operations\"\"\"\n\n    pass",
          "successors": []
        }
      ]
    },
    {
      "name": "APIKeyValidationError",
      "type": "class",
      "start_line": 42,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 42,
          "line": "class APIKeyValidationError(APIKeyError):"
        },
        {
          "lineno": 43,
          "line": "    \"\"\"Raised when API key validation fails\"\"\""
        },
        {
          "lineno": 44,
          "line": ""
        },
        {
          "lineno": 45,
          "line": "    pass"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 42,
          "end_line": 42,
          "label": "class APIKeyValidationError(APIKeyError):",
          "successors": [
            {
              "id": 2,
              "start_line": 43,
              "end_line": 43,
              "label": "    \"\"\"Raised when API key validation fails\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 45,
                  "end_line": 45,
                  "label": "    pass",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "APIKey",
      "type": "class",
      "start_line": 48,
      "end_line": 81,
      "functions": [
        {
          "name": "from_db",
          "type": "function",
          "start_line": 62,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 62,
              "line": "    def from_db(api_key: PrismaAPIKey):"
            },
            {
              "lineno": 63,
              "line": "        try:"
            },
            {
              "lineno": 64,
              "line": "            return APIKey("
            },
            {
              "lineno": 65,
              "line": "                id=api_key.id,"
            },
            {
              "lineno": 66,
              "line": "                name=api_key.name,"
            },
            {
              "lineno": 67,
              "line": "                prefix=api_key.prefix,"
            },
            {
              "lineno": 68,
              "line": "                postfix=api_key.postfix,"
            },
            {
              "lineno": 69,
              "line": "                key=api_key.key,"
            },
            {
              "lineno": 70,
              "line": "                status=APIKeyStatus(api_key.status),"
            },
            {
              "lineno": 71,
              "line": "                permissions=[APIKeyPermission(p) for p in api_key.permissions],"
            },
            {
              "lineno": 72,
              "line": "                created_at=api_key.createdAt,"
            },
            {
              "lineno": 73,
              "line": "                last_used_at=api_key.lastUsedAt,"
            },
            {
              "lineno": 74,
              "line": "                revoked_at=api_key.revokedAt,"
            },
            {
              "lineno": 75,
              "line": "                description=api_key.description,"
            },
            {
              "lineno": 76,
              "line": "                user_id=api_key.userId,"
            },
            {
              "lineno": 77,
              "line": "            )"
            },
            {
              "lineno": 78,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 79,
              "line": "            logger.error(f\"Error creating APIKey from db: {str(e)}\")"
            },
            {
              "lineno": 80,
              "line": "            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 62,
              "end_line": 63,
              "label": "    def from_db(api_key: PrismaAPIKey):\n        try:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 64,
                  "end_line": 77,
                  "label": "            return APIKey(\n                id=api_key.id,\n                name=api_key.name,\n                prefix=api_key.prefix,\n                postfix=api_key.postfix,\n                key=api_key.key,\n                status=APIKeyStatus(api_key.status),\n                permissions=[APIKeyPermission(p) for p in api_key.permissions],\n                created_at=api_key.createdAt,\n                last_used_at=api_key.lastUsedAt,\n                revoked_at=api_key.revokedAt,\n                description=api_key.description,\n                user_id=api_key.userId,\n            )",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 78,
                  "end_line": 80,
                  "label": "        except Exception as e:\n            logger.error(f\"Error creating APIKey from db: {str(e)}\")\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 48,
          "line": "class APIKey(BaseDbModel):"
        },
        {
          "lineno": 49,
          "line": "    name: str"
        },
        {
          "lineno": 50,
          "line": "    prefix: str"
        },
        {
          "lineno": 51,
          "line": "    key: str"
        },
        {
          "lineno": 52,
          "line": "    status: APIKeyStatus = APIKeyStatus.ACTIVE"
        },
        {
          "lineno": 53,
          "line": "    permissions: List[APIKeyPermission]"
        },
        {
          "lineno": 54,
          "line": "    postfix: str"
        },
        {
          "lineno": 55,
          "line": "    created_at: datetime"
        },
        {
          "lineno": 56,
          "line": "    last_used_at: Optional[datetime] = None"
        },
        {
          "lineno": 57,
          "line": "    revoked_at: Optional[datetime] = None"
        },
        {
          "lineno": 58,
          "line": "    description: Optional[str] = None"
        },
        {
          "lineno": 59,
          "line": "    user_id: str"
        },
        {
          "lineno": 60,
          "line": ""
        },
        {
          "lineno": 61,
          "line": "    @staticmethod"
        },
        {
          "lineno": 81,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 48,
          "end_line": 59,
          "label": "class APIKey(BaseDbModel):\n    name: str\n    prefix: str\n    key: str\n    status: APIKeyStatus = APIKeyStatus.ACTIVE\n    permissions: List[APIKeyPermission]\n    postfix: str\n    created_at: datetime\n    last_used_at: Optional[datetime] = None\n    revoked_at: Optional[datetime] = None\n    description: Optional[str] = None\n    user_id: str",
          "successors": [
            {
              "id": 2,
              "start_line": 60,
              "end_line": 60,
              "label": "",
              "successors": [
                {
                  "id": 3,
                  "start_line": 61,
                  "end_line": 61,
                  "label": "@staticmethod",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 81,
                      "end_line": 81,
                      "label": "",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "APIKeyWithoutHash",
      "type": "class",
      "start_line": 83,
      "end_line": 115,
      "functions": [
        {
          "name": "from_db",
          "type": "function",
          "start_line": 97,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 97,
              "line": "    def from_db(api_key: PrismaAPIKey):"
            },
            {
              "lineno": 98,
              "line": "        try:"
            },
            {
              "lineno": 99,
              "line": "            return APIKeyWithoutHash("
            },
            {
              "lineno": 100,
              "line": "                id=api_key.id,"
            },
            {
              "lineno": 101,
              "line": "                name=api_key.name,"
            },
            {
              "lineno": 102,
              "line": "                prefix=api_key.prefix,"
            },
            {
              "lineno": 103,
              "line": "                postfix=api_key.postfix,"
            },
            {
              "lineno": 104,
              "line": "                status=APIKeyStatus(api_key.status),"
            },
            {
              "lineno": 105,
              "line": "                permissions=[APIKeyPermission(p) for p in api_key.permissions],"
            },
            {
              "lineno": 106,
              "line": "                created_at=api_key.createdAt,"
            },
            {
              "lineno": 107,
              "line": "                last_used_at=api_key.lastUsedAt,"
            },
            {
              "lineno": 108,
              "line": "                revoked_at=api_key.revokedAt,"
            },
            {
              "lineno": 109,
              "line": "                description=api_key.description,"
            },
            {
              "lineno": 110,
              "line": "                user_id=api_key.userId,"
            },
            {
              "lineno": 111,
              "line": "            )"
            },
            {
              "lineno": 112,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 113,
              "line": "            logger.error(f\"Error creating APIKeyWithoutHash from db: {str(e)}\")"
            },
            {
              "lineno": 114,
              "line": "            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 97,
              "end_line": 97,
              "label": "    def from_db(api_key: PrismaAPIKey):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 98,
                  "end_line": 111,
                  "label": "        try:\n            return APIKeyWithoutHash(\n                id=api_key.id,\n                name=api_key.name,\n                prefix=api_key.prefix,\n                postfix=api_key.postfix,\n                status=APIKeyStatus(api_key.status),\n                permissions=[APIKeyPermission(p) for p in api_key.permissions],\n                created_at=api_key.createdAt,\n                last_used_at=api_key.lastUsedAt,\n                revoked_at=api_key.revokedAt,\n                description=api_key.description,\n                user_id=api_key.userId,\n            )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 112,
                      "end_line": 114,
                      "label": "        except Exception as e:\n            logger.error(f\"Error creating APIKeyWithoutHash from db: {str(e)}\")\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 83,
          "line": "class APIKeyWithoutHash(BaseModel):"
        },
        {
          "lineno": 84,
          "line": "    id: str"
        },
        {
          "lineno": 85,
          "line": "    name: str"
        },
        {
          "lineno": 86,
          "line": "    prefix: str"
        },
        {
          "lineno": 87,
          "line": "    postfix: str"
        },
        {
          "lineno": 88,
          "line": "    status: APIKeyStatus"
        },
        {
          "lineno": 89,
          "line": "    permissions: List[APIKeyPermission]"
        },
        {
          "lineno": 90,
          "line": "    created_at: datetime"
        },
        {
          "lineno": 91,
          "line": "    last_used_at: Optional[datetime]"
        },
        {
          "lineno": 92,
          "line": "    revoked_at: Optional[datetime]"
        },
        {
          "lineno": 93,
          "line": "    description: Optional[str]"
        },
        {
          "lineno": 94,
          "line": "    user_id: str"
        },
        {
          "lineno": 95,
          "line": ""
        },
        {
          "lineno": 96,
          "line": "    @staticmethod"
        },
        {
          "lineno": 115,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 83,
          "end_line": 94,
          "label": "class APIKeyWithoutHash(BaseModel):\n    id: str\n    name: str\n    prefix: str\n    postfix: str\n    status: APIKeyStatus\n    permissions: List[APIKeyPermission]\n    created_at: datetime\n    last_used_at: Optional[datetime]\n    revoked_at: Optional[datetime]\n    description: Optional[str]\n    user_id: str",
          "successors": [
            {
              "id": 2,
              "start_line": 96,
              "end_line": 96,
              "label": "@staticmethod",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "import uuid"
    },
    {
      "lineno": 3,
      "line": "from datetime import datetime, timezone"
    },
    {
      "lineno": 4,
      "line": "from typing import List, Optional"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from autogpt_libs.api_key.key_manager import APIKeyManager"
    },
    {
      "lineno": 7,
      "line": "from prisma.enums import APIKeyPermission, APIKeyStatus"
    },
    {
      "lineno": 8,
      "line": "from prisma.errors import PrismaError"
    },
    {
      "lineno": 9,
      "line": "from prisma.models import APIKey as PrismaAPIKey"
    },
    {
      "lineno": 10,
      "line": "from prisma.types import ("
    },
    {
      "lineno": 11,
      "line": "    APIKeyCreateInput,"
    },
    {
      "lineno": 12,
      "line": "    APIKeyUpdateInput,"
    },
    {
      "lineno": 13,
      "line": "    APIKeyWhereInput,"
    },
    {
      "lineno": 14,
      "line": "    APIKeyWhereUniqueInput,"
    },
    {
      "lineno": 15,
      "line": ")"
    },
    {
      "lineno": 16,
      "line": "from pydantic import BaseModel"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": "from backend.data.db import BaseDbModel"
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 22,
      "line": ""
    },
    {
      "lineno": 23,
      "line": "# Some basic exceptions"
    },
    {
      "lineno": 28,
      "line": ""
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 47,
      "line": ""
    },
    {
      "lineno": 82,
      "line": ""
    },
    {
      "lineno": 116,
      "line": ""
    },
    {
      "lineno": 153,
      "line": ""
    },
    {
      "lineno": 184,
      "line": ""
    },
    {
      "lineno": 217,
      "line": ""
    },
    {
      "lineno": 265,
      "line": ""
    },
    {
      "lineno": 273,
      "line": ""
    },
    {
      "lineno": 291,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 20,
      "label": "import logging\nimport uuid\nfrom datetime import datetime, timezone\nfrom typing import List, Optional\n\nfrom autogpt_libs.api_key.key_manager import APIKeyManager\nfrom prisma.enums import APIKeyPermission, APIKeyStatus\nfrom prisma.errors import PrismaError\nfrom prisma.models import APIKey as PrismaAPIKey\nfrom prisma.types import (\n    APIKeyCreateInput,\n    APIKeyUpdateInput,\n    APIKeyWhereInput,\n    APIKeyWhereUniqueInput,\n)\nfrom pydantic import BaseModel\n\nfrom backend.data.db import BaseDbModel\n\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ]
}