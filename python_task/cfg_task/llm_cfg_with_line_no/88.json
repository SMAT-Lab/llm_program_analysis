{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 41,
  "functions": [
    {
      "name": "binary_count_setbits",
      "type": "function",
      "start_line": 1,
      "end_line": 35,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 1,
          "line": "def binary_count_setbits(a: int) -> int:"
        },
        {
          "lineno": 2,
          "line": "    \"\"\""
        },
        {
          "lineno": 3,
          "line": "    Take in 1 integer, return a number that is"
        },
        {
          "lineno": 4,
          "line": "    the number of 1's in binary representation of that number."
        },
        {
          "lineno": 5,
          "line": ""
        },
        {
          "lineno": 6,
          "line": "    >>> binary_count_setbits(25)"
        },
        {
          "lineno": 7,
          "line": "    3"
        },
        {
          "lineno": 8,
          "line": "    >>> binary_count_setbits(36)"
        },
        {
          "lineno": 9,
          "line": "    2"
        },
        {
          "lineno": 10,
          "line": "    >>> binary_count_setbits(16)"
        },
        {
          "lineno": 11,
          "line": "    1"
        },
        {
          "lineno": 12,
          "line": "    >>> binary_count_setbits(58)"
        },
        {
          "lineno": 13,
          "line": "    4"
        },
        {
          "lineno": 14,
          "line": "    >>> binary_count_setbits(4294967295)"
        },
        {
          "lineno": 15,
          "line": "    32"
        },
        {
          "lineno": 16,
          "line": "    >>> binary_count_setbits(0)"
        },
        {
          "lineno": 17,
          "line": "    0"
        },
        {
          "lineno": 18,
          "line": "    >>> binary_count_setbits(-10)"
        },
        {
          "lineno": 19,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 20,
          "line": "        ..."
        },
        {
          "lineno": 21,
          "line": "    ValueError: Input value must be a positive integer"
        },
        {
          "lineno": 22,
          "line": "    >>> binary_count_setbits(0.8)"
        },
        {
          "lineno": 23,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 24,
          "line": "        ..."
        },
        {
          "lineno": 25,
          "line": "    TypeError: Input value must be a 'int' type"
        },
        {
          "lineno": 26,
          "line": "    >>> binary_count_setbits(\"0\")"
        },
        {
          "lineno": 27,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 28,
          "line": "        ..."
        },
        {
          "lineno": 29,
          "line": "    TypeError: '<' not supported between instances of 'str' and 'int'"
        },
        {
          "lineno": 30,
          "line": "    \"\"\""
        },
        {
          "lineno": 31,
          "line": "    if a < 0:"
        },
        {
          "lineno": 32,
          "line": "        raise ValueError(\"Input value must be a positive integer\")"
        },
        {
          "lineno": 33,
          "line": "    elif isinstance(a, float):"
        },
        {
          "lineno": 34,
          "line": "        raise TypeError(\"Input value must be a 'int' type\")"
        },
        {
          "lineno": 35,
          "line": "    return bin(a).count(\"1\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def binary_count_setbits(a: int) -> int:",
          "successors": [
            {
              "id": 2,
              "start_line": 31,
              "end_line": 31,
              "label": "if a < 0:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 32,
                  "end_line": 32,
                  "label": "raise ValueError(\"Input value must be a positive integer\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 33,
                  "end_line": 33,
                  "label": "elif isinstance(a, float):",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 34,
                      "end_line": 34,
                      "label": "raise TypeError(\"Input value must be a 'int' type\")",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 35,
                      "end_line": 35,
                      "label": "return bin(a).count(\"1\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "start_line": 35,
                  "end_line": 35,
                  "label": "return bin(a).count(\"1\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 36,
      "line": ""
    },
    {
      "lineno": 37,
      "line": ""
    },
    {
      "lineno": 38,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 39,
      "line": "    import doctest"
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 41,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 38,
      "end_line": 38,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        {
          "id": 2,
          "start_line": 39,
          "end_line": 39,
          "label": "    import doctest",
          "successors": [
            {
              "id": 3,
              "start_line": 41,
              "end_line": 41,
              "label": "    doctest.testmod()",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}