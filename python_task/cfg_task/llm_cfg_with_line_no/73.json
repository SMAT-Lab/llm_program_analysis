{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 94,
  "functions": [
    {
      "name": "generate_agent_image",
      "type": "function",
      "start_line": 24,
      "end_line": 94,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 24,
          "line": "async def generate_agent_image(agent: Graph) -> io.BytesIO:"
        },
        {
          "lineno": 25,
          "line": "    \"\"\""
        },
        {
          "lineno": 26,
          "line": "    Generate an image for an agent using Flux model via Replicate API."
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 28,
          "line": "    Args:"
        },
        {
          "lineno": 29,
          "line": "        agent (Graph): The agent to generate an image for"
        },
        {
          "lineno": 30,
          "line": ""
        },
        {
          "lineno": 31,
          "line": "    Returns:"
        },
        {
          "lineno": 32,
          "line": "        io.BytesIO: The generated image as bytes"
        },
        {
          "lineno": 33,
          "line": "    \"\"\""
        },
        {
          "lineno": 34,
          "line": "    try:"
        },
        {
          "lineno": 35,
          "line": "        settings = Settings()"
        },
        {
          "lineno": 36,
          "line": ""
        },
        {
          "lineno": 37,
          "line": "        if not settings.secrets.replicate_api_key:"
        },
        {
          "lineno": 38,
          "line": "            raise ValueError(\"Missing Replicate API key in settings\")"
        },
        {
          "lineno": 39,
          "line": ""
        },
        {
          "lineno": 40,
          "line": "        # Construct prompt from agent details"
        },
        {
          "lineno": 41,
          "line": "        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\""
        },
        {
          "lineno": 42,
          "line": ""
        },
        {
          "lineno": 43,
          "line": "        # Set up Replicate client"
        },
        {
          "lineno": 44,
          "line": "        client = replicate.Client(api_token=settings.secrets.replicate_api_key)"
        },
        {
          "lineno": 45,
          "line": ""
        },
        {
          "lineno": 46,
          "line": "        # Model parameters"
        },
        {
          "lineno": 47,
          "line": "        input_data = {"
        },
        {
          "lineno": 48,
          "line": "            \"prompt\": prompt,"
        },
        {
          "lineno": 49,
          "line": "            \"width\": 1024,"
        },
        {
          "lineno": 50,
          "line": "            \"height\": 768,"
        },
        {
          "lineno": 51,
          "line": "            \"aspect_ratio\": \"4:3\","
        },
        {
          "lineno": 52,
          "line": "            \"output_format\": \"jpg\","
        },
        {
          "lineno": 53,
          "line": "            \"output_quality\": 90,"
        },
        {
          "lineno": 54,
          "line": "            \"num_inference_steps\": 30,"
        },
        {
          "lineno": 55,
          "line": "            \"guidance\": 3.5,"
        },
        {
          "lineno": 56,
          "line": "            \"negative_prompt\": \"blurry, low quality, distorted, deformed\","
        },
        {
          "lineno": 57,
          "line": "            \"disable_safety_checker\": True,"
        },
        {
          "lineno": 58,
          "line": "        }"
        },
        {
          "lineno": 59,
          "line": ""
        },
        {
          "lineno": 60,
          "line": "        try:"
        },
        {
          "lineno": 61,
          "line": "            # Run model"
        },
        {
          "lineno": 62,
          "line": "            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)"
        },
        {
          "lineno": 63,
          "line": ""
        },
        {
          "lineno": 64,
          "line": "            # Depending on the model output, extract the image URL or bytes"
        },
        {
          "lineno": 65,
          "line": "            # If the output is a list of FileOutput or URLs"
        },
        {
          "lineno": 66,
          "line": "            if isinstance(output, list) and output:"
        },
        {
          "lineno": 67,
          "line": "                if isinstance(output[0], FileOutput):"
        },
        {
          "lineno": 68,
          "line": "                    image_bytes = output[0].read()"
        },
        {
          "lineno": 69,
          "line": "                else:"
        },
        {
          "lineno": 70,
          "line": "                    # If it's a URL string, fetch the image bytes"
        },
        {
          "lineno": 71,
          "line": "                    result_url = output[0]"
        },
        {
          "lineno": 72,
          "line": "                    response = requests.get(result_url)"
        },
        {
          "lineno": 73,
          "line": "                    response.raise_for_status()"
        },
        {
          "lineno": 74,
          "line": "                    image_bytes = response.content"
        },
        {
          "lineno": 75,
          "line": "            elif isinstance(output, FileOutput):"
        },
        {
          "lineno": 76,
          "line": "                image_bytes = output.read()"
        },
        {
          "lineno": 77,
          "line": "            elif isinstance(output, str):"
        },
        {
          "lineno": 78,
          "line": "                # Output is a URL"
        },
        {
          "lineno": 79,
          "line": "                response = requests.get(output)"
        },
        {
          "lineno": 80,
          "line": "                response.raise_for_status()"
        },
        {
          "lineno": 81,
          "line": "                image_bytes = response.content"
        },
        {
          "lineno": 82,
          "line": "            else:"
        },
        {
          "lineno": 83,
          "line": "                raise RuntimeError(\"Unexpected output format from the model.\")"
        },
        {
          "lineno": 84,
          "line": ""
        },
        {
          "lineno": 85,
          "line": "            return io.BytesIO(image_bytes)"
        },
        {
          "lineno": 86,
          "line": ""
        },
        {
          "lineno": 87,
          "line": "        except replicate.exceptions.ReplicateError as e:"
        },
        {
          "lineno": 88,
          "line": "            if e.status == 401:"
        },
        {
          "lineno": 89,
          "line": "                raise RuntimeError(\"Invalid Replicate API token\") from e"
        },
        {
          "lineno": 90,
          "line": "            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e"
        },
        {
          "lineno": 91,
          "line": ""
        },
        {
          "lineno": 92,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 93,
          "line": "        logger.exception(\"Failed to generate agent image\")"
        },
        {
          "lineno": 94,
          "line": "        raise RuntimeError(f\"Image generation failed: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 24,
          "end_line": 33,
          "label": "async def generate_agent_image(agent: Graph) -> io.BytesIO:\n    \"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 34,
              "end_line": 35,
              "label": "try:\n        settings = Settings()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 37,
                  "end_line": 38,
                  "label": "if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 40,
                      "end_line": 41,
                      "label": "# Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 43,
                          "end_line": 44,
                          "label": "# Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 46,
                              "end_line": 58,
                              "label": "# Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 60,
                                  "end_line": 85,
                                  "label": "try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 87,
                                      "end_line": 90,
                                      "label": "except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 92,
                                          "end_line": 94,
                                          "label": "except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ImageSize",
      "type": "class",
      "start_line": 16,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "class ImageSize(str, Enum):"
        },
        {
          "lineno": 17,
          "line": "    LANDSCAPE = \"1024x768\""
        },
        {
          "lineno": 18,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 17,
          "label": "class ImageSize(str, Enum):\n    LANDSCAPE = \"1024x768\"",
          "successors": []
        }
      ]
    },
    {
      "name": "ImageStyle",
      "type": "class",
      "start_line": 20,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 20,
          "line": "class ImageStyle(str, Enum):"
        },
        {
          "lineno": 21,
          "line": "    DIGITAL_ART = \"digital art\""
        },
        {
          "lineno": 22,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 20,
          "end_line": 21,
          "label": "class ImageStyle(str, Enum):\n    DIGITAL_ART = \"digital art\"",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import io"
    },
    {
      "lineno": 2,
      "line": "import logging"
    },
    {
      "lineno": 3,
      "line": "from enum import Enum"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "import replicate"
    },
    {
      "lineno": 6,
      "line": "import replicate.exceptions"
    },
    {
      "lineno": 7,
      "line": "import requests"
    },
    {
      "lineno": 8,
      "line": "from replicate.helpers import FileOutput"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": "from backend.data.graph import Graph"
    },
    {
      "lineno": 11,
      "line": "from backend.util.settings import Settings"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 23,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "import io\nimport logging\nfrom enum import Enum",
      "successors": [
        {
          "id": 2,
          "start_line": 5,
          "end_line": 8,
          "label": "import replicate\nimport replicate.exceptions\nimport requests\nfrom replicate.helpers import FileOutput",
          "successors": [
            {
              "id": 3,
              "start_line": 10,
              "end_line": 11,
              "label": "from backend.data.graph import Graph\nfrom backend.util.settings import Settings",
              "successors": [
                {
                  "id": 4,
                  "start_line": 13,
                  "end_line": 13,
                  "label": "logger = logging.getLogger(__name__)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}