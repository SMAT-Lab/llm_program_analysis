{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 95,
  "functions": [
    {
      "name": "minimax",
      "type": "function",
      "start_line": 16,
      "end_line": 78,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "def minimax("
        },
        {
          "lineno": 17,
          "line": "    depth: int, node_index: int, is_max: bool, scores: list[int], height: float"
        },
        {
          "lineno": 18,
          "line": ") -> int:"
        },
        {
          "lineno": 19,
          "line": "    \"\"\""
        },
        {
          "lineno": 20,
          "line": "    This function implements the minimax algorithm, which helps achieve the optimal"
        },
        {
          "lineno": 21,
          "line": "    score for a player in a two-player game by checking all possible moves."
        },
        {
          "lineno": 22,
          "line": "    If the player is the maximizer, then the score is maximized."
        },
        {
          "lineno": 23,
          "line": "    If the player is the minimizer, then the score is minimized."
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 25,
          "line": "    Parameters:"
        },
        {
          "lineno": 26,
          "line": "    - depth: Current depth in the game tree."
        },
        {
          "lineno": 27,
          "line": "    - node_index: Index of the current node in the scores list."
        },
        {
          "lineno": 28,
          "line": "    - is_max: A boolean indicating whether the current move"
        },
        {
          "lineno": 29,
          "line": "              is for the maximizer (True) or minimizer (False)."
        },
        {
          "lineno": 30,
          "line": "    - scores: A list containing the scores of the leaves of the game tree."
        },
        {
          "lineno": 31,
          "line": "    - height: The maximum height of the game tree."
        },
        {
          "lineno": 32,
          "line": ""
        },
        {
          "lineno": 33,
          "line": "    Returns:"
        },
        {
          "lineno": 34,
          "line": "    - An integer representing the optimal score for the current player."
        },
        {
          "lineno": 35,
          "line": ""
        },
        {
          "lineno": 36,
          "line": "    >>> import math"
        },
        {
          "lineno": 37,
          "line": "    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]"
        },
        {
          "lineno": 38,
          "line": "    >>> height = math.log(len(scores), 2)"
        },
        {
          "lineno": 39,
          "line": "    >>> minimax(0, 0, True, scores, height)"
        },
        {
          "lineno": 40,
          "line": "    65"
        },
        {
          "lineno": 41,
          "line": "    >>> minimax(-1, 0, True, scores, height)"
        },
        {
          "lineno": 42,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 43,
          "line": "        ..."
        },
        {
          "lineno": 44,
          "line": "    ValueError: Depth cannot be less than 0"
        },
        {
          "lineno": 45,
          "line": "    >>> minimax(0, 0, True, [], 2)"
        },
        {
          "lineno": 46,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 47,
          "line": "        ..."
        },
        {
          "lineno": 48,
          "line": "    ValueError: Scores cannot be empty"
        },
        {
          "lineno": 49,
          "line": "    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]"
        },
        {
          "lineno": 50,
          "line": "    >>> height = math.log(len(scores), 2)"
        },
        {
          "lineno": 51,
          "line": "    >>> minimax(0, 0, True, scores, height)"
        },
        {
          "lineno": 52,
          "line": "    12"
        },
        {
          "lineno": 53,
          "line": "    \"\"\""
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 55,
          "line": "    if depth < 0:"
        },
        {
          "lineno": 56,
          "line": "        raise ValueError(\"Depth cannot be less than 0\")"
        },
        {
          "lineno": 57,
          "line": "    if len(scores) == 0:"
        },
        {
          "lineno": 58,
          "line": "        raise ValueError(\"Scores cannot be empty\")"
        },
        {
          "lineno": 59,
          "line": ""
        },
        {
          "lineno": 60,
          "line": "    # Base case: If the current depth equals the height of the tree,"
        },
        {
          "lineno": 61,
          "line": "    # return the score of the current node."
        },
        {
          "lineno": 62,
          "line": "    if depth == height:"
        },
        {
          "lineno": 63,
          "line": "        return scores[node_index]"
        },
        {
          "lineno": 64,
          "line": ""
        },
        {
          "lineno": 65,
          "line": "    # If it's the maximizer's turn, choose the maximum score"
        },
        {
          "lineno": 66,
          "line": "    # between the two possible moves."
        },
        {
          "lineno": 67,
          "line": "    if is_max:"
        },
        {
          "lineno": 68,
          "line": "        return max("
        },
        {
          "lineno": 69,
          "line": "            minimax(depth + 1, node_index * 2, False, scores, height),"
        },
        {
          "lineno": 70,
          "line": "            minimax(depth + 1, node_index * 2 + 1, False, scores, height),"
        },
        {
          "lineno": 71,
          "line": "        )"
        },
        {
          "lineno": 72,
          "line": ""
        },
        {
          "lineno": 73,
          "line": "    # If it's the minimizer's turn, choose the minimum score"
        },
        {
          "lineno": 74,
          "line": "    # between the two possible moves."
        },
        {
          "lineno": 75,
          "line": "    return min("
        },
        {
          "lineno": 76,
          "line": "        minimax(depth + 1, node_index * 2, True, scores, height),"
        },
        {
          "lineno": 77,
          "line": "        minimax(depth + 1, node_index * 2 + 1, True, scores, height),"
        },
        {
          "lineno": 78,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 53,
          "label": "def minimax(\n    depth: int, node_index: int, is_max: bool, scores: list[int], height: float\n) -> int:\n    \"\"\"\n    This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 55,
              "end_line": 56,
              "label": "if depth < 0:\n    raise ValueError(\"Depth cannot be less than 0\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 57,
                  "end_line": 58,
                  "label": "if len(scores) == 0:\n    raise ValueError(\"Scores cannot be empty\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 60,
                      "end_line": 63,
                      "label": "if depth == height:\n    return scores[node_index]",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 67,
                          "end_line": 71,
                          "label": "if is_max:\n    return max(\n        minimax(depth + 1, node_index * 2, False, scores, height),\n        minimax(depth + 1, node_index * 2 + 1, False, scores, height),\n    )",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 75,
                              "end_line": 78,
                              "label": "return min(\n    minimax(depth + 1, node_index * 2, True, scores, height),\n    minimax(depth + 1, node_index * 2 + 1, True, scores, height),\n)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 81,
      "end_line": 88,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 81,
          "line": "def main() -> None:"
        },
        {
          "lineno": 82,
          "line": "    # Sample scores and height calculation"
        },
        {
          "lineno": 83,
          "line": "    scores = [90, 23, 6, 33, 21, 65, 123, 34423]"
        },
        {
          "lineno": 84,
          "line": "    height = math.log(len(scores), 2)"
        },
        {
          "lineno": 85,
          "line": ""
        },
        {
          "lineno": 86,
          "line": "    # Calculate and print the optimal value using the minimax algorithm"
        },
        {
          "lineno": 87,
          "line": "    print(\"Optimal value : \", end=\"\")"
        },
        {
          "lineno": 88,
          "line": "    print(minimax(0, 0, True, scores, height))"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 81,
          "end_line": 88,
          "label": "def main() -> None:\n    # Sample scores and height calculation\n    scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    height = math.log(len(scores), 2)\n\n    # Calculate and print the optimal value using the minimax algorithm\n    print(\"Optimal value : \", end=\"\")\n    print(minimax(0, 0, True, scores, height))",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "Minimax helps to achieve maximum score in a game by checking all possible moves"
    },
    {
      "lineno": 3,
      "line": "depth is current depth in game tree."
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "nodeIndex is index of current node in scores[]."
    },
    {
      "lineno": 6,
      "line": "if move is of maximizer return true else false"
    },
    {
      "lineno": 7,
      "line": "leaves of game tree is stored in scores[]"
    },
    {
      "lineno": 8,
      "line": "height is maximum height of Game tree"
    },
    {
      "lineno": 9,
      "line": "\"\"\""
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": "from __future__ import annotations"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "import math"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 79,
      "line": ""
    },
    {
      "lineno": 80,
      "line": ""
    },
    {
      "lineno": 89,
      "line": ""
    },
    {
      "lineno": 90,
      "line": ""
    },
    {
      "lineno": 91,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 92,
      "line": "    import doctest"
    },
    {
      "lineno": 93,
      "line": ""
    },
    {
      "lineno": 94,
      "line": "    doctest.testmod()"
    },
    {
      "lineno": 95,
      "line": "    main()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 9,
      "label": "\"\"\"\nMinimax helps to achieve maximum score in a game by checking all possible moves\ndepth is current depth in game tree.\n\nnodeIndex is index of current node in scores[].\nif move is of maximizer return true else false\nleaves of game tree is stored in scores[]\nheight is maximum height of Game tree\n\"\"\"",
      "successors": [
        {
          "id": 2,
          "start_line": 11,
          "end_line": 11,
          "label": "from __future__ import annotations",
          "successors": [
            {
              "id": 3,
              "start_line": 13,
              "end_line": 13,
              "label": "import math",
              "successors": [
                {
                  "id": 4,
                  "start_line": 91,
                  "end_line": 91,
                  "label": "if __name__ == \"__main__\":",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 92,
                      "end_line": 94,
                      "label": "import doctest\n\ndoctest.testmod()",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 95,
                      "end_line": 95,
                      "label": "main()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}