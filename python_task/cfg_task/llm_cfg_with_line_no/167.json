{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [],
  "classes": [
    {
      "name": "JSONCryptor",
      "type": "class",
      "start_line": 11,
      "end_line": 34,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 12,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 12,
              "line": "    def __init__(self, key: Optional[str] = None):"
            },
            {
              "lineno": 13,
              "line": "        # Use provided key or get from environment"
            },
            {
              "lineno": 14,
              "line": "        self.key = key or ENCRYPTION_KEY"
            },
            {
              "lineno": 15,
              "line": "        if not self.key:"
            },
            {
              "lineno": 16,
              "line": "            raise ValueError("
            },
            {
              "lineno": 17,
              "line": "                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\""
            },
            {
              "lineno": 18,
              "line": "            )"
            },
            {
              "lineno": 19,
              "line": "        self.fernet = Fernet("
            },
            {
              "lineno": 20,
              "line": "            self.key.encode() if isinstance(self.key, str) else self.key"
            },
            {
              "lineno": 21,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 12,
              "end_line": 14,
              "label": "    def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n",
              "successors": [
                {
                  "id": 2,
                  "start_line": 15,
                  "end_line": 17,
                  "label": "        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 19,
                      "end_line": 21,
                      "label": "        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )\n",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "encrypt",
          "type": "function",
          "start_line": 23,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 23,
              "line": "    def encrypt(self, data: dict) -> str:"
            },
            {
              "lineno": 24,
              "line": "        \"\"\"Encrypt dictionary data to string\"\"\""
            },
            {
              "lineno": 25,
              "line": "        json_str = json.dumps(data)"
            },
            {
              "lineno": 26,
              "line": "        encrypted = self.fernet.encrypt(json_str.encode())"
            },
            {
              "lineno": 27,
              "line": "        return encrypted.decode()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 23,
              "end_line": 27,
              "label": [
                "    def encrypt(self, data: dict) -> str:",
                "        \"\"\"Encrypt dictionary data to string\"\"\"",
                "        json_str = json.dumps(data)",
                "        encrypted = self.fernet.encrypt(json_str.encode())",
                "        return encrypted.decode()"
              ],
              "successors": []
            }
          ]
        },
        {
          "name": "decrypt",
          "type": "function",
          "start_line": 29,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 29,
              "line": "    def decrypt(self, encrypted_str: str) -> dict:"
            },
            {
              "lineno": 30,
              "line": "        \"\"\"Decrypt string to dictionary\"\"\""
            },
            {
              "lineno": 31,
              "line": "        if not encrypted_str:"
            },
            {
              "lineno": 32,
              "line": "            return {}"
            },
            {
              "lineno": 33,
              "line": "        decrypted = self.fernet.decrypt(encrypted_str.encode())"
            },
            {
              "lineno": 34,
              "line": "        return json.loads(decrypted.decode())"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 29,
              "end_line": 30,
              "label": "    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 31,
                  "end_line": 32,
                  "label": "        if not encrypted_str:\n            return {}",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 33,
                      "end_line": 34,
                      "label": "        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 33,
                  "end_line": 34,
                  "label": "        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "class JSONCryptor:"
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 28,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 11,
          "end_line": 11,
          "label": "class JSONCryptor:",
          "successors": [
            {
              "id": 2,
              "start_line": 22,
              "end_line": 22,
              "label": "",
              "successors": [
                {
                  "id": 3,
                  "start_line": 28,
                  "end_line": 28,
                  "label": "",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import json"
    },
    {
      "lineno": 2,
      "line": "from typing import Optional"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from cryptography.fernet import Fernet"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from backend.util.settings import Settings"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "ENCRYPTION_KEY = Settings().secrets.encryption_key"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "import json",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 2,
          "label": "from typing import Optional",
          "successors": [
            {
              "id": 3,
              "start_line": 3,
              "end_line": 3,
              "label": "",
              "successors": [
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "from cryptography.fernet import Fernet",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "from backend.util.settings import Settings",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 7,
                              "end_line": 7,
                              "label": "",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 8,
                                  "end_line": 8,
                                  "label": "ENCRYPTION_KEY = Settings().secrets.encryption_key",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 9,
                                      "end_line": 10,
                                      "label": "\n",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}