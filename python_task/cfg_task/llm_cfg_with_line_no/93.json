{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 131,
  "functions": [
    {
      "name": "is_valid",
      "type": "function",
      "start_line": 4,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 4,
          "line": "def is_valid("
        },
        {
          "lineno": 5,
          "line": "    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool"
        },
        {
          "lineno": 6,
          "line": ") -> bool:"
        },
        {
          "lineno": 7,
          "line": "    \"\"\""
        },
        {
          "lineno": 8,
          "line": "    Check if a word can be placed at the given position."
        },
        {
          "lineno": 9,
          "line": ""
        },
        {
          "lineno": 10,
          "line": "    >>> puzzle = ["
        },
        {
          "lineno": 11,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 12,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 13,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 14,
          "line": "    ...     ['', '', '', '']"
        },
        {
          "lineno": 15,
          "line": "    ... ]"
        },
        {
          "lineno": 16,
          "line": "    >>> is_valid(puzzle, 'word', 0, 0, True)"
        },
        {
          "lineno": 17,
          "line": "    True"
        },
        {
          "lineno": 18,
          "line": "    >>> puzzle = ["
        },
        {
          "lineno": 19,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 20,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 21,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 22,
          "line": "    ...     ['', '', '', '']"
        },
        {
          "lineno": 23,
          "line": "    ... ]"
        },
        {
          "lineno": 24,
          "line": "    >>> is_valid(puzzle, 'word', 0, 0, False)"
        },
        {
          "lineno": 25,
          "line": "    True"
        },
        {
          "lineno": 26,
          "line": "    \"\"\""
        },
        {
          "lineno": 27,
          "line": "    for i in range(len(word)):"
        },
        {
          "lineno": 28,
          "line": "        if vertical:"
        },
        {
          "lineno": 29,
          "line": "            if row + i >= len(puzzle) or puzzle[row + i][col] != \"\":"
        },
        {
          "lineno": 30,
          "line": "                return False"
        },
        {
          "lineno": 31,
          "line": "        elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != \"\":"
        },
        {
          "lineno": 32,
          "line": "            return False"
        },
        {
          "lineno": 33,
          "line": "    return True"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 4,
          "end_line": 26,
          "label": "def is_valid(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> bool:\n    \"\"\"\n    Check if a word can be placed at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, True)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, False)\n    True\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 27,
              "end_line": 27,
              "label": "for i in range(len(word)):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 28,
                  "end_line": 30,
                  "label": "if vertical:\n    if row + i >= len(puzzle) or puzzle[row + i][col] != \"\":\n        return False",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 33,
                      "end_line": 33,
                      "label": "return True",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 31,
                  "end_line": 32,
                  "label": "elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != \"\":\n    return False",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 33,
                      "end_line": 33,
                      "label": "return True",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "place_word",
      "type": "function",
      "start_line": 36,
      "end_line": 56,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 36,
          "line": "def place_word("
        },
        {
          "lineno": 37,
          "line": "    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool"
        },
        {
          "lineno": 38,
          "line": ") -> None:"
        },
        {
          "lineno": 39,
          "line": "    \"\"\""
        },
        {
          "lineno": 40,
          "line": "    Place a word at the given position."
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 42,
          "line": "    >>> puzzle = ["
        },
        {
          "lineno": 43,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 44,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 45,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 46,
          "line": "    ...     ['', '', '', '']"
        },
        {
          "lineno": 47,
          "line": "    ... ]"
        },
        {
          "lineno": 48,
          "line": "    >>> place_word(puzzle, 'word', 0, 0, True)"
        },
        {
          "lineno": 49,
          "line": "    >>> puzzle"
        },
        {
          "lineno": 50,
          "line": "    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]"
        },
        {
          "lineno": 51,
          "line": "    \"\"\""
        },
        {
          "lineno": 52,
          "line": "    for i, char in enumerate(word):"
        },
        {
          "lineno": 53,
          "line": "        if vertical:"
        },
        {
          "lineno": 54,
          "line": "            puzzle[row + i][col] = char"
        },
        {
          "lineno": 55,
          "line": "        else:"
        },
        {
          "lineno": 56,
          "line": "            puzzle[row][col + i] = char"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 36,
          "end_line": 51,
          "label": "def place_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n    \"\"\"\n    Place a word at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> place_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 52,
              "end_line": 52,
              "label": "for i, char in enumerate(word):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 53,
                  "end_line": 54,
                  "label": "if vertical:\n    puzzle[row + i][col] = char",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 55,
                      "end_line": 56,
                      "label": "else:\n    puzzle[row][col + i] = char",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 52,
                          "end_line": 52,
                          "label": "",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "remove_word",
      "type": "function",
      "start_line": 59,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 59,
          "line": "def remove_word("
        },
        {
          "lineno": 60,
          "line": "    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool"
        },
        {
          "lineno": 61,
          "line": ") -> None:"
        },
        {
          "lineno": 62,
          "line": "    \"\"\""
        },
        {
          "lineno": 63,
          "line": "    Remove a word from the given position."
        },
        {
          "lineno": 64,
          "line": ""
        },
        {
          "lineno": 65,
          "line": "    >>> puzzle = ["
        },
        {
          "lineno": 66,
          "line": "    ...     ['w', '', '', ''],"
        },
        {
          "lineno": 67,
          "line": "    ...     ['o', '', '', ''],"
        },
        {
          "lineno": 68,
          "line": "    ...     ['r', '', '', ''],"
        },
        {
          "lineno": 69,
          "line": "    ...     ['d', '', '', '']"
        },
        {
          "lineno": 70,
          "line": "    ... ]"
        },
        {
          "lineno": 71,
          "line": "    >>> remove_word(puzzle, 'word', 0, 0, True)"
        },
        {
          "lineno": 72,
          "line": "    >>> puzzle"
        },
        {
          "lineno": 73,
          "line": "    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]"
        },
        {
          "lineno": 74,
          "line": "    \"\"\""
        },
        {
          "lineno": 75,
          "line": "    for i in range(len(word)):"
        },
        {
          "lineno": 76,
          "line": "        if vertical:"
        },
        {
          "lineno": 77,
          "line": "            puzzle[row + i][col] = \"\""
        },
        {
          "lineno": 78,
          "line": "        else:"
        },
        {
          "lineno": 79,
          "line": "            puzzle[row][col + i] = \"\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 59,
          "end_line": 74,
          "label": "def remove_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n    \"\"\"\n    Remove a word from the given position.\n\n    >>> puzzle = [\n    ...     ['w', '', '', ''],\n    ...     ['o', '', '', ''],\n    ...     ['r', '', '', ''],\n    ...     ['d', '', '', '']\n    ... ]\n    >>> remove_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 75,
              "end_line": 75,
              "label": "for i in range(len(word)):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 76,
                  "end_line": 79,
                  "label": "if vertical:\n    puzzle[row + i][col] = \"\"\nelse:\n    puzzle[row][col + i] = \"\"",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 75,
                      "end_line": 75,
                      "label": "for i in range(len(word)):",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "solve_crossword",
      "type": "function",
      "start_line": 82,
      "end_line": 119,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 82,
          "line": "def solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:"
        },
        {
          "lineno": 83,
          "line": "    \"\"\""
        },
        {
          "lineno": 84,
          "line": "    Solve the crossword puzzle using backtracking."
        },
        {
          "lineno": 85,
          "line": ""
        },
        {
          "lineno": 86,
          "line": "    >>> puzzle = ["
        },
        {
          "lineno": 87,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 88,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 89,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 90,
          "line": "    ...     ['', '', '', '']"
        },
        {
          "lineno": 91,
          "line": "    ... ]"
        },
        {
          "lineno": 92,
          "line": ""
        },
        {
          "lineno": 93,
          "line": "    >>> words = ['word', 'four', 'more', 'last']"
        },
        {
          "lineno": 94,
          "line": "    >>> solve_crossword(puzzle, words)"
        },
        {
          "lineno": 95,
          "line": "    True"
        },
        {
          "lineno": 96,
          "line": "    >>> puzzle = ["
        },
        {
          "lineno": 97,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 98,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 99,
          "line": "    ...     ['', '', '', ''],"
        },
        {
          "lineno": 100,
          "line": "    ...     ['', '', '', '']"
        },
        {
          "lineno": 101,
          "line": "    ... ]"
        },
        {
          "lineno": 102,
          "line": "    >>> words = ['word', 'four', 'more', 'paragraphs']"
        },
        {
          "lineno": 103,
          "line": "    >>> solve_crossword(puzzle, words)"
        },
        {
          "lineno": 104,
          "line": "    False"
        },
        {
          "lineno": 105,
          "line": "    \"\"\""
        },
        {
          "lineno": 106,
          "line": "    for row in range(len(puzzle)):"
        },
        {
          "lineno": 107,
          "line": "        for col in range(len(puzzle[0])):"
        },
        {
          "lineno": 108,
          "line": "            if puzzle[row][col] == \"\":"
        },
        {
          "lineno": 109,
          "line": "                for word in words:"
        },
        {
          "lineno": 110,
          "line": "                    for vertical in [True, False]:"
        },
        {
          "lineno": 111,
          "line": "                        if is_valid(puzzle, word, row, col, vertical):"
        },
        {
          "lineno": 112,
          "line": "                            place_word(puzzle, word, row, col, vertical)"
        },
        {
          "lineno": 113,
          "line": "                            words.remove(word)"
        },
        {
          "lineno": 114,
          "line": "                            if solve_crossword(puzzle, words):"
        },
        {
          "lineno": 115,
          "line": "                                return True"
        },
        {
          "lineno": 116,
          "line": "                            words.append(word)"
        },
        {
          "lineno": 117,
          "line": "                            remove_word(puzzle, word, row, col, vertical)"
        },
        {
          "lineno": 118,
          "line": "                return False"
        },
        {
          "lineno": 119,
          "line": "    return True"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 82,
          "end_line": 105,
          "label": "def solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:\n    \"\"\"\n    Solve the crossword puzzle using backtracking.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 106,
              "end_line": 106,
              "label": "for row in range(len(puzzle)):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 107,
                  "end_line": 107,
                  "label": "for col in range(len(puzzle[0])):",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 108,
                      "end_line": 108,
                      "label": "if puzzle[row][col] == \"\":",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 109,
                          "end_line": 109,
                          "label": "for word in words:",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 110,
                              "end_line": 110,
                              "label": "for vertical in [True, False]:",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 111,
                                  "end_line": 111,
                                  "label": "if is_valid(puzzle, word, row, col, vertical):",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 112,
                                      "end_line": 116,
                                      "label": "place_word(puzzle, word, row, col, vertical)\nwords.remove(word)\nif solve_crossword(puzzle, words):\n    return True\nwords.append(word)",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 117,
                                          "end_line": 117,
                                          "label": "remove_word(puzzle, word, row, col, vertical)",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 10,
                          "start_line": 118,
                          "end_line": 118,
                          "label": "return False",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 11,
              "start_line": 119,
              "end_line": 119,
              "label": "return True",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# https://www.geeksforgeeks.org/solve-crossword-puzzle/"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 57,
      "line": ""
    },
    {
      "lineno": 58,
      "line": ""
    },
    {
      "lineno": 80,
      "line": ""
    },
    {
      "lineno": 81,
      "line": ""
    },
    {
      "lineno": 120,
      "line": ""
    },
    {
      "lineno": 121,
      "line": ""
    },
    {
      "lineno": 122,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 123,
      "line": "    PUZZLE = [[\"\"] * 3 for _ in range(3)]"
    },
    {
      "lineno": 124,
      "line": "    WORDS = [\"cat\", \"dog\", \"car\"]"
    },
    {
      "lineno": 125,
      "line": ""
    },
    {
      "lineno": 126,
      "line": "    if solve_crossword(PUZZLE, WORDS):"
    },
    {
      "lineno": 127,
      "line": "        print(\"Solution found:\")"
    },
    {
      "lineno": 128,
      "line": "        for row in PUZZLE:"
    },
    {
      "lineno": 129,
      "line": "            print(\" \".join(row))"
    },
    {
      "lineno": 130,
      "line": "    else:"
    },
    {
      "lineno": 131,
      "line": "        print(\"No solution found:\")"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "# https://www.geeksforgeeks.org/solve-crossword-puzzle/",
      "successors": [
        {
          "id": 2,
          "start_line": 122,
          "end_line": 124,
          "label": "if __name__ == \"__main__\":\n    PUZZLE = [[\"\"] * 3 for _ in range(3)]\n    WORDS = [\"cat\", \"dog\", \"car\"]",
          "successors": [
            {
              "id": 3,
              "start_line": 126,
              "end_line": 129,
              "label": "if solve_crossword(PUZZLE, WORDS):\n    print(\"Solution found:\")\n    for row in PUZZLE:\n        print(\" \".join(row))",
              "successors": []
            },
            {
              "id": 4,
              "start_line": 130,
              "end_line": 131,
              "label": "else:\n    print(\"No solution found:\")",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}