{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 100,
  "functions": [],
  "classes": [
    {
      "name": "IIRFilter",
      "type": "class",
      "start_line": 4,
      "end_line": 100,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 26,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 26,
              "line": "    def __init__(self, order: int) -> None:"
            },
            {
              "lineno": 27,
              "line": "        self.order = order"
            },
            {
              "lineno": 28,
              "line": ""
            },
            {
              "lineno": 29,
              "line": "        # a_{0} ... a_{k}"
            },
            {
              "lineno": 30,
              "line": "        self.a_coeffs = [1.0] + [0.0] * order"
            },
            {
              "lineno": 31,
              "line": "        # b_{0} ... b_{k}"
            },
            {
              "lineno": 32,
              "line": "        self.b_coeffs = [1.0] + [0.0] * order"
            },
            {
              "lineno": 33,
              "line": ""
            },
            {
              "lineno": 34,
              "line": "        # x[n-1] ... x[n-k]"
            },
            {
              "lineno": 35,
              "line": "        self.input_history = [0.0] * self.order"
            },
            {
              "lineno": 36,
              "line": "        # y[n-1] ... y[n-k]"
            },
            {
              "lineno": 37,
              "line": "        self.output_history = [0.0] * self.order"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 26,
              "end_line": 37,
              "label": "    def __init__(self, order: int) -> None:\n        self.order = order\n\n        # a_{0} ... a_{k}\n        self.a_coeffs = [1.0] + [0.0] * order\n        # b_{0} ... b_{k}\n        self.b_coeffs = [1.0] + [0.0] * order\n\n        # x[n-1] ... x[n-k]\n        self.input_history = [0.0] * self.order\n        # y[n-1] ... y[n-k]\n        self.output_history = [0.0] * self.order",
              "successors": []
            }
          ]
        },
        {
          "name": "set_coefficients",
          "type": "function",
          "start_line": 39,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 39,
              "line": "    def set_coefficients(self, a_coeffs: list[float], b_coeffs: list[float]) -> None:"
            },
            {
              "lineno": 40,
              "line": "        \"\"\""
            },
            {
              "lineno": 41,
              "line": "        Set the coefficients for the IIR filter."
            },
            {
              "lineno": 42,
              "line": "        These should both be of size `order` + 1."
            },
            {
              "lineno": 43,
              "line": "        :math:`a_0` may be left out, and it will use 1.0 as default value."
            },
            {
              "lineno": 44,
              "line": ""
            },
            {
              "lineno": 45,
              "line": "        This method works well with scipy's filter design functions"
            },
            {
              "lineno": 46,
              "line": ""
            },
            {
              "lineno": 47,
              "line": "        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter"
            },
            {
              "lineno": 48,
              "line": "        >>> import scipy.signal"
            },
            {
              "lineno": 49,
              "line": "        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,"
            },
            {
              "lineno": 50,
              "line": "        ...                                          btype='lowpass',"
            },
            {
              "lineno": 51,
              "line": "        ...                                          fs=48000)"
            },
            {
              "lineno": 52,
              "line": "        >>> filt = IIRFilter(2)"
            },
            {
              "lineno": 53,
              "line": "        >>> filt.set_coefficients(a_coeffs, b_coeffs)"
            },
            {
              "lineno": 54,
              "line": "        \"\"\""
            },
            {
              "lineno": 55,
              "line": "        if len(a_coeffs) < self.order:"
            },
            {
              "lineno": 56,
              "line": "            a_coeffs = [1.0, *a_coeffs]"
            },
            {
              "lineno": 57,
              "line": ""
            },
            {
              "lineno": 58,
              "line": "        if len(a_coeffs) != self.order + 1:"
            },
            {
              "lineno": 59,
              "line": "            msg = ("
            },
            {
              "lineno": 60,
              "line": "                f\"Expected a_coeffs to have {self.order + 1} elements \""
            },
            {
              "lineno": 61,
              "line": "                f\"for {self.order}-order filter, got {len(a_coeffs)}\""
            },
            {
              "lineno": 62,
              "line": "            )"
            },
            {
              "lineno": 63,
              "line": "            raise ValueError(msg)"
            },
            {
              "lineno": 64,
              "line": ""
            },
            {
              "lineno": 65,
              "line": "        if len(b_coeffs) != self.order + 1:"
            },
            {
              "lineno": 66,
              "line": "            msg = ("
            },
            {
              "lineno": 67,
              "line": "                f\"Expected b_coeffs to have {self.order + 1} elements \""
            },
            {
              "lineno": 68,
              "line": "                f\"for {self.order}-order filter, got {len(a_coeffs)}\""
            },
            {
              "lineno": 69,
              "line": "            )"
            },
            {
              "lineno": 70,
              "line": "            raise ValueError(msg)"
            },
            {
              "lineno": 71,
              "line": ""
            },
            {
              "lineno": 72,
              "line": "        self.a_coeffs = a_coeffs"
            },
            {
              "lineno": 73,
              "line": "        self.b_coeffs = b_coeffs"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 39,
              "end_line": 54,
              "label": "def set_coefficients(self, a_coeffs: list[float], b_coeffs: list[float]) -> None:\n    \"\"\"\n    Set the coefficients for the IIR filter.\n    These should both be of size `order` + 1.\n    :math:`a_0` may be left out, and it will use 1.0 as default value.\n\n    This method works well with scipy's filter design functions\n\n    >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n    >>> import scipy.signal\n    >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n    ...                                          btype='lowpass',\n    ...                                          fs=48000)\n    >>> filt = IIRFilter(2)\n    >>> filt.set_coefficients(a_coeffs, b_coeffs)\n    \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 55,
                  "end_line": 56,
                  "label": "if len(a_coeffs) < self.order:\n    a_coeffs = [1.0, *a_coeffs]",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 58,
                      "end_line": 63,
                      "label": "if len(a_coeffs) != self.order + 1:\n    msg = (\n        f\"Expected a_coeffs to have {self.order + 1} elements \"\n        f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n    )\n    raise ValueError(msg)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 65,
                          "end_line": 70,
                          "label": "if len(b_coeffs) != self.order + 1:\n    msg = (\n        f\"Expected b_coeffs to have {self.order + 1} elements \"\n        f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n    )\n    raise ValueError(msg)",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 72,
                              "end_line": 73,
                              "label": "self.a_coeffs = a_coeffs\nself.b_coeffs = b_coeffs",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "process",
          "type": "function",
          "start_line": 75,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 75,
              "line": "    def process(self, sample: float) -> float:"
            },
            {
              "lineno": 76,
              "line": "        \"\"\""
            },
            {
              "lineno": 77,
              "line": "        Calculate :math:`y[n]`"
            },
            {
              "lineno": 78,
              "line": ""
            },
            {
              "lineno": 79,
              "line": "        >>> filt = IIRFilter(2)"
            },
            {
              "lineno": 80,
              "line": "        >>> filt.process(0)"
            },
            {
              "lineno": 81,
              "line": "        0.0"
            },
            {
              "lineno": 82,
              "line": "        \"\"\""
            },
            {
              "lineno": 83,
              "line": "        result = 0.0"
            },
            {
              "lineno": 84,
              "line": ""
            },
            {
              "lineno": 85,
              "line": "        # Start at index 1 and do index 0 at the end."
            },
            {
              "lineno": 86,
              "line": "        for i in range(1, self.order + 1):"
            },
            {
              "lineno": 87,
              "line": "            result += ("
            },
            {
              "lineno": 88,
              "line": "                self.b_coeffs[i] * self.input_history[i - 1]"
            },
            {
              "lineno": 89,
              "line": "                - self.a_coeffs[i] * self.output_history[i - 1]"
            },
            {
              "lineno": 90,
              "line": "            )"
            },
            {
              "lineno": 91,
              "line": ""
            },
            {
              "lineno": 92,
              "line": "        result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]"
            },
            {
              "lineno": 93,
              "line": ""
            },
            {
              "lineno": 94,
              "line": "        self.input_history[1:] = self.input_history[:-1]"
            },
            {
              "lineno": 95,
              "line": "        self.output_history[1:] = self.output_history[:-1]"
            },
            {
              "lineno": 96,
              "line": ""
            },
            {
              "lineno": 97,
              "line": "        self.input_history[0] = sample"
            },
            {
              "lineno": 98,
              "line": "        self.output_history[0] = result"
            },
            {
              "lineno": 99,
              "line": ""
            },
            {
              "lineno": 100,
              "line": "        return result"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 75,
              "end_line": 83,
              "label": "    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate :math:`y[n]`\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"\n        result = 0.0\n",
              "successors": [
                {
                  "id": 2,
                  "start_line": 86,
                  "end_line": 90,
                  "label": "        for i in range(1, self.order + 1):\n            result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )\n",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 92,
                      "end_line": 92,
                      "label": "        result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]\n",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 94,
                          "end_line": 95,
                          "label": "        self.input_history[1:] = self.input_history[:-1]\n        self.output_history[1:] = self.output_history[:-1]\n",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 97,
                              "end_line": 100,
                              "label": "        self.input_history[0] = sample\n        self.output_history[0] = result\n\n        return result\n",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 4,
          "line": "class IIRFilter:"
        },
        {
          "lineno": 5,
          "line": "    r\"\"\""
        },
        {
          "lineno": 6,
          "line": "    N-Order IIR filter"
        },
        {
          "lineno": 7,
          "line": "    Assumes working with float samples normalized on [-1, 1]"
        },
        {
          "lineno": 8,
          "line": ""
        },
        {
          "lineno": 9,
          "line": "    ---"
        },
        {
          "lineno": 10,
          "line": ""
        },
        {
          "lineno": 11,
          "line": "    Implementation details:"
        },
        {
          "lineno": 12,
          "line": "    Based on the 2nd-order function from"
        },
        {
          "lineno": 13,
          "line": "    https://en.wikipedia.org/wiki/Digital_biquad_filter,"
        },
        {
          "lineno": 14,
          "line": "    this generalized N-order function was made."
        },
        {
          "lineno": 15,
          "line": ""
        },
        {
          "lineno": 16,
          "line": "    Using the following transfer function"
        },
        {
          "lineno": 17,
          "line": "        .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}}"
        },
        {
          "lineno": 18,
          "line": "                  {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}}"
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 20,
          "line": "    we can rewrite this to"
        },
        {
          "lineno": 21,
          "line": "        .. math:: y[n]={\\frac{1}{a_{0}}}"
        },
        {
          "lineno": 22,
          "line": "                  \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)-"
        },
        {
          "lineno": 23,
          "line": "                  \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right)"
        },
        {
          "lineno": 24,
          "line": "    \"\"\""
        },
        {
          "lineno": 25,
          "line": ""
        },
        {
          "lineno": 38,
          "line": ""
        },
        {
          "lineno": 74,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 4,
          "end_line": 24,
          "label": "class IIRFilter:\n    r\"\"\"\n    N-Order IIR filter\n    Assumes working with float samples normalized on [-1, 1]\n\n    ---\n\n    Implementation details:\n    Based on the 2nd-order function from\n    https://en.wikipedia.org/wiki/Digital_biquad_filter,\n    this generalized N-order function was made.\n\n    Using the following transfer function\n        .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}}\n                  {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}}\n\n    we can rewrite this to\n        .. math:: y[n]={\\frac{1}{a_{0}}}\n                  \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)-\n                  \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right)\n    \"\"\"",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from __future__ import annotations"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "from __future__ import annotations",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 3,
          "label": "\n",
          "successors": []
        }
      ]
    }
  ]
}