{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 94,
  "functions": [
    {
      "name": "is_safe",
      "type": "function",
      "start_line": 16,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "def is_safe(board: list[list[int]], row: int, column: int) -> bool:"
        },
        {
          "lineno": 17,
          "line": "    \"\"\""
        },
        {
          "lineno": 18,
          "line": "    This function returns a boolean value True if it is safe to place a queen there"
        },
        {
          "lineno": 19,
          "line": "    considering the current state of the board."
        },
        {
          "lineno": 20,
          "line": ""
        },
        {
          "lineno": 21,
          "line": "    Parameters:"
        },
        {
          "lineno": 22,
          "line": "    board (2D matrix): The chessboard"
        },
        {
          "lineno": 23,
          "line": "    row, column: Coordinates of the cell on the board"
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 25,
          "line": "    Returns:"
        },
        {
          "lineno": 26,
          "line": "    Boolean Value"
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 28,
          "line": "    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)"
        },
        {
          "lineno": 29,
          "line": "    True"
        },
        {
          "lineno": 30,
          "line": "    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)"
        },
        {
          "lineno": 31,
          "line": "    False"
        },
        {
          "lineno": 32,
          "line": "    \"\"\""
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 34,
          "line": "    n = len(board)  # Size of the board"
        },
        {
          "lineno": 35,
          "line": ""
        },
        {
          "lineno": 36,
          "line": "    # Check if there is any queen in the same row, column,"
        },
        {
          "lineno": 37,
          "line": "    # left upper diagonal, and right upper diagonal"
        },
        {
          "lineno": 38,
          "line": "    return ("
        },
        {
          "lineno": 39,
          "line": "        all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))"
        },
        {
          "lineno": 40,
          "line": "        and all("
        },
        {
          "lineno": 41,
          "line": "            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))"
        },
        {
          "lineno": 42,
          "line": "        )"
        },
        {
          "lineno": 43,
          "line": "        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))"
        },
        {
          "lineno": 44,
          "line": "        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))"
        },
        {
          "lineno": 45,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 16,
          "label": "def is_safe(board: list[list[int]], row: int, column: int) -> bool:",
          "successors": [
            {
              "id": 2,
              "start_line": 17,
              "end_line": 31,
              "label": "\"\"\"\n    This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters:\n    board (2D matrix): The chessboard\n    row, column: Coordinates of the cell on the board\n\n    Returns:\n    Boolean Value\n\n    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    True\n    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    False\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 34,
                  "end_line": 34,
                  "label": "n = len(board)  # Size of the board",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 36,
                      "end_line": 45,
                      "label": "# Check if there is any queen in the same row, column,\n    # left upper diagonal, and right upper diagonal\n    return (\n        all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))\n    )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "solve",
      "type": "function",
      "start_line": 48,
      "end_line": 74,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 48,
          "line": "def solve(board: list[list[int]], row: int) -> bool:"
        },
        {
          "lineno": 49,
          "line": "    \"\"\""
        },
        {
          "lineno": 50,
          "line": "    This function creates a state space tree and calls the safe function until it"
        },
        {
          "lineno": 51,
          "line": "    receives a False Boolean and terminates that branch and backtracks to the next"
        },
        {
          "lineno": 52,
          "line": "    possible solution branch."
        },
        {
          "lineno": 53,
          "line": "    \"\"\""
        },
        {
          "lineno": 54,
          "line": "    if row >= len(board):"
        },
        {
          "lineno": 55,
          "line": "        \"\"\""
        },
        {
          "lineno": 56,
          "line": "        If the row number exceeds N, we have a board with a successful combination"
        },
        {
          "lineno": 57,
          "line": "        and that combination is appended to the solution list and the board is printed."
        },
        {
          "lineno": 58,
          "line": "        \"\"\""
        },
        {
          "lineno": 59,
          "line": "        solution.append(board)"
        },
        {
          "lineno": 60,
          "line": "        printboard(board)"
        },
        {
          "lineno": 61,
          "line": "        print()"
        },
        {
          "lineno": 62,
          "line": "        return True"
        },
        {
          "lineno": 63,
          "line": "    for i in range(len(board)):"
        },
        {
          "lineno": 64,
          "line": "        \"\"\""
        },
        {
          "lineno": 65,
          "line": "        For every row, it iterates through each column to check if it is feasible to"
        },
        {
          "lineno": 66,
          "line": "        place a queen there."
        },
        {
          "lineno": 67,
          "line": "        If all the combinations for that particular branch are successful, the board is"
        },
        {
          "lineno": 68,
          "line": "        reinitialized for the next possible combination."
        },
        {
          "lineno": 69,
          "line": "        \"\"\""
        },
        {
          "lineno": 70,
          "line": "        if is_safe(board, row, i):"
        },
        {
          "lineno": 71,
          "line": "            board[row][i] = 1"
        },
        {
          "lineno": 72,
          "line": "            solve(board, row + 1)"
        },
        {
          "lineno": 73,
          "line": "            board[row][i] = 0"
        },
        {
          "lineno": 74,
          "line": "    return False"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 48,
          "end_line": 48,
          "label": "def solve(board: list[list[int]], row: int) -> bool:",
          "successors": [
            {
              "id": 2,
              "start_line": 54,
              "end_line": 54,
              "label": "if row >= len(board):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 59,
                  "end_line": 62,
                  "label": "solution.append(board)\nprintboard(board)\nprint()\nreturn True",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 63,
              "end_line": 63,
              "label": "for i in range(len(board)):",
              "successors": [
                {
                  "id": 5,
                  "start_line": 70,
                  "end_line": 70,
                  "label": "if is_safe(board, row, i):",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 71,
                      "end_line": 73,
                      "label": "board[row][i] = 1\nsolve(board, row + 1)\nboard[row][i] = 0",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "start_line": 74,
              "end_line": 74,
              "label": "return False",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "printboard",
      "type": "function",
      "start_line": 77,
      "end_line": 87,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 77,
          "line": "def printboard(board: list[list[int]]) -> None:"
        },
        {
          "lineno": 78,
          "line": "    \"\"\""
        },
        {
          "lineno": 79,
          "line": "    Prints the boards that have a successful combination."
        },
        {
          "lineno": 80,
          "line": "    \"\"\""
        },
        {
          "lineno": 81,
          "line": "    for i in range(len(board)):"
        },
        {
          "lineno": 82,
          "line": "        for j in range(len(board)):"
        },
        {
          "lineno": 83,
          "line": "            if board[i][j] == 1:"
        },
        {
          "lineno": 84,
          "line": "                print(\"Q\", end=\" \")  # Queen is present"
        },
        {
          "lineno": 85,
          "line": "            else:"
        },
        {
          "lineno": 86,
          "line": "                print(\".\", end=\" \")  # Empty cell"
        },
        {
          "lineno": 87,
          "line": "        print()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 77,
          "end_line": 80,
          "label": "def printboard(board: list[list[int]]) -> None:\n    \"\"\"\n    Prints the boards that have a successful combination.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 81,
              "end_line": 81,
              "label": "for i in range(len(board)):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 82,
                  "end_line": 82,
                  "label": "for j in range(len(board)):",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 83,
                      "end_line": 84,
                      "label": "if board[i][j] == 1:\n    print(\"Q\", end=\" \")  # Queen is present",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 85,
                          "end_line": 86,
                          "label": "else:\n    print(\".\", end=\" \")  # Empty cell",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "start_line": 87,
                      "end_line": 87,
                      "label": "print()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "The nqueens problem is of placing N queens on a N * N"
    },
    {
      "lineno": 4,
      "line": "chess board such that no queen can attack any other queens placed"
    },
    {
      "lineno": 5,
      "line": "on that chess board."
    },
    {
      "lineno": 6,
      "line": "This means that one queen cannot have any other queen on its horizontal, vertical and"
    },
    {
      "lineno": 7,
      "line": "diagonal lines."
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "\"\"\""
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": "from __future__ import annotations"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "solution = []"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 47,
      "line": ""
    },
    {
      "lineno": 75,
      "line": ""
    },
    {
      "lineno": 76,
      "line": ""
    },
    {
      "lineno": 88,
      "line": ""
    },
    {
      "lineno": 89,
      "line": ""
    },
    {
      "lineno": 90,
      "line": "# Number of queens (e.g., n=8 for an 8x8 board)"
    },
    {
      "lineno": 91,
      "line": "n = 8"
    },
    {
      "lineno": 92,
      "line": "board = [[0 for i in range(n)] for j in range(n)]"
    },
    {
      "lineno": 93,
      "line": "solve(board, 0)"
    },
    {
      "lineno": 94,
      "line": "print(\"The total number of solutions are:\", len(solution))"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 11,
      "end_line": 11,
      "label": "from __future__ import annotations",
      "successors": [
        {
          "id": 2,
          "start_line": 13,
          "end_line": 13,
          "label": "solution = []",
          "successors": [
            {
              "id": 3,
              "start_line": 90,
              "end_line": 91,
              "label": "# Number of queens (e.g., n=8 for an 8x8 board)\nn = 8",
              "successors": [
                {
                  "id": 4,
                  "start_line": 92,
                  "end_line": 92,
                  "label": "board = [[0 for i in range(n)] for j in range(n)]",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 93,
                      "end_line": 93,
                      "label": "solve(board, 0)",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 94,
                          "end_line": 94,
                          "label": "print(\"The total number of solutions are:\", len(solution))",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}