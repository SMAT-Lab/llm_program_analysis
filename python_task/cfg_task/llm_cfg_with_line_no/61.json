{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 47,
  "functions": [
    {
      "name": "to_dict",
      "type": "function",
      "start_line": 10,
      "end_line": 11,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "def to_dict(data) -> dict:"
        },
        {
          "lineno": 11,
          "line": "    return jsonable_encoder(data)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 10,
          "end_line": 11,
          "label": "def to_dict(data) -> dict:\n    return jsonable_encoder(data)",
          "successors": []
        }
      ]
    },
    {
      "name": "dumps",
      "type": "function",
      "start_line": 14,
      "end_line": 15,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 14,
          "line": "def dumps(data) -> str:"
        },
        {
          "lineno": 15,
          "line": "    return json.dumps(jsonable_encoder(data))"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 14,
          "end_line": 15,
          "label": "def dumps(data) -> str:\n    return json.dumps(jsonable_encoder(data))",
          "successors": []
        }
      ]
    },
    {
      "name": "loads",
      "type": "function",
      "start_line": 29,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 29,
          "line": "def loads(data: str, *args, target_type: Type[T] | None = None, **kwargs) -> Any:"
        },
        {
          "lineno": 30,
          "line": "    parsed = json.loads(data, *args, **kwargs)"
        },
        {
          "lineno": 31,
          "line": "    if target_type:"
        },
        {
          "lineno": 32,
          "line": "        return type_match(parsed, target_type)"
        },
        {
          "lineno": 33,
          "line": "    return parsed"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 29,
          "end_line": 30,
          "label": "def loads(data: str, *args, target_type: Type[T] | None = None, **kwargs) -> Any:\n    parsed = json.loads(data, *args, **kwargs)",
          "successors": [
            {
              "id": 2,
              "start_line": 31,
              "end_line": 32,
              "label": "if target_type:\n        return type_match(parsed, target_type)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 33,
                  "end_line": 33,
                  "label": "return parsed",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "validate_with_jsonschema",
      "type": "function",
      "start_line": 36,
      "end_line": 47,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 36,
          "line": "def validate_with_jsonschema("
        },
        {
          "lineno": 37,
          "line": "    schema: dict[str, Any], data: dict[str, Any]"
        },
        {
          "lineno": 38,
          "line": ") -> str | None:"
        },
        {
          "lineno": 39,
          "line": "    \"\"\""
        },
        {
          "lineno": 40,
          "line": "    Validate the data against the schema."
        },
        {
          "lineno": 41,
          "line": "    Returns the validation error message if the data does not match the schema."
        },
        {
          "lineno": 42,
          "line": "    \"\"\""
        },
        {
          "lineno": 43,
          "line": "    try:"
        },
        {
          "lineno": 44,
          "line": "        jsonschema.validate(data, schema)"
        },
        {
          "lineno": 45,
          "line": "        return None"
        },
        {
          "lineno": 46,
          "line": "    except jsonschema.ValidationError as e:"
        },
        {
          "lineno": 47,
          "line": "        return str(e)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 36,
          "end_line": 42,
          "label": "def validate_with_jsonschema(\n    schema: dict[str, Any], data: dict[str, Any]\n) -> str | None:\n    \"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 43,
              "end_line": 45,
              "label": "try:\n    jsonschema.validate(data, schema)\n    return None",
              "successors": [
                {
                  "id": 3,
                  "start_line": 46,
                  "end_line": 47,
                  "label": "except jsonschema.ValidationError as e:\n    return str(e)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import json"
    },
    {
      "lineno": 2,
      "line": "from typing import Any, Type, TypeVar, overload"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "import jsonschema"
    },
    {
      "lineno": 5,
      "line": "from fastapi.encoders import jsonable_encoder"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "from .type import type_match"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": "T = TypeVar(\"T\")"
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": "@overload"
    },
    {
      "lineno": 22,
      "line": "def loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ..."
    },
    {
      "lineno": 23,
      "line": ""
    },
    {
      "lineno": 24,
      "line": ""
    },
    {
      "lineno": 25,
      "line": "@overload"
    },
    {
      "lineno": 26,
      "line": "def loads(data: str, *args, **kwargs) -> Any: ..."
    },
    {
      "lineno": 27,
      "line": ""
    },
    {
      "lineno": 28,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 35,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "import json",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 2,
          "label": "from typing import Any, Type, TypeVar, overload",
          "successors": [
            {
              "id": 3,
              "start_line": 4,
              "end_line": 4,
              "label": "import jsonschema",
              "successors": [
                {
                  "id": 4,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "from fastapi.encoders import jsonable_encoder",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 7,
                      "end_line": 7,
                      "label": "from .type import type_match",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 18,
                          "end_line": 18,
                          "label": "T = TypeVar(\"T\")",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 21,
                              "end_line": 22,
                              "label": "@overload\ndef loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ...",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 25,
                                  "end_line": 26,
                                  "label": "@overload\ndef loads(data: str, *args, **kwargs) -> Any: ...",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}