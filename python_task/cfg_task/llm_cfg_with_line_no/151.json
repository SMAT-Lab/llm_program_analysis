{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 592,
  "functions": [],
  "classes": [
    {
      "name": "StoreValueBlock",
      "type": "class",
      "start_line": 11,
      "end_line": 52,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 32,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 32,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 33,
              "line": "        super().__init__("
            },
            {
              "lineno": 34,
              "line": "            id=\"1ff065e9-88e8-4358-9d82-8dc91f622ba9\","
            },
            {
              "lineno": 35,
              "line": "            description=\"This block forwards an input value as output, allowing reuse without change.\","
            },
            {
              "lineno": 36,
              "line": "            categories={BlockCategory.BASIC},"
            },
            {
              "lineno": 37,
              "line": "            input_schema=StoreValueBlock.Input,"
            },
            {
              "lineno": 38,
              "line": "            output_schema=StoreValueBlock.Output,"
            },
            {
              "lineno": 39,
              "line": "            test_input=["
            },
            {
              "lineno": 40,
              "line": "                {\"input\": \"Hello, World!\"},"
            },
            {
              "lineno": 41,
              "line": "                {\"input\": \"Hello, World!\", \"data\": \"Existing Data\"},"
            },
            {
              "lineno": 42,
              "line": "            ],"
            },
            {
              "lineno": 43,
              "line": "            test_output=["
            },
            {
              "lineno": 44,
              "line": "                (\"output\", \"Hello, World!\"),  # No data provided, so trigger is returned"
            },
            {
              "lineno": 45,
              "line": "                (\"output\", \"Existing Data\"),  # Data is provided, so data is returned."
            },
            {
              "lineno": 46,
              "line": "            ],"
            },
            {
              "lineno": 47,
              "line": "            static_output=True,"
            },
            {
              "lineno": 48,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 32,
              "end_line": 48,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"1ff065e9-88e8-4358-9d82-8dc91f622ba9\",\n            description=\"This block forwards an input value as output, allowing reuse without change.\",\n            categories={BlockCategory.BASIC},\n            input_schema=StoreValueBlock.Input,\n            output_schema=StoreValueBlock.Output,\n            test_input=[\n                {\"input\": \"Hello, World!\"},\n                {\"input\": \"Hello, World!\", \"data\": \"Existing Data\"},\n            ],\n            test_output=[\n                (\"output\", \"Hello, World!\"),  # No data provided, so trigger is returned\n                (\"output\", \"Existing Data\"),  # Data is provided, so data is returned.\n            ],\n            static_output=True,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 50,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 50,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 51,
              "line": "        yield \"output\", input_data.data or input_data.input"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 50,
              "end_line": 51,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"output\", input_data.data or input_data.input",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 18,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 19,
              "line": "        input: Any = SchemaField("
            },
            {
              "lineno": 20,
              "line": "            description=\"Trigger the block to produce the output. \""
            },
            {
              "lineno": 21,
              "line": "            \"The value is only used when `data` is None.\""
            },
            {
              "lineno": 22,
              "line": "        )"
            },
            {
              "lineno": 23,
              "line": "        data: Any = SchemaField("
            },
            {
              "lineno": 24,
              "line": "            description=\"The constant data to be retained in the block. \""
            },
            {
              "lineno": 25,
              "line": "            \"This value is passed as `output`.\","
            },
            {
              "lineno": 26,
              "line": "            default=None,"
            },
            {
              "lineno": 27,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 18,
              "end_line": 27,
              "label": "\n    class Input(BlockSchema):\n        input: Any = SchemaField(\n            description=\"Trigger the block to produce the output. \"\n            \"The value is only used when `data` is None.\"\n        )\n        data: Any = SchemaField(\n            description=\"The constant data to be retained in the block. \"\n            \"This value is passed as `output`.\",\n            default=None,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 29,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 29,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 30,
              "line": "        output: Any = SchemaField(description=\"The stored data retained in the block.\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 29,
              "end_line": 30,
              "label": "    class Output(BlockSchema):\n        output: Any = SchemaField(description=\"The stored data retained in the block.\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "class StoreValueBlock(Block):"
        },
        {
          "lineno": 12,
          "line": "    \"\"\""
        },
        {
          "lineno": 13,
          "line": "    This block allows you to provide a constant value as a block, in a stateless manner."
        },
        {
          "lineno": 14,
          "line": "    The common use-case is simply pass the `input` data, it will `output` the same data."
        },
        {
          "lineno": 15,
          "line": "    The block output will be static, the output can be consumed multiple times."
        },
        {
          "lineno": 16,
          "line": "    \"\"\""
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 28,
          "line": ""
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 49,
          "line": ""
        },
        {
          "lineno": 52,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 11,
          "end_line": 16,
          "label": "class StoreValueBlock(Block):\n    \"\"\"\n    This block allows you to provide a constant value as a block, in a stateless manner.\n    The common use-case is simply pass the `input` data, it will `output` the same data.\n    The block output will be static, the output can be consumed multiple times.\n    \"\"\"",
          "successors": []
        }
      ]
    },
    {
      "name": "PrintToConsoleBlock",
      "type": "class",
      "start_line": 54,
      "end_line": 74,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 61,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 61,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 62,
              "line": "        super().__init__("
            },
            {
              "lineno": 63,
              "line": "            id=\"f3b1c1b2-4c4f-4f0d-8d2f-4c4f0d8d2f4c\","
            },
            {
              "lineno": 64,
              "line": "            description=\"Print the given text to the console, this is used for a debugging purpose.\","
            },
            {
              "lineno": 65,
              "line": "            categories={BlockCategory.BASIC},"
            },
            {
              "lineno": 66,
              "line": "            input_schema=PrintToConsoleBlock.Input,"
            },
            {
              "lineno": 67,
              "line": "            output_schema=PrintToConsoleBlock.Output,"
            },
            {
              "lineno": 68,
              "line": "            test_input={\"text\": \"Hello, World!\"},"
            },
            {
              "lineno": 69,
              "line": "            test_output=(\"status\", \"printed\"),"
            },
            {
              "lineno": 70,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 61,
              "end_line": 70,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"f3b1c1b2-4c4f-4f0d-8d2f-4c4f0d8d2f4c\",\n            description=\"Print the given text to the console, this is used for a debugging purpose.\",\n            categories={BlockCategory.BASIC},\n            input_schema=PrintToConsoleBlock.Input,\n            output_schema=PrintToConsoleBlock.Output,\n            test_input={\"text\": \"Hello, World!\"},\n            test_output=(\"status\", \"printed\"),\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 72,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 72,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 73,
              "line": "        print(\">>>>> Print: \", input_data.text)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 72,
              "end_line": 73,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        print(\">>>>> Print: \", input_data.text)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 55,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 55,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 56,
              "line": "        text: str = SchemaField(description=\"The text to print to the console.\")"
            }
          ],
          "blocks": []
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 58,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 58,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 59,
              "line": "        status: str = SchemaField(description=\"The status of the print operation.\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 58,
              "end_line": 59,
              "label": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"The status of the print operation.\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 54,
          "line": "class PrintToConsoleBlock(Block):"
        },
        {
          "lineno": 57,
          "line": ""
        },
        {
          "lineno": 60,
          "line": ""
        },
        {
          "lineno": 71,
          "line": ""
        },
        {
          "lineno": 74,
          "line": "        yield \"status\", \"printed\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 54,
          "end_line": 54,
          "label": "class PrintToConsoleBlock(Block):",
          "successors": [
            {
              "id": 2,
              "start_line": 74,
              "end_line": 74,
              "label": "        yield \"status\", \"printed\"",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "FindInDictionaryBlock",
      "type": "class",
      "start_line": 77,
      "end_line": 131,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 88,
          "end_line": 111,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 88,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 89,
              "line": "        super().__init__("
            },
            {
              "lineno": 90,
              "line": "            id=\"0e50422c-6dee-4145-83d6-3a5a392f65de\","
            },
            {
              "lineno": 91,
              "line": "            description=\"Lookup the given key in the input dictionary/object/list and return the value.\","
            },
            {
              "lineno": 92,
              "line": "            input_schema=FindInDictionaryBlock.Input,"
            },
            {
              "lineno": 93,
              "line": "            output_schema=FindInDictionaryBlock.Output,"
            },
            {
              "lineno": 94,
              "line": "            test_input=["
            },
            {
              "lineno": 95,
              "line": "                {\"input\": {\"apple\": 1, \"banana\": 2, \"cherry\": 3}, \"key\": \"banana\"},"
            },
            {
              "lineno": 96,
              "line": "                {\"input\": {\"x\": 10, \"y\": 20, \"z\": 30}, \"key\": \"w\"},"
            },
            {
              "lineno": 97,
              "line": "                {\"input\": [1, 2, 3], \"key\": 1},"
            },
            {
              "lineno": 98,
              "line": "                {\"input\": [1, 2, 3], \"key\": 3},"
            },
            {
              "lineno": 99,
              "line": "                {\"input\": MockObject(value=\"!!\", key=\"key\"), \"key\": \"key\"},"
            },
            {
              "lineno": 100,
              "line": "                {\"input\": [{\"k1\": \"v1\"}, {\"k2\": \"v2\"}, {\"k1\": \"v3\"}], \"key\": \"k1\"},"
            },
            {
              "lineno": 101,
              "line": "            ],"
            },
            {
              "lineno": 102,
              "line": "            test_output=["
            },
            {
              "lineno": 103,
              "line": "                (\"output\", 2),"
            },
            {
              "lineno": 104,
              "line": "                (\"missing\", {\"x\": 10, \"y\": 20, \"z\": 30}),"
            },
            {
              "lineno": 105,
              "line": "                (\"output\", 2),"
            },
            {
              "lineno": 106,
              "line": "                (\"missing\", [1, 2, 3]),"
            },
            {
              "lineno": 107,
              "line": "                (\"output\", \"key\"),"
            },
            {
              "lineno": 108,
              "line": "                (\"output\", [\"v1\", \"v3\"]),"
            },
            {
              "lineno": 109,
              "line": "            ],"
            },
            {
              "lineno": 110,
              "line": "            categories={BlockCategory.BASIC},"
            },
            {
              "lineno": 111,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 88,
              "end_line": 111,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"0e50422c-6dee-4145-83d6-3a5a392f65de\",\n            description=\"Lookup the given key in the input dictionary/object/list and return the value.\",\n            input_schema=FindInDictionaryBlock.Input,\n            output_schema=FindInDictionaryBlock.Output,\n            test_input=[\n                {\"input\": {\"apple\": 1, \"banana\": 2, \"cherry\": 3}, \"key\": \"banana\"},\n                {\"input\": {\"x\": 10, \"y\": 20, \"z\": 30}, \"key\": \"w\"},\n                {\"input\": [1, 2, 3], \"key\": 1},\n                {\"input\": [1, 2, 3], \"key\": 3},\n                {\"input\": MockObject(value=\"!!\", key=\"key\"), \"key\": \"key\"},\n                {\"input\": [{\"k1\": \"v1\"}, {\"k2\": \"v2\"}, {\"k1\": \"v3\"}], \"key\": \"k1\"},\n            ],\n            test_output=[\n                (\"output\", 2),\n                (\"missing\", {\"x\": 10, \"y\": 20, \"z\": 30}),\n                (\"output\", 2),\n                (\"missing\", [1, 2, 3]),\n                (\"output\", \"key\"),\n                (\"output\", [\"v1\", \"v3\"]),\n            ],\n            categories={BlockCategory.BASIC},\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 113,
          "end_line": 131,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 113,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 114,
              "line": "        obj = input_data.input"
            },
            {
              "lineno": 115,
              "line": "        key = input_data.key"
            },
            {
              "lineno": 116,
              "line": ""
            },
            {
              "lineno": 117,
              "line": "        if isinstance(obj, dict) and key in obj:"
            },
            {
              "lineno": 118,
              "line": "            yield \"output\", obj[key]"
            },
            {
              "lineno": 119,
              "line": "        elif isinstance(obj, list) and isinstance(key, int) and 0 <= key < len(obj):"
            },
            {
              "lineno": 120,
              "line": "            yield \"output\", obj[key]"
            },
            {
              "lineno": 121,
              "line": "        elif isinstance(obj, list) and isinstance(key, str):"
            },
            {
              "lineno": 122,
              "line": "            if len(obj) == 0:"
            },
            {
              "lineno": 123,
              "line": "                yield \"output\", []"
            },
            {
              "lineno": 124,
              "line": "            elif isinstance(obj[0], dict) and key in obj[0]:"
            },
            {
              "lineno": 125,
              "line": "                yield \"output\", [item[key] for item in obj if key in item]"
            },
            {
              "lineno": 126,
              "line": "            else:"
            },
            {
              "lineno": 127,
              "line": "                yield \"output\", [getattr(val, key) for val in obj if hasattr(val, key)]"
            },
            {
              "lineno": 128,
              "line": "        elif isinstance(obj, object) and isinstance(key, str) and hasattr(obj, key):"
            },
            {
              "lineno": 129,
              "line": "            yield \"output\", getattr(obj, key)"
            },
            {
              "lineno": 130,
              "line": "        else:"
            },
            {
              "lineno": 131,
              "line": "            yield \"missing\", input_data.input"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 113,
              "end_line": 116,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        obj = input_data.input\n        key = input_data.key\n",
              "successors": [
                {
                  "id": 2,
                  "start_line": 117,
                  "end_line": 118,
                  "label": "        if isinstance(obj, dict) and key in obj:\n            yield \"output\", obj[key]\n",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 131,
                      "end_line": 131,
                      "label": "            yield \"missing\", input_data.input\n",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 119,
                  "end_line": 120,
                  "label": "        elif isinstance(obj, list) and isinstance(key, int) and 0 <= key < len(obj):\n            yield \"output\", obj[key]\n",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 131,
                      "end_line": 131,
                      "label": "            yield \"missing\", input_data.input\n",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 121,
                  "end_line": 127,
                  "label": "        elif isinstance(obj, list) and isinstance(key, str):\n            if len(obj) == 0:\n                yield \"output\", []\n            elif isinstance(obj[0], dict) and key in obj[0]:\n                yield \"output\", [item[key] for item in obj if key in item]\n            else:\n                yield \"output\", [getattr(val, key) for val in obj if hasattr(val, key)]\n",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 131,
                      "end_line": 131,
                      "label": "            yield \"missing\", input_data.input\n",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "start_line": 128,
                  "end_line": 129,
                  "label": "        elif isinstance(obj, object) and isinstance(key, str) and hasattr(obj, key):\n            yield \"output\", getattr(obj, key)\n",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 131,
                      "end_line": 131,
                      "label": "            yield \"missing\", input_data.input\n",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 3,
                  "start_line": 131,
                  "end_line": 131,
                  "label": "            yield \"missing\", input_data.input\n",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 78,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 78,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 79,
              "line": "        input: Any = SchemaField(description=\"Dictionary to lookup from\")"
            },
            {
              "lineno": 80,
              "line": "        key: str | int = SchemaField(description=\"Key to lookup in the dictionary\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 78,
              "end_line": 80,
              "label": "    class Input(BlockSchema):\n        input: Any = SchemaField(description=\"Dictionary to lookup from\")\n        key: str | int = SchemaField(description=\"Key to lookup in the dictionary\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 82,
          "end_line": 86,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 82,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 83,
              "line": "        output: Any = SchemaField(description=\"Value found for the given key\")"
            },
            {
              "lineno": 84,
              "line": "        missing: Any = SchemaField("
            },
            {
              "lineno": 85,
              "line": "            description=\"Value of the input that missing the key\""
            },
            {
              "lineno": 86,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 82,
              "end_line": 86,
              "label": "    class Output(BlockSchema):\n        output: Any = SchemaField(description=\"Value found for the given key\")\n        missing: Any = SchemaField(\n            description=\"Value of the input that missing the key\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 77,
          "line": "class FindInDictionaryBlock(Block):"
        },
        {
          "lineno": 81,
          "line": ""
        },
        {
          "lineno": 87,
          "line": ""
        },
        {
          "lineno": 112,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 77,
          "end_line": 77,
          "label": "class FindInDictionaryBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 81,
          "end_line": 81,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 87,
          "end_line": 87,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 112,
          "end_line": 112,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "name": "AgentInputBlock",
      "type": "class",
      "start_line": 134,
      "end_line": 214,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 181,
          "end_line": 210,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 181,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 182,
              "line": "        super().__init__("
            },
            {
              "lineno": 183,
              "line": "            id=\"c0a8e994-ebf1-4a9c-a4d8-89d09c86741b\","
            },
            {
              "lineno": 184,
              "line": "            description=\"This block is used to provide input to the graph.\","
            },
            {
              "lineno": 185,
              "line": "            input_schema=AgentInputBlock.Input,"
            },
            {
              "lineno": 186,
              "line": "            output_schema=AgentInputBlock.Output,"
            },
            {
              "lineno": 187,
              "line": "            test_input=["
            },
            {
              "lineno": 188,
              "line": "                {"
            },
            {
              "lineno": 189,
              "line": "                    \"value\": \"Hello, World!\","
            },
            {
              "lineno": 190,
              "line": "                    \"name\": \"input_1\","
            },
            {
              "lineno": 191,
              "line": "                    \"description\": \"This is a test input.\","
            },
            {
              "lineno": 192,
              "line": "                    \"placeholder_values\": [],"
            },
            {
              "lineno": 193,
              "line": "                    \"limit_to_placeholder_values\": False,"
            },
            {
              "lineno": 194,
              "line": "                },"
            },
            {
              "lineno": 195,
              "line": "                {"
            },
            {
              "lineno": 196,
              "line": "                    \"value\": \"Hello, World!\","
            },
            {
              "lineno": 197,
              "line": "                    \"name\": \"input_2\","
            },
            {
              "lineno": 198,
              "line": "                    \"description\": \"This is a test input.\","
            },
            {
              "lineno": 199,
              "line": "                    \"placeholder_values\": [\"Hello, World!\"],"
            },
            {
              "lineno": 200,
              "line": "                    \"limit_to_placeholder_values\": True,"
            },
            {
              "lineno": 201,
              "line": "                },"
            },
            {
              "lineno": 202,
              "line": "            ],"
            },
            {
              "lineno": 203,
              "line": "            test_output=["
            },
            {
              "lineno": 204,
              "line": "                (\"result\", \"Hello, World!\"),"
            },
            {
              "lineno": 205,
              "line": "                (\"result\", \"Hello, World!\"),"
            },
            {
              "lineno": 206,
              "line": "            ],"
            },
            {
              "lineno": 207,
              "line": "            categories={BlockCategory.INPUT, BlockCategory.BASIC},"
            },
            {
              "lineno": 208,
              "line": "            block_type=BlockType.INPUT,"
            },
            {
              "lineno": 209,
              "line": "            static_output=True,"
            },
            {
              "lineno": 210,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 181,
              "end_line": 210,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"c0a8e994-ebf1-4a9c-a4d8-89d09c86741b\",\n            description=\"This block is used to provide input to the graph.\",\n            input_schema=AgentInputBlock.Input,\n            output_schema=AgentInputBlock.Output,\n            test_input=[\n                {\n                    \"value\": \"Hello, World!\",\n                    \"name\": \"input_1\",\n                    \"description\": \"This is a test input.\",\n                    \"placeholder_values\": [],\n                    \"limit_to_placeholder_values\": False,\n                },\n                {\n                    \"value\": \"Hello, World!\",\n                    \"name\": \"input_2\",\n                    \"description\": \"This is a test input.\",\n                    \"placeholder_values\": [\"Hello, World!\"],\n                    \"limit_to_placeholder_values\": True,\n                },\n            ],\n            test_output=[\n                (\"result\", \"Hello, World!\"),\n                (\"result\", \"Hello, World!\"),\n            ],\n            categories={BlockCategory.INPUT, BlockCategory.BASIC},\n            block_type=BlockType.INPUT,\n            static_output=True,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 212,
          "end_line": 213,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 212,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 213,
              "line": "        yield \"result\", input_data.value"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 212,
              "end_line": 213,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"result\", input_data.value",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 143,
          "end_line": 176,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 143,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 144,
              "line": "        name: str = SchemaField(description=\"The name of the input.\")"
            },
            {
              "lineno": 145,
              "line": "        value: Any = SchemaField("
            },
            {
              "lineno": 146,
              "line": "            description=\"The value to be passed as input.\","
            },
            {
              "lineno": 147,
              "line": "            default=None,"
            },
            {
              "lineno": 148,
              "line": "        )"
            },
            {
              "lineno": 149,
              "line": "        title: str | None = SchemaField("
            },
            {
              "lineno": 150,
              "line": "            description=\"The title of the input.\", default=None, advanced=True"
            },
            {
              "lineno": 151,
              "line": "        )"
            },
            {
              "lineno": 152,
              "line": "        description: str | None = SchemaField("
            },
            {
              "lineno": 153,
              "line": "            description=\"The description of the input.\","
            },
            {
              "lineno": 154,
              "line": "            default=None,"
            },
            {
              "lineno": 155,
              "line": "            advanced=True,"
            },
            {
              "lineno": 156,
              "line": "        )"
            },
            {
              "lineno": 157,
              "line": "        placeholder_values: List[Any] = SchemaField("
            },
            {
              "lineno": 158,
              "line": "            description=\"The placeholder values to be passed as input.\","
            },
            {
              "lineno": 159,
              "line": "            default=[],"
            },
            {
              "lineno": 160,
              "line": "            advanced=True,"
            },
            {
              "lineno": 161,
              "line": "        )"
            },
            {
              "lineno": 162,
              "line": "        limit_to_placeholder_values: bool = SchemaField("
            },
            {
              "lineno": 163,
              "line": "            description=\"Whether to limit the selection to placeholder values.\","
            },
            {
              "lineno": 164,
              "line": "            default=False,"
            },
            {
              "lineno": 165,
              "line": "            advanced=True,"
            },
            {
              "lineno": 166,
              "line": "        )"
            },
            {
              "lineno": 167,
              "line": "        advanced: bool = SchemaField("
            },
            {
              "lineno": 168,
              "line": "            description=\"Whether to show the input in the advanced section, if the field is not required.\","
            },
            {
              "lineno": 169,
              "line": "            default=False,"
            },
            {
              "lineno": 170,
              "line": "            advanced=True,"
            },
            {
              "lineno": 171,
              "line": "        )"
            },
            {
              "lineno": 172,
              "line": "        secret: bool = SchemaField("
            },
            {
              "lineno": 173,
              "line": "            description=\"Whether the input should be treated as a secret.\","
            },
            {
              "lineno": 174,
              "line": "            default=False,"
            },
            {
              "lineno": 175,
              "line": "            advanced=True,"
            },
            {
              "lineno": 176,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 143,
              "end_line": 176,
              "label": "    class Input(BlockSchema):\n        name: str = SchemaField(description=\"The name of the input.\")\n        value: Any = SchemaField(\n            description=\"The value to be passed as input.\",\n            default=None,\n        )\n        title: str | None = SchemaField(\n            description=\"The title of the input.\", default=None, advanced=True\n        )\n        description: str | None = SchemaField(\n            description=\"The description of the input.\",\n            default=None,\n            advanced=True,\n        )\n        placeholder_values: List[Any] = SchemaField(\n            description=\"The placeholder values to be passed as input.\",\n            default=[],\n            advanced=True,\n        )\n        limit_to_placeholder_values: bool = SchemaField(\n            description=\"Whether to limit the selection to placeholder values.\",\n            default=False,\n            advanced=True,\n        )\n        advanced: bool = SchemaField(\n            description=\"Whether to show the input in the advanced section, if the field is not required.\",\n            default=False,\n            advanced=True,\n        )\n        secret: bool = SchemaField(\n            description=\"Whether the input should be treated as a secret.\",\n            default=False,\n            advanced=True,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 178,
          "end_line": 179,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 178,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 179,
              "line": "        result: Any = SchemaField(description=\"The value passed as input.\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 178,
              "end_line": 179,
              "label": "    class Output(BlockSchema):\n        result: Any = SchemaField(description=\"The value passed as input.\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 134,
          "line": "class AgentInputBlock(Block):"
        },
        {
          "lineno": 135,
          "line": "    \"\"\""
        },
        {
          "lineno": 136,
          "line": "    This block is used to provide input to the graph."
        },
        {
          "lineno": 137,
          "line": ""
        },
        {
          "lineno": 138,
          "line": "    It takes in a value, name, description, default values list and bool to limit selection to default values."
        },
        {
          "lineno": 139,
          "line": ""
        },
        {
          "lineno": 140,
          "line": "    It Outputs the value passed as input."
        },
        {
          "lineno": 141,
          "line": "    \"\"\""
        },
        {
          "lineno": 142,
          "line": ""
        },
        {
          "lineno": 177,
          "line": ""
        },
        {
          "lineno": 180,
          "line": ""
        },
        {
          "lineno": 211,
          "line": ""
        },
        {
          "lineno": 214,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 134,
          "end_line": 141,
          "label": "class AgentInputBlock(Block):\n    \"\"\"\n    This block is used to provide input to the graph.\n\n    It takes in a value, name, description, default values list and bool to limit selection to default values.\n\n    It Outputs the value passed as input.\n    \"\"\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AgentOutputBlock",
      "type": "class",
      "start_line": 216,
      "end_line": 311,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 262,
          "end_line": 295,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 262,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 263,
              "line": "        super().__init__("
            },
            {
              "lineno": 264,
              "line": "            id=\"363ae599-353e-4804-937e-b2ee3cef3da4\","
            },
            {
              "lineno": 265,
              "line": "            description=\"Stores the output of the graph for users to see.\","
            },
            {
              "lineno": 266,
              "line": "            input_schema=AgentOutputBlock.Input,"
            },
            {
              "lineno": 267,
              "line": "            output_schema=AgentOutputBlock.Output,"
            },
            {
              "lineno": 268,
              "line": "            test_input=["
            },
            {
              "lineno": 269,
              "line": "                {"
            },
            {
              "lineno": 270,
              "line": "                    \"value\": \"Hello, World!\","
            },
            {
              "lineno": 271,
              "line": "                    \"name\": \"output_1\","
            },
            {
              "lineno": 272,
              "line": "                    \"description\": \"This is a test output.\","
            },
            {
              "lineno": 273,
              "line": "                    \"format\": \"{{ output_1 }}!!\","
            },
            {
              "lineno": 274,
              "line": "                },"
            },
            {
              "lineno": 275,
              "line": "                {"
            },
            {
              "lineno": 276,
              "line": "                    \"value\": \"42\","
            },
            {
              "lineno": 277,
              "line": "                    \"name\": \"output_2\","
            },
            {
              "lineno": 278,
              "line": "                    \"description\": \"This is another test output.\","
            },
            {
              "lineno": 279,
              "line": "                    \"format\": \"{{ output_2 }}\","
            },
            {
              "lineno": 280,
              "line": "                },"
            },
            {
              "lineno": 281,
              "line": "                {"
            },
            {
              "lineno": 282,
              "line": "                    \"value\": MockObject(value=\"!!\", key=\"key\"),"
            },
            {
              "lineno": 283,
              "line": "                    \"name\": \"output_3\","
            },
            {
              "lineno": 284,
              "line": "                    \"description\": \"This is a test output with a mock object.\","
            },
            {
              "lineno": 285,
              "line": "                    \"format\": \"{{ output_3 }}\","
            },
            {
              "lineno": 286,
              "line": "                },"
            },
            {
              "lineno": 287,
              "line": "            ],"
            },
            {
              "lineno": 288,
              "line": "            test_output=["
            },
            {
              "lineno": 289,
              "line": "                (\"output\", \"Hello, World!!!\"),"
            },
            {
              "lineno": 290,
              "line": "                (\"output\", \"42\"),"
            },
            {
              "lineno": 291,
              "line": "                (\"output\", MockObject(value=\"!!\", key=\"key\")),"
            },
            {
              "lineno": 292,
              "line": "            ],"
            },
            {
              "lineno": 293,
              "line": "            categories={BlockCategory.OUTPUT, BlockCategory.BASIC},"
            },
            {
              "lineno": 294,
              "line": "            block_type=BlockType.OUTPUT,"
            },
            {
              "lineno": 295,
              "line": "            static_output=True,"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 262,
              "end_line": 295,
              "label": " def __init__(self):\n super().__init__(\n id=\"363ae599-353e-4804-937e-b2ee3cef3da4\",\n description=\"Stores the output of the graph for users to see.\",\n input_schema=AgentOutputBlock.Input,\n output_schema=AgentOutputBlock.Output,\n test_input=[\n {\n \"value\": \"Hello, World!\",\n \"name\": \"output_1\",\n \"description\": \"This is a test output.\",\n \"format\": \"{{ output_1 }}!!\",\n },\n {\n \"value\": \"42\",\n \"name\": \"output_2\",\n \"description\": \"This is another test output.\",\n \"format\": \"{{ output_2 }}\",\n },\n {\n \"value\": MockObject(value=\"!!\", key=\"key\"),\n \"name\": \"output_3\",\n \"description\": \"This is a test output with a mock object.\",\n \"format\": \"{{ output_3 }}\",\n },\n ],\n test_output=[\n (\"output\", \"Hello, World!!!\"),\n (\"output\", \"42\"),\n (\"output\", MockObject(value=\"!!\", key=\"key\")),\n ],\n categories={BlockCategory.OUTPUT, BlockCategory.BASIC},\n block_type=BlockType.OUTPUT,\n static_output=True,",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 298,
          "end_line": 311,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 298,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 299,
              "line": "        \"\"\""
            },
            {
              "lineno": 300,
              "line": "        Attempts to format the recorded_value using the fmt_string if provided."
            },
            {
              "lineno": 301,
              "line": "        If formatting fails or no fmt_string is given, returns the original recorded_value."
            },
            {
              "lineno": 302,
              "line": "        \"\"\""
            },
            {
              "lineno": 303,
              "line": "        if input_data.format:"
            },
            {
              "lineno": 304,
              "line": "            try:"
            },
            {
              "lineno": 305,
              "line": "                yield \"output\", formatter.format_string("
            },
            {
              "lineno": 306,
              "line": "                    input_data.format, {input_data.name: input_data.value}"
            },
            {
              "lineno": 307,
              "line": "                )"
            },
            {
              "lineno": 308,
              "line": "            except Exception as e:"
            },
            {
              "lineno": 309,
              "line": "                yield \"output\", f\"Error: {e}, {input_data.value}\""
            },
            {
              "lineno": 310,
              "line": "        else:"
            },
            {
              "lineno": 311,
              "line": "            yield \"output\", input_data.value"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 298,
              "end_line": 302,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        \"\"\"\n        Attempts to format the recorded_value using the fmt_string if provided.\n        If formatting fails or no fmt_string is given, returns the original recorded_value.\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 303,
                  "end_line": 303,
                  "label": "        if input_data.format:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 304,
                      "end_line": 307,
                      "label": "            try:\n                yield \"output\", formatter.format_string(\n                    input_data.format, {input_data.name: input_data.value}\n                )",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 310,
                          "end_line": 311,
                          "label": "        else:\n            yield \"output\", input_data.value",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "start_line": 308,
                      "end_line": 309,
                      "label": "            except Exception as e:\n                yield \"output\", f\"Error: {e}, {input_data.value}\"",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 310,
                          "end_line": 311,
                          "label": "        else:\n            yield \"output\", input_data.value",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 226,
          "end_line": 257,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 226,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 227,
              "line": "        value: Any = SchemaField("
            },
            {
              "lineno": 228,
              "line": "            description=\"The value to be recorded as output.\","
            },
            {
              "lineno": 229,
              "line": "            default=None,"
            },
            {
              "lineno": 230,
              "line": "            advanced=False,"
            },
            {
              "lineno": 231,
              "line": "        )"
            },
            {
              "lineno": 232,
              "line": "        name: str = SchemaField(description=\"The name of the output.\")"
            },
            {
              "lineno": 233,
              "line": "        title: str | None = SchemaField("
            },
            {
              "lineno": 234,
              "line": "            description=\"The title of the output.\","
            },
            {
              "lineno": 235,
              "line": "            default=None,"
            },
            {
              "lineno": 236,
              "line": "            advanced=True,"
            },
            {
              "lineno": 237,
              "line": "        )"
            },
            {
              "lineno": 238,
              "line": "        description: str | None = SchemaField("
            },
            {
              "lineno": 239,
              "line": "            description=\"The description of the output.\","
            },
            {
              "lineno": 240,
              "line": "            default=None,"
            },
            {
              "lineno": 241,
              "line": "            advanced=True,"
            },
            {
              "lineno": 242,
              "line": "        )"
            },
            {
              "lineno": 243,
              "line": "        format: str = SchemaField("
            },
            {
              "lineno": 244,
              "line": "            description=\"The format string to be used to format the recorded_value.\","
            },
            {
              "lineno": 245,
              "line": "            default=\"\","
            },
            {
              "lineno": 246,
              "line": "            advanced=True,"
            },
            {
              "lineno": 247,
              "line": "        )"
            },
            {
              "lineno": 248,
              "line": "        advanced: bool = SchemaField("
            },
            {
              "lineno": 249,
              "line": "            description=\"Whether to treat the output as advanced.\","
            },
            {
              "lineno": 250,
              "line": "            default=False,"
            },
            {
              "lineno": 251,
              "line": "            advanced=True,"
            },
            {
              "lineno": 252,
              "line": "        )"
            },
            {
              "lineno": 253,
              "line": "        secret: bool = SchemaField("
            },
            {
              "lineno": 254,
              "line": "            description=\"Whether the output should be treated as a secret.\","
            },
            {
              "lineno": 255,
              "line": "            default=False,"
            },
            {
              "lineno": 256,
              "line": "            advanced=True,"
            },
            {
              "lineno": 257,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 226,
              "end_line": 257,
              "label": "    class Input(BlockSchema):\n        value: Any = SchemaField(\n            description=\"The value to be recorded as output.\",\n            default=None,\n            advanced=False,\n        )\n        name: str = SchemaField(description=\"The name of the output.\")\n        title: str | None = SchemaField(\n            description=\"The title of the output.\",\n            default=None,\n            advanced=True,\n        )\n        description: str | None = SchemaField(\n            description=\"The description of the output.\",\n            default=None,\n            advanced=True,\n        )\n        format: str = SchemaField(\n            description=\"The format string to be used to format the recorded_value.\",\n            default=\"\",\n            advanced=True,\n        )\n        advanced: bool = SchemaField(\n            description=\"Whether to treat the output as advanced.\",\n            default=False,\n            advanced=True,\n        )\n        secret: bool = SchemaField(\n            description=\"Whether the output should be treated as a secret.\",\n            default=False,\n            advanced=True,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 259,
          "end_line": 260,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 259,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 260,
              "line": "        output: Any = SchemaField(description=\"The value recorded as output.\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 259,
              "end_line": 260,
              "label": "    class Output(BlockSchema):\n        output: Any = SchemaField(description=\"The value recorded as output.\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 216,
          "line": "class AgentOutputBlock(Block):"
        },
        {
          "lineno": 217,
          "line": "    \"\"\""
        },
        {
          "lineno": 218,
          "line": "    Records the output of the graph for users to see."
        },
        {
          "lineno": 219,
          "line": ""
        },
        {
          "lineno": 220,
          "line": "    Behavior:"
        },
        {
          "lineno": 221,
          "line": "        If `format` is provided and the `value` is of a type that can be formatted,"
        },
        {
          "lineno": 222,
          "line": "        the block attempts to format the recorded_value using the `format`."
        },
        {
          "lineno": 223,
          "line": "        If formatting fails or no `format` is provided, the raw `value` is output."
        },
        {
          "lineno": 224,
          "line": "    \"\"\""
        },
        {
          "lineno": 225,
          "line": ""
        },
        {
          "lineno": 258,
          "line": ""
        },
        {
          "lineno": 261,
          "line": ""
        },
        {
          "lineno": 296,
          "line": "        )"
        },
        {
          "lineno": 297,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 216,
          "end_line": 224,
          "label": "class AgentOutputBlock(Block):\n    \"\"\"\n    Records the output of the graph for users to see.\n\n    Behavior:\n        If `format` is provided and the `value` is of a type that can be formatted,\n        the block attempts to format the recorded_value using the `format`.\n        If formatting fails or no `format` is provided, the raw `value` is output.\n    \"\"\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AddToDictionaryBlock",
      "type": "class",
      "start_line": 314,
      "end_line": 389,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 344,
          "end_line": 378,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 344,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 345,
              "line": "        super().__init__("
            },
            {
              "lineno": 346,
              "line": "            id=\"31d1064e-7446-4693-a7d4-65e5ca1180d1\","
            },
            {
              "lineno": 347,
              "line": "            description=\"Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.\","
            },
            {
              "lineno": 348,
              "line": "            categories={BlockCategory.BASIC},"
            },
            {
              "lineno": 349,
              "line": "            input_schema=AddToDictionaryBlock.Input,"
            },
            {
              "lineno": 350,
              "line": "            output_schema=AddToDictionaryBlock.Output,"
            },
            {
              "lineno": 351,
              "line": "            test_input=["
            },
            {
              "lineno": 352,
              "line": "                {"
            },
            {
              "lineno": 353,
              "line": "                    \"dictionary\": {\"existing_key\": \"existing_value\"},"
            },
            {
              "lineno": 354,
              "line": "                    \"key\": \"new_key\","
            },
            {
              "lineno": 355,
              "line": "                    \"value\": \"new_value\","
            },
            {
              "lineno": 356,
              "line": "                },"
            },
            {
              "lineno": 357,
              "line": "                {\"key\": \"first_key\", \"value\": \"first_value\"},"
            },
            {
              "lineno": 358,
              "line": "                {"
            },
            {
              "lineno": 359,
              "line": "                    \"dictionary\": {\"existing_key\": \"existing_value\"},"
            },
            {
              "lineno": 360,
              "line": "                    \"entries\": {\"new_key\": \"new_value\", \"first_key\": \"first_value\"},"
            },
            {
              "lineno": 361,
              "line": "                },"
            },
            {
              "lineno": 362,
              "line": "            ],"
            },
            {
              "lineno": 363,
              "line": "            test_output=["
            },
            {
              "lineno": 364,
              "line": "                ("
            },
            {
              "lineno": 365,
              "line": "                    \"updated_dictionary\","
            },
            {
              "lineno": 366,
              "line": "                    {\"existing_key\": \"existing_value\", \"new_key\": \"new_value\"},"
            },
            {
              "lineno": 367,
              "line": "                ),"
            },
            {
              "lineno": 368,
              "line": "                (\"updated_dictionary\", {\"first_key\": \"first_value\"}),"
            },
            {
              "lineno": 369,
              "line": "                ("
            },
            {
              "lineno": 370,
              "line": "                    \"updated_dictionary\","
            },
            {
              "lineno": 371,
              "line": "                    {"
            },
            {
              "lineno": 372,
              "line": "                        \"existing_key\": \"existing_value\","
            },
            {
              "lineno": 373,
              "line": "                        \"new_key\": \"new_value\","
            },
            {
              "lineno": 374,
              "line": "                        \"first_key\": \"first_value\","
            },
            {
              "lineno": 375,
              "line": "                    },"
            },
            {
              "lineno": 376,
              "line": "                ),"
            },
            {
              "lineno": 377,
              "line": "            ],"
            },
            {
              "lineno": 378,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 344,
              "end_line": 378,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"31d1064e-7446-4693-a7d4-65e5ca1180d1\",\n            description=\"Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.\",\n            categories={BlockCategory.BASIC},\n            input_schema=AddToDictionaryBlock.Input,\n            output_schema=AddToDictionaryBlock.Output,\n            test_input=[\n                {\n                    \"dictionary\": {\"existing_key\": \"existing_value\"},\n                    \"key\": \"new_key\",\n                    \"value\": \"new_value\",\n                },\n                {\"key\": \"first_key\", \"value\": \"first_value\"},\n                {\n                    \"dictionary\": {\"existing_key\": \"existing_value\"},\n                    \"entries\": {\"new_key\": \"new_value\", \"first_key\": \"first_value\"},\n                },\n            ],\n            test_output=[\n                (\n                    \"updated_dictionary\",\n                    {\"existing_key\": \"existing_value\", \"new_key\": \"new_value\"},\n                ),\n                (\"updated_dictionary\", {\"first_key\": \"first_value\"}),\n                (\n                    \"updated_dictionary\",\n                    {\n                        \"existing_key\": \"existing_value\",\n                        \"new_key\": \"new_value\",\n                        \"first_key\": \"first_value\",\n                    },\n                ),\n            ],\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 380,
          "end_line": 389,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 380,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 381,
              "line": "        updated_dict = input_data.dictionary.copy()"
            },
            {
              "lineno": 382,
              "line": ""
            },
            {
              "lineno": 383,
              "line": "        if input_data.value is not None and input_data.key:"
            },
            {
              "lineno": 384,
              "line": "            updated_dict[input_data.key] = input_data.value"
            },
            {
              "lineno": 385,
              "line": ""
            },
            {
              "lineno": 386,
              "line": "        for key, value in input_data.entries.items():"
            },
            {
              "lineno": 387,
              "line": "            updated_dict[key] = value"
            },
            {
              "lineno": 388,
              "line": ""
            },
            {
              "lineno": 389,
              "line": "        yield \"updated_dictionary\", updated_dict"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 380,
              "end_line": 381,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        updated_dict = input_data.dictionary.copy()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 383,
                  "end_line": 384,
                  "label": "        if input_data.value is not None and input_data.key:\n            updated_dict[input_data.key] = input_data.value",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 386,
                      "end_line": 387,
                      "label": "        for key, value in input_data.entries.items():\n            updated_dict[key] = value",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 389,
                          "end_line": 389,
                          "label": "        yield \"updated_dictionary\", updated_dict",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 386,
                  "end_line": 387,
                  "label": "        for key, value in input_data.entries.items():\n            updated_dict[key] = value",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 389,
                      "end_line": 389,
                      "label": "        yield \"updated_dictionary\", updated_dict",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 315,
          "end_line": 336,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 315,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 316,
              "line": "        dictionary: dict[Any, Any] = SchemaField("
            },
            {
              "lineno": 317,
              "line": "            default={},"
            },
            {
              "lineno": 318,
              "line": "            description=\"The dictionary to add the entry to. If not provided, a new dictionary will be created.\","
            },
            {
              "lineno": 319,
              "line": "        )"
            },
            {
              "lineno": 320,
              "line": "        key: str = SchemaField("
            },
            {
              "lineno": 321,
              "line": "            default=\"\","
            },
            {
              "lineno": 322,
              "line": "            description=\"The key for the new entry.\","
            },
            {
              "lineno": 323,
              "line": "            placeholder=\"new_key\","
            },
            {
              "lineno": 324,
              "line": "            advanced=False,"
            },
            {
              "lineno": 325,
              "line": "        )"
            },
            {
              "lineno": 326,
              "line": "        value: Any = SchemaField("
            },
            {
              "lineno": 327,
              "line": "            default=None,"
            },
            {
              "lineno": 328,
              "line": "            description=\"The value for the new entry.\","
            },
            {
              "lineno": 329,
              "line": "            placeholder=\"new_value\","
            },
            {
              "lineno": 330,
              "line": "            advanced=False,"
            },
            {
              "lineno": 331,
              "line": "        )"
            },
            {
              "lineno": 332,
              "line": "        entries: dict[Any, Any] = SchemaField("
            },
            {
              "lineno": 333,
              "line": "            default={},"
            },
            {
              "lineno": 334,
              "line": "            description=\"The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.\","
            },
            {
              "lineno": 335,
              "line": "            advanced=True,"
            },
            {
              "lineno": 336,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 315,
              "end_line": 336,
              "label": "    class Input(BlockSchema):\n        dictionary: dict[Any, Any] = SchemaField(\n            default={},\n            description=\"The dictionary to add the entry to. If not provided, a new dictionary will be created.\",\n        )\n        key: str = SchemaField(\n            default=\"\",\n            description=\"The key for the new entry.\",\n            placeholder=\"new_key\",\n            advanced=False,\n        )\n        value: Any = SchemaField(\n            default=None,\n            description=\"The value for the new entry.\",\n            placeholder=\"new_value\",\n            advanced=False,\n        )\n        entries: dict[Any, Any] = SchemaField(\n            default={},\n            description=\"The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.\",\n            advanced=True,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 338,
          "end_line": 342,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 338,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 339,
              "line": "        updated_dictionary: dict = SchemaField("
            },
            {
              "lineno": 340,
              "line": "            description=\"The dictionary with the new entry added.\""
            },
            {
              "lineno": 341,
              "line": "        )"
            },
            {
              "lineno": 342,
              "line": "        error: str = SchemaField(description=\"Error message if the operation failed.\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 338,
              "end_line": 342,
              "label": "    class Output(BlockSchema):\n        updated_dictionary: dict = SchemaField(\n            description=\"The dictionary with the new entry added.\"\n        )\n        error: str = SchemaField(description=\"Error message if the operation failed.\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 314,
          "line": "class AddToDictionaryBlock(Block):"
        },
        {
          "lineno": 337,
          "line": ""
        },
        {
          "lineno": 343,
          "line": ""
        },
        {
          "lineno": 379,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 314,
          "end_line": 314,
          "label": "class AddToDictionaryBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 337,
          "end_line": 337,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 343,
          "end_line": 343,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 379,
          "end_line": 379,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "name": "AddToListBlock",
      "type": "class",
      "start_line": 392,
      "end_line": 469,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 420,
          "end_line": 456,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 420,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 421,
              "line": "        super().__init__("
            },
            {
              "lineno": 422,
              "line": "            id=\"aeb08fc1-2fc1-4141-bc8e-f758f183a822\","
            },
            {
              "lineno": 423,
              "line": "            description=\"Adds a new entry to a list. The entry can be of any type. If no list is provided, a new one is created.\","
            },
            {
              "lineno": 424,
              "line": "            categories={BlockCategory.BASIC},"
            },
            {
              "lineno": 425,
              "line": "            input_schema=AddToListBlock.Input,"
            },
            {
              "lineno": 426,
              "line": "            output_schema=AddToListBlock.Output,"
            },
            {
              "lineno": 427,
              "line": "            test_input=["
            },
            {
              "lineno": 428,
              "line": "                {"
            },
            {
              "lineno": 429,
              "line": "                    \"list\": [1, \"string\", {\"existing_key\": \"existing_value\"}],"
            },
            {
              "lineno": 430,
              "line": "                    \"entry\": {\"new_key\": \"new_value\"},"
            },
            {
              "lineno": 431,
              "line": "                    \"position\": 1,"
            },
            {
              "lineno": 432,
              "line": "                },"
            },
            {
              "lineno": 433,
              "line": "                {\"entry\": \"first_entry\"},"
            },
            {
              "lineno": 434,
              "line": "                {\"list\": [\"a\", \"b\", \"c\"], \"entry\": \"d\"},"
            },
            {
              "lineno": 435,
              "line": "                {"
            },
            {
              "lineno": 436,
              "line": "                    \"entry\": \"e\","
            },
            {
              "lineno": 437,
              "line": "                    \"entries\": [\"f\", \"g\"],"
            },
            {
              "lineno": 438,
              "line": "                    \"list\": [\"a\", \"b\"],"
            },
            {
              "lineno": 439,
              "line": "                    \"position\": 1,"
            },
            {
              "lineno": 440,
              "line": "                },"
            },
            {
              "lineno": 441,
              "line": "            ],"
            },
            {
              "lineno": 442,
              "line": "            test_output=["
            },
            {
              "lineno": 443,
              "line": "                ("
            },
            {
              "lineno": 444,
              "line": "                    \"updated_list\","
            },
            {
              "lineno": 445,
              "line": "                    ["
            },
            {
              "lineno": 446,
              "line": "                        1,"
            },
            {
              "lineno": 447,
              "line": "                        {\"new_key\": \"new_value\"},"
            },
            {
              "lineno": 448,
              "line": "                        \"string\","
            },
            {
              "lineno": 449,
              "line": "                        {\"existing_key\": \"existing_value\"},"
            },
            {
              "lineno": 450,
              "line": "                    ],"
            },
            {
              "lineno": 451,
              "line": "                ),"
            },
            {
              "lineno": 452,
              "line": "                (\"updated_list\", [\"first_entry\"]),"
            },
            {
              "lineno": 453,
              "line": "                (\"updated_list\", [\"a\", \"b\", \"c\", \"d\"]),"
            },
            {
              "lineno": 454,
              "line": "                (\"updated_list\", [\"a\", \"f\", \"g\", \"e\", \"b\"]),"
            },
            {
              "lineno": 455,
              "line": "            ],"
            },
            {
              "lineno": 456,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 420,
              "end_line": 456,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"aeb08fc1-2fc1-4141-bc8e-f758f183a822\",\n            description=\"Adds a new entry to a list. The entry can be of any type. If no list is provided, a new one is created.\",\n            categories={BlockCategory.BASIC},\n            input_schema=AddToListBlock.Input,\n            output_schema=AddToListBlock.Output,\n            test_input=[\n                {\n                    \"list\": [1, \"string\", {\"existing_key\": \"existing_value\"}],\n                    \"entry\": {\"new_key\": \"new_value\"},\n                    \"position\": 1,\n                },\n                {\"entry\": \"first_entry\"},\n                {\"list\": [\"a\", \"b\", \"c\"], \"entry\": \"d\"},\n                {\n                    \"entry\": \"e\",\n                    \"entries\": [\"f\", \"g\"],\n                    \"list\": [\"a\", \"b\"],\n                    \"position\": 1,\n                },\n            ],\n            test_output=[\n                (\n                    \"updated_list\",\n                    [\n                        1,\n                        {\"new_key\": \"new_value\"},\n                        \"string\",\n                        {\"existing_key\": \"existing_value\"},\n                    ],\n                ),\n                (\"updated_list\", [\"first_entry\"]),\n                (\"updated_list\", [\"a\", \"b\", \"c\", \"d\"]),\n                (\"updated_list\", [\"a\", \"f\", \"g\", \"e\", \"b\"]),\n            ],\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 458,
          "end_line": 469,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 458,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 459,
              "line": "        entries_added = input_data.entries.copy()"
            },
            {
              "lineno": 460,
              "line": "        if input_data.entry:"
            },
            {
              "lineno": 461,
              "line": "            entries_added.append(input_data.entry)"
            },
            {
              "lineno": 462,
              "line": ""
            },
            {
              "lineno": 463,
              "line": "        updated_list = input_data.list.copy()"
            },
            {
              "lineno": 464,
              "line": "        if (pos := input_data.position) is not None:"
            },
            {
              "lineno": 465,
              "line": "            updated_list = updated_list[:pos] + entries_added + updated_list[pos:]"
            },
            {
              "lineno": 466,
              "line": "        else:"
            },
            {
              "lineno": 467,
              "line": "            updated_list += entries_added"
            },
            {
              "lineno": 468,
              "line": ""
            },
            {
              "lineno": 469,
              "line": "        yield \"updated_list\", updated_list"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 458,
              "end_line": 459,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        entries_added = input_data.entries.copy()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 460,
                  "end_line": 460,
                  "label": "        if input_data.entry:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 461,
                      "end_line": 461,
                      "label": "            entries_added.append(input_data.entry)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 463,
                          "end_line": 464,
                          "label": "        updated_list = input_data.list.copy()\n        if (pos := input_data.position) is not None:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 465,
                              "end_line": 465,
                              "label": "            updated_list = updated_list[:pos] + entries_added + updated_list[pos:]",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 469,
                                  "end_line": 469,
                                  "label": "        yield \"updated_list\", updated_list",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 6,
                              "start_line": 467,
                              "end_line": 467,
                              "label": "            updated_list += entries_added",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 469,
                                  "end_line": 469,
                                  "label": "        yield \"updated_list\", updated_list",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "start_line": 463,
                      "end_line": 464,
                      "label": "        updated_list = input_data.list.copy()\n        if (pos := input_data.position) is not None:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 465,
                          "end_line": 465,
                          "label": "            updated_list = updated_list[:pos] + entries_added + updated_list[pos:]",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 469,
                              "end_line": 469,
                              "label": "        yield \"updated_list\", updated_list",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "start_line": 467,
                          "end_line": 467,
                          "label": "            updated_list += entries_added",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 469,
                              "end_line": 469,
                              "label": "        yield \"updated_list\", updated_list",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 463,
                  "end_line": 464,
                  "label": "        updated_list = input_data.list.copy()\n        if (pos := input_data.position) is not None:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 465,
                      "end_line": 465,
                      "label": "            updated_list = updated_list[:pos] + entries_added + updated_list[pos:]",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 469,
                          "end_line": 469,
                          "label": "        yield \"updated_list\", updated_list",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "start_line": 467,
                      "end_line": 467,
                      "label": "            updated_list += entries_added",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 469,
                          "end_line": 469,
                          "label": "        yield \"updated_list\", updated_list",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 393,
          "end_line": 412,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 393,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 394,
              "line": "        list: List[Any] = SchemaField("
            },
            {
              "lineno": 395,
              "line": "            default=[],"
            },
            {
              "lineno": 396,
              "line": "            advanced=False,"
            },
            {
              "lineno": 397,
              "line": "            description=\"The list to add the entry to. If not provided, a new list will be created.\","
            },
            {
              "lineno": 398,
              "line": "        )"
            },
            {
              "lineno": 399,
              "line": "        entry: Any = SchemaField("
            },
            {
              "lineno": 400,
              "line": "            description=\"The entry to add to the list. Can be of any type (string, int, dict, etc.).\","
            },
            {
              "lineno": 401,
              "line": "            advanced=False,"
            },
            {
              "lineno": 402,
              "line": "            default=None,"
            },
            {
              "lineno": 403,
              "line": "        )"
            },
            {
              "lineno": 404,
              "line": "        entries: List[Any] = SchemaField("
            },
            {
              "lineno": 405,
              "line": "            default=[],"
            },
            {
              "lineno": 406,
              "line": "            description=\"The entries to add to the list. This is the batch version of the `entry` field.\","
            },
            {
              "lineno": 407,
              "line": "            advanced=True,"
            },
            {
              "lineno": 408,
              "line": "        )"
            },
            {
              "lineno": 409,
              "line": "        position: int | None = SchemaField("
            },
            {
              "lineno": 410,
              "line": "            default=None,"
            },
            {
              "lineno": 411,
              "line": "            description=\"The position to insert the new entry. If not provided, the entry will be appended to the end of the list.\","
            },
            {
              "lineno": 412,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 393,
              "end_line": 412,
              "label": "    class Input(BlockSchema):\n        list: List[Any] = SchemaField(\n            default=[],\n            advanced=False,\n            description=\"The list to add the entry to. If not provided, a new list will be created.\",\n        )\n        entry: Any = SchemaField(\n            description=\"The entry to add to the list. Can be of any type (string, int, dict, etc.).\",\n            advanced=False,\n            default=None,\n        )\n        entries: List[Any] = SchemaField(\n            default=[],\n            description=\"The entries to add to the list. This is the batch version of the `entry` field.\",\n            advanced=True,\n        )\n        position: int | None = SchemaField(\n            default=None,\n            description=\"The position to insert the new entry. If not provided, the entry will be appended to the end of the list.\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 414,
          "end_line": 418,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 414,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 415,
              "line": "        updated_list: List[Any] = SchemaField("
            },
            {
              "lineno": 416,
              "line": "            description=\"The list with the new entry added.\""
            },
            {
              "lineno": 417,
              "line": "        )"
            },
            {
              "lineno": 418,
              "line": "        error: str = SchemaField(description=\"Error message if the operation failed.\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 414,
              "end_line": 418,
              "label": "    class Output(BlockSchema):\n        updated_list: List[Any] = SchemaField(\n            description=\"The list with the new entry added.\"\n        )\n        error: str = SchemaField(description=\"Error message if the operation failed.\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 392,
          "line": "class AddToListBlock(Block):"
        },
        {
          "lineno": 413,
          "line": ""
        },
        {
          "lineno": 419,
          "line": ""
        },
        {
          "lineno": 457,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "NoteBlock",
      "type": "class",
      "start_line": 472,
      "end_line": 494,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 479,
          "end_line": 491,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 479,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 480,
              "line": "        super().__init__("
            },
            {
              "lineno": 481,
              "line": "            id=\"cc10ff7b-7753-4ff2-9af6-9399b1a7eddc\","
            },
            {
              "lineno": 482,
              "line": "            description=\"This block is used to display a sticky note with the given text.\","
            },
            {
              "lineno": 483,
              "line": "            categories={BlockCategory.BASIC},"
            },
            {
              "lineno": 484,
              "line": "            input_schema=NoteBlock.Input,"
            },
            {
              "lineno": 485,
              "line": "            output_schema=NoteBlock.Output,"
            },
            {
              "lineno": 486,
              "line": "            test_input={\"text\": \"Hello, World!\"},"
            },
            {
              "lineno": 487,
              "line": "            test_output=["
            },
            {
              "lineno": 488,
              "line": "                (\"output\", \"Hello, World!\"),"
            },
            {
              "lineno": 489,
              "line": "            ],"
            },
            {
              "lineno": 490,
              "line": "            block_type=BlockType.NOTE,"
            },
            {
              "lineno": 491,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 479,
              "end_line": 491,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"cc10ff7b-7753-4ff2-9af6-9399b1a7eddc\",\n            description=\"This block is used to display a sticky note with the given text.\",\n            categories={BlockCategory.BASIC},\n            input_schema=NoteBlock.Input,\n            output_schema=NoteBlock.Output,\n            test_input={\"text\": \"Hello, World!\"},\n            test_output=[\n                (\"output\", \"Hello, World!\"),\n            ],\n            block_type=BlockType.NOTE,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 493,
          "end_line": 494,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 493,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 494,
              "line": "        yield \"output\", input_data.text"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 493,
              "end_line": 493,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 494,
                  "end_line": 494,
                  "label": "        yield \"output\", input_data.text",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 473,
          "end_line": 474,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 473,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 474,
              "line": "        text: str = SchemaField(description=\"The text to display in the sticky note.\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 473,
              "end_line": 474,
              "label": "    class Input(BlockSchema):\n        text: str = SchemaField(description=\"The text to display in the sticky note.\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 476,
          "end_line": 477,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 476,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 477,
              "line": "        output: str = SchemaField(description=\"The text to display in the sticky note.\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 476,
              "end_line": 477,
              "label": "    class Output(BlockSchema):\n        output: str = SchemaField(description=\"The text to display in the sticky note.\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 472,
          "line": "class NoteBlock(Block):"
        },
        {
          "lineno": 475,
          "line": ""
        },
        {
          "lineno": 478,
          "line": ""
        },
        {
          "lineno": 492,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 472,
          "end_line": 472,
          "label": "class NoteBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 475,
          "end_line": 492,
          "label": "\n\n",
          "successors": []
        }
      ]
    },
    {
      "name": "CreateDictionaryBlock",
      "type": "class",
      "start_line": 497,
      "end_line": 544,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 512,
          "end_line": 537,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 512,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 513,
              "line": "        super().__init__("
            },
            {
              "lineno": 514,
              "line": "            id=\"b924ddf4-de4f-4b56-9a85-358930dcbc91\","
            },
            {
              "lineno": 515,
              "line": "            description=\"Creates a dictionary with the specified key-value pairs. Use this when you know all the values you want to add upfront.\","
            },
            {
              "lineno": 516,
              "line": "            categories={BlockCategory.DATA},"
            },
            {
              "lineno": 517,
              "line": "            input_schema=CreateDictionaryBlock.Input,"
            },
            {
              "lineno": 518,
              "line": "            output_schema=CreateDictionaryBlock.Output,"
            },
            {
              "lineno": 519,
              "line": "            test_input=["
            },
            {
              "lineno": 520,
              "line": "                {"
            },
            {
              "lineno": 521,
              "line": "                    \"values\": {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"},"
            },
            {
              "lineno": 522,
              "line": "                },"
            },
            {
              "lineno": 523,
              "line": "                {"
            },
            {
              "lineno": 524,
              "line": "                    \"values\": {\"numbers\": [1, 2, 3], \"active\": True, \"score\": 95.5},"
            },
            {
              "lineno": 525,
              "line": "                },"
            },
            {
              "lineno": 526,
              "line": "            ],"
            },
            {
              "lineno": 527,
              "line": "            test_output=["
            },
            {
              "lineno": 528,
              "line": "                ("
            },
            {
              "lineno": 529,
              "line": "                    \"dictionary\","
            },
            {
              "lineno": 530,
              "line": "                    {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"},"
            },
            {
              "lineno": 531,
              "line": "                ),"
            },
            {
              "lineno": 532,
              "line": "                ("
            },
            {
              "lineno": 533,
              "line": "                    \"dictionary\","
            },
            {
              "lineno": 534,
              "line": "                    {\"numbers\": [1, 2, 3], \"active\": True, \"score\": 95.5},"
            },
            {
              "lineno": 535,
              "line": "                ),"
            },
            {
              "lineno": 536,
              "line": "            ],"
            },
            {
              "lineno": 537,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 512,
              "end_line": 537,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"b924ddf4-de4f-4b56-9a85-358930dcbc91\",\n            description=\"Creates a dictionary with the specified key-value pairs. Use this when you know all the values you want to add upfront.\",\n            categories={BlockCategory.DATA},\n            input_schema=CreateDictionaryBlock.Input,\n            output_schema=CreateDictionaryBlock.Output,\n            test_input=[\n                {\n                    \"values\": {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"},\n                },\n                {\n                    \"values\": {\"numbers\": [1, 2, 3], \"active\": True, \"score\": 95.5},\n                },\n            ],\n            test_output=[\n                (\n                    \"dictionary\",\n                    {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"},\n                ),\n                (\n                    \"dictionary\",\n                    {\"numbers\": [1, 2, 3], \"active\": True, \"score\": 95.5},\n                ),\n            ],\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 539,
          "end_line": 544,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 539,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 540,
              "line": "        try:"
            },
            {
              "lineno": 541,
              "line": "            # The values are already validated by Pydantic schema"
            },
            {
              "lineno": 542,
              "line": "            yield \"dictionary\", input_data.values"
            },
            {
              "lineno": 543,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 544,
              "line": "            yield \"error\", f\"Failed to create dictionary: {str(e)}\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 539,
              "end_line": 539,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 540,
                  "end_line": 542,
                  "label": "        try:\n            # The values are already validated by Pydantic schema\n            yield \"dictionary\", input_data.values",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 543,
                      "end_line": 544,
                      "label": "        except Exception as e:\n            yield \"error\", f\"Failed to create dictionary: {str(e)}\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 498,
          "end_line": 502,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 498,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 499,
              "line": "        values: dict[str, Any] = SchemaField("
            },
            {
              "lineno": 500,
              "line": "            description=\"Key-value pairs to create the dictionary with\","
            },
            {
              "lineno": 501,
              "line": "            placeholder=\"e.g., {'name': 'Alice', 'age': 25}\","
            },
            {
              "lineno": 502,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 498,
              "end_line": 502,
              "label": "    class Input(BlockSchema):\n        values: dict[str, Any] = SchemaField(\n            description=\"Key-value pairs to create the dictionary with\",\n            placeholder=\"e.g., {'name': 'Alice', 'age': 25}\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 504,
          "end_line": 510,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 504,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 505,
              "line": "        dictionary: dict[str, Any] = SchemaField("
            },
            {
              "lineno": 506,
              "line": "            description=\"The created dictionary containing the specified key-value pairs\""
            },
            {
              "lineno": 507,
              "line": "        )"
            },
            {
              "lineno": 508,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 509,
              "line": "            description=\"Error message if dictionary creation failed\""
            },
            {
              "lineno": 510,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 504,
              "end_line": 510,
              "label": "    class Output(BlockSchema):\n        dictionary: dict[str, Any] = SchemaField(\n            description=\"The created dictionary containing the specified key-value pairs\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if dictionary creation failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 497,
          "line": "class CreateDictionaryBlock(Block):"
        },
        {
          "lineno": 503,
          "line": ""
        },
        {
          "lineno": 511,
          "line": ""
        },
        {
          "lineno": 538,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 497,
          "end_line": 497,
          "label": "class CreateDictionaryBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 503,
          "end_line": 503,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 511,
          "end_line": 511,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 538,
          "end_line": 538,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "name": "CreateListBlock",
      "type": "class",
      "start_line": 547,
      "end_line": 592,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 560,
          "end_line": 585,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 560,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 561,
              "line": "        super().__init__("
            },
            {
              "lineno": 562,
              "line": "            id=\"a912d5c7-6e00-4542-b2a9-8034136930e4\","
            },
            {
              "lineno": 563,
              "line": "            description=\"Creates a list with the specified values. Use this when you know all the values you want to add upfront.\","
            },
            {
              "lineno": 564,
              "line": "            categories={BlockCategory.DATA},"
            },
            {
              "lineno": 565,
              "line": "            input_schema=CreateListBlock.Input,"
            },
            {
              "lineno": 566,
              "line": "            output_schema=CreateListBlock.Output,"
            },
            {
              "lineno": 567,
              "line": "            test_input=["
            },
            {
              "lineno": 568,
              "line": "                {"
            },
            {
              "lineno": 569,
              "line": "                    \"values\": [\"Alice\", 25, True],"
            },
            {
              "lineno": 570,
              "line": "                },"
            },
            {
              "lineno": 571,
              "line": "                {"
            },
            {
              "lineno": 572,
              "line": "                    \"values\": [1, 2, 3, \"four\", {\"key\": \"value\"}],"
            },
            {
              "lineno": 573,
              "line": "                },"
            },
            {
              "lineno": 574,
              "line": "            ],"
            },
            {
              "lineno": 575,
              "line": "            test_output=["
            },
            {
              "lineno": 576,
              "line": "                ("
            },
            {
              "lineno": 577,
              "line": "                    \"list\","
            },
            {
              "lineno": 578,
              "line": "                    [\"Alice\", 25, True],"
            },
            {
              "lineno": 579,
              "line": "                ),"
            },
            {
              "lineno": 580,
              "line": "                ("
            },
            {
              "lineno": 581,
              "line": "                    \"list\","
            },
            {
              "lineno": 582,
              "line": "                    [1, 2, 3, \"four\", {\"key\": \"value\"}],"
            },
            {
              "lineno": 583,
              "line": "                ),"
            },
            {
              "lineno": 584,
              "line": "            ],"
            },
            {
              "lineno": 585,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 560,
              "end_line": 585,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"a912d5c7-6e00-4542-b2a9-8034136930e4\",\n            description=\"Creates a list with the specified values. Use this when you know all the values you want to add upfront.\",\n            categories={BlockCategory.DATA},\n            input_schema=CreateListBlock.Input,\n            output_schema=CreateListBlock.Output,\n            test_input=[\n                {\n                    \"values\": [\"Alice\", 25, True],\n                },\n                {\n                    \"values\": [1, 2, 3, \"four\", {\"key\": \"value\"}],\n                },\n            ],\n            test_output=[\n                (\n                    \"list\",\n                    [\"Alice\", 25, True],\n                ),\n                (\n                    \"list\",\n                    [1, 2, 3, \"four\", {\"key\": \"value\"}],\n                ),\n            ],\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 587,
          "end_line": 592,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 587,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 588,
              "line": "        try:"
            },
            {
              "lineno": 589,
              "line": "            # The values are already validated by Pydantic schema"
            },
            {
              "lineno": 590,
              "line": "            yield \"list\", input_data.values"
            },
            {
              "lineno": 591,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 592,
              "line": "            yield \"error\", f\"Failed to create list: {str(e)}\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 587,
              "end_line": 590,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            # The values are already validated by Pydantic schema\n            yield \"list\", input_data.values",
              "successors": [
                {
                  "id": 2,
                  "start_line": 591,
                  "end_line": 592,
                  "label": "        except Exception as e:\n            yield \"error\", f\"Failed to create list: {str(e)}\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 548,
          "end_line": 552,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 548,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 549,
              "line": "        values: List[Any] = SchemaField("
            },
            {
              "lineno": 550,
              "line": "            description=\"A list of values to be combined into a new list.\","
            },
            {
              "lineno": 551,
              "line": "            placeholder=\"e.g., ['Alice', 25, True]\","
            },
            {
              "lineno": 552,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 548,
              "end_line": 552,
              "label": "    class Input(BlockSchema):",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 554,
          "end_line": 558,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 554,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 555,
              "line": "        list: List[Any] = SchemaField("
            },
            {
              "lineno": 556,
              "line": "            description=\"The created list containing the specified values.\""
            },
            {
              "lineno": 557,
              "line": "        )"
            },
            {
              "lineno": 558,
              "line": "        error: str = SchemaField(description=\"Error message if list creation failed.\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 554,
              "end_line": 558,
              "label": "    class Output(BlockSchema):\n        list: List[Any] = SchemaField(\n            description=\"The created list containing the specified values.\"\n        )\n        error: str = SchemaField(description=\"Error message if list creation failed.\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 547,
          "line": "class CreateListBlock(Block):"
        },
        {
          "lineno": 553,
          "line": ""
        },
        {
          "lineno": 559,
          "line": ""
        },
        {
          "lineno": 586,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 547,
          "end_line": 547,
          "label": "class CreateListBlock(Block):",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 553,
          "end_line": 553,
          "label": "",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 559,
          "end_line": 559,
          "label": "",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 586,
          "end_line": 586,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from typing import Any, List"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema, BlockType"
    },
    {
      "lineno": 4,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 5,
      "line": "from backend.util.mock import MockObject"
    },
    {
      "lineno": 6,
      "line": "from backend.util.text import TextFormatter"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "formatter = TextFormatter()"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 53,
      "line": ""
    },
    {
      "lineno": 75,
      "line": ""
    },
    {
      "lineno": 76,
      "line": ""
    },
    {
      "lineno": 132,
      "line": ""
    },
    {
      "lineno": 133,
      "line": ""
    },
    {
      "lineno": 215,
      "line": ""
    },
    {
      "lineno": 312,
      "line": ""
    },
    {
      "lineno": 313,
      "line": ""
    },
    {
      "lineno": 390,
      "line": ""
    },
    {
      "lineno": 391,
      "line": ""
    },
    {
      "lineno": 470,
      "line": ""
    },
    {
      "lineno": 471,
      "line": ""
    },
    {
      "lineno": 495,
      "line": ""
    },
    {
      "lineno": 496,
      "line": ""
    },
    {
      "lineno": 545,
      "line": ""
    },
    {
      "lineno": 546,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 8,
      "label": "from typing import Any, List\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema, BlockType\nfrom backend.data.model import SchemaField\nfrom backend.util.mock import MockObject\nfrom backend.util.text import TextFormatter\n\nformatter = TextFormatter()",
      "successors": []
    }
  ]
}