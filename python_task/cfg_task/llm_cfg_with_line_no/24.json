{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 61,
  "functions": [],
  "classes": [
    {
      "name": "Slant3DSlicerBlock",
      "type": "class",
      "start_line": 13,
      "end_line": 61,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 27,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 27,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 28,
              "line": "        super().__init__("
            },
            {
              "lineno": 29,
              "line": "            id=\"f8a12c8d-3e4b-4d5f-b6a7-8c9d0e1f2g3h\","
            },
            {
              "lineno": 30,
              "line": "            description=\"Slice a 3D model file and get pricing information\","
            },
            {
              "lineno": 31,
              "line": "            input_schema=self.Input,"
            },
            {
              "lineno": 32,
              "line": "            output_schema=self.Output,"
            },
            {
              "lineno": 33,
              "line": "            test_input={"
            },
            {
              "lineno": 34,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 35,
              "line": "                \"file_url\": \"https://example.com/model.stl\","
            },
            {
              "lineno": 36,
              "line": "            },"
            },
            {
              "lineno": 37,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 38,
              "line": "            test_output=[(\"message\", \"Slicing successful\"), (\"price\", 8.23)],"
            },
            {
              "lineno": 39,
              "line": "            test_mock={"
            },
            {
              "lineno": 40,
              "line": "                \"_make_request\": lambda *args, **kwargs: {"
            },
            {
              "lineno": 41,
              "line": "                    \"message\": \"Slicing successful\","
            },
            {
              "lineno": 42,
              "line": "                    \"data\": {\"price\": 8.23},"
            },
            {
              "lineno": 43,
              "line": "                }"
            },
            {
              "lineno": 44,
              "line": "            },"
            },
            {
              "lineno": 45,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 27,
              "end_line": 45,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"f8a12c8d-3e4b-4d5f-b6a7-8c9d0e1f2g3h\",\n            description=\"Slice a 3D model file and get pricing information\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"file_url\": \"https://example.com/model.stl\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"message\", \"Slicing successful\"), (\"price\", 8.23)],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"message\": \"Slicing successful\",\n                    \"data\": {\"price\": 8.23},\n                }\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 47,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 47,
              "line": "    def run("
            },
            {
              "lineno": 48,
              "line": "        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs"
            },
            {
              "lineno": 49,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 50,
              "line": "        try:"
            },
            {
              "lineno": 51,
              "line": "            result = self._make_request("
            },
            {
              "lineno": 52,
              "line": "                \"POST\","
            },
            {
              "lineno": 53,
              "line": "                \"slicer\","
            },
            {
              "lineno": 54,
              "line": "                credentials.api_key.get_secret_value(),"
            },
            {
              "lineno": 55,
              "line": "                json={\"fileURL\": input_data.file_url},"
            },
            {
              "lineno": 56,
              "line": "            )"
            },
            {
              "lineno": 57,
              "line": "            yield \"message\", result[\"message\"]"
            },
            {
              "lineno": 58,
              "line": "            yield \"price\", result[\"data\"][\"price\"]"
            },
            {
              "lineno": 59,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 60,
              "line": "            yield \"error\", str(e)"
            },
            {
              "lineno": 61,
              "line": "            raise"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 47,
              "end_line": 49,
              "label": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 50,
                  "end_line": 58,
                  "label": "        try:\n            result = self._make_request(\n                \"POST\",\n                \"slicer\",\n                credentials.api_key.get_secret_value(),\n                json={\"fileURL\": input_data.file_url},\n            )\n            yield \"message\", result[\"message\"]\n            yield \"price\", result[\"data\"][\"price\"]",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 59,
                      "end_line": 61,
                      "label": "        except Exception as e:\n            yield \"error\", str(e)\n            raise",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 16,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 16,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 17,
              "line": "        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()"
            },
            {
              "lineno": 18,
              "line": "        file_url: str = SchemaField("
            },
            {
              "lineno": 19,
              "line": "            description=\"URL of the 3D model file to slice (STL)\""
            },
            {
              "lineno": 20,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 16,
              "end_line": 20,
              "label": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        file_url: str = SchemaField(\n            description=\"URL of the 3D model file to slice (STL)\"\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 22,
          "end_line": 25,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 23,
              "line": "        message: str = SchemaField(description=\"Response message\")"
            },
            {
              "lineno": 24,
              "line": "        price: float = SchemaField(description=\"Calculated price for printing\")"
            },
            {
              "lineno": 25,
              "line": "        error: str = SchemaField(description=\"Error message if slicing failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "start_line": 22,
              "end_line": 25,
              "label": "    class Output(BlockSchema):\n        message: str = SchemaField(description=\"Response message\")\n        price: float = SchemaField(description=\"Calculated price for printing\")\n        error: str = SchemaField(description=\"Error message if slicing failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 13,
          "line": "class Slant3DSlicerBlock(Slant3DBlockBase):"
        },
        {
          "lineno": 14,
          "line": "    \"\"\"Block for slicing 3D model files\"\"\""
        },
        {
          "lineno": 15,
          "line": ""
        },
        {
          "lineno": 21,
          "line": ""
        },
        {
          "lineno": 26,
          "line": ""
        },
        {
          "lineno": 46,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "start_line": 13,
          "end_line": 14,
          "label": "class Slant3DSlicerBlock(Slant3DBlockBase):\n    \"\"\"Block for slicing 3D model files\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 15,
              "end_line": 46,
              "label": "",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from backend.data.block import BlockOutput, BlockSchema"
    },
    {
      "lineno": 2,
      "line": "from backend.data.model import APIKeyCredentials, SchemaField"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from ._api import ("
    },
    {
      "lineno": 5,
      "line": "    TEST_CREDENTIALS,"
    },
    {
      "lineno": 6,
      "line": "    TEST_CREDENTIALS_INPUT,"
    },
    {
      "lineno": 7,
      "line": "    Slant3DCredentialsField,"
    },
    {
      "lineno": 8,
      "line": "    Slant3DCredentialsInput,"
    },
    {
      "lineno": 9,
      "line": ")"
    },
    {
      "lineno": 10,
      "line": "from .base import Slant3DBlockBase"
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "from backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField\n",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 10,
          "label": "\nfrom ._api import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    Slant3DCredentialsField,\n    Slant3DCredentialsInput,\n)\nfrom .base import Slant3DBlockBase\n",
          "successors": []
        }
      ]
    }
  ]
}