{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 8,
      "label": "\"\"\"\nMinimax helps to achieve maximum score in a game by checking all possible moves\ndepth is current depth in game tree.\nnodeIndex is index of current node in scores[].\nif move is of maximizer return true else false\nleaves of game tree is stored in scores[]\nheight is maximum height of Game tree\n\"\"\"",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 9,
      "end_line": 10,
      "label": "from __future__ import annotations\nimport math",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 11,
      "end_line": 11,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        {
          "id": 4,
          "start_line": 12,
          "end_line": 14,
          "label": "import doctest\n    doctest.testmod()\n    main()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "minimax",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 7,
          "label": "def main() -> None:\n    # Sample scores and height calculation\n    scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    height = math.log(len(scores), 2)\n    # Calculate and print the optimal value using the minimax algorithm\n    print(\"Optimal value : \", end=\"\")\n    print(minimax(0, 0, True, scores, height))",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}