{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 4,
      "label": "from typing import Any\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.json import json",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "StepThroughItemsBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 20,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"f66a3543-28d3-4ab5-8945-9b336371e2ce\",\n            input_schema=StepThroughItemsBlock.Input,\n            output_schema=StepThroughItemsBlock.Output,\n            categories={BlockCategory.LOGIC},\n            description=\"Iterates over a list or dictionary and outputs each item.\",\n            test_input={\"items\": [1, 2, 3, {\"key1\": \"value1\", \"key2\": \"value2\"}]},\n            test_output=[\n                (\"item\", 1),\n                (\"key\", 0),\n                (\"item\", 2),\n                (\"key\", 1),\n                (\"item\", 3),\n                (\"key\", 2),\n                (\"item\", {\"key1\": \"value1\", \"key2\": \"value2\"}),\n                (\"key\", 3),\n            ],\n            test_mock={},\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "for data in [input_data.items, input_data.items_object, input_data.items_str]:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 4,
                      "label": "if not data:\n                continue",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 8,
                      "label": "if isinstance(data, str):\n                items = json.loads(data)\n            else:\n                items = data",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 9,
                          "end_line": 14,
                          "label": "if isinstance(items, dict):\n                # If items is a dictionary, iterate over its values\n            else:",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 11,
                              "end_line": 13,
                              "label": "for item in items.values():\n                    yield \"item\", item\n                    yield \"key\", item",
                              "successors": []
                            },
                            {
                              "id": 7,
                              "start_line": 16,
                              "end_line": 18,
                              "label": "for index, item in enumerate(items):\n                    yield \"item\", item\n                    yield \"key\", index",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}