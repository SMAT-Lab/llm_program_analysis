{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 12,
      "label": "from enum import Enum\nfrom typing import Literal\nfrom e2b_code_interpreter import Sandbox\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 13,
      "end_line": 19,
      "label": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"e2b\",\n    api_key=SecretStr(\"mock-e2b-api-key\"),\n    title=\"Mock E2B API key\",\n    expires_at=None,\n)",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 20,
      "end_line": 25,
      "label": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "ProgrammingLanguage",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "CodeExecutionBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 28,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"0b02b072-abe7-11ef-8372-fb5d162dd712\",\n            description=\"Executes code in an isolated sandbox environment with internet access.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=CodeExecutionBlock.Input,\n            output_schema=CodeExecutionBlock.Output,\n            test_credentials=TEST_CREDENTIALS,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"code\": \"print('Hello World')\",\n                \"language\": ProgrammingLanguage.PYTHON.value,\n                \"setup_commands\": [],\n                \"timeout\": 300,\n                \"template_id\": \"\",\n            },\n            test_output=[\n                (\"response\", \"Hello World\"),\n                (\"stdout_logs\", \"Hello World\\n\"),\n            ],\n            test_mock={\n                \"execute_code\": lambda code, language, setup_commands, timeout, api_key, template_id: (\n                    \"Hello World\",\n                    \"Hello World\\n\",\n                    \"\",\n                ),\n            },\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "execute_code",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 9,
              "label": "def execute_code(\n        self,\n        code: str,\n        language: ProgrammingLanguage,\n        setup_commands: list[str],\n        timeout: int,\n        api_key: str,\n        template_id: str,\n    ):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 11,
                      "end_line": 18,
                      "label": "sandbox = None\n            if template_id:\n                sandbox = Sandbox(\n                    template=template_id, api_key=api_key, timeout=timeout\n                )\n            else:\n                sandbox = Sandbox(api_key=api_key, timeout=timeout)\n            if not sandbox:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 19,
                          "end_line": 19,
                          "label": "raise Exception(\"Sandbox not created\")",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "start_line": 20,
                          "end_line": 22,
                          "label": "# Running setup commands\n            for cmd in setup_commands:\n                sandbox.commands.run(cmd)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 24,
                              "end_line": 28,
                              "label": "execution = sandbox.run_code(\n                code,\n                language=language.value,\n                on_error=lambda e: sandbox.kill(),  # Kill the sandbox if there is an error\n            )",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 29,
                                  "end_line": 29,
                                  "label": "if execution.error:",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 30,
                                      "end_line": 30,
                                      "label": "raise Exception(execution.error)",
                                      "successors": []
                                    },
                                    {
                                      "id": 9,
                                      "start_line": 31,
                                      "end_line": 34,
                                      "label": "response = execution.text\n            stdout_logs = \"\".join(execution.logs.stdout)\n            stderr_logs = \"\".join(execution.logs.stderr)\n            return response, stdout_logs, stderr_logs",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "start_line": 35,
                  "end_line": 36,
                  "label": "except Exception as e:\n            raise e",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 4,
              "end_line": 4,
              "label": "try:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 5,
                  "end_line": 12,
                  "label": "response, stdout_logs, stderr_logs = self.execute_code(\n                input_data.code,\n                input_data.language,\n                input_data.setup_commands,\n                input_data.timeout,\n                credentials.api_key.get_secret_value(),\n                input_data.template_id,\n            )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 13,
                      "end_line": 13,
                      "label": "if response:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 14,
                          "end_line": 14,
                          "label": "yield \"response\", response",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 15,
                      "end_line": 15,
                      "label": "if stdout_logs:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 16,
                          "end_line": 16,
                          "label": "yield \"stdout_logs\", stdout_logs",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 17,
                      "end_line": 17,
                      "label": "if stderr_logs:",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 18,
                          "end_line": 18,
                          "label": "yield \"stderr_logs\", stderr_logs",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 9,
              "start_line": 19,
              "end_line": 19,
              "label": "except Exception as e:",
              "successors": [
                {
                  "id": 10,
                  "start_line": 20,
                  "end_line": 20,
                  "label": "yield \"error\", str(e)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}