{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 20,
      "label": "from enum import Enum\nfrom typing import Any, Dict, Literal, Optional\nfrom pydantic import SecretStr\nfrom requests.exceptions import RequestException\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"ideogram\",\n    api_key=SecretStr(\"mock-ideogram-api-key\"),\n    title=\"Mock Ideogram API key\",\n    expires_at=None,\n)",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 21,
      "end_line": 26,
      "label": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "IdeogramModelName",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "MagicPromptOption",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "StyleType",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "ColorPalettePreset",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "AspectRatio",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "UpscaleOption",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class UpscaleOption(str, Enum):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 3,
              "label": "AI_UPSCALE = \"AI Upscale\"\n    NO_UPSCALE = \"No Upscale\"",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "IdeogramModelBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 31,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"6ab085e2-20b3-4055-bc3e-08036e01eca6\",\n            description=\"This block runs Ideogram models with both simple and advanced settings.\",\n            categories={BlockCategory.AI},\n            input_schema=IdeogramModelBlock.Input,\n            output_schema=IdeogramModelBlock.Output,\n            test_input={\n                \"ideogram_model_name\": IdeogramModelName.V2,\n                \"prompt\": \"A futuristic cityscape at sunset\",\n                \"aspect_ratio\": AspectRatio.ASPECT_1_1,\n                \"upscale\": UpscaleOption.NO_UPSCALE,\n                \"magic_prompt_option\": MagicPromptOption.AUTO,\n                \"seed\": None,\n                \"style_type\": StyleType.AUTO,\n                \"negative_prompt\": None,\n                \"color_palette_name\": ColorPalettePreset.NONE,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, model_name, prompt, seed, aspect_ratio, magic_prompt_option, style_type, negative_prompt, color_palette_name: \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n                \"upscale_image\": lambda api_key, image_url: \"https://ideogram.ai/api/images/test-upscaled-image-url.png\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 18,
              "label": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        seed = input_data.seed\n        # Step 1: Generate the image\n        result = self.run_model(\n            api_key=credentials.api_key,\n            model_name=input_data.ideogram_model_name.value,\n            prompt=input_data.prompt,\n            seed=seed,\n            aspect_ratio=input_data.aspect_ratio.value,\n            magic_prompt_option=input_data.magic_prompt_option.value,\n            style_type=input_data.style_type.value,\n            negative_prompt=input_data.negative_prompt,\n            color_palette_name=input_data.color_palette_name.value,\n        )\n        # Step 2: Upscale the image if requested\n        if input_data.upscale == UpscaleOption.AI_UPSCALE:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 19,
                  "end_line": 22,
                  "label": "result = self.upscale_image(\n                api_key=credentials.api_key,\n                image_url=result,\n            )",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 23,
              "end_line": 23,
              "label": "yield \"result\", result",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run_model",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 13,
              "end_line": 26,
              "label": "url = \"https://api.ideogram.ai/generate\"\n        headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }\n        data: Dict[str, Any] = {\n            \"image_request\": {\n                \"prompt\": prompt,\n                \"model\": model_name,\n                \"aspect_ratio\": aspect_ratio,\n                \"magic_prompt_option\": magic_prompt_option,\n                \"style_type\": style_type,\n            }\n        }",
              "successors": [
                {
                  "id": 2,
                  "start_line": 27,
                  "end_line": 28,
                  "label": "if seed is not None:\n            data[\"image_request\"][\"seed\"] = seed",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 29,
                  "end_line": 30,
                  "label": "if negative_prompt:\n            data[\"image_request\"][\"negative_prompt\"] = negative_prompt",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 31,
                  "end_line": 32,
                  "label": "if color_palette_name != \"NONE\":\n            data[\"image_request\"][\"color_palette\"] = {\"name\": color_palette_name}",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 33,
                  "end_line": 35,
                  "label": "try:\n            response = requests.post(url, json=data, headers=headers)\n            return response.json()[\"data\"][0][\"url\"]",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 36,
                      "end_line": 37,
                      "label": "except RequestException as e:\n            raise Exception(f\"Failed to fetch image: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "upscale_image",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def upscale_image(self, api_key: SecretStr, image_url: str):\n        url = \"https://api.ideogram.ai/upscale\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 5,
                  "label": "headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "try:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 7,
                          "end_line": 21,
                          "label": "# Step 1: Download the image from the provided URL\n            image_response = requests.get(image_url)\n            # Step 2: Send the downloaded image to the upscale API\n            files = {\n                \"image_file\": (\"image.png\", image_response.content, \"image/png\"),\n            }\n            response = requests.post(\n                url,\n                headers=headers,\n                data={\n                    \"image_request\": \"{}\",  # Empty JSON object\n                },\n                files=files,\n            )\n            return response.json()[\"data\"][0][\"url\"]",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "start_line": 22,
                          "end_line": 23,
                          "label": "except RequestException as e:\n            raise Exception(f\"Failed to upscale image: {str(e)}\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}