{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 48,
      "label": "import asyncio\nimport logging\nfrom collections import defaultdict\nfrom typing import TYPE_CHECKING, Annotated, Any, Sequence\nimport pydantic\nfrom autogpt_libs.auth.middleware import auth_middleware\nfrom autogpt_libs.feature_flag.client import feature_flag\nfrom autogpt_libs.utils.cache import thread_cached\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import Optional, TypedDict\nimport backend.data.block\nimport backend.server.integrations.router\nimport backend.server.routers.analytics\nfrom backend.data import execution as execution_db\nfrom backend.data import graph as graph_db\nfrom backend.data.api_key import (\n    APIKeyError,\n    APIKeyNotFoundError,\n    APIKeyPermissionError,\n    APIKeyWithoutHash,\n    generate_api_key,\n    get_api_key_by_id,\n    list_user_api_keys,\n    revoke_api_key,\n    suspend_api_key,\n    update_api_key_permissions,\n)\nfrom backend.data.block import BlockInput, CompletedBlockOutput\nfrom backend.data.credit import get_block_costs, get_user_credit_model\nfrom backend.data.user import get_or_create_user\nfrom backend.executor import ExecutionManager, ExecutionScheduler, scheduler\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.webhooks.graph_lifecycle_hooks import (\n    on_graph_activate,\n    on_graph_deactivate,\n)\nfrom backend.server.model import (\n    CreateAPIKeyRequest,\n    CreateAPIKeyResponse,\n    CreateGraph,\n    SetGraphActiveVersion,\n    UpdatePermissionsRequest,\n)\nfrom backend.server.utils import get_user_id\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\nif TYPE_CHECKING:\n    from backend.data.model import Credentials",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 49,
      "end_line": 52,
      "label": "@thread_cached\n@thread_cached\nsettings = Settings()\nlogger = logging.getLogger(__name__)",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 53,
      "end_line": 54,
      "label": "integration_creds_manager = IntegrationCredentialsManager()\n_user_credit_model = get_user_credit_model()",
      "successors": []
    },
    {
      "id": 4,
      "start_line": 55,
      "end_line": 67,
      "label": "# Define the API routes\nv1_router = APIRouter()\nv1_router.include_router(\n    backend.server.integrations.router.router,\n    prefix=\"/integrations\",\n    tags=[\"integrations\"],\n)\nv1_router.include_router(\n    backend.server.routers.analytics.router,\n    prefix=\"/analytics\",\n    tags=[\"analytics\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 5,
      "start_line": 71,
      "end_line": 71,
      "label": "@v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])",
      "successors": []
    },
    {
      "id": 6,
      "start_line": 75,
      "end_line": 80,
      "label": "@v1_router.get(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])\n@v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 7,
      "start_line": 84,
      "end_line": 84,
      "label": "@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])",
      "successors": []
    },
    {
      "id": 8,
      "start_line": 88,
      "end_line": 91,
      "label": "@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\n@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
      "successors": []
    },
    {
      "id": 9,
      "start_line": 92,
      "end_line": 96,
      "label": "@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 10,
      "start_line": 97,
      "end_line": 101,
      "label": "@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 11,
      "start_line": 102,
      "end_line": 106,
      "label": "@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 12,
      "start_line": 107,
      "end_line": 109,
      "label": "@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
      "successors": []
    },
    {
      "id": 13,
      "start_line": 110,
      "end_line": 112,
      "label": "@v1_router.delete(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
      "successors": []
    },
    {
      "id": 14,
      "start_line": 113,
      "end_line": 115,
      "label": "@v1_router.put(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)",
      "successors": []
    },
    {
      "id": 15,
      "start_line": 116,
      "end_line": 120,
      "label": "@v1_router.put(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 16,
      "start_line": 121,
      "end_line": 125,
      "label": "@v1_router.put(\n    path=\"/graphs/{graph_id}/versions/active\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 17,
      "start_line": 126,
      "end_line": 130,
      "label": "@v1_router.post(\n    path=\"/graphs/{graph_id}/execute\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 18,
      "start_line": 131,
      "end_line": 135,
      "label": "@v1_router.post(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 19,
      "start_line": 136,
      "end_line": 140,
      "label": "@v1_router.get(\n    path=\"/executions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 20,
      "start_line": 141,
      "end_line": 145,
      "label": "@v1_router.get(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 21,
      "start_line": 149,
      "end_line": 153,
      "label": "@v1_router.get(\n    path=\"/templates\",\n    tags=[\"graphs\", \"templates\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 22,
      "start_line": 154,
      "end_line": 158,
      "label": "@v1_router.get(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 23,
      "start_line": 159,
      "end_line": 163,
      "label": "@v1_router.post(\n    path=\"/templates\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 24,
      "start_line": 167,
      "end_line": 171,
      "label": "@v1_router.post(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 25,
      "start_line": 172,
      "end_line": 176,
      "label": "@v1_router.delete(\n    path=\"/schedules/{schedule_id}\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 26,
      "start_line": 177,
      "end_line": 181,
      "label": "@v1_router.get(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 27,
      "start_line": 185,
      "end_line": 190,
      "label": "@v1_router.post(\n    \"/api-keys\",\n    response_model=list[CreateAPIKeyResponse] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": [
        {
          "id": 28,
          "start_line": 191,
          "end_line": 194,
          "label": "@feature_flag(\"api-keys-enabled\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
          "successors": []
        }
      ]
    },
    {
      "id": 29,
      "start_line": 195,
      "end_line": 200,
      "label": "@v1_router.get(\n    \"/api-keys\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": [
        {
          "id": 30,
          "start_line": 201,
          "end_line": 204,
          "label": "@feature_flag(\"api-keys-enabled\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
          "successors": []
        }
      ]
    },
    {
      "id": 31,
      "start_line": 205,
      "end_line": 210,
      "label": "@v1_router.get(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": [
        {
          "id": 32,
          "start_line": 211,
          "end_line": 214,
          "label": "@feature_flag(\"api-keys-enabled\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
          "successors": []
        }
      ]
    },
    {
      "id": 33,
      "start_line": 215,
      "end_line": 220,
      "label": "@v1_router.delete(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": [
        {
          "id": 34,
          "start_line": 221,
          "end_line": 228,
          "label": "@feature_flag(\"api-keys-enabled\")\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
          "successors": []
        }
      ]
    },
    {
      "id": 35,
      "start_line": 229,
      "end_line": 234,
      "label": "@v1_router.post(\n    \"/api-keys/{key_id}/suspend\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": [
        {
          "id": 36,
          "start_line": 235,
          "end_line": 242,
          "label": "@feature_flag(\"api-keys-enabled\")\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
          "successors": []
        }
      ]
    },
    {
      "id": 37,
      "start_line": 243,
      "end_line": 248,
      "label": "@v1_router.put(\n    \"/api-keys/{key_id}/permissions\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)",
      "successors": [
        {
          "id": 38,
          "start_line": 249,
          "end_line": 256,
          "label": "@feature_flag(\"api-keys-enabled\")\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "execution_manager_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def execution_manager_client() -> ExecutionManager:\n    return get_service_client(ExecutionManager)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "execution_scheduler_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_or_create_user_route",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "async def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n    user = await get_or_create_user(user_data)\n    return user.model_dump()",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_graph_blocks",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def get_graph_blocks() -> Sequence[dict[Any, Any]]:\n    blocks = [block() for block in backend.data.block.get_blocks().values()]\n    costs = get_block_costs()\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "execute_graph_block",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def execute_graph_block(block_id: str, data: BlockInput) -> CompletedBlockOutput:\n    obj = backend.data.block.get_block(block_id)\n    if not obj:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 5,
              "end_line": 8,
              "label": "output = defaultdict(list)\n    return output",
              "successors": [
                {
                  "id": 4,
                  "start_line": 6,
                  "end_line": 7,
                  "label": "for name, data in obj.execute(data):\n        output[name].append(data)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_user_credits",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "async def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_graphs",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "async def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 9,
          "label": "async def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 10,
              "end_line": 10,
              "label": "if not graph:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "id": 4,
          "start_line": 12,
          "end_line": 12,
          "label": "return graph",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_graph_all_versions",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "async def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 7,
              "end_line": 7,
              "label": "return graphs",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_new_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "async def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "do_create_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 7,
          "label": "async def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 8,
              "label": "if create_graph.graph:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 9,
                  "end_line": 9,
                  "label": "graph = graph_db.make_graph_model(create_graph.graph, user_id)",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 10,
              "end_line": 10,
              "label": "elif create_graph.template_id:",
              "successors": [
                {
                  "id": 5,
                  "start_line": 11,
                  "end_line": 17,
                  "label": "# Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 18,
                      "end_line": 18,
                      "label": "if not graph:",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 19,
                          "end_line": 21,
                          "label": "raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "start_line": 22,
                      "end_line": 22,
                      "label": "graph.version = 1",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 9,
              "start_line": 23,
              "end_line": 23,
              "label": "else:",
              "successors": [
                {
                  "id": 10,
                  "start_line": 24,
                  "end_line": 26,
                  "label": "raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "id": 11,
          "start_line": 27,
          "end_line": 35,
          "label": "graph.is_template = is_template\n    graph.is_active = not is_template\n    graph.reassign_ids(user_id=user_id, reassign_graph_id=True)\n    graph = await graph_db.create_graph(graph, user_id=user_id)\n    graph = await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )\n    return graph",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "delete_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 4,
          "end_line": 4,
          "label": "if active_version := await graph_db.get_graph(graph_id, user_id=user_id):",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 5,
              "label": "await on_graph_deactivate(active_version, get_credentials)",
              "successors": []
            }
          ]
        },
        {
          "id": 3,
          "start_line": 6,
          "end_line": 6,
          "label": "return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "get_credentials",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "update_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 7,
          "label": "async def update_graph(\n    graph_id: str,\n    graph: graph_db.Graph,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> graph_db.GraphModel:\n    # Sanity check\n    if graph.id and graph.id != graph_id:",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 8,
              "label": "raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")",
              "successors": []
            }
          ]
        },
        {
          "id": 3,
          "start_line": 9,
          "end_line": 11,
          "label": "# Determine new version\n    existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not existing_versions:",
          "successors": [
            {
              "id": 4,
              "start_line": 12,
              "end_line": 12,
              "label": "raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")",
              "successors": []
            }
          ]
        },
        {
          "id": 5,
          "start_line": 13,
          "end_line": 19,
          "label": "latest_version_number = max(g.version for g in existing_versions)\n    graph.version = latest_version_number + 1\n    latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )\n    current_active_version = next((v for v in existing_versions if v.is_active), None)\n    if latest_version_graph.is_template != graph.is_template:",
          "successors": [
            {
              "id": 6,
              "start_line": 20,
              "end_line": 22,
              "label": "raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )",
              "successors": []
            }
          ]
        },
        {
          "id": 7,
          "start_line": 23,
          "end_line": 27,
          "label": "graph.is_active = not graph.is_template\n    graph = graph_db.make_graph_model(graph, user_id)\n    graph.reassign_ids(user_id=user_id)\n    new_graph_version = await graph_db.create_graph(graph, user_id=user_id)\n    if new_graph_version.is_active:",
          "successors": [
            {
              "id": 8,
              "start_line": 29,
              "end_line": 43,
              "label": "new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n        # Ensure new version is the only active version\n            # Handle deactivation of the previously active version\n    return new_graph_version",
              "successors": [
                {
                  "id": 9,
                  "start_line": 34,
                  "end_line": 37,
                  "label": "await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n        if current_active_version:",
                  "successors": [
                    {
                      "id": 10,
                      "start_line": 39,
                      "end_line": 42,
                      "label": "await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "get_credentials",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "set_graph_active_version",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 10,
          "label": "new_active_version = request_body.active_graph_version\n    new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )\n    if not new_active_graph:",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 11,
              "label": "raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 12,
              "end_line": 24,
              "label": "current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)\n    # Handle activation of the new graph first to ensure continuity\n    await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )\n    # Ensure new version is the only active version\n    await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )\n    if current_active_graph and current_active_graph.version != new_active_version:",
              "successors": [
                {
                  "id": 4,
                  "start_line": 25,
                  "end_line": 29,
                  "label": "# Handle deactivation of the previously active version\n        await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "get_credentials",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "execute_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 6,
          "label": "try:",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 10,
              "label": "graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 11,
              "end_line": 13,
              "label": "except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "stop_graph_run",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 4,
          "end_line": 4,
          "label": "if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 5,
              "label": "raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 6,
              "end_line": 10,
              "label": "await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )\n    # Retrieve & return canceled graph execution in its final state\n    return await execution_db.get_execution_results(graph_exec_id)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_executions",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "async def get_executions(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[graph_db.GraphExecution]:\n    return await graph_db.get_executions(user_id=user_id)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_graph_run_node_execution_results",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 7,
          "label": "graph = await graph_db.get_graph(graph_id, user_id=user_id)\n    if not graph:",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 8,
              "label": "raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 9,
              "end_line": 9,
              "label": "return await execution_db.get_execution_results(graph_exec_id)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_templates",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "async def get_templates(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_template",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "async def get_template(\n    graph_id: str, version: int | None = None\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(graph_id, version, template=True)\n    if not graph:",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 7,
              "end_line": 7,
              "label": "return graph",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_new_template",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "async def create_new_template(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "return await do_create_graph(create_graph, is_template=True, user_id=user_id)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_schedule",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "async def create_schedule(\n    user_id: Annotated[str, Depends(get_user_id)],\n    schedule: ScheduleCreationRequest,\n) -> scheduler.JobInfo:\n    graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)\n    if not graph:",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 9,
              "label": "raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 10,
              "end_line": 18,
              "label": "return await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "delete_schedule",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "def delete_schedule(\n    schedule_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[Any, Any]:\n    execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\n    return {\"id\": schedule_id}",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_execution_schedules",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def get_execution_schedules(\n    user_id: Annotated[str, Depends(get_user_id)],\n    graph_id: str | None = None,\n) -> list[scheduler.JobInfo]:",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 8,
              "label": "return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_api_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "async def create_api_key(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n) -> CreateAPIKeyResponse:\n    \"\"\"Create a new API key\"\"\"\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 11,
              "label": "api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 12,
              "end_line": 12,
              "label": "return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_api_keys",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 5,
          "end_line": 5,
          "label": "try:",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "return await list_user_api_keys(user_id)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_api_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 5,
          "end_line": 5,
          "label": "try:",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "api_key = await get_api_key_by_id(key_id, user_id)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "if not api_key:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 8,
                      "end_line": 8,
                      "label": "raise HTTPException(status_code=404, detail=\"API key not found\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 9,
                  "end_line": 9,
                  "label": "return api_key",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "delete_api_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 5,
          "end_line": 5,
          "label": "try:",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "return await revoke_api_key(key_id, user_id)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "suspend_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 5,
          "end_line": 5,
          "label": "try:",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "return await suspend_api_key(key_id, user_id)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "update_permissions",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 7,
          "label": "async def update_permissions(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Update API key permissions\"\"\"\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 8,
              "label": "return await update_api_key_permissions(key_id, user_id, request.permissions)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "DeleteGraphResponse",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "ScheduleCreationRequest",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    }
  ]
}