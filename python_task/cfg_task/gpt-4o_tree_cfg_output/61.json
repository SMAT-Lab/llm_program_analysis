{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 10,
      "label": "import json\nfrom typing import Any, Type, TypeVar, overload\nimport jsonschema\nfrom fastapi.encoders import jsonable_encoder\nfrom .type import type_match\nT = TypeVar(\"T\")\n@overload\ndef loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ...\n@overload\ndef loads(data: str, *args, **kwargs) -> Any: ...",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "to_dict",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def to_dict(data) -> dict:\n    return jsonable_encoder(data)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "dumps",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def dumps(data) -> str:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "return json.dumps(jsonable_encoder(data))",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "loads",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def loads(data: str, *args, target_type: Type[T] | None = None, **kwargs) -> Any:\n    parsed = json.loads(data, *args, **kwargs)\n    if target_type:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "return type_match(parsed, target_type)",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 5,
              "end_line": 5,
              "label": "return parsed",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "validate_with_jsonschema",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 8,
          "end_line": 8,
          "label": "try:",
          "successors": [
            {
              "id": 2,
              "start_line": 9,
              "end_line": 10,
              "label": "jsonschema.validate(data, schema)\n        return None",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 11,
              "end_line": 12,
              "label": "except jsonschema.ValidationError as e:\n        return str(e)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}