{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "import pytest\nfrom ldclient import LDClient\nfrom autogpt_libs.feature_flag.client import feature_flag, mock_flag_variation",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 4,
      "end_line": 6,
      "label": "@pytest.fixture\n@pytest.mark.asyncio\n@pytest.mark.asyncio",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "ld_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "def ld_client(mocker):\n    client = mocker.Mock(spec=LDClient)\n    mocker.patch(\"ldclient.get\", return_value=client)\n    client.is_initialized.return_value = True\n    return client",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_feature_flag_enabled",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "async def test_feature_flag_enabled(ld_client):\n    ld_client.variation.return_value = True\n    @feature_flag(\"test-flag\")\n    result = test_function(user_id=\"test-user\")\n    assert result == \"success\"\n    ld_client.variation.assert_called_once()",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "test_function",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "async def test_function(user_id: str):\n        return \"success\"",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "test_feature_flag_unauthorized_response",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "async def test_feature_flag_unauthorized_response(ld_client):\n    ld_client.variation.return_value = False\n    @feature_flag(\"test-flag\")\n    result = test_function(user_id=\"test-user\")\n    assert result == {\"error\": \"disabled\"}",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "test_function",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "async def test_function(user_id: str):\n        return \"success\"",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "test_mock_flag_variation",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}