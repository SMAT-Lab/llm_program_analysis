{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 9,
      "label": "import functools\nimport logging\nimport os\nimport time\nfrom typing import Callable, ParamSpec, Tuple, TypeVar\nfrom pydantic import BaseModel\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "_start_measurement",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def _start_measurement() -> Tuple[float, float]:\n    return time.time(), os.times()[0] + os.times()[1]",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "_end_measurement",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "def _end_measurement(\n    start_wall_time: float, start_cpu_time: float\n) -> Tuple[float, float]:\n    end_wall_time = time.time()\n    end_cpu_time = os.times()[0] + os.times()[1]\n    return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "time_measured",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 6,
              "label": "@functools.wraps(func)\n    return wrapper",
              "successors": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "wrapper",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 2,
              "label": "start_wall_time, start_cpu_time = _start_measurement()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 4,
                  "label": "try:\n            result = func(*args, **kwargs)",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 9,
                  "label": "finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 10,
              "end_line": 10,
              "label": "return timing_info, result",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "error_logged",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "def error_logged(func: Callable[P, T]) -> Callable[P, T | None]:\n    \"\"\"\n    Decorator to suppress and log any exceptions raised by a function.\n    \"\"\"\n    @functools.wraps(func)\n    return wrapper",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "wrapper",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return func(*args, **kwargs)",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "except Exception as e:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 7,
                      "label": "logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "TimingInfo",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    }
  ]
}