{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 12,
      "label": "import logging\nimport pytest\nfrom backend.util.test import SpinTestServer\n#  NOTE: You can run tests like with the --log-cli-level=INFO to see the logs\n# Set up logging\nlogger = logging.getLogger(__name__)\n# Create console handler with formatting\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nch.setFormatter(formatter)\nlogger.addHandler(ch)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "server",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "graph_cleanup",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "async def graph_cleanup(server):\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 6,
              "label": "server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 7,
              "end_line": 10,
              "label": "finally:\n        server.agent_server.test_create_graph = original_create_graph\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:",
              "successors": [
                {
                  "id": 4,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "if user_id:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 12,
                      "end_line": 14,
                      "label": "resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "create_graph_wrapper",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 6,
              "label": "async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": []
}