{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "from fastapi import HTTPException, Request\nfrom starlette.middleware.base import RequestResponseEndpoint\nfrom .limiter import RateLimiter",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "rate_limit_middleware",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "async def rate_limit_middleware(request: Request, call_next: RequestResponseEndpoint):\n    \"\"\"FastAPI middleware for rate limiting API requests.\"\"\"\n    limiter = RateLimiter()\n    if not request.url.path.startswith(\"/api\"):",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 5,
              "label": "return await call_next(request)",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 6,
              "end_line": 7,
              "label": "api_key = request.headers.get(\"Authorization\")\n    if not api_key:",
              "successors": [
                {
                  "id": 4,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "return await call_next(request)",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 9,
                  "end_line": 10,
                  "label": "api_key = api_key.replace(\"Bearer \", \"\")\n    is_allowed, remaining, reset_time = await limiter.check_rate_limit(api_key)",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 11,
                      "end_line": 11,
                      "label": "if not is_allowed:",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 12,
                          "end_line": 14,
                          "label": "raise HTTPException(\n            status_code=429, detail=\"Rate limit exceeded. Please try again later.\"\n        )",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "start_line": 15,
                          "end_line": 19,
                          "label": "response = await call_next(request)\n    response.headers[\"X-RateLimit-Limit\"] = str(limiter.max_requests)\n    response.headers[\"X-RateLimit-Remaining\"] = str(remaining)\n    response.headers[\"X-RateLimit-Reset\"] = str(reset_time)\n    return response",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}