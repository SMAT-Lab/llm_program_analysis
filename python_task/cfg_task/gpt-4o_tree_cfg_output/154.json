{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "# -*- coding: utf-8 -*-\nimport unittest\nfrom validate.links import find_links_in_text\nfrom validate.links import check_duplicate_links\nfrom validate.links import fake_user_agent\nfrom validate.links import get_host_from_link\nfrom validate.links import has_cloudflare_protection",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "FakeResponse",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "def __init__(self, code: int, headers: dict, text: str) -> None:\n        self.status_code = code\n        self.headers = headers\n        self.text = text",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "TestValidateLinks",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "setUp",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 19,
              "label": "def setUp(self):\n        self.duplicate_links = [\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.example.com',\n            'https://www.anotherexample.com',\n        ]\n        self.no_duplicate_links = [\n            'https://www.firstexample.com',\n            'https://www.secondexample.com',\n            'https://www.anotherexample.com',\n        ]\n        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_find_link_in_text",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 20,
              "label": "def test_find_link_in_text(self):\n        text = \"\"\"\n            # this is valid\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n            # this not is valid\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\n        links = find_links_in_text(text)\n        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 21,
                  "end_line": 21,
                  "label": "for link in links:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 22,
                      "end_line": 22,
                      "label": "with self.subTest():",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 23,
                          "end_line": 23,
                          "label": "self.assertIsInstance(link, str)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_find_link_in_text_with_invalid_argument",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_if_check_duplicate_links_has_the_correct_return",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 13,
              "label": "def test_if_check_duplicate_links_has_the_correct_return(self):\n        result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n        self.assertIsInstance(result_1, tuple)\n        self.assertIsInstance(result_2, tuple)\n        has_duplicate_links, links = result_1\n        no_duplicate_links, no_links = result_2\n        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)\n        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)\n        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_if_fake_user_agent_has_a_str_as_return",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def test_if_fake_user_agent_has_a_str_as_return(self):\n        user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_get_host_from_link",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 10,
              "label": "links = [\n            'example.com',\n            'https://example.com',\n            'https://www.example.com',\n            'https://www.example.com.br',\n            'https://www.example.com/route',\n            'https://www.example.com?p=1&q=2',\n            'https://www.example.com#anchor'\n        ]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "for link in links:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 12,
                      "end_line": 12,
                      "label": "host = get_host_from_link(link)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 13,
                          "end_line": 13,
                          "label": "with self.subTest():",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 14,
                              "end_line": 18,
                              "label": "self.assertIsInstance(host, str)\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "start_line": 19,
                  "end_line": 19,
                  "label": "with self.assertRaises(TypeError):",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 20,
                      "end_line": 20,
                      "label": "get_host_from_link()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_has_cloudflare_protection_with_code_403_and_503_in_response",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 6,
              "label": "def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n        resp_with_cloudflare_protection_code_403 = FakeResponse(\n            code=self.code_403,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 7,
                  "end_line": 11,
                  "label": "resp_with_cloudflare_protection_code_503 = FakeResponse(\n            code=self.code_503,\n            headers=self.cloudflare_headers,\n            text=self.text_with_cloudflare_flags\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 12,
                      "end_line": 15,
                      "label": "result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n        self.assertTrue(result1)\n        self.assertTrue(result2)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_has_cloudflare_protection_when_there_is_no_protection",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 22,
              "label": "def test_has_cloudflare_protection_when_there_is_no_protection(self):\n        resp_without_cloudflare_protection1 = FakeResponse(\n            code=self.code_200,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n        resp_without_cloudflare_protection2 = FakeResponse(\n            code=self.code_403,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n        resp_without_cloudflare_protection3 = FakeResponse(\n            code=self.code_503,\n            headers=self.no_cloudflare_headers,\n            text=self.text_without_cloudflare_flags\n        )\n        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n        self.assertFalse(result1)\n        self.assertFalse(result2)\n        self.assertFalse(result3)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}