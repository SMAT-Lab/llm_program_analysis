{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 12,
      "label": "# -*- coding: utf-8 -*-\nimport unittest\nfrom validate.format import error_message\nfrom validate.format import get_categories_content\nfrom validate.format import check_alphabetical_order\nfrom validate.format import check_title\nfrom validate.format import check_description, max_description_length\nfrom validate.format import check_auth, auth_keys\nfrom validate.format import check_https, https_keys\nfrom validate.format import check_cors, cors_keys\nfrom validate.format import check_entry\nfrom validate.format import check_file_format, min_entries_per_category, num_segments",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "TestValidadeFormat",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "test_error_message_return_and_return_type",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 18,
              "label": "def test_error_message_return_and_return_type(self):\n        line_num_unity = 1\n        line_num_ten = 10\n        line_num_hundred = 100\n        line_num_thousand = 1000\n        msg = 'This is a unit test'\n        err_msg_unity = error_message(line_num_unity, msg)\n        err_msg_ten = error_message(line_num_ten, msg)\n        err_msg_hundred = error_message(line_num_hundred, msg)\n        err_msg_thousand = error_message(line_num_thousand, msg)\n        self.assertIsInstance(err_msg_unity, str)\n        self.assertIsInstance(err_msg_ten, str)\n        self.assertIsInstance(err_msg_hundred, str)\n        self.assertIsInstance(err_msg_thousand, str)\n        self.assertEqual(err_msg_unity, '(L002) This is a unit test')\n        self.assertEqual(err_msg_ten, '(L011) This is a unit test')\n        self.assertEqual(err_msg_hundred, '(L101) This is a unit test')\n        self.assertEqual(err_msg_thousand, '(L1001) This is a unit test')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_if_get_categories_content_return_correct_data_of_categories",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 20,
              "label": "fake_contents = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n        result = get_categories_content(fake_contents)\n        self.assertIsInstance(result, tuple)\n        categories, category_line_num = result\n        self.assertIsInstance(categories, dict)\n        self.assertIsInstance(category_line_num, dict)\n        expected_result = ({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})",
              "successors": [
                {
                  "id": 2,
                  "start_line": 21,
                  "end_line": 21,
                  "label": "for res, ex_res in zip(result, expected_result):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 22,
                      "end_line": 22,
                      "label": "with self.subTest():",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 23,
                          "end_line": 23,
                          "label": "self.assertEqual(res, ex_res)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_if_check_alphabetical_order_return_correct_msg_error",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 14,
              "label": "correct_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
              "successors": []
            },
            {
              "id": 2,
              "start_line": 15,
              "end_line": 27,
              "label": "incorrect_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 28,
              "end_line": 33,
              "label": "err_msgs_1 = check_alphabetical_order(correct_lines)\n        err_msgs_2 = check_alphabetical_order(incorrect_lines)\n        self.assertIsInstance(err_msgs_1, list)\n        self.assertIsInstance(err_msgs_2, list)\n        self.assertEqual(len(err_msgs_1), 0)\n        self.assertEqual(len(err_msgs_2), 2)",
              "successors": []
            },
            {
              "id": 4,
              "start_line": 34,
              "end_line": 37,
              "label": "expected_err_msgs = [\n            '(L001) A category is not alphabetical order',\n            '(L007) B category is not alphabetical order'\n        ]",
              "successors": []
            },
            {
              "id": 5,
              "start_line": 38,
              "end_line": 38,
              "label": "for err_msg, ex_err_msg in zip(err_msgs_2, expected_err_msgs):",
              "successors": [
                {
                  "id": 6,
                  "start_line": 39,
                  "end_line": 40,
                  "label": "with self.subTest():\n                self.assertEqual(err_msg, ex_err_msg)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_title_with_correct_title",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 6,
              "label": "def test_check_title_with_correct_title(self):\n        raw_title = '[A](https://www.ex.com)'\n        err_msgs = check_title(0, raw_title)\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_title_with_markdown_syntax_incorrect",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def test_check_title_with_markdown_syntax_incorrect(self):\n        raw_title = '[A(https://www.ex.com)'\n        err_msgs = check_title(0, raw_title)\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 7,
                  "end_line": 9,
                  "label": "err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'\n        self.assertEqual(err_msg, expected_err_msg)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_title_with_api_at_the_end_of_the_title",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 10,
              "label": "def test_check_title_with_api_at_the_end_of_the_title(self):\n        raw_title = '[A API](https://www.ex.com)'\n        err_msgs = check_title(0, raw_title)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title should not end with \"... API\". Every entry is an API here!'\n        self.assertEqual(err_msg, expected_err_msg)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_description_with_correct_description",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 6,
              "label": "def test_check_description_with_correct_description(self):\n        desc = 'This is a fake description'\n        err_msgs = check_description(0, desc)\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_description_with_first_char_is_not_capitalized",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 10,
              "label": "def test_check_description_with_first_char_is_not_capitalized(self):\n        desc = 'this is a fake description'\n        err_msgs = check_description(0, desc)\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) first character of description is not capitalized'\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_description_with_punctuation_in_the_end",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "def test_check_description_with_punctuation_in_the_end(self):\n        base_desc = 'This is a fake description'\n        punctuation = r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\"\n        desc_with_punc = [base_desc + punc for punc in punctuation]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "for desc in desc_with_punc:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 7,
                      "end_line": 7,
                      "label": "with self.subTest():",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 8,
                          "end_line": 15,
                          "label": "err_msgs = check_description(0, desc)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_description_that_exceeds_the_character_limit",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 10,
              "label": "def test_check_description_that_exceeds_the_character_limit(self):\n        long_desc = 'Desc' * max_description_length\n        long_desc_length = len(long_desc)\n        err_msgs = check_description(0, long_desc)\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        expected_err_msg = f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_auth_with_valid_auth",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def test_check_auth_with_valid_auth(self):\n        auth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']\n        auth_valid.append('No')",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "for auth in auth_valid:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 9,
                      "label": "with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_auth_without_backtick",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def test_check_auth_without_backtick(self):\n        auth_without_backtick = [auth for auth in auth_keys if auth != 'No']\n        for auth in auth_without_backtick:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 11,
                  "label": "with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_auth_with_invalid_auth",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 3,
              "label": "auth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']\n        auth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "for auth in auth_invalid_without_backtick:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 16,
                      "label": "with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 17,
                  "end_line": 17,
                  "label": "for auth in auth_invalid_with_backtick:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 18,
                      "end_line": 25,
                      "label": "with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_https_with_valid_https",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def test_check_https_with_valid_https(self):\n        for https in https_keys:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "with self.subTest():",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 7,
                      "label": "err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_https_with_invalid_https",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def test_check_https_with_invalid_https(self):\n        invalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']\n        for https in invalid_https_keys:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "with self.subTest():",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 11,
                      "label": "err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_cors_with_valid_cors",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 2,
              "label": "for cors in cors_keys:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "with self.subTest():",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 7,
                      "label": "err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_cors_with_invalid_cors",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def test_check_cors_with_invalid_cors(self):\n        invalid_cors_keys = ['yes', 'no', 'unknown', 'cors']\n        for cors in invalid_cors_keys:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 11,
                  "label": "with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {cors} is not a valid CORS option'\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_entry_with_correct_segments",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 3,
              "label": "correct_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']\n        err_msgs = check_entry(0, correct_segments)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 5,
                  "end_line": 7,
                  "label": "self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_entry_with_incorrect_segments",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 14,
              "label": "def test_check_entry_with_incorrect_segments(self):\n        incorrect_segments = ['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes', 'yes']\n        err_msgs = check_entry(0, incorrect_segments)\n        expected_err_msgs = [\n            '(L001) Title should not end with \"... API\". Every entry is an API here!',\n            '(L001) first character of description is not capitalized',\n            '(L001) description should not end with .',\n            '(L001) auth value is not enclosed with `backticks`',\n            '(L001) yes is not a valid Auth option',\n            '(L001) yes is not a valid HTTPS option',\n            '(L001) yes is not a valid CORS option'\n        ]\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 7)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 15,
                  "end_line": 18,
                  "label": "for err_msg in err_msgs:\n        self.assertEqual(err_msgs, expected_err_msgs)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 16,
                      "end_line": 17,
                      "label": "with self.subTest():\n                self.assertIsInstance(err_msg, str)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_file_format_with_correct_format",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 20,
              "label": "correct_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 21,
                  "end_line": 21,
                  "label": "err_msgs = check_file_format(lines=correct_format)",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 22,
                  "end_line": 22,
                  "label": "self.assertIsInstance(err_msgs, list)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 23,
                  "end_line": 23,
                  "label": "self.assertEqual(len(err_msgs), 0)",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 24,
                  "end_line": 24,
                  "label": "self.assertEqual(err_msgs, [])",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_file_format_with_category_header_not_added_to_index",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 17,
              "label": "def test_check_file_format_with_category_header_not_added_to_index(self):\n        incorrect_format = [\n            '## Index',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = '(L003) category header (A) not added to Index section'\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_file_format_with_category_without_min_entries",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 26,
              "label": "def test_check_file_format_with_category_without_min_entries(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n        category_with_err = 'A'\n        num_in_category = 1\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_file_format_entry_without_all_necessary_columns",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 19,
              "label": "def test_check_file_format_entry_without_all_necessary_columns(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n        current_segments_num = 3\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_check_file_format_without_1_space_between_the_segments",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 12,
              "label": "incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 13,
                  "end_line": 17,
                  "label": "err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L007) each segment must start and end with exactly 1 space'\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}