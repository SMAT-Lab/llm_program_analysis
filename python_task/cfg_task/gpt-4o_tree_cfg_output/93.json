{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 2,
      "end_line": 2,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 4,
          "label": "PUZZLE = [[\"\"] * 3 for _ in range(3)]\n    WORDS = [\"cat\", \"dog\", \"car\"]",
          "successors": [
            {
              "id": 3,
              "start_line": 5,
              "end_line": 5,
              "label": "if solve_crossword(PUZZLE, WORDS):",
              "successors": [
                {
                  "id": 4,
                  "start_line": 6,
                  "end_line": 8,
                  "label": "print(\"Solution found:\")\n        for row in PUZZLE:\n            print(\" \".join(row))",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 9,
                  "end_line": 10,
                  "label": "else:\n        print(\"No solution found:\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "is_valid",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def is_valid(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> bool:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 22,
              "label": "\"\"\"\n    Check if a word can be placed at the given position.\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, True)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, False)\n    True\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 23,
                  "end_line": 23,
                  "label": "for i in range(len(word)):",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 24,
                      "end_line": 24,
                      "label": "if vertical:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 25,
                          "end_line": 26,
                          "label": "if row + i >= len(puzzle) or puzzle[row + i][col] != \"\":\n                return False",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 27,
                          "end_line": 28,
                          "label": "elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != \"\":\n            return False",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 7,
          "start_line": 29,
          "end_line": 29,
          "label": "return True",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "place_word",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 16,
          "label": "for i, char in enumerate(word):",
          "successors": [
            {
              "id": 2,
              "start_line": 17,
              "end_line": 17,
              "label": "if vertical:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 18,
                  "end_line": 18,
                  "label": "puzzle[row + i][col] = char",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 19,
              "end_line": 19,
              "label": "else:",
              "successors": [
                {
                  "id": 5,
                  "start_line": 20,
                  "end_line": 20,
                  "label": "puzzle[row][col + i] = char",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "remove_word",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 16,
          "label": "for i in range(len(word)):",
          "successors": [
            {
              "id": 2,
              "start_line": 17,
              "end_line": 17,
              "label": "if vertical:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 18,
                  "end_line": 18,
                  "label": "puzzle[row + i][col] = \"\"",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 19,
              "end_line": 19,
              "label": "else:",
              "successors": [
                {
                  "id": 5,
                  "start_line": 20,
                  "end_line": 20,
                  "label": "puzzle[row][col + i] = \"\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "solve_crossword",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 22,
          "label": "def solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:\n    \"\"\"\n    Solve the crossword puzzle using backtracking.\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 23,
              "end_line": 24,
              "label": "for row in range(len(puzzle)):\n        for col in range(len(puzzle[0])):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 25,
                  "end_line": 25,
                  "label": "if puzzle[row][col] == \"\":",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 26,
                      "end_line": 27,
                      "label": "for word in words:\n                    for vertical in [True, False]:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 28,
                          "end_line": 28,
                          "label": "if is_valid(puzzle, word, row, col, vertical):",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 29,
                              "end_line": 34,
                              "label": "place_word(puzzle, word, row, col, vertical)\n                            words.remove(word)\n                            if solve_crossword(puzzle, words):\n                                return True\n                            words.append(word)\n                            remove_word(puzzle, word, row, col, vertical)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 35,
                      "end_line": 35,
                      "label": "return False",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 8,
          "start_line": 36,
          "end_line": 36,
          "label": "return True",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}