{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "import logging\nfrom typing import TYPE_CHECKING, Callable, Optional, cast\nfrom backend.data.block import BlockWebhookConfig, get_block\nfrom backend.data.graph import set_node_webhook\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME\nif TYPE_CHECKING:",
      "successors": [
        {
          "id": 2,
          "start_line": 8,
          "end_line": 10,
          "label": "from backend.data.graph import GraphModel, NodeModel\n    from backend.data.model import Credentials\n    from ._base import BaseWebhooksManager",
          "successors": []
        }
      ]
    },
    {
      "id": 3,
      "start_line": 11,
      "end_line": 11,
      "label": "logger = logging.getLogger(__name__)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "on_graph_activate",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 12,
          "label": "async def on_graph_activate(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n    \"\"\"\n    Hook to be called when a graph is activated/created.\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_activate` on all nodes in this graph.\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    # Compare nodes in new_graph_version with previous_graph_version\n    updated_nodes = []",
          "successors": [
            {
              "id": 2,
              "start_line": 13,
              "end_line": 25,
              "label": "for new_node in graph.nodes:\n        node_credentials = None\n        updated_node = await on_node_activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )\n        updated_nodes.append(updated_node)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 15,
                  "end_line": 16,
                  "label": "if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 17,
                      "end_line": 21,
                      "label": "if not node_credentials:\n                raise ValueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "start_line": 26,
              "end_line": 27,
              "label": "graph.nodes = updated_nodes\n    return graph",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "on_graph_deactivate",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 11,
          "end_line": 11,
          "label": "updated_nodes = []",
          "successors": [
            {
              "id": 2,
              "start_line": 12,
              "end_line": 12,
              "label": "for node in graph.nodes:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 13,
                  "end_line": 13,
                  "label": "node_credentials = None",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "if creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME):",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "node_credentials = get_credentials(creds_meta[\"id\"])",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 16,
                              "end_line": 16,
                              "label": "if not node_credentials:",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 17,
                                  "end_line": 20,
                                  "label": "logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "start_line": 21,
                      "end_line": 22,
                      "label": "updated_node = await on_node_deactivate(node, credentials=node_credentials)\n        updated_nodes.append(updated_node)",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 9,
              "start_line": 23,
              "end_line": 24,
              "label": "graph.nodes = updated_nodes\n    return graph",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "on_node_activate",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 8,
          "label": "async def on_node_activate(\n    user_id: str,\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n) -> \"NodeModel\":\n    \"\"\"Hook to be called when the node is activated/created\"\"\"\n    block = get_block(node.block_id)",
          "successors": [
            {
              "id": 2,
              "start_line": 9,
              "end_line": 12,
              "label": "if not block:\n        raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 13,
              "end_line": 14,
              "label": "if not block.webhook_config:\n        return node",
              "successors": []
            },
            {
              "id": 4,
              "start_line": 15,
              "end_line": 24,
              "label": "provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n    logger.debug(\n        f\"Activating webhook node #{node.id} with config {block.webhook_config}\"\n    )\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()",
              "successors": [
                {
                  "id": 5,
                  "start_line": 25,
                  "end_line": 33,
                  "label": "if auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig):\n    else:",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 26,
                      "end_line": 32,
                      "label": "try:\n            resource = block.webhook_config.resource_format.format(**node.input_default)\n        logger.debug(\n            f\"Constructed resource string {resource} from input {node.input_default}\"\n        )",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 28,
                          "end_line": 29,
                          "label": "except KeyError:\n            resource = None",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "start_line": 34,
                      "end_line": 34,
                      "label": "resource = \"\"  # not relevant for manual webhooks",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 9,
          "start_line": 35,
          "end_line": 53,
          "label": "needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n    credentials_meta = (\n        node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    )\n    event_filter_input_name = block.webhook_config.event_filter_input\n    has_everything_for_webhook = (\n        resource is not None\n        and (credentials_meta or not needs_credentials)\n        and (\n            not event_filter_input_name\n            or (\n                event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )",
          "successors": [
            {
              "id": 10,
              "start_line": 54,
              "end_line": 91,
              "label": "if has_everything_for_webhook and resource is not None:",
              "successors": [
                {
                  "id": 11,
                  "start_line": 55,
                  "end_line": 60,
                  "label": "logger.debug(f\"Node #{node} has everything for a webhook!\")\n        if credentials_meta and not credentials:\n            raise ValueError(\n                f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )",
                  "successors": []
                },
                {
                  "id": 12,
                  "start_line": 61,
                  "end_line": 71,
                  "label": "if event_filter_input_name:\n            # Shape of the event filter is enforced in Block.__init__\n            event_filter = cast(dict, node.input_default[event_filter_input_name])\n            events = [\n                block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n        else:\n            events = []",
                  "successors": []
                },
                {
                  "id": 13,
                  "start_line": 72,
                  "end_line": 91,
                  "label": "# Find/make and attach a suitable webhook to the node\n        logger.debug(f\"Acquired webhook: {new_webhook}\")\n        return await set_node_webhook(node.id, new_webhook.id)",
                  "successors": [
                    {
                      "id": 14,
                      "start_line": 73,
                      "end_line": 81,
                      "label": "if auto_setup_webhook:\n            assert credentials is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )",
                      "successors": []
                    },
                    {
                      "id": 15,
                      "start_line": 82,
                      "end_line": 89,
                      "label": "else:\n            # Manual webhook -> no credentials -> don't register but do create\n            new_webhook = await webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 16,
              "start_line": 92,
              "end_line": 94,
              "label": "else:\n        logger.debug(f\"Node #{node.id} does not have everything for a webhook\")\n    return node",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "on_node_deactivate",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 9,
          "label": "async def on_node_deactivate(\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n    webhooks_manager: Optional[\"BaseWebhooksManager\"] = None,\n) -> \"NodeModel\":\n    \"\"\"Hook to be called when node is deactivated/deleted\"\"\"\n    logger.debug(f\"Deactivating node #{node.id}\")\n    block = get_block(node.block_id)",
          "successors": [
            {
              "id": 2,
              "start_line": 10,
              "end_line": 10,
              "label": "if not block:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 11,
                  "end_line": 13,
                  "label": "raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 14,
              "end_line": 14,
              "label": "if not block.webhook_config:",
              "successors": [
                {
                  "id": 5,
                  "start_line": 15,
                  "end_line": 15,
                  "label": "return node",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "start_line": 16,
              "end_line": 17,
              "label": "provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:",
              "successors": [
                {
                  "id": 7,
                  "start_line": 18,
                  "end_line": 21,
                  "label": "raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )",
                  "successors": []
                }
              ]
            },
            {
              "id": 8,
              "start_line": 22,
              "end_line": 23,
              "label": "webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    if node.webhook_id:",
              "successors": [
                {
                  "id": 9,
                  "start_line": 24,
                  "end_line": 47,
                  "label": "logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\")\n        return updated_node",
                  "successors": [
                    {
                      "id": 10,
                      "start_line": 25,
                      "end_line": 27,
                      "label": "if not node.webhook:\n            logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")\n            raise ValueError(\"node.webhook not included\")",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "start_line": 28,
                      "end_line": 37,
                      "label": "# Detach webhook from node\n        logger.debug(f\"Detaching webhook from node #{node.id}\")\n        updated_node = await set_node_webhook(node.id, None)\n        # Prune and deregister the webhook if it is no longer used anywhere\n        webhook = node.webhook\n        logger.debug(\n            f\"Pruning{' and deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )\n        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)",
                      "successors": [
                        {
                          "id": 12,
                          "start_line": 38,
                          "end_line": 41,
                          "label": "if (\n            CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n            and not credentials\n        ):",
                          "successors": [
                            {
                              "id": 13,
                              "start_line": 42,
                              "end_line": 46,
                              "label": "logger.warning(\n                f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 14,
              "start_line": 48,
              "end_line": 49,
              "label": "logger.debug(f\"Node #{node.id} has no webhook_id, returning\")\n    return node",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}