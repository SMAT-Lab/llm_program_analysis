{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 13,
      "label": "import json\nimport os\nfrom enum import Enum\nfrom typing import Any, Dict, Generic, List, Set, Tuple, Type, TypeVar\nfrom pydantic import BaseModel, Field, PrivateAttr, ValidationInfo, field_validator\nfrom pydantic_settings import (\n    BaseSettings,\n    JsonConfigSettingsSource,\n    PydanticBaseSettingsSource,\n    SettingsConfigDict,\n)\nfrom backend.util.data import get_data_path\nT = TypeVar(\"T\", bound=BaseSettings)",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "AppEnvironment",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "class AppEnvironment(str, Enum):\n    LOCAL = \"local\"\n    DEVELOPMENT = \"dev\"\n    PRODUCTION = \"prod\"",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "BehaveAs",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "UpdateTrackingModel",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__setattr__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def __setattr__(self, name: str, value) -> None:\n        if name in self.model_fields:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "self._updated_fields.add(name)",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 4,
              "end_line": 4,
              "label": "super().__setattr__(name, value)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "mark_updated",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 2,
              "label": "if field_name in self.model_fields:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "self._updated_fields.add(field_name)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "clear_updates",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def clear_updates(self) -> None:\n        self._updated_fields.clear()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_updates",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def get_updates(self) -> Dict[str, Any]:\n        return {field: getattr(self, field) for field in self._updated_fields}",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "updated_fields",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 2,
              "label": "return self._updated_fields",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Config",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "validate_platform_base_url",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 2,
              "label": "if not v:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return v",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "if not v.startswith((\"http://\", \"https://\")):",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 8,
                      "label": "raise ValueError(\n                f\"{info.field_name} must be a full URL \"\n                \"including a http:// or https:// schema\"\n            )",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 9,
                      "end_line": 9,
                      "label": "if v.endswith(\"/\"):",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "return v.rstrip(\"/\")  # Remove trailing slash",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 11,
                          "end_line": 11,
                          "label": "return v",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "validate_cors_allow_origins",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def validate_cors_allow_origins(cls, v: List[str]) -> List[str]:\n        out = []\n        port = None\n        has_localhost = False\n        has_127_0_0_1 = False",
              "successors": [
                {
                  "id": 2,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "for url in v:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 7,
                      "end_line": 8,
                      "label": "url = url.strip()\n            if url.startswith((\"http://\", \"https://\")):",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 9,
                          "end_line": 9,
                          "label": "if \"localhost\" in url:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 10,
                              "end_line": 11,
                              "label": "port = url.split(\":\")[2]\n                    has_localhost = True",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "start_line": 12,
                          "end_line": 12,
                          "label": "if \"127.0.0.1\" in url:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 13,
                              "end_line": 14,
                              "label": "port = url.split(\":\")[2]\n                    has_127_0_0_1 = True",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "out.append(url)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "start_line": 16,
                      "end_line": 17,
                      "label": "else:\n                raise ValueError(f\"Invalid URL: {url}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 10,
                  "start_line": 18,
                  "end_line": 18,
                  "label": "if has_127_0_0_1 and not has_localhost:",
                  "successors": [
                    {
                      "id": 11,
                      "start_line": 19,
                      "end_line": 19,
                      "label": "out.append(f\"http://localhost:{port}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 12,
                  "start_line": 20,
                  "end_line": 20,
                  "label": "if has_localhost and not has_127_0_0_1:",
                  "successors": [
                    {
                      "id": 13,
                      "start_line": 21,
                      "end_line": 21,
                      "label": "out.append(f\"http://127.0.0.1:{port}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 14,
                  "start_line": 22,
                  "end_line": 22,
                  "label": "return out",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "settings_customise_sources",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 8,
              "label": "def settings_customise_sources(\n        cls,\n        settings_cls: Type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 9,
                  "end_line": 15,
                  "label": "return (\n            env_settings,\n            file_secret_settings,\n            dotenv_settings,\n            JsonConfigSettingsSource(settings_cls),\n            init_settings,\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Secrets",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "Settings",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "save",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 3,
              "end_line": 3,
              "label": "if self.config.updated_fields:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 5,
                  "label": "config_to_save = self.config.get_updates()\n            config_path = os.path.join(get_data_path(), \"config.json\")",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "if os.path.exists(config_path):",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 7,
                          "end_line": 12,
                          "label": "with open(config_path, \"r+\") as f:\n                    existing_config: Dict[str, Any] = json.load(f)\n                    existing_config.update(config_to_save)\n                    f.seek(0)\n                    json.dump(existing_config, f, indent=2)\n                    f.truncate()",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 13,
                      "end_line": 13,
                      "label": "else:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 14,
                          "end_line": 15,
                          "label": "with open(config_path, \"w\") as f:\n                    json.dump(config_to_save, f, indent=2)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "start_line": 16,
              "end_line": 16,
              "label": "self.config.clear_updates()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}