{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "\"\"\"\nA Hamiltonian cycle (Hamiltonian circuit) is a graph cycle\nthrough a graph that visits each node exactly once.\nDetermining whether such paths and cycles exist in graphs\nis the 'Hamiltonian path problem', which is NP-complete.\nWikipedia: https://en.wikipedia.org/wiki/Hamiltonian_path\n\"\"\"",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "valid_connection",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 29,
          "end_line": 29,
          "label": "if graph[path[curr_ind - 1]][next_ver] == 0:",
          "successors": [
            {
              "id": 2,
              "start_line": 30,
              "end_line": 30,
              "label": "return False",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 32,
              "end_line": 32,
              "label": "return not any(vertex == next_ver for vertex in path)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "util_hamilton_cycle",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 41,
          "end_line": 42,
          "label": "# Base Case\n    if curr_ind == len(graph):",
          "successors": [
            {
              "id": 2,
              "start_line": 43,
              "end_line": 44,
              "label": "# return whether path exists between current and starting vertices\n        return graph[path[curr_ind - 1]][path[0]] == 1",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 46,
              "end_line": 55,
              "label": "for next_ver in range(len(graph)):\n    return False",
              "successors": [
                {
                  "id": 4,
                  "start_line": 47,
                  "end_line": 47,
                  "label": "if valid_connection(graph, next_ver, curr_ind, path):",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 48,
                      "end_line": 54,
                      "label": "# Insert current vertex  into path as next transition\n            path[curr_ind] = next_ver\n            # Validate created path\n            # Backtrack\n            path[curr_ind] = -1",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 51,
                          "end_line": 52,
                          "label": "if util_hamilton_cycle(graph, path, curr_ind + 1):\n                return True",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "hamilton_cycle",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}