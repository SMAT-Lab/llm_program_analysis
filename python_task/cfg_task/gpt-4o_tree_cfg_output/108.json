{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "from base64 import b64encode\nfrom urllib.parse import urlencode\nfrom backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\nfrom .base import BaseOAuthHandler",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "NotionOAuthHandler",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 8,
          "label": "class NotionOAuthHandler(BaseOAuthHandler):\n    \"\"\"\n    Based on the documentation at https://developers.notion.com/docs/authorization\n    Notes:\n    - Notion uses non-expiring access tokens and therefore doesn't have a refresh flow\n    - Notion doesn't use scopes\n    \"\"\"\n    PROVIDER_NAME = ProviderName.NOTION",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 6,
              "label": "def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.redirect_uri = redirect_uri\n        self.auth_base_url = \"https://api.notion.com/v1/oauth/authorize\"\n        self.token_url = \"https://api.notion.com/v1/oauth/token\"",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_login_url",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 9,
              "label": "def get_login_url(self, scopes: list[str], state: str) -> str:\n        params = {\n            \"client_id\": self.client_id,\n            \"redirect_uri\": self.redirect_uri,\n            \"response_type\": \"code\",\n            \"owner\": \"user\",\n            \"state\": state,\n        }\n        return f\"{self.auth_base_url}?{urlencode(params)}\"",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "exchange_code_for_tokens",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 14,
              "label": "def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        request_body = {\n            \"grant_type\": \"authorization_code\",\n            \"code\": code,\n            \"redirect_uri\": self.redirect_uri,\n        }\n        auth_str = b64encode(f\"{self.client_id}:{self.client_secret}\".encode()).decode()\n        headers = {\n            \"Authorization\": f\"Basic {auth_str}\",\n            \"Accept\": \"application/json\",\n        }\n        response = requests.post(self.token_url, json=request_body, headers=headers)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 15,
                  "end_line": 22,
                  "label": "token_data = response.json()\n        # Email is only available for non-bot users\n        email = (\n            token_data[\"owner\"][\"person\"][\"email\"]\n            if \"person\" in token_data[\"owner\"]\n            and \"email\" in token_data[\"owner\"][\"person\"]\n            else None\n        )",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 23,
                  "end_line": 39,
                  "label": "return OAuth2Credentials(\n            provider=self.PROVIDER_NAME,\n            title=token_data.get(\"workspace_name\"),\n            username=email,\n            access_token=token_data[\"access_token\"],\n            refresh_token=None,\n            access_token_expires_at=None,  # Notion tokens don't expire\n            refresh_token_expires_at=None,\n            scopes=[],\n            metadata={\n                \"owner\": token_data[\"owner\"],\n                \"bot_id\": token_data[\"bot_id\"],\n                \"workspace_id\": token_data[\"workspace_id\"],\n                \"workspace_name\": token_data.get(\"workspace_name\"),\n                \"workspace_icon\": token_data.get(\"workspace_icon\"),\n            },\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "revoke_tokens",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # Notion doesn't support token revocation\n        return False",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_refresh_tokens",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # Notion doesn't support token refresh\n        return credentials",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "needs_refresh",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        # Notion access tokens don't expire\n        return False",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}