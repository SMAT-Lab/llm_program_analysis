{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 4,
      "label": "import pytest\nfrom backend.util.service import AppService, expose, get_service_client\nTEST_SERVICE_PORT = 8765\n@pytest.mark.asyncio(scope=\"session\")",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "test_service_creation",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 2,
          "end_line": 2,
          "label": "with ServiceTest():",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 6,
              "label": "client = get_service_client(ServiceTest)\n        assert client.add(5, 3) == 8\n        assert client.subtract(10, 4) == 6\n        assert client.fun_with_async(5, 3) == 8",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "ServiceTest",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def __init__(self):\n        super().__init__()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_port",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def get_port(cls) -> int:\n        return TEST_SERVICE_PORT",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "add",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def add(self, a: int, b: int) -> int:\n        return a + b",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "subtract",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def subtract(self, a: int, b: int) -> int:\n        return a - b",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "fun_with_async",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def fun_with_async(self, a: int, b: int) -> int:\n        return self.run_and_wait(add_async(a, b))",
              "successors": []
            }
          ],
          "functions": [
            {
              "name": "add_async",
              "type": "CFG",
              "blocks": [
                {
                  "id": 1,
                  "start_line": 1,
                  "end_line": 1,
                  "label": "async def add_async(a: int, b: int) -> int:",
                  "successors": [
                    {
                      "id": 2,
                      "start_line": 2,
                      "end_line": 2,
                      "label": "return a + b",
                      "successors": []
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            }
          ],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}