{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 5,
      "label": "import operator\nfrom enum import Enum\nfrom typing import Any\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "Operation",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "CalculatorBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 17,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 12,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n        op_func = operations[operation]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 13,
                  "end_line": 13,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "if operation == Operation.DIVIDE and b == 0:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "raise ZeroDivisionError(\"Cannot divide by zero\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 16,
                      "end_line": 19,
                      "label": "result = op_func(a, b)\n            yield \"result\", result",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 17,
                          "end_line": 17,
                          "label": "if input_data.round_result:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 18,
                              "end_line": 18,
                              "label": "result = round(result)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "start_line": 20,
                  "end_line": 21,
                  "label": "except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero",
                  "successors": []
                },
                {
                  "id": 9,
                  "start_line": 22,
                  "end_line": 23,
                  "label": "except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "CountItemsBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 12,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}