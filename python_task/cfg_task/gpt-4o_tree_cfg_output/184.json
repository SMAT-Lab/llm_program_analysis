{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 4,
      "label": "from typing import Dict, Set\nfrom fastapi import WebSocket\nfrom backend.data import execution\nfrom backend.server.model import Methods, WsMessage",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "ConnectionManager",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def __init__(self):\n        self.active_connections: Set[WebSocket] = set()\n        self.subscriptions: Dict[str, Set[WebSocket]] = {}",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "connect",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.add(websocket)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "disconnect",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "for subscribers in self.subscriptions.values():",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "subscribers.discard(websocket)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "subscribe",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "async def subscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id not in self.subscriptions:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "self.subscriptions[graph_id] = set()",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 4,
              "end_line": 4,
              "label": "self.subscriptions[graph_id].add(websocket)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "unsubscribe",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id in self.subscriptions:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 5,
                  "label": "self.subscriptions[graph_id].discard(websocket)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 5,
                      "label": "if not self.subscriptions[graph_id]:\n                del self.subscriptions[graph_id]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "send_execution_result",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "async def send_execution_result(self, result: execution.ExecutionResult):\n        graph_id = result.graph_id\n        if graph_id in self.subscriptions:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 8,
                  "label": "message = WsMessage(\n                method=Methods.EXECUTION_EVENT,\n                channel=graph_id,\n                data=result.model_dump(),\n            ).model_dump_json()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 9,
                      "end_line": 10,
                      "label": "for connection in self.subscriptions[graph_id]:\n                await connection.send_text(message)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}