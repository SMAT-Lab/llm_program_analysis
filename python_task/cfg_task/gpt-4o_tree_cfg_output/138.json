{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 25,
      "label": "import time\nfrom typing import Literal\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"d_id\",\n    api_key=SecretStr(\"mock-d-id-api-key\"),\n    title=\"Mock D-ID API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "CreateTalkingAvatarVideoBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 38,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"98c6f503-8c47-4b1c-a96d-351fc7c87dab\",\n            description=\"This block integrates with D-ID to create video clips and retrieve their URLs.\",\n            categories={BlockCategory.AI},\n            input_schema=CreateTalkingAvatarVideoBlock.Input,\n            output_schema=CreateTalkingAvatarVideoBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"script_input\": \"Welcome to AutoGPT\",\n                \"voice_id\": \"en-US-JennyNeural\",\n                \"presenter_id\": \"amy-Aq6OmGZnMt\",\n                \"driver_id\": \"Vcq0R4a8F0\",\n                \"result_format\": \"mp4\",\n                \"crop_type\": \"wide\",\n                \"subtitles\": False,\n                \"ssml\": False,\n                \"max_polling_attempts\": 5,\n                \"polling_interval\": 5,\n            },\n            test_output=[\n                (\n                    \"video_url\",\n                    \"https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video\",\n                ),\n            ],\n            test_mock={\n                \"create_clip\": lambda *args, **kwargs: {\n                    \"id\": \"abcd1234-5678-efgh-ijkl-mnopqrstuvwx\",\n                    \"status\": \"created\",\n                },\n                \"get_clip_status\": lambda *args, **kwargs: {\n                    \"status\": \"done\",\n                    \"result_url\": \"https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video\",\n                },\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "create_clip",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 9,
              "label": "def create_clip(self, api_key: SecretStr, payload: dict) -> dict:\n        url = \"https://api.d-id.com/clips\"\n        headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Basic {api_key.get_secret_value()}\",\n        }\n        response = requests.post(url, json=payload, headers=headers)\n        return response.json()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_clip_status",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 8,
              "label": "def get_clip_status(self, api_key: SecretStr, clip_id: str) -> dict:\n        url = f\"https://api.d-id.com/clips/{clip_id}\"\n        headers = {\n            \"accept\": \"application/json\",\n            \"authorization\": f\"Basic {api_key.get_secret_value()}\",\n        }\n        response = requests.get(url, headers=headers)\n        return response.json()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 22,
              "label": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        # Create the clip\n        payload = {\n            \"script\": {\n                \"type\": \"text\",\n                \"subtitles\": str(input_data.subtitles).lower(),\n                \"provider\": {\n                    \"type\": input_data.provider,\n                    \"voice_id\": input_data.voice_id,\n                },\n                \"ssml\": str(input_data.ssml).lower(),\n                \"input\": input_data.script_input,\n            },\n            \"config\": {\"result_format\": input_data.result_format},\n            \"presenter_config\": {\"crop\": {\"type\": input_data.crop_type}},\n            \"presenter_id\": input_data.presenter_id,\n            \"driver_id\": input_data.driver_id,\n        }\n        response = self.create_clip(credentials.api_key, payload)\n        clip_id = response[\"id\"]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 24,
                  "end_line": 34,
                  "label": "for _ in range(input_data.max_polling_attempts):\n            status_response = self.get_clip_status(credentials.api_key, clip_id)\n        raise TimeoutError(\"Clip creation timed out\")",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 26,
                      "end_line": 28,
                      "label": "if status_response[\"status\"] == \"done\":\n                yield \"video_url\", status_response[\"result_url\"]\n                return",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 29,
                      "end_line": 32,
                      "label": "elif status_response[\"status\"] == \"error\":\n                raise RuntimeError(\n                    f\"Clip creation failed: {status_response.get('error', 'Unknown error')}\"\n                )",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 33,
                      "end_line": 33,
                      "label": "time.sleep(input_data.polling_interval)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 2,
              "label": "video_url: str = SchemaField(description=\"The URL of the created video\")",
              "successors": []
            },
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "error: str = SchemaField(description=\"Error message if the request failed\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}