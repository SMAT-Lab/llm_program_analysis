{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 9,
      "label": "import asyncio\nimport logging\nimport os\nimport threading\nfrom functools import wraps\nfrom uuid import uuid4\nfrom tenacity import retry, stop_after_attempt, wait_exponential\nfrom backend.util.process import get_service_name\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "_log_prefix",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 7,
          "label": "def _log_prefix(resource_name: str, conn_id: str):\n    \"\"\"\n    Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.\n    \"\"\"\n    return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "conn_retry",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 8,
          "label": "def conn_retry(\n    resource_name: str,\n    action_name: str,\n    max_retry: int = 5,\n    multiplier: int = 1,\n    min_wait: float = 1,\n    max_wait: float = 30,\n):",
          "successors": [
            {
              "id": 2,
              "start_line": 9,
              "end_line": 10,
              "label": "conn_id = str(uuid4())\n    return decorator",
              "successors": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "on_retry",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "def on_retry(retry_state):\n        prefix = _log_prefix(resource_name, conn_id)\n        exception = retry_state.outcome.exception()\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "decorator",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 12,
              "label": "def decorator(func):\n        is_coroutine = asyncio.iscoroutinefunction(func)\n        retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )\n        wrapped_func = retry_decorator(func)\n        @wraps(func)\n        @wraps(func)\n        return async_wrapper if is_coroutine else sync_wrapper",
              "successors": []
            }
          ],
          "functions": [
            {
              "name": "sync_wrapper",
              "type": "CFG",
              "blocks": [
                {
                  "id": 1,
                  "start_line": 1,
                  "end_line": 4,
                  "label": "def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:",
                  "successors": [
                    {
                      "id": 2,
                      "start_line": 5,
                      "end_line": 7,
                      "label": "result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result",
                      "successors": []
                    },
                    {
                      "id": 3,
                      "start_line": 8,
                      "end_line": 10,
                      "label": "except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                      "successors": []
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            },
            {
              "name": "async_wrapper",
              "type": "CFG",
              "blocks": [
                {
                  "id": 1,
                  "start_line": 1,
                  "end_line": 3,
                  "label": "async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")",
                  "successors": [
                    {
                      "id": 2,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "try:",
                      "successors": [
                        {
                          "id": 3,
                          "start_line": 5,
                          "end_line": 7,
                          "label": "result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result",
                          "successors": []
                        },
                        {
                          "id": 4,
                          "start_line": 8,
                          "end_line": 10,
                          "label": "except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            }
          ],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": []
}