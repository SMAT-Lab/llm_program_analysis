{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 6,
      "end_line": 7,
      "label": "from __future__ import annotations\nfrom itertools import combinations",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 8,
      "end_line": 8,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        {
          "id": 3,
          "start_line": 9,
          "end_line": 11,
          "label": "from doctest import testmod\n    testmod()\n    print(generate_all_combinations(n=4, k=2))",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 12,
          "end_line": 14,
          "label": "tests = ((n, k) for n in range(1, 5) for k in range(1, 5))",
          "successors": [
            {
              "id": 5,
              "start_line": 13,
              "end_line": 14,
              "label": "for n, k in tests:\n        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
              "successors": []
            }
          ]
        },
        {
          "id": 6,
          "start_line": 15,
          "end_line": 18,
          "label": "print(\"Benchmark:\")\n    from timeit import timeit",
          "successors": [
            {
              "id": 7,
              "start_line": 17,
              "end_line": 18,
              "label": "for func in (\"combination_lists\", \"generate_all_combinations\"):\n        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "combination_lists",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "def combination_lists(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"\n    return [list(x) for x in combinations(range(1, n + 1), k)]",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "generate_all_combinations",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 22,
          "end_line": 22,
          "label": "if k < 0:",
          "successors": [
            {
              "id": 2,
              "start_line": 23,
              "end_line": 23,
              "label": "raise ValueError(\"k must not be negative\")",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 24,
              "end_line": 24,
              "label": "if n < 0:",
              "successors": [
                {
                  "id": 4,
                  "start_line": 25,
                  "end_line": 25,
                  "label": "raise ValueError(\"n must not be negative\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "start_line": 26,
              "end_line": 28,
              "label": "result: list[list[int]] = []\n    create_all_state(1, n, k, [], result)\n    return result",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_all_state",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 8,
          "end_line": 8,
          "label": "if level == 0:",
          "successors": [
            {
              "id": 2,
              "start_line": 9,
              "end_line": 10,
              "label": "total_list.append(current_list[:])\n        return",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 11,
              "end_line": 11,
              "label": "for i in range(increment, total_number - level + 2):",
              "successors": [
                {
                  "id": 4,
                  "start_line": 12,
                  "end_line": 14,
                  "label": "current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "current_list.pop()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}