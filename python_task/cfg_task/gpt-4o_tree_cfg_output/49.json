{
  "name": "example_script",
  "type": "CFG",
  "blocks": [],
  "functions": [],
  "classes": [
    {
      "name": "ReadCsvBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 23,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"acf7625e-d2cb-4941-bfeb-2819fc6fc015\",\n            input_schema=ReadCsvBlock.Input,\n            output_schema=ReadCsvBlock.Output,\n            description=\"Reads a CSV file and outputs the data as a list of dictionaries and individual rows via rows.\",\n            contributors=[ContributorDetails(name=\"Nicholas Tindle\")],\n            categories={BlockCategory.TEXT, BlockCategory.DATA},\n            test_input={\n                \"contents\": \"a, b, c\\n1,2,3\\n4,5,6\",\n            },\n            test_output=[\n                (\"row\", {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}),\n                (\"row\", {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"}),\n                (\n                    \"all_data\",\n                    [\n                        {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"},\n                        {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"},\n                    ],\n                ),\n            ],\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 11,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        import csv\n        from io import StringIO\n        csv_file = StringIO(input_data.contents)\n        reader = csv.reader(\n            csv_file,\n            delimiter=input_data.delimiter,\n            quotechar=input_data.quotechar,\n            escapechar=input_data.escapechar,\n        )\n        header = None",
              "successors": [
                {
                  "id": 2,
                  "start_line": 12,
                  "end_line": 15,
                  "label": "if input_data.has_header:\n            header = next(reader)\n            if input_data.strip:\n                header = [h.strip() for h in header]",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 16,
                  "end_line": 17,
                  "label": "for _ in range(input_data.skip_rows):\n            next(reader)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 19,
                  "end_line": 22,
                  "label": "for row in reader:\n            processed_row = process_row(row)\n            all_data.append(processed_row)\n            yield \"row\", processed_row",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "start_line": 23,
              "end_line": 23,
              "label": "yield \"all_data\", all_data",
              "successors": []
            }
          ],
          "functions": [
            {
              "name": "process_row",
              "type": "CFG",
              "blocks": [
                {
                  "id": 1,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "data = {}",
                  "successors": [
                    {
                      "id": 2,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "for i, value in enumerate(row):",
                      "successors": [
                        {
                          "id": 3,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "if i not in input_data.skip_columns:",
                          "successors": [
                            {
                              "id": 4,
                              "start_line": 5,
                              "end_line": 5,
                              "label": "if input_data.has_header and header:",
                              "successors": [
                                {
                                  "id": 5,
                                  "start_line": 6,
                                  "end_line": 6,
                                  "label": "data[header[i]] = value.strip() if input_data.strip else value",
                                  "successors": []
                                },
                                {
                                  "id": 6,
                                  "start_line": 7,
                                  "end_line": 7,
                                  "label": "else:",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 8,
                                      "end_line": 8,
                                      "label": "data[str(i)] = value.strip() if input_data.strip else value",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "start_line": 9,
                      "end_line": 9,
                      "label": "return data",
                      "successors": []
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            }
          ],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}