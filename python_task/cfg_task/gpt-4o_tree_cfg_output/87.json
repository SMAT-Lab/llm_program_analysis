{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "from prisma.models import User\nfrom backend.blocks.llm import AIStructuredResponseGeneratorBlock\nfrom backend.blocks.reddit import GetRedditPostsBlock, PostRedditCommentBlock\nfrom backend.blocks.text import FillTextTemplateBlock, MatchTextPatternBlock\nfrom backend.data.graph import Graph, Link, Node, create_graph\nfrom backend.data.user import get_or_create_user\nfrom backend.util.test import SpinTestServer, wait_execution",
      "successors": [
        {
          "id": 2,
          "start_line": 8,
          "end_line": 8,
          "label": "if __name__ == \"__main__\":",
          "successors": [
            {
              "id": 3,
              "start_line": 9,
              "end_line": 10,
              "label": "import asyncio\n    asyncio.run(reddit_marketing_agent())",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "create_test_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 25,
          "label": "def create_test_graph() -> Graph:\n    \"\"\"\n                    subreddit\n                       ||\n                        v\n        GetRedditPostsBlock (post_id, post_title, post_body)\n                  //     ||     \\\\\n              post_id  post_title  post_body\n                 ||       ||        ||\n                 v        v         v\n              FillTextTemplateBlock (format)\n                      ||\n                      v\n            AIStructuredResponseBlock / TextRelevancy\n                 ||       ||       ||\n            post_id  is_relevant  marketing_text\n               ||       ||        ||\n               v        v         v\n                 MatchTextPatternBlock\n                 ||       ||\n              positive  negative\n                ||\n                v\n        PostRedditCommentBlock\n    \"\"\"",
          "successors": []
        },
        {
          "id": 2,
          "start_line": 26,
          "end_line": 29,
          "label": "# Hardcoded inputs\n    reddit_get_post_input = {\n        \"post_limit\": 3,\n    }",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 30,
          "end_line": 37,
          "label": "text_formatter_input = {\n        \"format\": \"\"\"\nBased on the following post, write your marketing comment:\n* Post ID: {id}\n* Post Subreddit: {subreddit}\n* Post Title: {title}\n* Post Body: {body}\"\"\".strip(),\n    }",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 38,
          "end_line": 51,
          "label": "llm_call_input = {\n        \"sys_prompt\": \"\"\"\nYou are an expert at marketing.\nYou have been tasked with picking Reddit posts that are relevant to your product.\nThe product you are marketing is: Auto-GPT an autonomous AI agent utilizing GPT model.\nYou reply the post that you find it relevant to be replied with marketing text.\nMake sure to only comment on a relevant post.\n\"\"\",\n        \"expected_format\": {\n            \"post_id\": \"str, the reddit post id\",\n            \"is_relevant\": \"bool, whether the post is relevant for marketing\",\n            \"marketing_text\": \"str, marketing text, this is empty on irrelevant posts\",\n        },\n    }",
          "successors": []
        },
        {
          "id": 5,
          "start_line": 52,
          "end_line": 53,
          "label": "text_matcher_input = {\"match\": \"true\", \"case_sensitive\": False}\n    reddit_comment_input = {}",
          "successors": []
        },
        {
          "id": 6,
          "start_line": 54,
          "end_line": 73,
          "label": "# Nodes\n    reddit_get_post_node = Node(\n        block_id=GetRedditPostsBlock().id,\n        input_default=reddit_get_post_input,\n    )\n    text_formatter_node = Node(\n        block_id=FillTextTemplateBlock().id,\n        input_default=text_formatter_input,\n    )\n    llm_call_node = Node(\n        block_id=AIStructuredResponseGeneratorBlock().id, input_default=llm_call_input\n    )\n    text_matcher_node = Node(\n        block_id=MatchTextPatternBlock().id,\n        input_default=text_matcher_input,\n    )\n    reddit_comment_node = Node(\n        block_id=PostRedditCommentBlock().id,\n        input_default=reddit_comment_input,\n    )",
          "successors": []
        },
        {
          "id": 7,
          "start_line": 74,
          "end_line": 80,
          "label": "nodes = [\n        reddit_get_post_node,\n        text_formatter_node,\n        llm_call_node,\n        text_matcher_node,\n        reddit_comment_node,\n    ]",
          "successors": []
        },
        {
          "id": 8,
          "start_line": 81,
          "end_line": 119,
          "label": "# Links\n    links = [\n        Link(\n            source_id=reddit_get_post_node.id,\n            sink_id=text_formatter_node.id,\n            source_name=\"post\",\n            sink_name=\"values\",\n        ),\n        Link(\n            source_id=text_formatter_node.id,\n            sink_id=llm_call_node.id,\n            source_name=\"output\",\n            sink_name=\"prompt\",\n        ),\n        Link(\n            source_id=llm_call_node.id,\n            sink_id=text_matcher_node.id,\n            source_name=\"response\",\n            sink_name=\"data\",\n        ),\n        Link(\n            source_id=llm_call_node.id,\n            sink_id=text_matcher_node.id,\n            source_name=\"response_#_is_relevant\",\n            sink_name=\"text\",\n        ),\n        Link(\n            source_id=text_matcher_node.id,\n            sink_id=reddit_comment_node.id,\n            source_name=\"positive_#_post_id\",\n            sink_name=\"data_#_post_id\",\n        ),\n        Link(\n            source_id=text_matcher_node.id,\n            sink_id=reddit_comment_node.id,\n            source_name=\"positive_#_marketing_text\",\n            sink_name=\"data_#_comment\",\n        ),\n    ]",
          "successors": []
        },
        {
          "id": 9,
          "start_line": 120,
          "end_line": 127,
          "label": "# Create graph\n    test_graph = Graph(\n        name=\"RedditMarketingAgent\",\n        description=\"Reddit marketing agent\",\n        nodes=nodes,\n        links=links,\n    )\n    return test_graph",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_test_user",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 8,
          "label": "async def create_test_user() -> User:\n    test_user_data = {\n        \"sub\": \"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n        \"email\": \"testuser@example.com\",\n        \"name\": \"Test User\",\n    }\n    user = await get_or_create_user(test_user_data)\n    return user",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "reddit_marketing_agent",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}