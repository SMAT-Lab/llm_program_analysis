{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "# Knight Tour Intro: https://www.youtube.com/watch?v=ab_dY3dZFHM\nfrom __future__ import annotations\nif __name__ == \"__main__\":",
      "successors": [
        {
          "id": 2,
          "start_line": 4,
          "end_line": 5,
          "label": "import doctest\n    doctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_valid_pos",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 18,
          "label": "def get_valid_pos(position: tuple[int, int], n: int) -> list[tuple[int, int]]:\n    \"\"\"\n    Find all the valid positions a knight can move to from the current position.\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\n    y, x = position\n    positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]\n    permissible_positions = []",
          "successors": [
            {
              "id": 2,
              "start_line": 19,
              "end_line": 23,
              "label": "for inner_position in positions:\n        y_test, x_test = inner_position\n    return permissible_positions",
              "successors": [
                {
                  "id": 3,
                  "start_line": 21,
                  "end_line": 22,
                  "label": "if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "is_complete",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 9,
          "end_line": 9,
          "label": "return not any(elem == 0 for row in board for elem in row)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "open_knight_tour_helper",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 7,
          "label": "def open_knight_tour_helper(\n    board: list[list[int]], pos: tuple[int, int], curr: int\n) -> bool:\n    \"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\n    if is_complete(board):",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 8,
              "label": "return True",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 9,
              "end_line": 9,
              "label": "for position in get_valid_pos(pos, len(board)):",
              "successors": [
                {
                  "id": 4,
                  "start_line": 10,
                  "end_line": 11,
                  "label": "y, x = position\n        if board[y][x] == 0:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 12,
                      "end_line": 13,
                      "label": "board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 14,
                          "end_line": 14,
                          "label": "return True",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "board[y][x] = 0",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 8,
              "start_line": 16,
              "end_line": 16,
              "label": "return False",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "open_knight_tour",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 12,
          "label": "def open_knight_tour(n: int) -> list[list[int]]:\n    \"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n    >>> open_knight_tour(1)\n    [[1]]\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"\n    board = [[0 for i in range(n)] for j in range(n)]",
          "successors": [
            {
              "id": 2,
              "start_line": 13,
              "end_line": 14,
              "label": "for i in range(n):\n        for j in range(n):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 15,
                  "end_line": 16,
                  "label": "board[i][j] = 1\n            if open_knight_tour_helper(board, (i, j), 1):",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 17,
                      "end_line": 17,
                      "label": "return board",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 18,
                      "end_line": 18,
                      "label": "board[i][j] = 0",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "start_line": 19,
              "end_line": 20,
              "label": "msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"\n    raise ValueError(msg)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}