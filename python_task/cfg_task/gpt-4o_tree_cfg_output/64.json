{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 8,
      "label": "\"\"\"\nIn this problem, we want to determine all possible subsequences\nof the given sequence. We use backtracking to solve this problem.\nTime complexity: O(2^n),\nwhere n denotes the length of the given sequence.\n\"\"\"\nfrom __future__ import annotations\nfrom typing import Any",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 9,
      "end_line": 9,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        {
          "id": 3,
          "start_line": 10,
          "end_line": 14,
          "label": "seq: list[Any] = [1, 2, 3]\n    generate_all_subsequences(seq)\n    seq.clear()\n    seq.extend([\"A\", \"B\", \"C\"])\n    generate_all_subsequences(seq)",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "generate_all_subsequences",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def generate_all_subsequences(sequence: list[Any]) -> None:\n    create_state_space_tree(sequence, [], 0)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_state_space_tree",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 54,
          "end_line": 54,
          "label": "if index == len(sequence):",
          "successors": [
            {
              "id": 2,
              "start_line": 55,
              "end_line": 56,
              "label": "print(current_subsequence)\n        return",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 57,
              "end_line": 60,
              "label": "create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.append(sequence[index])\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.pop()",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}