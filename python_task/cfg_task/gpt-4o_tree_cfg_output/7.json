{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 11,
      "label": "from abc import ABC, abstractmethod\nfrom datetime import datetime, timezone\nfrom prisma import Json\nfrom prisma.enums import CreditTransactionType\nfrom prisma.errors import UniqueViolationError\nfrom prisma.models import CreditTransaction\nfrom backend.data.block import Block, BlockInput, get_block\nfrom backend.data.block_cost_config import BLOCK_COSTS\nfrom backend.data.cost import BlockCost, BlockCostType\nfrom backend.util.settings import Config\nconfig = Config()",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "get_user_credit_model",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def get_user_credit_model() -> UserCreditBase:\n    if config.enable_credit.lower() == \"true\":",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "return UserCredit(config.num_user_credits_refill)",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 5,
              "end_line": 5,
              "label": "return DisabledUserCredit(0)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_block_costs",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def get_block_costs() -> dict[str, list[BlockCost]]:\n    return {block().id: costs for block, costs in BLOCK_COSTS.items()}",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "UserCreditBase",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def __init__(self, num_user_credits_refill: int):\n        self.num_user_credits_refill = num_user_credits_refill",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_or_refill_credit",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 7,
              "label": "async def get_or_refill_credit(self, user_id: str) -> int:\n        \"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "spend_credits",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 22,
              "label": "async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> int:\n        \"\"\"\n        Spend the credits for the user based on the block usage.\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n        Returns:\n            int: amount of credit spent\n        \"\"\"\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "top_up_credits",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 8,
              "label": "async def top_up_credits(self, user_id: str, amount: int):\n        \"\"\"\n        Top up the credits for the user.\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "UserCredit",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "get_or_refill_credit",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 17,
              "label": "async def get_or_refill_credit(self, user_id: str) -> int:\n        cur_time = self.time_now()\n        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )\n        user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 18,
                  "end_line": 20,
                  "label": "if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 22,
                  "end_line": 31,
                  "label": "try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 32,
                      "end_line": 33,
                      "label": "except UniqueViolationError:\n            pass  # Already refilled this month",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "start_line": 21,
              "end_line": 21,
              "label": "key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"",
              "successors": []
            },
            {
              "id": 6,
              "start_line": 34,
              "end_line": 34,
              "label": "return self.num_user_credits_refill",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "time_now",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "_block_usage_cost",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 8,
              "label": "def _block_usage_cost(\n        self,\n        block: Block,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> tuple[int, BlockInput]:\n        block_costs = BLOCK_COSTS.get(type(block))",
              "successors": [
                {
                  "id": 2,
                  "start_line": 9,
                  "end_line": 10,
                  "label": "if not block_costs:\n            return 0, {}",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 11,
                  "end_line": 26,
                  "label": "for block_cost in block_costs:\n        return 0, {}",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 12,
                      "end_line": 13,
                      "label": "if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 14,
                      "end_line": 15,
                      "label": "if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 16,
                      "end_line": 20,
                      "label": "if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "start_line": 21,
                      "end_line": 25,
                      "label": "if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_is_cost_filter_match",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 10,
              "end_line": 10,
              "label": "if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "return cost_filter == input_data",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 12,
                  "end_line": 16,
                  "label": "return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "spend_credits",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 11,
              "label": "async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n        validate_balance: bool = True,\n    ) -> int:\n        block = get_block(block_id)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 12,
                  "end_line": 12,
                  "label": "if not block:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 13,
                      "end_line": 13,
                      "label": "raise ValueError(f\"Block not found: {block_id}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 14,
                  "end_line": 16,
                  "label": "cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 17,
                      "end_line": 17,
                      "label": "if cost <= 0:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 18,
                          "end_line": 18,
                          "label": "return 0",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 19,
                      "end_line": 19,
                      "label": "if validate_balance and user_credit < cost:",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 20,
                          "end_line": 20,
                          "label": "raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "start_line": 21,
                      "end_line": 35,
                      "label": "await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )",
                      "successors": [
                        {
                          "id": 10,
                          "start_line": 36,
                          "end_line": 36,
                          "label": "return cost",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "top_up_credits",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 9,
              "label": "await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "DisabledUserCredit",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "get_or_refill_credit",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "async def get_or_refill_credit(self, *args, **kwargs) -> int:\n        return 0",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "spend_credits",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "async def spend_credits(self, *args, **kwargs) -> int:\n        return 0",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "top_up_credits",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "async def top_up_credits(self, *args, **kwargs):\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}