{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 4,
      "label": "import fastapi\nfrom .config import Settings\nfrom .middleware import auth_middleware\nfrom .models import DEFAULT_USER_ID, User",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "requires_user",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def requires_user(payload: dict = fastapi.Depends(auth_middleware)) -> User:\n    return verify_user(payload, admin_only=False)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "requires_admin_user",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def requires_admin_user(\n    payload: dict = fastapi.Depends(auth_middleware),\n) -> User:\n    return verify_user(payload, admin_only=True)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "verify_user",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def verify_user(payload: dict | None, admin_only: bool) -> User:\n    if not payload:",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "if Settings.ENABLE_AUTH:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 6,
                  "label": "raise fastapi.HTTPException(\n                status_code=401, detail=\"Authorization header is missing\"\n            )",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 8,
              "end_line": 8,
              "label": "payload = {\"sub\": DEFAULT_USER_ID, \"role\": \"admin\"}",
              "successors": []
            }
          ]
        },
        {
          "id": 5,
          "start_line": 9,
          "end_line": 10,
          "label": "user_id = payload.get(\"sub\")\n    if not user_id:",
          "successors": [
            {
              "id": 6,
              "start_line": 11,
              "end_line": 13,
              "label": "raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )",
              "successors": []
            }
          ]
        },
        {
          "id": 7,
          "start_line": 14,
          "end_line": 14,
          "label": "if admin_only and payload[\"role\"] != \"admin\":",
          "successors": [
            {
              "id": 8,
              "start_line": 15,
              "end_line": 15,
              "label": "raise fastapi.HTTPException(status_code=403, detail=\"Admin access required\")",
              "successors": []
            }
          ]
        },
        {
          "id": 9,
          "start_line": 16,
          "end_line": 16,
          "label": "return User.from_payload(payload)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_user_id",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def get_user_id(payload: dict = fastapi.Depends(auth_middleware)) -> str:\n    user_id = payload.get(\"sub\")\n    if not user_id:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 6,
              "label": "raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 7,
              "end_line": 7,
              "label": "return user_id",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}