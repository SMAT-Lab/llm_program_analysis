{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 13,
      "label": "import hashlib\nimport hmac\nimport logging\nimport requests\nfrom fastapi import HTTPException, Request\nfrom strenum import StrEnum\nfrom backend.data import integrations\nfrom backend.data.model import Credentials\nfrom backend.integrations.providers import ProviderName\nfrom ._base import BaseWebhooksManager\nlogger = logging.getLogger(__name__)\n# --8<-- [start:GithubWebhooksManager]\n# --8<-- [end:GithubWebhooksManager]",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "extract_github_error_msg",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def extract_github_error_msg(response: requests.Response) -> str:\n    error_msgs = []\n    resp = response.json()\n    if resp.get(\"message\"):",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 5,
              "label": "error_msgs.append(resp[\"message\"])",
              "successors": []
            }
          ]
        },
        {
          "id": 3,
          "start_line": 6,
          "end_line": 6,
          "label": "if resp.get(\"errors\"):",
          "successors": [
            {
              "id": 4,
              "start_line": 7,
              "end_line": 7,
              "label": "error_msgs.extend(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])",
              "successors": []
            }
          ]
        },
        {
          "id": 5,
          "start_line": 8,
          "end_line": 8,
          "label": "if resp.get(\"error\"):",
          "successors": [
            {
              "id": 6,
              "start_line": 9,
              "end_line": 10,
              "label": "if isinstance(resp[\"error\"], dict):\n            error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))",
              "successors": []
            },
            {
              "id": 7,
              "start_line": 11,
              "end_line": 12,
              "label": "else:\n            error_msgs.append(resp[\"error\"])",
              "successors": []
            }
          ]
        },
        {
          "id": 8,
          "start_line": 13,
          "end_line": 13,
          "label": "return \"\\n\".join(error_msgs)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "GithubWebhookType",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "GithubWebhooksManager",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "validate_payload",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "if not (event_type := request.headers.get(\"X-GitHub-Event\")):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 7,
                      "label": "raise HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "if not (signature_header := request.headers.get(\"X-Hub-Signature-256\")):",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 9,
                      "end_line": 11,
                      "label": "raise HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "start_line": 12,
                  "end_line": 16,
                  "label": "payload_body = await request.body()\n        hash_object = hmac.new(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )\n        expected_signature = \"sha256=\" + hash_object.hexdigest()",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 17,
                      "end_line": 17,
                      "label": "if not hmac.compare_digest(expected_signature, signature_header):",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 18,
                          "end_line": 20,
                          "label": "raise HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "start_line": 21,
                      "end_line": 24,
                      "label": "payload = await request.json()\n        return payload, event_type",
                      "successors": [
                        {
                          "id": 10,
                          "start_line": 22,
                          "end_line": 22,
                          "label": "if action := payload.get(\"action\"):",
                          "successors": [
                            {
                              "id": 11,
                              "start_line": 23,
                              "end_line": 23,
                              "label": "event_type += f\".{action}\"",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "trigger_ping",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "async def trigger_ping(\n        self, webhook: integrations.Webhook, credentials: Credentials | None\n    ) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "if not credentials:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "raise ValueError(\"Credentials are required but were not passed\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 6,
                  "end_line": 12,
                  "label": "headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n        repo, github_hook_id = webhook.resource, webhook.provider_webhook_id\n        ping_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\"\n        response = requests.post(ping_url, headers=headers)",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 13,
                      "end_line": 13,
                      "label": "if response.status_code != 204:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 14,
                          "end_line": 15,
                          "label": "error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_register_webhook",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 10,
              "end_line": 11,
              "label": "if webhook_type == self.WebhookType.REPO and resource.count(\"/\") > 1:\n            raise ValueError(\"Invalid repo format: expected 'owner/repo'\")",
              "successors": []
            },
            {
              "id": 2,
              "start_line": 13,
              "end_line": 33,
              "label": "github_events = list({event.split(\".\")[0] for event in events})\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n        webhook_data = {\n            \"name\": \"web\",\n            \"active\": True,\n            \"events\": github_events,\n            \"config\": {\n                \"url\": ingress_url,\n                \"content_type\": \"json\",\n                \"insecure_ssl\": \"0\",\n                \"secret\": secret,\n            },\n        }\n        response = requests.post(\n            f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\",\n            headers=headers,\n            json=webhook_data,\n        )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 34,
                  "end_line": 42,
                  "label": "if response.status_code != 201:\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to create GitHub webhook: {error_msg}\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 36,
                      "end_line": 41,
                      "label": "if \"not found\" in error_msg.lower():\n                error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "start_line": 43,
              "end_line": 45,
              "label": "webhook_id = response.json()[\"id\"]\n        config = response.json()[\"config\"]\n        return str(webhook_id), config",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_deregister_webhook",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:\n        webhook_type = self.WebhookType(webhook.webhook_type)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "if webhook.credentials_id != credentials.id:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 6,
                      "end_line": 8,
                      "label": "raise ValueError(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 9,
                  "end_line": 12,
                  "label": "headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 13,
                      "end_line": 13,
                      "label": "if webhook_type == self.WebhookType.REPO:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 14,
                          "end_line": 15,
                          "label": "repo = webhook.resource\n            delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"  # noqa",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 16,
                      "end_line": 16,
                      "label": "else:",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 17,
                          "end_line": 19,
                          "label": "raise NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "start_line": 20,
                  "end_line": 20,
                  "label": "response = requests.delete(delete_url, headers=headers)",
                  "successors": [
                    {
                      "id": 10,
                      "start_line": 21,
                      "end_line": 21,
                      "label": "if response.status_code not in [204, 404]:",
                      "successors": [
                        {
                          "id": 11,
                          "start_line": 22,
                          "end_line": 24,
                          "label": "# 204 means successful deletion, 404 means the webhook was already deleted\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 12,
                      "start_line": 25,
                      "end_line": 25,
                      "label": "# If we reach here, the webhook was successfully deleted or didn't exist",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}