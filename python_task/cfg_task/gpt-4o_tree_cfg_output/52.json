{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "import hashlib\nimport secrets\nfrom typing import NamedTuple",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "APIKeyContainer",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "class APIKeyContainer(NamedTuple):\n    \"\"\"Container for API key parts.\"\"\"\n    raw: str\n    prefix: str\n    postfix: str\n    hash: str",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "APIKeyManager",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "generate_api_key",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 9,
              "label": "def generate_api_key(self) -> APIKeyContainer:\n        \"\"\"Generate a new API key with all its parts.\"\"\"\n        raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\"\n        return APIKeyContainer(\n            raw=raw_key,\n            prefix=raw_key[: self.PREFIX_LENGTH],\n            postfix=raw_key[-self.POSTFIX_LENGTH :],\n            hash=hashlib.sha256(raw_key.encode()).hexdigest(),\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "verify_api_key",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def verify_api_key(self, provided_key: str, stored_hash: str) -> bool:\n        \"\"\"Verify if a provided API key matches the stored hash.\"\"\"\n        if not provided_key.startswith(self.PREFIX):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "return False",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}