{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "import smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom pydantic import BaseModel, ConfigDict\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import BlockSecret, SchemaField, SecretField",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "EmailCredentials",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 8,
          "label": "class EmailCredentials(BaseModel):\n    smtp_server: str = SchemaField(\n        default=\"smtp.gmail.com\", description=\"SMTP server address\"\n    )\n    smtp_port: int = SchemaField(default=25, description=\"SMTP port number\")\n    smtp_username: BlockSecret = SecretField(key=\"smtp_username\")\n    smtp_password: BlockSecret = SecretField(key=\"smtp_password\")\n    model_config = ConfigDict(title=\"Email Credentials\")",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "SendEmailBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 22,
              "label": "def __init__(self):\n        super().__init__(\n            disabled=True,\n            id=\"4335878a-394e-4e67-adf2-919877ff49ae\",\n            description=\"This block sends an email using the provided SMTP credentials.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendEmailBlock.Input,\n            output_schema=SendEmailBlock.Output,\n            test_input={\n                \"to_email\": \"recipient@example.com\",\n                \"subject\": \"Test Email\",\n                \"body\": \"This is a test email.\",\n                \"creds\": {\n                    \"smtp_server\": \"smtp.gmail.com\",\n                    \"smtp_port\": 25,\n                    \"smtp_username\": \"your-email@gmail.com\",\n                    \"smtp_password\": \"your-gmail-password\",\n                },\n            },\n            test_output=[(\"status\", \"Email sent successfully\")],\n            test_mock={\"send_email\": lambda *args, **kwargs: \"Email sent successfully\"},\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "send_email",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 12,
              "label": "def send_email(\n        creds: EmailCredentials, to_email: str, subject: str, body: str\n    ) -> str:\n        smtp_server = creds.smtp_server\n        smtp_port = creds.smtp_port\n        smtp_username = creds.smtp_username.get_secret_value()\n        smtp_password = creds.smtp_password.get_secret_value()\n        msg = MIMEMultipart()\n        msg[\"From\"] = smtp_username\n        msg[\"To\"] = to_email\n        msg[\"Subject\"] = subject\n        msg.attach(MIMEText(body, \"plain\"))",
              "successors": [
                {
                  "id": 2,
                  "start_line": 13,
                  "end_line": 16,
                  "label": "with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(smtp_username, smtp_password)\n            server.sendmail(smtp_username, to_email, msg.as_string())",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 17,
              "end_line": 17,
              "label": "return \"Email sent successfully\"",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"status\", self.send_email(",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 7,
                  "label": "input_data.creds,\n            input_data.to_email,\n            input_data.subject,\n            input_data.body,\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}