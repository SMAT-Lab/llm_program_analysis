{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 14,
      "label": "import logging\nimport typing\nimport urllib.parse\nimport autogpt_libs.auth.depends\nimport autogpt_libs.auth.middleware\nimport fastapi\nimport fastapi.responses\nimport backend.data.graph\nimport backend.server.v2.store.db\nimport backend.server.v2.store.image_gen\nimport backend.server.v2.store.media\nimport backend.server.v2.store.model\nlogger = logging.getLogger(__name__)\nrouter = fastapi.APIRouter()",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 18,
      "end_line": 22,
      "label": "@router.get(\n    \"/profile\",\n    tags=[\"store\", \"private\"],\n    response_model=backend.server.v2.store.model.ProfileDetails,\n)",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 23,
      "end_line": 28,
      "label": "@router.post(\n    \"/profile\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.CreatorDetails,\n)",
      "successors": []
    },
    {
      "id": 4,
      "start_line": 32,
      "end_line": 36,
      "label": "@router.get(\n    \"/agents\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.StoreAgentsResponse,\n)",
      "successors": []
    },
    {
      "id": 5,
      "start_line": 37,
      "end_line": 41,
      "label": "@router.get(\n    \"/agents/{username}/{agent_name}\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.StoreAgentDetails,\n)",
      "successors": []
    },
    {
      "id": 6,
      "start_line": 42,
      "end_line": 47,
      "label": "@router.post(\n    \"/agents/{username}/{agent_name}/review\",\n    tags=[\"store\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.StoreReview,\n)",
      "successors": []
    },
    {
      "id": 7,
      "start_line": 51,
      "end_line": 55,
      "label": "@router.get(\n    \"/creators\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.CreatorsResponse,\n)",
      "successors": []
    },
    {
      "id": 8,
      "start_line": 56,
      "end_line": 60,
      "label": "@router.get(\n    \"/creator/{username}\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.CreatorDetails,\n)",
      "successors": []
    },
    {
      "id": 9,
      "start_line": 64,
      "end_line": 69,
      "label": "@router.get(\n    \"/myagents\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.MyAgentsResponse,\n)",
      "successors": []
    },
    {
      "id": 10,
      "start_line": 70,
      "end_line": 75,
      "label": "@router.delete(\n    \"/submissions/{submission_id}\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=bool,\n)",
      "successors": []
    },
    {
      "id": 11,
      "start_line": 76,
      "end_line": 81,
      "label": "@router.get(\n    \"/submissions\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.StoreSubmissionsResponse,\n)",
      "successors": []
    },
    {
      "id": 12,
      "start_line": 82,
      "end_line": 87,
      "label": "@router.post(\n    \"/submissions\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.StoreSubmission,\n)",
      "successors": []
    },
    {
      "id": 13,
      "start_line": 88,
      "end_line": 92,
      "label": "@router.post(\n    \"/submissions/media\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 14,
      "start_line": 93,
      "end_line": 97,
      "label": "@router.post(\n    \"/submissions/generate_image\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "get_profile",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 9,
          "label": "async def get_profile(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ]\n):\n    \"\"\"\n    Get the profile details for the authenticated user.\n    \"\"\"\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 10,
              "end_line": 11,
              "label": "profile = await backend.server.v2.store.db.get_user_profile(user_id)\n        return profile",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 12,
              "end_line": 17,
              "label": "except Exception:\n        logger.exception(\"Exception occurred whilst getting user profile\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while retrieving the user profile\"},\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "update_or_create_profile",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 17,
          "end_line": 17,
          "label": "try:",
          "successors": [
            {
              "id": 2,
              "start_line": 18,
              "end_line": 21,
              "label": "updated_profile = await backend.server.v2.store.db.update_or_create_profile(\n            user_id=user_id, profile=profile\n        )\n        return updated_profile",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 22,
              "end_line": 27,
              "label": "except Exception:\n        logger.exception(\"Exception occurred whilst updating profile\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while updating the user profile\"},\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_agents",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 31,
          "label": "async def get_agents(\n    featured: bool = False,\n    creator: str | None = None,\n    sorted_by: str | None = None,\n    search_query: str | None = None,\n    category: str | None = None,\n    page: int = 1,\n    page_size: int = 20,\n):\n    \"\"\"\n    Get a paginated list of agents from the store with optional filtering and sorting.\n    Args:\n        featured (bool, optional): Filter to only show featured agents. Defaults to False.\n        creator (str | None, optional): Filter agents by creator username. Defaults to None.\n        sorted_by (str | None, optional): Sort agents by \"runs\" or \"rating\". Defaults to None.\n        search_query (str | None, optional): Search agents by name, subheading and description. Defaults to None.\n        category (str | None, optional): Filter agents by category. Defaults to None.\n        page (int, optional): Page number for pagination. Defaults to 1.\n        page_size (int, optional): Number of agents per page. Defaults to 20.\n    Returns:\n        StoreAgentsResponse: Paginated list of agents matching the filters\n    Raises:\n        HTTPException: If page or page_size are less than 1\n    Used for:\n    - Home Page Featured Agents\n    - Home Page Top Agents\n    - Search Results\n    - Agent Details - Other Agents By Creator\n    - Agent Details - Similar Agents\n    - Creator Details - Agents By Creator\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 32,
              "end_line": 32,
              "label": "if page < 1:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 33,
                  "end_line": 35,
                  "label": "raise fastapi.HTTPException(\n            status_code=422, detail=\"Page must be greater than 0\"\n        )",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 36,
              "end_line": 36,
              "label": "if page_size < 1:",
              "successors": [
                {
                  "id": 5,
                  "start_line": 37,
                  "end_line": 39,
                  "label": "raise fastapi.HTTPException(\n            status_code=422, detail=\"Page size must be greater than 0\"\n        )",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "start_line": 40,
              "end_line": 40,
              "label": "try:",
              "successors": [
                {
                  "id": 7,
                  "start_line": 41,
                  "end_line": 50,
                  "label": "agents = await backend.server.v2.store.db.get_store_agents(\n            featured=featured,\n            creator=creator,\n            sorted_by=sorted_by,\n            search_query=search_query,\n            category=category,\n            page=page,\n            page_size=page_size,\n        )\n        return agents",
                  "successors": []
                },
                {
                  "id": 8,
                  "start_line": 51,
                  "end_line": 51,
                  "label": "except Exception:",
                  "successors": [
                    {
                      "id": 9,
                      "start_line": 52,
                      "end_line": 56,
                      "label": "logger.exception(\"Exception occured whilst getting store agents\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while retrieving the store agents\"},\n        )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_agent",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "async def get_agent(username: str, agent_name: str):\n    \"\"\"\n    This is only used on the AgentDetails Page\n    It returns the store listing agents details.\n    \"\"\"\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 13,
              "label": "username = urllib.parse.unquote(username).lower()\n        # URL decode the agent name since it comes from the URL path\n        agent_name = urllib.parse.unquote(agent_name).lower()\n        agent = await backend.server.v2.store.db.get_store_agent_details(\n            username=username, agent_name=agent_name\n        )\n        return agent",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 14,
              "end_line": 21,
              "label": "except Exception:\n        logger.exception(\"Exception occurred whilst getting store agent details\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\n                \"detail\": \"An error occurred while retrieving the store agent details\"\n            },\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_review",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 19,
          "label": "async def create_review(\n    username: str,\n    agent_name: str,\n    review: backend.server.v2.store.model.StoreReviewCreate,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):\n    \"\"\"\n    Create a review for a store agent.\n    Args:\n        username: Creator's username\n        agent_name: Name/slug of the agent\n        review: Review details including score and optional comments\n        user_id: ID of authenticated user creating the review\n    Returns:\n        The created review\n    \"\"\"\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 20,
              "end_line": 29,
              "label": "username = urllib.parse.unquote(username).lower()\n        agent_name = urllib.parse.unquote(agent_name)\n        # Create the review\n        created_review = await backend.server.v2.store.db.create_store_review(\n            user_id=user_id,\n            store_listing_version_id=review.store_listing_version_id,\n            score=review.score,\n            comments=review.comments,\n        )\n        return created_review",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 30,
              "end_line": 35,
              "label": "except Exception:\n        logger.exception(\"Exception occurred whilst creating store review\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while creating the store review\"},\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_creators",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 18,
          "end_line": 18,
          "label": "if page < 1:",
          "successors": [
            {
              "id": 2,
              "start_line": 19,
              "end_line": 21,
              "label": "raise fastapi.HTTPException(\n            status_code=422, detail=\"Page must be greater than 0\"\n        )",
              "successors": []
            }
          ]
        },
        {
          "id": 3,
          "start_line": 22,
          "end_line": 22,
          "label": "if page_size < 1:",
          "successors": [
            {
              "id": 4,
              "start_line": 23,
              "end_line": 25,
              "label": "raise fastapi.HTTPException(\n            status_code=422, detail=\"Page size must be greater than 0\"\n        )",
              "successors": []
            }
          ]
        },
        {
          "id": 5,
          "start_line": 26,
          "end_line": 26,
          "label": "try:",
          "successors": [
            {
              "id": 6,
              "start_line": 27,
              "end_line": 34,
              "label": "creators = await backend.server.v2.store.db.get_store_creators(\n            featured=featured,\n            search_query=search_query,\n            sorted_by=sorted_by,\n            page=page,\n            page_size=page_size,\n        )\n        return creators",
              "successors": []
            },
            {
              "id": 7,
              "start_line": 35,
              "end_line": 35,
              "label": "except Exception:",
              "successors": [
                {
                  "id": 8,
                  "start_line": 36,
                  "end_line": 40,
                  "label": "logger.exception(\"Exception occurred whilst getting store creators\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while retrieving the store creators\"},\n        )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_creator",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 8,
          "label": "async def get_creator(\n    username: str,\n):\n    \"\"\"\n    Get the details of a creator\n    - Creator Details Page\n    \"\"\"\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 9,
              "end_line": 13,
              "label": "username = urllib.parse.unquote(username).lower()\n        creator = await backend.server.v2.store.db.get_store_creator_details(\n            username=username.lower()\n        )\n        return creator",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 14,
              "end_line": 21,
              "label": "except Exception:\n        logger.exception(\"Exception occurred whilst getting creator details\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\n                \"detail\": \"An error occurred while retrieving the creator details\"\n            },\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_my_agents",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "async def get_my_agents(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ]\n):\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 8,
              "label": "agents = await backend.server.v2.store.db.get_my_agents(user_id)\n        return agents",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 9,
              "end_line": 14,
              "label": "except Exception:\n        logger.exception(\"Exception occurred whilst getting my agents\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while retrieving the my agents\"},\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "delete_submission",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 14,
          "label": "async def delete_submission(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n    submission_id: str,\n):\n    \"\"\"\n    Delete a store listing submission.\n    Args:\n        user_id (str): ID of the authenticated user\n        submission_id (str): ID of the submission to be deleted\n    Returns:\n        bool: True if the submission was successfully deleted, False otherwise\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 15,
              "end_line": 15,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 16,
                  "end_line": 20,
                  "label": "result = await backend.server.v2.store.db.delete_store_submission(\n            user_id=user_id,\n            submission_id=submission_id,\n        )\n        return result",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 21,
                  "end_line": 26,
                  "label": "except Exception:\n        logger.exception(\"Exception occurred whilst deleting store submission\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while deleting the store submission\"},\n        )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_submissions",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 18,
          "label": "async def get_submissions(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n    page: int = 1,\n    page_size: int = 20,\n):\n    \"\"\"\n    Get a paginated list of store submissions for the authenticated user.\n    Args:\n        user_id (str): ID of the authenticated user\n        page (int, optional): Page number for pagination. Defaults to 1.\n        page_size (int, optional): Number of submissions per page. Defaults to 20.\n    Returns:\n        StoreListingsResponse: Paginated list of store submissions\n    Raises:\n        HTTPException: If page or page_size are less than 1\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 19,
              "end_line": 19,
              "label": "if page < 1:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 20,
                  "end_line": 22,
                  "label": "raise fastapi.HTTPException(\n            status_code=422, detail=\"Page must be greater than 0\"\n        )",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 23,
              "end_line": 23,
              "label": "if page_size < 1:",
              "successors": [
                {
                  "id": 5,
                  "start_line": 24,
                  "end_line": 26,
                  "label": "raise fastapi.HTTPException(\n            status_code=422, detail=\"Page size must be greater than 0\"\n        )",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "start_line": 27,
              "end_line": 27,
              "label": "try:",
              "successors": [
                {
                  "id": 7,
                  "start_line": 28,
                  "end_line": 33,
                  "label": "listings = await backend.server.v2.store.db.get_store_submissions(\n            user_id=user_id,\n            page=page,\n            page_size=page_size,\n        )\n        return listings",
                  "successors": []
                },
                {
                  "id": 8,
                  "start_line": 34,
                  "end_line": 34,
                  "label": "except Exception:",
                  "successors": [
                    {
                      "id": 9,
                      "start_line": 35,
                      "end_line": 41,
                      "label": "logger.exception(\"Exception occurred whilst getting store submissions\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\n                \"detail\": \"An error occurred while retrieving the store submissions\"\n            },\n        )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_submission",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 16,
          "label": "async def create_submission(\n    submission_request: backend.server.v2.store.model.StoreSubmissionRequest,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):\n    \"\"\"\n    Create a new store listing submission.\n    Args:\n        submission_request (StoreSubmissionRequest): The submission details\n        user_id (str): ID of the authenticated user submitting the listing\n    Returns:\n        StoreSubmission: The created store submission\n    Raises:\n        HTTPException: If there is an error creating the submission\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 17,
              "end_line": 30,
              "label": "try:\n        submission = await backend.server.v2.store.db.create_store_submission(\n            user_id=user_id,\n            agent_id=submission_request.agent_id,\n            agent_version=submission_request.agent_version,\n            slug=submission_request.slug,\n            name=submission_request.name,\n            video_url=submission_request.video_url,\n            image_urls=submission_request.image_urls,\n            description=submission_request.description,\n            sub_heading=submission_request.sub_heading,\n            categories=submission_request.categories,\n        )\n        return submission",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 31,
              "end_line": 36,
              "label": "except Exception:\n        logger.exception(\"Exception occurred whilst creating store submission\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while creating the store submission\"},\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "upload_submission_media",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 16,
          "label": "async def upload_submission_media(\n    file: fastapi.UploadFile,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):\n    \"\"\"\n    Upload media (images/videos) for a store listing submission.\n    Args:\n        file (UploadFile): The media file to upload\n        user_id (str): ID of the authenticated user uploading the media\n    Returns:\n        str: URL of the uploaded media file\n    Raises:\n        HTTPException: If there is an error uploading the media\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 17,
              "end_line": 21,
              "label": "try:\n        media_url = await backend.server.v2.store.media.upload_media(\n            user_id=user_id, file=file\n        )\n        return media_url",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 22,
              "end_line": 27,
              "label": "except Exception:\n        logger.exception(\"Exception occurred whilst uploading submission media\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while uploading the media file\"},\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "generate_image",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 15,
          "label": "async def generate_image(\n    agent_id: str,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n) -> fastapi.responses.Response:\n    \"\"\"\n    Generate an image for a store listing submission.\n    Args:\n        agent_id (str): ID of the agent to generate an image for\n        user_id (str): ID of the authenticated user\n    Returns:\n        JSONResponse: JSON containing the URL of the generated image\n    \"\"\"\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 16,
              "end_line": 16,
              "label": "agent = await backend.data.graph.get_graph(agent_id, user_id=user_id)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 17,
                  "end_line": 17,
                  "label": "if not agent:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 18,
                      "end_line": 20,
                      "label": "raise fastapi.HTTPException(\n                status_code=404, detail=f\"Agent with ID {agent_id} not found\"\n            )",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 21,
                  "end_line": 25,
                  "label": "# Use .jpeg here since we are generating JPEG images\n        filename = f\"agent_{agent_id}.jpeg\"\n        existing_url = await backend.server.v2.store.media.check_media_exists(\n            user_id, filename\n        )",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 26,
                      "end_line": 26,
                      "label": "if existing_url:",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 27,
                          "end_line": 28,
                          "label": "logger.info(f\"Using existing image for agent {agent_id}\")\n            return fastapi.responses.JSONResponse(content={\"image_url\": existing_url})",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "start_line": 29,
                      "end_line": 41,
                      "label": "# Generate agent image as JPEG\n        image = await backend.server.v2.store.image_gen.generate_agent_image(\n            agent=agent\n        )\n        # Create UploadFile with the correct filename and content_type\n        image_file = fastapi.UploadFile(\n            file=image,\n            filename=filename,\n        )\n        image_url = await backend.server.v2.store.media.upload_media(\n            user_id=user_id, file=image_file, use_file_name=True\n        )\n        return fastapi.responses.JSONResponse(content={\"image_url\": image_url})",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 9,
          "start_line": 42,
          "end_line": 42,
          "label": "except Exception:",
          "successors": [
            {
              "id": 10,
              "start_line": 43,
              "end_line": 47,
              "label": "logger.exception(\"Exception occurred whilst generating submission image\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while generating the image\"},\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}