{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "# -*- coding: utf-8 -*-",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "QueryApi",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def __init__(self, memory_cache, reverse_index_cluster):\n        self.memory_cache = memory_cache\n        self.reverse_index_cluster = reverse_index_cluster",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "parse_query",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def parse_query(self, query):\n        \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n        ...",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "process_query",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "def process_query(self, query):\n        query = self.parse_query(query)\n        results = self.memory_cache.get(query)\n        if results is None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 7,
              "end_line": 7,
              "label": "return results",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Node",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def __init__(self, query, results):\n        self.query = query\n        self.results = results",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "LinkedList",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def __init__(self):\n        self.head = None\n        self.tail = None",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "move_to_front",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def move_to_front(self, node):\n        ...",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "append_to_front",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def append_to_front(self, node):\n        ...",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "remove_from_tail",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def remove_from_tail(self):\n        ...",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Cache",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}\n        self.linked_list = LinkedList()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 5,
              "end_line": 6,
              "label": "node = self.lookup[query]\n        if node is None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "return None",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 8,
                  "end_line": 9,
                  "label": "self.linked_list.move_to_front(node)\n        return node.results",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "set",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 7,
              "label": "def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.map[query]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 8,
                  "end_line": 11,
                  "label": "if node is not None:\n            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 12,
                  "end_line": 23,
                  "label": "else:\n            # Key does not exist in cache\n            # Add the new key and value\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 14,
                      "end_line": 17,
                      "label": "if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 18,
                      "end_line": 19,
                      "label": "else:\n                self.size += 1",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}