{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 12,
      "end_line": 12,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        {
          "id": 2,
          "start_line": 13,
          "end_line": 15,
          "label": "import doctest\n    doctest.testmod()\n    main()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "backtrack",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 15,
          "end_line": 17,
          "label": "if target == 0:\n    else:",
          "successors": [
            {
              "id": 2,
              "start_line": 16,
              "end_line": 16,
              "label": "answer.append(path.copy())",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 18,
              "end_line": 22,
              "label": "for index in range(previous_index, len(candidates)):",
              "successors": [
                {
                  "id": 4,
                  "start_line": 19,
                  "end_line": 22,
                  "label": "if target >= candidates[index]:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 20,
                      "end_line": 22,
                      "label": "path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "combination_sum",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 12,
          "end_line": 15,
          "label": "path = []  # type: list[int]\n    answer = []  # type: list[int]\n    backtrack(candidates, path, answer, target, 0)\n    return answer",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def main() -> None:\n    print(combination_sum([-8, 2.3, 0], 1))",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}