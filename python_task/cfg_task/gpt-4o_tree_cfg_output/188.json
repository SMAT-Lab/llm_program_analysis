{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "from datetime import datetime\nimport prisma.errors\nimport prisma.models\nimport pytest\nfrom prisma import Prisma\nimport backend.server.v2.store.db as db\nfrom backend.server.v2.store.model import Profile",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 8,
      "end_line": 14,
      "label": "@pytest.fixture(autouse=True)\n@pytest.mark.asyncio\n@pytest.mark.asyncio\n@pytest.mark.asyncio\n@pytest.mark.asyncio\n@pytest.mark.asyncio\n@pytest.mark.asyncio",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "setup_prisma",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_store_agents",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 22,
          "label": "async def test_get_store_agents(mocker):\n    # Mock data\n    mock_agents = [\n        prisma.models.StoreAgent(\n            listing_id=\"test-id\",\n            storeListingVersionId=\"version123\",\n            slug=\"test-agent\",\n            agent_name=\"Test Agent\",\n            agent_video=None,\n            agent_image=[\"image.jpg\"],\n            featured=False,\n            creator_username=\"creator\",\n            creator_avatar=\"avatar.jpg\",\n            sub_heading=\"Test heading\",\n            description=\"Test description\",\n            categories=[],\n            runs=10,\n            rating=4.5,\n            versions=[\"1.0\"],\n            updated_at=datetime.now(),\n        )\n    ]",
          "successors": [
            {
              "id": 2,
              "start_line": 23,
              "end_line": 26,
              "label": "# Mock prisma calls\n    mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")\n    mock_store_agent.return_value.find_many = mocker.AsyncMock(return_value=mock_agents)\n    mock_store_agent.return_value.count = mocker.AsyncMock(return_value=1)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 27,
                  "end_line": 28,
                  "label": "# Call function\n    result = await db.get_store_agents()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 29,
                      "end_line": 32,
                      "label": "# Verify results\n    assert len(result.agents) == 1\n    assert result.agents[0].slug == \"test-agent\"\n    assert result.pagination.total_items == 1",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 33,
                          "end_line": 35,
                          "label": "# Verify mocks called correctly\n    mock_store_agent.return_value.find_many.assert_called_once()\n    mock_store_agent.return_value.count.assert_called_once()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_store_agent_details",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 20,
          "label": "async def test_get_store_agent_details(mocker):\n    # Mock data\n    mock_agent = prisma.models.StoreAgent(\n        listing_id=\"test-id\",\n        storeListingVersionId=\"version123\",\n        slug=\"test-agent\",\n        agent_name=\"Test Agent\",\n        agent_video=\"video.mp4\",\n        agent_image=[\"image.jpg\"],\n        featured=False,\n        creator_username=\"creator\",\n        creator_avatar=\"avatar.jpg\",\n        sub_heading=\"Test heading\",\n        description=\"Test description\",\n        categories=[\"test\"],\n        runs=10,\n        rating=4.5,\n        versions=[\"1.0\"],\n        updated_at=datetime.now(),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 21,
              "end_line": 23,
              "label": "# Mock prisma call\n    mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")\n    mock_store_agent.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 24,
                  "end_line": 25,
                  "label": "# Call function\n    result = await db.get_store_agent_details(\"creator\", \"test-agent\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 26,
                      "end_line": 28,
                      "label": "# Verify results\n    assert result.slug == \"test-agent\"\n    assert result.agent_name == \"Test Agent\"",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 29,
                          "end_line": 32,
                          "label": "# Verify mock called correctly\n    mock_store_agent.return_value.find_first.assert_called_once_with(\n        where={\"creator_username\": \"creator\", \"slug\": \"test-agent\"}\n    )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_store_creator_details",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 14,
          "label": "async def test_get_store_creator_details(mocker):\n    # Mock data\n    mock_creator_data = prisma.models.Creator(\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatar_url=\"avatar.jpg\",\n        num_agents=1,\n        agent_rating=4.5,\n        agent_runs=10,\n        top_categories=[\"test\"],\n        is_featured=False,\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 15,
              "end_line": 19,
              "label": "# Mock prisma call\n    mock_creator = mocker.patch(\"prisma.models.Creator.prisma\")\n    mock_creator.return_value.find_unique = mocker.AsyncMock()\n    # Configure the mock to return values that will pass validation\n    mock_creator.return_value.find_unique.return_value = mock_creator_data",
              "successors": [
                {
                  "id": 3,
                  "start_line": 20,
                  "end_line": 21,
                  "label": "# Call function\n    result = await db.get_store_creator_details(\"creator\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 22,
                      "end_line": 26,
                      "label": "# Verify results\n    assert result.username == \"creator\"\n    assert result.name == \"Test Creator\"\n    assert result.description == \"Test description\"\n    assert result.avatar_url == \"avatar.jpg\"",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 27,
                          "end_line": 30,
                          "label": "# Verify mock called correctly\n    mock_creator.return_value.find_unique.assert_called_once_with(\n        where={\"username\": \"creator\"}\n    )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_create_store_submission",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_update_profile",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 13,
          "label": "async def test_update_profile(mocker):\n    # Mock data\n    mock_profile = prisma.models.Profile(\n        id=\"profile-id\",\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatarUrl=\"avatar.jpg\",\n        isFeatured=False,\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 14,
              "end_line": 19,
              "label": "# Mock prisma calls\n    mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")\n    mock_profile_db.return_value.find_first = mocker.AsyncMock(\n        return_value=mock_profile\n    )\n    mock_profile_db.return_value.update = mocker.AsyncMock(return_value=mock_profile)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 20,
                  "end_line": 28,
                  "label": "# Test data\n    profile = Profile(\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatar_url=\"avatar.jpg\",\n        is_featured=False,\n    )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 29,
                      "end_line": 36,
                      "label": "# Call function\n    result = await db.update_or_create_profile(\"user-id\", profile)\n    # Verify results\n    assert result.username == \"creator\"\n    assert result.name == \"Test Creator\"\n    # Verify mocks called correctly\n    mock_profile_db.return_value.find_first.assert_called_once()\n    mock_profile_db.return_value.update.assert_called_once()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_user_profile",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 13,
          "label": "async def test_get_user_profile(mocker):\n    # Mock data\n    mock_profile = prisma.models.Profile(\n        id=\"profile-id\",\n        name=\"No Profile Data\",\n        username=\"testuser\",\n        description=\"Test description\",\n        links=[\"link1\", \"link2\"],\n        avatarUrl=\"avatar.jpg\",\n        isFeatured=False,\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 14,
              "end_line": 18,
              "label": "# Mock prisma calls\n    mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")\n    mock_profile_db.return_value.find_unique = mocker.AsyncMock(\n        return_value=mock_profile\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 19,
                  "end_line": 20,
                  "label": "# Call function\n    result = await db.get_user_profile(\"user-id\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 21,
                      "end_line": 26,
                      "label": "# Verify results\n    assert result.name == \"No Profile Data\"\n    assert result.username == \"No Profile Data\"\n    assert result.description == \"No Profile Data\"\n    assert result.links == []\n    assert result.avatar_url == \"\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}