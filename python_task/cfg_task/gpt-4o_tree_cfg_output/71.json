{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 36,
      "label": "\"\"\"\nGiven a partially filled 9x9 2D array, the objective is to fill a 9x9\nsquare grid with digits numbered 1 to 9, so that every row, column, and\nand each of the nine 3x3 sub-grids contains all of the digits.\nThis can be solved using Backtracking and is similar to n-queens.\nWe check to see if a cell is safe or not and recursively call the\nfunction on the next column to see if it returns True. if yes, we\nhave solved the puzzle. else, we backtrack and place another number\nin that cell and repeat this process.\n\"\"\"\nfrom __future__ import annotations\nMatrix = list[list[int]]\n# assigning initial values to the grid\ninitial_grid: Matrix = [\n    [3, 0, 6, 5, 0, 8, 4, 0, 0],\n    [5, 2, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n]\n# a grid with no solution\nno_solution: Matrix = [\n    [5, 0, 6, 5, 0, 8, 4, 0, 3],\n    [5, 2, 0, 0, 0, 0, 0, 0, 2],\n    [1, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n]",
      "successors": [
        {
          "id": 2,
          "start_line": 37,
          "end_line": 39,
          "label": "if __name__ == \"__main__\":\n    # make a copy of grid so that you can compare with the unmodified grid\n    for example_grid in (initial_grid, no_solution):",
          "successors": [
            {
              "id": 3,
              "start_line": 40,
              "end_line": 47,
              "label": "print(\"\\nExample grid:\\n\" + \"=\" * 20)\n        print_solution(example_grid)\n        print(\"\\nExample grid solution:\")\n        solution = sudoku(example_grid)",
              "successors": [
                {
                  "id": 4,
                  "start_line": 44,
                  "end_line": 45,
                  "label": "if solution is not None:\n            print_solution(solution)",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 46,
                  "end_line": 47,
                  "label": "else:\n            print(\"Cannot find a solution.\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "is_safe",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 8,
          "end_line": 8,
          "label": "for i in range(9):",
          "successors": [
            {
              "id": 2,
              "start_line": 9,
              "end_line": 9,
              "label": "if n in {grid[row][i], grid[i][column]}:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "return False",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "id": 4,
          "start_line": 11,
          "end_line": 11,
          "label": "for i in range(3):",
          "successors": [
            {
              "id": 5,
              "start_line": 12,
              "end_line": 12,
              "label": "for j in range(3):",
              "successors": [
                {
                  "id": 6,
                  "start_line": 13,
                  "end_line": 13,
                  "label": "if grid[(row - row % 3) + i][(column - column % 3) + j] == n:",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "return False",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 8,
          "start_line": 15,
          "end_line": 15,
          "label": "return True",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "find_empty_location",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 6,
          "label": "for i in range(9):",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 7,
              "label": "for j in range(9):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "if grid[i][j] == 0:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 9,
                      "end_line": 9,
                      "label": "return i, j",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 5,
          "start_line": 10,
          "end_line": 10,
          "label": "return None",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "sudoku",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "print_solution",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 6,
          "end_line": 6,
          "label": "for row in grid:",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 9,
              "label": "for cell in row:\n            print(cell, end=\" \")\n        print()",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}