{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 11,
      "label": "import logging\nimport os\nimport signal\nimport sys\nfrom abc import ABC, abstractmethod\nfrom multiprocessing import Process, set_start_method\nfrom typing import Optional\nfrom backend.util.logging import configure_logging\nfrom backend.util.metrics import sentry_init\nlogger = logging.getLogger(__name__)\n_SERVICE_NAME = \"MainProcess\"",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "get_service_name",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def get_service_name():\n    return _SERVICE_NAME",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "set_service_name",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def set_service_name(name: str):\n    global _SERVICE_NAME\n    _SERVICE_NAME = name",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "AppProcess",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 8,
          "label": "class AppProcess(ABC):\n    \"\"\"\n    A class to represent an object that can be executed in a background process.\n    \"\"\"\n    process: Optional[Process] = None\n    set_start_method(\"spawn\", force=True)\n    configure_logging()\n    sentry_init()",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def run(self):\n        \"\"\"\n        The method that will be executed in the process.\n        \"\"\"\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "service_name",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def service_name(cls) -> str:\n        return cls.__name__",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "cleanup",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 6,
              "label": "def cleanup(self):\n        \"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "health_check",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def health_check(self):\n        \"\"\"\n        A method to check the health of the process.\n        \"\"\"\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "execute_run_command",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def execute_run_command(self, silent):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "signal.signal(signal.SIGTERM, self._self_terminate)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "try:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "if silent:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 5,
                              "end_line": 6,
                              "label": "sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "start_line": 7,
                          "end_line": 9,
                          "label": "set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 10,
                      "end_line": 10,
                      "label": "except (KeyboardInterrupt, SystemExit) as e:",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 11,
                          "end_line": 11,
                          "label": "logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_self_terminate",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def _self_terminate(self, signum: int, frame):\n        self.cleanup()\n        sys.exit(0)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "__enter__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def __enter__(self):\n        self.start(background=True)\n        return self",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "__exit__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def __exit__(self, *args, **kwargs):\n        self.stop()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "start",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "stop",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 5,
              "end_line": 5,
              "label": "if not self.process:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "return",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 9,
                  "label": "self.process.terminate()\n        self.process.join()\n        self.process = None",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}