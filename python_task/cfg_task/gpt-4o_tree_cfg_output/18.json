{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "\"\"\"\nGraph Coloring also called \"m coloring problem\"\nconsists of coloring a given graph with at most m colors\nsuch that no adjacent vertices are assigned the same color\nWikipedia: https://en.wikipedia.org/wiki/Graph_coloring\n\"\"\"",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "valid_coloring",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def valid_coloring(\n    neighbours: list[int], colored_vertices: list[int], color: int\n) -> bool:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 16,
              "label": "\"\"\"\n    For each neighbour check if the coloring constraint is satisfied\n    If any of the neighbours fail the constraint return False\n    If all neighbours validate the constraint return True\n    >>> neighbours = [0,1,0,1,0]\n    >>> colored_vertices = [0, 2, 1, 2, 0]\n    >>> color = 1\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    True\n    >>> color = 2\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    False\n    \"\"\"",
              "successors": []
            }
          ]
        },
        {
          "id": 3,
          "start_line": 17,
          "end_line": 18,
          "label": "# Does any neighbour not satisfy the constraints\n    return not any(",
          "successors": [
            {
              "id": 4,
              "start_line": 19,
              "end_line": 21,
              "label": "neighbour == 1 and colored_vertices[i] == color\n        for i, neighbour in enumerate(neighbours)\n    )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "util_color",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "color",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 19,
          "label": "def color(graph: list[list[int]], max_colors: int) -> list[int]:\n    \"\"\"\n    Wrapper function to call subroutine called util_color\n    which will either return True or False.\n    If True is returned colored_vertices list is filled with correct colorings\n    >>> graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n    >>> max_colors = 3\n    >>> color(graph, max_colors)\n    [0, 1, 0, 2, 0]\n    >>> max_colors = 2\n    >>> color(graph, max_colors)\n    []\n    \"\"\"\n    colored_vertices = [-1] * len(graph)\n    if util_color(graph, max_colors, colored_vertices, 0):",
          "successors": [
            {
              "id": 2,
              "start_line": 20,
              "end_line": 20,
              "label": "return colored_vertices",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 21,
              "end_line": 21,
              "label": "return []",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}