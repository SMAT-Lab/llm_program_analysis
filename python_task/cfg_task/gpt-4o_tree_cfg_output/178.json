{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 14,
      "label": "import os\nfrom enum import Enum\nfrom typing import Literal\nimport replicate\nfrom pydantic import SecretStr\nfrom replicate.helpers import FileOutput\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 15,
      "end_line": 21,
      "label": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 22,
      "end_line": 27,
      "label": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
      "successors": []
    },
    {
      "id": 4,
      "start_line": 28,
      "end_line": 29,
      "label": "# Model name enum\n# Image type Enum",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "ReplicateFluxModelName",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "api_name",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 7,
              "label": "def api_name(self):\n        api_names = {\n            ReplicateFluxModelName.FLUX_SCHNELL: \"black-forest-labs/flux-schnell\",\n            ReplicateFluxModelName.FLUX_PRO: \"black-forest-labs/flux-pro\",\n            ReplicateFluxModelName.FLUX_PRO1_1: \"black-forest-labs/flux-1.1-pro\",\n        }\n        return api_names[self]",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "ImageType",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "class ImageType(str, Enum):\n    WEBP = \"webp\"\n    JPG = \"jpg\"\n    PNG = \"png\"",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ReplicateFluxAdvancedModelBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 31,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"90f8c45e-e983-4644-aa0b-b4ebe2f531bc\",\n            description=\"This block runs Flux models on Replicate with advanced settings.\",\n            categories={BlockCategory.AI},\n            input_schema=ReplicateFluxAdvancedModelBlock.Input,\n            output_schema=ReplicateFluxAdvancedModelBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"replicate_model_name\": ReplicateFluxModelName.FLUX_SCHNELL,\n                \"prompt\": \"A beautiful landscape painting of a serene lake at sunrise\",\n                \"seed\": None,\n                \"steps\": 25,\n                \"guidance\": 3.0,\n                \"interval\": 2.0,\n                \"aspect_ratio\": \"1:1\",\n                \"output_format\": ImageType.PNG,\n                \"output_quality\": 80,\n                \"safety_tolerance\": 2,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://replicate.com/output/generated-image-url.jpg\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, model_name, prompt, seed, steps, guidance, interval, aspect_ratio, output_format, output_quality, safety_tolerance: \"https://replicate.com/output/generated-image-url.jpg\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 5,
              "end_line": 5,
              "label": "seed = input_data.seed",
              "successors": [
                {
                  "id": 2,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "if seed is None:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 7,
                      "end_line": 7,
                      "label": "seed = int.from_bytes(os.urandom(4), \"big\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 9,
                  "end_line": 21,
                  "label": "result = self.run_model(\n            api_key=credentials.api_key,\n            model_name=input_data.replicate_model_name.api_name,\n            prompt=input_data.prompt,\n            seed=seed,\n            steps=input_data.steps,\n            guidance=input_data.guidance,\n            interval=input_data.interval,\n            aspect_ratio=input_data.aspect_ratio,\n            output_format=input_data.output_format,\n            output_quality=input_data.output_quality,\n            safety_tolerance=input_data.safety_tolerance,\n        )",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 22,
                  "end_line": 22,
                  "label": "yield \"result\", result",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run_model",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 32,
              "label": "def run_model(\n        self,\n        api_key: SecretStr,\n        model_name,\n        prompt,\n        seed,\n        steps,\n        guidance,\n        interval,\n        aspect_ratio,\n        output_format,\n        output_quality,\n        safety_tolerance,\n    ):\n        # Initialize Replicate client with the API key\n        client = replicate.Client(api_token=api_key.get_secret_value())\n        # Run the model with additional parameters\n        output: FileOutput | list[FileOutput] = client.run(  # type: ignore This is because they changed the return type, and didn't update the type hint! It should be overloaded depending on the value of `use_file_output` to `FileOutput | list[FileOutput]` but it's `Any | Iterator[Any]`\n            f\"{model_name}\",\n            input={\n                \"prompt\": prompt,\n                \"seed\": seed,\n                \"steps\": steps,\n                \"guidance\": guidance,\n                \"interval\": interval,\n                \"aspect_ratio\": aspect_ratio,\n                \"output_format\": output_format,\n                \"output_quality\": output_quality,\n                \"safety_tolerance\": safety_tolerance,\n            },\n            wait=False,  # don't arbitrarily return data:octect/stream or sometimes url depending on the model???? what is this api\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 34,
                  "end_line": 48,
                  "label": "if isinstance(output, list) and len(output) > 0:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 35,
                      "end_line": 40,
                      "label": "if isinstance(output[0], FileOutput):\n                result_url = output[0].url  # If output is a list, get the first element\n            else:\n                result_url = output[\n                    0\n                ]  # If output is a list and not a FileOutput, get the first element. Should never happen, but just in case.",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 41,
                      "end_line": 42,
                      "label": "elif isinstance(output, FileOutput):\n            result_url = output.url  # If output is a FileOutput, use the url",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 43,
                      "end_line": 44,
                      "label": "elif isinstance(output, str):\n            result_url = output  # If output is a string (for some reason due to their janky type hinting), use it directly",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 45,
                      "end_line": 48,
                      "label": "else:\n            result_url = (\n                \"No output received\"  # Fallback message if output is not as expected\n            )",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "start_line": 49,
              "end_line": 49,
              "label": "return result_url",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}