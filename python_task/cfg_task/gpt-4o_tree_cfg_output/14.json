{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "import re\nfrom jinja2 import BaseLoader\nfrom jinja2.sandbox import SandboxedEnvironment",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "TextFormatter",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 7,
              "label": "def __init__(self):\n        # Create a sandboxed environment\n        self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n        # Clear any registered filters, tests, and globals to minimize attack surface\n        self.env.filters.clear()\n        self.env.tests.clear()\n        self.env.globals.clear()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "format_string",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 6,
              "label": "def format_string(self, template_str: str, values=None, **kwargs) -> str:\n        # For python.format compatibility: replace all {...} with {{..}}.\n        # But avoid replacing {{...}} to {{{...}}}.\n        template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)\n        template = self.env.from_string(template_str)\n        return template.render(values or {}, **kwargs)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}