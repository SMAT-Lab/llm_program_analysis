{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 8,
      "label": "\"\"\"Analytics API\"\"\"\nfrom typing import Annotated\nimport fastapi\nimport backend.data.analytics\nfrom backend.server.utils import get_user_id\nrouter = fastapi.APIRouter()\n@router.post(path=\"/log_raw_metric\")\n@router.post(\"/log_raw_analytics\")",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "log_raw_metric",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "async def log_raw_metric(\n    user_id: Annotated[str, fastapi.Depends(get_user_id)],\n    metric_name: Annotated[str, fastapi.Body(..., embed=True)],\n    metric_value: Annotated[float, fastapi.Body(..., embed=True)],\n    data_string: Annotated[str, fastapi.Body(..., embed=True)],\n):",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 12,
              "label": "result = await backend.data.analytics.log_raw_metric(\n        user_id=user_id,\n        metric_name=metric_name,\n        metric_value=metric_value,\n        data_string=data_string,\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 13,
                  "end_line": 13,
                  "label": "return result.id",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "log_raw_analytics",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 19,
          "label": "async def log_raw_analytics(\n    user_id: Annotated[str, fastapi.Depends(get_user_id)],\n    type: Annotated[str, fastapi.Body(..., embed=True)],\n    data: Annotated[\n        dict,\n        fastapi.Body(..., embed=True, description=\"The data to log\"),\n    ],\n    data_index: Annotated[\n        str,\n        fastapi.Body(\n            ...,\n            embed=True,\n            description=\"Indexable field for any count based analytical measures like page order clicking, tutorial step completion, etc.\",\n        ),\n    ],\n):\n    result = await backend.data.analytics.log_raw_analytics(\n        user_id, type, data, data_index\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 20,
              "end_line": 20,
              "label": "return result.id",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}