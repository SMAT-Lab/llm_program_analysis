{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 18,
      "label": "import logging\nimport uuid\nfrom datetime import datetime, timezone\nfrom typing import List, Optional\nfrom autogpt_libs.api_key.key_manager import APIKeyManager\nfrom prisma.enums import APIKeyPermission, APIKeyStatus\nfrom prisma.errors import PrismaError\nfrom prisma.models import APIKey as PrismaAPIKey\nfrom prisma.types import (\n    APIKeyCreateInput,\n    APIKeyUpdateInput,\n    APIKeyWhereInput,\n    APIKeyWhereUniqueInput,\n)\nfrom pydantic import BaseModel\nfrom backend.data.db import BaseDbModel\nlogger = logging.getLogger(__name__)\n# Some basic exceptions",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "generate_api_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "async def generate_api_key(\n    name: str,\n    user_id: str,\n    permissions: List[APIKeyPermission],\n    description: Optional[str] = None,\n) -> tuple[APIKeyWithoutHash, str]:\n    \"\"\"\n    Generate a new API key and store it in the database.\n    Returns the API key object (without hash) and the plain text key.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 27,
              "label": "try:\n        api_manager = APIKeyManager()\n        key = api_manager.generate_api_key()\n        api_key = await PrismaAPIKey.prisma().create(\n            data=APIKeyCreateInput(\n                id=str(uuid.uuid4()),\n                name=name,\n                prefix=key.prefix,\n                postfix=key.postfix,\n                key=key.hash,\n                permissions=[p for p in permissions],\n                description=description,\n                userId=user_id,\n            )\n        )\n        api_key_without_hash = APIKeyWithoutHash.from_db(api_key)\n        return api_key_without_hash, key.raw",
              "successors": [
                {
                  "id": 3,
                  "start_line": 28,
                  "end_line": 30,
                  "label": "except PrismaError as e:\n        logger.error(f\"Database error while generating API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 31,
                  "end_line": 33,
                  "label": "except Exception as e:\n        logger.error(f\"Unexpected error while generating API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "validate_api_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "async def validate_api_key(plain_text_key: str) -> Optional[APIKey]:\n    \"\"\"\n    Validate an API key and return the API key object if valid.\n    \"\"\"\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "if not plain_text_key.startswith(APIKeyManager.PREFIX):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 8,
                  "label": "logger.warning(\"Invalid API key format\")\n            return None",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 9,
                  "end_line": 21,
                  "label": "prefix = plain_text_key[: APIKeyManager.PREFIX_LENGTH]\n        api_manager = APIKeyManager()\n        api_key = await PrismaAPIKey.prisma().find_first(\n            where=APIKeyWhereInput(prefix=prefix, status=(APIKeyStatus.ACTIVE))\n        )",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "if not api_key:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 15,
                          "end_line": 16,
                          "label": "logger.warning(f\"No active API key found with prefix {prefix}\")\n            return None",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 17,
                          "end_line": 21,
                          "label": "is_valid = api_manager.verify_api_key(plain_text_key, api_key.key)\n        return APIKey.from_db(api_key)",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 18,
                              "end_line": 18,
                              "label": "if not is_valid:",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 19,
                                  "end_line": 20,
                                  "label": "logger.warning(\"API key verification failed\")\n            return None",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 10,
              "start_line": 22,
              "end_line": 24,
              "label": "except Exception as e:\n        logger.error(f\"Error validating API key: {str(e)}\")\n        raise APIKeyValidationError(f\"Failed to validate API key: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "revoke_api_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "async def revoke_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 4,
              "label": "api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n        if not api_key:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 6,
                  "end_line": 9,
                  "label": "if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to revoke this API key.\"\n            )",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "start_line": 10,
              "end_line": 19,
              "label": "where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(\n                status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)\n            ),\n        )\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None",
              "successors": [
                {
                  "id": 6,
                  "start_line": 20,
                  "end_line": 21,
                  "label": "except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e",
                  "successors": []
                },
                {
                  "id": 7,
                  "start_line": 22,
                  "end_line": 24,
                  "label": "except PrismaError as e:\n        logger.error(f\"Database error while revoking API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 8,
                  "start_line": 25,
                  "end_line": 27,
                  "label": "except Exception as e:\n        logger.error(f\"Unexpected error while revoking API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "list_user_api_keys",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "async def list_user_api_keys(user_id: str) -> List[APIKeyWithoutHash]:\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 7,
              "label": "where_clause: APIKeyWhereInput = {\"userId\": user_id}\n        api_keys = await PrismaAPIKey.prisma().find_many(\n            where=where_clause, order={\"createdAt\": \"desc\"}\n        )\n        return [APIKeyWithoutHash.from_db(key) for key in api_keys]",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 8,
              "end_line": 10,
              "label": "except PrismaError as e:\n        logger.error(f\"Database error while listing API keys: {str(e)}\")\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")",
              "successors": []
            },
            {
              "id": 4,
              "start_line": 11,
              "end_line": 13,
              "label": "except Exception as e:\n        logger.error(f\"Unexpected error while listing API keys: {str(e)}\")\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "suspend_api_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "async def suspend_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 4,
              "label": "api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n        if not api_key:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 4,
              "end_line": 6,
              "label": "if not api_key:\n            raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")\n        if api_key.userId != user_id:",
              "successors": [
                {
                  "id": 5,
                  "start_line": 7,
                  "end_line": 9,
                  "label": "raise APIKeyPermissionError(\n                \"You do not have permission to suspend this API key.\"\n            )",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "start_line": 10,
              "end_line": 15,
              "label": "where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED),\n        )\n        if updated_api_key:",
              "successors": [
                {
                  "id": 7,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "return APIKeyWithoutHash.from_db(updated_api_key)",
                  "successors": []
                },
                {
                  "id": 8,
                  "start_line": 17,
                  "end_line": 17,
                  "label": "return None",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "id": 9,
          "start_line": 18,
          "end_line": 19,
          "label": "except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e",
          "successors": []
        },
        {
          "id": 10,
          "start_line": 20,
          "end_line": 22,
          "label": "except PrismaError as e:\n        logger.error(f\"Database error while suspending API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")",
          "successors": []
        },
        {
          "id": 11,
          "start_line": 23,
          "end_line": 25,
          "label": "except Exception as e:\n        logger.error(f\"Unexpected error while suspending API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "has_permission",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 2,
          "end_line": 2,
          "label": "try:",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "return required_permission in api_key.permissions",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 4,
              "end_line": 4,
              "label": "except Exception as e:",
              "successors": [
                {
                  "id": 4,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "logger.error(f\"Error checking API key permissions: {str(e)}\")\n        return False",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_api_key_by_id",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "async def get_api_key_by_id(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 6,
              "label": "api_key = await PrismaAPIKey.prisma().find_first(\n            where=APIKeyWhereInput(id=key_id, userId=user_id)\n        )\n        if not api_key:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "return None",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "return APIKeyWithoutHash.from_db(api_key)",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "start_line": 9,
              "end_line": 11,
              "label": "except PrismaError as e:\n        logger.error(f\"Database error while getting API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to get API key: {str(e)}\")",
              "successors": []
            },
            {
              "id": 6,
              "start_line": 12,
              "end_line": 14,
              "label": "except Exception as e:\n        logger.error(f\"Unexpected error while getting API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to get API key: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "update_api_key_permissions",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 7,
          "end_line": 7,
          "label": "try:",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 22,
              "label": "api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(permissions=permissions),\n        )\n        return None",
              "successors": [
                {
                  "id": 3,
                  "start_line": 9,
                  "end_line": 10,
                  "label": "if api_key is None:\n            raise APIKeyNotFoundError(\"No such API key found.\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 11,
                  "end_line": 14,
                  "label": "if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to update this API key.\"\n            )",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 20,
                  "end_line": 21,
                  "label": "if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "id": 6,
          "start_line": 23,
          "end_line": 24,
          "label": "except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e",
          "successors": []
        },
        {
          "id": 7,
          "start_line": 25,
          "end_line": 27,
          "label": "except PrismaError as e:\n        logger.error(f\"Database error while updating API key permissions: {str(e)}\")\n        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")",
          "successors": []
        },
        {
          "id": 8,
          "start_line": 28,
          "end_line": 30,
          "label": "except Exception as e:\n        logger.error(f\"Unexpected error while updating API key permissions: {str(e)}\")\n        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "APIKeyError",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "class APIKeyError(Exception):\n    \"\"\"Base exception for API key operations\"\"\"\n    pass",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "APIKeyNotFoundError",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "class APIKeyNotFoundError(APIKeyError):\n    \"\"\"Raised when an API key is not found\"\"\"\n    pass",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "APIKeyPermissionError",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "APIKeyValidationError",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "class APIKeyValidationError(APIKeyError):\n    \"\"\"Raised when API key validation fails\"\"\"\n    pass",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "APIKey",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "from_db",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 16,
                  "label": "return APIKey(\n                id=api_key.id,\n                name=api_key.name,\n                prefix=api_key.prefix,\n                postfix=api_key.postfix,\n                key=api_key.key,\n                status=APIKeyStatus(api_key.status),\n                permissions=[APIKeyPermission(p) for p in api_key.permissions],\n                created_at=api_key.createdAt,\n                last_used_at=api_key.lastUsedAt,\n                revoked_at=api_key.revokedAt,\n                description=api_key.description,\n                user_id=api_key.userId,\n            )",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 17,
                  "end_line": 19,
                  "label": "except Exception as e:\n            logger.error(f\"Error creating APIKey from db: {str(e)}\")\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "APIKeyWithoutHash",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "from_db",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 15,
                  "label": "return APIKeyWithoutHash(\n                id=api_key.id,\n                name=api_key.name,\n                prefix=api_key.prefix,\n                postfix=api_key.postfix,\n                status=APIKeyStatus(api_key.status),\n                permissions=[APIKeyPermission(p) for p in api_key.permissions],\n                created_at=api_key.createdAt,\n                last_used_at=api_key.lastUsedAt,\n                revoked_at=api_key.revokedAt,\n                description=api_key.description,\n                user_id=api_key.userId,\n            )",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 16,
                  "end_line": 18,
                  "label": "except Exception as e:\n            logger.error(f\"Error creating APIKeyWithoutHash from db: {str(e)}\")\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}