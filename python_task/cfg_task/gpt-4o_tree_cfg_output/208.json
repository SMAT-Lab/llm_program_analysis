{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 4,
      "label": "import asyncio\nimport pytest\nfrom backend.util.retry import conn_retry\n@pytest.mark.asyncio",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "test_conn_retry_sync_function",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def test_conn_retry_sync_function():\n    retry_count = 0",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 4,
              "label": "@conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    retry_count = 2",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "res = test_function()\n    assert res == \"Success\"",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 7,
                      "end_line": 8,
                      "label": "retry_count = 100\n    with pytest.raises(ValueError) as e:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 9,
                          "end_line": 10,
                          "label": "test_function()\n        assert str(e.value) == \"Test error\"",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "test_function",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "raise ValueError(\"Test error\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 6,
              "end_line": 6,
              "label": "return \"Success\"",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "test_conn_retry_async_function",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 2,
          "end_line": 7,
          "label": "retry_count = 0\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    retry_count = 2\n    res = await test_function()\n    assert res == \"Success\"\n    retry_count = 100",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 8,
              "label": "with pytest.raises(ValueError) as e:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 9,
                  "end_line": 10,
                  "label": "await test_function()\n        assert str(e.value) == \"Test error\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "test_function",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "raise ValueError(\"Test error\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "return \"Success\"",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": []
}