{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 4,
      "end_line": 4,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        {
          "id": 2,
          "start_line": 5,
          "end_line": 6,
          "label": "import doctest\n    doctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "logical_left_shift",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 22,
          "end_line": 22,
          "label": "if number < 0 or shift_amount < 0:",
          "successors": [
            {
              "id": 2,
              "start_line": 23,
              "end_line": 23,
              "label": "raise ValueError(\"both inputs must be positive integers\")",
              "successors": []
            }
          ]
        },
        {
          "id": 3,
          "start_line": 24,
          "end_line": 26,
          "label": "binary_number = str(bin(number))\n    binary_number += \"0\" * shift_amount\n    return binary_number",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "logical_right_shift",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 22,
          "end_line": 22,
          "label": "if number < 0 or shift_amount < 0:",
          "successors": [
            {
              "id": 2,
              "start_line": 23,
              "end_line": 23,
              "label": "raise ValueError(\"both inputs must be positive integers\")",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 24,
              "end_line": 24,
              "label": "binary_number = str(bin(number))[2:]",
              "successors": []
            }
          ]
        },
        {
          "id": 4,
          "start_line": 25,
          "end_line": 25,
          "label": "if shift_amount >= len(binary_number):",
          "successors": [
            {
              "id": 5,
              "start_line": 26,
              "end_line": 26,
              "label": "return \"0b0\"",
              "successors": []
            },
            {
              "id": 6,
              "start_line": 27,
              "end_line": 28,
              "label": "shifted_binary_number = binary_number[: len(binary_number) - shift_amount]\n    return \"0b\" + shifted_binary_number",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "arithmetic_right_shift",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}