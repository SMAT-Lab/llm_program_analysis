{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "import contextlib\nimport logging\nimport typing\nimport fastapi\nimport fastapi.responses\nimport starlette.middleware.cors\nimport uvicorn",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 8,
      "end_line": 11,
      "label": "from autogpt_libs.feature_flag.client import (\n    initialize_launchdarkly,\n    shutdown_launchdarkly,\n)",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 12,
      "end_line": 23,
      "label": "import backend.data.block\nimport backend.data.db\nimport backend.data.graph\nimport backend.data.user\nimport backend.server.routers.v1\nimport backend.server.v2.library.routes\nimport backend.server.v2.store.routes\nimport backend.util.service\nimport backend.util.settings\nsettings = backend.util.settings.Settings()\nlogger = logging.getLogger(__name__)\nlogging.getLogger(\"autogpt_libs\").setLevel(logging.INFO)",
      "successors": []
    },
    {
      "id": 4,
      "start_line": 24,
      "end_line": 24,
      "label": "@contextlib.contextmanager",
      "successors": []
    },
    {
      "id": 5,
      "start_line": 25,
      "end_line": 25,
      "label": "@contextlib.asynccontextmanager",
      "successors": []
    },
    {
      "id": 6,
      "start_line": 26,
      "end_line": 30,
      "label": "docs_url = (\n    \"/docs\"\n    if settings.config.app_env == backend.util.settings.AppEnvironment.LOCAL\n    else None\n)",
      "successors": []
    },
    {
      "id": 7,
      "start_line": 31,
      "end_line": 41,
      "label": "app = fastapi.FastAPI(\n    title=\"AutoGPT Agent Server\",\n    description=(\n        \"This server is used to execute agents that are created by the \"\n        \"AutoGPT system.\"\n    ),\n    summary=\"AutoGPT Agent Server\",\n    version=\"0.1\",\n    lifespan=lifespan_context,\n    docs_url=docs_url,\n)",
      "successors": []
    },
    {
      "id": 8,
      "start_line": 42,
      "end_line": 43,
      "label": "app.add_exception_handler(ValueError, handle_internal_http_error(400))\napp.add_exception_handler(Exception, handle_internal_http_error(500))",
      "successors": []
    },
    {
      "id": 9,
      "start_line": 44,
      "end_line": 44,
      "label": "app.include_router(backend.server.routers.v1.v1_router, tags=[\"v1\"], prefix=\"/api\")",
      "successors": []
    },
    {
      "id": 10,
      "start_line": 45,
      "end_line": 47,
      "label": "app.include_router(\n    backend.server.v2.store.routes.router, tags=[\"v2\"], prefix=\"/api/store\"\n)",
      "successors": []
    },
    {
      "id": 11,
      "start_line": 48,
      "end_line": 50,
      "label": "app.include_router(\n    backend.server.v2.library.routes.router, tags=[\"v2\"], prefix=\"/api/library\"\n)",
      "successors": []
    },
    {
      "id": 12,
      "start_line": 51,
      "end_line": 51,
      "label": "@app.get(path=\"/health\", tags=[\"health\"], dependencies=[])",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "launch_darkly_context",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def launch_darkly_context():\n    if settings.config.app_env != backend.util.settings.AppEnvironment.LOCAL:",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 4,
              "label": "initialize_launchdarkly()\n        try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "yield",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 6,
                      "end_line": 7,
                      "label": "finally:\n            shutdown_launchdarkly()",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "start_line": 9,
              "end_line": 9,
              "label": "yield",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "lifespan_context",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "async def lifespan_context(app: fastapi.FastAPI):\n    await backend.data.db.connect()\n    await backend.data.block.initialize_blocks()\n    await backend.data.user.migrate_and_encrypt_user_integrations()\n    await backend.data.graph.fix_llm_provider_credentials()",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 7,
              "label": "with launch_darkly_context():\n        yield",
              "successors": []
            }
          ]
        },
        {
          "id": 3,
          "start_line": 8,
          "end_line": 8,
          "label": "await backend.data.db.disconnect()",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "handle_internal_http_error",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def handle_internal_http_error(status_code: int = 500, log_error: bool = True):\n    return handler",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "handler",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def handler(request: fastapi.Request, exc: Exception):\n        if log_error:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "logger.exception(f\"{request.method} {request.url.path} failed: {exc}\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 10,
                  "label": "return fastapi.responses.JSONResponse(\n            content={\n                \"message\": f\"{request.method} {request.url.path} failed\",\n                \"detail\": str(exc),\n            },\n            status_code=status_code,\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "health",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def health():",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "return {\"status\": \"healthy\"}",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "AgentServer",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 8,
              "label": "def run(self):\n        server_app = starlette.middleware.cors.CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],  # Allows all methods\n            allow_headers=[\"*\"],  # Allows all headers\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 9,
                  "end_line": 13,
                  "label": "uvicorn.run(\n            server_app,\n            host=backend.util.settings.Config().agent_api_host,\n            port=backend.util.settings.Config().agent_api_port,\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_execute_graph",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "async def test_execute_graph(\n        graph_id: str, node_input: dict[typing.Any, typing.Any], user_id: str\n    ):\n        return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_create_graph",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 5,
              "end_line": 5,
              "label": "return await backend.server.routers.v1.create_new_graph(create_graph, user_id)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_get_graph_run_status",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 5,
              "label": "execution = await backend.data.graph.get_execution(\n            user_id=user_id, execution_id=graph_exec_id\n        )\n        if not execution:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "raise ValueError(f\"Execution {graph_exec_id} not found\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "return execution.status",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_get_graph_run_node_execution_results",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "async def test_get_graph_run_node_execution_results(\n        graph_id: str, graph_exec_id: str, user_id: str\n    ):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 6,
                  "label": "return await backend.server.routers.v1.get_graph_run_node_execution_results(\n            graph_id, graph_exec_id, user_id\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_delete_graph",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "async def test_delete_graph(graph_id: str, user_id: str):\n        return await backend.server.routers.v1.delete_graph(graph_id, user_id)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "set_test_dependency_overrides",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def set_test_dependency_overrides(self, overrides: dict):\n        app.dependency_overrides.update(overrides)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}