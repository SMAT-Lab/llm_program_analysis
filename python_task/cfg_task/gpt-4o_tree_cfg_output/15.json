{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "from __future__ import annotations",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "IIRFilter",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 10,
              "label": "def __init__(self, order: int) -> None:\n        self.order = order\n        # a_{0} ... a_{k}\n        self.a_coeffs = [1.0] + [0.0] * order\n        # b_{0} ... b_{k}\n        self.b_coeffs = [1.0] + [0.0] * order\n        # x[n-1] ... x[n-k]\n        self.input_history = [0.0] * self.order\n        # y[n-1] ... y[n-k]\n        self.output_history = [0.0] * self.order",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "set_coefficients",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 15,
              "label": "def set_coefficients(self, a_coeffs: list[float], b_coeffs: list[float]) -> None:\n        \"\"\"\n        Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n        This method works well with scipy's filter design functions\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        ...                                          btype='lowpass',\n        ...                                          fs=48000)\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"\n        if len(a_coeffs) < self.order:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "a_coeffs = [1.0, *a_coeffs]",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 17,
                  "end_line": 23,
                  "label": "if len(a_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)\n        if len(b_coeffs) != self.order + 1:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 24,
                      "end_line": 28,
                      "label": "msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "start_line": 29,
              "end_line": 30,
              "label": "self.a_coeffs = a_coeffs\n        self.b_coeffs = b_coeffs",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "process",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}