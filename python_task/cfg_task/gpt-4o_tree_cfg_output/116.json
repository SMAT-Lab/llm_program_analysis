{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 4,
      "label": "import logging\nfrom colorama import Fore, Style\nfrom google.cloud.logging_v2.handlers import CloudLoggingFilter, StructuredLogHandler\nfrom .utils import remove_color_codes",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "FancyConsoleFormatter",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 16,
          "label": "class FancyConsoleFormatter(logging.Formatter):\n    \"\"\"\n    A custom logging formatter designed for console output.\n    This formatter enhances the standard logging output with color coding. The color\n    coding is based on the level of the log message, making it easier to distinguish\n    between different types of messages in the console output.\n    The color for each level is defined in the LEVEL_COLOR_MAP class attribute.\n    \"\"\"\n    # level -> (level & text color, title color)\n    LEVEL_COLOR_MAP = {\n        logging.DEBUG: Fore.LIGHTBLACK_EX,\n        logging.INFO: Fore.BLUE,\n        logging.WARNING: Fore.YELLOW,\n        logging.ERROR: Fore.RED,\n        logging.CRITICAL: Fore.RED + Style.BRIGHT,\n    }",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "format",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def format(self, record: logging.LogRecord) -> str:\n        # Make sure `msg` is a string\n        if not hasattr(record, \"msg\"):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "record.msg = \"\"",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "elif type(record.msg) is not str:\n            record.msg = str(record.msg)",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 7,
              "end_line": 9,
              "label": "# Determine default color based on error level\n        level_color = \"\"\n        if record.levelno in self.LEVEL_COLOR_MAP:",
              "successors": [
                {
                  "id": 5,
                  "start_line": 10,
                  "end_line": 11,
                  "label": "level_color = self.LEVEL_COLOR_MAP[record.levelno]\n            record.levelname = f\"{level_color}{record.levelname}{Style.RESET_ALL}\"",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "start_line": 12,
              "end_line": 16,
              "label": "# Determine color for message\n        color = getattr(record, \"color\", level_color)\n        color_is_specified = hasattr(record, \"color\")\n        # Don't color INFO messages unless the color is explicitly specified.\n        if color and (record.levelno != logging.INFO or color_is_specified):",
              "successors": [
                {
                  "id": 7,
                  "start_line": 17,
                  "end_line": 17,
                  "label": "record.msg = f\"{color}{record.msg}{Style.RESET_ALL}\"",
                  "successors": []
                }
              ]
            },
            {
              "id": 8,
              "start_line": 18,
              "end_line": 18,
              "label": "return super().format(record)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "AGPTFormatter",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def __init__(self, *args, no_color: bool = False, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.no_color = no_color",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "format",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def format(self, record: logging.LogRecord) -> str:\n        # Make sure `msg` is a string\n        if not hasattr(record, \"msg\"):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "record.msg = \"\"",
                  "successors": []
                },
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "elif type(record.msg) is not str:\n            record.msg = str(record.msg)",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 8,
              "end_line": 8,
              "label": "if record.msg and not getattr(record, \"preserve_color\", False):",
              "successors": [
                {
                  "id": 5,
                  "start_line": 9,
                  "end_line": 9,
                  "label": "record.msg = remove_color_codes(record.msg)",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "start_line": 15,
              "end_line": 15,
              "label": "if title and title_color:",
              "successors": [
                {
                  "id": 7,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "title = f\"{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}\"",
                  "successors": []
                }
              ]
            },
            {
              "id": 8,
              "start_line": 19,
              "end_line": 19,
              "label": "if self.no_color:",
              "successors": [
                {
                  "id": 9,
                  "start_line": 20,
                  "end_line": 20,
                  "label": "return remove_color_codes(super().format(record))",
                  "successors": []
                },
                {
                  "id": 10,
                  "start_line": 21,
                  "end_line": 22,
                  "label": "else:\n            return super().format(record)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "StructuredLoggingFormatter",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def __init__(self):\n        # Set up CloudLoggingFilter to add diagnostic info to the log records\n        self.cloud_logging_filter = CloudLoggingFilter()\n        # Init StructuredLogHandler\n        super().__init__()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "format",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def format(self, record: logging.LogRecord) -> str:\n        self.cloud_logging_filter.filter(record)\n        return super().format(record)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}