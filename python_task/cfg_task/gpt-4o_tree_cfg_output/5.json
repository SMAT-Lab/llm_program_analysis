{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 14,
      "label": "\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"\nfrom __future__ import annotations\n\"\"\"\nremove the comment to take an input from the user\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 16,
      "end_line": 19,
      "label": "nums = [3, 34, 4, 12, 5, 2]\nmax_sum = 9\nresult = generate_sum_of_subsets_soln(nums, max_sum)\nprint(*result)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "generate_sum_of_subsets_soln",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 7,
          "label": "def generate_sum_of_subsets_soln(nums: list[int], max_sum: int) -> list[list[int]]:\n    result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n    return result",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_state_space_tree",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 16,
          "end_line": 16,
          "label": "if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:",
          "successors": [
            {
              "id": 2,
              "start_line": 17,
              "end_line": 17,
              "label": "return",
              "successors": []
            }
          ]
        },
        {
          "id": 3,
          "start_line": 18,
          "end_line": 18,
          "label": "if sum(path) == max_sum:",
          "successors": [
            {
              "id": 4,
              "start_line": 19,
              "end_line": 20,
              "label": "result.append(path)\n        return",
              "successors": []
            }
          ]
        },
        {
          "id": 5,
          "start_line": 21,
          "end_line": 21,
          "label": "for index in range(num_index, len(nums)):",
          "successors": [
            {
              "id": 6,
              "start_line": 22,
              "end_line": 29,
              "label": "create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}