{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "import subprocess\nimport sys\nimport time",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "wait_for_postgres",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "run_command",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 2,
          "end_line": 2,
          "label": "try:",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "subprocess.run(command, check=check)",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 4,
              "end_line": 4,
              "label": "except subprocess.CalledProcessError as e:",
              "successors": [
                {
                  "id": 4,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "print(f\"Command failed: {e}\")\n        sys.exit(1)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 13,
          "label": "def test():\n    # Start PostgreSQL with Docker Compose\n    run_command(\n        [\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 14,
              "end_line": 22,
              "label": "if not wait_for_postgres():\n    # Run Prisma migrations\n    run_command([\"prisma\", \"migrate\", \"dev\"])\n    # Run the tests\n    result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)\n    run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n    sys.exit(result.returncode)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 15,
                  "end_line": 16,
                  "label": "run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n        sys.exit(1)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}