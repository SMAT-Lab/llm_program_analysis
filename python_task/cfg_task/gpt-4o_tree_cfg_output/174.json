{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "# -*- coding: utf-8 -*-\nfrom collections import deque\nfrom enum import Enum",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "State",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "Graph",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "bfs",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def bfs(self, source, dest):\n        if source is None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return False",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 4,
              "end_line": 6,
              "label": "queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited",
              "successors": [
                {
                  "id": 4,
                  "start_line": 7,
                  "end_line": 8,
                  "label": "while queue:\n            node = queue.popleft()",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 9,
                      "end_line": 10,
                      "label": "print(node)\n            if dest is node:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 11,
                          "end_line": 11,
                          "label": "return True",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 12,
                      "end_line": 12,
                      "label": "for adjacent_node in node.adj_nodes.values():",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 13,
                          "end_line": 14,
                          "label": "if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 15,
                              "end_line": 15,
                              "label": "adjacent_node.visit_state = State.visited",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "return False",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Person",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "LookupService",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_person",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "PersonServer",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def __init__(self):\n        self.people = {}  # key: person_id, value: person",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_people",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def get_people(self, ids):\n        results = []",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "for id in ids:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "if id in self.people:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 5,
                          "end_line": 5,
                          "label": "results.append(self.people[id])",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "start_line": 6,
              "end_line": 6,
              "label": "return results",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "UserGraphService",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "bfs",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}