{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "import random\nfrom collections import defaultdict\nfrom enum import Enum\nfrom typing import Any, Dict, List, Optional, Union\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "SamplingMethod",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 9,
          "label": "class SamplingMethod(str, Enum):\n    RANDOM = \"random\"\n    SYSTEMATIC = \"systematic\"\n    TOP = \"top\"\n    BOTTOM = \"bottom\"\n    STRATIFIED = \"stratified\"\n    WEIGHTED = \"weighted\"\n    RESERVOIR = \"reservoir\"\n    CLUSTER = \"cluster\"",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "DataSamplingBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 29,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"4a448883-71fa-49cf-91cf-70d793bd7d87\",\n            description=\"This block samples data from a given dataset using various sampling methods.\",\n            categories={BlockCategory.LOGIC},\n            input_schema=DataSamplingBlock.Input,\n            output_schema=DataSamplingBlock.Output,\n            test_input={\n                \"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ],\n                \"sample_size\": 3,\n                \"sampling_method\": SamplingMethod.STRATIFIED,\n                \"accumulate\": False,\n                \"random_seed\": 42,\n                \"stratify_key\": \"group\",\n            },\n            test_output=[\n                (\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                ),\n                (\"sample_indices\", [0, 1, 8]),\n            ],\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 30,
                  "end_line": 30,
                  "label": "self.accumulated_data = []",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 2,
              "label": "if input_data.accumulate:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 12,
                  "label": "if isinstance(input_data.data, dict):\n                self.accumulated_data.append(input_data.data)\n            elif isinstance(input_data.data, list):\n                self.accumulated_data.extend(input_data.data)\n            else:\n                raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")\n            # If we don't have enough data yet, return without sampling\n            if len(self.accumulated_data) < input_data.sample_size:\n                return\n            data_to_sample = self.accumulated_data",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 13,
                      "end_line": 19,
                      "label": "else:\n            # If not accumulating, use the input data directly\n            data_to_sample = (\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 20,
                  "end_line": 21,
                  "label": "if input_data.random_seed is not None:\n            random.seed(input_data.random_seed)",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "start_line": 23,
              "end_line": 26,
              "label": "if input_data.sample_size > data_size:\n            raise ValueError(\n                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\"\n            )",
              "successors": []
            },
            {
              "id": 6,
              "start_line": 28,
              "end_line": 28,
              "label": "if input_data.sampling_method == SamplingMethod.RANDOM:",
              "successors": [
                {
                  "id": 7,
                  "start_line": 29,
                  "end_line": 29,
                  "label": "indices = random.sample(range(data_size), input_data.sample_size)",
                  "successors": []
                },
                {
                  "id": 8,
                  "start_line": 30,
                  "end_line": 30,
                  "label": "elif input_data.sampling_method == SamplingMethod.SYSTEMATIC:",
                  "successors": [
                    {
                      "id": 9,
                      "start_line": 31,
                      "end_line": 33,
                      "label": "step = data_size // input_data.sample_size\n            start = random.randint(0, step - 1)\n            indices = list(range(start, data_size, step))[: input_data.sample_size]",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 10,
                  "start_line": 34,
                  "end_line": 35,
                  "label": "elif input_data.sampling_method == SamplingMethod.TOP:\n            indices = list(range(input_data.sample_size))",
                  "successors": []
                },
                {
                  "id": 11,
                  "start_line": 36,
                  "end_line": 37,
                  "label": "elif input_data.sampling_method == SamplingMethod.BOTTOM:\n            indices = list(range(data_size - input_data.sample_size, data_size))",
                  "successors": []
                },
                {
                  "id": 12,
                  "start_line": 38,
                  "end_line": 38,
                  "label": "elif input_data.sampling_method == SamplingMethod.STRATIFIED:",
                  "successors": [
                    {
                      "id": 13,
                      "start_line": 39,
                      "end_line": 39,
                      "label": "if not input_data.stratify_key:",
                      "successors": [
                        {
                          "id": 14,
                          "start_line": 40,
                          "end_line": 42,
                          "label": "raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 15,
                      "start_line": 43,
                      "end_line": 74,
                      "label": "strata = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )\n                if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )\n                strata[str(strata_value)].append(i)\n            # Calculate the number of samples to take from each stratum\n            stratum_sizes = {\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }\n            # Adjust sizes to ensure we get exactly sample_size samples\n            while sum(stratum_sizes.values()) != input_data.sample_size:\n                if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1\n            for stratum, size in stratum_sizes.items():\n                indices.extend(random.sample(strata[stratum], size))",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 16,
                  "start_line": 75,
                  "end_line": 75,
                  "label": "elif input_data.sampling_method == SamplingMethod.WEIGHTED:",
                  "successors": [
                    {
                      "id": 17,
                      "start_line": 76,
                      "end_line": 76,
                      "label": "if not input_data.weight_key:",
                      "successors": [
                        {
                          "id": 18,
                          "start_line": 77,
                          "end_line": 77,
                          "label": "raise ValueError(\"Weight key must be provided for weighted sampling.\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 19,
                      "start_line": 78,
                      "end_line": 104,
                      "label": "weights = []\n            for item in data_to_sample:\n                if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )\n                if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )\n                try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )\n            if not weights:\n                raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )\n            indices = random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 20,
                  "start_line": 105,
                  "end_line": 110,
                  "label": "elif input_data.sampling_method == SamplingMethod.RESERVOIR:\n            indices = list(range(input_data.sample_size))\n            for i in range(input_data.sample_size, data_size):\n                j = random.randint(0, i)\n                if j < input_data.sample_size:\n                    indices[j] = i",
                  "successors": []
                },
                {
                  "id": 21,
                  "start_line": 111,
                  "end_line": 111,
                  "label": "elif input_data.sampling_method == SamplingMethod.CLUSTER:",
                  "successors": [
                    {
                      "id": 22,
                      "start_line": 112,
                      "end_line": 112,
                      "label": "if not input_data.cluster_key:",
                      "successors": [
                        {
                          "id": 23,
                          "start_line": 113,
                          "end_line": 113,
                          "label": "raise ValueError(\"Cluster key must be provided for cluster sampling.\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 24,
                      "start_line": 114,
                      "end_line": 139,
                      "label": "clusters = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )\n                clusters[str(cluster_value)].append(i)\n            # Randomly select clusters until we have enough samples\n            selected_clusters = []\n            while (\n                sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size\n            ):\n                available_clusters = [c for c in clusters if c not in selected_clusters]\n                if not available_clusters:\n                    break\n                selected_clusters.append(random.choice(available_clusters))\n            for cluster in selected_clusters:\n                indices.extend(clusters[cluster])\n            # If we have more samples than needed, randomly remove some\n            if len(indices) > input_data.sample_size:\n                indices = random.sample(indices, input_data.sample_size)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 25,
                  "start_line": 140,
                  "end_line": 141,
                  "label": "else:\n            raise ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 26,
              "start_line": 142,
              "end_line": 147,
              "label": "sampled_data = [data_to_sample[i] for i in indices]\n        # Clear accumulated data after sampling if accumulation is enabled\n        if input_data.accumulate:\n            self.accumulated_data = []\n        yield \"sampled_data\", sampled_data\n        yield \"sample_indices\", indices",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}