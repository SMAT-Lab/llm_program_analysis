{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 14,
      "label": "from enum import Enum\nfrom typing import List, Literal\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    BlockSecret,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n    SecretField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 15,
      "end_line": 21,
      "label": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"medium\",\n    api_key=SecretStr(\"mock-medium-api-key\"),\n    title=\"Mock Medium API key\",\n    expires_at=None,\n)",
      "successors": []
    },
    {
      "id": 3,
      "start_line": 22,
      "end_line": 27,
      "label": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "PublishToMediumStatus",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "PublishToMediumBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 35,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"3f7b2dcb-4a78-4e3f-b0f1-88132e1b89df\",\n            input_schema=PublishToMediumBlock.Input,\n            output_schema=PublishToMediumBlock.Output,\n            description=\"Publishes a post to Medium.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"author_id\": \"1234567890abcdef\",\n                \"title\": \"Test Post\",\n                \"content\": \"<h1>Test Content</h1><p>This is a test post.</p>\",\n                \"content_format\": \"html\",\n                \"tags\": [\"test\", \"automation\"],\n                \"license\": \"all-rights-reserved\",\n                \"notify_followers\": False,\n                \"publish_status\": PublishToMediumStatus.DRAFT.value,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\"post_id\", \"e6f36a\"),\n                (\"post_url\", \"https://medium.com/@username/test-post-e6f36a\"),\n                (\"published_at\", 1626282600),\n            ],\n            test_mock={\n                \"create_post\": lambda *args, **kwargs: {\n                    \"data\": {\n                        \"id\": \"e6f36a\",\n                        \"url\": \"https://medium.com/@username/test-post-e6f36a\",\n                        \"authorId\": \"1234567890abcdef\",\n                        \"publishedAt\": 1626282600,\n                    }\n                }\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "create_post",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 18,
              "label": "def create_post(\n        self,\n        api_key: SecretStr,\n        author_id,\n        title,\n        content,\n        content_format,\n        tags,\n        canonical_url,\n        publish_status,\n        license,\n        notify_followers,\n    ):\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n        }",
              "successors": [
                {
                  "id": 2,
                  "start_line": 19,
                  "end_line": 28,
                  "label": "data = {\n            \"title\": title,\n            \"content\": content,\n            \"contentFormat\": content_format,\n            \"tags\": tags,\n            \"canonicalUrl\": canonical_url,\n            \"publishStatus\": publish_status,\n            \"license\": license,\n            \"notifyFollowers\": notify_followers,\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 29,
                      "end_line": 34,
                      "label": "response = requests.post(\n            f\"https://api.medium.com/v1/users/{author_id}/posts\",\n            headers=headers,\n            json=data,\n        )\n        return response.json()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 4,
              "end_line": 15,
              "label": "response = self.create_post(\n            credentials.api_key,\n            input_data.author_id.get_secret_value(),\n            input_data.title,\n            input_data.content,\n            input_data.content_format,\n            input_data.tags,\n            input_data.canonical_url,\n            input_data.publish_status,\n            input_data.license,\n            input_data.notify_followers,\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "if \"data\" in response:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 17,
                      "end_line": 19,
                      "label": "yield \"post_id\", response[\"data\"][\"id\"]\n            yield \"post_url\", response[\"data\"][\"url\"]\n            yield \"published_at\", response[\"data\"][\"publishedAt\"]",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 20,
                      "end_line": 24,
                      "label": "else:\n            error_message = response.get(\"errors\", [{}])[0].get(\n                \"message\", \"Unknown error occurred\"\n            )\n            raise RuntimeError(f\"Failed to create Medium post: {error_message}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}