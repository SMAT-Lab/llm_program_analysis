{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 4,
      "label": "import threading\nfrom typing import Callable, ParamSpec, TypeVar\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "thread_cached",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:\n    thread_local = threading.local()\n    return wrapper",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "wrapper",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 3,
              "label": "cache = getattr(thread_local, \"cache\", None)\n        if cache is None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "cache = thread_local.cache = {}",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 5,
              "end_line": 6,
              "label": "key = (args, tuple(sorted(kwargs.items())))\n        if key not in cache:",
              "successors": [
                {
                  "id": 4,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "cache[key] = func(*args, **kwargs)",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "start_line": 8,
              "end_line": 8,
              "label": "return cache[key]",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": []
}