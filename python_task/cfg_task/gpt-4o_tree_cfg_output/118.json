{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 8,
      "label": "\"\"\"\nauthor: Aayush Soni\nGiven n pairs of parentheses, write a function to generate all\ncombinations of well-formed parentheses.\nInput: n = 2\nOutput: [\"(())\",\"()()\"]\nLeetcode link: https://leetcode.com/problems/generate-parentheses/description/\n\"\"\"",
      "successors": []
    },
    {
      "id": 2,
      "start_line": 9,
      "end_line": 9,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        {
          "id": 3,
          "start_line": 10,
          "end_line": 11,
          "label": "import doctest\n    doctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "backtrack",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "generate_parenthesis",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 17,
          "label": "def generate_parenthesis(n: int) -> list[str]:\n    \"\"\"\n    Generate valid combinations of balanced parentheses for a given n.\n    :param n: An integer representing the number of pairs of parentheses.\n    :return: A list of strings with valid combinations.\n    This function uses a recursive approach to generate the combinations.\n    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.\n    Space Complexity: O(n) - where 'n' is the number of pairs.\n    Example 1:\n    >>> generate_parenthesis(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()']\n    Example 2:\n    >>> generate_parenthesis(1)\n    ['()']\n    \"\"\"\n    result: list[str] = []\n    backtrack(\"\", 0, 0, n, result)",
          "successors": [
            {
              "id": 2,
              "start_line": 18,
              "end_line": 18,
              "label": "return result",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}