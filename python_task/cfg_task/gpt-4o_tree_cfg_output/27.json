{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 12,
      "label": "from typing import cast\nfrom unittest.mock import AsyncMock\nimport pytest\nfrom fastapi import WebSocket, WebSocketDisconnect\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.ws_api import (\n    Methods,\n    WsMessage,\n    handle_subscribe,\n    handle_unsubscribe,\n    websocket_router,\n)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "mock_websocket",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def mock_websocket() -> AsyncMock:\n    return AsyncMock(spec=WebSocket)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "mock_manager",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_websocket_router_subscribe",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 9,
          "label": "async def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
          "successors": [
            {
              "id": 2,
              "start_line": 10,
              "end_line": 12,
              "label": "await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 13,
                  "end_line": 18,
                  "label": "mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_websocket_router_unsubscribe",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 9,
          "label": "async def test_websocket_router_unsubscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
          "successors": [
            {
              "id": 2,
              "start_line": 10,
              "end_line": 12,
              "label": "await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 13,
                  "end_line": 18,
                  "label": "mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_websocket_router_invalid_method",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "async def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 7,
              "label": "mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]",
              "successors": [
                {
                  "id": 3,
                  "start_line": 8,
                  "end_line": 10,
                  "label": "await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 11,
                      "end_line": 15,
                      "label": "mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_handle_subscribe_success",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def test_handle_subscribe_success(",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 11,
              "label": "mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_handle_subscribe_missing_data",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 11,
          "label": "async def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE)\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_handle_unsubscribe_success",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 11,
          "label": "async def test_handle_unsubscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_handle_unsubscribe_missing_data",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "async def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 11,
              "label": "message = WsMessage(method=Methods.UNSUBSCRIBE)\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}