{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "import pytest\nfrom backend.util.request import validate_url",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "test_validate_url",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def test_validate_url():\n    # Rejected IP ranges",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 4,
              "label": "with pytest.raises(ValueError):\n        validate_url(\"localhost\", [])",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 5,
              "end_line": 6,
              "label": "with pytest.raises(ValueError):\n        validate_url(\"192.168.1.1\", [])",
              "successors": []
            },
            {
              "id": 4,
              "start_line": 7,
              "end_line": 8,
              "label": "with pytest.raises(ValueError):\n        validate_url(\"127.0.0.1\", [])",
              "successors": []
            },
            {
              "id": 5,
              "start_line": 9,
              "end_line": 10,
              "label": "with pytest.raises(ValueError):\n        validate_url(\"0.0.0.0\", [])",
              "successors": []
            },
            {
              "id": 6,
              "start_line": 11,
              "end_line": 13,
              "label": "# Normal URLs\n    assert validate_url(\"google.com/a?b=c\", []) == \"http://google.com/a?b=c\"\n    assert validate_url(\"github.com?key=!@!@\", []) == \"http://github.com?key=!@!@\"",
              "successors": []
            },
            {
              "id": 7,
              "start_line": 14,
              "end_line": 15,
              "label": "# Scheme Enforcement\n    with pytest.raises(ValueError):",
              "successors": [
                {
                  "id": 8,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "validate_url(\"ftp://example.com\", [])",
                  "successors": []
                }
              ]
            },
            {
              "id": 9,
              "start_line": 17,
              "end_line": 18,
              "label": "with pytest.raises(ValueError):\n        validate_url(\"file://example.com\", [])",
              "successors": []
            },
            {
              "id": 10,
              "start_line": 19,
              "end_line": 20,
              "label": "# International domain that converts to punycode - should be allowed if public\n    assert validate_url(\"http://xn--exmple-cua.com\", []) == \"http://xn--exmple-cua.com\"",
              "successors": []
            },
            {
              "id": 11,
              "start_line": 21,
              "end_line": 22,
              "label": "# If the domain fails IDNA encoding or is invalid, it should raise an error\n    with pytest.raises(ValueError):",
              "successors": [
                {
                  "id": 12,
                  "start_line": 23,
                  "end_line": 23,
                  "label": "validate_url(\"http://exa\u25ccmple.com\", [])",
                  "successors": []
                }
              ]
            },
            {
              "id": 13,
              "start_line": 24,
              "end_line": 25,
              "label": "# IPv6 Addresses\n    with pytest.raises(ValueError):",
              "successors": [
                {
                  "id": 14,
                  "start_line": 26,
                  "end_line": 26,
                  "label": "validate_url(\"::1\", [])  # IPv6 loopback should be blocked",
                  "successors": []
                }
              ]
            },
            {
              "id": 15,
              "start_line": 27,
              "end_line": 28,
              "label": "with pytest.raises(ValueError):\n        validate_url(\"http://[::1]\", [])  # IPv6 loopback in URL form",
              "successors": []
            },
            {
              "id": 16,
              "start_line": 29,
              "end_line": 30,
              "label": "# Suspicious Characters in Hostname\n    with pytest.raises(ValueError):",
              "successors": [
                {
                  "id": 17,
                  "start_line": 31,
                  "end_line": 31,
                  "label": "validate_url(\"http://example_underscore.com\", [])",
                  "successors": []
                }
              ]
            },
            {
              "id": 18,
              "start_line": 32,
              "end_line": 33,
              "label": "with pytest.raises(ValueError):\n        validate_url(\"http://exa mple.com\", [])  # Space in hostname",
              "successors": []
            },
            {
              "id": 19,
              "start_line": 34,
              "end_line": 35,
              "label": "# Malformed URLs\n    with pytest.raises(ValueError):",
              "successors": [
                {
                  "id": 20,
                  "start_line": 36,
                  "end_line": 36,
                  "label": "validate_url(\"http://\", [])  # No hostname",
                  "successors": []
                }
              ]
            },
            {
              "id": 21,
              "start_line": 37,
              "end_line": 38,
              "label": "with pytest.raises(ValueError):\n        validate_url(\"://missing-scheme\", [])  # Missing proper scheme",
              "successors": []
            },
            {
              "id": 22,
              "start_line": 39,
              "end_line": 40,
              "label": "# Trusted Origins\n    trusted = [\"internal-api.company.com\", \"10.0.0.5\"]",
              "successors": []
            },
            {
              "id": 23,
              "start_line": 41,
              "end_line": 45,
              "label": "assert (\n        validate_url(\"internal-api.company.com\", trusted)\n        == \"http://internal-api.company.com\"\n    )\n    assert validate_url(\"10.0.0.5\", [\"10.0.0.5\"]) == \"http://10.0.0.5\"",
              "successors": []
            },
            {
              "id": 24,
              "start_line": 46,
              "end_line": 47,
              "label": "# Special Characters in Path or Query\n    assert (",
              "successors": [
                {
                  "id": 25,
                  "start_line": 48,
                  "end_line": 50,
                  "label": "validate_url(\"example.com/path%20with%20spaces\", [])\n        == \"http://example.com/path%20with%20spaces\"\n    )",
                  "successors": []
                }
              ]
            },
            {
              "id": 26,
              "start_line": 51,
              "end_line": 52,
              "label": "# Backslashes should be replaced with forward slashes\n    assert (",
              "successors": [
                {
                  "id": 27,
                  "start_line": 53,
                  "end_line": 55,
                  "label": "validate_url(\"http://example.com\\\\backslash\", [])\n        == \"http://example.com/backslash\"\n    )",
                  "successors": []
                }
              ]
            },
            {
              "id": 28,
              "start_line": 56,
              "end_line": 58,
              "label": "# Check defaulting scheme behavior for valid domains\n    assert validate_url(\"example.com\", []) == \"http://example.com\"\n    assert validate_url(\"https://secure.com\", []) == \"https://secure.com\"",
              "successors": []
            },
            {
              "id": 29,
              "start_line": 59,
              "end_line": 60,
              "label": "# Non-ASCII Characters in Query/Fragment\n    assert validate_url(\"example.com?param=\u00e4\u00f6\u00fc\", []) == \"http://example.com?param=\u00e4\u00f6\u00fc\"",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}