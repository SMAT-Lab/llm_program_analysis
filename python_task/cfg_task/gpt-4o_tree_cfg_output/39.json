{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 29,
      "label": "import asyncio\nfrom typing import Literal\nimport aiohttp\nimport discord\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nDiscordCredentials = CredentialsMetaInput[\n    Literal[ProviderName.DISCORD], Literal[\"api_key\"]\n]\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"discord\",\n    api_key=SecretStr(\"test_api_key\"),\n    title=\"Mock Discord API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "DiscordCredentialsField",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def DiscordCredentialsField() -> DiscordCredentials:\n    return CredentialsField(description=\"Discord bot token\")",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "ReadDiscordMessagesBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 24,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run_bot",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 7,
              "label": "async def run_bot(self, token: SecretStr):\n        intents = discord.Intents.default()\n        intents.message_content = True\n        client = discord.Client(intents=intents)\n        self.output_data = None\n        self.channel_name = None\n        self.username = None",
              "successors": [
                {
                  "id": 2,
                  "start_line": 13,
                  "end_line": 17,
                  "label": "if message.author == client.user:\n                return\n            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 18,
                      "end_line": 18,
                      "label": "if message.attachments:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 19,
                          "end_line": 19,
                          "label": "attachment = message.attachments[0]  # Process the first attachment",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 20,
                              "end_line": 20,
                              "label": "if attachment.filename.endswith((\".txt\", \".py\")):",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 21,
                                  "end_line": 24,
                                  "label": "async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "start_line": 25,
              "end_line": 26,
              "label": "await client.close()\n        await client.start(token.get_secret_value())",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        while True:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "for output_name, output_value in self.__run(input_data, credentials):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "yield output_name, output_value",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "break",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "__run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def __run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        try:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 6,
                  "label": "loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n            # If it's a Future (mock), set the result",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 6,
                      "end_line": 14,
                      "label": "if isinstance(future, asyncio.Future):\n                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n            result = loop.run_until_complete(future)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 16,
                          "end_line": 20,
                          "label": "if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 20,
                              "end_line": 26,
                              "label": "if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n                raise ValueError(\"No message, channel name, or username received.\")\n            yield \"message_content\", self.output_data",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 29,
                                  "end_line": 30,
                                  "label": "except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")",
                                  "successors": []
                                },
                                {
                                  "id": 7,
                                  "start_line": 31,
                                  "end_line": 32,
                                  "label": "except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "SendDiscordMessageBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 18,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "send_message",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "async def send_message(self, token: str, channel_name: str, message_content: str):\n        intents = discord.Intents.default()\n        intents.guilds = True  # Required for fetching guild/channel information\n        client = discord.Client(intents=intents)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "@client.event",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "async def on_ready():",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "print(f\"Logged in as {client.user}\")",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "for guild in client.guilds:",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 9,
                                  "end_line": 9,
                                  "label": "for channel in guild.text_channels:",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 10,
                                      "end_line": 10,
                                      "label": "if channel.name == channel_name:",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 11,
                                          "end_line": 11,
                                          "label": "# Split message into chunks if it exceeds 2000 characters",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "start_line": 12,
                                              "end_line": 13,
                                              "label": "for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)",
                                              "successors": []
                                            },
                                            {
                                              "id": 10,
                                              "start_line": 14,
                                              "end_line": 15,
                                              "label": "self.output_data = \"Message sent\"\n                        await client.close()",
                                              "successors": []
                                            },
                                            {
                                              "id": 11,
                                              "start_line": 16,
                                              "end_line": 16,
                                              "label": "return",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 12,
                                  "start_line": 17,
                                  "end_line": 18,
                                  "label": "self.output_data = \"Channel not found\"\n            await client.close()",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 13,
              "start_line": 19,
              "end_line": 19,
              "label": "await client.start(token)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "chunk_message",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def chunk_message(self, message: str, limit: int = 2000) -> list:\n        \"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"\n        return [message[i : i + limit] for i in range(0, len(message), limit)]",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 4,
              "end_line": 4,
              "label": "try:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 5,
                  "end_line": 20,
                  "label": "loop = asyncio.get_event_loop()\n            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n            # If it's a Future (mock), set the result\n            result = loop.run_until_complete(future)\n            # For testing purposes, use the mocked result\n            yield \"status\", self.output_data",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 12,
                      "end_line": 13,
                      "label": "if isinstance(future, asyncio.Future):\n                future.set_result(\"Message sent\")",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 16,
                      "end_line": 17,
                      "label": "if isinstance(result, str):\n                self.output_data = result",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 18,
                      "end_line": 19,
                      "label": "if self.output_data is None:\n                raise ValueError(\"No status message received.\")",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "start_line": 21,
              "end_line": 22,
              "label": "except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")",
              "successors": []
            },
            {
              "id": 7,
              "start_line": 23,
              "end_line": 24,
              "label": "except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}