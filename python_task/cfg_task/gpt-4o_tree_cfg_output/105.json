{
  "name": "example_script",
  "type": "CFG",
  "blocks": [],
  "functions": [],
  "classes": [
    {
      "name": "Node",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def __init__(self, results):\n        self.results = results\n        self.next = next",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "LinkedList",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def __init__(self):\n        self.head = None\n        self.tail = None",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "move_to_front",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def move_to_front(self, node):\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "append_to_front",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def append_to_front(self, node):\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "remove_from_tail",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def remove_from_tail(self):\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Cache",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}  # key: query, value: node\n        self.linked_list = LinkedList()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n        node = self.lookup.get(query)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "if node is None:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 7,
                      "end_line": 7,
                      "label": "return None",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 8,
                      "end_line": 9,
                      "label": "self.linked_list.move_to_front(node)\n        return node.results",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "set",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 7,
              "label": "def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.lookup.get(query)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "if node is not None:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 9,
                      "end_line": 11,
                      "label": "# Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 12,
                      "end_line": 12,
                      "label": "else:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 13,
                          "end_line": 14,
                          "label": "# Key does not exist in cache\n            if self.size == self.MAX_SIZE:",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 15,
                              "end_line": 17,
                              "label": "# Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "start_line": 18,
                          "end_line": 19,
                          "label": "else:\n                self.size += 1",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "start_line": 20,
                          "end_line": 23,
                          "label": "# Add the new key and value\n            new_node = Node(results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}