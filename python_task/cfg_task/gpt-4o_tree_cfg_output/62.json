{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 5,
      "label": "from urllib.parse import parse_qs, urlparse\nfrom youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.formatters import TextFormatter\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "TranscribeYoutubeVideoBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 22,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "extract_video_id",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def extract_video_id(url: str) -> str:\n        parsed_url = urlparse(url)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "if parsed_url.netloc == \"youtu.be\":",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "return parsed_url.path[1:]",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "if parsed_url.path == \"/watch\":",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 7,
                              "end_line": 8,
                              "label": "p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "start_line": 9,
                          "end_line": 9,
                          "label": "if parsed_url.path[:7] == \"/embed/\":",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 10,
                              "end_line": 10,
                              "label": "return parsed_url.path.split(\"/\")[2]",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "start_line": 11,
                          "end_line": 11,
                          "label": "if parsed_url.path[:3] == \"/v/\":",
                          "successors": [
                            {
                              "id": 10,
                              "start_line": 12,
                              "end_line": 12,
                              "label": "return parsed_url.path.split(\"/\")[2]",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 11,
                      "start_line": 13,
                      "end_line": 13,
                      "label": "raise ValueError(f\"Invalid YouTube URL: {url}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_transcript",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def get_transcript(video_id: str):\n        try:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 4,
                  "label": "transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n            if not transcript_list:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "raise ValueError(f\"No transcripts found for the video: {video_id}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 6,
                  "end_line": 9,
                  "label": "for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript(\n                    [transcript.language_code]\n                )",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 10,
                      "end_line": 12,
                      "label": "return YouTubeTranscriptApi.get_transcript(\n                    video_id, languages=[first_transcript.language_code]\n                )",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "start_line": 13,
                  "end_line": 13,
                  "label": "except Exception:",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "raise ValueError(f\"No transcripts found for the video: {video_id}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 2,
              "end_line": 3,
              "label": "video_id = self.extract_video_id(input_data.youtube_url)\n        yield \"video_id\", video_id",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 6,
                  "label": "transcript = self.get_transcript(video_id)\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 7,
                      "end_line": 7,
                      "label": "yield \"transcript\", transcript_text",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}