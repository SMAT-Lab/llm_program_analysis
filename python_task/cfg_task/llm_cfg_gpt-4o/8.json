{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 100,
  "functions": [
    {
      "name": "get_executor_manager_client",
      "type": "function",
      "start_line": 21,
      "end_line": 25,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_executor_manager_client():\n    from backend.executor import ExecutionManager\n    from backend.util.service import get_service_client\n\n    return get_service_client(ExecutionManager)",
      "blocks": [
        {
          "id": 1,
          "label": "from backend.executor import ExecutionManager",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "from backend.util.service import get_service_client",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return get_service_client(ExecutionManager)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_event_bus",
      "type": "function",
      "start_line": 29,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_event_bus():\n    from backend.data.execution import RedisExecutionEventBus\n\n    return RedisExecutionEventBus()",
      "blocks": [
        {
          "id": 1,
          "label": "def get_event_bus():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "from backend.data.execution import RedisExecutionEventBus",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return RedisExecutionEventBus()",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "AgentExecutorBlock",
      "type": "class",
      "start_line": 35,
      "end_line": 100,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 48,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(id=\"e189baac-8c20-45a1-94a7-55177ea42565\", description=\"Executes an existing agent inside your agent\", input_schema=AgentExecutorBlock.Input, output_schema=AgentExecutorBlock.Output, block_type=BlockType.AGENT, categories={BlockCategory.AGENT})",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 58,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        executor_manager = get_executor_manager_client()\n        event_bus = get_event_bus()\n\n        graph_exec = executor_manager.add_execution(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )\n        log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\n        logger.info(f\"Starting execution of {log_id}\")\n\n        for event in event_bus.listen(\n            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n        ):\n            logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )\n\n            if not event.node_id:\n                if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue\n\n            if not event.block_id:\n                logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue\n\n            block = get_block(event.block_id)\n            if not block or block.block_type != BlockType.OUTPUT:\n                continue\n\n            output_name = event.input_data.get(\"name\")\n            if not output_name:\n                logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue\n\n            for output_data in event.output_data.get(\"output\", []):\n                logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n                yield output_name, output_data",
          "blocks": [
            {
              "id": 1,
              "label": "executor_manager = get_executor_manager_client()\\nevent_bus = get_event_bus()\\ngraph_exec = executor_manager.add_execution(\\n    graph_id=input_data.graph_id,\\n    graph_version=input_data.graph_version,\\n    user_id=input_data.user_id,\\n    data=input_data.data,\\n)\\nlog_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\\nlogger.info(f\"Starting execution of {log_id}\")",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "for event in event_bus.listen(\\n    graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\\n):",
              "successors": [
                3,
                10
              ]
            },
            {
              "id": 3,
              "label": "logger.info(\\n    f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\\n)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "if not event.node_id:",
              "successors": [
                5,
                8
              ]
            },
            {
              "id": 5,
              "label": "if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:",
              "successors": [
                6,
                7
              ]
            },
            {
              "id": 6,
              "label": "logger.info(f\"Execution {log_id} ended with status {event.status}\")\\nbreak",
              "successors": [
                10
              ]
            },
            {
              "id": 7,
              "label": "continue",
              "successors": [
                10
              ]
            },
            {
              "id": 8,
              "label": "if not event.block_id:\\n    logger.warning(f\"{log_id} received event without block_id {event}\")\\n    continue",
              "successors": [
                10,
                9
              ]
            },
            {
              "id": 9,
              "label": "block = get_block(event.block_id)\\nif not block or block.block_type != BlockType.OUTPUT:\\n    continue",
              "successors": [
                10,
                11
              ]
            },
            {
              "id": 10,
              "label": "output_name = event.input_data.get(\"name\")\\nif not output_name:\\n    logger.warning(f\"{log_id} produced an output with no name {event}\")\\n    continue",
              "successors": [
                11,
                12
              ]
            },
            {
              "id": 11,
              "label": "for output_data in event.output_data.get(\"output\", []):",
              "successors": [
                13,
                12
              ]
            },
            {
              "id": 12,
              "label": "continue",
              "successors": [
                10
              ]
            },
            {
              "id": 13,
              "label": "logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\\nyield output_name, output_data",
              "successors": [
                12
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 36,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        user_id: str = SchemaField(description=\"User ID\")\n        graph_id: str = SchemaField(description=\"Graph ID\")\n        graph_version: int = SchemaField(description=\"Graph Version\")\n\n        data: BlockInput = SchemaField(description=\"Input data for the graph\")\n        input_schema: dict = SchemaField(description=\"Input schema for the graph\")\n        output_schema: dict = SchemaField(description=\"Output schema for the graph\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "user_id: str = SchemaField(description=\"User ID\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "graph_id: str = SchemaField(description=\"Graph ID\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "graph_version: int = SchemaField(description=\"Graph Version\")",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "data: BlockInput = SchemaField(description=\"Input data for the graph\")",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "input_schema: dict = SchemaField(description=\"Input schema for the graph\")",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "output_schema: dict = SchemaField(description=\"Output schema for the graph\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 45,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class AgentExecutorBlock(Block):\n        output_schema: dict = SchemaField(description=\"Output schema for the graph\")\n\n        pass\n\n        )\n\n                yield output_name, output_data",
      "blocks": [
        {
          "id": 1,
          "label": "class AgentExecutorBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "output_schema: dict = SchemaField(description=\"Output schema for the graph\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "pass",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\n\nfrom autogpt_libs.utils.cache import thread_cached\n\nfrom backend.data.block import (\n    Block,\n    BlockCategory,\n    BlockInput,\n    BlockOutput,\n    BlockSchema,\n    BlockType,\n    get_block,\n)\nfrom backend.data.execution import ExecutionStatus\nfrom backend.data.model import SchemaField\n\nlogger = logging.getLogger(__name__)\n\n\n@thread_cached\n    return get_service_client(ExecutionManager)\n\n\n@thread_cached\n    return RedisExecutionEventBus()\n\n\n                yield output_name, output_data",
  "blocks": [
    {
      "id": 1,
      "label": "import logging",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from autogpt_libs.utils.cache import thread_cached",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from backend.data.block import (Block, BlockCategory, BlockInput, BlockOutput, BlockSchema, BlockType, get_block)",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from backend.data.execution import ExecutionStatus",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from backend.data.model import SchemaField",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "logger = logging.getLogger(__name__)",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "@thread_cached\nreturn get_service_client(ExecutionManager)",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "@thread_cached\nreturn RedisExecutionEventBus()",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "yield output_name, output_data",
      "successors": []
    }
  ]
}