{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 68,
  "functions": [
    {
      "name": "test_verify_user_no_payload",
      "type": "function",
      "start_line": 6,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_verify_user_no_payload():\n    user = verify_user(None, admin_only=False)\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"admin\"",
      "blocks": [
        {
          "id": 1,
          "label": "user = verify_user(None, admin_only=False)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "assert user.role == \"admin\"",
          "successors": []
        }
      ]
    },
    {
      "name": "test_verify_user_no_user_id",
      "type": "function",
      "start_line": 12,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_verify_user_no_user_id():\n    with pytest.raises(Exception):\n        verify_user({\"role\": \"admin\"}, admin_only=False)",
      "blocks": [
        {
          "id": 1,
          "label": "def test_verify_user_no_user_id():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "with pytest.raises(Exception):",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "verify_user({\"role\": \"admin\"}, admin_only=False)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "exit with block",
          "successors": []
        }
      ]
    },
    {
      "name": "test_verify_user_not_admin",
      "type": "function",
      "start_line": 17,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_verify_user_not_admin():\n    with pytest.raises(Exception):\n        verify_user(\n            {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"},\n            admin_only=True,\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "def test_verify_user_not_admin():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "with pytest.raises(Exception):",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "verify_user({\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"}, admin_only=True)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "<end of function>",
          "successors": []
        }
      ]
    },
    {
      "name": "test_verify_user_with_admin_role",
      "type": "function",
      "start_line": 25,
      "end_line": 31,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_verify_user_with_admin_role():\n    user = verify_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"admin\"},\n        admin_only=True,\n    )\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"admin\"",
      "blocks": [
        {
          "id": 1,
          "label": "user = verify_user( {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"admin\"}, admin_only=True, )",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "assert user.role == \"admin\"",
          "successors": []
        }
      ]
    },
    {
      "name": "test_verify_user_with_user_role",
      "type": "function",
      "start_line": 34,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_verify_user_with_user_role():\n    user = verify_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"},\n        admin_only=False,\n    )\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"user\"",
      "blocks": [
        {
          "id": 1,
          "label": "user = verify_user({\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"}, admin_only=False)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "assert user.role == \"user\"",
          "successors": []
        }
      ]
    },
    {
      "name": "test_requires_user",
      "type": "function",
      "start_line": 43,
      "end_line": 48,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_requires_user():\n    user = requires_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"}\n    )\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"user\"",
      "blocks": [
        {
          "id": 1,
          "label": "user = requires_user({'sub': '3e53486c-cf57-477e-ba2a-cb02dc828e1a', 'role': 'user'})",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "assert user.user_id == '3e53486c-cf57-477e-ba2a-cb02dc828e1a'",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "assert user.role == 'user'",
          "successors": []
        }
      ]
    },
    {
      "name": "test_requires_user_no_user_id",
      "type": "function",
      "start_line": 51,
      "end_line": 53,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_requires_user_no_user_id():\n    with pytest.raises(Exception):\n        requires_user({\"role\": \"user\"})",
      "blocks": [
        {
          "id": 1,
          "label": "def test_requires_user_no_user_id():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "with pytest.raises(Exception):",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "requires_user({'role': 'user'})",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "end of function",
          "successors": []
        }
      ]
    },
    {
      "name": "test_requires_admin_user",
      "type": "function",
      "start_line": 56,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_requires_admin_user():\n    user = requires_admin_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"admin\"}\n    )\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"admin\"",
      "blocks": [
        {
          "id": 1,
          "label": "def test_requires_admin_user():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "user = requires_admin_user({\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"admin\"})",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "assert user.role == \"admin\"",
          "successors": []
        }
      ]
    },
    {
      "name": "test_requires_admin_user_not_admin",
      "type": "function",
      "start_line": 64,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_requires_admin_user_not_admin():\n    with pytest.raises(Exception):\n        requires_admin_user(\n            {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"}\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "def test_requires_admin_user_not_admin():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "with pytest.raises(Exception):",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "requires_admin_user({\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"})",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import pytest\n\nfrom .depends import requires_admin_user, requires_user, verify_user\n\n\n    assert user.role == \"admin\"\n\n\n        verify_user({\"role\": \"admin\"}, admin_only=False)\n\n\n        )\n\n\n    assert user.role == \"admin\"\n\n\n    assert user.role == \"user\"\n\n\n    assert user.role == \"user\"\n\n\n        requires_user({\"role\": \"user\"})\n\n\n    assert user.role == \"admin\"\n\n\n        )",
  "blocks": [
    {
      "id": 1,
      "label": "import pytest",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from .depends import requires_admin_user, requires_user, verify_user",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "assert user.role == \"admin\"",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "verify_user({\"role\": \"admin\"}, admin_only=False)",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "assert user.role == \"admin\"",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "assert user.role == \"user\"",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "assert user.role == \"user\"",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "requires_user({\"role\": \"user\"})",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "assert user.role == \"admin\"",
      "successors": []
    }
  ]
}