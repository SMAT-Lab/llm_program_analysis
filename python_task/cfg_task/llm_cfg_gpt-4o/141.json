{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 514,
  "functions": [
    {
      "name": "prepare_pr_api_url",
      "type": "function",
      "start_line": 506,
      "end_line": 514,
      "functions": [],
      "classes": [],
      "simplified_code": "def prepare_pr_api_url(pr_url: str, path: str) -> str:\n    # Pattern to capture the base repository URL and the pull request number\n    pattern = r\"^(?:https?://)?([^/]+/[^/]+/[^/]+)/pull/(\\d+)\"\n    match = re.match(pattern, pr_url)\n    if not match:\n        return pr_url\n\n    base_url, pr_number = match.groups()\n    return f\"{base_url}/pulls/{pr_number}/{path}\"",
      "blocks": [
        {
          "id": 1,
          "label": "pattern = r\"^(?:https?://)?([^/]+/[^/]+/[^/]+)/pull/(\\d+)\"\nmatch = re.match(pattern, pr_url)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if not match:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "return pr_url",
          "successors": []
        },
        {
          "id": 4,
          "label": "base_url, pr_number = match.groups()\nreturn f\"{base_url}/pulls/{pr_number}/{path}\"",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "GithubListPullRequestsBlock",
      "type": "class",
      "start_line": 18,
      "end_line": 91,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 36,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"ffef3c4c-6cd0-48dd-817d-459f975219f4\",\n            description=\"This block lists all pull requests for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListPullRequestsBlock.Input,\n            output_schema=GithubListPullRequestsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"pull_request\",\n                    {\n                        \"title\": \"Pull request 1\",\n                        \"url\": \"https://github.com/owner/repo/pull/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_prs\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Pull request 1\",\n                        \"url\": \"https://github.com/owner/repo/pull/1\",\n                    }\n                ]\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "list_prs",
          "type": "function",
          "start_line": 67,
          "end_line": 76,
          "functions": [],
          "classes": [],
          "simplified_code": "    @staticmethod\n    def list_prs(credentials: GithubCredentials, repo_url: str) -> list[Output.PRItem]:\n        api = get_api(credentials)\n        pulls_url = repo_url + \"/pulls\"\n        response = api.get(pulls_url)\n        data = response.json()\n        pull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = [\n            {\"title\": pr[\"title\"], \"url\": pr[\"html_url\"]} for pr in data\n        ]\n        return pull_requests",
          "blocks": [
            {
              "id": 1,
              "label": "api = get_api(credentials)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pulls_url = repo_url + \"/pulls\"",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "response = api.get(pulls_url)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "data = response.json()",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "pull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = [{\"title\": pr[\"title\"], \"url\": pr[\"html_url\"]} for pr in data]",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "return pull_requests",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 78,
          "end_line": 89,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        pull_requests = self.list_prs(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"pull_request\", pr) for pr in pull_requests)",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pull_requests = self.list_prs(credentials, input_data.repo_url)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield from (('pull_request', pr) for pr in pull_requests)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 19,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "repo_url: str = SchemaField(description=\"URL of the GitHub repository\", placeholder=\"https://github.com/owner/repo\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 26,
          "end_line": 34,
          "functions": [],
          "classes": [
            {
              "name": "PRItem",
              "type": "class",
              "start_line": 27,
              "end_line": 29,
              "functions": [],
              "classes": [],
              "simplified_code": "        class PRItem(TypedDict):\n            title: str\n            url: str",
              "blocks": [
                {
                  "id": 1,
                  "label": "class PRItem(TypedDict):",
                  "successors": [
                    2
                  ]
                },
                {
                  "id": 2,
                  "label": "title: str",
                  "successors": [
                    3
                  ]
                },
                {
                  "id": 3,
                  "label": "url: str",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": "    class Output(BlockSchema):\n            url: str\n\n        pull_request: PRItem = SchemaField(\n            title=\"Pull Request\", description=\"PRs with their title and URL\"\n        )\n        error: str = SchemaField(description=\"Error message if listing issues failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "url: str",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "pull_request: PRItem = SchemaField(title=\"Pull Request\", description=\"PRs with their title and URL\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "error: str = SchemaField(description=\"Error message if listing issues failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubListPullRequestsBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if listing issues failed\")\n\n        )\n\n        return pull_requests\n\n        yield from ((\"pull_request\", pr) for pr in pull_requests)\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubListPullRequestsBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "error: str = SchemaField(description=\"Error message if listing issues failed\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return pull_requests",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "yield from ((\"pull_request\", pr) for pr in pull_requests)",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubMakePullRequestBlock",
      "type": "class",
      "start_line": 92,
      "end_line": 191,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 127,
          "end_line": 153,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"dfb987f8-f197-4b2e-bf19-111812afd692\",\n            description=\"This block creates a new pull request on a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakePullRequestBlock.Input,\n            output_schema=GithubMakePullRequestBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"title\": \"Test Pull Request\",\n                \"body\": \"This is a test pull request.\",\n                \"head\": \"feature-branch\",\n                \"base\": \"main\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"number\", 1),\n                (\"url\", \"https://github.com/owner/repo/pull/1\"),\n            ],\n            test_mock={\n                \"create_pr\": lambda *args, **kwargs: (\n                    1,\n                    \"https://github.com/owner/repo/pull/1\",\n                )\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__()",
              "successors": []
            }
          ]
        },
        {
          "name": "create_pr",
          "type": "function",
          "start_line": 156,
          "end_line": 169,
          "functions": [],
          "classes": [],
          "simplified_code": "    def create_pr(\n        credentials: GithubCredentials,\n        repo_url: str,\n        title: str,\n        body: str,\n        head: str,\n        base: str,\n    ) -> tuple[int, str]:\n        api = get_api(credentials)\n        pulls_url = repo_url + \"/pulls\"\n        data = {\"title\": title, \"body\": body, \"head\": head, \"base\": base}\n        response = api.post(pulls_url, json=data)\n        pr_data = response.json()\n        return pr_data[\"number\"], pr_data[\"html_url\"]",
          "blocks": [
            {
              "id": 1,
              "label": "api = get_api(credentials)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pulls_url = repo_url + \"/pulls\"",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "data = {\"title\": title, \"body\": body, \"head\": head, \"base\": base}",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "response = api.post(pulls_url, json=data)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "pr_data = response.json()",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "return pr_data[\"number\"], pr_data[\"html_url\"]",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 171,
          "end_line": 190,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            number, url = self.create_pr(\n                credentials,\n                input_data.repo_url,\n                input_data.title,\n                input_data.body,\n                input_data.head,\n                input_data.base,\n            )\n            yield \"number\", number\n            yield \"url\", url\n        except Exception as e:\n            yield \"error\", str(e)",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2,
                4
              ]
            },
            {
              "id": 2,
              "label": "number, url = self.create_pr(credentials, input_data.repo_url, input_data.title, input_data.body, input_data.head, input_data.base)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield 'number', number; yield 'url', url",
              "successors": []
            },
            {
              "id": 4,
              "label": "except Exception as e:",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "yield 'error', str(e)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 93,
          "end_line": 118,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        title: str = SchemaField(\n            description=\"Title of the pull request\",\n            placeholder=\"Enter the pull request title\",\n        )\n        body: str = SchemaField(\n            description=\"Body of the pull request\",\n            placeholder=\"Enter the pull request body\",\n        )\n        head: str = SchemaField(\n            description=(\n                \"The name of the branch where your changes are implemented. \"\n                \"For cross-repository pull requests in the same network, \"\n                \"namespace head with a user like this: username:branch.\"\n            ),\n            placeholder=\"Enter the head branch\",\n        )\n        base: str = SchemaField(\n            description=\"The name of the branch you want the changes pulled into.\",\n            placeholder=\"Enter the base branch\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "repo_url: str = SchemaField(...)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "title: str = SchemaField(...)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "body: str = SchemaField(...)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "head: str = SchemaField(...)",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "base: str = SchemaField(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 120,
          "end_line": 125,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        number: int = SchemaField(description=\"Number of the created pull request\")\n        url: str = SchemaField(description=\"URL of the created pull request\")\n        error: str = SchemaField(\n            description=\"Error message if the pull request creation failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "number: int = SchemaField(description=\"Number of the created pull request\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "url: str = SchemaField(description=\"URL of the created pull request\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "error: str = SchemaField(description=\"Error message if the pull request creation failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubMakePullRequestBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return pr_data[\"number\"], pr_data[\"html_url\"]\n\n            yield \"error\", str(e)\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubMakePullRequestBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "@staticmethod\ndef make_pull_request(data):",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "try:",
          "successors": [
            4,
            6
          ]
        },
        {
          "id": 4,
          "label": "pr_data = create_pull_request(data)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "return pr_data['number'], pr_data['html_url']",
          "successors": []
        },
        {
          "id": 6,
          "label": "except Exception as e:",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "yield 'error', str(e)",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubReadPullRequestBlock",
      "type": "class",
      "start_line": 193,
      "end_line": 291,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 214,
          "end_line": 241,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"bf94b2a4-1a30-4600-a783-a8a44ee31301\",\n            description=\"This block reads the body, title, user, and changes of a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadPullRequestBlock.Input,\n            output_schema=GithubReadPullRequestBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"include_pr_changes\": True,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"title\", \"Title of the pull request\"),\n                (\"body\", \"This is the body of the pull request.\"),\n                (\"author\", \"username\"),\n                (\"changes\", \"List of changes made in the pull request.\"),\n            ],\n            test_mock={\n                \"read_pr\": lambda *args, **kwargs: (\n                    \"Title of the pull request\",\n                    \"This is the body of the pull request.\",\n                    \"username\",\n                ),\n                \"read_pr_changes\": lambda *args, **kwargs: \"List of changes made in the pull request.\",\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(id=\"bf94b2a4-1a30-4600-a783-a8a44ee31301\", description=\"This block reads the body, title, user, and changes of a specified GitHub pull request.\", categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubReadPullRequestBlock.Input, output_schema=GithubReadPullRequestBlock.Output, test_input={\"pr_url\": \"https://github.com/owner/repo/pull/1\", \"include_pr_changes\": True, \"credentials\": TEST_CREDENTIALS_INPUT, }, test_credentials=TEST_CREDENTIALS, test_output=[ (\"title\", \"Title of the pull request\"), (\"body\", \"This is the body of the pull request.\"), (\"author\", \"username\"), (\"changes\", \"List of changes made in the pull request.\"), ], test_mock={ \"read_pr\": lambda *args, **kwargs: ( \"Title of the pull request\", \"This is the body of the pull request.\", \"username\", ), \"read_pr_changes\": lambda *args, **kwargs: \"List of changes made in the pull request.\" })",
              "successors": []
            }
          ]
        },
        {
          "name": "read_pr",
          "type": "function",
          "start_line": 244,
          "end_line": 253,
          "functions": [],
          "classes": [],
          "simplified_code": "    def read_pr(credentials: GithubCredentials, pr_url: str) -> tuple[str, str, str]:\n        api = get_api(credentials)\n        # Adjust the URL to access the issue endpoint for PR metadata\n        issue_url = pr_url.replace(\"/pull/\", \"/issues/\")\n        response = api.get(issue_url)\n        data = response.json()\n        title = data.get(\"title\", \"No title found\")\n        body = data.get(\"body\", \"No body content found\")\n        author = data.get(\"user\", {}).get(\"login\", \"No user found\")\n        return title, body, author",
          "blocks": [
            {
              "id": 1,
              "label": "api = get_api(credentials)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "issue_url = pr_url.replace(\"/pull/\", \"/issues/\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "response = api.get(issue_url)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "data = response.json()",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "title = data.get(\"title\", \"No title found\")",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "body = data.get(\"body\", \"No body content found\")",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "author = data.get(\"user\", {}).get(\"login\", \"No user found\")",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "return title, body, author",
              "successors": []
            }
          ]
        },
        {
          "name": "read_pr_changes",
          "type": "function",
          "start_line": 256,
          "end_line": 267,
          "functions": [],
          "classes": [],
          "simplified_code": "    def read_pr_changes(credentials: GithubCredentials, pr_url: str) -> str:\n        api = get_api(credentials)\n        files_url = prepare_pr_api_url(pr_url=pr_url, path=\"files\")\n        response = api.get(files_url)\n        files = response.json()\n        changes = []\n        for file in files:\n            filename = file.get(\"filename\")\n            patch = file.get(\"patch\")\n            if filename and patch:\n                changes.append(f\"File: {filename}\\n{patch}\")\n        return \"\\n\\n\".join(changes)",
          "blocks": [
            {
              "id": 1,
              "label": "api = get_api(credentials)\nfiles_url = prepare_pr_api_url(pr_url=pr_url, path=\"files\")\nresponse = api.get(files_url)\nfiles = response.json()\nchanges = []",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "for file in files:",
              "successors": [
                3,
                5
              ]
            },
            {
              "id": 3,
              "label": "filename = file.get(\"filename\")\npatch = file.get(\"patch\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "if filename and patch:",
              "successors": [
                5,
                6
              ]
            },
            {
              "id": 5,
              "label": "changes.append(f\"File: {filename}\\n{patch}\")",
              "successors": [
                2
              ]
            },
            {
              "id": 6,
              "label": "return \"\\n\\n\".join(changes)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 269,
          "end_line": 289,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        title, body, author = self.read_pr(\n            credentials,\n            input_data.pr_url,\n        )\n        yield \"title\", title\n        yield \"body\", body\n        yield \"author\", author\n\n        if input_data.include_pr_changes:\n            changes = self.read_pr_changes(\n                credentials,\n                input_data.pr_url,\n            )\n            yield \"changes\", changes",
          "blocks": [
            {
              "id": 1,
              "label": "title, body, author = self.read_pr(credentials, input_data.pr_url)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "yield 'title', title\nyield 'body', body\nyield 'author', author",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if input_data.include_pr_changes:",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "changes = self.read_pr_changes(credentials, input_data.pr_url)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "yield 'changes', changes",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 194,
          "end_line": 203,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n        include_pr_changes: bool = SchemaField(\n            description=\"Whether to include the changes made in the pull request\",\n            default=False,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "pr_url: str = SchemaField(...)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "include_pr_changes: bool = SchemaField(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 205,
          "end_line": 212,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        title: str = SchemaField(description=\"Title of the pull request\")\n        body: str = SchemaField(description=\"Body of the pull request\")\n        author: str = SchemaField(description=\"User who created the pull request\")\n        changes: str = SchemaField(description=\"Changes made in the pull request\")\n        error: str = SchemaField(\n            description=\"Error message if reading the pull request failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "title: str = SchemaField(description=\"Title of the pull request\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "body: str = SchemaField(description=\"Body of the pull request\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "author: str = SchemaField(description=\"User who created the pull request\")",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "changes: str = SchemaField(description=\"Changes made in the pull request\")",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "error: str = SchemaField(description=\"Error message if reading the pull request failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubReadPullRequestBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return title, body, author\n\n    @staticmethod\n        return \"\\n\\n\".join(changes)\n\n            yield \"changes\", changes\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubReadPullRequestBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "def pull_request_title_and_body(cls, obj):",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "title = obj.title\nauthor = obj.author\nbody = obj.body\nreturn title, body, author",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "def pull_request_changes(cls, obj):",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "changes = [\n    f'{change.filename} ({change.status})'\n    for change in obj.get('changes', [])\n]\nreturn '\\n\\n'.join(changes)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "def extras(self, changes):",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "yield 'changes', changes",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubAssignPRReviewerBlock",
      "type": "class",
      "start_line": 292,
      "end_line": 358,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 312,
          "end_line": 329,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"c0d22c5e-e688-43e3-ba43-d5faba7927fd\",\n            description=\"This block assigns a reviewer to a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubAssignPRReviewerBlock.Input,\n            output_schema=GithubAssignPRReviewerBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"reviewer\": \"reviewer_username\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Reviewer assigned successfully\")],\n            test_mock={\n                \"assign_reviewer\": lambda *args, **kwargs: \"Reviewer assigned successfully\"\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(",
              "successors": []
            }
          ]
        },
        {
          "name": "assign_reviewer",
          "type": "function",
          "start_line": 332,
          "end_line": 339,
          "functions": [],
          "classes": [],
          "simplified_code": "    def assign_reviewer(\n        credentials: GithubCredentials, pr_url: str, reviewer: str\n    ) -> str:\n        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\n        data = {\"reviewers\": [reviewer]}\n        api.post(reviewers_url, json=data)\n        return \"Reviewer assigned successfully\"",
          "blocks": [
            {
              "id": 1,
              "label": "def assign_reviewer(credentials: GithubCredentials, pr_url: str, reviewer: str) -> str:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "api = get_api(credentials)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "data = {\"reviewers\": [reviewer]}",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "api.post(reviewers_url, json=data)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "return \"Reviewer assigned successfully\"",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 341,
          "end_line": 355,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            status = self.assign_reviewer(\n                credentials,\n                input_data.pr_url,\n                input_data.reviewer,\n            )\n            yield \"status\", status\n        except Exception as e:",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2,
                4
              ]
            },
            {
              "id": 2,
              "label": "status = self.assign_reviewer(credentials, input_data.pr_url, input_data.reviewer)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield \"status\", status",
              "successors": []
            },
            {
              "id": 4,
              "label": "except Exception as e:",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 293,
          "end_line": 302,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n        reviewer: str = SchemaField(\n            description=\"Username of the reviewer to assign\",\n            placeholder=\"Enter the reviewer's username\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2,
                3,
                4
              ]
            },
            {
              "id": 2,
              "label": "credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "pr_url: str = SchemaField(description=\"URL of the GitHub pull request\", placeholder=\"https://github.com/owner/repo/pull/1\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "reviewer: str = SchemaField(description=\"Username of the reviewer to assign\", placeholder=\"Enter the reviewer's username\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 304,
          "end_line": 310,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the reviewer assignment operation\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the reviewer assignment failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "status: str = SchemaField(description=\"Status of the reviewer assignment operation\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if the reviewer assignment failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubAssignPRReviewerBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return \"Reviewer assigned successfully\"\n\n        except Exception as e:\n            yield \"error\", str(e)\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "try:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return \"Reviewer assigned successfully\"",
          "successors": []
        },
        {
          "id": 3,
          "label": "except Exception as e:",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "yield \"error\", str(e)",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubUnassignPRReviewerBlock",
      "type": "class",
      "start_line": 359,
      "end_line": 425,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 379,
          "end_line": 396,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"9637945d-c602-4875-899a-9c22f8fd30de\",\n            description=\"This block unassigns a reviewer from a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubUnassignPRReviewerBlock.Input,\n            output_schema=GithubUnassignPRReviewerBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"reviewer\": \"reviewer_username\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Reviewer unassigned successfully\")],\n            test_mock={\n                \"unassign_reviewer\": lambda *args, **kwargs: \"Reviewer unassigned successfully\"\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "super().__init__(id=\"9637945d-c602-4875-899a-9c22f8fd30de\", description=\"This block unassigns a reviewer from a specified GitHub pull request.\", categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubUnassignPRReviewerBlock.Input, output_schema=GithubUnassignPRReviewerBlock.Output, test_input={\"pr_url\": \"https://github.com/owner/repo/pull/1\", \"reviewer\": \"reviewer_username\", \"credentials\": TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[(\"status\", \"Reviewer unassigned successfully\")], test_mock={\"unassign_reviewer\": lambda *args, **kwargs: \"Reviewer unassigned successfully\"})",
              "successors": []
            }
          ]
        },
        {
          "name": "unassign_reviewer",
          "type": "function",
          "start_line": 399,
          "end_line": 406,
          "functions": [],
          "classes": [],
          "simplified_code": "    def unassign_reviewer(\n        credentials: GithubCredentials, pr_url: str, reviewer: str\n    ) -> str:\n        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\n        data = {\"reviewers\": [reviewer]}\n        api.delete(reviewers_url, json=data)\n        return \"Reviewer unassigned successfully\"",
          "blocks": [
            {
              "id": 1,
              "label": "api = get_api(credentials)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "data = {\"reviewers\": [reviewer]}",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "api.delete(reviewers_url, json=data)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "return \"Reviewer unassigned successfully\"",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 408,
          "end_line": 423,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            status = self.unassign_reviewer(\n                credentials,\n                input_data.pr_url,\n                input_data.reviewer,\n            )\n            yield \"status\", status\n        except Exception as e:\n            yield \"error\", str(e)",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2,
                4
              ]
            },
            {
              "id": 2,
              "label": "status = self.unassign_reviewer(credentials, input_data.pr_url, input_data.reviewer)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield \"status\", status",
              "successors": []
            },
            {
              "id": 4,
              "label": "except Exception as e:",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "yield \"error\", str(e)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 360,
          "end_line": 369,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )\n        reviewer: str = SchemaField(\n            description=\"Username of the reviewer to unassign\",\n            placeholder=\"Enter the reviewer's username\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2,
                3,
                4
              ]
            },
            {
              "id": 2,
              "label": "credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "pr_url: str = SchemaField(description=\"URL of the GitHub pull request\", placeholder=\"https://github.com/owner/repo/pull/1\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "reviewer: str = SchemaField(description=\"Username of the reviewer to unassign\", placeholder=\"Enter the reviewer's username\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 371,
          "end_line": 377,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the reviewer unassignment operation\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the reviewer unassignment failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "status: str = SchemaField(description=\"Status of the reviewer unassignment operation\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if the reviewer unassignment failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubUnassignPRReviewerBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return \"Reviewer unassigned successfully\"\n\n            yield \"error\", str(e)\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubUnassignPRReviewerBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "@staticmethod",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "def example_function():",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "try:",
          "successors": [
            5,
            7
          ]
        },
        {
          "id": 5,
          "label": "return 'Reviewer unassigned successfully'",
          "successors": [
            8
          ]
        },
        {
          "id": 6,
          "label": "except Exception as e:",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "yield 'error', str(e)",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "finally:",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubListPRReviewersBlock",
      "type": "class",
      "start_line": 426,
      "end_line": 505,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 447,
          "end_line": 476,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"2646956e-96d5-4754-a3df-034017e7ed96\",\n            description=\"This block lists all reviewers for a specified GitHub pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListPRReviewersBlock.Input,\n            output_schema=GithubListPRReviewersBlock.Output,\n            test_input={\n                \"pr_url\": \"https://github.com/owner/repo/pull/1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"reviewer\",\n                    {\n                        \"username\": \"reviewer1\",\n                        \"url\": \"https://github.com/reviewer1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_reviewers\": lambda *args, **kwargs: [\n                    {\n                        \"username\": \"reviewer1\",\n                        \"url\": \"https://github.com/reviewer1\",\n                    }\n                ]\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "list_reviewers",
          "type": "function",
          "start_line": 479,
          "end_line": 490,
          "functions": [],
          "classes": [],
          "simplified_code": "    def list_reviewers(\n        credentials: GithubCredentials, pr_url: str\n    ) -> list[Output.ReviewerItem]:\n        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\n        response = api.get(reviewers_url)\n        data = response.json()\n        reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [\n            {\"username\": reviewer[\"login\"], \"url\": reviewer[\"html_url\"]}\n            for reviewer in data.get(\"users\", [])\n        ]\n        return reviewers",
          "blocks": [
            {
              "id": 1,
              "label": "def list_reviewers(credentials: GithubCredentials, pr_url: str) -> list[Output.ReviewerItem]:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "api = get_api(credentials)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "response = api.get(reviewers_url)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "data = response.json()",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [\n            {\"username\": reviewer[\"login\"], \"url\": reviewer[\"html_url\"]}\n            for reviewer in data.get(\"users\", [])\n        ]",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "return reviewers",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 492,
          "end_line": 503,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        reviewers = self.list_reviewers(\n            credentials,\n            input_data.pr_url,\n        )\n        yield from ((\"reviewer\", reviewer) for reviewer in reviewers)",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "reviewers = self.list_reviewers(credentials, input_data.pr_url)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield from (('reviewer', reviewer) for reviewer in reviewers)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 427,
          "end_line": 432,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        pr_url: str = SchemaField(\n            description=\"URL of the GitHub pull request\",\n            placeholder=\"https://github.com/owner/repo/pull/1\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "pr_url: str = SchemaField(description=\"URL of the GitHub pull request\", placeholder=\"https://github.com/owner/repo/pull/1\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 434,
          "end_line": 445,
          "functions": [],
          "classes": [
            {
              "name": "ReviewerItem",
              "type": "class",
              "start_line": 435,
              "end_line": 437,
              "functions": [],
              "classes": [],
              "simplified_code": "        class ReviewerItem(TypedDict):\n            username: str\n            url: str",
              "blocks": [
                {
                  "id": 1,
                  "label": "class ReviewerItem(TypedDict):",
                  "successors": [
                    2
                  ]
                },
                {
                  "id": 2,
                  "label": "username: str\nurl: str",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": "    class Output(BlockSchema):\n            url: str\n\n        reviewer: ReviewerItem = SchemaField(\n            title=\"Reviewer\",\n            description=\"Reviewers with their username and profile URL\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if listing reviewers failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "url: str",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "reviewer: ReviewerItem = SchemaField(title=\"Reviewer\", description=\"Reviewers with their username and profile URL\",)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "error: str = SchemaField(description=\"Error message if listing reviewers failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GithubListPRReviewersBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return reviewers\n\n        yield from ((\"reviewer\", reviewer) for reviewer in reviewers)\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubListPRReviewersBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "def __init__(self):",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "pass",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "@staticmethod\ndef some_method():\nreviewers = [\"user1\", \"user2\", \"user3\"]",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "return reviewers",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "yield from ((\"reviewer\", reviewer) for reviewer in reviewers)",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import re\n\nfrom typing_extensions import TypedDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\nfrom ._api import get_api\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n\n\n\n\n\n\n\n\n\n    return f\"{base_url}/pulls/{pr_number}/{path}\"",
  "blocks": [
    {
      "id": 1,
      "label": "import re",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from typing_extensions import TypedDict",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from backend.data.model import SchemaField",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from ._api import get_api",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from ._auth import ( TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GithubCredentials, GithubCredentialsField, GithubCredentialsInput, )",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "return f\"{base_url}/pulls/{pr_number}/{path}\"",
      "successors": []
    }
  ]
}