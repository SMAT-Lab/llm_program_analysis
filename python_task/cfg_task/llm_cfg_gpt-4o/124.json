{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 181,
  "functions": [
    {
      "name": "extract_github_error_msg",
      "type": "function",
      "start_line": 169,
      "end_line": 181,
      "functions": [],
      "classes": [],
      "simplified_code": "def extract_github_error_msg(response: requests.Response) -> str:\n    error_msgs = []\n    resp = response.json()\n    if resp.get(\"message\"):\n        error_msgs.append(resp[\"message\"])\n    if resp.get(\"errors\"):\n        error_msgs.extend(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])\n    if resp.get(\"error\"):\n        if isinstance(resp[\"error\"], dict):\n            error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))\n        else:\n            error_msgs.append(resp[\"error\"])\n    return \"\\n\".join(error_msgs)",
      "blocks": [
        {
          "id": 1,
          "label": "error_msgs = []",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "resp = response.json()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "if resp.get(\"message\"):",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "error_msgs.append(resp[\"message\"])",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "if resp.get(\"errors\"):",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 6,
          "label": "error_msgs.extend(f\"* {err.get('message', err)}\" for err in resp[\"errors\"])",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "if resp.get(\"error\"):",
          "successors": [
            8,
            11
          ]
        },
        {
          "id": 8,
          "label": "if isinstance(resp[\"error\"], dict):",
          "successors": [
            9,
            10
          ]
        },
        {
          "id": 9,
          "label": "error_msgs.append(resp[\"error\"].get(\"message\", resp[\"error\"]))",
          "successors": [
            11
          ]
        },
        {
          "id": 10,
          "label": "error_msgs.append(resp[\"error\"])",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "return \"\\n\".join(error_msgs)",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "GithubWebhookType",
      "type": "class",
      "start_line": 19,
      "end_line": 20,
      "functions": [],
      "classes": [],
      "simplified_code": "class GithubWebhookType(StrEnum):\n    REPO = \"repo\"",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubWebhookType(StrEnum):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "REPO = \"repo\"",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubWebhooksManager",
      "type": "class",
      "start_line": 23,
      "end_line": 164,
      "functions": [
        {
          "name": "validate_payload",
          "type": "function",
          "start_line": 31,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": "    @classmethod\n    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n        if not (event_type := request.headers.get(\"X-GitHub-Event\")):\n            raise HTTPException(\n                status_code=400, detail=\"X-GitHub-Event header is missing!\"\n            )\n\n        if not (signature_header := request.headers.get(\"X-Hub-Signature-256\")):\n            raise HTTPException(\n                status_code=403, detail=\"X-Hub-Signature-256 header is missing!\"\n            )\n\n        payload_body = await request.body()\n        hash_object = hmac.new(\n            webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256\n        )\n        expected_signature = \"sha256=\" + hash_object.hexdigest()\n\n        if not hmac.compare_digest(expected_signature, signature_header):\n            raise HTTPException(\n                status_code=403, detail=\"Request signatures didn't match!\"\n            )\n\n        payload = await request.json()\n        if action := payload.get(\"action\"):\n            event_type += f\".{action}\"\n\n        return payload, event_type",
          "blocks": [
            {
              "id": 1,
              "label": "if not (event_type := request.headers.get(\"X-GitHub-Event\")):",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "raise HTTPException(status_code=400, detail=\"X-GitHub-Event header is missing!\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "if not (signature_header := request.headers.get(\"X-Hub-Signature-256\")):",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "raise HTTPException(status_code=403, detail=\"X-Hub-Signature-256 header is missing!\")",
              "successors": []
            },
            {
              "id": 5,
              "label": "payload_body = await request.body()",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "hash_object = hmac.new(webhook.secret.encode(\"utf-8\"), msg=payload_body, digestmod=hashlib.sha256)",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "expected_signature = \"sha256=\" + hash_object.hexdigest()",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "if not hmac.compare_digest(expected_signature, signature_header):",
              "successors": [
                9,
                10
              ]
            },
            {
              "id": 9,
              "label": "raise HTTPException(status_code=403, detail=\"Request signatures didn't match!\")",
              "successors": []
            },
            {
              "id": 10,
              "label": "payload = await request.json()",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "if action := payload.get(\"action\"):",
              "successors": [
                12,
                13
              ]
            },
            {
              "id": 12,
              "label": "event_type += f\".{action}\"",
              "successors": [
                13
              ]
            },
            {
              "id": 13,
              "label": "return payload, event_type",
              "successors": []
            }
          ]
        },
        {
          "name": "trigger_ping",
          "type": "function",
          "start_line": 62,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def trigger_ping(\n        self, webhook: integrations.Webhook, credentials: Credentials | None\n    ) -> None:\n        if not credentials:\n            raise ValueError(\"Credentials are required but were not passed\")\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        repo, github_hook_id = webhook.resource, webhook.provider_webhook_id\n        ping_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\"\n\n        response = requests.post(ping_url, headers=headers)\n\n        if response.status_code != 204:\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")",
          "blocks": [
            {
              "id": 1,
              "label": "if not credentials:",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "raise ValueError(\"Credentials are required but were not passed\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "headers = {...}",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "repo, github_hook_id = webhook.resource, webhook.provider_webhook_id",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "ping_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{github_hook_id}/pings\"",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "response = requests.post(ping_url, headers=headers)",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "if response.status_code != 204:",
              "successors": [
                8,
                9
              ]
            },
            {
              "id": 8,
              "label": "error_msg = extract_github_error_msg(response)",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")",
              "successors": []
            }
          ]
        },
        {
          "name": "_register_webhook",
          "type": "function",
          "start_line": 82,
          "end_line": 132,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: GithubWebhookType,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        if webhook_type == self.WebhookType.REPO and resource.count(\"/\") > 1:\n            raise ValueError(\"Invalid repo format: expected 'owner/repo'\")\n\n        # Extract main event, e.g. `pull_request.opened` -> `pull_request`\n        github_events = list({event.split(\".\")[0] for event in events})\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n        webhook_data = {\n            \"name\": \"web\",\n            \"active\": True,\n            \"events\": github_events,\n            \"config\": {\n                \"url\": ingress_url,\n                \"content_type\": \"json\",\n                \"insecure_ssl\": \"0\",\n                \"secret\": secret,\n            },\n        }\n\n        response = requests.post(\n            f\"{self.GITHUB_API_URL}/repos/{resource}/hooks\",\n            headers=headers,\n            json=webhook_data,\n        )\n\n        if response.status_code != 201:\n            error_msg = extract_github_error_msg(response)\n            if \"not found\" in error_msg.lower():\n                error_msg = (\n                    f\"{error_msg} \"\n                    \"(Make sure the GitHub account or API key has 'repo' or \"\n                    f\"webhook create permissions to '{resource}')\"\n                )\n            raise ValueError(f\"Failed to create GitHub webhook: {error_msg}\")\n\n        webhook_id = response.json()[\"id\"]\n        config = response.json()[\"config\"]\n\n        return str(webhook_id), config",
          "blocks": [
            {
              "id": 1,
              "label": "if webhook_type == self.WebhookType.REPO and resource.count('/') > 1:",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "raise ValueError(\"Invalid repo format: expected 'owner/repo'\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "github_events = list({event.split('.')[0] for event in events})",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "headers = {**self.GITHUB_API_DEFAULT_HEADERS,'Authorization': credentials.bearer(),}\nwebhook_data = {'name': 'web','active': True,'events': github_events,'config': {'url': ingress_url,'content_type': 'json','insecure_ssl': '0','secret': secret,},}",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "response = requests.post(f'{self.GITHUB_API_URL}/repos/{resource}/hooks',headers=headers,json=webhook_data,)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "if response.status_code != 201:",
              "successors": [
                7,
                11
              ]
            },
            {
              "id": 7,
              "label": "error_msg = extract_github_error_msg(response)",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "if 'not found' in error_msg.lower():",
              "successors": [
                9,
                10
              ]
            },
            {
              "id": 9,
              "label": "error_msg = (f\"{error_msg} (Make sure the GitHub account or API key has 'repo' or webhook create permissions to '{resource}')\")",
              "successors": [
                10
              ]
            },
            {
              "id": 10,
              "label": "raise ValueError(f\"Failed to create GitHub webhook: {error_msg}\")",
              "successors": []
            },
            {
              "id": 11,
              "label": "webhook_id = response.json()['id']\nconfig = response.json()['config']",
              "successors": [
                12
              ]
            },
            {
              "id": 12,
              "label": "return str(webhook_id), config",
              "successors": []
            }
          ]
        },
        {
          "name": "_deregister_webhook",
          "type": "function",
          "start_line": 134,
          "end_line": 163,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:\n        webhook_type = self.WebhookType(webhook.webhook_type)\n        if webhook.credentials_id != credentials.id:\n            raise ValueError(\n                f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\"\n            )\n\n        headers = {\n            **self.GITHUB_API_DEFAULT_HEADERS,\n            \"Authorization\": credentials.bearer(),\n        }\n\n        if webhook_type == self.WebhookType.REPO:\n            repo = webhook.resource\n            delete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"  # noqa\n        else:\n            raise NotImplementedError(\n                f\"Unsupported webhook type '{webhook.webhook_type}'\"\n            )\n\n        response = requests.delete(delete_url, headers=headers)\n\n        if response.status_code not in [204, 404]:\n            # 204 means successful deletion, 404 means the webhook was already deleted\n            error_msg = extract_github_error_msg(response)\n            raise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")\n\n        # If we reach here, the webhook was successfully deleted or didn't exist",
          "blocks": [
            {
              "id": 1,
              "label": "webhook_type = self.WebhookType(webhook.webhook_type)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if webhook.credentials_id != credentials.id:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "raise ValueError(f\"Webhook #{webhook.id} does not belong to credentials {credentials.id}\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "headers = {**self.GITHUB_API_DEFAULT_HEADERS, \"Authorization\": credentials.bearer()}",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "if webhook_type == self.WebhookType.REPO:",
              "successors": [
                6,
                7
              ]
            },
            {
              "id": 6,
              "label": "repo = webhook.resource\ndelete_url = f\"{self.GITHUB_API_URL}/repos/{repo}/hooks/{webhook.provider_webhook_id}\"",
              "successors": [
                8
              ]
            },
            {
              "id": 7,
              "label": "raise NotImplementedError(f\"Unsupported webhook type '{webhook.webhook_type}'\")",
              "successors": []
            },
            {
              "id": 8,
              "label": "response = requests.delete(delete_url, headers=headers)",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "if response.status_code not in [204, 404]:",
              "successors": [
                10,
                11
              ]
            },
            {
              "id": 10,
              "label": "error_msg = extract_github_error_msg(response)\nraise ValueError(f\"Failed to delete GitHub webhook: {error_msg}\")",
              "successors": []
            },
            {
              "id": 11,
              "label": "# If we reach here, the webhook was successfully deleted or didn't exist",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class GithubWebhooksManager(BaseWebhooksManager):\n    PROVIDER_NAME = ProviderName.GITHUB\n\n    WebhookType = GithubWebhookType\n\n    GITHUB_API_URL = \"https://api.github.com\"\n    GITHUB_API_DEFAULT_HEADERS = {\"Accept\": \"application/vnd.github.v3+json\"}\n\n        return payload, event_type\n\n            raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")\n\n        return str(webhook_id), config\n\n        # If we reach here, the webhook was successfully deleted or didn't exist\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GithubWebhooksManager(BaseWebhooksManager):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "PROVIDER_NAME = ProviderName.GITHUB\n\nWebhookType = GithubWebhookType\n\nGITHUB_API_URL = \"https://api.github.com\"\nGITHUB_API_DEFAULT_HEADERS = {\"Accept\": \"application/vnd.github.v3+json\"}",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return payload, event_type",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "raise ValueError(f\"Failed to ping GitHub webhook: {error_msg}\")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "return str(webhook_id), config",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import hashlib\nimport hmac\nimport logging\n\nimport requests\nfrom fastapi import HTTPException, Request\nfrom strenum import StrEnum\n\nfrom backend.data import integrations\nfrom backend.data.model import Credentials\nfrom backend.integrations.providers import ProviderName\n\nfrom ._base import BaseWebhooksManager\n\nlogger = logging.getLogger(__name__)\n\n\n# --8<-- [start:GithubWebhooksManager]\n    REPO = \"repo\"\n\n\n\n\n# --8<-- [end:GithubWebhooksManager]\n\n\n    return \"\\n\".join(error_msgs)",
  "blocks": [
    {
      "id": 1,
      "label": "import hashlib",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "import hmac",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "import logging",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "import requests",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from fastapi import HTTPException, Request",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from strenum import StrEnum",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.data import integrations",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "from backend.data.model import Credentials",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "from backend.integrations.providers import ProviderName",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "from ._base import BaseWebhooksManager",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "logger = logging.getLogger(__name__)",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "REPO = \"repo\"",
      "successors": [
        13
      ]
    },
    {
      "id": 13,
      "label": "return \"\\n\".join(error_msgs)",
      "successors": []
    }
  ]
}