{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 113,
  "functions": [
    {
      "name": "valid_coloring",
      "type": "function",
      "start_line": 10,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": "def valid_coloring(\n    neighbours: list[int], colored_vertices: list[int], color: int\n) -> bool:\n    \"\"\"\n    For each neighbour check if the coloring constraint is satisfied\n    If any of the neighbours fail the constraint return False\n    If all neighbours validate the constraint return True\n\n    >>> neighbours = [0,1,0,1,0]\n    >>> colored_vertices = [0, 2, 1, 2, 0]\n\n    >>> color = 1\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    True\n\n    >>> color = 2\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    False\n    \"\"\"\n    # Does any neighbour not satisfy the constraints\n    return not any(\n        neighbour == 1 and colored_vertices[i] == color\n        for i, neighbour in enumerate(neighbours)\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "def valid_coloring(neighbours: list[int], colored_vertices: list[int], color: int) -> bool:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return not any(neighbour == 1 and colored_vertices[i] == color for i, neighbour in enumerate(neighbours))",
          "successors": []
        }
      ]
    },
    {
      "name": "util_color",
      "type": "function",
      "start_line": 36,
      "end_line": 85,
      "functions": [],
      "classes": [],
      "simplified_code": "def util_color(\n    graph: list[list[int]], max_colors: int, colored_vertices: list[int], index: int\n) -> bool:\n    \"\"\"\n    Pseudo-Code\n\n    Base Case:\n    1. Check if coloring is complete\n        1.1 If complete return True (meaning that we successfully colored the graph)\n\n    Recursive Step:\n    2. Iterates over each color:\n        Check if the current coloring is valid:\n            2.1. Color given vertex\n            2.2. Do recursive call, check if this coloring leads to a solution\n            2.4. if current coloring leads to a solution return\n            2.5. Uncolor given vertex\n\n    >>> graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n    >>> max_colors = 3\n    >>> colored_vertices = [0, 1, 0, 0, 0]\n    >>> index = 3\n\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    True\n\n    >>> max_colors = 2\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    False\n    \"\"\"\n\n    # Base Case\n    if index == len(graph):\n        return True\n\n    # Recursive Step\n    for i in range(max_colors):\n        if valid_coloring(graph[index], colored_vertices, i):\n            # Color current vertex\n            colored_vertices[index] = i\n            # Validate coloring\n            if util_color(graph, max_colors, colored_vertices, index + 1):\n                return True\n            # Backtrack\n            colored_vertices[index] = -1\n    return False",
      "blocks": [
        {
          "id": 1,
          "label": "def util_color(graph: list[list[int]], max_colors: int, colored_vertices: list[int], index: int) -> bool:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if index == len(graph):",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "return True",
          "successors": []
        },
        {
          "id": 4,
          "label": "for i in range(max_colors):",
          "successors": [
            5,
            8
          ]
        },
        {
          "id": 5,
          "label": "if valid_coloring(graph[index], colored_vertices, i):",
          "successors": [
            6,
            8
          ]
        },
        {
          "id": 6,
          "label": "colored_vertices[index] = i",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "if util_color(graph, max_colors, colored_vertices, index + 1):",
          "successors": [
            9,
            8
          ]
        },
        {
          "id": 8,
          "label": "colored_vertices[index] = -1",
          "successors": [
            8
          ]
        },
        {
          "id": 9,
          "label": "return True",
          "successors": []
        },
        {
          "id": 10,
          "label": "return False",
          "successors": []
        }
      ]
    },
    {
      "name": "color",
      "type": "function",
      "start_line": 88,
      "end_line": 113,
      "functions": [],
      "classes": [],
      "simplified_code": "def color(graph: list[list[int]], max_colors: int) -> list[int]:\n    \"\"\"\n    Wrapper function to call subroutine called util_color\n    which will either return True or False.\n    If True is returned colored_vertices list is filled with correct colorings\n\n    >>> graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n\n    >>> max_colors = 3\n    >>> color(graph, max_colors)\n    [0, 1, 0, 2, 0]\n\n    >>> max_colors = 2\n    >>> color(graph, max_colors)\n    []\n    \"\"\"\n    colored_vertices = [-1] * len(graph)\n\n    if util_color(graph, max_colors, colored_vertices, 0):\n        return colored_vertices\n\n    return []",
      "blocks": [
        {
          "id": 1,
          "label": "colored_vertices = [-1] * len(graph)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if util_color(graph, max_colors, colored_vertices, 0):",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "return colored_vertices",
          "successors": []
        },
        {
          "id": 4,
          "label": "return []",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "\"\"\"\nGraph Coloring also called \"m coloring problem\"\nconsists of coloring a given graph with at most m colors\nsuch that no adjacent vertices are assigned the same color\n\nWikipedia: https://en.wikipedia.org/wiki/Graph_coloring\n\"\"\"\n\n\n    )\n\n\n    return False\n\n\n    return []",
  "blocks": [
    {
      "id": 1,
      "label": "def graph_coloring(graph, m):",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "n = len(graph)",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "colors = [-1] * n",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "def is_safe(v, c):",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "for i in range(n):",
      "successors": [
        6,
        8
      ]
    },
    {
      "id": 6,
      "label": "if graph[v][i] == 1 and colors[i] == c:",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "return False",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "return True",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "def graph_coloring_util(v):",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "if v == n:",
      "successors": [
        11,
        12
      ]
    },
    {
      "id": 11,
      "label": "return True",
      "successors": []
    },
    {
      "id": 12,
      "label": "for c in range(1, m+1):",
      "successors": [
        13,
        17
      ]
    },
    {
      "id": 13,
      "label": "if is_safe(v, c):",
      "successors": [
        14,
        17
      ]
    },
    {
      "id": 14,
      "label": "colors[v] = c",
      "successors": [
        15
      ]
    },
    {
      "id": 15,
      "label": "if graph_coloring_util(v + 1):",
      "successors": [
        16,
        17
      ]
    },
    {
      "id": 16,
      "label": "return True",
      "successors": []
    },
    {
      "id": 17,
      "label": "colors[v] = -1",
      "successors": [
        12
      ]
    },
    {
      "id": 18,
      "label": "return False",
      "successors": [
        20
      ]
    },
    {
      "id": 19,
      "label": "if not graph_coloring_util(0):",
      "successors": [
        18
      ]
    },
    {
      "id": 20,
      "label": "return colors",
      "successors": []
    },
    {
      "id": 21,
      "label": "graph_coloring(graph, m)",
      "successors": []
    }
  ]
}