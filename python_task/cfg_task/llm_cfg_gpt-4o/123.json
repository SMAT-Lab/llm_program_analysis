{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 418,
  "functions": [],
  "classes": [
    {
      "name": "Slant3DCreateOrderBlock",
      "type": "class",
      "start_line": 22,
      "end_line": 95,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 44,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"f73007d6-f48f-4aaf-9e6b-6883998a09b4\",\n            description=\"Create a new print order\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"order_number\": \"TEST-001\",\n                \"customer\": {\n                    \"name\": \"John Doe\",\n                    \"email\": \"john@example.com\",\n                    \"phone\": \"123-456-7890\",\n                    \"address\": \"123 Test St\",\n                    \"city\": \"Test City\",\n                    \"state\": \"TS\",\n                    \"zip\": \"12345\",\n                },\n                \"items\": [\n                    {\n                        \"file_url\": \"https://example.com/model.stl\",\n                        \"quantity\": \"1\",\n                        \"color\": \"black\",\n                        \"profile\": \"PLA\",\n                    }\n                ],\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"order_id\", \"314144241\")],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\"orderId\": \"314144241\"},\n                \"_convert_to_color\": lambda *args, **kwargs: \"black\",\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "super().__init__(id=\"f73007d6-f48f-4aaf-9e6b-6883998a09b4\", description=\"Create a new print order\", input_schema=self.Input, output_schema=self.Output, test_input={ \"credentials\": TEST_CREDENTIALS_INPUT, \"order_number\": \"TEST-001\", \"customer\": { \"name\": \"John Doe\", \"email\": \"john@example.com\", \"phone\": \"123-456-7890\", \"address\": \"123 Test St\", \"city\": \"Test City\", \"state\": \"TS\", \"zip\": \"12345\", }, \"items\": [ { \"file_url\": \"https://example.com/model.stl\", \"quantity\": \"1\", \"color\": \"black\", \"profile\": \"PLA\", } ], }, test_credentials=TEST_CREDENTIALS, test_output=[(\"order_id\", \"314144241\")], test_mock={ \"_make_request\": lambda *args, **kwargs: {\"orderId\": \"314144241\"}, \"_convert_to_color\": lambda *args, **kwargs: \"black\", },)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 79,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            order_data = self._format_order_data(\n                input_data.customer,\n                input_data.order_number,\n                input_data.items,\n                credentials.api_key.get_secret_value(),\n            )\n            result = self._make_request(\n                \"POST\", \"order\", credentials.api_key.get_secret_value(), json=order_data\n            )\n            yield \"order_id\", result[\"orderId\"]\n        except Exception as e:\n            yield \"error\", str(e)\n            raise",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2,
                4
              ]
            },
            {
              "id": 2,
              "label": "order_data = self._format_order_data(\n input_data.customer,\n input_data.order_number,\n input_data.items,\n credentials.api_key.get_secret_value(),\n )",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "result = self._make_request(\n \"POST\", \"order\", credentials.api_key.get_secret_value(), json=order_data\n )\nyield \"order_id\", result[\"orderId\"]",
              "successors": []
            },
            {
              "id": 4,
              "label": "except Exception as e:",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "yield \"error\", str(e)\nraise",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 25,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        order_number: str = SchemaField(\n            description=\"Your custom order number (or leave blank for a random one)\",\n            default_factory=lambda: str(uuid.uuid4()),\n        )\n        customer: CustomerDetails = SchemaField(\n            description=\"Customer details for where to ship the item\",\n            advanced=False,\n        )\n        items: List[OrderItem] = SchemaField(\n            description=\"List of items to print\",\n            advanced=False,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "order_number: str = SchemaField(description=\"Your custom order number (or leave blank for a random one)\", default_factory=lambda: str(uuid.uuid4()))",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "customer: CustomerDetails = SchemaField(description=\"Customer details for where to ship the item\", advanced=False)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "items: List[OrderItem] = SchemaField(description=\"List of items to print\", advanced=False)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 40,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        order_id: str = SchemaField(description=\"Slant3D order ID\")\n        error: str = SchemaField(description=\"Error message if order failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "order_id: str = SchemaField(description=\"Slant3D order ID\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if order failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Slant3DCreateOrderBlock(Slant3DBlockBase):\n    \"\"\"Block for creating new orders\"\"\"\n\n        )\n\n        error: str = SchemaField(description=\"Error message if order failed\")\n\n        )\n\n            raise",
      "blocks": [
        {
          "id": 1,
          "label": "class Slant3DCreateOrderBlock(Slant3DBlockBase):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "\"\"\"Block for creating new orders\"\"\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "error: str = SchemaField(description=\"Error message if order failed\")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "raise",
          "successors": []
        }
      ]
    },
    {
      "name": "Slant3DEstimateOrderBlock",
      "type": "class",
      "start_line": 98,
      "end_line": 186,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 122,
          "end_line": 163,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"bf8823d6-b42a-48c7-b558-d7c117f2ae85\",\n            description=\"Get order cost estimate\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"order_number\": \"TEST-001\",\n                \"customer\": {\n                    \"name\": \"John Doe\",\n                    \"email\": \"john@example.com\",\n                    \"phone\": \"123-456-7890\",\n                    \"address\": \"123 Test St\",\n                    \"city\": \"Test City\",\n                    \"state\": \"TS\",\n                    \"zip\": \"12345\",\n                },\n                \"items\": [\n                    {\n                        \"file_url\": \"https://example.com/model.stl\",\n                        \"quantity\": \"1\",\n                        \"color\": \"black\",\n                        \"profile\": \"PLA\",\n                    }\n                ],\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"total_price\", 9.31),\n                (\"shipping_cost\", 5.56),\n                (\"printing_cost\", 3.75),\n            ],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"totalPrice\": 9.31,\n                    \"shippingCost\": 5.56,\n                    \"printingCost\": 3.75,\n                },\n                \"_convert_to_color\": lambda *args, **kwargs: \"black\",\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 165,
          "end_line": 186,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        order_data = self._format_order_data(\n            input_data.customer,\n            input_data.order_number,\n            input_data.items,\n            credentials.api_key.get_secret_value(),\n        )\n        try:\n            result = self._make_request(\n                \"POST\",\n                \"order/estimate\",\n                credentials.api_key.get_secret_value(),\n                json=order_data,\n            )\n            yield \"total_price\", result[\"totalPrice\"]\n            yield \"shipping_cost\", result[\"shippingCost\"]\n            yield \"printing_cost\", result[\"printingCost\"]\n        except baserequests.HTTPError as e:\n            yield \"error\", str(f\"Error estimating order: {e} {e.response.text}\")\n            raise",
          "blocks": [
            {
              "id": 1,
              "label": "order_data = self._format_order_data(...)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "try:",
              "successors": [
                3,
                5
              ]
            },
            {
              "id": 3,
              "label": "result = self._make_request(...)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "yield \"total_price\", result[\"totalPrice\"]\nyield \"shipping_cost\", result[\"shippingCost\"]\nyield \"printing_cost\", result[\"printingCost\"]",
              "successors": []
            },
            {
              "id": 5,
              "label": "except baserequests.HTTPError as e:",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "yield \"error\", str(f\"Error estimating order: {e} {e.response.text}\")\nraise",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 101,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        order_number: str = SchemaField(\n            description=\"Your custom order number (or leave blank for a random one)\",\n            default_factory=lambda: str(uuid.uuid4()),\n        )\n        customer: CustomerDetails = SchemaField(\n            description=\"Customer details for where to ship the item\",\n            advanced=False,\n        )\n        items: List[OrderItem] = SchemaField(\n            description=\"List of items to print\",\n            advanced=False,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2,
                3,
                4,
                5
              ]
            },
            {
              "id": 2,
              "label": "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "order_number: str = SchemaField(description=\"Your custom order number (or leave blank for a random one)\", default_factory=lambda: str(uuid.uuid4()))",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "customer: CustomerDetails = SchemaField(description=\"Customer details for where to ship the item\", advanced=False)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "items: List[OrderItem] = SchemaField(description=\"List of items to print\", advanced=False)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 116,
          "end_line": 120,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        total_price: float = SchemaField(description=\"Total price in USD\")\n        shipping_cost: float = SchemaField(description=\"Shipping cost\")\n        printing_cost: float = SchemaField(description=\"Printing cost\")\n        error: str = SchemaField(description=\"Error message if estimation failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "total_price: float = SchemaField(description=\"Total price in USD\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "shipping_cost: float = SchemaField(description=\"Shipping cost\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "printing_cost: float = SchemaField(description=\"Printing cost\")",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "error: str = SchemaField(description=\"Error message if estimation failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Slant3DEstimateOrderBlock(Slant3DBlockBase):\n    \"\"\"Block for getting order cost estimates\"\"\"\n\n        )\n\n        error: str = SchemaField(description=\"Error message if estimation failed\")\n\n        )\n\n            raise",
      "blocks": [
        {
          "id": 1,
          "label": "class Slant3DEstimateOrderBlock(Slant3DBlockBase):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "\"\"\"Block for getting order cost estimates\"\"\"\nerror: str = SchemaField(description=\"Error message if estimation failed\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "raise",
          "successors": []
        }
      ]
    },
    {
      "name": "Slant3DEstimateShippingBlock",
      "type": "class",
      "start_line": 189,
      "end_line": 269,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 211,
          "end_line": 247,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"00aae2a1-caf6-4a74-8175-39a0615d44e1\",\n            description=\"Get shipping cost estimate\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"order_number\": \"TEST-001\",\n                \"customer\": {\n                    \"name\": \"John Doe\",\n                    \"email\": \"john@example.com\",\n                    \"phone\": \"123-456-7890\",\n                    \"address\": \"123 Test St\",\n                    \"city\": \"Test City\",\n                    \"state\": \"TS\",\n                    \"zip\": \"12345\",\n                },\n                \"items\": [\n                    {\n                        \"file_url\": \"https://example.com/model.stl\",\n                        \"quantity\": \"1\",\n                        \"color\": \"black\",\n                        \"profile\": \"PLA\",\n                    }\n                ],\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"shipping_cost\", 4.81), (\"currency_code\", \"usd\")],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"shippingCost\": 4.81,\n                    \"currencyCode\": \"usd\",\n                },\n                \"_convert_to_color\": lambda *args, **kwargs: \"black\",\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 249,
          "end_line": 269,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            order_data = self._format_order_data(\n                input_data.customer,\n                input_data.order_number,\n                input_data.items,\n                credentials.api_key.get_secret_value(),\n            )\n            result = self._make_request(\n                \"POST\",\n                \"order/estimateShipping\",\n                credentials.api_key.get_secret_value(),\n                json=order_data,\n            )\n            yield \"shipping_cost\", result[\"shippingCost\"]\n            yield \"currency_code\", result[\"currencyCode\"]\n        except Exception as e:\n            yield \"error\", str(e)\n            raise",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2,
                5
              ]
            },
            {
              "id": 2,
              "label": "order_data = self._format_order_data(...)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "result = self._make_request(...)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "yield 'shipping_cost', result['shippingCost']\nyield 'currency_code', result['currencyCode']",
              "successors": []
            },
            {
              "id": 5,
              "label": "except Exception as e:",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "yield 'error', str(e)\nraise",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 192,
          "end_line": 204,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        order_number: str = SchemaField(\n            description=\"Your custom order number (or leave blank for a random one)\",\n            default_factory=lambda: str(uuid.uuid4()),\n        )\n        customer: CustomerDetails = SchemaField(\n            description=\"Customer details for where to ship the item\"\n        )\n        items: List[OrderItem] = SchemaField(\n            description=\"List of items to print\",\n            advanced=False,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "order_number: str = SchemaField(...)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "customer: CustomerDetails = SchemaField(...)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "items: List[OrderItem] = SchemaField(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 206,
          "end_line": 209,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        shipping_cost: float = SchemaField(description=\"Estimated shipping cost\")\n        currency_code: str = SchemaField(description=\"Currency code (e.g., 'usd')\")\n        error: str = SchemaField(description=\"Error message if estimation failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "shipping_cost: float = SchemaField(description=\"Estimated shipping cost\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "currency_code: str = SchemaField(description=\"Currency code (e.g., 'usd')\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "error: str = SchemaField(description=\"Error message if estimation failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Slant3DEstimateShippingBlock(Slant3DBlockBase):\n    \"\"\"Block for getting shipping cost estimates\"\"\"\n\n        )\n\n        error: str = SchemaField(description=\"Error message if estimation failed\")\n\n        )\n\n            raise",
      "blocks": [
        {
          "id": 1,
          "label": "class Slant3DEstimateShippingBlock(Slant3DBlockBase):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "\"\"\"Block for getting shipping cost estimates\"\"\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "error: str = SchemaField(description=\"Error message if estimation failed\")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "raise",
          "successors": []
        }
      ]
    },
    {
      "name": "Slant3DGetOrdersBlock",
      "type": "class",
      "start_line": 272,
      "end_line": 325,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 282,
          "end_line": 313,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"42283bf5-8a32-4fb4-92a2-60a9ea48e105\",\n            description=\"Get all orders for the account\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            # This block is disabled for cloud hosted because it allows access to all orders for the account\n            disabled=settings.Settings().config.behave_as == BehaveAs.CLOUD,\n            test_input={\"credentials\": TEST_CREDENTIALS_INPUT},\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"orders\",\n                    [\n                        \"1234567890\",\n                    ],\n                )\n            ],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"ordersData\": [\n                        {\n                            \"orderId\": 1234567890,\n                            \"orderTimestamp\": {\n                                \"_seconds\": 1719510986,\n                                \"_nanoseconds\": 710000000,\n                            },\n                        }\n                    ]\n                }\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(\n            id=\"42283bf5-8a32-4fb4-92a2-60a9ea48e105\",\n            description=\"Get all orders for the account\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            # This block is disabled for cloud hosted because it allows access to all orders for the account\n            disabled=settings.Settings().config.behave_as == BehaveAs.CLOUD,\n            test_input={\"credentials\": TEST_CREDENTIALS_INPUT},\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"orders\",\n                    [\n                        \"1234567890\",\n                    ],\n                )\n            ],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"ordersData\": [\n                        {\n                            \"orderId\": 1234567890,\n                            \"orderTimestamp\": {\n                                \"_seconds\": 1719510986,\n                                \"_nanoseconds\": 710000000,\n                            },\n                        }\n                    ]\n                }\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 315,
          "end_line": 325,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            result = self._make_request(\n                \"GET\", \"order\", credentials.api_key.get_secret_value()\n            )\n            yield \"orders\", [str(order[\"orderId\"]) for order in result[\"ordersData\"]]\n        except Exception as e:\n            yield \"error\", str(e)\n            raise",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2,
                4
              ]
            },
            {
              "id": 2,
              "label": "result = self._make_request(\n    \"GET\", \"order\", credentials.api_key.get_secret_value()\n)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield \"orders\", [str(order[\"orderId\"]) for order in result[\"ordersData\"]]",
              "successors": []
            },
            {
              "id": 4,
              "label": "except Exception as e:",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "yield \"error\", str(e)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "raise",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 275,
          "end_line": 276,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 278,
          "end_line": 280,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        orders: List[str] = SchemaField(description=\"List of orders with their details\")\n        error: str = SchemaField(description=\"Error message if request failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "orders: List[str] = SchemaField(description=\"List of orders with their details\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if request failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Slant3DGetOrdersBlock(Slant3DBlockBase):\n    \"\"\"Block for retrieving all orders\"\"\"\n\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n\n        error: str = SchemaField(description=\"Error message if request failed\")\n\n        )\n\n            raise",
      "blocks": [
        {
          "id": 1,
          "label": "class Slant3DGetOrdersBlock(Slant3DBlockBase):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "\"\"\"Block for retrieving all orders\"\"\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "error: str = SchemaField(description=\"Error message if request failed\")",
          "successors": []
        }
      ]
    },
    {
      "name": "Slant3DTrackingBlock",
      "type": "class",
      "start_line": 328,
      "end_line": 375,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 342,
          "end_line": 360,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"dd7c0293-c5af-4551-ba3e-fc162fb1fb89\",\n            description=\"Track order status and shipping\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"order_id\": \"314144241\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"awaiting_shipment\"), (\"tracking_numbers\", [])],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"status\": \"awaiting_shipment\",\n                    \"trackingNumbers\": [],\n                }\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "super().__init__(id= ... , description= ... , input_schema=self.Input, output_schema=self.Output, test_input= ... , test_credentials=TEST_CREDENTIALS, test_output= ... , test_mock= ... )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 362,
          "end_line": 375,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            result = self._make_request(\n                \"GET\",\n                f\"order/{input_data.order_id}/get-tracking\",\n                credentials.api_key.get_secret_value(),\n            )\n            yield \"status\", result[\"status\"]\n            yield \"tracking_numbers\", result[\"trackingNumbers\"]\n        except Exception as e:\n            yield \"error\", str(e)\n            raise",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2,
                4
              ]
            },
            {
              "id": 2,
              "label": "result = self._make_request(\"GET\", f\"order/{input_data.order_id}/get-tracking\", credentials.api_key.get_secret_value())",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield \"status\", result[\"status\"]\nyield \"tracking_numbers\", result[\"trackingNumbers\"]",
              "successors": []
            },
            {
              "id": 4,
              "label": "except Exception as e:",
              "successors": [
                5,
                6
              ]
            },
            {
              "id": 5,
              "label": "yield \"error\", str(e)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "raise",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 331,
          "end_line": 333,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        order_id: str = SchemaField(description=\"Slant3D order ID to track\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "order_id: str = SchemaField(description=\"Slant3D order ID to track\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 335,
          "end_line": 340,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Order status\")\n        tracking_numbers: List[str] = SchemaField(\n            description=\"List of tracking numbers\"\n        )\n        error: str = SchemaField(description=\"Error message if tracking failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "status: str = SchemaField(description=\"Order status\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "tracking_numbers: List[str] = SchemaField(description=\"List of tracking numbers\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "error: str = SchemaField(description=\"Error message if tracking failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Slant3DTrackingBlock(Slant3DBlockBase):\n    \"\"\"Block for tracking order status and shipping\"\"\"\n\n        order_id: str = SchemaField(description=\"Slant3D order ID to track\")\n\n        error: str = SchemaField(description=\"Error message if tracking failed\")\n\n        )\n\n            raise",
      "blocks": [
        {
          "id": 1,
          "label": "class Slant3DTrackingBlock(Slant3DBlockBase):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "\"\"\"Block for tracking order status and shipping\"\"\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "order_id: str = SchemaField(description=\"Slant3D order ID to track\")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "error: str = SchemaField(description=\"Error message if tracking failed\")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "raise",
          "successors": []
        }
      ]
    },
    {
      "name": "Slant3DCancelOrderBlock",
      "type": "class",
      "start_line": 378,
      "end_line": 418,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 389,
          "end_line": 404,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"54de35e1-407f-450b-b5fa-3b5e2eba8185\",\n            description=\"Cancel an existing order\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"order_id\": \"314144241\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Order cancelled\")],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\"status\": \"Order cancelled\"}\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(\n                id=\"54de35e1-407f-450b-b5fa-3b5e2eba8185\",\n                description=\"Cancel an existing order\",\n                input_schema=self.Input,\n                output_schema=self.Output,\n                test_input={\n                    \"credentials\": TEST_CREDENTIALS_INPUT,\n                    \"order_id\": \"314144241\",\n                },\n                test_credentials=TEST_CREDENTIALS,\n                test_output=[(\"status\", \"Order cancelled\")],\n                test_mock={\n                    \"_make_request\": lambda *args, **kwargs: {\"status\": \"Order cancelled\"}\n                }\n            )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 406,
          "end_line": 418,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            result = self._make_request(\n                \"DELETE\",\n                f\"order/{input_data.order_id}\",\n                credentials.api_key.get_secret_value(),\n            )\n            yield \"status\", result[\"status\"]\n        except Exception as e:\n            yield \"error\", str(e)\n            raise",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2,
                4
              ]
            },
            {
              "id": 2,
              "label": "result = self._make_request(\"DELETE\", f\"order/{input_data.order_id}\", credentials.api_key.get_secret_value())\nyield \"status\", result[\"status\"]",
              "successors": [
                5
              ]
            },
            {
              "id": 3,
              "label": "except Exception as e:",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "yield \"error\", str(e)\nraise",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "end of function",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 381,
          "end_line": 383,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        order_id: str = SchemaField(description=\"Slant3D order ID to cancel\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "order_id: str = SchemaField(description=\"Slant3D order ID to cancel\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 385,
          "end_line": 387,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Cancellation status message\")\n        error: str = SchemaField(description=\"Error message if cancellation failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "status: str = SchemaField(description=\"Cancellation status message\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if cancellation failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Slant3DCancelOrderBlock(Slant3DBlockBase):\n    \"\"\"Block for canceling orders\"\"\"\n\n        order_id: str = SchemaField(description=\"Slant3D order ID to cancel\")\n\n        error: str = SchemaField(description=\"Error message if cancellation failed\")\n\n        )\n\n            raise",
      "blocks": [
        {
          "id": 1,
          "label": "class Slant3DCancelOrderBlock(Slant3DBlockBase):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "\"\"\"Block for canceling orders\"\"\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "order_id: str = SchemaField(description=\"Slant3D order ID to cancel\")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "error: str = SchemaField(description=\"Error message if cancellation failed\")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "raise",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import uuid\nfrom typing import List\n\nimport requests as baserequests\n\nfrom backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField\nfrom backend.util import settings\nfrom backend.util.settings import BehaveAs\n\nfrom ._api import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    CustomerDetails,\n    OrderItem,\n    Slant3DCredentialsField,\n    Slant3DCredentialsInput,\n)\nfrom .base import Slant3DBlockBase\n\n\n            raise\n\n\n            raise\n\n\n            raise\n\n\n            raise\n\n\n            raise\n\n\n            raise",
  "blocks": [
    {
      "id": 1,
      "label": "import uuid\nfrom typing import List\n\nimport requests as baserequests\n\nfrom backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField\nfrom backend.util import settings\nfrom backend.util.settings import BehaveAs\n\nfrom ._api import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    CustomerDetails,\n    OrderItem,\n    Slant3DCredentialsField,\n    Slant3DCredentialsInput,\n)\nfrom .base import Slant3DBlockBase",
      "successors": []
    },
    {
      "id": 2,
      "label": "raise",
      "successors": []
    }
  ]
}