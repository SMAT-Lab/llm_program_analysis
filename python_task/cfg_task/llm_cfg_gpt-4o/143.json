{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 153,
  "functions": [
    {
      "name": "launch_darkly_context",
      "type": "function",
      "start_line": 31,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": "def launch_darkly_context():\n    if settings.config.app_env != backend.util.settings.AppEnvironment.LOCAL:\n        initialize_launchdarkly()\n        try:\n            yield\n        finally:\n            shutdown_launchdarkly()\n    else:\n        yield",
      "blocks": [
        {
          "id": 1,
          "label": "if settings.config.app_env != backend.util.settings.AppEnvironment.LOCAL:",
          "successors": [
            2,
            5
          ]
        },
        {
          "id": 2,
          "label": "initialize_launchdarkly()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "try:",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "yield",
          "successors": [
            6
          ]
        },
        {
          "id": 5,
          "label": "else:",
          "successors": [
            4
          ]
        },
        {
          "id": 6,
          "label": "finally:",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "shutdown_launchdarkly()",
          "successors": []
        }
      ]
    },
    {
      "name": "lifespan_context",
      "type": "function",
      "start_line": 43,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": "async def lifespan_context(app: fastapi.FastAPI):\n    await backend.data.db.connect()\n    await backend.data.block.initialize_blocks()\n    await backend.data.user.migrate_and_encrypt_user_integrations()\n    await backend.data.graph.fix_llm_provider_credentials()\n    with launch_darkly_context():\n        yield\n    await backend.data.db.disconnect()",
      "blocks": [
        {
          "id": 1,
          "label": "await backend.data.db.connect()",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "await backend.data.block.initialize_blocks()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "await backend.data.user.migrate_and_encrypt_user_integrations()",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "await backend.data.graph.fix_llm_provider_credentials()",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "with launch_darkly_context():",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 6,
          "label": "yield",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "await backend.data.db.disconnect()",
          "successors": []
        }
      ]
    },
    {
      "name": "handle_internal_http_error",
      "type": "function",
      "start_line": 72,
      "end_line": 84,
      "functions": [
        {
          "name": "handler",
          "type": "function",
          "start_line": 73,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": "    def handler(request: fastapi.Request, exc: Exception):\n        if log_error:\n            logger.exception(f\"{request.method} {request.url.path} failed: {exc}\")\n        return fastapi.responses.JSONResponse(\n            content={\n                \"message\": f\"{request.method} {request.url.path} failed\",\n                \"detail\": str(exc),\n            },\n            status_code=status_code,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "if log_error:",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "logger.exception(f\"{request.method} {request.url.path} failed: {exc}\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "return fastapi.responses.JSONResponse(content={\"message\": f\"{request.method} {request.url.path} failed\",\"detail\": str(exc),},status_code=status_code,)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def handle_internal_http_error(status_code: int = 500, log_error: bool = True):\n        )\n\n    return handler",
      "blocks": [
        {
          "id": 1,
          "label": "def handle_internal_http_error(status_code: int = 500, log_error: bool = True):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if log_error:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "print(f\"Error with status code {status_code}\")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "def handler(status_code, log_error):",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "return handler",
          "successors": []
        }
      ]
    },
    {
      "name": "health",
      "type": "function",
      "start_line": 99,
      "end_line": 100,
      "functions": [],
      "classes": [],
      "simplified_code": "async def health():\n    return {\"status\": \"healthy\"}",
      "blocks": [
        {
          "id": 1,
          "label": "async def health():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return {\"status\": \"healthy\"}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "AgentServer",
      "type": "class",
      "start_line": 103,
      "end_line": 153,
      "functions": [
        {
          "name": "run",
          "type": "function",
          "start_line": 104,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self):\n        server_app = starlette.middleware.cors.CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],  # Allows all methods\n            allow_headers=[\"*\"],  # Allows all headers\n        )\n        uvicorn.run(\n            server_app,\n            host=backend.util.settings.Config().agent_api_host,\n            port=backend.util.settings.Config().agent_api_port,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "server_app = starlette.middleware.cors.CORSMiddleware(...)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "uvicorn.run(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_execute_graph",
          "type": "function",
          "start_line": 119,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def test_execute_graph(\n        graph_id: str, node_input: dict[typing.Any, typing.Any], user_id: str\n    ):\n        return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)",
          "blocks": [
            {
              "id": 1,
              "label": "async def test_execute_graph( graph_id: str, node_input: dict[typing.Any, typing.Any], user_id: str ):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_create_graph",
          "type": "function",
          "start_line": 125,
          "end_line": 129,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def test_create_graph(\n        create_graph: backend.server.routers.v1.CreateGraph,\n        user_id: str,\n    ):\n        return await backend.server.routers.v1.create_new_graph(create_graph, user_id)",
          "blocks": [
            {
              "id": 1,
              "label": "async def test_create_graph(create_graph: backend.server.routers.v1.CreateGraph, user_id: str):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return await backend.server.routers.v1.create_new_graph(create_graph, user_id)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_get_graph_run_status",
          "type": "function",
          "start_line": 132,
          "end_line": 138,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def test_get_graph_run_status(graph_exec_id: str, user_id: str):\n        execution = await backend.data.graph.get_execution(\n            user_id=user_id, execution_id=graph_exec_id\n        )\n        if not execution:\n            raise ValueError(f\"Execution {graph_exec_id} not found\")\n        return execution.status",
          "blocks": [
            {
              "id": 1,
              "label": "execution = await backend.data.graph.get_execution(user_id=user_id, execution_id=graph_exec_id)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if not execution:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "raise ValueError(f\"Execution {graph_exec_id} not found\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "return execution.status",
              "successors": []
            }
          ]
        },
        {
          "name": "test_get_graph_run_node_execution_results",
          "type": "function",
          "start_line": 141,
          "end_line": 146,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def test_get_graph_run_node_execution_results(\n        graph_id: str, graph_exec_id: str, user_id: str\n    ):\n        return await backend.server.routers.v1.get_graph_run_node_execution_results(\n            graph_id, graph_exec_id, user_id\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "async def test_get_graph_run_node_execution_results(\n    graph_id: str, graph_exec_id: str, user_id: str\n):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return await backend.server.routers.v1.get_graph_run_node_execution_results(\n    graph_id, graph_exec_id, user_id\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_delete_graph",
          "type": "function",
          "start_line": 149,
          "end_line": 150,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def test_delete_graph(graph_id: str, user_id: str):\n        return await backend.server.routers.v1.delete_graph(graph_id, user_id)",
          "blocks": [
            {
              "id": 1,
              "label": "async def test_delete_graph(graph_id: str, user_id: str):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return await backend.server.routers.v1.delete_graph(graph_id, user_id)",
              "successors": []
            }
          ]
        },
        {
          "name": "set_test_dependency_overrides",
          "type": "function",
          "start_line": 152,
          "end_line": 153,
          "functions": [],
          "classes": [],
          "simplified_code": "    def set_test_dependency_overrides(self, overrides: dict):\n        app.dependency_overrides.update(overrides)",
          "blocks": [
            {
              "id": 1,
              "label": "def set_test_dependency_overrides(self, overrides: dict):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "app.dependency_overrides.update(overrides)",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class AgentServer(backend.util.service.AppProcess):\n        )\n\n    @staticmethod\n        return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)\n\n    @staticmethod\n        return await backend.server.routers.v1.create_new_graph(create_graph, user_id)\n\n    @staticmethod\n        return execution.status\n\n    @staticmethod\n        )\n\n    @staticmethod\n        return await backend.server.routers.v1.delete_graph(graph_id, user_id)\n\n        app.dependency_overrides.update(overrides)",
      "blocks": [
        {
          "id": 1,
          "label": "class AgentServer(backend.util.service.AppProcess):",
          "successors": [
            2,
            3,
            4,
            5,
            6
          ]
        },
        {
          "id": 2,
          "label": "@staticmethod\nreturn backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)",
          "successors": [
            7
          ]
        },
        {
          "id": 3,
          "label": "@staticmethod\nreturn await backend.server.routers.v1.create_new_graph(create_graph, user_id)",
          "successors": [
            7
          ]
        },
        {
          "id": 4,
          "label": "@staticmethod\nreturn execution.status",
          "successors": [
            7
          ]
        },
        {
          "id": 5,
          "label": "@staticmethod",
          "successors": [
            7
          ]
        },
        {
          "id": 6,
          "label": "@staticmethod\nreturn await backend.server.routers.v1.delete_graph(graph_id, user_id)",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "app.dependency_overrides.update(overrides)",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import contextlib\nimport logging\nimport typing\n\nimport fastapi\nimport fastapi.responses\nimport starlette.middleware.cors\nimport uvicorn\nfrom autogpt_libs.feature_flag.client import (\n    initialize_launchdarkly,\n    shutdown_launchdarkly,\n)\n\nimport backend.data.block\nimport backend.data.db\nimport backend.data.graph\nimport backend.data.user\nimport backend.server.routers.v1\nimport backend.server.v2.library.routes\nimport backend.server.v2.store.routes\nimport backend.util.service\nimport backend.util.settings\n\nsettings = backend.util.settings.Settings()\nlogger = logging.getLogger(__name__)\n\nlogging.getLogger(\"autogpt_libs\").setLevel(logging.INFO)\n\n\n@contextlib.contextmanager\n        yield\n\n\n@contextlib.asynccontextmanager\n    await backend.data.db.disconnect()\n\n\ndocs_url = (\n    \"/docs\"\n    if settings.config.app_env == backend.util.settings.AppEnvironment.LOCAL\n    else None\n)\n\napp = fastapi.FastAPI(\n    title=\"AutoGPT Agent Server\",\n    description=(\n        \"This server is used to execute agents that are created by the \"\n        \"AutoGPT system.\"\n    ),\n    summary=\"AutoGPT Agent Server\",\n    version=\"0.1\",\n    lifespan=lifespan_context,\n    docs_url=docs_url,\n)\n\n\n    return handler\n\n\napp.add_exception_handler(ValueError, handle_internal_http_error(400))\napp.add_exception_handler(Exception, handle_internal_http_error(500))\napp.include_router(backend.server.routers.v1.v1_router, tags=[\"v1\"], prefix=\"/api\")\napp.include_router(\n    backend.server.v2.store.routes.router, tags=[\"v2\"], prefix=\"/api/store\"\n)\napp.include_router(\n    backend.server.v2.library.routes.router, tags=[\"v2\"], prefix=\"/api/library\"\n)\n\n\n@app.get(path=\"/health\", tags=[\"health\"], dependencies=[])\n    return {\"status\": \"healthy\"}\n\n\n        app.dependency_overrides.update(overrides)",
  "blocks": [
    {
      "id": 1,
      "label": "import contextlib; import logging; import typing; import fastapi; import fastapi.responses; import starlette.middleware.cors; import uvicorn; from autogpt_libs.feature_flag.client import (initialize_launchdarkly, shutdown_launchdarkly,); import backend.data.block; import backend.data.db; import backend.data.graph; import backend.data.user; import backend.server.routers.v1; import backend.server.v2.library.routes; import backend.server.v2.store.routes; import backend.util.service; import backend.util.settings; settings = backend.util.settings.Settings(); logger = logging.getLogger(__name__); logging.getLogger(\"autogpt_libs\").setLevel(logging.INFO);",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "@contextlib.contextmanager\n        yield;",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "@contextlib.asynccontextmanager\n    await backend.data.db.disconnect();",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "docs_url = (\n    \"/docs\"\n    if settings.config.app_env == backend.util.settings.AppEnvironment.LOCAL\n    else None\n);",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "app = fastapi.FastAPI(\n    title=\"AutoGPT Agent Server\",\n    description=(\n        \"This server is used to execute agents that are created by the \"\n        \"AutoGPT system.\"\n    ),\n    summary=\"AutoGPT Agent Server\",\n    version=\"0.1\",\n    lifespan=lifespan_context,\n    docs_url=docs_url,\n);",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "app.add_exception_handler(ValueError, handle_internal_http_error(400)); app.add_exception_handler(Exception, handle_internal_http_error(500)); app.include_router(backend.server.routers.v1.v1_router, tags=[\"v1\"], prefix=\"/api\"); app.include_router(\n    backend.server.v2.store.routes.router, tags=[\"v2\"], prefix=\"/api/store\"\n); app.include_router(\n    backend.server.v2.library.routes.router, tags=[\"v2\"], prefix=\"/api/library\"\n);",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "@app.get(path=\"/health\", tags=[\"health\"], dependencies=[])\n    return {\"status\": \"healthy\"};",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "app.dependency_overrides.update(overrides);",
      "successors": []
    }
  ]
}