{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 254,
  "functions": [
    {
      "name": "DiscordCredentialsField",
      "type": "function",
      "start_line": 22,
      "end_line": 23,
      "functions": [],
      "classes": [],
      "simplified_code": "def DiscordCredentialsField() -> DiscordCredentials:\n    return CredentialsField(description=\"Discord bot token\")",
      "blocks": [
        {
          "id": 1,
          "label": "def DiscordCredentialsField() -> DiscordCredentials:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return CredentialsField(description=\"Discord bot token\")",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ReadDiscordMessagesBlock",
      "type": "class",
      "start_line": 41,
      "end_line": 161,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 56,
          "end_line": 79,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "run_bot",
          "type": "function",
          "start_line": 81,
          "end_line": 114,
          "functions": [
            {
              "name": "on_ready",
              "type": "function",
              "start_line": 92,
              "end_line": 93,
              "functions": [],
              "classes": [],
              "simplified_code": "        async def on_ready():\n            print(f\"Logged in as {client.user}\")",
              "blocks": [
                {
                  "id": 1,
                  "label": "async def on_ready():",
                  "successors": [
                    2
                  ]
                },
                {
                  "id": 2,
                  "label": "print(f\"Logged in as {client.user}\")",
                  "successors": []
                }
              ]
            },
            {
              "name": "on_message",
              "type": "function",
              "start_line": 96,
              "end_line": 112,
              "functions": [],
              "classes": [],
              "simplified_code": "        async def on_message(message):\n            if message.author == client.user:\n                return\n\n            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n\n            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n\n            await client.close()",
              "blocks": [
                {
                  "id": 1,
                  "label": "async def on_message(message):",
                  "successors": [
                    2
                  ]
                },
                {
                  "id": 2,
                  "label": "if message.author == client.user:\n    return",
                  "successors": [
                    3
                  ]
                },
                {
                  "id": 3,
                  "label": "self.output_data = message.content\nself.channel_name = message.channel.name\nself.username = message.author.name",
                  "successors": [
                    4
                  ]
                },
                {
                  "id": 4,
                  "label": "if message.attachments:",
                  "successors": [
                    5,
                    8
                  ]
                },
                {
                  "id": 5,
                  "label": "attachment = message.attachments[0]",
                  "successors": [
                    6
                  ]
                },
                {
                  "id": 6,
                  "label": "if attachment.filename.endswith((\".txt\", \".py\")):",
                  "successors": [
                    7,
                    8
                  ]
                },
                {
                  "id": 7,
                  "label": "async with aiohttp.ClientSession() as session:\n    async with session.get(attachment.url) as response:\n        file_content = await response.text()\n        self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"",
                  "successors": [
                    8
                  ]
                },
                {
                  "id": 8,
                  "label": "await client.close()",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "    async def run_bot(self, token: SecretStr):\n        intents = discord.Intents.default()\n        intents.message_content = True\n\n        client = discord.Client(intents=intents)\n\n        self.output_data = None\n        self.channel_name = None\n        self.username = None\n\n        @client.event\n            print(f\"Logged in as {client.user}\")\n\n        @client.event\n            await client.close()\n\n        await client.start(token.get_secret_value())",
          "blocks": [
            {
              "id": 1,
              "label": "intents = discord.Intents.default()",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "intents.message_content = True",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "client = discord.Client(intents=intents)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "self.output_data = None",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "self.channel_name = None",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "self.username = None",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "@client.event\ndef on_ready():\n    print(f\"Logged in as {client.user}\")",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "@client.event\ndef on_disconnect():\n    await client.close()",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "await client.start(token.get_secret_value())",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 116,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        while True:\n            for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value\n            break",
          "blocks": [
            {
              "id": 1,
              "label": "while True:",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "for output_name, output_value in self.__run(input_data, credentials):\n    yield output_name, output_value",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "break",
              "successors": []
            }
          ]
        },
        {
          "name": "__run",
          "type": "function",
          "start_line": 124,
          "end_line": 161,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")\n\n            if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n                raise ValueError(\"No message, channel name, or username received.\")\n\n            yield \"message_content\", self.output_data\n            yield \"channel_name\", self.channel_name\n            yield \"username\", self.username\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "loop = asyncio.get_event_loop()\nfuture = self.run_bot(credentials.api_key)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if isinstance(future, asyncio.Future):",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "future.set_result({...})",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "result = loop.run_until_complete(future)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "if isinstance(result, dict):",
              "successors": [
                7,
                8
              ]
            },
            {
              "id": 7,
              "label": "self.output_data = result.get(\"output_data\")\nself.channel_name = result.get(\"channel_name\")\nself.username = result.get(\"username\")",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "if self.output_data is None or self.channel_name is None or self.username is None:",
              "successors": [
                9,
                10
              ]
            },
            {
              "id": 9,
              "label": "raise ValueError(\"No message, channel name, or username received.\")",
              "successors": []
            },
            {
              "id": 10,
              "label": "yield \"message_content\", self.output_data\nyield \"channel_name\", self.channel_name\nyield \"username\", self.username",
              "successors": []
            },
            {
              "id": 11,
              "label": "except discord.errors.LoginFailure as login_err:",
              "successors": [
                12
              ]
            },
            {
              "id": 12,
              "label": "raise ValueError(f\"Login error occurred: {login_err}\")",
              "successors": []
            },
            {
              "id": 13,
              "label": "except Exception as e:",
              "successors": [
                14
              ]
            },
            {
              "id": 14,
              "label": "raise ValueError(f\"An error occurred: {e}\")",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 42,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\n    credentials: DiscordCredentials = DiscordCredentialsField()",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 45,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n        username: str = SchemaField(\n            description=\"The username of the user who sent the message\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "message_content: str = SchemaField(description=\"The content of the message received\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "channel_name: str = SchemaField(description=\"The name of the channel the message was received from\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "username: str = SchemaField(description=\"The username of the user who sent the message\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class ReadDiscordMessagesBlock(Block):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n\n        )\n\n        )\n\n        await client.start(token.get_secret_value())\n\n            break\n\n            raise ValueError(f\"An error occurred: {e}\")",
      "blocks": [
        {
          "id": 1,
          "label": "class ReadDiscordMessagesBlock(Block): credentials: DiscordCredentials = DiscordCredentialsField()",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "await client.start(token.get_secret_value())",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "break",
          "successors": []
        },
        {
          "id": 4,
          "label": "raise ValueError(f\"An error occurred: {e}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "SendDiscordMessageBlock",
      "type": "class",
      "start_line": 164,
      "end_line": 254,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 179,
          "end_line": 196,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\", input_schema=SendDiscordMessageBlock.Input, output_schema=SendDiscordMessageBlock.Output, description=\"Sends a message to a Discord channel using a bot token.\", categories={BlockCategory.SOCIAL}, test_input={\"channel_name\": \"general\", \"message_content\": \"Hello, Discord!\", \"credentials\": TEST_CREDENTIALS_INPUT, }, test_output=[(\"status\", \"Message sent\")], test_mock={ \"send_message\": lambda token, channel_name, message_content: asyncio.Future() }, test_credentials=TEST_CREDENTIALS, )",
              "successors": []
            }
          ]
        },
        {
          "name": "send_message",
          "type": "function",
          "start_line": 198,
          "end_line": 219,
          "functions": [
            {
              "name": "on_ready",
              "type": "function",
              "start_line": 204,
              "end_line": 217,
              "functions": [],
              "classes": [],
              "simplified_code": "        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n            for guild in client.guilds:\n                for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n\n            self.output_data = \"Channel not found\"\n            await client.close()",
              "blocks": [
                {
                  "id": 1,
                  "label": "async def on_ready():\nprint(f\"Logged in as {client.user}\")",
                  "successors": [
                    2
                  ]
                },
                {
                  "id": 2,
                  "label": "for guild in client.guilds:",
                  "successors": [
                    3,
                    5
                  ]
                },
                {
                  "id": 3,
                  "label": "for channel in guild.text_channels:",
                  "successors": [
                    4,
                    5
                  ]
                },
                {
                  "id": 4,
                  "label": "if channel.name == channel_name:",
                  "successors": [
                    6,
                    5
                  ]
                },
                {
                  "id": 5,
                  "label": "self.output_data = \"Channel not found\"\nawait client.close()",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "for chunk in self.chunk_message(message_content):\nawait channel.send(chunk)\nself.output_data = \"Message sent\"\nawait client.close()\nreturn",
                  "successors": []
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "    async def send_message(self, token: str, channel_name: str, message_content: str):\n        intents = discord.Intents.default()\n        intents.guilds = True  # Required for fetching guild/channel information\n        client = discord.Client(intents=intents)\n\n        @client.event\n            await client.close()\n\n        await client.start(token)",
          "blocks": [
            {
              "id": 1,
              "label": "intents = discord.Intents.default()",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "intents.guilds = True",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "client = discord.Client(intents=intents)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "await client.start(token)",
              "successors": []
            }
          ]
        },
        {
          "name": "chunk_message",
          "type": "function",
          "start_line": 221,
          "end_line": 223,
          "functions": [],
          "classes": [],
          "simplified_code": "    def chunk_message(self, message: str, limit: int = 2000) -> list:\n        \"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"\n        return [message[i : i + limit] for i in range(0, len(message), limit)]",
          "blocks": [
            {
              "id": 1,
              "label": "def chunk_message(self, message: str, limit: int = 2000) -> list:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "\"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "return [message[i : i + limit] for i in range(0, len(message), limit)]",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 225,
          "end_line": 254,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\"Message sent\")\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, str):\n                self.output_data = result\n\n            if self.output_data is None:\n                raise ValueError(\"No status message received.\")\n\n            yield \"status\", self.output_data\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2,
                11,
                12
              ]
            },
            {
              "id": 2,
              "label": "loop = asyncio.get_event_loop()\nfuture = self.send_message(\ncredentials.api_key.get_secret_value(),\ninput_data.channel_name,\ninput_data.message_content,\n)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if isinstance(future, asyncio.Future):",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "future.set_result(\"Message sent\")",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "result = loop.run_until_complete(future)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "if isinstance(result, str):",
              "successors": [
                7,
                8
              ]
            },
            {
              "id": 7,
              "label": "self.output_data = result",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "if self.output_data is None:",
              "successors": [
                9,
                10
              ]
            },
            {
              "id": 9,
              "label": "raise ValueError(\"No status message received.\")",
              "successors": []
            },
            {
              "id": 10,
              "label": "yield \"status\", self.output_data",
              "successors": []
            },
            {
              "id": 11,
              "label": "except discord.errors.LoginFailure as login_err:",
              "successors": [
                13
              ]
            },
            {
              "id": 12,
              "label": "except Exception as e:",
              "successors": [
                14
              ]
            },
            {
              "id": 13,
              "label": "raise ValueError(f\"Login error occurred: {login_err}\")",
              "successors": []
            },
            {
              "id": 14,
              "label": "raise ValueError(f\"An error occurred: {e}\")",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 165,
          "end_line": 172,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2,
                3,
                4
              ]
            },
            {
              "id": 2,
              "label": "credentials: DiscordCredentials = DiscordCredentialsField()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "message_content: str = SchemaField(description=\"The content of the message received\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "channel_name: str = SchemaField(description=\"The name of the channel the message was received from\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 174,
          "end_line": 177,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "status: str = SchemaField(description=\"The status of the operation (e.g., 'Message sent', 'Error')\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class SendDiscordMessageBlock(Block):\n        )\n\n        )\n\n        )\n\n        await client.start(token)\n\n        return [message[i : i + limit] for i in range(0, len(message), limit)]\n\n            raise ValueError(f\"An error occurred: {e}\")",
      "blocks": [
        {
          "id": 1,
          "label": "class SendDiscordMessageBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "await client.start(token)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return [message[i : i + limit] for i in range(0, len(message), limit)]",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "raise ValueError(f\"An error occurred: {e}\")",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import asyncio\nfrom typing import Literal\n\nimport aiohttp\nimport discord\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nDiscordCredentials = CredentialsMetaInput[\n    Literal[ProviderName.DISCORD], Literal[\"api_key\"]\n]\n\n\n    return CredentialsField(description=\"Discord bot token\")\n\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"discord\",\n    api_key=SecretStr(\"test_api_key\"),\n    title=\"Mock Discord API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n            raise ValueError(f\"An error occurred: {e}\")\n\n\n            raise ValueError(f\"An error occurred: {e}\")",
  "blocks": [
    {
      "id": 1,
      "label": "import asyncio",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from typing import Literal",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "import aiohttp",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "import discord",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from pydantic import SecretStr",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.data.model import (APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField)",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "from backend.integrations.providers import ProviderName",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "DiscordCredentials = CredentialsMetaInput[Literal[ProviderName.DISCORD], Literal['api_key']]",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "return CredentialsField(description='Discord bot token')",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "TEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='discord', api_key=SecretStr('test_api_key'), title='Mock Discord API key', expires_at=None)",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "TEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}",
      "successors": [
        13,
        14
      ]
    },
    {
      "id": 13,
      "label": "raise ValueError(f'An error occurred: {e}')",
      "successors": []
    },
    {
      "id": 14,
      "label": "raise ValueError(f'An error occurred: {e}')",
      "successors": []
    }
  ]
}