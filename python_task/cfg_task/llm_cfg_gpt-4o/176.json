{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 189,
  "functions": [
    {
      "name": "lifespan",
      "type": "function",
      "start_line": 23,
      "end_line": 27,
      "functions": [],
      "classes": [],
      "simplified_code": "async def lifespan(app: FastAPI):\n    manager = get_connection_manager()\n    fut = asyncio.create_task(event_broadcaster(manager))\n    fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))\n    yield",
      "blocks": [
        {
          "id": 1,
          "label": "manager = get_connection_manager()",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "fut = asyncio.create_task(event_broadcaster(manager))",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "yield",
          "successors": []
        }
      ]
    },
    {
      "name": "get_connection_manager",
      "type": "function",
      "start_line": 35,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_connection_manager():\n    global _connection_manager\n    if _connection_manager is None:\n        _connection_manager = ConnectionManager()\n    return _connection_manager",
      "blocks": [
        {
          "id": 1,
          "label": "def get_connection_manager():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "global _connection_manager",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "if _connection_manager is None:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "_connection_manager = ConnectionManager()",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "return _connection_manager",
          "successors": []
        }
      ]
    },
    {
      "name": "event_broadcaster",
      "type": "function",
      "start_line": 42,
      "end_line": 52,
      "functions": [],
      "classes": [],
      "simplified_code": "async def event_broadcaster(manager: ConnectionManager):\n    try:\n        redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n        async for event in event_queue.listen():\n            await manager.send_execution_result(event)\n    except Exception as e:\n        logger.exception(f\"Event broadcaster error: {e}\")\n        raise\n    finally:\n        redis.disconnect()",
      "blocks": [
        {
          "id": 1,
          "label": "redis.connect()",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "event_queue = AsyncRedisExecutionEventBus()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "async for event in event_queue.listen():",
          "successors": [
            4,
            6
          ]
        },
        {
          "id": 4,
          "label": "await manager.send_execution_result(event)",
          "successors": [
            3
          ]
        },
        {
          "id": 5,
          "label": "except Exception as e:",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "logger.exception(f'Event broadcaster error: {e}')",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "raise",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "finally:",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "redis.disconnect()",
          "successors": []
        }
      ]
    },
    {
      "name": "authenticate_websocket",
      "type": "function",
      "start_line": 55,
      "end_line": 73,
      "functions": [],
      "classes": [],
      "simplified_code": "async def authenticate_websocket(websocket: WebSocket) -> str:\n    if not settings.config.enable_auth:\n        return DEFAULT_USER_ID\n\n    token = websocket.query_params.get(\"token\")\n    if not token:\n        await websocket.close(code=4001, reason=\"Missing authentication token\")\n        return \"\"\n\n    try:\n        payload = parse_jwt_token(token)\n        user_id = payload.get(\"sub\")\n        if not user_id:\n            await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"\n        return user_id\n    except ValueError:\n        await websocket.close(code=4003, reason=\"Invalid token\")\n        return \"\"",
      "blocks": [
        {
          "id": 1,
          "label": "if not settings.config.enable_auth:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return DEFAULT_USER_ID",
          "successors": []
        },
        {
          "id": 3,
          "label": "token = websocket.query_params.get(\"token\")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "if not token:",
          "successors": [
            5,
            7
          ]
        },
        {
          "id": 5,
          "label": "await websocket.close(code=4001, reason=\"Missing authentication token\")",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "return \"\"",
          "successors": []
        },
        {
          "id": 7,
          "label": "try:",
          "successors": [
            8,
            12
          ]
        },
        {
          "id": 8,
          "label": "payload = parse_jwt_token(token)",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "user_id = payload.get(\"sub\")",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "if not user_id:",
          "successors": [
            11,
            13
          ]
        },
        {
          "id": 11,
          "label": "await websocket.close(code=4002, reason=\"Invalid token\")",
          "successors": [
            6
          ]
        },
        {
          "id": 12,
          "label": "except ValueError:",
          "successors": [
            14
          ]
        },
        {
          "id": 13,
          "label": "return user_id",
          "successors": []
        },
        {
          "id": 14,
          "label": "await websocket.close(code=4003, reason=\"Invalid token\")",
          "successors": [
            6
          ]
        }
      ]
    },
    {
      "name": "handle_subscribe",
      "type": "function",
      "start_line": 76,
      "end_line": 97,
      "functions": [],
      "classes": [],
      "simplified_code": "async def handle_subscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\n    if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "if not message.data:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error=\"Subscription data missing\").model_dump_json())",
          "successors": []
        },
        {
          "id": 3,
          "label": "ex_sub = ExecutionSubscription.model_validate(message.data)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "await manager.subscribe(ex_sub.graph_id, websocket)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "await websocket.send_text(WsMessage(method=Methods.SUBSCRIBE, success=True, channel=ex_sub.graph_id).model_dump_json())",
          "successors": []
        }
      ]
    },
    {
      "name": "handle_unsubscribe",
      "type": "function",
      "start_line": 100,
      "end_line": 121,
      "functions": [],
      "classes": [],
      "simplified_code": "async def handle_unsubscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\n    if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "if not message.data:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error=\"Subscription data missing\").model_dump_json())",
          "successors": []
        },
        {
          "id": 3,
          "label": "ex_sub = ExecutionSubscription.model_validate(message.data)\nawait manager.unsubscribe(ex_sub.graph_id, websocket)\nlogger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\nawait websocket.send_text(WsMessage(method=Methods.UNSUBSCRIBE, success=True, channel=ex_sub.graph_id).model_dump_json())",
          "successors": []
        }
      ]
    },
    {
      "name": "health",
      "type": "function",
      "start_line": 125,
      "end_line": 126,
      "functions": [],
      "classes": [],
      "simplified_code": "async def health():\n    return {\"status\": \"healthy\"}",
      "blocks": [
        {
          "id": 1,
          "label": "async def health():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return {\"status\": \"healthy\"}",
          "successors": []
        }
      ]
    },
    {
      "name": "websocket_router",
      "type": "function",
      "start_line": 130,
      "end_line": 172,
      "functions": [],
      "classes": [],
      "simplified_code": "async def websocket_router(\n    websocket: WebSocket, manager: ConnectionManager = Depends(get_connection_manager)\n):\n    user_id = await authenticate_websocket(websocket)\n    if not user_id:\n        return\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n\n            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue\n\n            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n\n            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n\n            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )\n\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug(\"WebSocket client disconnected\")",
      "blocks": [
        {
          "id": 1,
          "label": "async def websocket_router(websocket: WebSocket, manager: ConnectionManager = Depends(get_connection_manager)):\\n    user_id = await authenticate_websocket(websocket)",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return",
          "successors": []
        },
        {
          "id": 3,
          "label": "await manager.connect(websocket)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "while True:",
          "successors": [
            5,
            13
          ]
        },
        {
          "id": 5,
          "label": "data = await websocket.receive_text()\\nmessage = WsMessage.model_validate_json(data)",
          "successors": [
            6,
            8,
            10,
            12
          ]
        },
        {
          "id": 6,
          "label": "if message.method == Methods.HEARTBEAT:",
          "successors": [
            7,
            8
          ]
        },
        {
          "id": 7,
          "label": "await websocket.send_json({\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True})\\ncontinue",
          "successors": [
            4
          ]
        },
        {
          "id": 8,
          "label": "if message.method == Methods.SUBSCRIBE:",
          "successors": [
            9,
            10
          ]
        },
        {
          "id": 9,
          "label": "await handle_subscribe(websocket, manager, message)",
          "successors": [
            13
          ]
        },
        {
          "id": 10,
          "label": "elif message.method == Methods.UNSUBSCRIBE:",
          "successors": [
            11,
            12
          ]
        },
        {
          "id": 11,
          "label": "await handle_unsubscribe(websocket, manager, message)",
          "successors": [
            13
          ]
        },
        {
          "id": 12,
          "label": "elif message.method == Methods.ERROR:",
          "successors": [
            14,
            15
          ]
        },
        {
          "id": 13,
          "label": "logger.error(f\"WebSocket Error message received: {message.data}\")",
          "successors": [
            4
          ]
        },
        {
          "id": 14,
          "label": "logger.warning(f\"Unknown WebSocket message type {message.method} received: \" f\"{message.data}\")\\nawait websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error=\"Message type is not processed by the server\").model_dump_json())",
          "successors": [
            13
          ]
        },
        {
          "id": 15,
          "label": "except WebSocketDisconnect:",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "manager.disconnect(websocket)\\nlogger.debug(\"WebSocket client disconnected\")",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "WebsocketServer",
      "type": "class",
      "start_line": 175,
      "end_line": 189,
      "functions": [
        {
          "name": "run",
          "type": "function",
          "start_line": 176,
          "end_line": 189,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self):\n        logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")\n        server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n        uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "server_app = CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=[\"*\"], allow_headers=[\"*\"])",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "uvicorn.run(server_app, host=Config().websocket_server_host, port=Config().websocket_server_port)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class WebsocketServer(AppProcess):\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "class WebsocketServer(AppProcess):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import asyncio\nimport logging\nfrom contextlib import asynccontextmanager\n\nimport uvicorn\nfrom autogpt_libs.auth import parse_jwt_token\nfrom fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect\nfrom starlette.middleware.cors import CORSMiddleware\n\nfrom backend.data import redis\nfrom backend.data.execution import AsyncRedisExecutionEventBus\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import ExecutionSubscription, Methods, WsMessage\nfrom backend.util.service import AppProcess\nfrom backend.util.settings import AppEnvironment, Config, Settings\n\nlogger = logging.getLogger(__name__)\nsettings = Settings()\n\n\n@asynccontextmanager\n    yield\n\n\ndocs_url = \"/docs\" if settings.config.app_env == AppEnvironment.LOCAL else None\napp = FastAPI(lifespan=lifespan, docs_url=docs_url)\n_connection_manager = None\n\n\n    return _connection_manager\n\n\n        redis.disconnect()\n\n\n        return \"\"\n\n\n        )\n\n\n        )\n\n\n@app.get(\"/\")\n    return {\"status\": \"healthy\"}\n\n\n@app.websocket(\"/ws\")\n        logger.debug(\"WebSocket client disconnected\")\n\n\n        )",
  "blocks": [
    {
      "id": 1,
      "label": "import asyncio",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "import logging",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from contextlib import asynccontextmanager",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "import uvicorn",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from autogpt_libs.auth import parse_jwt_token",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from starlette.middleware.cors import CORSMiddleware",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "from backend.data import redis",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "from backend.data.execution import AsyncRedisExecutionEventBus",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "from backend.data.user import DEFAULT_USER_ID",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "from backend.server.conn_manager import ConnectionManager",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "from backend.server.model import ExecutionSubscription, Methods, WsMessage",
      "successors": [
        13
      ]
    },
    {
      "id": 13,
      "label": "from backend.util.service import AppProcess",
      "successors": [
        14
      ]
    },
    {
      "id": 14,
      "label": "from backend.util.settings import AppEnvironment, Config, Settings",
      "successors": [
        15
      ]
    },
    {
      "id": 15,
      "label": "logger = logging.getLogger(__name__)",
      "successors": [
        16
      ]
    },
    {
      "id": 16,
      "label": "settings = Settings()",
      "successors": [
        17
      ]
    },
    {
      "id": 17,
      "label": "docs_url = \"/docs\" if settings.config.app_env == AppEnvironment.LOCAL else None",
      "successors": [
        18
      ]
    },
    {
      "id": 18,
      "label": "app = FastAPI(lifespan=lifespan, docs_url=docs_url)",
      "successors": [
        19
      ]
    },
    {
      "id": 19,
      "label": "_connection_manager = None",
      "successors": [
        20
      ]
    },
    {
      "id": 20,
      "label": "return _connection_manager",
      "successors": [
        21
      ]
    },
    {
      "id": 21,
      "label": "redis.disconnect()",
      "successors": [
        22
      ]
    },
    {
      "id": 22,
      "label": "return \"\"",
      "successors": [
        23
      ]
    },
    {
      "id": 23,
      "label": "return {\"status\": \"healthy\"}",
      "successors": [
        24
      ]
    },
    {
      "id": 24,
      "label": "logger.debug(\"WebSocket client disconnected\")",
      "successors": []
    }
  ]
}