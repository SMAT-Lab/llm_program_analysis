{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 66,
  "functions": [],
  "classes": [
    {
      "name": "Node",
      "type": "class",
      "start_line": 1,
      "end_line": 5,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 3,
          "end_line": 5,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, results):\n        self.results = results\n        self.next = next",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, results):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.results = results\nself.next = next",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Node(object):\n\n        self.next = next",
      "blocks": [
        {
          "id": 1,
          "label": "class Node(object):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.next = next",
          "successors": []
        }
      ]
    },
    {
      "name": "LinkedList",
      "type": "class",
      "start_line": 8,
      "end_line": 21,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 10,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        self.head = None\n        self.tail = None",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.head = None\nself.tail = None",
              "successors": []
            }
          ]
        },
        {
          "name": "move_to_front",
          "type": "function",
          "start_line": 14,
          "end_line": 15,
          "functions": [],
          "classes": [],
          "simplified_code": "    def move_to_front(self, node):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def move_to_front(self, node):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        },
        {
          "name": "append_to_front",
          "type": "function",
          "start_line": 17,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    def append_to_front(self, node):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def append_to_front(self, node):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        },
        {
          "name": "remove_from_tail",
          "type": "function",
          "start_line": 20,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    def remove_from_tail(self):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def remove_from_tail(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "pass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class LinkedList(object):\n\n        self.tail = None\n\n        pass\n\n        pass\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class LinkedList(object):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.tail = None",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "pass",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "pass",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "pass",
          "successors": []
        }
      ]
    },
    {
      "name": "Cache",
      "type": "class",
      "start_line": 24,
      "end_line": 66,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 26,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}  # key: query, value: node\n        self.linked_list = LinkedList()",
          "blocks": [
            {
              "id": 1,
              "label": "self.MAX_SIZE = MAX_SIZE",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.size = 0",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "self.lookup = {}",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "self.linked_list = LinkedList()",
              "successors": []
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 32,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n        node = self.lookup.get(query)\n        if node is None:\n            return None\n        self.linked_list.move_to_front(node)\n        return node.results",
          "blocks": [
            {
              "id": 1,
              "label": "node = self.lookup.get(query)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if node is None:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "return None",
              "successors": []
            },
            {
              "id": 4,
              "label": "self.linked_list.move_to_front(node)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "return node.results",
              "successors": []
            }
          ]
        },
        {
          "name": "set",
          "type": "function",
          "start_line": 43,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "    def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.lookup.get(query)\n        if node is not None:\n            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)\n        else:\n            # Key does not exist in cache\n            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            # Add the new key and value\n            new_node = Node(results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
          "blocks": [
            {
              "id": 1,
              "label": "node = self.lookup.get(query)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if node is not None:",
              "successors": [
                3,
                6
              ]
            },
            {
              "id": 3,
              "label": "node.results = results",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "self.linked_list.move_to_front(node)",
              "successors": [
                12
              ]
            },
            {
              "id": 6,
              "label": "if self.size == self.MAX_SIZE:",
              "successors": [
                7,
                10
              ]
            },
            {
              "id": 7,
              "label": "self.lookup.pop(self.linked_list.tail.query, None)",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "self.linked_list.remove_from_tail()",
              "successors": [
                11
              ]
            },
            {
              "id": 10,
              "label": "self.size += 1",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "new_node = Node(results)",
              "successors": [
                12
              ]
            },
            {
              "id": 12,
              "label": "self.linked_list.append_to_front(new_node)",
              "successors": [
                13
              ]
            },
            {
              "id": 13,
              "label": "self.lookup[query] = new_node",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Cache(object):\n\n        self.linked_list = LinkedList()\n\n        return node.results\n\n            self.lookup[query] = new_node",
      "blocks": [
        {
          "id": 1,
          "label": "class Cache(object):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.linked_list = LinkedList()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return node.results",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "self.lookup[query] = new_node",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "        self.next = next\n\n\n        pass\n\n\n            self.lookup[query] = new_node",
  "blocks": [
    {
      "id": 1,
      "label": "self.next = next",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "pass",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "self.lookup[query] = new_node",
      "successors": []
    }
  ]
}