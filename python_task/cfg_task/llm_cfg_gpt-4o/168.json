{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 51,
  "functions": [],
  "classes": [
    {
      "name": "RateLimiter",
      "type": "class",
      "start_line": 9,
      "end_line": 51,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 10,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(\n        self,\n        redis_host: str = RATE_LIMIT_SETTINGS.redis_host,\n        redis_port: str = RATE_LIMIT_SETTINGS.redis_port,\n        redis_password: str = RATE_LIMIT_SETTINGS.redis_password,\n        requests_per_minute: int = RATE_LIMIT_SETTINGS.requests_per_minute,\n    ):\n        self.redis = Redis(\n            host=redis_host,\n            port=int(redis_port),\n            password=redis_password,\n            decode_responses=True,\n        )\n        self.window = 60\n        self.max_requests = requests_per_minute",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, redis_host: str = RATE_LIMIT_SETTINGS.redis_host, redis_port: str = RATE_LIMIT_SETTINGS.redis_port, redis_password: str = RATE_LIMIT_SETTINGS.redis_password, requests_per_minute: int = RATE_LIMIT_SETTINGS.requests_per_minute):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.redis = Redis(host=redis_host, port=int(redis_port), password=redis_password, decode_responses=True)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "self.window = 60",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "self.max_requests = requests_per_minute",
              "successors": []
            }
          ]
        },
        {
          "name": "check_rate_limit",
          "type": "function",
          "start_line": 26,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def check_rate_limit(self, api_key_id: str) -> Tuple[bool, int, int]:\n        \"\"\"\n        Check if request is within rate limits.\n\n        Args:\n            api_key_id: The API key identifier to check\n\n        Returns:\n            Tuple of (is_allowed, remaining_requests, reset_time)\n        \"\"\"\n        now = time.time()\n        window_start = now - self.window\n        key = f\"ratelimit:{api_key_id}:1min\"\n\n        pipe = self.redis.pipeline()\n        pipe.zremrangebyscore(key, 0, window_start)\n        pipe.zadd(key, {str(now): now})\n        pipe.zcount(key, window_start, now)\n        pipe.expire(key, self.window)\n\n        _, _, request_count, _ = pipe.execute()\n\n        remaining = max(0, self.max_requests - request_count)\n        reset_time = int(now + self.window)\n\n        return request_count <= self.max_requests, remaining, reset_time",
          "blocks": [
            {
              "id": 1,
              "label": "async def check_rate_limit(self, api_key_id: str) -> Tuple[bool, int, int]:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "now = time.time()\nwindow_start = now - self.window\nkey = f\"ratelimit:{api_key_id}:1min\"",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "pipe = self.redis.pipeline()\npipe.zremrangebyscore(key, 0, window_start)\npipe.zadd(key, {str(now): now})\npipe.zcount(key, window_start, now)\npipe.expire(key, self.window)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "_, _, request_count, _ = pipe.execute()",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "remaining = max(0, self.max_requests - request_count)\nreset_time = int(now + self.window)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "return request_count <= self.max_requests, remaining, reset_time",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class RateLimiter:\n        self.max_requests = requests_per_minute\n\n        return request_count <= self.max_requests, remaining, reset_time",
      "blocks": [
        {
          "id": 1,
          "label": "class RateLimiter:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.max_requests = requests_per_minute",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return request_count <= self.max_requests, remaining, reset_time",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import time\nfrom typing import Tuple\n\nfrom redis import Redis\n\nfrom .config import RATE_LIMIT_SETTINGS\n\n\n        return request_count <= self.max_requests, remaining, reset_time",
  "blocks": [
    {
      "id": 1,
      "label": "import time\nfrom typing import Tuple\nfrom redis import Redis\nfrom .config import RATE_LIMIT_SETTINGS",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "return request_count <= self.max_requests, remaining, reset_time",
      "successors": []
    }
  ]
}