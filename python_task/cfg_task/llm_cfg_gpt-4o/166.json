{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 529,
  "functions": [],
  "classes": [
    {
      "name": "Attachment",
      "type": "class",
      "start_line": 22,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "simplified_code": "class Attachment(BaseModel):\n    filename: str\n    content_type: str\n    size: int\n    attachment_id: str",
      "blocks": [
        {
          "id": 1,
          "label": "class Attachment(BaseModel):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "filename: str\ncontent_type: str\nsize: int\nattachment_id: str",
          "successors": []
        }
      ]
    },
    {
      "name": "Email",
      "type": "class",
      "start_line": 29,
      "end_line": 38,
      "functions": [],
      "classes": [],
      "simplified_code": "class Email(BaseModel):\n    id: str\n    subject: str\n    snippet: str\n    from_: str\n    to: str\n    date: str\n    body: str = \"\"  # Default to an empty string\n    sizeEstimate: int\n    attachments: List[Attachment]",
      "blocks": [
        {
          "id": 1,
          "label": "class Email(BaseModel):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "id: str\nsubject: str\nsnippet: str\nfrom_: str\nto: str\ndate: str\nbody: str = \"\"\nsizeEstimate: int\nattachments: List[Attachment]",
          "successors": []
        }
      ]
    },
    {
      "name": "GmailReadBlock",
      "type": "class",
      "start_line": 41,
      "end_line": 239,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 66,
          "end_line": 128,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"25310c70-b89b-43ba-b25c-4dfa7e2a481c\",\n            description=\"This block reads emails from Gmail.\",\n            categories={BlockCategory.COMMUNICATION},\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            input_schema=GmailReadBlock.Input,\n            output_schema=GmailReadBlock.Output,\n            test_input={\n                \"query\": \"is:unread\",\n                \"max_results\": 5,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"email\",\n                    {\n                        \"id\": \"1\",\n                        \"subject\": \"Test Email\",\n                        \"snippet\": \"This is a test email\",\n                        \"from_\": \"test@example.com\",\n                        \"to\": \"recipient@example.com\",\n                        \"date\": \"2024-01-01\",\n                        \"body\": \"This is a test email\",\n                        \"sizeEstimate\": 100,\n                        \"attachments\": [],\n                    },\n                ),\n                (\n                    \"emails\",\n                    [\n                        {\n                            \"id\": \"1\",\n                            \"subject\": \"Test Email\",\n                            \"snippet\": \"This is a test email\",\n                            \"from_\": \"test@example.com\",\n                            \"to\": \"recipient@example.com\",\n                            \"date\": \"2024-01-01\",\n                            \"body\": \"This is a test email\",\n                            \"sizeEstimate\": 100,\n                            \"attachments\": [],\n                        }\n                    ],\n                ),\n            ],\n            test_mock={\n                \"_read_emails\": lambda *args, **kwargs: [\n                    {\n                        \"id\": \"1\",\n                        \"subject\": \"Test Email\",\n                        \"snippet\": \"This is a test email\",\n                        \"from_\": \"test@example.com\",\n                        \"to\": \"recipient@example.com\",\n                        \"date\": \"2024-01-01\",\n                        \"body\": \"This is a test email\",\n                        \"sizeEstimate\": 100,\n                        \"attachments\": [],\n                    }\n                ],\n                \"_send_email\": lambda *args, **kwargs: {\"id\": \"1\", \"status\": \"sent\"},\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "super().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 130,
          "end_line": 137,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = self._build_service(credentials, **kwargs)\n        messages = self._read_emails(service, input_data.query, input_data.max_results)\n        for email in messages:\n            yield \"email\", email\n        yield \"emails\", messages",
          "blocks": [
            {
              "id": 1,
              "label": "service = self._build_service(credentials, **kwargs)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "messages = self._read_emails(service, input_data.query, input_data.max_results)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "for email in messages:",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "yield \"email\", email",
              "successors": [
                3
              ]
            },
            {
              "id": 5,
              "label": "yield \"emails\", messages",
              "successors": []
            }
          ]
        },
        {
          "name": "_build_service",
          "type": "function",
          "start_line": 140,
          "end_line": 157,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _build_service(credentials: GoogleCredentials, **kwargs):\n        creds = Credentials(\n            token=(\n                credentials.access_token.get_secret_value()\n                if credentials.access_token\n                else None\n            ),\n            refresh_token=(\n                credentials.refresh_token.get_secret_value()\n                if credentials.refresh_token\n                else None\n            ),\n            token_uri=\"https://oauth2.googleapis.com/token\",\n            client_id=kwargs.get(\"client_id\"),\n            client_secret=kwargs.get(\"client_secret\"),\n            scopes=credentials.scopes,\n        )\n        return build(\"gmail\", \"v1\", credentials=creds)",
          "blocks": [
            {
              "id": 1,
              "label": "def _build_service(credentials: GoogleCredentials, **kwargs):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "creds = Credentials(token=(credentials.access_token.get_secret_value() if credentials.access_token else None), refresh_token=(credentials.refresh_token.get_secret_value() if credentials.refresh_token else None), token_uri=\"https://oauth2.googleapis.com/token\", client_id=kwargs.get(\"client_id\"), client_secret=kwargs.get(\"client_secret\"), scopes=credentials.scopes,)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "return build(\"gmail\", \"v1\", credentials=creds)",
              "successors": []
            }
          ]
        },
        {
          "name": "_read_emails",
          "type": "function",
          "start_line": 159,
          "end_line": 199,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _read_emails(\n        self, service, query: str | None, max_results: int | None\n    ) -> list[Email]:\n        results = (\n            service.users()\n            .messages()\n            .list(userId=\"me\", q=query or \"\", maxResults=max_results or 10)\n            .execute()\n        )\n        messages = results.get(\"messages\", [])\n\n        email_data = []\n        for message in messages:\n            msg = (\n                service.users()\n                .messages()\n                .get(userId=\"me\", id=message[\"id\"], format=\"full\")\n                .execute()\n            )\n\n            headers = {\n                header[\"name\"].lower(): header[\"value\"]\n                for header in msg[\"payload\"][\"headers\"]\n            }\n\n            attachments = self._get_attachments(service, msg)\n\n            email = Email(\n                id=msg[\"id\"],\n                subject=headers.get(\"subject\", \"No Subject\"),\n                snippet=msg[\"snippet\"],\n                from_=parseaddr(headers.get(\"from\", \"\"))[1],\n                to=parseaddr(headers.get(\"to\", \"\"))[1],\n                date=headers.get(\"date\", \"\"),\n                body=self._get_email_body(msg),\n                sizeEstimate=msg[\"sizeEstimate\"],\n                attachments=attachments,\n            )\n            email_data.append(email)\n\n        return email_data",
          "blocks": [
            {
              "id": 1,
              "label": "results = (service.users().messages().list(userId=\"me\", q=query or \"\", maxResults=max_results or 10).execute())",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "messages = results.get(\"messages\", [])",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "email_data = []",
              "successors": [
                4,
                8
              ]
            },
            {
              "id": 4,
              "label": "for message in messages:",
              "successors": [
                5,
                8
              ]
            },
            {
              "id": 5,
              "label": "msg = (service.users().messages().get(userId=\"me\", id=message[\"id\"], format=\"full\").execute())",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "headers = {header[\"name\"].lower(): header[\"value\"] for header in msg[\"payload\"][\"headers\"]}",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "attachments = self._get_attachments(service, msg); email = Email(id=msg[\"id\"], subject=headers.get(\"subject\", \"No Subject\"), snippet=msg[\"snippet\"], from_=parseaddr(headers.get(\"from\", \"\"))[1], to=parseaddr(headers.get(\"to\", \"\"))[1], date=headers.get(\"date\", \"\"), body=self._get_email_body(msg), sizeEstimate=msg[\"sizeEstimate\"], attachments=attachments); email_data.append(email)",
              "successors": [
                4
              ]
            },
            {
              "id": 8,
              "label": "return email_data",
              "successors": []
            }
          ]
        },
        {
          "name": "_get_email_body",
          "type": "function",
          "start_line": 201,
          "end_line": 213,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _get_email_body(self, msg):\n        if \"parts\" in msg[\"payload\"]:\n            for part in msg[\"payload\"][\"parts\"]:\n                if part[\"mimeType\"] == \"text/plain\":\n                    return base64.urlsafe_b64decode(part[\"body\"][\"data\"]).decode(\n                        \"utf-8\"\n                    )\n        elif msg[\"payload\"][\"mimeType\"] == \"text/plain\":\n            return base64.urlsafe_b64decode(msg[\"payload\"][\"body\"][\"data\"]).decode(\n                \"utf-8\"\n            )\n\n        return \"This email does not contain a text body.\"",
          "blocks": [
            {
              "id": 1,
              "label": "if 'parts' in msg['payload']:",
              "successors": [
                2,
                4
              ]
            },
            {
              "id": 2,
              "label": "for part in msg['payload']['parts']:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "if part['mimeType'] == 'text/plain':",
              "successors": [
                5,
                4
              ]
            },
            {
              "id": 4,
              "label": "elif msg['payload']['mimeType'] == 'text/plain':",
              "successors": [
                6,
                7
              ]
            },
            {
              "id": 5,
              "label": "return base64.urlsafe_b64decode(part['body']['data']).decode('utf-8')",
              "successors": []
            },
            {
              "id": 6,
              "label": "return base64.urlsafe_b64decode(msg['payload']['body']['data']).decode('utf-8')",
              "successors": []
            },
            {
              "id": 7,
              "label": "return 'This email does not contain a text body.'",
              "successors": []
            }
          ]
        },
        {
          "name": "_get_attachments",
          "type": "function",
          "start_line": 215,
          "end_line": 227,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _get_attachments(self, service, message):\n        attachments = []\n        if \"parts\" in message[\"payload\"]:\n            for part in message[\"payload\"][\"parts\"]:\n                if part[\"filename\"]:\n                    attachment = Attachment(\n                        filename=part[\"filename\"],\n                        content_type=part[\"mimeType\"],\n                        size=int(part[\"body\"].get(\"size\", 0)),\n                        attachment_id=part[\"body\"][\"attachmentId\"],\n                    )\n                    attachments.append(attachment)\n        return attachments",
          "blocks": [
            {
              "id": 1,
              "label": "attachments = []",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if \"parts\" in message[\"payload\"]:",
              "successors": [
                3,
                6
              ]
            },
            {
              "id": 3,
              "label": "for part in message[\"payload\"][\"parts\"]:",
              "successors": [
                4,
                6
              ]
            },
            {
              "id": 4,
              "label": "if part[\"filename\"]:",
              "successors": [
                5,
                3
              ]
            },
            {
              "id": 5,
              "label": "attachment = Attachment(\n    filename=part[\"filename\"],\n    content_type=part[\"mimeType\"],\n    size=int(part[\"body\"].get(\"size\", 0)),\n    attachment_id=part[\"body\"][\"attachmentId\"],\n)\nattachments.append(attachment)",
              "successors": [
                3
              ]
            },
            {
              "id": 6,
              "label": "return attachments",
              "successors": []
            }
          ]
        },
        {
          "name": "download_attachment",
          "type": "function",
          "start_line": 230,
          "end_line": 239,
          "functions": [],
          "classes": [],
          "simplified_code": "    def download_attachment(self, service, message_id: str, attachment_id: str):\n        attachment = (\n            service.users()\n            .messages()\n            .attachments()\n            .get(userId=\"me\", messageId=message_id, id=attachment_id)\n            .execute()\n        )\n        file_data = base64.urlsafe_b64decode(attachment[\"data\"].encode(\"UTF-8\"))\n        return file_data",
          "blocks": [
            {
              "id": 1,
              "label": "attachment = (service.users().messages().attachments().get(userId=\"me\", messageId=message_id, id=attachment_id).execute())",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "file_data = base64.urlsafe_b64decode(attachment[\"data\"].encode(\"UTF-8\"))",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "return file_data",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 42,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.readonly\"]\n        )\n        query: str = SchemaField(\n            description=\"Search query for reading emails\",\n            default=\"is:unread\",\n        )\n        max_results: int = SchemaField(\n            description=\"Maximum number of emails to retrieve\",\n            default=10,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: GoogleCredentialsInput = GoogleCredentialsField([\"https://www.googleapis.com/auth/gmail.readonly\"])",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "query: str = SchemaField(description=\"Search query for reading emails\", default=\"is:unread\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "max_results: int = SchemaField(description=\"Maximum number of emails to retrieve\", default=10)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 55,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        email: Email = SchemaField(\n            description=\"Email data\",\n        )\n        emails: list[Email] = SchemaField(\n            description=\"List of email data\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "email: Email = SchemaField(description=\"Email data\",)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "emails: list[Email] = SchemaField(description=\"List of email data\",)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "error: str = SchemaField(description=\"Error message if any\",)",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GmailReadBlock(Block):\n        )\n\n        )\n\n        )\n\n        yield \"emails\", messages\n\n    @staticmethod\n        return build(\"gmail\", \"v1\", credentials=creds)\n\n        return email_data\n\n        return \"This email does not contain a text body.\"\n\n        return attachments\n\n    # Add a new method to download attachment content\n        return file_data",
      "blocks": [
        {
          "id": 1,
          "label": "class GmailReadBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": ")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": ")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": ")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "yield \"emails\", messages",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "@staticmethod",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "return build(\"gmail\", \"v1\", credentials=creds)",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "return email_data",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "return \"This email does not contain a text body.\"",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "return attachments",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "# Add a new method to download attachment content",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "return file_data",
          "successors": []
        }
      ]
    },
    {
      "name": "GmailSendBlock",
      "type": "class",
      "start_line": 242,
      "end_line": 314,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 265,
          "end_line": 286,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"6c27abc2-e51d-499e-a85f-5a0041ba94f0\",\n            description=\"This block sends an email using Gmail.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailSendBlock.Input,\n            output_schema=GmailSendBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"to\": \"recipient@example.com\",\n                \"subject\": \"Test Email\",\n                \"body\": \"This is a test email sent from GmailSendBlock.\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"result\", {\"id\": \"1\", \"status\": \"sent\"}),\n            ],\n            test_mock={\n                \"_send_email\": lambda *args, **kwargs: {\"id\": \"1\", \"status\": \"sent\"},\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "super().__init__",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 288,
          "end_line": 295,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = GmailReadBlock._build_service(credentials, **kwargs)\n        send_result = self._send_email(\n            service, input_data.to, input_data.subject, input_data.body\n        )\n        yield \"result\", send_result",
          "blocks": [
            {
              "id": 1,
              "label": "service = GmailReadBlock._build_service(credentials, **kwargs)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "send_result = self._send_email(service, input_data.to, input_data.subject, input_data.body)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield \"result\", send_result",
              "successors": []
            }
          ]
        },
        {
          "name": "_send_email",
          "type": "function",
          "start_line": 297,
          "end_line": 304,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _send_email(self, service, to: str, subject: str, body: str) -> dict:\n        if not to or not subject or not body:\n            raise ValueError(\"To, subject, and body are required for sending an email\")\n        message = self._create_message(to, subject, body)\n        sent_message = (\n            service.users().messages().send(userId=\"me\", body=message).execute()\n        )\n        return {\"id\": sent_message[\"id\"], \"status\": \"sent\"}",
          "blocks": [
            {
              "id": 1,
              "label": "if not to or not subject or not body:",
              "successors": [
                2,
                3
              ]
            },
            {
              "id": 2,
              "label": "raise ValueError(\"To, subject, and body are required for sending an email\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "message = self._create_message(to, subject, body)\nsent_message = (service.users().messages().send(userId=\"me\", body=message).execute())\nreturn {\"id\": sent_message[\"id\"], \"status\": \"sent\"}",
              "successors": []
            }
          ]
        },
        {
          "name": "_create_message",
          "type": "function",
          "start_line": 306,
          "end_line": 314,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _create_message(self, to: str, subject: str, body: str) -> dict:\n        import base64\n        from email.mime.text import MIMEText\n\n        message = MIMEText(body)\n        message[\"to\"] = to\n        message[\"subject\"] = subject\n        raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode(\"utf-8\")\n        return {\"raw\": raw_message}",
          "blocks": [
            {
              "id": 1,
              "label": "import base64\nfrom email.mime.text import MIMEText",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "message = MIMEText(body)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "message['to'] = to\nmessage['subject'] = subject",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode('utf-8')",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "return {'raw': raw_message}",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 243,
          "end_line": 255,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.send\"]\n        )\n        to: str = SchemaField(\n            description=\"Recipient email address\",\n        )\n        subject: str = SchemaField(\n            description=\"Email subject\",\n        )\n        body: str = SchemaField(\n            description=\"Email body\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: GoogleCredentialsInput = GoogleCredentialsField([\"https://www.googleapis.com/auth/gmail.send\"])",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "to: str = SchemaField(description=\"Recipient email address\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "subject: str = SchemaField(description=\"Email subject\")",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "body: str = SchemaField(description=\"Email body\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 257,
          "end_line": 263,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"Send confirmation\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "result: dict = SchemaField(description=\"Send confirmation\",)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if any\",)",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GmailSendBlock(Block):\n        )\n\n        )\n\n        )\n\n        yield \"result\", send_result\n\n        return {\"id\": sent_message[\"id\"], \"status\": \"sent\"}\n\n        return {\"raw\": raw_message}",
      "blocks": [
        {
          "id": 1,
          "label": "send_result = self._send_message(raw_message)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "sent_message = self._service.users().messages().send(userId=\"me\", body=raw_message).execute()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "yield \"result\", send_result",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return {\"id\": sent_message[\"id\"], \"status\": \"sent\"}",
          "successors": []
        },
        {
          "id": 5,
          "label": "return {\"raw\": raw_message}",
          "successors": []
        }
      ]
    },
    {
      "name": "GmailListLabelsBlock",
      "type": "class",
      "start_line": 317,
      "end_line": 370,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 331,
          "end_line": 358,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"3e1c2c1c-c689-4520-b956-1f3bf4e02bb7\",\n            description=\"This block lists all labels in Gmail.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailListLabelsBlock.Input,\n            output_schema=GmailListLabelsBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    [\n                        {\"id\": \"Label_1\", \"name\": \"Important\"},\n                        {\"id\": \"Label_2\", \"name\": \"Work\"},\n                    ],\n                ),\n            ],\n            test_mock={\n                \"_list_labels\": lambda *args, **kwargs: [\n                    {\"id\": \"Label_1\", \"name\": \"Important\"},\n                    {\"id\": \"Label_2\", \"name\": \"Work\"},\n                ],\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(id=\"3e1c2c1c-c689-4520-b956-1f3bf4e02bb7\", description=\"This block lists all labels in Gmail.\", categories={BlockCategory.COMMUNICATION}, input_schema=GmailListLabelsBlock.Input, output_schema=GmailListLabelsBlock.Output, disabled=not GOOGLE_OAUTH_IS_CONFIGURED, test_input={\"credentials\": TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[(\"result\", [{\"id\": \"Label_1\", \"name\": \"Important\"}, {\"id\": \"Label_2\", \"name\": \"Work\"},],)], test_mock={\"_list_labels\": lambda *args, **kwargs: [{\"id\": \"Label_1\", \"name\": \"Important\"}, {\"id\": \"Label_2\", \"name\": \"Work\"},],})",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 360,
          "end_line": 365,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = GmailReadBlock._build_service(credentials, **kwargs)\n        labels = self._list_labels(service)\n        yield \"result\", labels",
          "blocks": [
            {
              "id": 1,
              "label": "service = GmailReadBlock._build_service(credentials, **kwargs)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "labels = self._list_labels(service)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield \"result\", labels",
              "successors": []
            }
          ]
        },
        {
          "name": "_list_labels",
          "type": "function",
          "start_line": 367,
          "end_line": 370,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _list_labels(self, service) -> list[dict]:\n        results = service.users().labels().list(userId=\"me\").execute()\n        labels = results.get(\"labels\", [])\n        return [{\"id\": label[\"id\"], \"name\": label[\"name\"]} for label in labels]",
          "blocks": [
            {
              "id": 1,
              "label": "results = service.users().labels().list(userId=\"me\").execute()",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "labels = results.get(\"labels\", [])",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "return [{\"id\": label[\"id\"], \"name\": label[\"name\"]} for label in labels]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 318,
          "end_line": 321,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.labels\"]\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: GoogleCredentialsInput = GoogleCredentialsField([\"https://www.googleapis.com/auth/gmail.labels\"])",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 323,
          "end_line": 329,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        result: list[dict] = SchemaField(\n            description=\"List of labels\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "result: list[dict] = SchemaField(description=\"List of labels\",)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if any\",)",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GmailListLabelsBlock(Block):\n        )\n\n        )\n\n        )\n\n        yield \"result\", labels\n\n        return [{\"id\": label[\"id\"], \"name\": label[\"name\"]} for label in labels]",
      "blocks": [
        {
          "id": 1,
          "label": "class GmailListLabelsBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "yield \"result\", labels",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return [{\"id\": label[\"id\"], \"name\": label[\"name\"]} for label in labels]",
          "successors": []
        }
      ]
    },
    {
      "name": "GmailAddLabelBlock",
      "type": "class",
      "start_line": 373,
      "end_line": 453,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 393,
          "end_line": 419,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"f884b2fb-04f4-4265-9658-14f433926ac9\",\n            description=\"This block adds a label to a Gmail message.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailAddLabelBlock.Input,\n            output_schema=GmailAddLabelBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"message_id\": \"12345\",\n                \"label_name\": \"Important\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    {\"status\": \"Label added successfully\", \"label_id\": \"Label_1\"},\n                ),\n            ],\n            test_mock={\n                \"_add_label\": lambda *args, **kwargs: {\n                    \"status\": \"Label added successfully\",\n                    \"label_id\": \"Label_1\",\n                },\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(id=\"f884b2fb-04f4-4265-9658-14f433926ac9\", description=\"This block adds a label to a Gmail message.\", categories={BlockCategory.COMMUNICATION}, input_schema=GmailAddLabelBlock.Input, output_schema=GmailAddLabelBlock.Output, disabled=not GOOGLE_OAUTH_IS_CONFIGURED, test_input={\"message_id\": \"12345\", \"label_name\": \"Important\", \"credentials\": TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[(\"result\", {\"status\": \"Label added successfully\", \"label_id\": \"Label_1\"})], test_mock={\"_add_label\": lambda *args, **kwargs: {\"status\": \"Label added successfully\", \"label_id\": \"Label_1\"}})",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 421,
          "end_line": 426,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = GmailReadBlock._build_service(credentials, **kwargs)\n        result = self._add_label(service, input_data.message_id, input_data.label_name)\n        yield \"result\", result",
          "blocks": [
            {
              "id": 1,
              "label": "service = GmailReadBlock._build_service(credentials, **kwargs)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "result = self._add_label(service, input_data.message_id, input_data.label_name)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield \"result\", result",
              "successors": []
            }
          ]
        },
        {
          "name": "_add_label",
          "type": "function",
          "start_line": 428,
          "end_line": 433,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _add_label(self, service, message_id: str, label_name: str) -> dict:\n        label_id = self._get_or_create_label(service, label_name)\n        service.users().messages().modify(\n            userId=\"me\", id=message_id, body={\"addLabelIds\": [label_id]}\n        ).execute()\n        return {\"status\": \"Label added successfully\", \"label_id\": label_id}",
          "blocks": [
            {
              "id": 1,
              "label": "label_id = self._get_or_create_label(service, label_name)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "service.users().messages().modify(userId=\"me\", id=message_id, body={\"addLabelIds\": [label_id]}).execute()",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "return {\"status\": \"Label added successfully\", \"label_id\": label_id}",
              "successors": []
            }
          ]
        },
        {
          "name": "_get_or_create_label",
          "type": "function",
          "start_line": 435,
          "end_line": 445,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _get_or_create_label(self, service, label_name: str) -> str:\n        label_id = self._get_label_id(service, label_name)\n        if not label_id:\n            label = (\n                service.users()\n                .labels()\n                .create(userId=\"me\", body={\"name\": label_name})\n                .execute()\n            )\n            label_id = label[\"id\"]\n        return label_id",
          "blocks": [
            {
              "id": 1,
              "label": "label_id = self._get_label_id(service, label_name)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if not label_id:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "label = (service.users().labels().create(userId=\"me\", body={\"name\": label_name}).execute())\nlabel_id = label[\"id\"]",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "return label_id",
              "successors": []
            }
          ]
        },
        {
          "name": "_get_label_id",
          "type": "function",
          "start_line": 447,
          "end_line": 453,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _get_label_id(self, service, label_name: str) -> str | None:\n        results = service.users().labels().list(userId=\"me\").execute()\n        labels = results.get(\"labels\", [])\n        for label in labels:\n            if label[\"name\"] == label_name:\n                return label[\"id\"]\n        return None",
          "blocks": [
            {
              "id": 1,
              "label": "results = service.users().labels().list(userId=\"me\").execute()",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "labels = results.get(\"labels\", [])",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "for label in labels:",
              "successors": [
                4,
                6
              ]
            },
            {
              "id": 4,
              "label": "if label[\"name\"] == label_name:",
              "successors": [
                5,
                6
              ]
            },
            {
              "id": 5,
              "label": "return label[\"id\"]",
              "successors": []
            },
            {
              "id": 6,
              "label": "return None",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 374,
          "end_line": 383,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.modify\"]\n        )\n        message_id: str = SchemaField(\n            description=\"Message ID to add label to\",\n        )\n        label_name: str = SchemaField(\n            description=\"Label name to add\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: GoogleCredentialsInput = GoogleCredentialsField([\"https://www.googleapis.com/auth/gmail.modify\"])",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "message_id: str = SchemaField(description=\"Message ID to add label to\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "label_name: str = SchemaField(description=\"Label name to add\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 385,
          "end_line": 391,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"Label addition result\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "result: dict = SchemaField(description=\"Label addition result\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if any\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GmailAddLabelBlock(Block):\n        )\n\n        )\n\n        )\n\n        yield \"result\", result\n\n        return {\"status\": \"Label added successfully\", \"label_id\": label_id}\n\n        return label_id\n\n        return None",
      "blocks": [
        {
          "id": 1,
          "label": "class GmailAddLabelBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "(code execution continues within the class body)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": ")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": ")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "yield \"result\", result",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "return {\"status\": \"Label added successfully\", \"label_id\": label_id}",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "return label_id",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "return None",
          "successors": []
        }
      ]
    },
    {
      "name": "GmailRemoveLabelBlock",
      "type": "class",
      "start_line": 456,
      "end_line": 529,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 476,
          "end_line": 502,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"0afc0526-aba1-4b2b-888e-a22b7c3f359d\",\n            description=\"This block removes a label from a Gmail message.\",\n            categories={BlockCategory.COMMUNICATION},\n            input_schema=GmailRemoveLabelBlock.Input,\n            output_schema=GmailRemoveLabelBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"message_id\": \"12345\",\n                \"label_name\": \"Important\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    {\"status\": \"Label removed successfully\", \"label_id\": \"Label_1\"},\n                ),\n            ],\n            test_mock={\n                \"_remove_label\": lambda *args, **kwargs: {\n                    \"status\": \"Label removed successfully\",\n                    \"label_id\": \"Label_1\",\n                },\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\n    super().__init__(\n        id=\"0afc0526-aba1-4b2b-888e-a22b7c3f359d\",\n        description=\"This block removes a label from a Gmail message.\",\n        categories={BlockCategory.COMMUNICATION},\n        input_schema=GmailRemoveLabelBlock.Input,\n        output_schema=GmailRemoveLabelBlock.Output,\n        disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n        test_input={\n            \"message_id\": \"12345\",\n            \"label_name\": \"Important\",\n            \"credentials\": TEST_CREDENTIALS_INPUT,\n        },\n        test_credentials=TEST_CREDENTIALS,\n        test_output=[\n            (\n                \"result\",\n                {\"status\": \"Label removed successfully\", \"label_id\": \"Label_1\"},\n            ),\n        ],\n        test_mock={\n            \"_remove_label\": lambda *args, **kwargs: {\n                \"status\": \"Label removed successfully\",\n                \"label_id\": \"Label_1\",\n            },\n        },\n    )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 504,
          "end_line": 511,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = GmailReadBlock._build_service(credentials, **kwargs)\n        result = self._remove_label(\n            service, input_data.message_id, input_data.label_name\n        )\n        yield \"result\", result",
          "blocks": [
            {
              "id": 1,
              "label": "service = GmailReadBlock._build_service(credentials, **kwargs)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "result = self._remove_label(service, input_data.message_id, input_data.label_name)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "yield \"result\", result",
              "successors": []
            }
          ]
        },
        {
          "name": "_remove_label",
          "type": "function",
          "start_line": 513,
          "end_line": 521,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _remove_label(self, service, message_id: str, label_name: str) -> dict:\n        label_id = self._get_label_id(service, label_name)\n        if label_id:\n            service.users().messages().modify(\n                userId=\"me\", id=message_id, body={\"removeLabelIds\": [label_id]}\n            ).execute()\n            return {\"status\": \"Label removed successfully\", \"label_id\": label_id}\n        else:\n            return {\"status\": \"Label not found\", \"label_name\": label_name}",
          "blocks": [
            {
              "id": 1,
              "label": "label_id = self._get_label_id(service, label_name)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if label_id:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "service.users().messages().modify(userId='me', id=message_id, body={'removeLabelIds': [label_id]}).execute()\nreturn {'status': 'Label removed successfully', 'label_id': label_id}",
              "successors": []
            },
            {
              "id": 4,
              "label": "return {'status': 'Label not found', 'label_name': label_name}",
              "successors": []
            }
          ]
        },
        {
          "name": "_get_label_id",
          "type": "function",
          "start_line": 523,
          "end_line": 529,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _get_label_id(self, service, label_name: str) -> str | None:\n        results = service.users().labels().list(userId=\"me\").execute()\n        labels = results.get(\"labels\", [])\n        for label in labels:\n            if label[\"name\"] == label_name:\n                return label[\"id\"]\n        return None",
          "blocks": [
            {
              "id": 1,
              "label": "results = service.users().labels().list(userId=\"me\").execute()",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "labels = results.get(\"labels\", [])",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "for label in labels:",
              "successors": [
                4,
                6
              ]
            },
            {
              "id": 4,
              "label": "if label[\"name\"] == label_name:",
              "successors": [
                5,
                6
              ]
            },
            {
              "id": 5,
              "label": "return label[\"id\"]",
              "successors": []
            },
            {
              "id": 6,
              "label": "return None",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 457,
          "end_line": 466,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/gmail.modify\"]\n        )\n        message_id: str = SchemaField(\n            description=\"Message ID to remove label from\",\n        )\n        label_name: str = SchemaField(\n            description=\"Label name to remove\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: GoogleCredentialsInput = GoogleCredentialsField([\"https://www.googleapis.com/auth/gmail.modify\"])",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "message_id: str = SchemaField(description=\"Message ID to remove label from\",)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "label_name: str = SchemaField(description=\"Label name to remove\",)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 468,
          "end_line": 474,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"Label removal result\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "result: dict = SchemaField(description=\"Label removal result\",)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if any\",)",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GmailRemoveLabelBlock(Block):\n        )\n\n        )\n\n        )\n\n        yield \"result\", result\n\n            return {\"status\": \"Label not found\", \"label_name\": label_name}\n\n        return None",
      "blocks": [
        {
          "id": 1,
          "label": "class GmailRemoveLabelBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "yield \"result\", result",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return {\"status\": \"Label not found\", \"label_name\": label_name}",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return None",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import base64\nfrom email.utils import parseaddr\nfrom typing import List\n\nfrom google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\nfrom pydantic import BaseModel\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\nfrom ._auth import (\n    GOOGLE_OAUTH_IS_CONFIGURED,\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GoogleCredentials,\n    GoogleCredentialsField,\n    GoogleCredentialsInput,\n)\n\n\n    attachment_id: str\n\n\n    attachments: List[Attachment]\n\n\n        return file_data\n\n\n        return {\"raw\": raw_message}\n\n\n        return [{\"id\": label[\"id\"], \"name\": label[\"name\"]} for label in labels]\n\n\n        return None\n\n\n        return None",
  "blocks": [
    {
      "id": 1,
      "label": "import base64",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from email.utils import parseaddr",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from typing import List",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from google.oauth2.credentials import Credentials",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from googleapiclient.discovery import build",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from pydantic import BaseModel",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "from backend.data.model import SchemaField",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "from ._auth import (GOOGLE_OAUTH_IS_CONFIGURED, TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GoogleCredentials, GoogleCredentialsField, GoogleCredentialsInput)",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "attachment_id: str",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "attachments: List[Attachment]",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "return file_data",
      "successors": [
        13
      ]
    },
    {
      "id": 13,
      "label": "return {'raw': raw_message}",
      "successors": [
        14
      ]
    },
    {
      "id": 14,
      "label": "return [{'id': label['id'], 'name': label['name']} for label in labels]",
      "successors": [
        15
      ]
    },
    {
      "id": 15,
      "label": "return None",
      "successors": [
        16
      ]
    },
    {
      "id": 16,
      "label": "return None",
      "successors": []
    }
  ]
}