{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 244,
  "functions": [
    {
      "name": "on_graph_activate",
      "type": "function",
      "start_line": 18,
      "end_line": 48,
      "functions": [],
      "classes": [],
      "simplified_code": "async def on_graph_activate(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n    \"\"\"\n    Hook to be called when a graph is activated/created.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_activate` on all nodes in this graph.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    # Compare nodes in new_graph_version with previous_graph_version\n    updated_nodes = []\n    for new_node in graph.nodes:\n        node_credentials = None\n        if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                raise ValueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )\n\n        updated_node = await on_node_activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )\n        updated_nodes.append(updated_node)\n\n    graph.nodes = updated_nodes\n    return graph",
      "blocks": [
        {
          "id": 1,
          "label": "updated_nodes = []",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "for new_node in graph.nodes:",
          "successors": [
            3,
            11
          ]
        },
        {
          "id": 3,
          "label": "node_credentials = None",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):",
          "successors": [
            5,
            8
          ]
        },
        {
          "id": 5,
          "label": "node_credentials = get_credentials(creds_meta[\"id\"])",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "if not node_credentials:",
          "successors": [
            7,
            8
          ]
        },
        {
          "id": 7,
          "label": "raise ValueError(f\"Node #{new_node.id} updated with non-existent credentials #{node_credentials}\")",
          "successors": []
        },
        {
          "id": 8,
          "label": "updated_node = await on_node_activate(graph.user_id, new_node, credentials=node_credentials)",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "updated_nodes.append(updated_node)",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "End of for loop",
          "successors": [
            2
          ]
        },
        {
          "id": 11,
          "label": "graph.nodes = updated_nodes",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "return graph",
          "successors": []
        }
      ]
    },
    {
      "name": "on_graph_deactivate",
      "type": "function",
      "start_line": 51,
      "end_line": 78,
      "functions": [],
      "classes": [],
      "simplified_code": "async def on_graph_deactivate(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n    \"\"\"\n    Hook to be called when a graph is deactivated/deleted.\n\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_nodes = []\n    for node in graph.nodes:\n        node_credentials = None\n        if creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:\n                logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n\n        updated_node = await on_node_deactivate(node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n\n    graph.nodes = updated_nodes\n    return graph",
      "blocks": [
        {
          "id": 1,
          "label": "async def on_graph_deactivate(...):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "updated_nodes = []",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "for node in graph.nodes:",
          "successors": [
            4,
            12
          ]
        },
        {
          "id": 4,
          "label": "node_credentials = None",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "if creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME):",
          "successors": [
            6,
            10
          ]
        },
        {
          "id": 6,
          "label": "node_credentials = get_credentials(creds_meta['id'])",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "if not node_credentials:",
          "successors": [
            8,
            9
          ]
        },
        {
          "id": 8,
          "label": "logger.error(f\"Node #{node.id} referenced non-existent credentials #{creds_meta['id']}\")",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "# Implicit continuation to the next block",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "updated_node = await on_node_deactivate(node, credentials=node_credentials)",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "updated_nodes.append(updated_node)",
          "successors": [
            3
          ]
        },
        {
          "id": 12,
          "label": "graph.nodes = updated_nodes",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "return graph",
          "successors": []
        }
      ]
    },
    {
      "name": "on_node_activate",
      "type": "function",
      "start_line": 81,
      "end_line": 185,
      "functions": [],
      "classes": [],
      "simplified_code": "async def on_node_activate(\n    user_id: str,\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n) -> \"NodeModel\":\n    \"\"\"Hook to be called when the node is activated/created\"\"\"\n\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not block.webhook_config:\n        return node\n\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    logger.debug(\n        f\"Activating webhook node #{node.id} with config {block.webhook_config}\"\n    )\n\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig):\n        try:\n            resource = block.webhook_config.resource_format.format(**node.input_default)\n        except KeyError:\n            resource = None\n        logger.debug(\n            f\"Constructed resource string {resource} from input {node.input_default}\"\n        )\n    else:\n        resource = \"\"  # not relevant for manual webhooks\n\n    needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n    credentials_meta = (\n        node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    )\n    event_filter_input_name = block.webhook_config.event_filter_input\n    has_everything_for_webhook = (\n        resource is not None\n        and (credentials_meta or not needs_credentials)\n        and (\n            not event_filter_input_name\n            or (\n                event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )\n\n    if has_everything_for_webhook and resource is not None:\n        logger.debug(f\"Node #{node} has everything for a webhook!\")\n        if credentials_meta and not credentials:\n            raise ValueError(\n                f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )\n\n        if event_filter_input_name:\n            # Shape of the event filter is enforced in Block.__init__\n            event_filter = cast(dict, node.input_default[event_filter_input_name])\n            events = [\n                block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n        else:\n            events = []\n\n        # Find/make and attach a suitable webhook to the node\n        if auto_setup_webhook:\n            assert credentials is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n        else:\n            # Manual webhook -> no credentials -> don't register but do create\n            new_webhook = await webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n        logger.debug(f\"Acquired webhook: {new_webhook}\")\n        return await set_node_webhook(node.id, new_webhook.id)\n    else:\n        logger.debug(f\"Node #{node.id} does not have everything for a webhook\")\n\n    return node",
      "blocks": [
        {
          "id": 1,
          "label": "block = get_block(node.block_id)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if not block:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "raise ValueError(f\"Node #{node.id} is instance of unknown block #{node.block_id}\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "if not block.webhook_config:",
          "successors": [
            5,
            6
          ]
        },
        {
          "id": 5,
          "label": "return node",
          "successors": []
        },
        {
          "id": 6,
          "label": "provider = block.webhook_config.provider",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "if provider not in WEBHOOK_MANAGERS_BY_NAME:",
          "successors": [
            8,
            9
          ]
        },
        {
          "id": 8,
          "label": "raise ValueError(f\"Block #{block.id} has webhook_config for provider {provider} which does not support webhooks\")",
          "successors": []
        },
        {
          "id": 9,
          "label": "logger.debug(f\"Activating webhook node #{node.id} with config {block.webhook_config}\")",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "if auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig):",
          "successors": [
            12,
            14
          ]
        },
        {
          "id": 12,
          "label": "try:",
          "successors": [
            13,
            14
          ]
        },
        {
          "id": 13,
          "label": "resource = block.webhook_config.resource_format.format(**node.input_default)",
          "successors": []
        },
        {
          "id": 14,
          "label": "resource = None",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "logger.debug(f\"Constructed resource string {resource} from input {node.input_default}\")",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "else:",
          "successors": [
            17,
            18
          ]
        },
        {
          "id": 17,
          "label": "resource = \"\"",
          "successors": [
            18
          ]
        },
        {
          "id": 18,
          "label": "needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields",
          "successors": [
            19
          ]
        },
        {
          "id": 19,
          "label": "credentials_meta = (node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None)",
          "successors": [
            20
          ]
        },
        {
          "id": 20,
          "label": "event_filter_input_name = block.webhook_config.event_filter_input",
          "successors": [
            21
          ]
        },
        {
          "id": 21,
          "label": "has_everything_for_webhook = (resource is not None and (credentials_meta or not needs_credentials) and (not event_filter_input_name or (event_filter_input_name in node.input_default and any(is_on for is_on in node.input_default[event_filter_input_name].values()))))",
          "successors": [
            22
          ]
        },
        {
          "id": 22,
          "label": "if has_everything_for_webhook and resource is not None:",
          "successors": [
            23,
            35
          ]
        },
        {
          "id": 23,
          "label": "logger.debug(f\"Node #{node} has everything for a webhook!\")",
          "successors": [
            24
          ]
        },
        {
          "id": 24,
          "label": "if credentials_meta and not credentials:",
          "successors": [
            25,
            26
          ]
        },
        {
          "id": 25,
          "label": "raise ValueError(f\"Cannot set up webhook for node #{node.id}: credentials #{credentials_meta['id']} not available\")",
          "successors": []
        },
        {
          "id": 26,
          "label": "if event_filter_input_name:",
          "successors": [
            27,
            29
          ]
        },
        {
          "id": 27,
          "label": "event_filter = cast(dict, node.input_default[event_filter_input_name])",
          "successors": [
            28
          ]
        },
        {
          "id": 28,
          "label": "events = [block.webhook_config.event_format.format(event=event) for event, enabled in event_filter.items() if enabled is True]",
          "successors": [
            30
          ]
        },
        {
          "id": 29,
          "label": "events = []",
          "successors": [
            30
          ]
        },
        {
          "id": 30,
          "label": "logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")",
          "successors": [
            31
          ]
        },
        {
          "id": 31,
          "label": "if auto_setup_webhook:",
          "successors": [
            32,
            33
          ]
        },
        {
          "id": 32,
          "label": "new_webhook = await webhooks_manager.get_suitable_auto_webhook(user_id, credentials, block.webhook_config.webhook_type, resource, events)",
          "successors": [
            34
          ]
        },
        {
          "id": 33,
          "label": "new_webhook = await webhooks_manager.get_manual_webhook(user_id, node.graph_id, block.webhook_config.webhook_type, events)",
          "successors": [
            34
          ]
        },
        {
          "id": 34,
          "label": "logger.debug(f\"Acquired webhook: {new_webhook}\")",
          "successors": [
            36
          ]
        },
        {
          "id": 35,
          "label": "logger.debug(f\"Node #{node.id} does not have everything for a webhook\")",
          "successors": [
            36
          ]
        },
        {
          "id": 36,
          "label": "return node",
          "successors": []
        }
      ]
    },
    {
      "name": "on_node_deactivate",
      "type": "function",
      "start_line": 188,
      "end_line": 244,
      "functions": [],
      "classes": [],
      "simplified_code": "async def on_node_deactivate(\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n    webhooks_manager: Optional[\"BaseWebhooksManager\"] = None,\n) -> \"NodeModel\":\n    \"\"\"Hook to be called when node is deactivated/deleted\"\"\"\n\n    logger.debug(f\"Deactivating node #{node.id}\")\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not block.webhook_config:\n        return node\n\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if node.webhook_id:\n        logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\")\n        if not node.webhook:\n            logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")\n            raise ValueError(\"node.webhook not included\")\n\n        # Detach webhook from node\n        logger.debug(f\"Detaching webhook from node #{node.id}\")\n        updated_node = await set_node_webhook(node.id, None)\n\n        # Prune and deregister the webhook if it is no longer used anywhere\n        webhook = node.webhook\n        logger.debug(\n            f\"Pruning{' and deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )\n        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)\n        if (\n            CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n            and not credentials\n        ):\n            logger.warning(\n                f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )\n        return updated_node\n\n    logger.debug(f\"Node #{node.id} has no webhook_id, returning\")\n    return node",
      "blocks": [
        {
          "id": 1,
          "label": "async def on_node_deactivate(...):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "logger.debug(f\"Deactivating node #{node.id}\")\nblock = get_block(node.block_id)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "if not block:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "raise ValueError(f\"Node #{node.id} is instance of unknown block #{node.block_id}\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "if not block.webhook_config:",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 6,
          "label": "return node",
          "successors": []
        },
        {
          "id": 7,
          "label": "provider = block.webhook_config.provider\nif provider not in WEBHOOK_MANAGERS_BY_NAME:",
          "successors": [
            8,
            9
          ]
        },
        {
          "id": 8,
          "label": "raise ValueError(f\"Block #{block.id} has webhook_config for provider {provider} which does not support webhooks\")",
          "successors": []
        },
        {
          "id": 9,
          "label": "webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\nif node.webhook_id:",
          "successors": [
            10,
            18
          ]
        },
        {
          "id": 10,
          "label": "logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\")\nif not node.webhook:",
          "successors": [
            11,
            12
          ]
        },
        {
          "id": 11,
          "label": "logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")\nraise ValueError(\"node.webhook not included\")",
          "successors": []
        },
        {
          "id": 12,
          "label": "# Detach webhook from node\nlogger.debug(f\"Detaching webhook from node #{node.id}\")\nupdated_node = await set_node_webhook(node.id, None)",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "# Prune and deregister the webhook if it is no longer used anywhere\nwebhook = node.webhook\nlogger.debug(f\"Pruning{' and deregistering' if credentials else ''} webhook #{webhook.id}\")\nawait webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "if (CREDENTIALS_FIELD_NAME in block.input_schema.model_fields and not credentials):",
          "successors": [
            15,
            16
          ]
        },
        {
          "id": 15,
          "label": "logger.warning(f\"Cannot deregister webhook #{webhook.id}: credentials #{webhook.credentials_id} not available ({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\")",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "return updated_node",
          "successors": []
        },
        {
          "id": 18,
          "label": "logger.debug(f\"Node #{node.id} has no webhook_id, returning\")\nreturn node",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import logging\nfrom typing import TYPE_CHECKING, Callable, Optional, cast\n\nfrom backend.data.block import BlockWebhookConfig, get_block\nfrom backend.data.graph import set_node_webhook\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME\n\nif TYPE_CHECKING:\n    from backend.data.graph import GraphModel, NodeModel\n    from backend.data.model import Credentials\n\n    from ._base import BaseWebhooksManager\n\nlogger = logging.getLogger(__name__)\n\n\n    return graph\n\n\n    return graph\n\n\n    return node\n\n\n    return node",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nfrom typing import TYPE_CHECKING, Callable, Optional, cast\n\nfrom backend.data.block import BlockWebhookConfig, get_block\nfrom backend.data.graph import set_node_webhook\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME\n\nif TYPE_CHECKING:\n    from backend.data.graph import GraphModel, NodeModel\n    from backend.data.model import Credentials\n\n    from ._base import BaseWebhooksManager",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "logger = logging.getLogger(__name__)",
      "successors": []
    }
  ]
}