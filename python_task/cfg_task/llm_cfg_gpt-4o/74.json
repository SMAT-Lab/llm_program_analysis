{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 169,
  "functions": [],
  "classes": [
    {
      "name": "GoogleOAuthHandler",
      "type": "class",
      "start_line": 20,
      "end_line": 169,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 34,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.redirect_uri = redirect_uri\n        self.token_uri = \"https://oauth2.googleapis.com/token\"\n        self.revoke_uri = \"https://oauth2.googleapis.com/revoke\"",
          "blocks": [
            {
              "id": 1,
              "label": "self.client_id = client_id",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.client_secret = client_secret",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "self.redirect_uri = redirect_uri",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "self.token_uri = \"https://oauth2.googleapis.com/token\"",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "self.revoke_uri = \"https://oauth2.googleapis.com/revoke\"",
              "successors": []
            }
          ]
        },
        {
          "name": "get_login_url",
          "type": "function",
          "start_line": 41,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get_login_url(self, scopes: list[str], state: str) -> str:\n        all_scopes = list(set(scopes + self.DEFAULT_SCOPES))\n        logger.debug(f\"Setting up OAuth flow with scopes: {all_scopes}\")\n        flow = self._setup_oauth_flow(all_scopes)\n        flow.redirect_uri = self.redirect_uri\n        authorization_url, _ = flow.authorization_url(\n            access_type=\"offline\",\n            include_granted_scopes=\"true\",\n            state=state,\n            prompt=\"consent\",\n        )\n        return authorization_url",
          "blocks": [
            {
              "id": 1,
              "label": "all_scopes = list(set(scopes + self.DEFAULT_SCOPES))",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "logger.debug(f\"Setting up OAuth flow with scopes: {all_scopes}\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "flow = self._setup_oauth_flow(all_scopes)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "flow.redirect_uri = self.redirect_uri",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "authorization_url, _ = flow.authorization_url(access_type=\"offline\", include_granted_scopes=\"true\", state=state, prompt=\"consent\")",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "return authorization_url",
              "successors": []
            }
          ]
        },
        {
          "name": "exchange_code_for_tokens",
          "type": "function",
          "start_line": 54,
          "end_line": 104,
          "functions": [],
          "classes": [],
          "simplified_code": "    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        logger.debug(f\"Exchanging code for tokens with scopes: {scopes}\")\n\n        # Use the scopes from the initial request\n        flow = self._setup_oauth_flow(scopes)\n        flow.redirect_uri = self.redirect_uri\n\n        logger.debug(\"Fetching token from Google\")\n\n        # Disable scope check in fetch_token\n        flow.oauth2session.scope = None\n        token = flow.fetch_token(code=code)\n        logger.debug(\"Token fetched successfully\")\n\n        # Get the actual scopes granted by Google\n        granted_scopes: list[str] = token.get(\"scope\", [])\n\n        logger.debug(f\"Scopes granted by Google: {granted_scopes}\")\n\n        google_creds = flow.credentials\n        logger.debug(f\"Received credentials: {google_creds}\")\n\n        logger.debug(\"Requesting user email\")\n        username = self._request_email(google_creds)\n        logger.debug(f\"User email retrieved: {username}\")\n\n        assert google_creds.token\n        assert google_creds.refresh_token\n        assert google_creds.expiry\n        assert granted_scopes\n\n        # Create OAuth2Credentials with the granted scopes\n        credentials = OAuth2Credentials(\n            provider=self.PROVIDER_NAME,\n            title=None,\n            username=username,\n            access_token=SecretStr(google_creds.token),\n            refresh_token=(SecretStr(google_creds.refresh_token)),\n            access_token_expires_at=(\n                int(google_creds.expiry.timestamp()) if google_creds.expiry else None\n            ),\n            refresh_token_expires_at=None,\n            scopes=granted_scopes,\n        )\n        logger.debug(\n            f\"OAuth2Credentials object created successfully with scopes: {credentials.scopes}\"\n        )\n\n        return credentials",
          "blocks": [
            {
              "id": 1,
              "label": "logger.debug(f\"Exchanging code for tokens with scopes: {scopes}\")",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "flow = self._setup_oauth_flow(scopes)\nflow.redirect_uri = self.redirect_uri",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "logger.debug(\"Fetching token from Google\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "flow.oauth2session.scope = None\ntoken = flow.fetch_token(code=code)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "logger.debug(\"Token fetched successfully\")",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "granted_scopes: list[str] = token.get(\"scope\", [])",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "logger.debug(f\"Scopes granted by Google: {granted_scopes}\")",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "google_creds = flow.credentials",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "logger.debug(f\"Received credentials: {google_creds}\")",
              "successors": [
                10
              ]
            },
            {
              "id": 10,
              "label": "logger.debug(\"Requesting user email\")",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "username = self._request_email(google_creds)",
              "successors": [
                12
              ]
            },
            {
              "id": 12,
              "label": "logger.debug(f\"User email retrieved: {username}\")",
              "successors": [
                13
              ]
            },
            {
              "id": 13,
              "label": "assert google_creds.token\nassert google_creds.refresh_token\nassert google_creds.expiry\nassert granted_scopes",
              "successors": [
                14
              ]
            },
            {
              "id": 14,
              "label": "credentials = OAuth2Credentials(provider=self.PROVIDER_NAME, title=None, username=username, access_token=SecretStr(google_creds.token), refresh_token=(SecretStr(google_creds.refresh_token)), access_token_expires_at=(int(google_creds.expiry.timestamp()) if google_creds.expiry else None), refresh_token_expires_at=None, scopes=granted_scopes)",
              "successors": [
                15
              ]
            },
            {
              "id": 15,
              "label": "logger.debug(f\"OAuth2Credentials object created successfully with scopes: {credentials.scopes}\")",
              "successors": [
                16
              ]
            },
            {
              "id": 16,
              "label": "return credentials",
              "successors": []
            }
          ]
        },
        {
          "name": "revoke_tokens",
          "type": "function",
          "start_line": 106,
          "end_line": 113,
          "functions": [],
          "classes": [],
          "simplified_code": "    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        session = AuthorizedSession(credentials)\n        session.post(\n            self.revoke_uri,\n            params={\"token\": credentials.access_token.get_secret_value()},\n            headers={\"content-type\": \"application/x-www-form-urlencoded\"},\n        )\n        return True",
          "blocks": [
            {
              "id": 1,
              "label": "session = AuthorizedSession(credentials)\nsession.post(self.revoke_uri, params={\"token\": credentials.access_token.get_secret_value()}, headers={\"content-type\": \"application/x-www-form-urlencoded\"})",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return True",
              "successors": []
            }
          ]
        },
        {
          "name": "_request_email",
          "type": "function",
          "start_line": 115,
          "end_line": 125,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _request_email(\n        self, creds: Credentials | ExternalAccountCredentials\n    ) -> str | None:\n        session = AuthorizedSession(creds)\n        response = session.get(self.EMAIL_ENDPOINT)\n        if not response.ok:\n            logger.error(\n                f\"Failed to get user email. Status code: {response.status_code}\"\n            )\n            return None\n        return response.json()[\"email\"]",
          "blocks": [
            {
              "id": 1,
              "label": "session = AuthorizedSession(creds)\nresponse = session.get(self.EMAIL_ENDPOINT)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if not response.ok:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "logger.error(f\"Failed to get user email. Status code: {response.status_code}\")\nreturn None",
              "successors": []
            },
            {
              "id": 4,
              "label": "return response.json()[\"email\"]",
              "successors": []
            }
          ]
        },
        {
          "name": "_refresh_tokens",
          "type": "function",
          "start_line": 127,
          "end_line": 156,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # Google credentials should ALWAYS have a refresh token\n        assert credentials.refresh_token\n\n        google_creds = Credentials(\n            token=credentials.access_token.get_secret_value(),\n            refresh_token=credentials.refresh_token.get_secret_value(),\n            token_uri=self.token_uri,\n            client_id=self.client_id,\n            client_secret=self.client_secret,\n            scopes=credentials.scopes,\n        )\n        # Google's OAuth library is poorly typed so we need some of these:\n        assert google_creds.refresh_token\n        assert google_creds.scopes\n\n        google_creds.refresh(Request())\n        assert google_creds.expiry\n\n        return OAuth2Credentials(\n            provider=self.PROVIDER_NAME,\n            id=credentials.id,\n            title=credentials.title,\n            username=credentials.username,\n            access_token=SecretStr(google_creds.token),\n            refresh_token=SecretStr(google_creds.refresh_token),\n            access_token_expires_at=int(google_creds.expiry.timestamp()),\n            refresh_token_expires_at=None,\n            scopes=google_creds.scopes,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "assert credentials.refresh_token",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "google_creds = Credentials(token=credentials.access_token.get_secret_value(), refresh_token=credentials.refresh_token.get_secret_value(), token_uri=self.token_uri, client_id=self.client_id, client_secret=self.client_secret, scopes=credentials.scopes, )",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "assert google_creds.refresh_token",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "assert google_creds.scopes",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "google_creds.refresh(Request())",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "assert google_creds.expiry",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "return OAuth2Credentials(provider=self.PROVIDER_NAME, id=credentials.id, title=credentials.title, username=credentials.username, access_token=SecretStr(google_creds.token), refresh_token=SecretStr(google_creds.refresh_token), access_token_expires_at=int(google_creds.expiry.timestamp()), refresh_token_expires_at=None, scopes=google_creds.scopes, )",
              "successors": []
            }
          ]
        },
        {
          "name": "_setup_oauth_flow",
          "type": "function",
          "start_line": 158,
          "end_line": 169,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _setup_oauth_flow(self, scopes: list[str]) -> Flow:\n        return Flow.from_client_config(\n            {\n                \"web\": {\n                    \"client_id\": self.client_id,\n                    \"client_secret\": self.client_secret,\n                    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n                    \"token_uri\": self.token_uri,\n                }\n            },\n            scopes=scopes,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def _setup_oauth_flow(self, scopes: list[str]) -> Flow:",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "return Flow.from_client_config({\"web\": {\"client_id\": self.client_id, \"client_secret\": self.client_secret, \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\": self.token_uri}}, scopes=scopes)",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class GoogleOAuthHandler(BaseOAuthHandler):\n    \"\"\"\n    Based on the documentation at https://developers.google.com/identity/protocols/oauth2/web-server\n    \"\"\"  # noqa\n\n    PROVIDER_NAME = ProviderName.GOOGLE\n    EMAIL_ENDPOINT = \"https://www.googleapis.com/oauth2/v2/userinfo\"\n    DEFAULT_SCOPES = [\n        \"https://www.googleapis.com/auth/userinfo.email\",\n        \"https://www.googleapis.com/auth/userinfo.profile\",\n        \"openid\",\n    ]\n    # --8<-- [end:GoogleOAuthHandlerExample]\n\n        self.revoke_uri = \"https://oauth2.googleapis.com/revoke\"\n\n        return authorization_url\n\n        return credentials\n\n        return True\n\n        return response.json()[\"email\"]\n\n        )\n\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "class GoogleOAuthHandler(BaseOAuthHandler):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "\"\"\"\nBased on the documentation at https://developers.google.com/identity/protocols/oauth2/web-server\n\"\"\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "PROVIDER_NAME = ProviderName.GOOGLE",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "EMAIL_ENDPOINT = \"https://www.googleapis.com/oauth2/v2/userinfo\"",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "DEFAULT_SCOPES = [\n    \"https://www.googleapis.com/auth/userinfo.email\",\n    \"https://www.googleapis.com/auth/userinfo.profile\",\n    \"openid\",\n]",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "self.revoke_uri = \"https://oauth2.googleapis.com/revoke\"",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "return authorization_url",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "return credentials",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "return True",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "return response.json()[\"email\"]",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\n\nfrom google.auth.external_account_authorized_user import (\n    Credentials as ExternalAccountCredentials,\n)\nfrom google.auth.transport.requests import AuthorizedSession, Request\nfrom google.oauth2.credentials import Credentials\nfrom google_auth_oauthlib.flow import Flow\nfrom pydantic import SecretStr\n\nfrom backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\n\nfrom .base import BaseOAuthHandler\n\nlogger = logging.getLogger(__name__)\n\n\n# --8<-- [start:GoogleOAuthHandlerExample]\n        )",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\n\nfrom google.auth.external_account_authorized_user import (\n    Credentials as ExternalAccountCredentials,\n)\nfrom google.auth.transport.requests import AuthorizedSession, Request\nfrom google.oauth2.credentials import Credentials\nfrom google_auth_oauthlib.flow import Flow\nfrom pydantic import SecretStr\n\nfrom backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\n\nfrom .base import BaseOAuthHandler\n\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ]
}