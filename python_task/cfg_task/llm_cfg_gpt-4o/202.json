{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 46,
  "functions": [
    {
      "name": "requires_user",
      "type": "function",
      "start_line": 8,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "simplified_code": "def requires_user(payload: dict = fastapi.Depends(auth_middleware)) -> User:\n    return verify_user(payload, admin_only=False)",
      "blocks": [
        {
          "id": 1,
          "label": "def requires_user(payload: dict = fastapi.Depends(auth_middleware)) -> User:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return verify_user(payload, admin_only=False)",
          "successors": []
        }
      ]
    },
    {
      "name": "requires_admin_user",
      "type": "function",
      "start_line": 12,
      "end_line": 15,
      "functions": [],
      "classes": [],
      "simplified_code": "def requires_admin_user(\n    payload: dict = fastapi.Depends(auth_middleware),\n) -> User:\n    return verify_user(payload, admin_only=True)",
      "blocks": [
        {
          "id": 1,
          "label": "def requires_admin_user(payload: dict = fastapi.Depends(auth_middleware)) -> User:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return verify_user(payload, admin_only=True)",
          "successors": []
        }
      ]
    },
    {
      "name": "verify_user",
      "type": "function",
      "start_line": 18,
      "end_line": 37,
      "functions": [],
      "classes": [],
      "simplified_code": "def verify_user(payload: dict | None, admin_only: bool) -> User:\n    if not payload:\n        if Settings.ENABLE_AUTH:\n            raise fastapi.HTTPException(\n                status_code=401, detail=\"Authorization header is missing\"\n            )\n        # This handles the case when authentication is disabled\n        payload = {\"sub\": DEFAULT_USER_ID, \"role\": \"admin\"}\n\n    user_id = payload.get(\"sub\")\n\n    if not user_id:\n        raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )\n\n    if admin_only and payload[\"role\"] != \"admin\":\n        raise fastapi.HTTPException(status_code=403, detail=\"Admin access required\")\n\n    return User.from_payload(payload)",
      "blocks": [
        {
          "id": 1,
          "label": "if not payload:",
          "successors": [
            2,
            5
          ]
        },
        {
          "id": 2,
          "label": "if Settings.ENABLE_AUTH:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "raise fastapi.HTTPException(status_code=401, detail='Authorization header is missing')",
          "successors": []
        },
        {
          "id": 4,
          "label": "payload = {'sub': DEFAULT_USER_ID, 'role': 'admin'}",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "user_id = payload.get('sub')",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "if not user_id:",
          "successors": [
            7,
            8
          ]
        },
        {
          "id": 7,
          "label": "raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')",
          "successors": []
        },
        {
          "id": 8,
          "label": "if admin_only and payload['role'] != 'admin':",
          "successors": [
            9,
            10
          ]
        },
        {
          "id": 9,
          "label": "raise fastapi.HTTPException(status_code=403, detail='Admin access required')",
          "successors": []
        },
        {
          "id": 10,
          "label": "return User.from_payload(payload)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_user_id",
      "type": "function",
      "start_line": 40,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_user_id(payload: dict = fastapi.Depends(auth_middleware)) -> str:\n    user_id = payload.get(\"sub\")\n    if not user_id:\n        raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )\n    return user_id",
      "blocks": [
        {
          "id": 1,
          "label": "user_id = payload.get(\"sub\")",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if not user_id:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "raise fastapi.HTTPException(status_code=401, detail=\"User ID not found in token\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "return user_id",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import fastapi\n\nfrom .config import Settings\nfrom .middleware import auth_middleware\nfrom .models import DEFAULT_USER_ID, User\n\n\n    return verify_user(payload, admin_only=False)\n\n\n    return verify_user(payload, admin_only=True)\n\n\n    return User.from_payload(payload)\n\n\n    return user_id",
  "blocks": [
    {
      "id": 1,
      "label": "import fastapi",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from .config import Settings",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from .middleware import auth_middleware",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from .models import DEFAULT_USER_ID, User",
      "successors": []
    },
    {
      "id": 5,
      "label": "return verify_user(payload, admin_only=False)",
      "successors": []
    },
    {
      "id": 6,
      "label": "return verify_user(payload, admin_only=True)",
      "successors": []
    },
    {
      "id": 7,
      "label": "return User.from_payload(payload)",
      "successors": []
    },
    {
      "id": 8,
      "label": "return user_id",
      "successors": []
    }
  ]
}