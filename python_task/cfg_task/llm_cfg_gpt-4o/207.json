{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 100,
  "functions": [
    {
      "name": "backtrack",
      "type": "function",
      "start_line": 15,
      "end_line": 65,
      "functions": [],
      "classes": [],
      "simplified_code": "def backtrack(\n    current_word: str, path: list[str], end_word: str, word_set: set[str]\n) -> list[str]:\n    \"\"\"\n    Helper function to perform backtracking to find the transformation\n    from the current_word to the end_word.\n\n    Parameters:\n    current_word (str): The current word in the transformation sequence.\n    path (list[str]): The list of transformations from begin_word to current_word.\n    end_word (str): The target word for transformation.\n    word_set (set[str]): The set of valid words for transformation.\n\n    Returns:\n    list[str]: The list of transformations from begin_word to end_word.\n               Returns an empty list if there is no valid\n                transformation from current_word to end_word.\n\n    Example:\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"})\n    ['hit', 'hot', 'dot', 'lot', 'log', 'cog']\n\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\"})\n    []\n\n    >>> backtrack(\"lead\", [\"lead\"], \"gold\", {\"load\", \"goad\", \"gold\", \"lead\", \"lord\"})\n    ['lead', 'lead', 'load', 'goad', 'gold']\n\n    >>> backtrack(\"game\", [\"game\"], \"code\", {\"came\", \"cage\", \"code\", \"cade\", \"gave\"})\n    ['game', 'came', 'cade', 'code']\n    \"\"\"\n\n    # Base case: If the current word is the end word, return the path\n    if current_word == end_word:\n        return path\n\n    # Try all possible single-letter transformations\n    for i in range(len(current_word)):\n        for c in string.ascii_lowercase:  # Try changing each letter\n            transformed_word = current_word[:i] + c + current_word[i + 1 :]\n            if transformed_word in word_set:\n                word_set.remove(transformed_word)\n                # Recur with the new word added to the path\n                result = backtrack(\n                    transformed_word, [*path, transformed_word], end_word, word_set\n                )\n                if result:  # valid transformation found\n                    return result\n                word_set.add(transformed_word)  # backtrack\n\n    return []  # No valid transformation found",
      "blocks": [
        {
          "id": 1,
          "label": "if current_word == end_word:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return path",
          "successors": []
        },
        {
          "id": 3,
          "label": "for i in range(len(current_word)):",
          "successors": [
            4,
            7
          ]
        },
        {
          "id": 4,
          "label": "for c in string.ascii_lowercase:",
          "successors": [
            5,
            6
          ]
        },
        {
          "id": 5,
          "label": "transformed_word = current_word[:i] + c + current_word[i + 1:]",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "if transformed_word in word_set:",
          "successors": [
            7,
            4
          ]
        },
        {
          "id": 7,
          "label": "word_set.remove(transformed_word)",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "result = backtrack(transformed_word, [*path, transformed_word], end_word, word_set)",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "if result:",
          "successors": [
            10,
            11
          ]
        },
        {
          "id": 10,
          "label": "return result",
          "successors": []
        },
        {
          "id": 11,
          "label": "word_set.add(transformed_word)",
          "successors": [
            4
          ]
        },
        {
          "id": 12,
          "label": "return []",
          "successors": []
        }
      ]
    },
    {
      "name": "word_ladder",
      "type": "function",
      "start_line": 68,
      "end_line": 100,
      "functions": [],
      "classes": [],
      "simplified_code": "def word_ladder(begin_word: str, end_word: str, word_set: set[str]) -> list[str]:\n    \"\"\"\n    Solve the Word Ladder problem using Backtracking and return\n    the list of transformations from begin_word to end_word.\n\n    Parameters:\n    begin_word (str): The word from which the transformation starts.\n    end_word (str): The target word for transformation.\n    word_list (list[str]): The list of valid words for transformation.\n\n    Returns:\n    list[str]: The list of transformations from begin_word to end_word.\n               Returns an empty list if there is no valid transformation.\n\n    Example:\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"])\n    ['hit', 'hot', 'dot', 'lot', 'log', 'cog']\n\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\"])\n    []\n\n    >>> word_ladder(\"lead\", \"gold\", [\"load\", \"goad\", \"gold\", \"lead\", \"lord\"])\n    ['lead', 'lead', 'load', 'goad', 'gold']\n\n    >>> word_ladder(\"game\", \"code\", [\"came\", \"cage\", \"code\", \"cade\", \"gave\"])\n    ['game', 'came', 'cade', 'code']\n    \"\"\"\n\n    if end_word not in word_set:  # no valid transformation possible\n        return []\n\n    # Perform backtracking starting from the begin_word\n    return backtrack(begin_word, [begin_word], end_word, word_set)",
      "blocks": [
        {
          "id": 1,
          "label": "if end_word not in word_set:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "return []",
          "successors": []
        },
        {
          "id": 3,
          "label": "return backtrack(begin_word, [begin_word], end_word, word_set)",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "\"\"\"\nWord Ladder is a classic problem in computer science.\nThe problem is to transform a start word into an end word\nby changing one letter at a time.\nEach intermediate word must be a valid word from a given list of words.\nThe goal is to find a transformation sequence\nfrom the start word to the end word.\n\nWikipedia: https://en.wikipedia.org/wiki/Word_ladder\n\"\"\"\n\nimport string\n\n\n    return []  # No valid transformation found\n\n\n    return backtrack(begin_word, [begin_word], end_word, word_set)",
  "blocks": [
    {
      "id": 1,
      "label": "import string",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "def neighbors(word):\n    for i in range(len(word)):\n        for c in string.ascii_lowercase:\n            yield word[:i] + c + word[i+1:]",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "def ladder_length(begin_word, end_word, word_list):\n    word_set = set(word_list)\n    if end_word not in word_set:\n        return 0",
      "successors": [
        4,
        5,
        6
      ]
    },
    {
      "id": 4,
      "label": "def backtrack(current_word, path, end_word, word_set):\n    if current_word == end_word:\n        return path\n    for next_word in neighbors(current_word):\n        if next_word in word_set:\n            word_set.remove(next_word)\n            result = backtrack(next_word, path + [next_word], end_word, word_set)\n            if result:\n                return result",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "return []",
      "successors": [
        -1
      ]
    },
    {
      "id": 6,
      "label": "return backtrack(begin_word, [begin_word], end_word, word_set)",
      "successors": [
        -1
      ]
    }
  ]
}