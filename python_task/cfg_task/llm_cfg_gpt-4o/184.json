{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 43,
  "functions": [],
  "classes": [
    {
      "name": "ConnectionManager",
      "type": "class",
      "start_line": 9,
      "end_line": 43,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 10,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        self.active_connections: Set[WebSocket] = set()\n        self.subscriptions: Dict[str, Set[WebSocket]] = {}",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.active_connections: Set[WebSocket] = set()\nself.subscriptions: Dict[str, Set[WebSocket]] = {}",
              "successors": []
            }
          ]
        },
        {
          "name": "connect",
          "type": "function",
          "start_line": 14,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.add(websocket)",
          "blocks": [
            {
              "id": 1,
              "label": "await websocket.accept()",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.active_connections.add(websocket)",
              "successors": []
            }
          ]
        },
        {
          "name": "disconnect",
          "type": "function",
          "start_line": 18,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n        for subscribers in self.subscriptions.values():\n            subscribers.discard(websocket)",
          "blocks": [
            {
              "id": 1,
              "label": "def disconnect(self, websocket: WebSocket):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "self.active_connections.remove(websocket)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "for subscribers in self.subscriptions.values():",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "subscribers.discard(websocket)",
              "successors": [
                3
              ]
            },
            {
              "id": 5,
              "label": "",
              "successors": []
            }
          ]
        },
        {
          "name": "subscribe",
          "type": "function",
          "start_line": 23,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def subscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id not in self.subscriptions:\n            self.subscriptions[graph_id] = set()\n        self.subscriptions[graph_id].add(websocket)",
          "blocks": [
            {
              "id": 1,
              "label": "async def subscribe(self, graph_id: str, websocket: WebSocket):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if graph_id not in self.subscriptions:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "self.subscriptions[graph_id] = set()",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "self.subscriptions[graph_id].add(websocket)",
              "successors": []
            }
          ]
        },
        {
          "name": "unsubscribe",
          "type": "function",
          "start_line": 28,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id in self.subscriptions:\n            self.subscriptions[graph_id].discard(websocket)\n            if not self.subscriptions[graph_id]:\n                del self.subscriptions[graph_id]",
          "blocks": [
            {
              "id": 1,
              "label": "if graph_id in self.subscriptions:",
              "successors": [
                2,
                4
              ]
            },
            {
              "id": 2,
              "label": "self.subscriptions[graph_id].discard(websocket)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if not self.subscriptions[graph_id]:",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "pass",
              "successors": []
            },
            {
              "id": 5,
              "label": "del self.subscriptions[graph_id]",
              "successors": [
                4
              ]
            }
          ]
        },
        {
          "name": "send_execution_result",
          "type": "function",
          "start_line": 34,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def send_execution_result(self, result: execution.ExecutionResult):\n        graph_id = result.graph_id\n        if graph_id in self.subscriptions:\n            message = WsMessage(\n                method=Methods.EXECUTION_EVENT,\n                channel=graph_id,\n                data=result.model_dump(),\n            ).model_dump_json()\n            for connection in self.subscriptions[graph_id]:\n                await connection.send_text(message)",
          "blocks": [
            {
              "id": 1,
              "label": "graph_id = result.graph_id",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if graph_id in self.subscriptions:",
              "successors": [
                3,
                5
              ]
            },
            {
              "id": 3,
              "label": "message = WsMessage(method=Methods.EXECUTION_EVENT, channel=graph_id, data=result.model_dump(),).model_dump_json()",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "for connection in self.subscriptions[graph_id]:",
              "successors": [
                5,
                4
              ]
            },
            {
              "id": 5,
              "label": "await connection.send_text(message)",
              "successors": [
                4
              ]
            }
          ]
        }
      ],
      "simplified_code": "class ConnectionManager:\n        self.subscriptions: Dict[str, Set[WebSocket]] = {}\n\n        self.active_connections.add(websocket)\n\n            subscribers.discard(websocket)\n\n        self.subscriptions[graph_id].add(websocket)\n\n                del self.subscriptions[graph_id]\n\n                await connection.send_text(message)",
      "blocks": [
        {
          "id": 1,
          "label": "self.subscriptions: Dict[str, Set[WebSocket]] = {}",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "self.active_connections.add(websocket)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "subscribers.discard(websocket)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "self.subscriptions[graph_id].add(websocket)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "del self.subscriptions[graph_id]",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "await connection.send_text(message)",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from typing import Dict, Set\n\nfrom fastapi import WebSocket\n\nfrom backend.data import execution\nfrom backend.server.model import Methods, WsMessage\n\n\n                await connection.send_text(message)",
  "blocks": [
    {
      "id": 1,
      "label": "from typing import Dict, Set",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from fastapi import WebSocket",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from backend.data import execution",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from backend.server.model import Methods, WsMessage",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "await connection.send_text(message)",
      "successors": []
    }
  ]
}