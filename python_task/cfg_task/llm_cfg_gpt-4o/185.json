{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 82,
  "functions": [
    {
      "name": "combination_lists",
      "type": "function",
      "start_line": 13,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": "def combination_lists(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"\n    return [list(x) for x in combinations(range(1, n + 1), k)]",
      "blocks": [
        {
          "id": 1,
          "label": "def combination_lists(n: int, k: int) -> list[list[int]]:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "\"\"\"\n>>> combination_lists(n=4, k=2)\n[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n\"\"\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return [list(x) for x in combinations(range(1, n + 1), k)]",
          "successors": []
        }
      ]
    },
    {
      "name": "generate_all_combinations",
      "type": "function",
      "start_line": 21,
      "end_line": 49,
      "functions": [],
      "classes": [],
      "simplified_code": "def generate_all_combinations(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must not be negative\")\n    if n < 0:\n        raise ValueError(\"n must not be negative\")\n\n    result: list[list[int]] = []\n    create_all_state(1, n, k, [], result)\n    return result",
      "blocks": [
        {
          "id": 1,
          "label": "def generate_all_combinations(n: int, k: int) -> list[list[int]]:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if k < 0:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "raise ValueError(\"k must not be negative\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "if n < 0:",
          "successors": [
            5,
            6
          ]
        },
        {
          "id": 5,
          "label": "raise ValueError(\"n must not be negative\")",
          "successors": []
        },
        {
          "id": 6,
          "label": "result: list[list[int]] = []",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "create_all_state(1, n, k, [], result)",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "return result",
          "successors": []
        }
      ]
    },
    {
      "name": "create_all_state",
      "type": "function",
      "start_line": 52,
      "end_line": 66,
      "functions": [],
      "classes": [],
      "simplified_code": "def create_all_state(\n    increment: int,\n    total_number: int,\n    level: int,\n    current_list: list[int],\n    total_list: list[list[int]],\n) -> None:\n    if level == 0:\n        total_list.append(current_list[:])\n        return\n\n    for i in range(increment, total_number - level + 2):\n        current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()",
      "blocks": [
        {
          "id": 1,
          "label": "if level == 0:",
          "successors": [
            2,
            4
          ]
        },
        {
          "id": 2,
          "label": "total_list.append(current_list[:])",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return",
          "successors": []
        },
        {
          "id": 4,
          "label": "for i in range(increment, total_number - level + 2):",
          "successors": [
            5,
            6
          ]
        },
        {
          "id": 5,
          "label": "current_list.append(i)\ncreate_all_state(i + 1, total_number, level - 1, current_list, total_list)\ncurrent_list.pop()",
          "successors": [
            4
          ]
        },
        {
          "id": 6,
          "label": "end of function",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "\"\"\"\nIn this problem, we want to determine all possible combinations of k\nnumbers out of 1 ... n. We use backtracking to solve this problem.\n\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom itertools import combinations\n\n\n    return [list(x) for x in combinations(range(1, n + 1), k)]\n\n\n    return result\n\n\n        current_list.pop()\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    print(generate_all_combinations(n=4, k=2))\n    tests = ((n, k) for n in range(1, 5) for k in range(1, 5))\n    for n, k in tests:\n        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))\n\n    print(\"Benchmark:\")\n    from timeit import timeit\n\n    for func in (\"combination_lists\", \"generate_all_combinations\"):\n        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
  "blocks": [
    {
      "id": 1,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        2,
        3
      ]
    },
    {
      "id": 2,
      "label": "from doctest import testmod",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "testmod()",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "print(generate_all_combinations(n=4, k=2))",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "tests = ((n, k) for n in range(1, 5) for k in range(1, 5))",
      "successors": [
        6,
        9
      ]
    },
    {
      "id": 6,
      "label": "for n, k in tests:",
      "successors": [
        7,
        9
      ]
    },
    {
      "id": 7,
      "label": "print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
      "successors": [
        6
      ]
    },
    {
      "id": 8,
      "label": "print(\"Benchmark:\")",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "from timeit import timeit",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "for func in (\"combination_lists\", \"generate_all_combinations\"):",
      "successors": [
        11,
        12
      ]
    },
    {
      "id": 11,
      "label": "print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
      "successors": [
        10
      ]
    }
  ]
}