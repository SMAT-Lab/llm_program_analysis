{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 422,
  "functions": [
    {
      "name": "login",
      "type": "function",
      "start_line": 48,
      "end_line": 69,
      "functions": [],
      "classes": [],
      "simplified_code": "def login(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to initiate an OAuth flow for\")\n    ],\n    user_id: Annotated[str, Depends(get_user_id)],\n    request: Request,\n    scopes: Annotated[\n        str, Query(title=\"Comma-separated list of authorization scopes\")\n    ] = \"\",\n) -> LoginResponse:\n    handler = _get_provider_oauth_handler(request, provider)\n\n    requested_scopes = scopes.split(\",\") if scopes else []\n\n    # Generate and store a secure random state token along with the scopes\n    state_token = creds_manager.store.store_state_token(\n        user_id, provider, requested_scopes\n    )\n\n    login_url = handler.get_login_url(requested_scopes, state_token)\n\n    return LoginResponse(login_url=login_url, state_token=state_token)",
      "blocks": [
        {
          "id": 1,
          "label": "handler = _get_provider_oauth_handler(request, provider)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "requested_scopes = scopes.split(\",\") if scopes else []",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "state_token = creds_manager.store.store_state_token(user_id, provider, requested_scopes)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "login_url = handler.get_login_url(requested_scopes, state_token)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "return LoginResponse(login_url=login_url, state_token=state_token)",
          "successors": []
        }
      ]
    },
    {
      "name": "callback",
      "type": "function",
      "start_line": 82,
      "end_line": 138,
      "functions": [],
      "classes": [],
      "simplified_code": "def callback(\n    provider: Annotated[\n        ProviderName, Path(title=\"The target provider for this OAuth exchange\")\n    ],\n    code: Annotated[str, Body(title=\"Authorization code acquired by user login\")],\n    state_token: Annotated[str, Body(title=\"Anti-CSRF nonce\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n    request: Request,\n) -> CredentialsMetaResponse:\n    logger.debug(f\"Received OAuth callback for provider: {provider}\")\n    handler = _get_provider_oauth_handler(request, provider)\n\n    # Verify the state token\n    if not creds_manager.store.verify_state_token(user_id, state_token, provider):\n        logger.warning(f\"Invalid or expired state token for user {user_id}\")\n        raise HTTPException(status_code=400, detail=\"Invalid or expired state token\")\n\n    try:\n        scopes = creds_manager.store.get_any_valid_scopes_from_state_token(\n            user_id, state_token, provider\n        )\n        logger.debug(f\"Retrieved scopes from state token: {scopes}\")\n\n        scopes = handler.handle_default_scopes(scopes)\n\n        credentials = handler.exchange_code_for_tokens(code, scopes)\n        logger.debug(f\"Received credentials with final scopes: {credentials.scopes}\")\n\n        # Check if the granted scopes are sufficient for the requested scopes\n        if not set(scopes).issubset(set(credentials.scopes)):\n            # For now, we'll just log the warning and continue\n            logger.warning(\n                f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"\n            )\n\n    except Exception as e:\n        logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")\n        raise HTTPException(\n            status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\"\n        )\n\n    # TODO: Allow specifying `title` to set on `credentials`\n    creds_manager.create(user_id, credentials)\n\n    logger.debug(\n        f\"Successfully processed OAuth callback for user {user_id} \"\n        f\"and provider {provider.value}\"\n    )\n    return CredentialsMetaResponse(\n        id=credentials.id,\n        provider=credentials.provider,\n        type=credentials.type,\n        title=credentials.title,\n        scopes=credentials.scopes,\n        username=credentials.username,\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "logger.debug(f\"Received OAuth callback for provider: {provider}\")\nhandler = _get_provider_oauth_handler(request, provider)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if not creds_manager.store.verify_state_token(user_id, state_token, provider):",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "logger.warning(f\"Invalid or expired state token for user {user_id}\")\nraise HTTPException(status_code=400, detail=\"Invalid or expired state token\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "try:",
          "successors": [
            5,
            11
          ]
        },
        {
          "id": 5,
          "label": "scopes = creds_manager.store.get_any_valid_scopes_from_state_token(user_id, state_token, provider)\nlogger.debug(f\"Retrieved scopes from state token: {scopes}\")",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "scopes = handler.handle_default_scopes(scopes)",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "credentials = handler.exchange_code_for_tokens(code, scopes)\nlogger.debug(f\"Received credentials with final scopes: {credentials.scopes}\")",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "if not set(scopes).issubset(set(credentials.scopes)):",
          "successors": [
            9,
            10
          ]
        },
        {
          "id": 9,
          "label": "logger.warning(f\"Granted scopes {credentials.scopes} for provider {provider.value} do not include all requested scopes {scopes}\")",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "creds_manager.create(user_id, credentials)\nlogger.debug(f\"Successfully processed OAuth callback for user {user_id} and provider {provider.value}\")\nreturn CredentialsMetaResponse(id=credentials.id, provider=credentials.provider, type=credentials.type, title=credentials.title, scopes=credentials.scopes, username=credentials.username)",
          "successors": []
        },
        {
          "id": 11,
          "label": "except Exception as e:",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")\nraise HTTPException(status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "list_credentials",
      "type": "function",
      "start_line": 142,
      "end_line": 156,
      "functions": [],
      "classes": [],
      "simplified_code": "def list_credentials(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[CredentialsMetaResponse]:\n    credentials = creds_manager.store.get_all_creds(user_id)\n    return [\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]",
      "blocks": [
        {
          "id": 1,
          "label": "credentials = creds_manager.store.get_all_creds(user_id)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return [CredentialsMetaResponse(id=cred.id, provider=cred.provider, type=cred.type, title=cred.title, scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, username=cred.username if isinstance(cred, OAuth2Credentials) else None,) for cred in credentials]",
          "successors": []
        }
      ]
    },
    {
      "name": "list_credentials_by_provider",
      "type": "function",
      "start_line": 160,
      "end_line": 177,
      "functions": [],
      "classes": [],
      "simplified_code": "def list_credentials_by_provider(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to list credentials for\")\n    ],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[CredentialsMetaResponse]:\n    credentials = creds_manager.store.get_creds_by_provider(user_id, provider)\n    return [\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]",
      "blocks": [
        {
          "id": 1,
          "label": "credentials = creds_manager.store.get_creds_by_provider(user_id, provider)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "return [CredentialsMetaResponse(id=cred.id, provider=cred.provider, type=cred.type, title=cred.title, scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None, username=cred.username if isinstance(cred, OAuth2Credentials) else None) for cred in credentials]",
          "successors": []
        }
      ]
    },
    {
      "name": "get_credential",
      "type": "function",
      "start_line": 181,
      "end_line": 195,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_credential(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to retrieve credentials for\")\n    ],\n    cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Credentials:\n    credential = creds_manager.get(user_id, cred_id)\n    if not credential:\n        raise HTTPException(status_code=404, detail=\"Credentials not found\")\n    if credential.provider != provider:\n        raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )\n    return credential",
      "blocks": [
        {
          "id": 1,
          "label": "credential = creds_manager.get(user_id, cred_id)",
          "successors": [
            2,
            4
          ]
        },
        {
          "id": 2,
          "label": "if not credential:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "raise HTTPException(status_code=404, detail=\"Credentials not found\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "if credential.provider != provider:",
          "successors": [
            5,
            6
          ]
        },
        {
          "id": 5,
          "label": "raise HTTPException(status_code=404, detail=\"Credentials do not match the specified provider\")",
          "successors": []
        },
        {
          "id": 6,
          "label": "return credential",
          "successors": []
        }
      ]
    },
    {
      "name": "create_api_key_credentials",
      "type": "function",
      "start_line": 199,
      "end_line": 223,
      "functions": [],
      "classes": [],
      "simplified_code": "def create_api_key_credentials(\n    user_id: Annotated[str, Depends(get_user_id)],\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to create credentials for\")\n    ],\n    api_key: Annotated[str, Body(title=\"The API key to store\")],\n    title: Annotated[str, Body(title=\"Optional title for the credentials\")],\n    expires_at: Annotated[\n        int | None, Body(title=\"Unix timestamp when the key expires\")\n    ] = None,\n) -> APIKeyCredentials:\n    new_credentials = APIKeyCredentials(\n        provider=provider,\n        api_key=SecretStr(api_key),\n        title=title,\n        expires_at=expires_at,\n    )\n\n    try:\n        creds_manager.create(user_id, new_credentials)\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to store credentials: {str(e)}\"\n        )\n    return new_credentials",
      "blocks": [
        {
          "id": 1,
          "label": "new_credentials = APIKeyCredentials(provider=provider, api_key=SecretStr(api_key), title=title, expires_at=expires_at)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "try:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "creds_manager.create(user_id, new_credentials)",
          "successors": [
            5
          ]
        },
        {
          "id": 4,
          "label": "except Exception as e:",
          "successors": [
            6
          ]
        },
        {
          "id": 5,
          "label": "return new_credentials",
          "successors": []
        },
        {
          "id": 6,
          "label": "raise HTTPException(status_code=500, detail=f\"Failed to store credentials: {str(e)}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "delete_credentials",
      "type": "function",
      "start_line": 242,
      "end_line": 273,
      "functions": [],
      "classes": [],
      "simplified_code": "async def delete_credentials(\n    request: Request,\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to delete credentials for\")\n    ],\n    cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n    force: Annotated[\n        bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\")\n    ] = False,\n) -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse:\n    creds = creds_manager.store.get_creds_by_id(user_id, cred_id)\n    if not creds:\n        raise HTTPException(status_code=404, detail=\"Credentials not found\")\n    if creds.provider != provider:\n        raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )\n\n    try:\n        await remove_all_webhooks_for_credentials(creds, force)\n    except NeedConfirmation as e:\n        return CredentialsDeletionNeedsConfirmationResponse(message=str(e))\n\n    creds_manager.delete(user_id, cred_id)\n\n    tokens_revoked = None\n    if isinstance(creds, OAuth2Credentials):\n        handler = _get_provider_oauth_handler(request, provider)\n        tokens_revoked = handler.revoke_tokens(creds)\n\n    return CredentialsDeletionResponse(revoked=tokens_revoked)",
      "blocks": [
        {
          "id": 1,
          "label": "creds = creds_manager.store.get_creds_by_id(user_id, cred_id)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if not creds:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "raise HTTPException(status_code=404, detail=\"Credentials not found\")",
          "successors": []
        },
        {
          "id": 4,
          "label": "if creds.provider != provider:",
          "successors": [
            5,
            6
          ]
        },
        {
          "id": 5,
          "label": "raise HTTPException(\n    status_code=404, detail=\"Credentials do not match the specified provider\"\n)",
          "successors": []
        },
        {
          "id": 6,
          "label": "try:\n    await remove_all_webhooks_for_credentials(creds, force)",
          "successors": [
            7,
            8
          ]
        },
        {
          "id": 7,
          "label": "except NeedConfirmation as e:\n    return CredentialsDeletionNeedsConfirmationResponse(message=str(e))",
          "successors": [
            11
          ]
        },
        {
          "id": 8,
          "label": "creds_manager.delete(user_id, cred_id)",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "tokens_revoked = None",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "if isinstance(creds, OAuth2Credentials):",
          "successors": [
            11,
            12
          ]
        },
        {
          "id": 11,
          "label": "return CredentialsDeletionResponse(revoked=tokens_revoked)",
          "successors": []
        },
        {
          "id": 12,
          "label": "handler = _get_provider_oauth_handler(request, provider)\n    tokens_revoked = handler.revoke_tokens(creds)",
          "successors": [
            11
          ]
        }
      ]
    },
    {
      "name": "webhook_ingress_generic",
      "type": "function",
      "start_line": 283,
      "end_line": 323,
      "functions": [],
      "classes": [],
      "simplified_code": "async def webhook_ingress_generic(\n    request: Request,\n    provider: Annotated[\n        ProviderName, Path(title=\"Provider where the webhook was registered\")\n    ],\n    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],\n):\n    logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\")\n    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    webhook = await get_webhook(webhook_id)\n    logger.debug(f\"Webhook #{webhook_id}: {webhook}\")\n    payload, event_type = await webhook_manager.validate_payload(webhook, request)\n    logger.debug(\n        f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \"\n        f\"with payload {payload}\"\n    )\n\n    webhook_event = WebhookEvent(\n        provider=provider,\n        webhook_id=webhook_id,\n        event_type=event_type,\n        payload=payload,\n    )\n    await publish_webhook_event(webhook_event)\n    logger.debug(f\"Webhook event published: {webhook_event}\")\n\n    if not webhook.attached_nodes:\n        return\n\n    executor = get_service_client(ExecutionManager)\n    for node in webhook.attached_nodes:\n        logger.debug(f\"Webhook-attached node: {node}\")\n        if not node.is_triggered_by_event_type(event_type):\n            logger.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")\n            continue\n        logger.debug(f\"Executing graph #{node.graph_id} node #{node.id}\")\n        executor.add_execution(\n            node.graph_id,\n            data={f\"webhook_{webhook_id}_payload\": payload},\n            user_id=webhook.user_id,\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\")",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "webhook = await get_webhook(webhook_id)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "logger.debug(f\"Webhook #{webhook_id}: {webhook}\")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "payload, event_type = await webhook_manager.validate_payload(webhook, request)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "logger.debug(f\"Validated {provider.value} {webhook.webhook_type} {event_type} event with payload {payload}\")",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "webhook_event = WebhookEvent(provider=provider, webhook_id=webhook_id, event_type=event_type, payload=payload)",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "await publish_webhook_event(webhook_event)",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "logger.debug(f\"Webhook event published: {webhook_event}\")",
          "successors": [
            10,
            11
          ]
        },
        {
          "id": 10,
          "label": "if not webhook.attached_nodes:",
          "successors": [
            14,
            11
          ]
        },
        {
          "id": 11,
          "label": "return",
          "successors": []
        },
        {
          "id": 12,
          "label": "executor = get_service_client(ExecutionManager)",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "for node in webhook.attached_nodes:",
          "successors": [
            14,
            15
          ]
        },
        {
          "id": 14,
          "label": "logger.debug(f\"Webhook-attached node: {node}\")",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "if not node.is_triggered_by_event_type(event_type):",
          "successors": [
            16,
            18
          ]
        },
        {
          "id": 16,
          "label": "logger.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")",
          "successors": [
            17
          ]
        },
        {
          "id": 17,
          "label": "continue",
          "successors": [
            13
          ]
        },
        {
          "id": 18,
          "label": "logger.debug(f\"Executing graph #{node.graph_id} node #{node.id}\")",
          "successors": [
            19
          ]
        },
        {
          "id": 19,
          "label": "executor.add_execution(node.graph_id, data={f\"webhook_{webhook_id}_payload\": payload}, user_id=webhook.user_id)",
          "successors": [
            13
          ]
        }
      ]
    },
    {
      "name": "webhook_ping",
      "type": "function",
      "start_line": 327,
      "end_line": 347,
      "functions": [],
      "classes": [],
      "simplified_code": "async def webhook_ping(\n    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],\n    user_id: Annotated[str, Depends(get_user_id)],  # require auth\n):\n    webhook = await get_webhook(webhook_id)\n    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]()\n\n    credentials = (\n        creds_manager.get(user_id, webhook.credentials_id)\n        if webhook.credentials_id\n        else None\n    )\n    try:\n        await webhook_manager.trigger_ping(webhook, credentials)\n    except NotImplementedError:\n        return False\n\n    if not await wait_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10):\n        raise HTTPException(status_code=504, detail=\"Webhook ping timed out\")\n\n    return True",
      "blocks": [
        {
          "id": 1,
          "label": "webhook = await get_webhook(webhook_id); webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider](); credentials = (creds_manager.get(user_id, webhook.credentials_id) if webhook.credentials_id else None)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "try:",
          "successors": [
            3,
            4
          ]
        },
        {
          "id": 3,
          "label": "await webhook_manager.trigger_ping(webhook, credentials)",
          "successors": [
            5
          ]
        },
        {
          "id": 4,
          "label": "except NotImplementedError: return False",
          "successors": []
        },
        {
          "id": 5,
          "label": "if not await wait_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10):",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 6,
          "label": "raise HTTPException(status_code=504, detail=\"Webhook ping timed out\")",
          "successors": []
        },
        {
          "id": 7,
          "label": "return True",
          "successors": []
        }
      ]
    },
    {
      "name": "remove_all_webhooks_for_credentials",
      "type": "function",
      "start_line": 353,
      "end_line": 391,
      "functions": [],
      "classes": [],
      "simplified_code": "async def remove_all_webhooks_for_credentials(\n    credentials: Credentials, force: bool = False\n) -> None:\n    \"\"\"\n    Remove and deregister all webhooks that were registered using the given credentials.\n\n    Params:\n        credentials: The credentials for which to remove the associated webhooks.\n        force: Whether to proceed if any of the webhooks are still in use.\n\n    Raises:\n        NeedConfirmation: If any of the webhooks are still in use and `force` is `False`\n    \"\"\"\n    webhooks = await get_all_webhooks_by_creds(credentials.id)\n    if credentials.provider not in WEBHOOK_MANAGERS_BY_NAME:\n        if webhooks:\n            logger.error(\n                f\"Credentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"\n            )\n        return\n    if any(w.attached_nodes for w in webhooks) and not force:\n        raise NeedConfirmation(\n            \"Some webhooks linked to these credentials are still in use by an agent\"\n        )\n    for webhook in webhooks:\n        # Unlink all nodes\n        for node in webhook.attached_nodes or []:\n            await set_node_webhook(node.id, None)\n\n        # Prune the webhook\n        webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]()\n        success = await webhook_manager.prune_webhook_if_dangling(\n            webhook.id, credentials\n        )\n        if not success:\n            logger.warning(f\"Webhook #{webhook.id} failed to prune\")\n",
      "blocks": [
        {
          "id": 1,
          "label": "webhooks = await get_all_webhooks_by_creds(credentials.id)",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if credentials.provider not in WEBHOOK_MANAGERS_BY_NAME:",
          "successors": [
            3,
            6
          ]
        },
        {
          "id": 3,
          "label": "if webhooks:",
          "successors": [
            4,
            5
          ]
        },
        {
          "id": 4,
          "label": "logger.error(f\"Credentials #{credentials.id} for provider {credentials.provider} are attached to {len(webhooks)} webhooks, but there is no available WebhooksHandler for {credentials.provider}\")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "return",
          "successors": []
        },
        {
          "id": 6,
          "label": "if any(w.attached_nodes for w in webhooks) and not force:",
          "successors": [
            7,
            8
          ]
        },
        {
          "id": 7,
          "label": "raise NeedConfirmation(\"Some webhooks linked to these credentials are still in use by an agent\")",
          "successors": []
        },
        {
          "id": 8,
          "label": "for webhook in webhooks:",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "for node in webhook.attached_nodes or []:\n await set_node_webhook(node.id, None)",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]()",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "success = await webhook_manager.prune_webhook_if_dangling(webhook.id, credentials)",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "if not success:",
          "successors": [
            13,
            14
          ]
        },
        {
          "id": 13,
          "label": "logger.warning(f\"Webhook #{webhook.id} failed to prune\")",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "",
          "successors": []
        }
      ]
    },
    {
      "name": "_get_provider_oauth_handler",
      "type": "function",
      "start_line": 393,
      "end_line": 422,
      "functions": [],
      "classes": [],
      "simplified_code": "def _get_provider_oauth_handler(\n    req: Request, provider_name: ProviderName\n) -> \"BaseOAuthHandler\":\n    if provider_name not in HANDLERS_BY_NAME:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"Provider '{provider_name.value}' does not support OAuth\",\n        )\n\n    client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id\")\n    client_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret\")\n    if not (client_id and client_secret):\n        raise HTTPException(\n            status_code=501,\n            detail=(\n                f\"Integration with provider '{provider_name.value}' is not configured\"\n            ),\n        )\n\n    handler_class = HANDLERS_BY_NAME[provider_name]\n    frontend_base_url = (\n        settings.config.frontend_base_url\n        or settings.config.platform_base_url\n        or str(req.base_url)\n    )\n    return handler_class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "if provider_name not in HANDLERS_BY_NAME:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "raise HTTPException(status_code=404, detail=f\"Provider '{provider_name.value}' does not support OAuth\")",
          "successors": []
        },
        {
          "id": 3,
          "label": "client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id\")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "client_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret\")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "if not (client_id and client_secret):",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 6,
          "label": "raise HTTPException(status_code=501, detail=(f\"Integration with provider '{provider_name.value}' is not configured\"))",
          "successors": []
        },
        {
          "id": 7,
          "label": "handler_class = HANDLERS_BY_NAME[provider_name]",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "frontend_base_url = (settings.config.frontend_base_url or settings.config.platform_base_url or str(req.base_url))",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "return handler_class(client_id=client_id, client_secret=client_secret, redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\")",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "LoginResponse",
      "type": "class",
      "start_line": 42,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "simplified_code": "class LoginResponse(BaseModel):\n    login_url: str\n    state_token: str",
      "blocks": [
        {
          "id": 1,
          "label": "class LoginResponse(BaseModel):",
          "successors": []
        },
        {
          "id": 2,
          "label": "login_url: str",
          "successors": []
        },
        {
          "id": 3,
          "label": "state_token: str",
          "successors": []
        }
      ]
    },
    {
      "name": "CredentialsMetaResponse",
      "type": "class",
      "start_line": 72,
      "end_line": 78,
      "functions": [],
      "classes": [],
      "simplified_code": "class CredentialsMetaResponse(BaseModel):\n    id: str\n    provider: str\n    type: CredentialsType\n    title: str | None\n    scopes: list[str] | None\n    username: str | None",
      "blocks": [
        {
          "id": 1,
          "label": "class CredentialsMetaResponse(BaseModel):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "id: str",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "provider: str",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "type: CredentialsType",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "title: str | None",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "scopes: list[str] | None",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "username: str | None",
          "successors": []
        }
      ]
    },
    {
      "name": "CredentialsDeletionResponse",
      "type": "class",
      "start_line": 226,
      "end_line": 232,
      "functions": [],
      "classes": [],
      "simplified_code": "class CredentialsDeletionResponse(BaseModel):\n    deleted: Literal[True] = True\n    revoked: bool | None = Field(\n        description=\"Indicates whether the credentials were also revoked by their \"\n        \"provider. `None`/`null` if not applicable, e.g. when deleting \"\n        \"non-revocable credentials such as API keys.\"\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "class CredentialsDeletionResponse(BaseModel):",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "deleted: Literal[True] = True",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "revoked: bool | None = Field(...)",
          "successors": []
        }
      ]
    },
    {
      "name": "CredentialsDeletionNeedsConfirmationResponse",
      "type": "class",
      "start_line": 235,
      "end_line": 238,
      "functions": [],
      "classes": [],
      "simplified_code": "class CredentialsDeletionNeedsConfirmationResponse(BaseModel):\n    deleted: Literal[False] = False\n    need_confirmation: Literal[True] = True\n    message: str",
      "blocks": [
        {
          "id": 1,
          "label": "class CredentialsDeletionNeedsConfirmationResponse(BaseModel):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "deleted: Literal[False] = False",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "need_confirmation: Literal[True] = True",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "message: str",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\nfrom typing import TYPE_CHECKING, Annotated, Literal\n\nfrom fastapi import APIRouter, Body, Depends, HTTPException, Path, Query, Request\nfrom pydantic import BaseModel, Field, SecretStr\n\nfrom backend.data.graph import set_node_webhook\nfrom backend.data.integrations import (\n    WebhookEvent,\n    get_all_webhooks_by_creds,\n    get_webhook,\n    publish_webhook_event,\n    wait_for_webhook_event,\n)\nfrom backend.data.model import (\n    APIKeyCredentials,\n    Credentials,\n    CredentialsType,\n    OAuth2Credentials,\n)\nfrom backend.executor.manager import ExecutionManager\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.oauth import HANDLERS_BY_NAME\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME\nfrom backend.util.exceptions import NeedConfirmation\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\n    from backend.integrations.oauth import BaseOAuthHandler\n\nfrom ..utils import get_user_id\n\nlogger = logging.getLogger(__name__)\nsettings = Settings()\nrouter = APIRouter()\n\ncreds_manager = IntegrationCredentialsManager()\n\n\n    state_token: str\n\n\n@router.get(\"/{provider}/login\")\n    return LoginResponse(login_url=login_url, state_token=state_token)\n\n\n    username: str | None\n\n\n@router.post(\"/{provider}/callback\")\n    )\n\n\n@router.get(\"/credentials\")\n    ]\n\n\n@router.get(\"/{provider}/credentials\")\n    ]\n\n\n@router.get(\"/{provider}/credentials/{cred_id}\")\n    return credential\n\n\n@router.post(\"/{provider}/credentials\", status_code=201)\n    return new_credentials\n\n\n    )\n\n\n    message: str\n\n\n@router.delete(\"/{provider}/credentials/{cred_id}\")\n    return CredentialsDeletionResponse(revoked=tokens_revoked)\n\n\n# ------------------------- WEBHOOK STUFF -------------------------- #\n\n\n# \u26a0\ufe0f Note\n# No user auth check because this endpoint is for webhook ingress and relies on\n# validation by the provider-specific `WebhooksManager`.\n@router.post(\"/{provider}/webhooks/{webhook_id}/ingress\")\n        )\n\n\n@router.post(\"/webhooks/{webhook_id}/ping\")\n    return True\n\n\n# --------------------------- UTILITIES ---------------------------- #\n\n\n\n\n    )",
  "blocks": [
    {
      "id": 1,
      "label": "import logging",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from typing import TYPE_CHECKING, Annotated, Literal",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from fastapi import APIRouter, Body, Depends, HTTPException, Path, Query, Request",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from pydantic import BaseModel, Field, SecretStr",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from backend.data.graph import set_node_webhook",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from backend.data.integrations import ( WebhookEvent, get_all_webhooks_by_creds, get_webhook, publish_webhook_event, wait_for_webhook_event, )",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.data.model import ( APIKeyCredentials, Credentials, CredentialsType, OAuth2Credentials, )",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "from backend.executor.manager import ExecutionManager",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "from backend.integrations.creds_manager import IntegrationCredentialsManager",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "from backend.integrations.oauth import HANDLERS_BY_NAME",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "from backend.integrations.providers import ProviderName",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "from backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME",
      "successors": [
        13
      ]
    },
    {
      "id": 13,
      "label": "from backend.util.exceptions import NeedConfirmation",
      "successors": [
        14
      ]
    },
    {
      "id": 14,
      "label": "from backend.util.service import get_service_client",
      "successors": [
        15
      ]
    },
    {
      "id": 15,
      "label": "from backend.util.settings import Settings",
      "successors": [
        16
      ]
    },
    {
      "id": 16,
      "label": "if TYPE_CHECKING: from backend.integrations.oauth import BaseOAuthHandler",
      "successors": [
        17
      ]
    },
    {
      "id": 17,
      "label": "from ..utils import get_user_id",
      "successors": [
        18
      ]
    },
    {
      "id": 18,
      "label": "logger = logging.getLogger(__name__)",
      "successors": [
        19
      ]
    },
    {
      "id": 19,
      "label": "settings = Settings()",
      "successors": [
        20
      ]
    },
    {
      "id": 20,
      "label": "router = APIRouter()",
      "successors": [
        21
      ]
    },
    {
      "id": 21,
      "label": "creds_manager = IntegrationCredentialsManager()",
      "successors": [
        22
      ]
    },
    {
      "id": 22,
      "label": "@router.get(\"/{provider}/login\") return LoginResponse(login_url=login_url, state_token=state_token)",
      "successors": [
        23
      ]
    },
    {
      "id": 23,
      "label": "@router.post(\"/{provider}/callback\")",
      "successors": [
        24
      ]
    },
    {
      "id": 24,
      "label": "@router.get(\"/credentials\")",
      "successors": [
        25
      ]
    },
    {
      "id": 25,
      "label": "@router.get(\"/{provider}/credentials\")",
      "successors": [
        26
      ]
    },
    {
      "id": 26,
      "label": "@router.get(\"/{provider}/credentials/{cred_id}\") return credential",
      "successors": [
        27
      ]
    },
    {
      "id": 27,
      "label": "@router.post(\"/{provider}/credentials\", status_code=201) return new_credentials",
      "successors": [
        28
      ]
    },
    {
      "id": 28,
      "label": "@router.delete(\"/{provider}/credentials/{cred_id}\") return CredentialsDeletionResponse(revoked=tokens_revoked)",
      "successors": [
        29
      ]
    },
    {
      "id": 29,
      "label": "# ------------------------- WEBHOOK STUFF -------------------------- #",
      "successors": [
        30
      ]
    },
    {
      "id": 30,
      "label": "@router.post(\"/{provider}/webhooks/{webhook_id}/ingress\")",
      "successors": [
        31
      ]
    },
    {
      "id": 31,
      "label": "@router.post(\"/webhooks/{webhook_id}/ping\") return True",
      "successors": []
    }
  ]
}