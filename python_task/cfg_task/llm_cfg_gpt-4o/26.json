{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 325,
  "functions": [],
  "classes": [
    {
      "name": "ImageSize",
      "type": "class",
      "start_line": 18,
      "end_line": 27,
      "functions": [],
      "simplified_code": "class ImageSize(str, Enum):\n    \"\"\"\n    Semantic sizes that map reliably across all models\n    \"\"\"\n\n    SQUARE = \"square\"  # For profile pictures, icons, etc.\n    LANDSCAPE = \"landscape\"  # For traditional photos, scenes\n    PORTRAIT = \"portrait\"  # For vertical photos, portraits\n    WIDE = \"wide\"  # For cinematic, desktop wallpapers\n    TALL = \"tall\"  # For mobile wallpapers, stories",
      "blocks": [
        {
          "id": 1,
          "label": "class ImageSize(str, Enum):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "\"\"\"\nSemantic sizes that map reliably across all models\n\"\"\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "SQUARE = \"square\"  # For profile pictures, icons, etc.",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "LANDSCAPE = \"landscape\"  # For traditional photos, scenes",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "PORTRAIT = \"portrait\"  # For vertical photos, portraits",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "WIDE = \"wide\"  # For cinematic, desktop wallpapers",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "TALL = \"tall\"  # For mobile wallpapers, stories",
          "successors": []
        }
      ]
    },
    {
      "name": "ImageStyle",
      "type": "class",
      "start_line": 64,
      "end_line": 89,
      "functions": [],
      "simplified_code": "class ImageStyle(str, Enum):\n    \"\"\"\n    Complete set of supported styles\n    \"\"\"\n\n    ANY = \"any\"\n    # Realistic image styles\n    REALISTIC = \"realistic_image\"\n    REALISTIC_BW = \"realistic_image/b_and_w\"\n    REALISTIC_HDR = \"realistic_image/hdr\"\n    REALISTIC_NATURAL = \"realistic_image/natural_light\"\n    REALISTIC_STUDIO = \"realistic_image/studio_portrait\"\n    REALISTIC_ENTERPRISE = \"realistic_image/enterprise\"\n    REALISTIC_HARD_FLASH = \"realistic_image/hard_flash\"\n    REALISTIC_MOTION_BLUR = \"realistic_image/motion_blur\"\n    # Digital illustration styles\n    DIGITAL_ART = \"digital_illustration\"\n    PIXEL_ART = \"digital_illustration/pixel_art\"\n    HAND_DRAWN = \"digital_illustration/hand_drawn\"\n    GRAIN = \"digital_illustration/grain\"\n    SKETCH = \"digital_illustration/infantile_sketch\"\n    POSTER = \"digital_illustration/2d_art_poster\"\n    POSTER_2 = \"digital_illustration/2d_art_poster_2\"\n    HANDMADE_3D = \"digital_illustration/handmade_3d\"\n    HAND_DRAWN_OUTLINE = \"digital_illustration/hand_drawn_outline\"\n    ENGRAVING_COLOR = \"digital_illustration/engraving_color\"",
      "blocks": [
        {
          "id": 1,
          "label": "class ImageStyle(str, Enum):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "\"\"\"\nComplete set of supported styles\n\"\"\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "ANY = \"any\"",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "REALISTIC = \"realistic_image\"",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "REALISTIC_BW = \"realistic_image/b_and_w\"",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "REALISTIC_HDR = \"realistic_image/hdr\"",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "REALISTIC_NATURAL = \"realistic_image/natural_light\"",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "REALISTIC_STUDIO = \"realistic_image/studio_portrait\"",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "REALISTIC_ENTERPRISE = \"realistic_image/enterprise\"",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "REALISTIC_HARD_FLASH = \"realistic_image/hard_flash\"",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "REALISTIC_MOTION_BLUR = \"realistic_image/motion_blur\"",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "DIGITAL_ART = \"digital_illustration\"",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "PIXEL_ART = \"digital_illustration/pixel_art\"",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "HAND_DRAWN = \"digital_illustration/hand_drawn\"",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "GRAIN = \"digital_illustration/grain\"",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "SKETCH = \"digital_illustration/infantile_sketch\"",
          "successors": [
            17
          ]
        },
        {
          "id": 17,
          "label": "POSTER = \"digital_illustration/2d_art_poster\"",
          "successors": [
            18
          ]
        },
        {
          "id": 18,
          "label": "POSTER_2 = \"digital_illustration/2d_art_poster_2\"",
          "successors": [
            19
          ]
        },
        {
          "id": 19,
          "label": "HANDMADE_3D = \"digital_illustration/handmade_3d\"",
          "successors": [
            20
          ]
        },
        {
          "id": 20,
          "label": "HAND_DRAWN_OUTLINE = \"digital_illustration/hand_drawn_outline\"",
          "successors": [
            21
          ]
        },
        {
          "id": 21,
          "label": "ENGRAVING_COLOR = \"digital_illustration/engraving_color\"",
          "successors": []
        }
      ]
    },
    {
      "name": "ImageGenModel",
      "type": "class",
      "start_line": 92,
      "end_line": 100,
      "functions": [],
      "simplified_code": "class ImageGenModel(str, Enum):\n    \"\"\"\n    Available model providers\n    \"\"\"\n\n    FLUX = \"Flux 1.1 Pro\"\n    FLUX_ULTRA = \"Flux 1.1 Pro Ultra\"\n    RECRAFT = \"Recraft v3\"\n    SD3_5 = \"Stable Diffusion 3.5 Medium\"",
      "blocks": [
        {
          "id": 1,
          "label": "class ImageGenModel(str, Enum):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "\"\"\"\nAvailable model providers\n\"\"\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "FLUX = \"Flux 1.1 Pro\"",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "FLUX_ULTRA = \"Flux 1.1 Pro Ultra\"",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "RECRAFT = \"Recraft v3\"",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "SD3_5 = \"Stable Diffusion 3.5 Medium\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AIImageGeneratorBlock",
      "type": "class",
      "start_line": 103,
      "end_line": 308,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 142,
          "end_line": 166,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"ed1ae7a0-b770-4089-b520-1f0005fad19a\",\n            description=\"Generate images using various AI models through a unified interface\",\n            categories={BlockCategory.AI},\n            input_schema=AIImageGeneratorBlock.Input,\n            output_schema=AIImageGeneratorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"prompt\": \"An octopus using a laptop in a snowy forest with 'AutoGPT' clearly visible on the screen\",\n                \"model\": ImageGenModel.RECRAFT,\n                \"size\": ImageSize.SQUARE,\n                \"style\": ImageStyle.REALISTIC,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"image_url\",\n                    \"https://replicate.delivery/generated-image.webp\",\n                ),\n            ],\n            test_mock={\n                \"_run_client\": lambda *args, **kwargs: \"https://replicate.delivery/generated-image.webp\"\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "_run_client",
          "type": "function",
          "start_line": 168,
          "end_line": 196,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _run_client(\n        self, credentials: APIKeyCredentials, model_name: str, input_params: dict\n    ):\n        try:\n            # Initialize Replicate client\n            client = replicate.Client(api_token=credentials.api_key.get_secret_value())\n\n            # Run the model with input parameters\n            output = client.run(model_name, input=input_params, wait=False)\n\n            # Process output\n            if isinstance(output, list) and len(output) > 0:\n                if isinstance(output[0], FileOutput):\n                    result_url = output[0].url\n                else:\n                    result_url = output[0]\n            elif isinstance(output, FileOutput):\n                result_url = output.url\n            elif isinstance(output, str):\n                result_url = output\n            else:\n                result_url = None\n\n            return result_url\n\n        except TypeError as e:\n            raise TypeError(f\"Error during model execution: {e}\")\n        except Exception as e:\n            raise RuntimeError(f\"Unexpected error during model execution: {e}\")",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2,
                12,
                13
              ]
            },
            {
              "id": 2,
              "label": "client = replicate.Client(api_token=credentials.api_key.get_secret_value())",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "output = client.run(model_name, input=input_params, wait=False)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "if isinstance(output, list) and len(output) > 0:",
              "successors": [
                5,
                8
              ]
            },
            {
              "id": 5,
              "label": "if isinstance(output[0], FileOutput):",
              "successors": [
                6,
                7
              ]
            },
            {
              "id": 6,
              "label": "result_url = output[0].url",
              "successors": [
                11
              ]
            },
            {
              "id": 7,
              "label": "result_url = output[0]",
              "successors": [
                11
              ]
            },
            {
              "id": 8,
              "label": "elif isinstance(output, FileOutput):",
              "successors": [
                9,
                10
              ]
            },
            {
              "id": 9,
              "label": "result_url = output.url",
              "successors": [
                11
              ]
            },
            {
              "id": 10,
              "label": "elif isinstance(output, str):",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "result_url = output",
              "successors": [
                11
              ]
            },
            {
              "id": 12,
              "label": "return result_url",
              "successors": []
            },
            {
              "id": 13,
              "label": "except TypeError as e:",
              "successors": [
                14
              ]
            },
            {
              "id": 14,
              "label": "raise TypeError(f\"Error during model execution: {e}\")",
              "successors": []
            },
            {
              "id": 15,
              "label": "except Exception as e:",
              "successors": [
                16
              ]
            },
            {
              "id": 16,
              "label": "raise RuntimeError(f\"Unexpected error during model execution: {e}\")",
              "successors": []
            }
          ]
        },
        {
          "name": "generate_image",
          "type": "function",
          "start_line": 198,
          "end_line": 266,
          "functions": [],
          "classes": [],
          "simplified_code": "    def generate_image(self, input_data: Input, credentials: APIKeyCredentials):\n        try:\n            # Handle style-based prompt modification for models without native style support\n            modified_prompt = input_data.prompt\n            if input_data.model not in [ImageGenModel.RECRAFT]:\n                style_prefix = self._style_to_prompt_prefix(input_data.style)\n                modified_prompt = f\"{style_prefix} {modified_prompt}\".strip()\n\n            if input_data.model == ImageGenModel.SD3_5:\n                # Use Stable Diffusion 3.5 with aspect ratio\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"aspect_ratio\": SIZE_TO_SD_RATIO[input_data.size],\n                    \"output_format\": \"webp\",\n                    \"output_quality\": 90,\n                    \"steps\": 40,\n                    \"cfg_scale\": 7.0,\n                }\n                output = self._run_client(\n                    credentials,\n                    \"stability-ai/stable-diffusion-3.5-medium\",\n                    input_params,\n                )\n                return output\n\n            elif input_data.model == ImageGenModel.FLUX:\n                # Use Flux-specific dimensions with 'jpg' format to avoid ReplicateError\n                width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"width\": width,\n                    \"height\": height,\n                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],\n                    \"output_format\": \"jpg\",  # Set to jpg for Flux models\n                    \"output_quality\": 90,\n                }\n                output = self._run_client(\n                    credentials, \"black-forest-labs/flux-1.1-pro\", input_params\n                )\n                return output\n\n            elif input_data.model == ImageGenModel.FLUX_ULTRA:\n                width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"width\": width,\n                    \"height\": height,\n                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],\n                    \"output_format\": \"jpg\",\n                    \"output_quality\": 90,\n                }\n                output = self._run_client(\n                    credentials, \"black-forest-labs/flux-1.1-pro-ultra\", input_params\n                )\n                return output\n\n            elif input_data.model == ImageGenModel.RECRAFT:\n                input_params = {\n                    \"prompt\": input_data.prompt,\n                    \"size\": SIZE_TO_RECRAFT_DIMENSIONS[input_data.size],\n                    \"style\": input_data.style.value,\n                }\n                output = self._run_client(\n                    credentials, \"recraft-ai/recraft-v3\", input_params\n                )\n                return output\n\n        except Exception as e:\n            raise RuntimeError(f\"Failed to generate image: {str(e)}\")",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2,
                15
              ]
            },
            {
              "id": 2,
              "label": "modified_prompt = input_data.prompt",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if input_data.model not in [ImageGenModel.RECRAFT]:",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "style_prefix = self._style_to_prompt_prefix(input_data.style); modified_prompt = f\"{style_prefix} {modified_prompt}\".strip()",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "if input_data.model == ImageGenModel.SD3_5:",
              "successors": [
                6,
                9
              ]
            },
            {
              "id": 6,
              "label": "input_params = {\"prompt\": modified_prompt,..., \"cfg_scale\": 7.0,}; output = self._run_client(credentials, \"stability-ai/stable-diffusion-3.5-medium\", input_params); return output",
              "successors": [
                15
              ]
            },
            {
              "id": 7,
              "label": "elif input_data.model == ImageGenModel.FLUX:",
              "successors": [
                8,
                11
              ]
            },
            {
              "id": 8,
              "label": "width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]; input_params = {\"prompt\": modified_prompt, ..., \"output_quality\": 90}; output = self._run_client(credentials, \"black-forest-labs/flux-1.1-pro\", input_params); return output",
              "successors": [
                15
              ]
            },
            {
              "id": 9,
              "label": "elif input_data.model == ImageGenModel.FLUX_ULTRA:",
              "successors": [
                10,
                13
              ]
            },
            {
              "id": 10,
              "label": "width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]; input_params = {\"prompt\": modified_prompt, ..., \"output_quality\": 90}; output = self._run_client(credentials, \"black-forest-labs/flux-1.1-pro-ultra\", input_params); return output",
              "successors": [
                15
              ]
            },
            {
              "id": 11,
              "label": "elif input_data.model == ImageGenModel.RECRAFT:",
              "successors": [
                12,
                15
              ]
            },
            {
              "id": 12,
              "label": "input_params = {\"prompt\": input_data.prompt, ..., \"style\": input_data.style.value}; output = self._run_client(credentials, \"recraft-ai/recraft-v3\", input_params); return output",
              "successors": [
                15
              ]
            },
            {
              "id": 13,
              "label": "pass",
              "successors": [
                14
              ]
            },
            {
              "id": 14,
              "label": "pass",
              "successors": [
                15
              ]
            },
            {
              "id": 15,
              "label": "except Exception as e:",
              "successors": [
                16
              ]
            },
            {
              "id": 16,
              "label": "raise RuntimeError(f\"Failed to generate image: {str(e)}\")",
              "successors": []
            }
          ]
        },
        {
          "name": "_style_to_prompt_prefix",
          "type": "function",
          "start_line": 268,
          "end_line": 297,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _style_to_prompt_prefix(self, style: ImageStyle) -> str:\n        \"\"\"\n        Convert a style enum to a prompt prefix for models without native style support.\n        \"\"\"\n        if style == ImageStyle.ANY:\n            return \"\"\n\n        style_map = {\n            ImageStyle.REALISTIC: \"photorealistic\",\n            ImageStyle.REALISTIC_BW: \"black and white photograph\",\n            ImageStyle.REALISTIC_HDR: \"HDR photograph\",\n            ImageStyle.REALISTIC_NATURAL: \"natural light photograph\",\n            ImageStyle.REALISTIC_STUDIO: \"studio portrait photograph\",\n            ImageStyle.REALISTIC_ENTERPRISE: \"enterprise photograph\",\n            ImageStyle.REALISTIC_HARD_FLASH: \"hard flash photograph\",\n            ImageStyle.REALISTIC_MOTION_BLUR: \"motion blur photograph\",\n            ImageStyle.DIGITAL_ART: \"digital art\",\n            ImageStyle.PIXEL_ART: \"pixel art\",\n            ImageStyle.HAND_DRAWN: \"hand drawn illustration\",\n            ImageStyle.GRAIN: \"grainy digital illustration\",\n            ImageStyle.SKETCH: \"sketchy illustration\",\n            ImageStyle.POSTER: \"2D art poster\",\n            ImageStyle.POSTER_2: \"alternate 2D art poster\",\n            ImageStyle.HANDMADE_3D: \"handmade 3D illustration\",\n            ImageStyle.HAND_DRAWN_OUTLINE: \"hand drawn outline illustration\",\n            ImageStyle.ENGRAVING_COLOR: \"color engraving illustration\",\n        }\n\n        style_text = style_map.get(style, \"\")\n        return f\"{style_text} of\" if style_text else \"\"",
          "blocks": [
            {
              "id": 1,
              "label": "def _style_to_prompt_prefix(self, style: ImageStyle) -> str:",
              "successors": [
                2,
                4
              ]
            },
            {
              "id": 2,
              "label": "if style == ImageStyle.ANY:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "return \"\"",
              "successors": []
            },
            {
              "id": 4,
              "label": "style_map = {...}",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "style_text = style_map.get(style, \"\")",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "return f\"{style_text} of\" if style_text else \"\"",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 299,
          "end_line": 308,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs):\n        try:\n            url = self.generate_image(input_data, credentials)\n            if url:\n                yield \"image_url\", url\n            else:\n                yield \"error\", \"Image generation returned an empty result.\"\n        except Exception as e:\n            # Capture and return only the message of the exception, avoiding serialization of non-serializable objects\n            yield \"error\", str(e)",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                2,
                4
              ]
            },
            {
              "id": 2,
              "label": "url = self.generate_image(input_data, credentials)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if url:",
              "successors": [
                5,
                6
              ]
            },
            {
              "id": 4,
              "label": "except Exception as e:",
              "successors": [
                7
              ]
            },
            {
              "id": 5,
              "label": "yield \"image_url\", url",
              "successors": []
            },
            {
              "id": 6,
              "label": "yield \"error\", \"Image generation returned an empty result.\"",
              "successors": []
            },
            {
              "id": 7,
              "label": "yield \"error\", str(e)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 104,
          "end_line": 136,
          "functions": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"Enter your Replicate API key to access the image generation API. You can obtain an API key from https://replicate.com/account/api-tokens.\",\n        )\n        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A red panda using a laptop in a snowy forest'\",\n            title=\"Prompt\",\n        )\n        model: ImageGenModel = SchemaField(\n            description=\"The AI model to use for image generation\",\n            default=ImageGenModel.SD3_5,\n            title=\"Model\",\n        )\n        size: ImageSize = SchemaField(\n            description=(\n                \"Format of the generated image:\\n\"\n                \"- Square: Perfect for profile pictures, icons\\n\"\n                \"- Landscape: Traditional photo format\\n\"\n                \"- Portrait: Vertical photos, portraits\\n\"\n                \"- Wide: Cinematic format, desktop wallpapers\\n\"\n                \"- Tall: Mobile wallpapers, social media stories\"\n            ),\n            default=ImageSize.SQUARE,\n            title=\"Image Format\",\n        )\n        style: ImageStyle = SchemaField(\n            description=\"Visual style for the generated image\",\n            default=ImageStyle.ANY,\n            title=\"Image Style\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: CredentialsMetaInput[Literal[ProviderName.REPLICATE], Literal[\"api_key\"]] = CredentialsField(description=\"Enter your Replicate API key to access the image generation API. You can obtain an API key from https://replicate.com/account/api-tokens.\",)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "prompt: str = SchemaField(description=\"Text prompt for image generation\", placeholder=\"e.g., 'A red panda using a laptop in a snowy forest'\", title=\"Prompt\",)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "model: ImageGenModel = SchemaField(description=\"The AI model to use for image generation\", default=ImageGenModel.SD3_5, title=\"Model\",)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "size: ImageSize = SchemaField(description=(\"Format of the generated image:\\n- Square: Perfect for profile pictures, icons\\n- Landscape: Traditional photo format\\n- Portrait: Vertical photos, portraits\\n- Wide: Cinematic format, desktop wallpapers\\n- Tall: Mobile wallpapers, social media stories\"), default=ImageSize.SQUARE, title=\"Image Format\",)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "style: ImageStyle = SchemaField(description=\"Visual style for the generated image\", default=ImageStyle.ANY, title=\"Image Style\",)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 138,
          "end_line": 140,
          "functions": [],
          "simplified_code": "    class Output(BlockSchema):\n        image_url: str = SchemaField(description=\"URL of the generated image\")\n        error: str = SchemaField(description=\"Error message if generation failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "image_url: str = SchemaField(description=\"URL of the generated image\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if generation failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class AIImageGeneratorBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if generation failed\")\n\n        )\n\n            raise RuntimeError(f\"Unexpected error during model execution: {e}\")\n\n            raise RuntimeError(f\"Failed to generate image: {str(e)}\")\n\n        return f\"{style_text} of\" if style_text else \"\"\n\n            yield \"error\", str(e)",
      "blocks": [
        {
          "id": 1,
          "label": "class AIImageGeneratorBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "error: str = SchemaField(description=\"Error message if generation failed\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "try:",
          "successors": [
            4,
            8
          ]
        },
        {
          "id": 4,
          "label": "# code block for try",
          "successors": [
            8
          ]
        },
        {
          "id": 5,
          "label": "except Exception as e:",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 6,
          "label": "raise RuntimeError(f\"Unexpected error during model execution: {e}\")",
          "successors": [
            8
          ]
        },
        {
          "id": 7,
          "label": "yield \"error\", str(e)",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "return f\"{style_text} of\" if style_text else \"\"",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from enum import Enum\nfrom typing import Literal\n\nimport replicate\nfrom pydantic import SecretStr\nfrom replicate.helpers import FileOutput\n\nfrom backend.data.block import Block, BlockCategory, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\n\n    TALL = \"tall\"  # For mobile wallpapers, stories\n\n\n# Mapping semantic sizes to model-specific formats\nSIZE_TO_SD_RATIO = {\n    ImageSize.SQUARE: \"1:1\",\n    ImageSize.LANDSCAPE: \"4:3\",\n    ImageSize.PORTRAIT: \"3:4\",\n    ImageSize.WIDE: \"16:9\",\n    ImageSize.TALL: \"9:16\",\n}\n\nSIZE_TO_FLUX_RATIO = {\n    ImageSize.SQUARE: \"1:1\",\n    ImageSize.LANDSCAPE: \"4:3\",\n    ImageSize.PORTRAIT: \"3:4\",\n    ImageSize.WIDE: \"16:9\",\n    ImageSize.TALL: \"9:16\",\n}\n\nSIZE_TO_FLUX_DIMENSIONS = {\n    ImageSize.SQUARE: (1024, 1024),\n    ImageSize.LANDSCAPE: (1365, 1024),\n    ImageSize.PORTRAIT: (1024, 1365),\n    ImageSize.WIDE: (1440, 810),  # Adjusted to maintain 16:9 within 1440 limit\n    ImageSize.TALL: (810, 1440),  # Adjusted to maintain 9:16 within 1440 limit\n}\n\nSIZE_TO_RECRAFT_DIMENSIONS = {\n    ImageSize.SQUARE: \"1024x1024\",\n    ImageSize.LANDSCAPE: \"1365x1024\",\n    ImageSize.PORTRAIT: \"1024x1365\",\n    ImageSize.WIDE: \"1536x1024\",\n    ImageSize.TALL: \"1024x1536\",\n}\n\n\n    ENGRAVING_COLOR = \"digital_illustration/engraving_color\"\n\n\n    SD3_5 = \"Stable Diffusion 3.5 Medium\"\n\n\n            yield \"error\", str(e)\n\n\n# Test credentials stay the same\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)\n\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}",
  "blocks": [
    {
      "id": 1,
      "label": "from enum import Enum; from typing import Literal; import replicate; from pydantic import SecretStr; from replicate.helpers import FileOutput; from backend.data.block import Block, BlockCategory, BlockSchema; from backend.data.model import ( APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField, ); from backend.integrations.providers import ProviderName;",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "TALL = 'tall'; SIZE_TO_SD_RATIO = { ImageSize.SQUARE: '1:1', ImageSize.LANDSCAPE: '4:3', ImageSize.PORTRAIT: '3:4', ImageSize.WIDE: '16:9', ImageSize.TALL: '9:16', }; SIZE_TO_FLUX_RATIO = { ImageSize.SQUARE: '1:1', ImageSize.LANDSCAPE: '4:3', ImageSize.PORTRAIT: '3:4', ImageSize.WIDE: '16:9', ImageSize.TALL: '9:16', }; SIZE_TO_FLUX_DIMENSIONS = { ImageSize.SQUARE: (1024, 1024), ImageSize.LANDSCAPE: (1365, 1024), ImageSize.PORTRAIT: (1024, 1365), ImageSize.WIDE: (1440, 810), ImageSize.TALL: (810, 1440), }; SIZE_TO_RECRAFT_DIMENSIONS = { ImageSize.SQUARE: '1024x1024', ImageSize.LANDSCAPE: '1365x1024', ImageSize.PORTRAIT: '1024x1365', ImageSize.WIDE: '1536x1024', ImageSize.TALL: '1024x1536', }; ENGRAVING_COLOR = 'digital_illustration/engraving_color'; SD3_5 = 'Stable Diffusion 3.5 Medium';",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "TEST_CREDENTIALS = APIKeyCredentials( id='01234567-89ab-cdef-0123-456789abcdef', provider='replicate', api_key=SecretStr('mock-replicate-api-key'), title='Mock Replicate API key', expires_at=None, ); TEST_CREDENTIALS_INPUT = { 'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.title, };",
      "successors": []
    }
  ]
}