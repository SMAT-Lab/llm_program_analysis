{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 237,
  "functions": [],
  "classes": [
    {
      "name": "ReplicateFluxModelName",
      "type": "class",
      "start_line": 34,
      "end_line": 46,
      "functions": [
        {
          "name": "api_name",
          "type": "function",
          "start_line": 40,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    def api_name(self):\n        api_names = {\n            ReplicateFluxModelName.FLUX_SCHNELL: \"black-forest-labs/flux-schnell\",\n            ReplicateFluxModelName.FLUX_PRO: \"black-forest-labs/flux-pro\",\n            ReplicateFluxModelName.FLUX_PRO1_1: \"black-forest-labs/flux-1.1-pro\",\n        }\n        return api_names[self]",
          "blocks": [
            {
              "id": 1,
              "label": "def api_name(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "api_names = { ReplicateFluxModelName.FLUX_SCHNELL: \"black-forest-labs/flux-schnell\", ReplicateFluxModelName.FLUX_PRO: \"black-forest-labs/flux-pro\", ReplicateFluxModelName.FLUX_PRO1_1: \"black-forest-labs/flux-1.1-pro\", }",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "return api_names[self]",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class ReplicateFluxModelName(str, Enum):\n    FLUX_SCHNELL = (\"Flux Schnell\",)\n    FLUX_PRO = (\"Flux Pro\",)\n    FLUX_PRO1_1 = (\"Flux Pro 1.1\",)\n\n    @property\n        return api_names[self]",
      "blocks": [
        {
          "id": 1,
          "label": "class ReplicateFluxModelName(str, Enum):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "FLUX_SCHNELL = (\"Flux Schnell\",)\nFLUX_PRO = (\"Flux Pro\",)\nFLUX_PRO1_1 = (\"Flux Pro 1.1\",)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "@property\nreturn api_names[self]",
          "successors": []
        }
      ]
    },
    {
      "name": "ImageType",
      "type": "class",
      "start_line": 50,
      "end_line": 53,
      "functions": [],
      "classes": [],
      "simplified_code": "class ImageType(str, Enum):\n    WEBP = \"webp\"\n    JPG = \"jpg\"\n    PNG = \"png\"",
      "blocks": [
        {
          "id": 1,
          "label": "class ImageType(str, Enum):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "WEBP = \"webp\"\nJPG = \"jpg\"\nPNG = \"png\"",
          "successors": []
        }
      ]
    },
    {
      "name": "ReplicateFluxAdvancedModelBlock",
      "type": "class",
      "start_line": 56,
      "end_line": 237,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 130,
          "end_line": 160,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"90f8c45e-e983-4644-aa0b-b4ebe2f531bc\",\n            description=\"This block runs Flux models on Replicate with advanced settings.\",\n            categories={BlockCategory.AI},\n            input_schema=ReplicateFluxAdvancedModelBlock.Input,\n            output_schema=ReplicateFluxAdvancedModelBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"replicate_model_name\": ReplicateFluxModelName.FLUX_SCHNELL,\n                \"prompt\": \"A beautiful landscape painting of a serene lake at sunrise\",\n                \"seed\": None,\n                \"steps\": 25,\n                \"guidance\": 3.0,\n                \"interval\": 2.0,\n                \"aspect_ratio\": \"1:1\",\n                \"output_format\": ImageType.PNG,\n                \"output_quality\": 80,\n                \"safety_tolerance\": 2,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://replicate.com/output/generated-image-url.jpg\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, model_name, prompt, seed, steps, guidance, interval, aspect_ratio, output_format, output_quality, safety_tolerance: \"https://replicate.com/output/generated-image-url.jpg\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__()",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 162,
          "end_line": 185,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        # If the seed is not provided, generate a random seed\n        seed = input_data.seed\n        if seed is None:\n            seed = int.from_bytes(os.urandom(4), \"big\")\n\n        # Run the model using the provided inputs\n        result = self.run_model(\n            api_key=credentials.api_key,\n            model_name=input_data.replicate_model_name.api_name,\n            prompt=input_data.prompt,\n            seed=seed,\n            steps=input_data.steps,\n            guidance=input_data.guidance,\n            interval=input_data.interval,\n            aspect_ratio=input_data.aspect_ratio,\n            output_format=input_data.output_format,\n            output_quality=input_data.output_quality,\n            safety_tolerance=input_data.safety_tolerance,\n        )\n        yield \"result\", result\n",
          "blocks": [
            {
              "id": 1,
              "label": "seed = input_data.seed",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if seed is None:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "seed = int.from_bytes(os.urandom(4), \"big\")",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "result = self.run_model(api_key=credentials.api_key, model_name=input_data.replicate_model_name.api_name, prompt=input_data.prompt, seed=seed, steps=input_data.steps, guidance=input_data.guidance, interval=input_data.interval, aspect_ratio=input_data.aspect_ratio, output_format=input_data.output_format, output_quality=input_data.output_quality, safety_tolerance=input_data.safety_tolerance)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "yield \"result\", result",
              "successors": []
            }
          ]
        },
        {
          "name": "run_model",
          "type": "function",
          "start_line": 186,
          "end_line": 237,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run_model(\n        self,\n        api_key: SecretStr,\n        model_name,\n        prompt,\n        seed,\n        steps,\n        guidance,\n        interval,\n        aspect_ratio,\n        output_format,\n        output_quality,\n        safety_tolerance,\n    ):\n        # Initialize Replicate client with the API key\n        client = replicate.Client(api_token=api_key.get_secret_value())\n\n        # Run the model with additional parameters\n        output: FileOutput | list[FileOutput] = client.run(  # type: ignore This is because they changed the return type, and didn't update the type hint! It should be overloaded depending on the value of `use_file_output` to `FileOutput | list[FileOutput]` but it's `Any | Iterator[Any]`\n            f\"{model_name}\",\n            input={\n                \"prompt\": prompt,\n                \"seed\": seed,\n                \"steps\": steps,\n                \"guidance\": guidance,\n                \"interval\": interval,\n                \"aspect_ratio\": aspect_ratio,\n                \"output_format\": output_format,\n                \"output_quality\": output_quality,\n                \"safety_tolerance\": safety_tolerance,\n            },\n            wait=False,  # don't arbitrarily return data:octect/stream or sometimes url depending on the model???? what is this api\n        )\n\n        # Check if output is a list or a string and extract accordingly; otherwise, assign a default message\n        if isinstance(output, list) and len(output) > 0:\n            if isinstance(output[0], FileOutput):\n                result_url = output[0].url  # If output is a list, get the first element\n            else:\n                result_url = output[\n                    0\n                ]  # If output is a list and not a FileOutput, get the first element. Should never happen, but just in case.\n        elif isinstance(output, FileOutput):\n            result_url = output.url  # If output is a FileOutput, use the url\n        elif isinstance(output, str):\n            result_url = output  # If output is a string (for some reason due to their janky type hinting), use it directly\n        else:\n            result_url = (\n                \"No output received\"  # Fallback message if output is not as expected\n            )\n\n        return result_url",
          "blocks": [
            {
              "id": 1,
              "label": "client = replicate.Client(api_token=api_key.get_secret_value())",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "output = client.run(...)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if isinstance(output, list) and len(output) > 0:",
              "successors": [
                4,
                7
              ]
            },
            {
              "id": 4,
              "label": "if isinstance(output[0], FileOutput):",
              "successors": [
                5,
                6
              ]
            },
            {
              "id": 5,
              "label": "result_url = output[0].url",
              "successors": [
                11
              ]
            },
            {
              "id": 6,
              "label": "result_url = output[0]",
              "successors": [
                11
              ]
            },
            {
              "id": 7,
              "label": "elif isinstance(output, FileOutput):",
              "successors": [
                8,
                9
              ]
            },
            {
              "id": 8,
              "label": "result_url = output.url",
              "successors": [
                11
              ]
            },
            {
              "id": 9,
              "label": "elif isinstance(output, str):",
              "successors": [
                10,
                11
              ]
            },
            {
              "id": 10,
              "label": "result_url = output",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "result_url = 'No output received'",
              "successors": [
                12
              ]
            },
            {
              "id": 12,
              "label": "return result_url",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 57,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Replicate integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A futuristic cityscape at sunset'\",\n            title=\"Prompt\",\n        )\n        replicate_model_name: ReplicateFluxModelName = SchemaField(\n            description=\"The name of the Image Generation Model, i.e Flux Schnell\",\n            default=ReplicateFluxModelName.FLUX_SCHNELL,\n            title=\"Image Generation Model\",\n            advanced=False,\n        )\n        seed: int | None = SchemaField(\n            description=\"Random seed. Set for reproducible generation\",\n            default=None,\n            title=\"Seed\",\n        )\n        steps: int = SchemaField(\n            description=\"Number of diffusion steps\",\n            default=25,\n            title=\"Steps\",\n        )\n        guidance: float = SchemaField(\n            description=(\n                \"Controls the balance between adherence to the text prompt and image quality/diversity. \"\n                \"Higher values make the output more closely match the prompt but may reduce overall image quality.\"\n            ),\n            default=3,\n            title=\"Guidance\",\n        )\n        interval: float = SchemaField(\n            description=(\n                \"Interval is a setting that increases the variance in possible outputs. \"\n                \"Setting this value low will ensure strong prompt following with more consistent outputs.\"\n            ),\n            default=2,\n            title=\"Interval\",\n        )\n        aspect_ratio: str = SchemaField(\n            description=\"Aspect ratio for the generated image\",\n            default=\"1:1\",\n            title=\"Aspect Ratio\",\n            placeholder=\"Choose from: 1:1, 16:9, 2:3, 3:2, 4:5, 5:4, 9:16\",\n        )\n        output_format: ImageType = SchemaField(\n            description=\"File format of the output image\",\n            default=ImageType.WEBP,\n            title=\"Output Format\",\n        )\n        output_quality: int = SchemaField(\n            description=(\n                \"Quality when saving the output images, from 0 to 100. \"\n                \"Not relevant for .png outputs\"\n            ),\n            default=80,\n            title=\"Output Quality\",\n        )\n        safety_tolerance: int = SchemaField(\n            description=\"Safety tolerance, 1 is most strict and 5 is most permissive\",\n            default=2,\n            title=\"Safety Tolerance\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: CredentialsMetaInput[Literal[ProviderName.REPLICATE], Literal['api_key']] = CredentialsField(...)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "prompt: str = SchemaField(...)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "replicate_model_name: ReplicateFluxModelName = SchemaField(...)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "seed: int | None = SchemaField(...)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "steps: int = SchemaField(...)",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "guidance: float = SchemaField(...)",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "interval: float = SchemaField(...)",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "aspect_ratio: str = SchemaField(...)",
              "successors": [
                10
              ]
            },
            {
              "id": 10,
              "label": "output_format: ImageType = SchemaField(...)",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "output_quality: int = SchemaField(...)",
              "successors": [
                12
              ]
            },
            {
              "id": 12,
              "label": "safety_tolerance: int = SchemaField(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 126,
          "end_line": 128,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        result: str = SchemaField(description=\"Generated output\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "result: str = SchemaField(description=\"Generated output\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if the model run failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class ReplicateFluxAdvancedModelBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if the model run failed\")\n\n        )\n\n\n        return result_url",
      "blocks": [
        {
          "id": 1,
          "label": "class ReplicateFluxAdvancedModelBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "error: str = SchemaField(description=\"Error message if the model run failed\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return result_url",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import os\nfrom enum import Enum\nfrom typing import Literal\n\nimport replicate\nfrom pydantic import SecretStr\nfrom replicate.helpers import FileOutput\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n# Model name enum\n        return api_names[self]\n\n\n# Image type Enum\n    PNG = \"png\"\n\n\n        return result_url",
  "blocks": [
    {
      "id": 1,
      "label": "import os\nfrom enum import Enum\nfrom typing import Literal\nimport replicate\nfrom pydantic import SecretStr\nfrom replicate.helpers import FileOutput\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import ( APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField, )\nfrom backend.integrations.providers import ProviderName",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "TEST_CREDENTIALS = APIKeyCredentials( id=\"01234567-89ab-cdef-0123-456789abcdef\", provider=\"replicate\", api_key=SecretStr(\"mock-replicate-api-key\"), title=\"Mock Replicate API key\", expires_at=None, )",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "TEST_CREDENTIALS_INPUT = { \"provider\": TEST_CREDENTIALS.provider, \"id\": TEST_CREDENTIALS.id, \"type\": TEST_CREDENTIALS.type, \"title\": TEST_CREDENTIALS.type, }",
      "successors": []
    }
  ]
}