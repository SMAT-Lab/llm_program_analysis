{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 39,
  "functions": [
    {
      "name": "test_agent_schedule",
      "type": "function",
      "start_line": 12,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_agent_schedule(server: SpinTestServer):\n    await db.connect()\n    test_user = await create_test_user()\n    test_graph = await server.agent_server.test_create_graph(\n        create_graph=CreateGraph(graph=create_test_graph()),\n        user_id=test_user.id,\n    )\n\n    scheduler = get_service_client(ExecutionScheduler)\n    schedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)\n    assert len(schedules) == 0\n\n    schedule = scheduler.add_execution_schedule(\n        graph_id=test_graph.id,\n        user_id=test_user.id,\n        graph_version=1,\n        cron=\"0 0 * * *\",\n        input_data={\"input\": \"data\"},\n    )\n    assert schedule\n\n    schedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)\n    assert len(schedules) == 1\n    assert schedules[0].cron == \"0 0 * * *\"\n\n    scheduler.delete_schedule(schedule.id, user_id=test_user.id)\n    schedules = scheduler.get_execution_schedules(test_graph.id, user_id=test_user.id)\n    assert len(schedules) == 0",
      "blocks": [
        {
          "id": 1,
          "label": "await db.connect()",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "test_user = await create_test_user()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "test_graph = await server.agent_server.test_create_graph(create_graph=CreateGraph(graph=create_test_graph()), user_id=test_user.id)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "scheduler = get_service_client(ExecutionScheduler)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "schedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "assert len(schedules) == 0",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "schedule = scheduler.add_execution_schedule(graph_id=test_graph.id, user_id=test_user.id, graph_version=1, cron='0 0 * * *', input_data={'input': 'data'})",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "assert schedule",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "schedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "assert len(schedules) == 1",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "assert schedules[0].cron == '0 0 * * *'",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "scheduler.delete_schedule(schedule.id, user_id=test_user.id)",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "schedules = scheduler.get_execution_schedules(test_graph.id, user_id=test_user.id)",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "assert len(schedules) == 0",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import pytest\n\nfrom backend.data import db\nfrom backend.executor import ExecutionScheduler\nfrom backend.server.model import CreateGraph\nfrom backend.usecases.sample import create_test_graph, create_test_user\nfrom backend.util.service import get_service_client\nfrom backend.util.test import SpinTestServer\n\n\n@pytest.mark.asyncio(scope=\"session\")\n    assert len(schedules) == 0",
  "blocks": [
    {
      "id": 1,
      "label": "import pytest",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "from backend.data import db",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from backend.executor import ExecutionScheduler",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from backend.server.model import CreateGraph",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "from backend.usecases.sample import create_test_graph, create_test_user",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from backend.util.service import get_service_client",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.util.test import SpinTestServer",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "@pytest.mark.asyncio(scope=\"session\")",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "async def test_scheduler():",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "server = SpinTestServer()",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "await server.start()",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "db.init()",
      "successors": [
        13
      ]
    },
    {
      "id": 13,
      "label": "user = await create_test_user()",
      "successors": [
        14
      ]
    },
    {
      "id": 14,
      "label": "await create_test_graph(user.id)",
      "successors": [
        15
      ]
    },
    {
      "id": 15,
      "label": "scheduler = ExecutionScheduler()",
      "successors": [
        16
      ]
    },
    {
      "id": 16,
      "label": "schedules = await scheduler.get_schedules()",
      "successors": [
        17
      ]
    },
    {
      "id": 17,
      "label": "assert len(schedules) == 0",
      "successors": []
    }
  ]
}