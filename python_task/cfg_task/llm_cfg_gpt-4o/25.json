{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 227,
  "functions": [],
  "classes": [
    {
      "name": "MusicGenModelVersion",
      "type": "class",
      "start_line": 36,
      "end_line": 39,
      "functions": [],
      "simplified_code": "class MusicGenModelVersion(str, Enum):\n    STEREO_LARGE = \"stereo-large\"\n    MELODY_LARGE = \"melody-large\"\n    LARGE = \"large\"",
      "blocks": [
        {
          "id": 1,
          "label": "class MusicGenModelVersion(str, Enum):",
          "successors": [
            2,
            3,
            4
          ]
        },
        {
          "id": 2,
          "label": "STEREO_LARGE = \"stereo-large\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "MELODY_LARGE = \"melody-large\"",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "LARGE = \"large\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AudioFormat",
      "type": "class",
      "start_line": 43,
      "end_line": 45,
      "functions": [],
      "simplified_code": "class AudioFormat(str, Enum):\n    WAV = \"wav\"\n    MP3 = \"mp3\"",
      "blocks": [
        {
          "id": 1,
          "label": "class AudioFormat(str, Enum):",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "WAV = \"wav\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "MP3 = \"mp3\"",
          "successors": []
        }
      ]
    },
    {
      "name": "NormalizationStrategy",
      "type": "class",
      "start_line": 49,
      "end_line": 53,
      "functions": [],
      "simplified_code": "class NormalizationStrategy(str, Enum):\n    LOUDNESS = \"loudness\"\n    CLIP = \"clip\"\n    PEAK = \"peak\"\n    RMS = \"rms\"",
      "blocks": [
        {
          "id": 1,
          "label": "class NormalizationStrategy(str, Enum):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "LOUDNESS = \"loudness\"\nCLIP = \"clip\"\nPEAK = \"peak\"\nRMS = \"rms\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AIMusicGeneratorBlock",
      "type": "class",
      "start_line": 56,
      "end_line": 227,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 114,
          "end_line": 143,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"44f6c8ad-d75c-4ae1-8209-aad1c0326928\",\n            description=\"This block generates music using Meta's MusicGen model on Replicate.\",\n            categories={BlockCategory.AI},\n            input_schema=AIMusicGeneratorBlock.Input,\n            output_schema=AIMusicGeneratorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"prompt\": \"An upbeat electronic dance track with heavy bass\",\n                \"music_gen_model_version\": MusicGenModelVersion.STEREO_LARGE,\n                \"duration\": 8,\n                \"temperature\": 1.0,\n                \"top_k\": 250,\n                \"top_p\": 0.0,\n                \"classifier_free_guidance\": 3,\n                \"output_format\": AudioFormat.WAV,\n                \"normalization_strategy\": NormalizationStrategy.LOUDNESS,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://replicate.com/output/generated-audio-url.wav\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, music_gen_model_version, prompt, duration, temperature, top_k, top_p, classifier_free_guidance, output_format, normalization_strategy: \"https://replicate.com/output/generated-audio-url.wav\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "super().__init__(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 145,
          "end_line": 183,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        max_retries = 3\n        retry_delay = 5  # seconds\n        last_error = None\n\n        for attempt in range(max_retries):\n            try:\n                logger.debug(\n                    f\"[AIMusicGeneratorBlock] - Running model (attempt {attempt + 1})\"\n                )\n                result = self.run_model(\n                    api_key=credentials.api_key,\n                    music_gen_model_version=input_data.music_gen_model_version,\n                    prompt=input_data.prompt,\n                    duration=input_data.duration,\n                    temperature=input_data.temperature,\n                    top_k=input_data.top_k,\n                    top_p=input_data.top_p,\n                    classifier_free_guidance=input_data.classifier_free_guidance,\n                    output_format=input_data.output_format,\n                    normalization_strategy=input_data.normalization_strategy,\n                )\n                if result and result != \"No output received\":\n                    yield \"result\", result\n                    return\n                else:\n                    last_error = \"Model returned empty or invalid response\"\n                    raise ValueError(last_error)\n            except Exception as e:\n                last_error = f\"Unexpected error: {str(e)}\"\n                logger.error(f\"[AIMusicGeneratorBlock] - Error: {last_error}\")\n                if attempt < max_retries - 1:\n                    time.sleep(retry_delay)\n                    continue\n\n        # If we've exhausted all retries, yield the error\n        yield \"error\", f\"Failed after {max_retries} attempts. Last error: {last_error}\"",
          "blocks": [
            {
              "id": 1,
              "label": "max_retries = 3\nretry_delay = 5\nlast_error = None",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "for attempt in range(max_retries):",
              "successors": [
                3,
                11
              ]
            },
            {
              "id": 3,
              "label": "try:",
              "successors": [
                4,
                8
              ]
            },
            {
              "id": 4,
              "label": "logger.debug(f\"[AIMusicGeneratorBlock] - Running model (attempt {attempt + 1})\")\nresult = self.run_model(api_key=credentials.api_key, music_gen_model_version=input_data.music_gen_model_version, prompt=input_data.prompt, duration=input_data.duration, temperature=input_data.temperature, top_k=input_data.top_k, top_p=input_data.top_p, classifier_free_guidance=input_data.classifier_free_guidance, output_format=input_data.output_format, normalization_strategy=input_data.normalization_strategy)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "if result and result != \"No output received\":",
              "successors": [
                6,
                7
              ]
            },
            {
              "id": 6,
              "label": "yield \"result\", result\nreturn",
              "successors": []
            },
            {
              "id": 7,
              "label": "last_error = \"Model returned empty or invalid response\"\nraise ValueError(last_error)",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "except Exception as e:",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "last_error = f\"Unexpected error: {str(e)}\"\nlogger.error(f\"[AIMusicGeneratorBlock] - Error: {last_error}\")",
              "successors": [
                10
              ]
            },
            {
              "id": 10,
              "label": "if attempt < max_retries - 1:\n    time.sleep(retry_delay)\n    continue",
              "successors": [
                2
              ]
            },
            {
              "id": 11,
              "label": "yield \"error\", f\"Failed after {max_retries} attempts. Last error: {last_error}\"",
              "successors": []
            }
          ]
        },
        {
          "name": "run_model",
          "type": "function",
          "start_line": 185,
          "end_line": 227,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run_model(\n        self,\n        api_key: SecretStr,\n        music_gen_model_version: MusicGenModelVersion,\n        prompt: str,\n        duration: int,\n        temperature: float,\n        top_k: int,\n        top_p: float,\n        classifier_free_guidance: int,\n        output_format: AudioFormat,\n        normalization_strategy: NormalizationStrategy,\n    ):\n        # Initialize Replicate client with the API key\n        client = replicate.Client(api_token=api_key.get_secret_value())\n\n        # Run the model with parameters\n        output = client.run(\n            \"meta/musicgen:671ac645ce5e552cc63a54a2bbff63fcf798043055d2dac5fc9e36a837eedcfb\",\n            input={\n                \"prompt\": prompt,\n                \"music_gen_model_version\": music_gen_model_version,\n                \"duration\": duration,\n                \"temperature\": temperature,\n                \"top_k\": top_k,\n                \"top_p\": top_p,\n                \"classifier_free_guidance\": classifier_free_guidance,\n                \"output_format\": output_format,\n                \"normalization_strategy\": normalization_strategy,\n            },\n        )\n\n        # Handle the output\n        if isinstance(output, list) and len(output) > 0:\n            result_url = output[0]  # If output is a list, get the first element\n        elif isinstance(output, str):\n            result_url = output  # If output is a string, use it directly\n        else:\n            result_url = (\n                \"No output received\"  # Fallback message if output is not as expected\n            )\n\n        return result_url",
          "blocks": [
            {
              "id": 1,
              "label": "client = replicate.Client(api_token=api_key.get_secret_value())",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "output = client.run(...) # Run the model with parameters",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "if isinstance(output, list) and len(output) > 0:",
              "successors": [
                4,
                5
              ]
            },
            {
              "id": 4,
              "label": "result_url = output[0]",
              "successors": [
                8
              ]
            },
            {
              "id": 5,
              "label": "elif isinstance(output, str):",
              "successors": [
                6,
                7
              ]
            },
            {
              "id": 6,
              "label": "result_url = output",
              "successors": [
                8
              ]
            },
            {
              "id": 7,
              "label": "result_url = \"No output received\"",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "return result_url",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 57,
          "end_line": 108,
          "functions": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Replicate integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        prompt: str = SchemaField(\n            description=\"A description of the music you want to generate\",\n            placeholder=\"e.g., 'An upbeat electronic dance track with heavy bass'\",\n            title=\"Prompt\",\n        )\n        music_gen_model_version: MusicGenModelVersion = SchemaField(\n            description=\"Model to use for generation\",\n            default=MusicGenModelVersion.STEREO_LARGE,\n            title=\"Model Version\",\n        )\n        duration: int = SchemaField(\n            description=\"Duration of the generated audio in seconds\",\n            default=8,\n            title=\"Duration\",\n        )\n        temperature: float = SchemaField(\n            description=\"Controls the 'conservativeness' of the sampling process. Higher temperature means more diversity\",\n            default=1.0,\n            title=\"Temperature\",\n        )\n        top_k: int = SchemaField(\n            description=\"Reduces sampling to the k most likely tokens\",\n            default=250,\n            title=\"Top K\",\n        )\n        top_p: float = SchemaField(\n            description=\"Reduces sampling to tokens with cumulative probability of p. When set to 0 (default), top_k sampling is used\",\n            default=0.0,\n            title=\"Top P\",\n        )\n        classifier_free_guidance: int = SchemaField(\n            description=\"Increases the influence of inputs on the output. Higher values produce lower-variance outputs that adhere more closely to inputs\",\n            default=3,\n            title=\"Classifier Free Guidance\",\n        )\n        output_format: AudioFormat = SchemaField(\n            description=\"Output format for generated audio\",\n            default=AudioFormat.WAV,\n            title=\"Output Format\",\n        )\n        normalization_strategy: NormalizationStrategy = SchemaField(\n            description=\"Strategy for normalizing audio\",\n            default=NormalizationStrategy.LOUDNESS,\n            title=\"Normalization Strategy\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "credentials: CredentialsMetaInput[Literal[ProviderName.REPLICATE], Literal['api_key']] = CredentialsField(...)",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "prompt: str = SchemaField(...)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "music_gen_model_version: MusicGenModelVersion = SchemaField(...)",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "duration: int = SchemaField(...)",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "temperature: float = SchemaField(...)",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "top_k: int = SchemaField(...)",
              "successors": [
                8
              ]
            },
            {
              "id": 8,
              "label": "top_p: float = SchemaField(...)",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "classifier_free_guidance: int = SchemaField(...)",
              "successors": [
                10
              ]
            },
            {
              "id": 10,
              "label": "output_format: AudioFormat = SchemaField(...)",
              "successors": [
                11
              ]
            },
            {
              "id": 11,
              "label": "normalization_strategy: NormalizationStrategy = SchemaField(...)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 110,
          "end_line": 112,
          "functions": [],
          "simplified_code": "    class Output(BlockSchema):\n        result: str = SchemaField(description=\"URL of the generated audio file\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "result: str = SchemaField(description=\"URL of the generated audio file\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "error: str = SchemaField(description=\"Error message if the model run failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class AIMusicGeneratorBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if the model run failed\")\n\n        )\n\n        yield \"error\", f\"Failed after {max_retries} attempts. Last error: {last_error}\"\n\n        return result_url",
      "blocks": [
        {
          "id": 1,
          "label": "class AIMusicGeneratorBlock(Block):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "yield \"error\", f\"Failed after {max_retries} attempts. Last error: {last_error}\"",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return result_url",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\nimport time\nfrom enum import Enum\nfrom typing import Literal\n\nimport replicate\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nlogger = logging.getLogger(__name__)\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n# Model version enum\n    LARGE = \"large\"\n\n\n# Audio format enum\n    MP3 = \"mp3\"\n\n\n# Normalization strategy enum\n    RMS = \"rms\"\n\n\n        return result_url",
  "blocks": [
    {
      "id": 1,
      "label": "import logging",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "import time",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from enum import Enum",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "from typing import Literal",
      "successors": [
        5
      ]
    },
    {
      "id": 5,
      "label": "import replicate",
      "successors": [
        6
      ]
    },
    {
      "id": 6,
      "label": "from pydantic import SecretStr",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "from backend.data.model import (APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField)",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "from backend.integrations.providers import ProviderName",
      "successors": [
        10
      ]
    },
    {
      "id": 10,
      "label": "logger = logging.getLogger(__name__)",
      "successors": [
        11
      ]
    },
    {
      "id": 11,
      "label": "TEST_CREDENTIALS = APIKeyCredentials(id=\"01234567-89ab-cdef-0123-456789abcdef\", provider=\"replicate\", api_key=SecretStr(\"mock-replicate-api-key\"), title=\"Mock Replicate API key\", expires_at=None)",
      "successors": [
        12
      ]
    },
    {
      "id": 12,
      "label": "TEST_CREDENTIALS_INPUT = {\"provider\": TEST_CREDENTIALS.provider, \"id\": TEST_CREDENTIALS.id, \"type\": TEST_CREDENTIALS.type, \"title\": TEST_CREDENTIALS.type}",
      "successors": [
        13
      ]
    },
    {
      "id": 13,
      "label": "LARGE = \"large\"",
      "successors": [
        14
      ]
    },
    {
      "id": 14,
      "label": "MP3 = \"mp3\"",
      "successors": [
        15
      ]
    },
    {
      "id": 15,
      "label": "RMS = \"rms\"",
      "successors": [
        16
      ]
    },
    {
      "id": 16,
      "label": "return result_url",
      "successors": []
    }
  ]
}