{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 93,
  "functions": [
    {
      "name": "generate_all_subsequences",
      "type": "function",
      "start_line": 14,
      "end_line": 15,
      "functions": [],
      "classes": [],
      "simplified_code": "def generate_all_subsequences(sequence: list[Any]) -> None:\n    create_state_space_tree(sequence, [], 0)",
      "blocks": [
        {
          "id": 1,
          "label": "def generate_all_subsequences(sequence: list[Any]) -> None:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "create_state_space_tree(sequence, [], 0)",
          "successors": []
        }
      ]
    },
    {
      "name": "create_state_space_tree",
      "type": "function",
      "start_line": 18,
      "end_line": 84,
      "functions": [],
      "classes": [],
      "simplified_code": "def create_state_space_tree(\n    sequence: list[Any], current_subsequence: list[Any], index: int\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"\n\n    if index == len(sequence):\n        print(current_subsequence)\n        return\n\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.append(sequence[index])\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.pop()",
      "blocks": [
        {
          "id": 1,
          "label": "def create_state_space_tree(sequence: list[Any], current_subsequence: list[Any], index: int) -> None:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if index == len(sequence):",
          "successors": [
            3,
            5
          ]
        },
        {
          "id": 3,
          "label": "print(current_subsequence)",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "return",
          "successors": []
        },
        {
          "id": 5,
          "label": "create_state_space_tree(sequence, current_subsequence, index + 1)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "current_subsequence.append(sequence[index])",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "create_state_space_tree(sequence, current_subsequence, index + 1)",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "current_subsequence.pop()",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "\"\"\"\nIn this problem, we want to determine all possible subsequences\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(2^n),\nwhere n denotes the length of the given sequence.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any\n\n\n    create_state_space_tree(sequence, [], 0)\n\n\n    current_subsequence.pop()\n\n\nif __name__ == \"__main__\":\n    seq: list[Any] = [1, 2, 3]\n    generate_all_subsequences(seq)\n\n    seq.clear()\n    seq.extend([\"A\", \"B\", \"C\"])\n    generate_all_subsequences(seq)",
  "blocks": [
    {
      "id": 1,
      "label": "if __name__ == '__main__':",
      "successors": [
        2,
        3
      ]
    },
    {
      "id": 2,
      "label": "seq: list[Any] = [1, 2, 3]\ngenerate_all_subsequences(seq)",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "seq.clear()\nseq.extend(['A', 'B', 'C'])\ngenerate_all_subsequences(seq)",
      "successors": []
    }
  ]
}