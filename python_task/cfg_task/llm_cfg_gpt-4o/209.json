{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 27,
  "functions": [
    {
      "name": "parse_jwt_token",
      "type": "function",
      "start_line": 8,
      "end_line": 27,
      "functions": [],
      "classes": [],
      "simplified_code": "def parse_jwt_token(token: str) -> Dict[str, Any]:\n    \"\"\"\n    Parse and validate a JWT token.\n\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired\n    \"\"\"\n    try:\n        payload = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )\n        return payload\n    except jwt.ExpiredSignatureError:\n        raise ValueError(\"Token has expired\")\n    except jwt.InvalidTokenError as e:\n        raise ValueError(f\"Invalid token: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "try:",
          "successors": [
            2,
            4,
            5
          ]
        },
        {
          "id": 2,
          "label": "payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM], audience=\"authenticated\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return payload",
          "successors": []
        },
        {
          "id": 4,
          "label": "except jwt.ExpiredSignatureError:",
          "successors": [
            6
          ]
        },
        {
          "id": 5,
          "label": "except jwt.InvalidTokenError as e:",
          "successors": [
            7
          ]
        },
        {
          "id": 6,
          "label": "raise ValueError(\"Token has expired\")",
          "successors": []
        },
        {
          "id": 7,
          "label": "raise ValueError(f\"Invalid token: {str(e)}\")",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from typing import Any, Dict\n\nimport jwt\n\nfrom .config import settings\n\n\n        raise ValueError(f\"Invalid token: {str(e)}\")",
  "blocks": [
    {
      "id": 1,
      "label": "from typing import Any, Dict",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "import jwt",
      "successors": [
        3
      ]
    },
    {
      "id": 3,
      "label": "from .config import settings",
      "successors": [
        4
      ]
    },
    {
      "id": 4,
      "label": "try:",
      "successors": [
        5,
        6
      ]
    },
    {
      "id": 5,
      "label": "jwt.decode(token, key, algorithms=['HS256'])",
      "successors": [
        8
      ]
    },
    {
      "id": 6,
      "label": "except jwt.ExpiredSignatureError:",
      "successors": [
        7
      ]
    },
    {
      "id": 7,
      "label": "raise ValueError('Token has expired')",
      "successors": [
        8
      ]
    },
    {
      "id": 8,
      "label": "except jwt.InvalidTokenError as e:",
      "successors": [
        9
      ]
    },
    {
      "id": 9,
      "label": "raise ValueError(f\"Invalid token: {str(e)}\")",
      "successors": []
    }
  ]
}