{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 20,
  "functions": [
    {
      "name": "thread_cached",
      "type": "function",
      "start_line": 8,
      "end_line": 20,
      "functions": [
        {
          "name": "wrapper",
          "type": "function",
          "start_line": 11,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, \"cache\", None)\n        if cache is None:\n            cache = thread_local.cache = {}\n        key = (args, tuple(sorted(kwargs.items())))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]",
          "blocks": [
            {
              "id": 1,
              "label": "cache = getattr(thread_local, \"cache\", None)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "if cache is None:",
              "successors": [
                3,
                4
              ]
            },
            {
              "id": 3,
              "label": "cache = thread_local.cache = {}",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "key = (args, tuple(sorted(kwargs.items())))",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "if key not in cache:",
              "successors": [
                6,
                7
              ]
            },
            {
              "id": 6,
              "label": "cache[key] = func(*args, **kwargs)",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "return cache[key]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:\n    thread_local = threading.local()\n\n        return cache[key]\n\n    return wrapper",
      "blocks": [
        {
          "id": 1,
          "label": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "thread_local = threading.local()",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return wrapper",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import threading\nfrom typing import Callable, ParamSpec, TypeVar\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\n\n\n    return wrapper",
  "blocks": [
    {
      "id": 4,
      "label": "except Exception as e:",
      "successors": [
        6,
        7
      ]
    },
    {
      "id": 5,
      "label": "print('something went wrong:', e)",
      "successors": [
        7
      ]
    },
    {
      "id": 6,
      "label": "finally:",
      "successors": [
        8
      ]
    },
    {
      "id": 7,
      "label": "print('finished')",
      "successors": []
    }
  ]
}