{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 71,
  "functions": [
    {
      "name": "wait_for_postgres",
      "type": "function",
      "start_line": 6,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "simplified_code": "def wait_for_postgres(max_retries=5, delay=5):\n    for _ in range(max_retries):\n        try:\n            result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )\n            if \"accepting connections\" in result.stdout:\n                print(\"PostgreSQL is ready.\")\n                return True\n        except subprocess.CalledProcessError:\n            print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n            time.sleep(delay)\n    print(\"Failed to connect to PostgreSQL.\")\n    return False",
      "blocks": [
        {
          "id": 1,
          "label": "def wait_for_postgres(max_retries=5, delay=5):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "for _ in range(max_retries):",
          "successors": [
            3,
            7
          ]
        },
        {
          "id": 3,
          "label": "try:",
          "successors": [
            4,
            6
          ]
        },
        {
          "id": 4,
          "label": "result = subprocess.run([...], check=True, capture_output=True, text=True)",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "if \"accepting connections\" in result.stdout:",
          "successors": [
            6,
            7
          ]
        },
        {
          "id": 6,
          "label": "print(\"PostgreSQL is ready.\")\nreturn True",
          "successors": []
        },
        {
          "id": 7,
          "label": "except subprocess.CalledProcessError:",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\ntime.sleep(delay)",
          "successors": [
            2
          ]
        },
        {
          "id": 9,
          "label": "print(\"Failed to connect to PostgreSQL.\")\nreturn False",
          "successors": []
        }
      ]
    },
    {
      "name": "run_command",
      "type": "function",
      "start_line": 37,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "simplified_code": "def run_command(command, check=True):\n    try:\n        subprocess.run(command, check=check)\n    except subprocess.CalledProcessError as e:\n        print(f\"Command failed: {e}\")\n        sys.exit(1)",
      "blocks": [
        {
          "id": 1,
          "label": "try:",
          "successors": [
            2,
            3
          ]
        },
        {
          "id": 2,
          "label": "subprocess.run(command, check=check)",
          "successors": [
            5
          ]
        },
        {
          "id": 3,
          "label": "except subprocess.CalledProcessError as e:",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "print(f\"Command failed: {e}\")",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "sys.exit(1)",
          "successors": []
        }
      ]
    },
    {
      "name": "test",
      "type": "function",
      "start_line": 45,
      "end_line": 71,
      "functions": [],
      "classes": [],
      "simplified_code": "def test():\n    # Start PostgreSQL with Docker Compose\n    run_command(\n        [\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]\n    )\n\n    if not wait_for_postgres():\n        run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n        sys.exit(1)\n\n    # Run Prisma migrations\n    run_command([\"prisma\", \"migrate\", \"dev\"])\n\n    # Run the tests\n    result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)\n\n    run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n\n    sys.exit(result.returncode)",
      "blocks": [
        {
          "id": 1,
          "label": "run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"up\", \"-d\", \"postgres-test\"])",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "if not wait_for_postgres():",
          "successors": [
            3,
            5
          ]
        },
        {
          "id": 3,
          "label": "run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "sys.exit(1)",
          "successors": []
        },
        {
          "id": 5,
          "label": "run_command([\"prisma\", \"migrate\", \"dev\"])",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "sys.exit(result.returncode)",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import subprocess\nimport sys\nimport time\n\n\n    return False\n\n\n        sys.exit(1)\n\n\n    sys.exit(result.returncode)",
  "blocks": [
    {
      "id": 1,
      "label": "import subprocess\nimport sys\nimport time",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "return False",
      "successors": []
    },
    {
      "id": 3,
      "label": "sys.exit(1)",
      "successors": []
    },
    {
      "id": 4,
      "label": "sys.exit(result.returncode)",
      "successors": []
    }
  ]
}