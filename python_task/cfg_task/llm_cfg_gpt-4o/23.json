{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 79,
  "functions": [
    {
      "name": "test_validate_url",
      "type": "function",
      "start_line": 6,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_validate_url():\n    # Rejected IP ranges\n    with pytest.raises(ValueError):\n        validate_url(\"localhost\", [])\n\n    with pytest.raises(ValueError):\n        validate_url(\"192.168.1.1\", [])\n\n    with pytest.raises(ValueError):\n        validate_url(\"127.0.0.1\", [])\n\n    with pytest.raises(ValueError):\n        validate_url(\"0.0.0.0\", [])\n\n    # Normal URLs\n    assert validate_url(\"google.com/a?b=c\", []) == \"http://google.com/a?b=c\"\n    assert validate_url(\"github.com?key=!@!@\", []) == \"http://github.com?key=!@!@\"\n\n    # Scheme Enforcement\n    with pytest.raises(ValueError):\n        validate_url(\"ftp://example.com\", [])\n    with pytest.raises(ValueError):\n        validate_url(\"file://example.com\", [])\n\n    # International domain that converts to punycode - should be allowed if public\n    assert validate_url(\"http://xn--exmple-cua.com\", []) == \"http://xn--exmple-cua.com\"\n    # If the domain fails IDNA encoding or is invalid, it should raise an error\n    with pytest.raises(ValueError):\n        validate_url(\"http://exa\u25ccmple.com\", [])\n\n    # IPv6 Addresses\n    with pytest.raises(ValueError):\n        validate_url(\"::1\", [])  # IPv6 loopback should be blocked\n    with pytest.raises(ValueError):\n        validate_url(\"http://[::1]\", [])  # IPv6 loopback in URL form\n\n    # Suspicious Characters in Hostname\n    with pytest.raises(ValueError):\n        validate_url(\"http://example_underscore.com\", [])\n    with pytest.raises(ValueError):\n        validate_url(\"http://exa mple.com\", [])  # Space in hostname\n\n    # Malformed URLs\n    with pytest.raises(ValueError):\n        validate_url(\"http://\", [])  # No hostname\n    with pytest.raises(ValueError):\n        validate_url(\"://missing-scheme\", [])  # Missing proper scheme\n\n    # Trusted Origins\n    trusted = [\"internal-api.company.com\", \"10.0.0.5\"]\n    assert (\n        validate_url(\"internal-api.company.com\", trusted)\n        == \"http://internal-api.company.com\"\n    )\n    assert validate_url(\"10.0.0.5\", [\"10.0.0.5\"]) == \"http://10.0.0.5\"\n\n    # Special Characters in Path or Query\n    assert (\n        validate_url(\"example.com/path%20with%20spaces\", [])\n        == \"http://example.com/path%20with%20spaces\"\n    )\n\n    # Backslashes should be replaced with forward slashes\n    assert (\n        validate_url(\"http://example.com\\\\backslash\", [])\n        == \"http://example.com/backslash\"\n    )\n\n    # Check defaulting scheme behavior for valid domains\n    assert validate_url(\"example.com\", []) == \"http://example.com\"\n    assert validate_url(\"https://secure.com\", []) == \"https://secure.com\"\n\n    # Non-ASCII Characters in Query/Fragment\n    assert validate_url(\"example.com?param=\u00e4\u00f6\u00fc\", []) == \"http://example.com?param=\u00e4\u00f6\u00fc\"",
      "blocks": [
        {
          "id": 1,
          "label": "def test_validate_url():",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "with pytest.raises(ValueError): validate_url('localhost', [])",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "with pytest.raises(ValueError): validate_url('192.168.1.1', [])",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "with pytest.raises(ValueError): validate_url('127.0.0.1', [])",
          "successors": [
            5
          ]
        },
        {
          "id": 5,
          "label": "with pytest.raises(ValueError): validate_url('0.0.0.0', [])",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "assert validate_url('google.com/a?b=c', []) == 'http://google.com/a?b=c'",
          "successors": [
            7
          ]
        },
        {
          "id": 7,
          "label": "assert validate_url('github.com?key=!@!@', []) == 'http://github.com?key=!@!@'",
          "successors": [
            8
          ]
        },
        {
          "id": 8,
          "label": "with pytest.raises(ValueError): validate_url('ftp://example.com', [])",
          "successors": [
            9
          ]
        },
        {
          "id": 9,
          "label": "with pytest.raises(ValueError): validate_url('file://example.com', [])",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "assert validate_url('http://xn--exmple-cua.com', []) == 'http://xn--exmple-cua.com'",
          "successors": [
            11
          ]
        },
        {
          "id": 11,
          "label": "with pytest.raises(ValueError): validate_url('http://exa\u25ccmple.com', [])",
          "successors": [
            12
          ]
        },
        {
          "id": 12,
          "label": "with pytest.raises(ValueError): validate_url('::1', [])",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "with pytest.raises(ValueError): validate_url('http://[::1]', [])",
          "successors": [
            14
          ]
        },
        {
          "id": 14,
          "label": "with pytest.raises(ValueError): validate_url('http://example_underscore.com', [])",
          "successors": [
            15
          ]
        },
        {
          "id": 15,
          "label": "with pytest.raises(ValueError): validate_url('http://exa mple.com', [])",
          "successors": [
            16
          ]
        },
        {
          "id": 16,
          "label": "with pytest.raises(ValueError): validate_url('http://', [])",
          "successors": [
            17
          ]
        },
        {
          "id": 17,
          "label": "with pytest.raises(ValueError): validate_url('://missing-scheme', [])",
          "successors": [
            18
          ]
        },
        {
          "id": 18,
          "label": "trusted = ['internal-api.company.com', '10.0.0.5']",
          "successors": [
            19
          ]
        },
        {
          "id": 19,
          "label": "assert validate_url('internal-api.company.com', trusted) == 'http://internal-api.company.com'",
          "successors": [
            20
          ]
        },
        {
          "id": 20,
          "label": "assert validate_url('10.0.0.5', ['10.0.0.5']) == 'http://10.0.0.5'",
          "successors": [
            21
          ]
        },
        {
          "id": 21,
          "label": "assert validate_url('example.com/path%20with%20spaces', []) == 'http://example.com/path%20with%20spaces'",
          "successors": [
            22
          ]
        },
        {
          "id": 22,
          "label": "assert validate_url('http://example.com\\backslash', []) == 'http://example.com/backslash'",
          "successors": [
            23
          ]
        },
        {
          "id": 23,
          "label": "assert validate_url('example.com', []) == 'http://example.com'",
          "successors": [
            24
          ]
        },
        {
          "id": 24,
          "label": "assert validate_url('https://secure.com', []) == 'https://secure.com'",
          "successors": [
            25
          ]
        },
        {
          "id": 25,
          "label": "assert validate_url('example.com?param=\u00e4\u00f6\u00fc', []) == 'http://example.com?param=\u00e4\u00f6\u00fc'",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import pytest\n\nfrom backend.util.request import validate_url\n\n\n    assert validate_url(\"example.com?param=\u00e4\u00f6\u00fc\", []) == \"http://example.com?param=\u00e4\u00f6\u00fc\"",
  "blocks": [
    {
      "id": 1,
      "label": "import pytest\n\nfrom backend.util.request import validate_url",
      "successors": [
        2
      ]
    },
    {
      "id": 2,
      "label": "assert validate_url(\"example.com?param=\u00e4\u00f6\u00fc\", []) == \"http://example.com?param=\u00e4\u00f6\u00fc\"",
      "successors": []
    }
  ]
}