{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 49,
  "functions": [
    {
      "name": "log_raw_metric",
      "type": "function",
      "start_line": 14,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "simplified_code": "async def log_raw_metric(\n    user_id: Annotated[str, fastapi.Depends(get_user_id)],\n    metric_name: Annotated[str, fastapi.Body(..., embed=True)],\n    metric_value: Annotated[float, fastapi.Body(..., embed=True)],\n    data_string: Annotated[str, fastapi.Body(..., embed=True)],\n):\n    result = await backend.data.analytics.log_raw_metric(\n        user_id=user_id,\n        metric_name=metric_name,\n        metric_value=metric_value,\n        data_string=data_string,\n    )\n    return result.id",
      "blocks": [
        {
          "id": 1,
          "label": "async def log_raw_metric(user_id, metric_name, metric_value, data_string):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "result = await backend.data.analytics.log_raw_metric(...)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return result.id",
          "successors": []
        }
      ]
    },
    {
      "name": "log_raw_analytics",
      "type": "function",
      "start_line": 30,
      "end_line": 49,
      "functions": [],
      "classes": [],
      "simplified_code": "async def log_raw_analytics(\n    user_id: Annotated[str, fastapi.Depends(get_user_id)],\n    type: Annotated[str, fastapi.Body(..., embed=True)],\n    data: Annotated[\n        dict,\n        fastapi.Body(..., embed=True, description=\"The data to log\"),\n    ],\n    data_index: Annotated[\n        str,\n        fastapi.Body(\n            ...,\n            embed=True,\n            description=\"Indexable field for any count based analytical measures like page order clicking, tutorial step completion, etc.\",\n        ),\n    ],\n):\n    result = await backend.data.analytics.log_raw_analytics(\n        user_id, type, data, data_index\n    )\n    return result.id",
      "blocks": [
        {
          "id": 1,
          "label": "async def log_raw_analytics(...):",
          "successors": [
            2
          ]
        },
        {
          "id": 2,
          "label": "result = await backend.data.analytics.log_raw_analytics(user_id, type, data, data_index)",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "return result.id",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "\"\"\"Analytics API\"\"\"\n\nfrom typing import Annotated\n\nimport fastapi\n\nimport backend.data.analytics\nfrom backend.server.utils import get_user_id\n\nrouter = fastapi.APIRouter()\n\n\n@router.post(path=\"/log_raw_metric\")\n    return result.id\n\n\n@router.post(\"/log_raw_analytics\")\n    return result.id",
  "blocks": [
    {
      "id": 1,
      "label": "\"\"\"Analytics API\"\"\"\n\nfrom typing import Annotated\n\nimport fastapi\n\nimport backend.data.analytics\nfrom backend.server.utils import get_user_id\n\nrouter = fastapi.APIRouter()",
      "successors": [
        2,
        3
      ]
    },
    {
      "id": 2,
      "label": "@router.post(path=\"/log_raw_metric\")\nasync def log_raw_metric() -> str:",
      "successors": [
        4
      ]
    },
    {
      "id": 3,
      "label": "@router.post(\"/log_raw_analytics\")\nasync def log_raw_analytics() -> str:",
      "successors": [
        5
      ]
    },
    {
      "id": 4,
      "label": "result = backend.data.analytics.log_metric()\nreturn result.id",
      "successors": []
    },
    {
      "id": 5,
      "label": "result = backend.data.analytics.log_analytics()\nreturn result.id",
      "successors": []
    }
  ]
}