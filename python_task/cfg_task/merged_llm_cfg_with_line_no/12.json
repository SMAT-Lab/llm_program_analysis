{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 701,
  "functions": [],
  "classes": [
    {
      "name": "GithubListTagsBlock",
      "type": "class",
      "start_line": 18,
      "end_line": 98,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 36,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 36,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 37,
              "line": "        super().__init__("
            },
            {
              "lineno": 38,
              "line": "            id=\"358924e7-9a11-4d1a-a0f2-13c67fe59e2e\","
            },
            {
              "lineno": 39,
              "line": "            description=\"This block lists all tags for a specified GitHub repository.\","
            },
            {
              "lineno": 40,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 41,
              "line": "            input_schema=GithubListTagsBlock.Input,"
            },
            {
              "lineno": 42,
              "line": "            output_schema=GithubListTagsBlock.Output,"
            },
            {
              "lineno": 43,
              "line": "            test_input={"
            },
            {
              "lineno": 44,
              "line": "                \"repo_url\": \"https://github.com/owner/repo\","
            },
            {
              "lineno": 45,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 46,
              "line": "            },"
            },
            {
              "lineno": 47,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 48,
              "line": "            test_output=["
            },
            {
              "lineno": 49,
              "line": "                ("
            },
            {
              "lineno": 50,
              "line": "                    \"tag\","
            },
            {
              "lineno": 51,
              "line": "                    {"
            },
            {
              "lineno": 52,
              "line": "                        \"name\": \"v1.0.0\","
            },
            {
              "lineno": 53,
              "line": "                        \"url\": \"https://github.com/owner/repo/tree/v1.0.0\","
            },
            {
              "lineno": 54,
              "line": "                    },"
            },
            {
              "lineno": 55,
              "line": "                )"
            },
            {
              "lineno": 56,
              "line": "            ],"
            },
            {
              "lineno": 57,
              "line": "            test_mock={"
            },
            {
              "lineno": 58,
              "line": "                \"list_tags\": lambda *args, **kwargs: ["
            },
            {
              "lineno": 59,
              "line": "                    {"
            },
            {
              "lineno": 60,
              "line": "                        \"name\": \"v1.0.0\","
            },
            {
              "lineno": 61,
              "line": "                        \"url\": \"https://github.com/owner/repo/tree/v1.0.0\","
            },
            {
              "lineno": 62,
              "line": "                    }"
            },
            {
              "lineno": 63,
              "line": "                ]"
            },
            {
              "lineno": 64,
              "line": "            },"
            },
            {
              "lineno": 65,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": " def __init__(self): super().__init( id=\"358924e7-9a11-4d1a-a0f2-13c67fe59e2e\", description=\"This block lists all tags for a specified GitHub repository.\", categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubListTagsBlock.Input, output_schema=GithubListTagsBlock.Output, test_input={ \"repo_url\": \"https://github.com/owner/repo\", \"credentials\": TEST_CREDENTIALS_INPUT, }, test_credentials=TEST_CREDENTIALS, test_output=[ ( \"tag\", { \"name\": \"v1.0.0\", \"url\": \"https://github.com/owner/repo/tree/v1.0.0\", }, ) ], test_mock={ \"list_tags\": lambda *args, **kwargs: [ { \"name\": \"v1.0.0\", \"url\": \"https://github.com/owner/repo/tree/v1.0.0\", } ] }, )",
              "successors": []
            }
          ]
        },
        {
          "name": "list_tags",
          "type": "function",
          "start_line": 67,
          "end_line": 83,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 67,
              "line": "    @staticmethod"
            },
            {
              "lineno": 68,
              "line": "    def list_tags("
            },
            {
              "lineno": 69,
              "line": "        credentials: GithubCredentials, repo_url: str"
            },
            {
              "lineno": 70,
              "line": "    ) -> list[Output.TagItem]:"
            },
            {
              "lineno": 71,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 72,
              "line": "        tags_url = repo_url + \"/tags\""
            },
            {
              "lineno": 73,
              "line": "        response = api.get(tags_url)"
            },
            {
              "lineno": 74,
              "line": "        data = response.json()"
            },
            {
              "lineno": 75,
              "line": "        repo_path = repo_url.replace(\"https://github.com/\", \"\")"
            },
            {
              "lineno": 76,
              "line": "        tags: list[GithubListTagsBlock.Output.TagItem] = ["
            },
            {
              "lineno": 77,
              "line": "            {"
            },
            {
              "lineno": 78,
              "line": "                \"name\": tag[\"name\"],"
            },
            {
              "lineno": 79,
              "line": "                \"url\": f\"https://github.com/{repo_path}/tree/{tag['name']}\","
            },
            {
              "lineno": 80,
              "line": "            }"
            },
            {
              "lineno": 81,
              "line": "            for tag in data"
            },
            {
              "lineno": 82,
              "line": "        ]"
            },
            {
              "lineno": 83,
              "line": "        return tags"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    @staticmethod\n    def list_tags(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.TagItem]:\n        api = get_api(credentials)\n        tags_url = repo_url + \"/tags\"\n        response = api.get(tags_url)\n        data = response.json()\n        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        tags: list[GithubListTagsBlock.Output.TagItem] = [\n            {\n                \"name\": tag[\"name\"],\n                \"url\": f\"https://github.com/{repo_path}/tree/{tag['name']}\",\n            }\n            for tag in data\n        ]",
              "successors": [
                {
                  "id": 3,
                  "label": "        return tags",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 85,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 85,
              "line": "    def run("
            },
            {
              "lineno": 86,
              "line": "        self,"
            },
            {
              "lineno": 87,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 88,
              "line": "        *,"
            },
            {
              "lineno": 89,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 90,
              "line": "        **kwargs,"
            },
            {
              "lineno": 91,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 92,
              "line": "        tags = self.list_tags("
            },
            {
              "lineno": 93,
              "line": "            credentials,"
            },
            {
              "lineno": 94,
              "line": "            input_data.repo_url,"
            },
            {
              "lineno": 95,
              "line": "        )"
            },
            {
              "lineno": 96,
              "line": "        yield from ((\"tag\", tag) for tag in tags)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        tags = self.list_tags(\n            credentials,\n            input_data.repo_url,\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        yield from ((\"tag\", tag) for tag in tags)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 19,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 19,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 20,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 21,
              "line": "        repo_url: str = SchemaField("
            },
            {
              "lineno": 22,
              "line": "            description=\"URL of the GitHub repository\","
            },
            {
              "lineno": 23,
              "line": "            placeholder=\"https://github.com/owner/repo\","
            },
            {
              "lineno": 24,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 26,
          "end_line": 34,
          "functions": [],
          "classes": [
            {
              "name": "TagItem",
              "type": "class",
              "start_line": 27,
              "end_line": 29,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 27,
                  "line": "        class TagItem(TypedDict):"
                },
                {
                  "lineno": 28,
                  "line": "            name: str"
                },
                {
                  "lineno": 29,
                  "line": "            url: str"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "label": "        class TagItem(TypedDict):\n            name: str\n            url: str",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": [
            {
              "lineno": 26,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 30,
              "line": ""
            },
            {
              "lineno": 31,
              "line": "        tag: TagItem = SchemaField("
            },
            {
              "lineno": 32,
              "line": "            title=\"Tag\", description=\"Tags with their name and file tree browser URL\""
            },
            {
              "lineno": 33,
              "line": "        )"
            },
            {
              "lineno": 34,
              "line": "        error: str = SchemaField(description=\"Error message if listing tags failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n\n        tag: TagItem = SchemaField(\n            title=\"Tag\", description=\"Tags with their name and file tree browser URL\"\n        )\n        error: str = SchemaField(description=\"Error message if listing tags failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 18,
          "line": "class GithubListTagsBlock(Block):"
        },
        {
          "lineno": 25,
          "line": ""
        },
        {
          "lineno": 35,
          "line": ""
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 84,
          "line": ""
        },
        {
          "lineno": 97,
          "line": ""
        },
        {
          "lineno": 98,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubListTagsBlock(Block):",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubListBranchesBlock",
      "type": "class",
      "start_line": 99,
      "end_line": 180,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 118,
          "end_line": 147,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 118,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 119,
              "line": "        super().__init__("
            },
            {
              "lineno": 120,
              "line": "            id=\"74243e49-2bec-4916-8bf4-db43d44aead5\","
            },
            {
              "lineno": 121,
              "line": "            description=\"This block lists all branches for a specified GitHub repository.\","
            },
            {
              "lineno": 122,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 123,
              "line": "            input_schema=GithubListBranchesBlock.Input,"
            },
            {
              "lineno": 124,
              "line": "            output_schema=GithubListBranchesBlock.Output,"
            },
            {
              "lineno": 125,
              "line": "            test_input={"
            },
            {
              "lineno": 126,
              "line": "                \"repo_url\": \"https://github.com/owner/repo\","
            },
            {
              "lineno": 127,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 128,
              "line": "            },"
            },
            {
              "lineno": 129,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 130,
              "line": "            test_output=["
            },
            {
              "lineno": 131,
              "line": "                ("
            },
            {
              "lineno": 132,
              "line": "                    \"branch\","
            },
            {
              "lineno": 133,
              "line": "                    {"
            },
            {
              "lineno": 134,
              "line": "                        \"name\": \"main\","
            },
            {
              "lineno": 135,
              "line": "                        \"url\": \"https://github.com/owner/repo/tree/main\","
            },
            {
              "lineno": 136,
              "line": "                    },"
            },
            {
              "lineno": 137,
              "line": "                )"
            },
            {
              "lineno": 138,
              "line": "            ],"
            },
            {
              "lineno": 139,
              "line": "            test_mock={"
            },
            {
              "lineno": 140,
              "line": "                \"list_branches\": lambda *args, **kwargs: ["
            },
            {
              "lineno": 141,
              "line": "                    {"
            },
            {
              "lineno": 142,
              "line": "                        \"name\": \"main\","
            },
            {
              "lineno": 143,
              "line": "                        \"url\": \"https://github.com/owner/repo/tree/main\","
            },
            {
              "lineno": 144,
              "line": "                    }"
            },
            {
              "lineno": 145,
              "line": "                ]"
            },
            {
              "lineno": 146,
              "line": "            },"
            },
            {
              "lineno": 147,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"74243e49-2bec-4916-8bf4-db43d44aead5\",\n            description=\"This block lists all branches for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListBranchesBlock.Input,\n            output_schema=GithubListBranchesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"branch\",\n                    {\n                        \"name\": \"main\",\n                        \"url\": \"https://github.com/owner/repo/tree/main\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_branches\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"main\",\n                        \"url\": \"https://github.com/owner/repo/tree/main\",\n                    }\n                ]\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "list_branches",
          "type": "function",
          "start_line": 150,
          "end_line": 165,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 150,
              "line": "    def list_branches("
            },
            {
              "lineno": 151,
              "line": "        credentials: GithubCredentials, repo_url: str"
            },
            {
              "lineno": 152,
              "line": "    ) -> list[Output.BranchItem]:"
            },
            {
              "lineno": 153,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 154,
              "line": "        branches_url = repo_url + \"/branches\""
            },
            {
              "lineno": 155,
              "line": "        response = api.get(branches_url)"
            },
            {
              "lineno": 156,
              "line": "        data = response.json()"
            },
            {
              "lineno": 157,
              "line": "        repo_path = repo_url.replace(\"https://github.com/\", \"\")"
            },
            {
              "lineno": 158,
              "line": "        branches: list[GithubListBranchesBlock.Output.BranchItem] = ["
            },
            {
              "lineno": 159,
              "line": "            {"
            },
            {
              "lineno": 160,
              "line": "                \"name\": branch[\"name\"],"
            },
            {
              "lineno": 161,
              "line": "                \"url\": f\"https://github.com/{repo_path}/tree/{branch['name']}\","
            },
            {
              "lineno": 162,
              "line": "            }"
            },
            {
              "lineno": 163,
              "line": "            for branch in data"
            },
            {
              "lineno": 164,
              "line": "        ]"
            },
            {
              "lineno": 165,
              "line": "        return branches"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def list_branches(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.BranchItem]:\n        api = get_api(credentials)\n        branches_url = repo_url + \"/branches\"\n        response = api.get(branches_url)\n        data = response.json()\n        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        branches: list[GithubListBranchesBlock.Output.BranchItem] = [\n            {\n                \"name\": branch[\"name\"],\n                \"url\": f\"https://github.com/{repo_path}/tree/{branch['name']}\",\n            }\n            for branch in data\n        ]\n        return branches",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 167,
          "end_line": 178,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 167,
              "line": "    def run("
            },
            {
              "lineno": 168,
              "line": "        self,"
            },
            {
              "lineno": 169,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 170,
              "line": "        *,"
            },
            {
              "lineno": 171,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 172,
              "line": "        **kwargs,"
            },
            {
              "lineno": 173,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 174,
              "line": "        branches = self.list_branches("
            },
            {
              "lineno": 175,
              "line": "            credentials,"
            },
            {
              "lineno": 176,
              "line": "            input_data.repo_url,"
            },
            {
              "lineno": 177,
              "line": "        )"
            },
            {
              "lineno": 178,
              "line": "        yield from ((\"branch\", branch) for branch in branches)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        branches = self.list_branches(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"branch\", branch) for branch in branches)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 100,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 100,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 101,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 102,
              "line": "        repo_url: str = SchemaField("
            },
            {
              "lineno": 103,
              "line": "            description=\"URL of the GitHub repository\","
            },
            {
              "lineno": 104,
              "line": "            placeholder=\"https://github.com/owner/repo\","
            },
            {
              "lineno": 105,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 107,
          "end_line": 116,
          "functions": [],
          "classes": [
            {
              "name": "BranchItem",
              "type": "class",
              "start_line": 108,
              "end_line": 110,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 108,
                  "line": "        class BranchItem(TypedDict):"
                },
                {
                  "lineno": 109,
                  "line": "            name: str"
                },
                {
                  "lineno": 110,
                  "line": "            url: str"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "label": "        class BranchItem(TypedDict):\n            name: str\n            url: str",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": [
            {
              "lineno": 107,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 111,
              "line": ""
            },
            {
              "lineno": 112,
              "line": "        branch: BranchItem = SchemaField("
            },
            {
              "lineno": 113,
              "line": "            title=\"Branch\","
            },
            {
              "lineno": 114,
              "line": "            description=\"Branches with their name and file tree browser URL\","
            },
            {
              "lineno": 115,
              "line": "        )"
            },
            {
              "lineno": 116,
              "line": "        error: str = SchemaField(description=\"Error message if listing branches failed\")"
            }
          ],
          "blocks": []
        }
      ],
      "simplified_code": [
        {
          "lineno": 99,
          "line": "class GithubListBranchesBlock(Block):"
        },
        {
          "lineno": 106,
          "line": ""
        },
        {
          "lineno": 117,
          "line": ""
        },
        {
          "lineno": 148,
          "line": ""
        },
        {
          "lineno": 149,
          "line": "    @staticmethod"
        },
        {
          "lineno": 166,
          "line": ""
        },
        {
          "lineno": 179,
          "line": ""
        },
        {
          "lineno": 180,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "GithubListDiscussionsBlock",
      "type": "class",
      "start_line": 181,
      "end_line": 280,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 204,
          "end_line": 234,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 204,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 205,
              "line": "        super().__init__("
            },
            {
              "lineno": 206,
              "line": "            id=\"3ef1a419-3d76-4e07-b761-de9dad4d51d7\","
            },
            {
              "lineno": 207,
              "line": "            description=\"This block lists recent discussions for a specified GitHub repository.\","
            },
            {
              "lineno": 208,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 209,
              "line": "            input_schema=GithubListDiscussionsBlock.Input,"
            },
            {
              "lineno": 210,
              "line": "            output_schema=GithubListDiscussionsBlock.Output,"
            },
            {
              "lineno": 211,
              "line": "            test_input={"
            },
            {
              "lineno": 212,
              "line": "                \"repo_url\": \"https://github.com/owner/repo\","
            },
            {
              "lineno": 213,
              "line": "                \"num_discussions\": 3,"
            },
            {
              "lineno": 214,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 215,
              "line": "            },"
            },
            {
              "lineno": 216,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 217,
              "line": "            test_output=["
            },
            {
              "lineno": 218,
              "line": "                ("
            },
            {
              "lineno": 219,
              "line": "                    \"discussion\","
            },
            {
              "lineno": 220,
              "line": "                    {"
            },
            {
              "lineno": 221,
              "line": "                        \"title\": \"Discussion 1\","
            },
            {
              "lineno": 222,
              "line": "                        \"url\": \"https://github.com/owner/repo/discussions/1\","
            },
            {
              "lineno": 223,
              "line": "                    },"
            },
            {
              "lineno": 224,
              "line": "                )"
            },
            {
              "lineno": 225,
              "line": "            ],"
            },
            {
              "lineno": 226,
              "line": "            test_mock={"
            },
            {
              "lineno": 227,
              "line": "                \"list_discussions\": lambda *args, **kwargs: ["
            },
            {
              "lineno": 228,
              "line": "                    {"
            },
            {
              "lineno": 229,
              "line": "                        \"title\": \"Discussion 1\","
            },
            {
              "lineno": 230,
              "line": "                        \"url\": \"https://github.com/owner/repo/discussions/1\","
            },
            {
              "lineno": 231,
              "line": "                    }"
            },
            {
              "lineno": 232,
              "line": "                ]"
            },
            {
              "lineno": 233,
              "line": "            },"
            },
            {
              "lineno": 234,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"3ef1a419-3d76-4e07-b761-de9dad4d51d7\",\n            description=\"This block lists recent discussions for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListDiscussionsBlock.Input,\n            output_schema=GithubListDiscussionsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"num_discussions\": 3,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"discussion\",\n                    {\n                        \"title\": \"Discussion 1\",\n                        \"url\": \"https://github.com/owner/repo/discussions/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_discussions\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Discussion 1\",\n                        \"url\": \"https://github.com/owner/repo/discussions/1\",\n                    }\n                ]\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "list_discussions",
          "type": "function",
          "start_line": 237,
          "end_line": 266,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 237,
              "line": "    def list_discussions("
            },
            {
              "lineno": 238,
              "line": "        credentials: GithubCredentials, repo_url: str, num_discussions: int"
            },
            {
              "lineno": 239,
              "line": "    ) -> list[Output.DiscussionItem]:"
            },
            {
              "lineno": 240,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 241,
              "line": "        # GitHub GraphQL API endpoint is different; we'll use api.post with custom URL"
            },
            {
              "lineno": 242,
              "line": "        repo_path = repo_url.replace(\"https://github.com/\", \"\")"
            },
            {
              "lineno": 243,
              "line": "        owner, repo = repo_path.split(\"/\")"
            },
            {
              "lineno": 244,
              "line": "        query = \"\"\""
            },
            {
              "lineno": 245,
              "line": "        query($owner: String!, $repo: String!, $num: Int!) {"
            },
            {
              "lineno": 246,
              "line": "            repository(owner: $owner, name: $repo) {"
            },
            {
              "lineno": 247,
              "line": "                discussions(first: $num) {"
            },
            {
              "lineno": 248,
              "line": "                    nodes {"
            },
            {
              "lineno": 249,
              "line": "                        title"
            },
            {
              "lineno": 250,
              "line": "                        url"
            },
            {
              "lineno": 251,
              "line": "                    }"
            },
            {
              "lineno": 252,
              "line": "                }"
            },
            {
              "lineno": 253,
              "line": "            }"
            },
            {
              "lineno": 254,
              "line": "        }"
            },
            {
              "lineno": 255,
              "line": "        \"\"\""
            },
            {
              "lineno": 256,
              "line": "        variables = {\"owner\": owner, \"repo\": repo, \"num\": num_discussions}"
            },
            {
              "lineno": 257,
              "line": "        response = api.post("
            },
            {
              "lineno": 258,
              "line": "            \"https://api.github.com/graphql\","
            },
            {
              "lineno": 259,
              "line": "            json={\"query\": query, \"variables\": variables},"
            },
            {
              "lineno": 260,
              "line": "        )"
            },
            {
              "lineno": 261,
              "line": "        data = response.json()"
            },
            {
              "lineno": 262,
              "line": "        discussions: list[GithubListDiscussionsBlock.Output.DiscussionItem] = ["
            },
            {
              "lineno": 263,
              "line": "            {\"title\": discussion[\"title\"], \"url\": discussion[\"url\"]}"
            },
            {
              "lineno": 264,
              "line": "            for discussion in data[\"data\"][\"repository\"][\"discussions\"][\"nodes\"]"
            },
            {
              "lineno": 265,
              "line": "        ]"
            },
            {
              "lineno": 266,
              "line": "        return discussions"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def list_discussions(\n        credentials: GithubCredentials, repo_url: str, num_discussions: int\n    ) -> list[Output.DiscussionItem]:\n        api = get_api(credentials)\n        # GitHub GraphQL API endpoint is different; we'll use api.post with custom URL\n        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        owner, repo = repo_path.split(\"/\")\n        query = \"\"\"\n        query($owner: String!, $repo: String!, $num: Int!) {\n            repository(owner: $owner, name: $repo) {\n                discussions(first: $num) {\n                    nodes {\n                        title\n                        url\n                    }\n                }\n            }\n        }\n        \"\"\"\n        variables = {\"owner\": owner, \"repo\": repo, \"num\": num_discussions}\n        response = api.post(\n            \"https://api.github.com/graphql\",\n            json={\"query\": query, \"variables\": variables},\n        )\n        data = response.json()\n        discussions: list[GithubListDiscussionsBlock.Output.DiscussionItem] = [\n            {\"title\": discussion[\"title\"], \"url\": discussion[\"url\"]}\n            for discussion in data[\"data\"][\"repository\"][\"discussions\"][\"nodes\"]\n        ]\n        return discussions",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 268,
          "end_line": 278,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 268,
              "line": "    def run("
            },
            {
              "lineno": 269,
              "line": "        self,"
            },
            {
              "lineno": 270,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 271,
              "line": "        *,"
            },
            {
              "lineno": 272,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 273,
              "line": "        **kwargs,"
            },
            {
              "lineno": 274,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 275,
              "line": "        discussions = self.list_discussions("
            },
            {
              "lineno": 276,
              "line": "            credentials, input_data.repo_url, input_data.num_discussions"
            },
            {
              "lineno": 277,
              "line": "        )"
            },
            {
              "lineno": 278,
              "line": "        yield from ((\"discussion\", discussion) for discussion in discussions)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        discussions = self.list_discussions(\n            credentials, input_data.repo_url, input_data.num_discussions\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        yield from ((\"discussion\", discussion) for discussion in discussions)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 182,
          "end_line": 190,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 182,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 183,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 184,
              "line": "        repo_url: str = SchemaField("
            },
            {
              "lineno": 185,
              "line": "            description=\"URL of the GitHub repository\","
            },
            {
              "lineno": 186,
              "line": "            placeholder=\"https://github.com/owner/repo\","
            },
            {
              "lineno": 187,
              "line": "        )"
            },
            {
              "lineno": 188,
              "line": "        num_discussions: int = SchemaField("
            },
            {
              "lineno": 189,
              "line": "            description=\"Number of discussions to fetch\", default=5"
            },
            {
              "lineno": 190,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        num_discussions: int = SchemaField(\n            description=\"Number of discussions to fetch\", default=5\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 192,
          "end_line": 202,
          "functions": [],
          "classes": [
            {
              "name": "DiscussionItem",
              "type": "class",
              "start_line": 193,
              "end_line": 195,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 193,
                  "line": "        class DiscussionItem(TypedDict):"
                },
                {
                  "lineno": 194,
                  "line": "            title: str"
                },
                {
                  "lineno": 195,
                  "line": "            url: str"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "label": "class DiscussionItem(TypedDict):\n    title: str\n    url: str",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": [
            {
              "lineno": 192,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 196,
              "line": ""
            },
            {
              "lineno": 197,
              "line": "        discussion: DiscussionItem = SchemaField("
            },
            {
              "lineno": 198,
              "line": "            title=\"Discussion\", description=\"Discussions with their title and URL\""
            },
            {
              "lineno": 199,
              "line": "        )"
            },
            {
              "lineno": 200,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 201,
              "line": "            description=\"Error message if listing discussions failed\""
            },
            {
              "lineno": 202,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n\n        discussion: DiscussionItem = SchemaField(\n            title=\"Discussion\", description=\"Discussions with their title and URL\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if listing discussions failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 181,
          "line": "class GithubListDiscussionsBlock(Block):"
        },
        {
          "lineno": 191,
          "line": ""
        },
        {
          "lineno": 203,
          "line": ""
        },
        {
          "lineno": 235,
          "line": ""
        },
        {
          "lineno": 236,
          "line": "    @staticmethod"
        },
        {
          "lineno": 267,
          "line": ""
        },
        {
          "lineno": 279,
          "line": ""
        },
        {
          "lineno": 280,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubListDiscussionsBlock(Block):",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubListReleasesBlock",
      "type": "class",
      "start_line": 281,
      "end_line": 357,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 300,
          "end_line": 329,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 300,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 301,
              "line": "        super().__init__("
            },
            {
              "lineno": 302,
              "line": "            id=\"3460367a-6ba7-4645-8ce6-47b05d040b92\","
            },
            {
              "lineno": 303,
              "line": "            description=\"This block lists all releases for a specified GitHub repository.\","
            },
            {
              "lineno": 304,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 305,
              "line": "            input_schema=GithubListReleasesBlock.Input,"
            },
            {
              "lineno": 306,
              "line": "            output_schema=GithubListReleasesBlock.Output,"
            },
            {
              "lineno": 307,
              "line": "            test_input={"
            },
            {
              "lineno": 308,
              "line": "                \"repo_url\": \"https://github.com/owner/repo\","
            },
            {
              "lineno": 309,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 310,
              "line": "            },"
            },
            {
              "lineno": 311,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 312,
              "line": "            test_output=["
            },
            {
              "lineno": 313,
              "line": "                ("
            },
            {
              "lineno": 314,
              "line": "                    \"release\","
            },
            {
              "lineno": 315,
              "line": "                    {"
            },
            {
              "lineno": 316,
              "line": "                        \"name\": \"v1.0.0\","
            },
            {
              "lineno": 317,
              "line": "                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\","
            },
            {
              "lineno": 318,
              "line": "                    },"
            },
            {
              "lineno": 319,
              "line": "                )"
            },
            {
              "lineno": 320,
              "line": "            ],"
            },
            {
              "lineno": 321,
              "line": "            test_mock={"
            },
            {
              "lineno": 322,
              "line": "                \"list_releases\": lambda *args, **kwargs: ["
            },
            {
              "lineno": 323,
              "line": "                    {"
            },
            {
              "lineno": 324,
              "line": "                        \"name\": \"v1.0.0\","
            },
            {
              "lineno": 325,
              "line": "                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\","
            },
            {
              "lineno": 326,
              "line": "                    }"
            },
            {
              "lineno": 327,
              "line": "                ]"
            },
            {
              "lineno": 328,
              "line": "            },"
            },
            {
              "lineno": 329,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"3460367a-6ba7-4645-8ce6-47b05d040b92\",\n            description=\"This block lists all releases for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListReleasesBlock.Input,\n            output_schema=GithubListReleasesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"release\",\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_releases\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n                    }\n                ]\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "list_releases",
          "type": "function",
          "start_line": 332,
          "end_line": 342,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 332,
              "line": "    def list_releases("
            },
            {
              "lineno": 333,
              "line": "        credentials: GithubCredentials, repo_url: str"
            },
            {
              "lineno": 334,
              "line": "    ) -> list[Output.ReleaseItem]:"
            },
            {
              "lineno": 335,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 336,
              "line": "        releases_url = repo_url + \"/releases\""
            },
            {
              "lineno": 337,
              "line": "        response = api.get(releases_url)"
            },
            {
              "lineno": 338,
              "line": "        data = response.json()"
            },
            {
              "lineno": 339,
              "line": "        releases: list[GithubListReleasesBlock.Output.ReleaseItem] = ["
            },
            {
              "lineno": 340,
              "line": "            {\"name\": release[\"name\"], \"url\": release[\"html_url\"]} for release in data"
            },
            {
              "lineno": 341,
              "line": "        ]"
            },
            {
              "lineno": 342,
              "line": "        return releases"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def list_releases(\n    credentials: GithubCredentials, repo_url: str\n) -> list[Output.ReleaseItem]:\n    api = get_api(credentials)\n    releases_url = repo_url + \"/releases\"\n    response = api.get(releases_url)\n    data = response.json()\n    releases: list[GithubListReleasesBlock.Output.ReleaseItem] = [\n        {\"name\": release[\"name\"], \"url\": release[\"html_url\"]} for release in data\n    ]",
              "successors": [
                {
                  "id": 3,
                  "label": "    return releases",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 344,
          "end_line": 355,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 344,
              "line": "    def run("
            },
            {
              "lineno": 345,
              "line": "        self,"
            },
            {
              "lineno": 346,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 347,
              "line": "        *,"
            },
            {
              "lineno": 348,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 349,
              "line": "        **kwargs,"
            },
            {
              "lineno": 350,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 351,
              "line": "        releases = self.list_releases("
            },
            {
              "lineno": 352,
              "line": "            credentials,"
            },
            {
              "lineno": 353,
              "line": "            input_data.repo_url,"
            },
            {
              "lineno": 354,
              "line": "        )"
            },
            {
              "lineno": 355,
              "line": "        yield from ((\"release\", release) for release in releases)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        releases = self.list_releases(\n            credentials,\n            input_data.repo_url,\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        yield from ((\"release\", release) for release in releases)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 282,
          "end_line": 287,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 282,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 283,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 284,
              "line": "        repo_url: str = SchemaField("
            },
            {
              "lineno": 285,
              "line": "            description=\"URL of the GitHub repository\","
            },
            {
              "lineno": 286,
              "line": "            placeholder=\"https://github.com/owner/repo\","
            },
            {
              "lineno": 287,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 289,
          "end_line": 298,
          "functions": [],
          "classes": [
            {
              "name": "ReleaseItem",
              "type": "class",
              "start_line": 290,
              "end_line": 292,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 290,
                  "line": "        class ReleaseItem(TypedDict):"
                },
                {
                  "lineno": 291,
                  "line": "            name: str"
                },
                {
                  "lineno": 292,
                  "line": "            url: str"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "label": "        class ReleaseItem(TypedDict):\n            name: str\n            url: str",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": [
            {
              "lineno": 289,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 293,
              "line": ""
            },
            {
              "lineno": 294,
              "line": "        release: ReleaseItem = SchemaField("
            },
            {
              "lineno": 295,
              "line": "            title=\"Release\","
            },
            {
              "lineno": 296,
              "line": "            description=\"Releases with their name and file tree browser URL\","
            },
            {
              "lineno": 297,
              "line": "        )"
            },
            {
              "lineno": 298,
              "line": "        error: str = SchemaField(description=\"Error message if listing releases failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n\n        release: ReleaseItem = SchemaField(\n            title=\"Release\",\n            description=\"Releases with their name and file tree browser URL\",\n        )\n        error: str = SchemaField(description=\"Error message if listing releases failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 281,
          "line": "class GithubListReleasesBlock(Block):"
        },
        {
          "lineno": 288,
          "line": ""
        },
        {
          "lineno": 299,
          "line": ""
        },
        {
          "lineno": 330,
          "line": ""
        },
        {
          "lineno": 331,
          "line": "    @staticmethod"
        },
        {
          "lineno": 343,
          "line": ""
        },
        {
          "lineno": 356,
          "line": ""
        },
        {
          "lineno": 357,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubListReleasesBlock(Block):",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubReadFileBlock",
      "type": "class",
      "start_line": 358,
      "end_line": 444,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 385,
          "end_line": 405,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 385,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 386,
              "line": "        super().__init__("
            },
            {
              "lineno": 387,
              "line": "            id=\"87ce6c27-5752-4bbc-8e26-6da40a3dcfd3\","
            },
            {
              "lineno": 388,
              "line": "            description=\"This block reads the content of a specified file from a GitHub repository.\","
            },
            {
              "lineno": 389,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 390,
              "line": "            input_schema=GithubReadFileBlock.Input,"
            },
            {
              "lineno": 391,
              "line": "            output_schema=GithubReadFileBlock.Output,"
            },
            {
              "lineno": 392,
              "line": "            test_input={"
            },
            {
              "lineno": 393,
              "line": "                \"repo_url\": \"https://github.com/owner/repo\","
            },
            {
              "lineno": 394,
              "line": "                \"file_path\": \"path/to/file\","
            },
            {
              "lineno": 395,
              "line": "                \"branch\": \"master\","
            },
            {
              "lineno": 396,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 397,
              "line": "            },"
            },
            {
              "lineno": 398,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 399,
              "line": "            test_output=["
            },
            {
              "lineno": 400,
              "line": "                (\"raw_content\", \"RmlsZSBjb250ZW50\"),"
            },
            {
              "lineno": 401,
              "line": "                (\"text_content\", \"File content\"),"
            },
            {
              "lineno": 402,
              "line": "                (\"size\", 13),"
            },
            {
              "lineno": 403,
              "line": "            ],"
            },
            {
              "lineno": 404,
              "line": "            test_mock={\"read_file\": lambda *args, **kwargs: (\"RmlsZSBjb250ZW50\", 13)},"
            },
            {
              "lineno": 405,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"87ce6c27-5752-4bbc-8e26-6da40a3dcfd3\",\n            description=\"This block reads the content of a specified file from a GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadFileBlock.Input,\n            output_schema=GithubReadFileBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"file_path\": \"path/to/file\",\n                \"branch\": \"master\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"raw_content\", \"RmlsZSBjb250ZW50\"),\n                (\"text_content\", \"File content\"),\n                (\"size\", 13),\n            ],\n            test_mock={\"read_file\": lambda *args, **kwargs: (\"RmlsZSBjb250ZW50\", 13)},\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "read_file",
          "type": "function",
          "start_line": 408,
          "end_line": 425,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 408,
              "line": "    def read_file("
            },
            {
              "lineno": 409,
              "line": "        credentials: GithubCredentials, repo_url: str, file_path: str, branch: str"
            },
            {
              "lineno": 410,
              "line": "    ) -> tuple[str, int]:"
            },
            {
              "lineno": 411,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 412,
              "line": "        content_url = repo_url + f\"/contents/{file_path}?ref={branch}\""
            },
            {
              "lineno": 413,
              "line": "        response = api.get(content_url)"
            },
            {
              "lineno": 414,
              "line": "        content = response.json()"
            },
            {
              "lineno": 415,
              "line": ""
            },
            {
              "lineno": 416,
              "line": "        if isinstance(content, list):"
            },
            {
              "lineno": 417,
              "line": "            # Multiple entries of different types exist at this path"
            },
            {
              "lineno": 418,
              "line": "            if not (file := next((f for f in content if f[\"type\"] == \"file\"), None)):"
            },
            {
              "lineno": 419,
              "line": "                raise TypeError(\"Not a file\")"
            },
            {
              "lineno": 420,
              "line": "            content = file"
            },
            {
              "lineno": 421,
              "line": ""
            },
            {
              "lineno": 422,
              "line": "        if content[\"type\"] != \"file\":"
            },
            {
              "lineno": 423,
              "line": "            raise TypeError(\"Not a file\")"
            },
            {
              "lineno": 424,
              "line": ""
            },
            {
              "lineno": 425,
              "line": "        return content[\"content\"], content[\"size\"]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def read_file(\n        credentials: GithubCredentials, repo_url: str, file_path: str, branch: str\n    ) -> tuple[str, int]:\n        api = get_api(credentials)\n        content_url = repo_url + f\"/contents/{file_path}?ref={branch}\"\n        response = api.get(content_url)\n        content = response.json()",
              "successors": [
                {
                  "id": 3,
                  "label": "        if isinstance(content, list):",
                  "successors": [
                    {
                      "id": 4,
                      "label": "            if not (file := next((f for f in content if f[\"type\"] == \"file\"), None)):\n                raise TypeError(\"Not a file\")\n            content = file",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "        if content[\"type\"] != \"file\":\n            raise TypeError(\"Not a file\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "        return content[\"content\"], content[\"size\"]",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 427,
          "end_line": 442,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 427,
              "line": "    def run("
            },
            {
              "lineno": 428,
              "line": "        self,"
            },
            {
              "lineno": 429,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 430,
              "line": "        *,"
            },
            {
              "lineno": 431,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 432,
              "line": "        **kwargs,"
            },
            {
              "lineno": 433,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 434,
              "line": "        raw_content, size = self.read_file("
            },
            {
              "lineno": 435,
              "line": "            credentials,"
            },
            {
              "lineno": 436,
              "line": "            input_data.repo_url,"
            },
            {
              "lineno": 437,
              "line": "            input_data.file_path.lstrip(\"/\"),"
            },
            {
              "lineno": 438,
              "line": "            input_data.branch,"
            },
            {
              "lineno": 439,
              "line": "        )"
            },
            {
              "lineno": 440,
              "line": "        yield \"raw_content\", raw_content"
            },
            {
              "lineno": 441,
              "line": "        yield \"text_content\", base64.b64decode(raw_content).decode(\"utf-8\")"
            },
            {
              "lineno": 442,
              "line": "        yield \"size\", size"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        raw_content, size = self.read_file(\n            credentials,\n            input_data.repo_url,\n            input_data.file_path.lstrip(\"/\"),\n            input_data.branch,\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        yield \"raw_content\", raw_content\n        yield \"text_content\", base64.b64decode(raw_content).decode(\"utf-8\")",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        yield \"size\", size",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 359,
          "end_line": 373,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 359,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 360,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 361,
              "line": "        repo_url: str = SchemaField("
            },
            {
              "lineno": 362,
              "line": "            description=\"URL of the GitHub repository\","
            },
            {
              "lineno": 363,
              "line": "            placeholder=\"https://github.com/owner/repo\","
            },
            {
              "lineno": 364,
              "line": "        )"
            },
            {
              "lineno": 365,
              "line": "        file_path: str = SchemaField("
            },
            {
              "lineno": 366,
              "line": "            description=\"Path to the file in the repository\","
            },
            {
              "lineno": 367,
              "line": "            placeholder=\"path/to/file\","
            },
            {
              "lineno": 368,
              "line": "        )"
            },
            {
              "lineno": 369,
              "line": "        branch: str = SchemaField("
            },
            {
              "lineno": 370,
              "line": "            description=\"Branch to read from\","
            },
            {
              "lineno": 371,
              "line": "            placeholder=\"branch_name\","
            },
            {
              "lineno": 372,
              "line": "            default=\"master\","
            },
            {
              "lineno": 373,
              "line": "        )"
            }
          ],
          "blocks": []
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 375,
          "end_line": 383,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 375,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 376,
              "line": "        text_content: str = SchemaField("
            },
            {
              "lineno": 377,
              "line": "            description=\"Content of the file (decoded as UTF-8 text)\""
            },
            {
              "lineno": 378,
              "line": "        )"
            },
            {
              "lineno": 379,
              "line": "        raw_content: str = SchemaField("
            },
            {
              "lineno": 380,
              "line": "            description=\"Raw base64-encoded content of the file\""
            },
            {
              "lineno": 381,
              "line": "        )"
            },
            {
              "lineno": 382,
              "line": "        size: int = SchemaField(description=\"The size of the file (in bytes)\")"
            },
            {
              "lineno": 383,
              "line": "        error: str = SchemaField(description=\"Error message if the file reading failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        text_content: str = SchemaField(\n            description=\"Content of the file (decoded as UTF-8 text)\"\n        )\n        raw_content: str = SchemaField(\n            description=\"Raw base64-encoded content of the file\"\n        )\n        size: int = SchemaField(description=\"The size of the file (in bytes)\")\n        error: str = SchemaField(description=\"Error message if the file reading failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 358,
          "line": "class GithubReadFileBlock(Block):"
        },
        {
          "lineno": 374,
          "line": ""
        },
        {
          "lineno": 384,
          "line": ""
        },
        {
          "lineno": 406,
          "line": ""
        },
        {
          "lineno": 407,
          "line": "    @staticmethod"
        },
        {
          "lineno": 426,
          "line": ""
        },
        {
          "lineno": 443,
          "line": ""
        },
        {
          "lineno": 444,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "GithubReadFolderBlock",
      "type": "class",
      "start_line": 445,
      "end_line": 565,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 478,
          "end_line": 515,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 478,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 479,
              "line": "        super().__init__("
            },
            {
              "lineno": 480,
              "line": "            id=\"1355f863-2db3-4d75-9fba-f91e8a8ca400\","
            },
            {
              "lineno": 481,
              "line": "            description=\"This block reads the content of a specified folder from a GitHub repository.\","
            },
            {
              "lineno": 482,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 483,
              "line": "            input_schema=GithubReadFolderBlock.Input,"
            },
            {
              "lineno": 484,
              "line": "            output_schema=GithubReadFolderBlock.Output,"
            },
            {
              "lineno": 485,
              "line": "            test_input={"
            },
            {
              "lineno": 486,
              "line": "                \"repo_url\": \"https://github.com/owner/repo\","
            },
            {
              "lineno": 487,
              "line": "                \"folder_path\": \"path/to/folder\","
            },
            {
              "lineno": 488,
              "line": "                \"branch\": \"master\","
            },
            {
              "lineno": 489,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 490,
              "line": "            },"
            },
            {
              "lineno": 491,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 492,
              "line": "            test_output=["
            },
            {
              "lineno": 493,
              "line": "                ("
            },
            {
              "lineno": 494,
              "line": "                    \"file\","
            },
            {
              "lineno": 495,
              "line": "                    {"
            },
            {
              "lineno": 496,
              "line": "                        \"name\": \"file1.txt\","
            },
            {
              "lineno": 497,
              "line": "                        \"path\": \"path/to/folder/file1.txt\","
            },
            {
              "lineno": 498,
              "line": "                        \"size\": 1337,"
            },
            {
              "lineno": 499,
              "line": "                    },"
            },
            {
              "lineno": 500,
              "line": "                ),"
            },
            {
              "lineno": 501,
              "line": "                (\"dir\", {\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}),"
            },
            {
              "lineno": 502,
              "line": "            ],"
            },
            {
              "lineno": 503,
              "line": "            test_mock={"
            },
            {
              "lineno": 504,
              "line": "                \"read_folder\": lambda *args, **kwargs: ("
            },
            {
              "lineno": 505,
              "line": "                    ["
            },
            {
              "lineno": 506,
              "line": "                        {"
            },
            {
              "lineno": 507,
              "line": "                            \"name\": \"file1.txt\","
            },
            {
              "lineno": 508,
              "line": "                            \"path\": \"path/to/folder/file1.txt\","
            },
            {
              "lineno": 509,
              "line": "                            \"size\": 1337,"
            },
            {
              "lineno": 510,
              "line": "                        }"
            },
            {
              "lineno": 511,
              "line": "                    ],"
            },
            {
              "lineno": 512,
              "line": "                    [{\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}],"
            },
            {
              "lineno": 513,
              "line": "                )"
            },
            {
              "lineno": 514,
              "line": "            },"
            },
            {
              "lineno": 515,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"1355f863-2db3-4d75-9fba-f91e8a8ca400\",\n            description=\"This block reads the content of a specified folder from a GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadFolderBlock.Input,\n            output_schema=GithubReadFolderBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"folder_path\": \"path/to/folder\",\n                \"branch\": \"master\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"file\",\n                    {\n                        \"name\": \"file1.txt\",\n                        \"path\": \"path/to/folder/file1.txt\",\n                        \"size\": 1337,\n                    },\n                ),\n                (\"dir\", {\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}),\n            ],\n            test_mock={\n                \"read_folder\": lambda *args, **kwargs: (\n                    [\n                        {\n                            \"name\": \"file1.txt\",\n                            \"path\": \"path/to/folder/file1.txt\",\n                            \"size\": 1337,\n                        }\n                    ],\n                    [{\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}],\n                )\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "read_folder",
          "type": "function",
          "start_line": 518,
          "end_line": 547,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 518,
              "line": "    def read_folder("
            },
            {
              "lineno": 519,
              "line": "        credentials: GithubCredentials, repo_url: str, folder_path: str, branch: str"
            },
            {
              "lineno": 520,
              "line": "    ) -> tuple[list[Output.FileEntry], list[Output.DirEntry]]:"
            },
            {
              "lineno": 521,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 522,
              "line": "        contents_url = repo_url + f\"/contents/{folder_path}?ref={branch}\""
            },
            {
              "lineno": 523,
              "line": "        response = api.get(contents_url)"
            },
            {
              "lineno": 524,
              "line": "        content = response.json()"
            },
            {
              "lineno": 525,
              "line": ""
            },
            {
              "lineno": 526,
              "line": "        if not isinstance(content, list):"
            },
            {
              "lineno": 527,
              "line": "            raise TypeError(\"Not a folder\")"
            },
            {
              "lineno": 528,
              "line": ""
            },
            {
              "lineno": 529,
              "line": "        files = ["
            },
            {
              "lineno": 530,
              "line": "            GithubReadFolderBlock.Output.FileEntry("
            },
            {
              "lineno": 531,
              "line": "                name=entry[\"name\"],"
            },
            {
              "lineno": 532,
              "line": "                path=entry[\"path\"],"
            },
            {
              "lineno": 533,
              "line": "                size=entry[\"size\"],"
            },
            {
              "lineno": 534,
              "line": "            )"
            },
            {
              "lineno": 535,
              "line": "            for entry in content"
            },
            {
              "lineno": 536,
              "line": "            if entry[\"type\"] == \"file\""
            },
            {
              "lineno": 537,
              "line": "        ]"
            },
            {
              "lineno": 538,
              "line": "        dirs = ["
            },
            {
              "lineno": 539,
              "line": "            GithubReadFolderBlock.Output.DirEntry("
            },
            {
              "lineno": 540,
              "line": "                name=entry[\"name\"],"
            },
            {
              "lineno": 541,
              "line": "                path=entry[\"path\"],"
            },
            {
              "lineno": 542,
              "line": "            )"
            },
            {
              "lineno": 543,
              "line": "            for entry in content"
            },
            {
              "lineno": 544,
              "line": "            if entry[\"type\"] == \"dir\""
            },
            {
              "lineno": 545,
              "line": "        ]"
            },
            {
              "lineno": 546,
              "line": ""
            },
            {
              "lineno": 547,
              "line": "        return files, dirs"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def read_folder(\n        credentials: GithubCredentials, repo_url: str, folder_path: str, branch: str\n    ) -> tuple[list[Output.FileEntry], list[Output.DirEntry]]:\n        api = get_api(credentials)\n        contents_url = repo_url + f\"/contents/{folder_path}?ref={branch}\"\n        response = api.get(contents_url)\n        content = response.json()\n        if not isinstance(content, list):\n            raise TypeError(\"Not a folder\")",
              "successors": [
                {
                  "id": 3,
                  "label": "        files = [\n            GithubReadFolderBlock.Output.FileEntry(\n                name=entry[\"name\"],\n                path=entry[\"path\"],\n                size=entry[\"size\"],\n            )\n            for entry in content\n            if entry[\"type\"] == \"file\"\n        ]\n        dirs = [\n            GithubReadFolderBlock.Output.DirEntry(\n                name=entry[\"name\"],\n                path=entry[\"path\"],\n            )\n            for entry in content\n            if entry[\"type\"] == \"dir\"\n        ]",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        return files, dirs",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 549,
          "end_line": 563,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 549,
              "line": "    def run("
            },
            {
              "lineno": 550,
              "line": "        self,"
            },
            {
              "lineno": 551,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 552,
              "line": "        *,"
            },
            {
              "lineno": 553,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 554,
              "line": "        **kwargs,"
            },
            {
              "lineno": 555,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 556,
              "line": "        files, dirs = self.read_folder("
            },
            {
              "lineno": 557,
              "line": "            credentials,"
            },
            {
              "lineno": 558,
              "line": "            input_data.repo_url,"
            },
            {
              "lineno": 559,
              "line": "            input_data.folder_path.lstrip(\"/\"),"
            },
            {
              "lineno": 560,
              "line": "            input_data.branch,"
            },
            {
              "lineno": 561,
              "line": "        )"
            },
            {
              "lineno": 562,
              "line": "        yield from ((\"file\", file) for file in files)"
            },
            {
              "lineno": 563,
              "line": "        yield from ((\"dir\", dir) for dir in dirs)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        files, dirs = self.read_folder(\n            credentials,\n            input_data.repo_url,\n            input_data.folder_path.lstrip(\"/\"),\n            input_data.branch,\n        )\n        yield from ((\"file\", file) for file in files)",
              "successors": [
                {
                  "id": 3,
                  "label": "        yield from ((\"dir\", dir) for dir in dirs)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 446,
          "end_line": 460,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 446,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 447,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 448,
              "line": "        repo_url: str = SchemaField("
            },
            {
              "lineno": 449,
              "line": "            description=\"URL of the GitHub repository\","
            },
            {
              "lineno": 450,
              "line": "            placeholder=\"https://github.com/owner/repo\","
            },
            {
              "lineno": 451,
              "line": "        )"
            },
            {
              "lineno": 452,
              "line": "        folder_path: str = SchemaField("
            },
            {
              "lineno": 453,
              "line": "            description=\"Path to the folder in the repository\","
            },
            {
              "lineno": 454,
              "line": "            placeholder=\"path/to/folder\","
            },
            {
              "lineno": 455,
              "line": "        )"
            },
            {
              "lineno": 456,
              "line": "        branch: str = SchemaField("
            },
            {
              "lineno": 457,
              "line": "            description=\"Branch name to read from (defaults to master)\","
            },
            {
              "lineno": 458,
              "line": "            placeholder=\"branch_name\","
            },
            {
              "lineno": 459,
              "line": "            default=\"master\","
            },
            {
              "lineno": 460,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        folder_path: str = SchemaField(\n            description=\"Path to the folder in the repository\",\n            placeholder=\"path/to/folder\",\n        )\n        branch: str = SchemaField(\n            description=\"Branch name to read from (defaults to master)\",\n            placeholder=\"branch_name\",\n            default=\"master\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 462,
          "end_line": 476,
          "functions": [],
          "classes": [
            {
              "name": "DirEntry",
              "type": "class",
              "start_line": 463,
              "end_line": 465,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 463,
                  "line": "        class DirEntry(TypedDict):"
                },
                {
                  "lineno": 464,
                  "line": "            name: str"
                },
                {
                  "lineno": 465,
                  "line": "            path: str"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "label": "class DirEntry(TypedDict):\n    name: str\n    path: str",
                  "successors": []
                }
              ]
            },
            {
              "name": "FileEntry",
              "type": "class",
              "start_line": 467,
              "end_line": 470,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 467,
                  "line": "        class FileEntry(TypedDict):"
                },
                {
                  "lineno": 468,
                  "line": "            name: str"
                },
                {
                  "lineno": 469,
                  "line": "            path: str"
                },
                {
                  "lineno": 470,
                  "line": "            size: int"
                }
              ],
              "blocks": []
            }
          ],
          "simplified_code": [
            {
              "lineno": 462,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 466,
              "line": ""
            },
            {
              "lineno": 471,
              "line": ""
            },
            {
              "lineno": 472,
              "line": "        file: FileEntry = SchemaField(description=\"Files in the folder\")"
            },
            {
              "lineno": 473,
              "line": "        dir: DirEntry = SchemaField(description=\"Directories in the folder\")"
            },
            {
              "lineno": 474,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 475,
              "line": "            description=\"Error message if reading the folder failed\""
            },
            {
              "lineno": 476,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        file: FileEntry = SchemaField(description=\"Files in the folder\")\n        dir: DirEntry = SchemaField(description=\"Directories in the folder\")\n        error: str = SchemaField(\n            description=\"Error message if reading the folder failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 445,
          "line": "class GithubReadFolderBlock(Block):"
        },
        {
          "lineno": 461,
          "line": ""
        },
        {
          "lineno": 477,
          "line": ""
        },
        {
          "lineno": 516,
          "line": ""
        },
        {
          "lineno": 517,
          "line": "    @staticmethod"
        },
        {
          "lineno": 548,
          "line": ""
        },
        {
          "lineno": 564,
          "line": ""
        },
        {
          "lineno": 565,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "GithubMakeBranchBlock",
      "type": "class",
      "start_line": 566,
      "end_line": 642,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 588,
          "end_line": 606,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 588,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 589,
              "line": "        super().__init__("
            },
            {
              "lineno": 590,
              "line": "            id=\"944cc076-95e7-4d1b-b6b6-b15d8ee5448d\","
            },
            {
              "lineno": 591,
              "line": "            description=\"This block creates a new branch from a specified source branch.\","
            },
            {
              "lineno": 592,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 593,
              "line": "            input_schema=GithubMakeBranchBlock.Input,"
            },
            {
              "lineno": 594,
              "line": "            output_schema=GithubMakeBranchBlock.Output,"
            },
            {
              "lineno": 595,
              "line": "            test_input={"
            },
            {
              "lineno": 596,
              "line": "                \"repo_url\": \"https://github.com/owner/repo\","
            },
            {
              "lineno": 597,
              "line": "                \"new_branch\": \"new_branch_name\","
            },
            {
              "lineno": 598,
              "line": "                \"source_branch\": \"source_branch_name\","
            },
            {
              "lineno": 599,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 600,
              "line": "            },"
            },
            {
              "lineno": 601,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 602,
              "line": "            test_output=[(\"status\", \"Branch created successfully\")],"
            },
            {
              "lineno": 603,
              "line": "            test_mock={"
            },
            {
              "lineno": 604,
              "line": "                \"create_branch\": lambda *args, **kwargs: \"Branch created successfully\""
            },
            {
              "lineno": 605,
              "line": "            },"
            },
            {
              "lineno": 606,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"944cc076-95e7-4d1b-b6b6-b15d8ee5448d\",\n            description=\"This block creates a new branch from a specified source branch.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakeBranchBlock.Input,\n            output_schema=GithubMakeBranchBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"new_branch\": \"new_branch_name\",\n                \"source_branch\": \"source_branch_name\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Branch created successfully\")],\n            test_mock={\n                \"create_branch\": lambda *args, **kwargs: \"Branch created successfully\"\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "create_branch",
          "type": "function",
          "start_line": 609,
          "end_line": 625,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 609,
              "line": "    def create_branch("
            },
            {
              "lineno": 610,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 611,
              "line": "        repo_url: str,"
            },
            {
              "lineno": 612,
              "line": "        new_branch: str,"
            },
            {
              "lineno": 613,
              "line": "        source_branch: str,"
            },
            {
              "lineno": 614,
              "line": "    ) -> str:"
            },
            {
              "lineno": 615,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 616,
              "line": "        # Get the SHA of the source branch"
            },
            {
              "lineno": 617,
              "line": "        ref_url = repo_url + f\"/git/refs/heads/{source_branch}\""
            },
            {
              "lineno": 618,
              "line": "        response = api.get(ref_url)"
            },
            {
              "lineno": 619,
              "line": "        sha = response.json()[\"object\"][\"sha\"]"
            },
            {
              "lineno": 620,
              "line": ""
            },
            {
              "lineno": 621,
              "line": "        # Create the new branch"
            },
            {
              "lineno": 622,
              "line": "        create_ref_url = repo_url + \"/git/refs\""
            },
            {
              "lineno": 623,
              "line": "        data = {\"ref\": f\"refs/heads/{new_branch}\", \"sha\": sha}"
            },
            {
              "lineno": 624,
              "line": "        response = api.post(create_ref_url, json=data)"
            },
            {
              "lineno": 625,
              "line": "        return \"Branch created successfully\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def create_branch(\n        credentials: GithubCredentials,\n        repo_url: str,\n        new_branch: str,\n        source_branch: str,\n    ) -> str:\n        api = get_api(credentials)\n        # Get the SHA of the source branch\n        ref_url = repo_url + f\"/git/refs/heads/{source_branch}\"\n        response = api.get(ref_url)\n        sha = response.json()[\"object\"][\"sha\"]",
              "successors": [
                {
                  "id": 3,
                  "label": "        # Create the new branch\n        create_ref_url = repo_url + \"/git/refs\"\n        data = {\"ref\": f\"refs/heads/{new_branch}\", \"sha\": sha}\n        response = api.post(create_ref_url, json=data)\n        return \"Branch created successfully\"",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 627,
          "end_line": 640,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 627,
              "line": "    def run("
            },
            {
              "lineno": 628,
              "line": "        self,"
            },
            {
              "lineno": 629,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 630,
              "line": "        *,"
            },
            {
              "lineno": 631,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 632,
              "line": "        **kwargs,"
            },
            {
              "lineno": 633,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 634,
              "line": "        status = self.create_branch("
            },
            {
              "lineno": 635,
              "line": "            credentials,"
            },
            {
              "lineno": 636,
              "line": "            input_data.repo_url,"
            },
            {
              "lineno": 637,
              "line": "            input_data.new_branch,"
            },
            {
              "lineno": 638,
              "line": "            input_data.source_branch,"
            },
            {
              "lineno": 639,
              "line": "        )"
            },
            {
              "lineno": 640,
              "line": "        yield \"status\", status"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.create_branch(\n            credentials,\n            input_data.repo_url,\n            input_data.new_branch,\n            input_data.source_branch,\n        )\n        yield \"status\", status",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 567,
          "end_line": 580,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 567,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 568,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 569,
              "line": "        repo_url: str = SchemaField("
            },
            {
              "lineno": 570,
              "line": "            description=\"URL of the GitHub repository\","
            },
            {
              "lineno": 571,
              "line": "            placeholder=\"https://github.com/owner/repo\","
            },
            {
              "lineno": 572,
              "line": "        )"
            },
            {
              "lineno": 573,
              "line": "        new_branch: str = SchemaField("
            },
            {
              "lineno": 574,
              "line": "            description=\"Name of the new branch\","
            },
            {
              "lineno": 575,
              "line": "            placeholder=\"new_branch_name\","
            },
            {
              "lineno": 576,
              "line": "        )"
            },
            {
              "lineno": 577,
              "line": "        source_branch: str = SchemaField("
            },
            {
              "lineno": 578,
              "line": "            description=\"Name of the source branch\","
            },
            {
              "lineno": 579,
              "line": "            placeholder=\"source_branch_name\","
            },
            {
              "lineno": 580,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        new_branch: str = SchemaField(\n            description=\"Name of the new branch\",\n            placeholder=\"new_branch_name\",\n        )\n        source_branch: str = SchemaField(\n            description=\"Name of the source branch\",\n            placeholder=\"source_branch_name\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 582,
          "end_line": 586,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 582,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 583,
              "line": "        status: str = SchemaField(description=\"Status of the branch creation operation\")"
            },
            {
              "lineno": 584,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 585,
              "line": "            description=\"Error message if the branch creation failed\""
            },
            {
              "lineno": 586,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the branch creation operation\")\n        error: str = SchemaField(\n            description=\"Error message if the branch creation failed\")\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 566,
          "line": "class GithubMakeBranchBlock(Block):"
        },
        {
          "lineno": 581,
          "line": ""
        },
        {
          "lineno": 587,
          "line": ""
        },
        {
          "lineno": 607,
          "line": ""
        },
        {
          "lineno": 608,
          "line": "    @staticmethod"
        },
        {
          "lineno": 626,
          "line": ""
        },
        {
          "lineno": 641,
          "line": ""
        },
        {
          "lineno": 642,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubMakeBranchBlock(Block):\n    @staticmethod",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubDeleteBranchBlock",
      "type": "class",
      "start_line": 643,
      "end_line": 701,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 661,
          "end_line": 678,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 661,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 662,
              "line": "        super().__init__("
            },
            {
              "lineno": 663,
              "line": "            id=\"0d4130f7-e0ab-4d55-adc3-0a40225e80f4\","
            },
            {
              "lineno": 664,
              "line": "            description=\"This block deletes a specified branch.\","
            },
            {
              "lineno": 665,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 666,
              "line": "            input_schema=GithubDeleteBranchBlock.Input,"
            },
            {
              "lineno": 667,
              "line": "            output_schema=GithubDeleteBranchBlock.Output,"
            },
            {
              "lineno": 668,
              "line": "            test_input={"
            },
            {
              "lineno": 669,
              "line": "                \"repo_url\": \"https://github.com/owner/repo\","
            },
            {
              "lineno": 670,
              "line": "                \"branch\": \"branch_name\","
            },
            {
              "lineno": 671,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 672,
              "line": "            },"
            },
            {
              "lineno": 673,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 674,
              "line": "            test_output=[(\"status\", \"Branch deleted successfully\")],"
            },
            {
              "lineno": 675,
              "line": "            test_mock={"
            },
            {
              "lineno": 676,
              "line": "                \"delete_branch\": lambda *args, **kwargs: \"Branch deleted successfully\""
            },
            {
              "lineno": 677,
              "line": "            },"
            },
            {
              "lineno": 678,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"0d4130f7-e0ab-4d55-adc3-0a40225e80f4\",\n            description=\"This block deletes a specified branch.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubDeleteBranchBlock.Input,\n            output_schema=GithubDeleteBranchBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"branch\": \"branch_name\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Branch deleted successfully\")],\n            test_mock={\n                \"delete_branch\": lambda *args, **kwargs: \"Branch deleted successfully\"\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "delete_branch",
          "type": "function",
          "start_line": 681,
          "end_line": 687,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 681,
              "line": "    def delete_branch("
            },
            {
              "lineno": 682,
              "line": "        credentials: GithubCredentials, repo_url: str, branch: str"
            },
            {
              "lineno": 683,
              "line": "    ) -> str:"
            },
            {
              "lineno": 684,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 685,
              "line": "        ref_url = repo_url + f\"/git/refs/heads/{branch}\""
            },
            {
              "lineno": 686,
              "line": "        api.delete(ref_url)"
            },
            {
              "lineno": 687,
              "line": "        return \"Branch deleted successfully\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def delete_branch(\n        credentials: GithubCredentials, repo_url: str, branch: str\n    ) -> str:\n        api = get_api(credentials)\n        ref_url = repo_url + f\"/git/refs/heads/{branch}\"\n        api.delete(ref_url)",
              "successors": [
                {
                  "id": 3,
                  "label": "        return \"Branch deleted successfully\"",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 689,
          "end_line": 701,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 689,
              "line": "    def run("
            },
            {
              "lineno": 690,
              "line": "        self,"
            },
            {
              "lineno": 691,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 692,
              "line": "        *,"
            },
            {
              "lineno": 693,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 694,
              "line": "        **kwargs,"
            },
            {
              "lineno": 695,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 696,
              "line": "        status = self.delete_branch("
            },
            {
              "lineno": 697,
              "line": "            credentials,"
            },
            {
              "lineno": 698,
              "line": "            input_data.repo_url,"
            },
            {
              "lineno": 699,
              "line": "            input_data.branch,"
            },
            {
              "lineno": 700,
              "line": "        )"
            },
            {
              "lineno": 701,
              "line": "        yield \"status\", status"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.delete_branch(\n            credentials,\n            input_data.repo_url,\n            input_data.branch,\n        )\n        yield \"status\", status",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 644,
          "end_line": 653,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 644,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 645,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 646,
              "line": "        repo_url: str = SchemaField("
            },
            {
              "lineno": 647,
              "line": "            description=\"URL of the GitHub repository\","
            },
            {
              "lineno": 648,
              "line": "            placeholder=\"https://github.com/owner/repo\","
            },
            {
              "lineno": 649,
              "line": "        )"
            },
            {
              "lineno": 650,
              "line": "        branch: str = SchemaField("
            },
            {
              "lineno": 651,
              "line": "            description=\"Name of the branch to delete\","
            },
            {
              "lineno": 652,
              "line": "            placeholder=\"branch_name\","
            },
            {
              "lineno": 653,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        branch: str = SchemaField(\n            description=\"Name of the branch to delete\",\n            placeholder=\"branch_name\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 655,
          "end_line": 659,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 655,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 656,
              "line": "        status: str = SchemaField(description=\"Status of the branch deletion operation\")"
            },
            {
              "lineno": 657,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 658,
              "line": "            description=\"Error message if the branch deletion failed\""
            },
            {
              "lineno": 659,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the branch deletion operation\")\n        error: str = SchemaField(\n            description=\"Error message if the branch deletion failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 643,
          "line": "class GithubDeleteBranchBlock(Block):"
        },
        {
          "lineno": 654,
          "line": ""
        },
        {
          "lineno": 660,
          "line": ""
        },
        {
          "lineno": 679,
          "line": ""
        },
        {
          "lineno": 680,
          "line": "    @staticmethod"
        },
        {
          "lineno": 688,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubDeleteBranchBlock(Block):\n@staticmethod",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import base64"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from typing_extensions import TypedDict"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 6,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from ._api import get_api"
    },
    {
      "lineno": 9,
      "line": "from ._auth import ("
    },
    {
      "lineno": 10,
      "line": "    TEST_CREDENTIALS,"
    },
    {
      "lineno": 11,
      "line": "    TEST_CREDENTIALS_INPUT,"
    },
    {
      "lineno": 12,
      "line": "    GithubCredentials,"
    },
    {
      "lineno": 13,
      "line": "    GithubCredentialsField,"
    },
    {
      "lineno": 14,
      "line": "    GithubCredentialsInput,"
    },
    {
      "lineno": 15,
      "line": ")"
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import base64\nfrom typing_extensions import TypedDict",
      "successors": [
        {
          "id": 3,
          "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
          "successors": [
            {
              "id": 5,
              "label": "from ._api import get_api\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}