{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 99,
  "functions": [],
  "classes": [
    {
      "name": "Slant3DWebhooksManager",
      "type": "class",
      "start_line": 14,
      "end_line": 99,
      "functions": [
        {
          "name": "_register_webhook",
          "type": "function",
          "start_line": 20,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    async def _register_webhook("
            },
            {
              "lineno": 21,
              "line": "        self,"
            },
            {
              "lineno": 22,
              "line": "        credentials: Credentials,"
            },
            {
              "lineno": 23,
              "line": "        webhook_type: str,"
            },
            {
              "lineno": 24,
              "line": "        resource: str,"
            },
            {
              "lineno": 25,
              "line": "        events: list[str],"
            },
            {
              "lineno": 26,
              "line": "        ingress_url: str,"
            },
            {
              "lineno": 27,
              "line": "        secret: str,"
            },
            {
              "lineno": 28,
              "line": "    ) -> tuple[str, dict]:"
            },
            {
              "lineno": 29,
              "line": "        \"\"\"Register a new webhook with Slant3D\"\"\""
            },
            {
              "lineno": 30,
              "line": ""
            },
            {
              "lineno": 31,
              "line": "        if not isinstance(credentials, APIKeyCredentials):"
            },
            {
              "lineno": 32,
              "line": "            raise ValueError(\"API key is required to register a webhook\")"
            },
            {
              "lineno": 33,
              "line": ""
            },
            {
              "lineno": 34,
              "line": "        headers = {"
            },
            {
              "lineno": 35,
              "line": "            \"api-key\": credentials.api_key.get_secret_value(),"
            },
            {
              "lineno": 36,
              "line": "            \"Content-Type\": \"application/json\","
            },
            {
              "lineno": 37,
              "line": "        }"
            },
            {
              "lineno": 38,
              "line": ""
            },
            {
              "lineno": 39,
              "line": "        # Slant3D's API doesn't use events list, just register for all order updates"
            },
            {
              "lineno": 40,
              "line": "        payload = {\"endPoint\": ingress_url}"
            },
            {
              "lineno": 41,
              "line": ""
            },
            {
              "lineno": 42,
              "line": "        response = requests.post("
            },
            {
              "lineno": 43,
              "line": "            f\"{self.BASE_URL}/customer/webhookSubscribe\", headers=headers, json=payload"
            },
            {
              "lineno": 44,
              "line": "        )"
            },
            {
              "lineno": 45,
              "line": ""
            },
            {
              "lineno": 46,
              "line": "        if not response.ok:"
            },
            {
              "lineno": 47,
              "line": "            error = response.json().get(\"error\", \"Unknown error\")"
            },
            {
              "lineno": 48,
              "line": "            raise RuntimeError(f\"Failed to register webhook: {error}\")"
            },
            {
              "lineno": 49,
              "line": ""
            },
            {
              "lineno": 50,
              "line": "        webhook_config = {"
            },
            {
              "lineno": 51,
              "line": "            \"endpoint\": ingress_url,"
            },
            {
              "lineno": 52,
              "line": "            \"provider\": self.PROVIDER_NAME,"
            },
            {
              "lineno": 53,
              "line": "            \"events\": [\"order.shipped\"],  # Currently the only supported event"
            },
            {
              "lineno": 54,
              "line": "            \"type\": webhook_type,"
            },
            {
              "lineno": 55,
              "line": "        }"
            },
            {
              "lineno": 56,
              "line": ""
            },
            {
              "lineno": 57,
              "line": "        return \"\", webhook_config"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: str,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        \"\"\"Register a new webhook with Slant3D\"\"\"\n\n        if not isinstance(credentials, APIKeyCredentials):\n            raise ValueError(\"API key is required to register a webhook\")\n",
              "successors": [
                {
                  "id": 3,
                  "label": "        headers = {\n            \"api-key\": credentials.api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }\n\n        # Slant3D's API doesn't use events list, just register for all order updates\n        payload = {\"endPoint\": ingress_url}\n",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        response = requests.post(\n            f\"{self.BASE_URL}/customer/webhookSubscribe\", headers=headers, json=payload\n        )\n\n        if not response.ok:\n            error = response.json().get(\"error\", \"Unknown error\")\n            raise RuntimeError(f\"Failed to register webhook: {error}\")\n",
                      "successors": [
                        {
                          "id": 7,
                          "label": "        webhook_config = {\n            \"endpoint\": ingress_url,\n            \"provider\": self.PROVIDER_NAME,\n            \"events\": [\"order.shipped\"],  # Currently the only supported event\n            \"type\": webhook_type,\n        }\n\n        return \"\", webhook_config\n",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "validate_payload",
          "type": "function",
          "start_line": 59,
          "end_line": 86,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 59,
              "line": "    @classmethod"
            },
            {
              "lineno": 60,
              "line": "    async def validate_payload("
            },
            {
              "lineno": 61,
              "line": "        cls, webhook: integrations.Webhook, request: Request"
            },
            {
              "lineno": 62,
              "line": "    ) -> tuple[dict, str]:"
            },
            {
              "lineno": 63,
              "line": "        \"\"\"Validate incoming webhook payload from Slant3D\"\"\""
            },
            {
              "lineno": 64,
              "line": ""
            },
            {
              "lineno": 65,
              "line": "        payload = await request.json()"
            },
            {
              "lineno": 66,
              "line": ""
            },
            {
              "lineno": 67,
              "line": "        # Validate required fields from Slant3D API spec"
            },
            {
              "lineno": 68,
              "line": "        required_fields = [\"orderId\", \"status\", \"trackingNumber\", \"carrierCode\"]"
            },
            {
              "lineno": 69,
              "line": "        missing_fields = [field for field in required_fields if field not in payload]"
            },
            {
              "lineno": 70,
              "line": ""
            },
            {
              "lineno": 71,
              "line": "        if missing_fields:"
            },
            {
              "lineno": 72,
              "line": "            raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")"
            },
            {
              "lineno": 73,
              "line": ""
            },
            {
              "lineno": 74,
              "line": "        # Normalize payload structure"
            },
            {
              "lineno": 75,
              "line": "        normalized_payload = {"
            },
            {
              "lineno": 76,
              "line": "            \"orderId\": payload[\"orderId\"],"
            },
            {
              "lineno": 77,
              "line": "            \"status\": payload[\"status\"],"
            },
            {
              "lineno": 78,
              "line": "            \"trackingNumber\": payload[\"trackingNumber\"],"
            },
            {
              "lineno": 79,
              "line": "            \"carrierCode\": payload[\"carrierCode\"],"
            },
            {
              "lineno": 80,
              "line": "        }"
            },
            {
              "lineno": 81,
              "line": ""
            },
            {
              "lineno": 82,
              "line": "        # Currently Slant3D only sends shipping notifications"
            },
            {
              "lineno": 83,
              "line": "        # Convert status to lowercase for event format compatibility"
            },
            {
              "lineno": 84,
              "line": "        event_type = f\"order.{payload['status'].lower()}\""
            },
            {
              "lineno": 85,
              "line": ""
            },
            {
              "lineno": 86,
              "line": "        return normalized_payload, event_type"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "@classmethod\nasync def validate_payload(\n    cls, webhook: integrations.Webhook, request: Request\n) -> tuple[dict, str]:\n    \"\"\"Validate incoming webhook payload from Slant3D\"\"\"\n\npayload = await request.json()\n\n# Validate required fields from Slant3D API spec\nrequired_fields = [\"orderId\", \"status\", \"trackingNumber\", \"carrierCode\"]\nmissing_fields = [field for field in required_fields if field not in payload]\n",
              "successors": [
                {
                  "id": 3,
                  "label": "if missing_fields:\n    raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")\n",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "# Normalize payload structure\nnormalized_payload = {\n    \"orderId\": payload[\"orderId\"],\n    \"status\": payload[\"status\"],\n    \"trackingNumber\": payload[\"trackingNumber\"],\n    \"carrierCode\": payload[\"carrierCode\"],\n}\n\n# Currently Slant3D only sends shipping notifications\n# Convert status to lowercase for event format compatibility\nevent_type = f\"order.{payload['status'].lower()}\"\n\nreturn normalized_payload, event_type\n",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_deregister_webhook",
          "type": "function",
          "start_line": 88,
          "end_line": 99,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 88,
              "line": "    async def _deregister_webhook("
            },
            {
              "lineno": 89,
              "line": "        self, webhook: integrations.Webhook, credentials: Credentials"
            },
            {
              "lineno": 90,
              "line": "    ) -> None:"
            },
            {
              "lineno": 91,
              "line": "        \"\"\""
            },
            {
              "lineno": 92,
              "line": "        Note: Slant3D API currently doesn't provide a deregistration endpoint."
            },
            {
              "lineno": 93,
              "line": "        This would need to be handled through support."
            },
            {
              "lineno": 94,
              "line": "        \"\"\""
            },
            {
              "lineno": 95,
              "line": "        # Log warning since we can't properly deregister"
            },
            {
              "lineno": 96,
              "line": "        logger.warning("
            },
            {
              "lineno": 97,
              "line": "            f\"Warning: Manual deregistration required for webhook {webhook.id}\""
            },
            {
              "lineno": 98,
              "line": "        )"
            },
            {
              "lineno": 99,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:\n        \"\"\"\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\n        This would need to be handled through support.\n        \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "        # Log warning since we can't properly deregister\n        logger.warning(\n            f\"Warning: Manual deregistration required for webhook {webhook.id}\"\n        )\n        pass",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 14,
          "line": "class Slant3DWebhooksManager(BaseWebhooksManager):"
        },
        {
          "lineno": 15,
          "line": "    \"\"\"Manager for Slant3D webhooks\"\"\""
        },
        {
          "lineno": 16,
          "line": ""
        },
        {
          "lineno": 17,
          "line": "    PROVIDER_NAME = ProviderName.SLANT3D"
        },
        {
          "lineno": 18,
          "line": "    BASE_URL = \"https://www.slant3dapi.com/api\""
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 58,
          "line": ""
        },
        {
          "lineno": 87,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Slant3DWebhooksManager(BaseWebhooksManager):\n    \"\"\"Manager for Slant3D webhooks\"\"\"\n\n    PROVIDER_NAME = ProviderName.SLANT3D\n    BASE_URL = \"https://www.slant3dapi.com/api\"",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import requests"
    },
    {
      "lineno": 4,
      "line": "from fastapi import Request"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from backend.data import integrations"
    },
    {
      "lineno": 7,
      "line": "from backend.data.model import APIKeyCredentials, Credentials"
    },
    {
      "lineno": 8,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 9,
      "line": "from backend.integrations.webhooks._base import BaseWebhooksManager"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import logging\n\nimport requests\nfrom fastapi import Request\n\nfrom backend.data import integrations\nfrom backend.data.model import APIKeyCredentials, Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks._base import BaseWebhooksManager\n\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ]
}