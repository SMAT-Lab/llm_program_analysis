{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 66,
  "functions": [
    {
      "name": "generate_sum_of_subsets_soln",
      "type": "function",
      "start_line": 13,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 13,
          "line": "def generate_sum_of_subsets_soln(nums: list[int], max_sum: int) -> list[list[int]]:"
        },
        {
          "lineno": 14,
          "line": "    result: list[list[int]] = []"
        },
        {
          "lineno": 15,
          "line": "    path: list[int] = []"
        },
        {
          "lineno": 16,
          "line": "    num_index = 0"
        },
        {
          "lineno": 17,
          "line": "    remaining_nums_sum = sum(nums)"
        },
        {
          "lineno": 18,
          "line": "    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)"
        },
        {
          "lineno": 19,
          "line": "    return result"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def generate_sum_of_subsets_soln(nums: list[int], max_sum: int) -> list[list[int]]:\n    result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n    return result",
          "successors": []
        }
      ]
    },
    {
      "name": "create_state_space_tree",
      "type": "function",
      "start_line": 22,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 22,
          "line": "def create_state_space_tree("
        },
        {
          "lineno": 23,
          "line": "    nums: list[int],"
        },
        {
          "lineno": 24,
          "line": "    max_sum: int,"
        },
        {
          "lineno": 25,
          "line": "    num_index: int,"
        },
        {
          "lineno": 26,
          "line": "    path: list[int],"
        },
        {
          "lineno": 27,
          "line": "    result: list[list[int]],"
        },
        {
          "lineno": 28,
          "line": "    remaining_nums_sum: int,"
        },
        {
          "lineno": 29,
          "line": ") -> None:"
        },
        {
          "lineno": 30,
          "line": "    \"\"\""
        },
        {
          "lineno": 31,
          "line": "    Creates a state space tree to iterate through each branch using DFS."
        },
        {
          "lineno": 32,
          "line": "    It terminates the branching of a node when any of the two conditions"
        },
        {
          "lineno": 33,
          "line": "    given below satisfy."
        },
        {
          "lineno": 34,
          "line": "    This algorithm follows depth-fist-search and backtracks when the node is not"
        },
        {
          "lineno": 35,
          "line": "    branchable."
        },
        {
          "lineno": 36,
          "line": ""
        },
        {
          "lineno": 37,
          "line": "    \"\"\""
        },
        {
          "lineno": 38,
          "line": "    if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:"
        },
        {
          "lineno": 39,
          "line": "        return"
        },
        {
          "lineno": 40,
          "line": "    if sum(path) == max_sum:"
        },
        {
          "lineno": 41,
          "line": "        result.append(path)"
        },
        {
          "lineno": 42,
          "line": "        return"
        },
        {
          "lineno": 43,
          "line": "    for index in range(num_index, len(nums)):"
        },
        {
          "lineno": 44,
          "line": "        create_state_space_tree("
        },
        {
          "lineno": 45,
          "line": "            nums,"
        },
        {
          "lineno": 46,
          "line": "            max_sum,"
        },
        {
          "lineno": 47,
          "line": "            index + 1,"
        },
        {
          "lineno": 48,
          "line": "            [*path, nums[index]],"
        },
        {
          "lineno": 49,
          "line": "            result,"
        },
        {
          "lineno": 50,
          "line": "            remaining_nums_sum - nums[index],"
        },
        {
          "lineno": 51,
          "line": "        )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def create_state_space_tree(\n    nums: list[int],\n    max_sum: int,\n    num_index: int,\n    path: list[int],\n    result: list[list[int]],\n    remaining_nums_sum: int,\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "label": "if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\nreturn",
              "successors": []
            },
            {
              "id": 4,
              "label": "if sum(path) == max_sum:\nresult.append(path)",
              "successors": [
                {
                  "id": 6,
                  "label": "return",
                  "successors": []
                }
              ]
            },
            {
              "id": 7,
              "label": "for index in range(num_index, len(nums)):",
              "successors": [
                {
                  "id": 8,
                  "label": "create_state_space_tree(\n    nums,\n    max_sum,\n    index + 1,\n    [*path, nums[index]],\n    result,\n    remaining_nums_sum - nums[index],\n)",
                  "successors": [
                    {
                      "id": 7,
                      "label": "for index in range(num_index, len(nums)):",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "The sum-of-subsetsproblem states that a set of non-negative integers, and a"
    },
    {
      "lineno": 3,
      "line": "value M, determine all possible subsets of the given set whose summation sum"
    },
    {
      "lineno": 4,
      "line": "equal to given M."
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "Summation of the chosen numbers must be equal to given number M and one number"
    },
    {
      "lineno": 7,
      "line": "can be used only once."
    },
    {
      "lineno": 8,
      "line": "\"\"\""
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": "from __future__ import annotations"
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 53,
      "line": ""
    },
    {
      "lineno": 54,
      "line": "\"\"\""
    },
    {
      "lineno": 55,
      "line": "remove the comment to take an input from the user"
    },
    {
      "lineno": 56,
      "line": ""
    },
    {
      "lineno": 57,
      "line": "print(\"Enter the elements\")"
    },
    {
      "lineno": 58,
      "line": "nums = list(map(int, input().split()))"
    },
    {
      "lineno": 59,
      "line": "print(\"Enter max_sum sum\")"
    },
    {
      "lineno": 60,
      "line": "max_sum = int(input())"
    },
    {
      "lineno": 61,
      "line": ""
    },
    {
      "lineno": 62,
      "line": "\"\"\""
    },
    {
      "lineno": 63,
      "line": "nums = [3, 34, 4, 12, 5, 2]"
    },
    {
      "lineno": 64,
      "line": "max_sum = 9"
    },
    {
      "lineno": 65,
      "line": "result = generate_sum_of_subsets_soln(nums, max_sum)"
    },
    {
      "lineno": 66,
      "line": "print(*result)"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"\nfrom __future__ import annotations",
      "successors": [
        {
          "id": 3,
          "label": "\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n\"\"\"\nnums = [3, 34, 4, 12, 5, 2]\nmax_sum = 9\nresult = generate_sum_of_subsets_soln(nums, max_sum)\nprint(*result)",
          "successors": []
        }
      ]
    }
  ]
}