{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 725,
  "functions": [
    {
      "name": "delete_agent",
      "type": "function",
      "start_line": 59,
      "end_line": 80,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 59,
          "line": "async def delete_agent(agent_id: str) -> prisma.models.Agents | None:"
        },
        {
          "lineno": 60,
          "line": "    \"\"\""
        },
        {
          "lineno": 61,
          "line": "    Delete an agent from the database."
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 63,
          "line": "    Args:"
        },
        {
          "lineno": 64,
          "line": "        agent_id (str): The ID of the agent to delete."
        },
        {
          "lineno": 65,
          "line": ""
        },
        {
          "lineno": 66,
          "line": "    Returns:"
        },
        {
          "lineno": 67,
          "line": "        prisma.models.Agents | None: The deleted agent if found, None otherwise."
        },
        {
          "lineno": 68,
          "line": ""
        },
        {
          "lineno": 69,
          "line": "    Raises:"
        },
        {
          "lineno": 70,
          "line": "        AgentQueryError: If there is an error deleting the agent from the database."
        },
        {
          "lineno": 71,
          "line": "    \"\"\""
        },
        {
          "lineno": 72,
          "line": "    try:"
        },
        {
          "lineno": 73,
          "line": "        deleted_agent = await prisma.models.Agents.prisma().delete("
        },
        {
          "lineno": 74,
          "line": "            where={\"id\": agent_id}"
        },
        {
          "lineno": 75,
          "line": "        )"
        },
        {
          "lineno": 76,
          "line": "        return deleted_agent"
        },
        {
          "lineno": 77,
          "line": "    except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 78,
          "line": "        raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 79,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 80,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def delete_agent(agent_id: str) -> prisma.models.Agents | None:\n    \"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "    try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent",
              "successors": [
                {
                  "id": 4,
                  "label": "    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "create_agent_entry",
      "type": "function",
      "start_line": 83,
      "end_line": 128,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 83,
          "line": "async def create_agent_entry("
        },
        {
          "lineno": 84,
          "line": "    name: str,"
        },
        {
          "lineno": 85,
          "line": "    description: str,"
        },
        {
          "lineno": 86,
          "line": "    author: str,"
        },
        {
          "lineno": 87,
          "line": "    keywords: typing.List[str],"
        },
        {
          "lineno": 88,
          "line": "    categories: typing.List[str],"
        },
        {
          "lineno": 89,
          "line": "    graph: prisma.Json,"
        },
        {
          "lineno": 90,
          "line": "    submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING,"
        },
        {
          "lineno": 91,
          "line": "):"
        },
        {
          "lineno": 92,
          "line": "    \"\"\""
        },
        {
          "lineno": 93,
          "line": "    Create a new agent entry in the database."
        },
        {
          "lineno": 94,
          "line": ""
        },
        {
          "lineno": 95,
          "line": "    Args:"
        },
        {
          "lineno": 96,
          "line": "        name (str): The name of the agent."
        },
        {
          "lineno": 97,
          "line": "        description (str): The description of the agent."
        },
        {
          "lineno": 98,
          "line": "        author (str): The author of the agent."
        },
        {
          "lineno": 99,
          "line": "        keywords (List[str]): The keywords associated with the agent."
        },
        {
          "lineno": 100,
          "line": "        categories (List[str]): The categories associated with the agent."
        },
        {
          "lineno": 101,
          "line": "        graph (dict): The graph data of the agent."
        },
        {
          "lineno": 102,
          "line": ""
        },
        {
          "lineno": 103,
          "line": "    Returns:"
        },
        {
          "lineno": 104,
          "line": "        dict: The newly created agent entry."
        },
        {
          "lineno": 105,
          "line": ""
        },
        {
          "lineno": 106,
          "line": "    Raises:"
        },
        {
          "lineno": 107,
          "line": "        AgentQueryError: If there is an error creating the agent entry."
        },
        {
          "lineno": 108,
          "line": "    \"\"\""
        },
        {
          "lineno": 109,
          "line": "    try:"
        },
        {
          "lineno": 110,
          "line": "        agent = await prisma.models.Agents.prisma().create("
        },
        {
          "lineno": 111,
          "line": "            data={"
        },
        {
          "lineno": 112,
          "line": "                \"name\": name,"
        },
        {
          "lineno": 113,
          "line": "                \"description\": description,"
        },
        {
          "lineno": 114,
          "line": "                \"author\": author,"
        },
        {
          "lineno": 115,
          "line": "                \"keywords\": keywords,"
        },
        {
          "lineno": 116,
          "line": "                \"categories\": categories,"
        },
        {
          "lineno": 117,
          "line": "                \"graph\": graph,"
        },
        {
          "lineno": 118,
          "line": "                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},"
        },
        {
          "lineno": 119,
          "line": "                \"submissionStatus\": submission_state,"
        },
        {
          "lineno": 120,
          "line": "            }"
        },
        {
          "lineno": 121,
          "line": "        )"
        },
        {
          "lineno": 122,
          "line": ""
        },
        {
          "lineno": 123,
          "line": "        return agent"
        },
        {
          "lineno": 124,
          "line": ""
        },
        {
          "lineno": 125,
          "line": "    except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 126,
          "line": "        raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 127,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 128,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def create_agent_entry(\n    name: str,\n    description: str,\n    author: str,\n    keywords: typing.List[str],\n    categories: typing.List[str],\n    graph: prisma.Json,\n    submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING,\n):\n    \"\"\"\n    Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"\ntry:\n    agent = await prisma.models.Agents.prisma().create(\n        data={\n            \"name\": name,\n            \"description\": description,\n            \"author\": author,\n            \"keywords\": keywords,\n            \"categories\": categories,\n            \"graph\": graph,\n            \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n            \"submissionStatus\": submission_state,\n        }\n    )\n\n    return agent",
          "successors": [
            {
              "id": 3,
              "label": "except prisma.errors.PrismaError as e:\n    raise AgentQueryError(f\"Database query failed: {str(e)}\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "except Exception as e:\n    raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "update_agent_entry",
      "type": "function",
      "start_line": 131,
      "end_line": 161,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 131,
          "line": "async def update_agent_entry("
        },
        {
          "lineno": 132,
          "line": "    agent_id: str,"
        },
        {
          "lineno": 133,
          "line": "    version: int,"
        },
        {
          "lineno": 134,
          "line": "    submission_state: prisma.enums.SubmissionStatus,"
        },
        {
          "lineno": 135,
          "line": "    comments: str | None = None,"
        },
        {
          "lineno": 136,
          "line": ") -> prisma.models.Agents | None:"
        },
        {
          "lineno": 137,
          "line": "    \"\"\""
        },
        {
          "lineno": 138,
          "line": "    Update an existing agent entry in the database."
        },
        {
          "lineno": 139,
          "line": ""
        },
        {
          "lineno": 140,
          "line": "    Args:"
        },
        {
          "lineno": 141,
          "line": "        agent_id (str): The ID of the agent."
        },
        {
          "lineno": 142,
          "line": "        version (int): The version of the agent."
        },
        {
          "lineno": 143,
          "line": "        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent."
        },
        {
          "lineno": 144,
          "line": "    \"\"\""
        },
        {
          "lineno": 145,
          "line": ""
        },
        {
          "lineno": 146,
          "line": "    try:"
        },
        {
          "lineno": 147,
          "line": "        agent = await prisma.models.Agents.prisma().update("
        },
        {
          "lineno": 148,
          "line": "            where={\"id\": agent_id},"
        },
        {
          "lineno": 149,
          "line": "            data={"
        },
        {
          "lineno": 150,
          "line": "                \"version\": version,"
        },
        {
          "lineno": 151,
          "line": "                \"submissionStatus\": submission_state,"
        },
        {
          "lineno": 152,
          "line": "                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),"
        },
        {
          "lineno": 153,
          "line": "                \"submissionReviewComments\": comments,"
        },
        {
          "lineno": 154,
          "line": "            },"
        },
        {
          "lineno": 155,
          "line": "        )"
        },
        {
          "lineno": 156,
          "line": ""
        },
        {
          "lineno": 157,
          "line": "        return agent"
        },
        {
          "lineno": 158,
          "line": "    except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 159,
          "line": "        raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")"
        },
        {
          "lineno": 160,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 161,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def update_agent_entry(\n    agent_id: str,\n    version: int,\n    submission_state: prisma.enums.SubmissionStatus,\n    comments: str | None = None,\n) -> prisma.models.Agents | None:\n    \"\"\"\n    Update an existing agent entry in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int): The version of the agent.\n        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent.\n    \"\"\"\ntry:\n    agent = await prisma.models.Agents.prisma().update(\n        where={\"id\": agent_id},\n        data={\n            \"version\": version,\n            \"submissionStatus\": submission_state,\n            \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n            \"submissionReviewComments\": comments,\n        },\n    )\n\n    return agent",
          "successors": [
            {
              "id": 3,
              "label": "except prisma.errors.PrismaError as e:\n    raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")\nexcept Exception as e:\n    raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_agents",
      "type": "function",
      "start_line": 164,
      "end_line": 259,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 164,
          "line": "async def get_agents("
        },
        {
          "lineno": 165,
          "line": "    page: int = 1,"
        },
        {
          "lineno": 166,
          "line": "    page_size: int = 10,"
        },
        {
          "lineno": 167,
          "line": "    name: str | None = None,"
        },
        {
          "lineno": 168,
          "line": "    keyword: str | None = None,"
        },
        {
          "lineno": 169,
          "line": "    category: str | None = None,"
        },
        {
          "lineno": 170,
          "line": "    description: str | None = None,"
        },
        {
          "lineno": 171,
          "line": "    description_threshold: int = 60,"
        },
        {
          "lineno": 172,
          "line": "    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,"
        },
        {
          "lineno": 173,
          "line": "    sort_by: str = \"createdAt\","
        },
        {
          "lineno": 174,
          "line": "    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\","
        },
        {
          "lineno": 175,
          "line": "):"
        },
        {
          "lineno": 176,
          "line": "    \"\"\""
        },
        {
          "lineno": 177,
          "line": "    Retrieve a list of agents from the database based on the provided filters and pagination parameters."
        },
        {
          "lineno": 178,
          "line": ""
        },
        {
          "lineno": 179,
          "line": "    Args:"
        },
        {
          "lineno": 180,
          "line": "        page (int, optional): The page number to retrieve. Defaults to 1."
        },
        {
          "lineno": 181,
          "line": "        page_size (int, optional): The number of agents per page. Defaults to 10."
        },
        {
          "lineno": 182,
          "line": "        name (str, optional): Filter agents by name. Defaults to None."
        },
        {
          "lineno": 183,
          "line": "        keyword (str, optional): Filter agents by keyword. Defaults to None."
        },
        {
          "lineno": 184,
          "line": "        category (str, optional): Filter agents by category. Defaults to None."
        },
        {
          "lineno": 185,
          "line": "        description (str, optional): Filter agents by description. Defaults to None."
        },
        {
          "lineno": 186,
          "line": "        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60."
        },
        {
          "lineno": 187,
          "line": "        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\"."
        },
        {
          "lineno": 188,
          "line": "        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\"."
        },
        {
          "lineno": 189,
          "line": ""
        },
        {
          "lineno": 190,
          "line": "    Returns:"
        },
        {
          "lineno": 191,
          "line": "        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages."
        },
        {
          "lineno": 192,
          "line": "    \"\"\""
        },
        {
          "lineno": 193,
          "line": "    try:"
        },
        {
          "lineno": 194,
          "line": "        # Define the base query"
        },
        {
          "lineno": 195,
          "line": "        query = {}"
        },
        {
          "lineno": 196,
          "line": ""
        },
        {
          "lineno": 197,
          "line": "        # Add optional filters"
        },
        {
          "lineno": 198,
          "line": "        if name:"
        },
        {
          "lineno": 199,
          "line": "            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}"
        },
        {
          "lineno": 200,
          "line": "        if keyword:"
        },
        {
          "lineno": 201,
          "line": "            query[\"keywords\"] = {\"has\": keyword}"
        },
        {
          "lineno": 202,
          "line": "        if category:"
        },
        {
          "lineno": 203,
          "line": "            query[\"categories\"] = {\"has\": category}"
        },
        {
          "lineno": 204,
          "line": ""
        },
        {
          "lineno": 205,
          "line": "        query[\"submissionStatus\"] = submission_status"
        },
        {
          "lineno": 206,
          "line": ""
        },
        {
          "lineno": 207,
          "line": "        # Define sorting"
        },
        {
          "lineno": 208,
          "line": "        order = {sort_by: sort_order}"
        },
        {
          "lineno": 209,
          "line": ""
        },
        {
          "lineno": 210,
          "line": "        # Calculate pagination"
        },
        {
          "lineno": 211,
          "line": "        skip = (page - 1) * page_size"
        },
        {
          "lineno": 212,
          "line": ""
        },
        {
          "lineno": 213,
          "line": "        # Execute the query"
        },
        {
          "lineno": 214,
          "line": "        try:"
        },
        {
          "lineno": 215,
          "line": "            agents = await prisma.models.Agents.prisma().find_many("
        },
        {
          "lineno": 216,
          "line": "                where=query,  # type: ignore"
        },
        {
          "lineno": 217,
          "line": "                order=order,  # type: ignore"
        },
        {
          "lineno": 218,
          "line": "                skip=skip,"
        },
        {
          "lineno": 219,
          "line": "                take=page_size,"
        },
        {
          "lineno": 220,
          "line": "            )"
        },
        {
          "lineno": 221,
          "line": "        except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 222,
          "line": "            raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 223,
          "line": ""
        },
        {
          "lineno": 224,
          "line": "        # Apply fuzzy search on description if provided"
        },
        {
          "lineno": 225,
          "line": "        if description:"
        },
        {
          "lineno": 226,
          "line": "            try:"
        },
        {
          "lineno": 227,
          "line": "                filtered_agents = []"
        },
        {
          "lineno": 228,
          "line": "                for agent in agents:"
        },
        {
          "lineno": 229,
          "line": "                    if ("
        },
        {
          "lineno": 230,
          "line": "                        agent.description"
        },
        {
          "lineno": 231,
          "line": "                        and fuzzywuzzy.fuzz.partial_ratio("
        },
        {
          "lineno": 232,
          "line": "                            description.lower(), agent.description.lower()"
        },
        {
          "lineno": 233,
          "line": "                        )"
        },
        {
          "lineno": 234,
          "line": "                        >= description_threshold"
        },
        {
          "lineno": 235,
          "line": "                    ):"
        },
        {
          "lineno": 236,
          "line": "                        filtered_agents.append(agent)"
        },
        {
          "lineno": 237,
          "line": "                agents = filtered_agents"
        },
        {
          "lineno": 238,
          "line": "            except AttributeError as e:"
        },
        {
          "lineno": 239,
          "line": "                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")"
        },
        {
          "lineno": 240,
          "line": ""
        },
        {
          "lineno": 241,
          "line": "        # Get total count for pagination info"
        },
        {
          "lineno": 242,
          "line": "        total_count = len(agents)"
        },
        {
          "lineno": 243,
          "line": ""
        },
        {
          "lineno": 244,
          "line": "        return {"
        },
        {
          "lineno": 245,
          "line": "            \"agents\": agents,"
        },
        {
          "lineno": 246,
          "line": "            \"total_count\": total_count,"
        },
        {
          "lineno": 247,
          "line": "            \"page\": page,"
        },
        {
          "lineno": 248,
          "line": "            \"page_size\": page_size,"
        },
        {
          "lineno": 249,
          "line": "            \"total_pages\": (total_count + page_size - 1) // page_size,"
        },
        {
          "lineno": 250,
          "line": "        }"
        },
        {
          "lineno": 251,
          "line": ""
        },
        {
          "lineno": 252,
          "line": "    except AgentQueryError as e:"
        },
        {
          "lineno": 253,
          "line": "        # Log the error or handle it as needed"
        },
        {
          "lineno": 254,
          "line": "        raise e"
        },
        {
          "lineno": 255,
          "line": "    except ValueError as e:"
        },
        {
          "lineno": 256,
          "line": "        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")"
        },
        {
          "lineno": 257,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 258,
          "line": "        # Catch any other unexpected exceptions"
        },
        {
          "lineno": 259,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def get_agents(\n    page: int = 1,\n    page_size: int = 10,\n    name: str | None = None,\n    keyword: str | None = None,\n    category: str | None = None,\n    description: str | None = None,\n    description_threshold: int = 60,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n    sort_by: str = \"createdAt\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n):\n    \"\"\"\n    Retrieve a list of agents from the database based on the provided filters and pagination parameters.\n\n    Args:\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n        name (str, optional): Filter agents by name. Defaults to None.\n        keyword (str, optional): Filter agents by keyword. Defaults to None.\n        category (str, optional): Filter agents by category. Defaults to None.\n        description (str, optional): Filter agents by description. Defaults to None.\n        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60.\n        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\".\n        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\".\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\ntry:\n    # Define the base query\n    query = {}",
          "successors": [
            {
              "id": 3,
              "label": "if name:\n    query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}",
              "successors": []
            },
            {
              "id": 4,
              "label": "if keyword:\n    query[\"keywords\"] = {\"has\": keyword}",
              "successors": []
            },
            {
              "id": 5,
              "label": "if category:\n    query[\"categories\"] = {\"has\": category}",
              "successors": []
            },
            {
              "id": 6,
              "label": "query[\"submissionStatus\"] = submission_status\n\n# Define sorting\norder = {sort_by: sort_order}\n\n# Calculate pagination\nskip = (page - 1) * page_size\ntry:\n    agents = await prisma.models.Agents.prisma().find_many(\n        where=query,  # type: ignore\n        order=order,  # type: ignore\n        skip=skip,\n        take=page_size,\n    )",
              "successors": [
                {
                  "id": 8,
                  "label": "except prisma.errors.PrismaError as e:\n    raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 9,
                  "label": "if description:\n    try:\n        filtered_agents = []\n        for agent in agents:\n            if (\n                agent.description\n                and fuzzywuzzy.fuzz.partial_ratio(\n                    description.lower(), agent.description.lower()\n                )\n                >= description_threshold\n            ):\n                filtered_agents.append(agent)\n        agents = filtered_agents\nexcept AttributeError as e:\n    raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 11,
                  "label": "# Get total count for pagination info\ntotal_count = len(agents)\n\nreturn {\n    \"agents\": agents,\n    \"total_count\": total_count,\n    \"page\": page,\n    \"page_size\": page_size,\n    \"total_pages\": (total_count + page_size - 1) // page_size,\n}",
                  "successors": []
                }
              ]
            },
            {
              "id": 12,
              "label": "except AgentQueryError as e:\n    # Log the error or handle it as needed\n    raise e",
              "successors": []
            },
            {
              "id": 13,
              "label": "except ValueError as e:\n    raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")",
              "successors": []
            },
            {
              "id": 14,
              "label": "except Exception as e:\n    # Catch any other unexpected exceptions\n    raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_agent_details",
      "type": "function",
      "start_line": 262,
      "end_line": 291,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 262,
          "line": "async def get_agent_details(agent_id: str, version: int | None = None):"
        },
        {
          "lineno": 263,
          "line": "    \"\"\""
        },
        {
          "lineno": 264,
          "line": "    Retrieve agent details from the database."
        },
        {
          "lineno": 265,
          "line": ""
        },
        {
          "lineno": 266,
          "line": "    Args:"
        },
        {
          "lineno": 267,
          "line": "        agent_id (str): The ID of the agent."
        },
        {
          "lineno": 268,
          "line": "        version (int | None, optional): The version of the agent. Defaults to None."
        },
        {
          "lineno": 269,
          "line": ""
        },
        {
          "lineno": 270,
          "line": "    Returns:"
        },
        {
          "lineno": 271,
          "line": "        dict: The agent details."
        },
        {
          "lineno": 272,
          "line": ""
        },
        {
          "lineno": 273,
          "line": "    Raises:"
        },
        {
          "lineno": 274,
          "line": "        AgentQueryError: If the agent is not found or if there is an error querying the database."
        },
        {
          "lineno": 275,
          "line": "    \"\"\""
        },
        {
          "lineno": 276,
          "line": "    try:"
        },
        {
          "lineno": 277,
          "line": "        query = {\"id\": agent_id}"
        },
        {
          "lineno": 278,
          "line": "        if version is not None:"
        },
        {
          "lineno": 279,
          "line": "            query[\"version\"] = version  # type: ignore"
        },
        {
          "lineno": 280,
          "line": ""
        },
        {
          "lineno": 281,
          "line": "        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore"
        },
        {
          "lineno": 282,
          "line": ""
        },
        {
          "lineno": 283,
          "line": "        if not agent:"
        },
        {
          "lineno": 284,
          "line": "            raise AgentQueryError(\"Agent not found\")"
        },
        {
          "lineno": 285,
          "line": ""
        },
        {
          "lineno": 286,
          "line": "        return agent"
        },
        {
          "lineno": 287,
          "line": ""
        },
        {
          "lineno": 288,
          "line": "    except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 289,
          "line": "        raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 290,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 291,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def get_agent_details(agent_id: str, version: int | None = None):\n    \"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "label": "try:\n    query = {\"id\": agent_id}\n    if version is not None:\nquery[\"version\"] = version  # type: ignore",
              "successors": [
                {
                  "id": 4,
                  "label": "agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\nif not agent:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "raise AgentQueryError(\"Agent not found\")",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "return agent",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "label": "except prisma.errors.PrismaError as e:\n    raise AgentQueryError(f\"Database query failed: {str(e)}\")",
              "successors": []
            },
            {
              "id": 8,
              "label": "except Exception as e:\n    raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "search_db",
      "type": "function",
      "start_line": 294,
      "end_line": 407,
      "functions": [],
      "classes": [
        {
          "name": "CountResponse",
          "type": "class",
          "start_line": 377,
          "end_line": 378,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 377,
              "line": "        class CountResponse(pydantic.BaseModel):"
            },
            {
              "lineno": 378,
              "line": "            count: int"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "class CountResponse(pydantic.BaseModel):\n    count: int",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 294,
          "line": "async def search_db("
        },
        {
          "lineno": 295,
          "line": "    query: str,"
        },
        {
          "lineno": 296,
          "line": "    page: int = 1,"
        },
        {
          "lineno": 297,
          "line": "    page_size: int = 10,"
        },
        {
          "lineno": 298,
          "line": "    categories: typing.List[str] | None = None,"
        },
        {
          "lineno": 299,
          "line": "    description_threshold: int = 60,"
        },
        {
          "lineno": 300,
          "line": "    sort_by: str = \"rank\","
        },
        {
          "lineno": 301,
          "line": "    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\","
        },
        {
          "lineno": 302,
          "line": "    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,"
        },
        {
          "lineno": 303,
          "line": ") -> market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:"
        },
        {
          "lineno": 304,
          "line": "    \"\"\"Perform a search for agents based on the provided query string."
        },
        {
          "lineno": 305,
          "line": ""
        },
        {
          "lineno": 306,
          "line": "    Args:"
        },
        {
          "lineno": 307,
          "line": "        query (str): the search string"
        },
        {
          "lineno": 308,
          "line": "        page (int, optional): page for searching. Defaults to 1."
        },
        {
          "lineno": 309,
          "line": "        page_size (int, optional): the number of results to return. Defaults to 10."
        },
        {
          "lineno": 310,
          "line": "        categories (List[str] | None, optional): list of category filters. Defaults to None."
        },
        {
          "lineno": 311,
          "line": "        description_threshold (int, optional): number of characters to return. Defaults to 60."
        },
        {
          "lineno": 312,
          "line": "        sort_by (str, optional): sort by option. Defaults to \"rank\"."
        },
        {
          "lineno": 313,
          "line": "        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\"."
        },
        {
          "lineno": 314,
          "line": ""
        },
        {
          "lineno": 315,
          "line": "    Raises:"
        },
        {
          "lineno": 316,
          "line": "        AgentQueryError: Raises an error if the query fails."
        },
        {
          "lineno": 317,
          "line": "        AgentQueryError: Raises if an unexpected error occurs."
        },
        {
          "lineno": 318,
          "line": ""
        },
        {
          "lineno": 319,
          "line": "    Returns:"
        },
        {
          "lineno": 320,
          "line": "        List[AgentsWithRank]: List of agents matching the search criteria."
        },
        {
          "lineno": 321,
          "line": "    \"\"\""
        },
        {
          "lineno": 322,
          "line": "    try:"
        },
        {
          "lineno": 323,
          "line": "        offset = (page - 1) * page_size"
        },
        {
          "lineno": 324,
          "line": ""
        },
        {
          "lineno": 325,
          "line": "        category_filter = \"1=1\""
        },
        {
          "lineno": 326,
          "line": "        if categories:"
        },
        {
          "lineno": 327,
          "line": "            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]"
        },
        {
          "lineno": 328,
          "line": "            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\""
        },
        {
          "lineno": 329,
          "line": ""
        },
        {
          "lineno": 330,
          "line": "        # Construct the ORDER BY clause based on the sort_by parameter"
        },
        {
          "lineno": 331,
          "line": "        if sort_by in [\"createdAt\", \"updatedAt\"]:"
        },
        {
          "lineno": 332,
          "line": "            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'"
        },
        {
          "lineno": 333,
          "line": "        elif sort_by == \"name\":"
        },
        {
          "lineno": 334,
          "line": "            order_by_clause = f\"name {sort_order.upper()}, rank DESC\""
        },
        {
          "lineno": 335,
          "line": "        else:"
        },
        {
          "lineno": 336,
          "line": "            order_by_clause = 'rank DESC, \"createdAt\" DESC'"
        },
        {
          "lineno": 337,
          "line": ""
        },
        {
          "lineno": 338,
          "line": "        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\""
        },
        {
          "lineno": 339,
          "line": ""
        },
        {
          "lineno": 340,
          "line": "        sql_query = f\"\"\""
        },
        {
          "lineno": 341,
          "line": "        WITH query AS ("
        },
        {
          "lineno": 342,
          "line": "            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q "
        },
        {
          "lineno": 343,
          "line": "            FROM unnest(to_tsvector('{query}'))"
        },
        {
          "lineno": 344,
          "line": "        )"
        },
        {
          "lineno": 345,
          "line": "        SELECT "
        },
        {
          "lineno": 346,
          "line": "            id, "
        },
        {
          "lineno": 347,
          "line": "            \"createdAt\", "
        },
        {
          "lineno": 348,
          "line": "            \"updatedAt\", "
        },
        {
          "lineno": 349,
          "line": "            version, "
        },
        {
          "lineno": 350,
          "line": "            name, "
        },
        {
          "lineno": 351,
          "line": "            LEFT(description, {description_threshold}) AS description, "
        },
        {
          "lineno": 352,
          "line": "            author, "
        },
        {
          "lineno": 353,
          "line": "            keywords, "
        },
        {
          "lineno": 354,
          "line": "            categories, "
        },
        {
          "lineno": 355,
          "line": "            graph,"
        },
        {
          "lineno": 356,
          "line": "            \"submissionStatus\","
        },
        {
          "lineno": 357,
          "line": "            \"submissionDate\","
        },
        {
          "lineno": 358,
          "line": "            CASE "
        },
        {
          "lineno": 359,
          "line": "                WHEN query.q::text = '' THEN 1.0"
        },
        {
          "lineno": 360,
          "line": "                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)"
        },
        {
          "lineno": 361,
          "line": "            END AS rank"
        },
        {
          "lineno": 362,
          "line": "        FROM market.\"Agents\", query"
        },
        {
          "lineno": 363,
          "line": "        WHERE "
        },
        {
          "lineno": 364,
          "line": "            (query.q::text = '' OR search @@ query.q)"
        },
        {
          "lineno": 365,
          "line": "            AND {category_filter} "
        },
        {
          "lineno": 366,
          "line": "            AND {submission_status_filter}"
        },
        {
          "lineno": 367,
          "line": "        ORDER BY {order_by_clause}"
        },
        {
          "lineno": 368,
          "line": "        LIMIT {page_size}"
        },
        {
          "lineno": 369,
          "line": "        OFFSET {offset};"
        },
        {
          "lineno": 370,
          "line": "        \"\"\""
        },
        {
          "lineno": 371,
          "line": ""
        },
        {
          "lineno": 372,
          "line": "        results = await prisma.client.get_client().query_raw("
        },
        {
          "lineno": 373,
          "line": "            query=sql_query,"
        },
        {
          "lineno": 374,
          "line": "            model=market.utils.extension_types.AgentsWithRank,"
        },
        {
          "lineno": 375,
          "line": "        )"
        },
        {
          "lineno": 376,
          "line": ""
        },
        {
          "lineno": 379,
          "line": ""
        },
        {
          "lineno": 380,
          "line": "        count_query = f\"\"\""
        },
        {
          "lineno": 381,
          "line": "        WITH query AS ("
        },
        {
          "lineno": 382,
          "line": "            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q "
        },
        {
          "lineno": 383,
          "line": "            FROM unnest(to_tsvector('{query}'))"
        },
        {
          "lineno": 384,
          "line": "        )"
        },
        {
          "lineno": 385,
          "line": "        SELECT COUNT(*)"
        },
        {
          "lineno": 386,
          "line": "        FROM market.\"Agents\", query"
        },
        {
          "lineno": 387,
          "line": "        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};"
        },
        {
          "lineno": 388,
          "line": "        \"\"\""
        },
        {
          "lineno": 389,
          "line": ""
        },
        {
          "lineno": 390,
          "line": "        total_count = await prisma.client.get_client().query_first("
        },
        {
          "lineno": 391,
          "line": "            query=count_query,"
        },
        {
          "lineno": 392,
          "line": "            model=CountResponse,"
        },
        {
          "lineno": 393,
          "line": "        )"
        },
        {
          "lineno": 394,
          "line": "        total_count = total_count.count if total_count else 0"
        },
        {
          "lineno": 395,
          "line": ""
        },
        {
          "lineno": 396,
          "line": "        return market.model.ListResponse("
        },
        {
          "lineno": 397,
          "line": "            items=results,"
        },
        {
          "lineno": 398,
          "line": "            total_count=total_count,"
        },
        {
          "lineno": 399,
          "line": "            page=page,"
        },
        {
          "lineno": 400,
          "line": "            page_size=page_size,"
        },
        {
          "lineno": 401,
          "line": "            total_pages=(total_count + page_size - 1) // page_size,"
        },
        {
          "lineno": 402,
          "line": "        )"
        },
        {
          "lineno": 403,
          "line": ""
        },
        {
          "lineno": 404,
          "line": "    except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 405,
          "line": "        raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 406,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 407,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def search_db(\n    query: str,\n    page: int = 1,\n    page_size: int = 10,\n    categories: typing.List[str] | None = None,\n    description_threshold: int = 60,\n    sort_by: str = \"rank\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n\"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "try:\n    offset = (page - 1) * page_size\n\n    category_filter = \"1=1\"\n    if categories:\ncategory_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\ncategory_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"",
              "successors": [
                {
                  "id": 5,
                  "label": "# Construct the ORDER BY clause based on the sort_by parameter\nif sort_by in [\"createdAt\", \"updatedAt\"]:\n    order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\nelif sort_by == \"name\":\n    order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\nelse:\n    order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\nsubmission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\nsql_query = f\"\"\"\nWITH query AS (\n    SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n    FROM unnest(to_tsvector('{query}'))\n)\nSELECT \n    id, \n    \"createdAt\", \n    \"updatedAt\", \n    version, \n    name, \n    LEFT(description, {description_threshold}) AS description, \n    author, \n    keywords, \n    categories, \n    graph,\n    \"submissionStatus\",\n    \"submissionDate\",\n    CASE \n        WHEN query.q::text = '' THEN 1.0\n        ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n    END AS rank\nFROM market.\"Agents\", query\nWHERE \n    (query.q::text = '' OR search @@ query.q)\n    AND {category_filter} \n    AND {submission_status_filter}\nORDER BY {order_by_clause}\nLIMIT {page_size}\nOFFSET {offset};\n\"\"\"",
                  "successors": [
                    {
                      "id": 7,
                      "label": "results = await prisma.client.get_client().query_raw(\n    query=sql_query,\n    model=market.utils.extension_types.AgentsWithRank,\n)\ncount_query = f\"\"\"\nWITH query AS (\n    SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n    FROM unnest(to_tsvector('{query}'))\n)\nSELECT COUNT(*)\nFROM market.\"Agents\", query\nWHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n\"\"\"",
                      "successors": [
                        {
                          "id": 9,
                          "label": "total_count = await prisma.client.get_client().query_first(\n    query=count_query,\n    model=CountResponse,\n)\ntotal_count = total_count.count if total_count else 0\nreturn market.model.ListResponse(\n    items=results,\n    total_count=total_count,\n    page=page,\n    page_size=page_size,\n    total_pages=(total_count + page_size - 1) // page_size,\n)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 11,
              "label": "except prisma.errors.PrismaError as e:\n    raise AgentQueryError(f\"Database query failed: {str(e)}\")\nexcept Exception as e:\n    raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_top_agents_by_downloads",
      "type": "function",
      "start_line": 410,
      "end_line": 463,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 410,
          "line": "async def get_top_agents_by_downloads("
        },
        {
          "lineno": 411,
          "line": "    page: int = 1,"
        },
        {
          "lineno": 412,
          "line": "    page_size: int = 10,"
        },
        {
          "lineno": 413,
          "line": "    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,"
        },
        {
          "lineno": 414,
          "line": ") -> market.model.ListResponse[prisma.models.AnalyticsTracker]:"
        },
        {
          "lineno": 415,
          "line": "    \"\"\"Retrieve the top agents by download count."
        },
        {
          "lineno": 416,
          "line": ""
        },
        {
          "lineno": 417,
          "line": "    Args:"
        },
        {
          "lineno": 418,
          "line": "        page (int, optional): The page number. Defaults to 1."
        },
        {
          "lineno": 419,
          "line": "        page_size (int, optional): The number of agents per page. Defaults to 10."
        },
        {
          "lineno": 420,
          "line": ""
        },
        {
          "lineno": 421,
          "line": "    Returns:"
        },
        {
          "lineno": 422,
          "line": "        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages."
        },
        {
          "lineno": 423,
          "line": "    \"\"\""
        },
        {
          "lineno": 424,
          "line": "    try:"
        },
        {
          "lineno": 425,
          "line": "        # Calculate pagination"
        },
        {
          "lineno": 426,
          "line": "        skip = (page - 1) * page_size"
        },
        {
          "lineno": 427,
          "line": ""
        },
        {
          "lineno": 428,
          "line": "        # Execute the query"
        },
        {
          "lineno": 429,
          "line": "        try:"
        },
        {
          "lineno": 430,
          "line": "            # Agents with no downloads will not be included in the results... is this the desired behavior?"
        },
        {
          "lineno": 431,
          "line": "            analytics = await prisma.models.AnalyticsTracker.prisma().find_many("
        },
        {
          "lineno": 432,
          "line": "                include={\"agent\": True},"
        },
        {
          "lineno": 433,
          "line": "                order={\"downloads\": \"desc\"},"
        },
        {
          "lineno": 434,
          "line": "                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},"
        },
        {
          "lineno": 435,
          "line": "                skip=skip,"
        },
        {
          "lineno": 436,
          "line": "                take=page_size,"
        },
        {
          "lineno": 437,
          "line": "            )"
        },
        {
          "lineno": 438,
          "line": "        except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 439,
          "line": "            raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 440,
          "line": ""
        },
        {
          "lineno": 441,
          "line": "        try:"
        },
        {
          "lineno": 442,
          "line": "            total_count = await prisma.models.AnalyticsTracker.prisma().count("
        },
        {
          "lineno": 443,
          "line": "                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},"
        },
        {
          "lineno": 444,
          "line": "            )"
        },
        {
          "lineno": 445,
          "line": "        except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 446,
          "line": "            raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 447,
          "line": ""
        },
        {
          "lineno": 448,
          "line": "        return market.model.ListResponse("
        },
        {
          "lineno": 449,
          "line": "            items=analytics,"
        },
        {
          "lineno": 450,
          "line": "            total_count=total_count,"
        },
        {
          "lineno": 451,
          "line": "            page=page,"
        },
        {
          "lineno": 452,
          "line": "            page_size=page_size,"
        },
        {
          "lineno": 453,
          "line": "            total_pages=(total_count + page_size - 1) // page_size,"
        },
        {
          "lineno": 454,
          "line": "        )"
        },
        {
          "lineno": 455,
          "line": ""
        },
        {
          "lineno": 456,
          "line": "    except AgentQueryError as e:"
        },
        {
          "lineno": 457,
          "line": "        # Log the error or handle it as needed"
        },
        {
          "lineno": 458,
          "line": "        raise e from e"
        },
        {
          "lineno": 459,
          "line": "    except ValueError as e:"
        },
        {
          "lineno": 460,
          "line": "        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e"
        },
        {
          "lineno": 461,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 462,
          "line": "        # Catch any other unexpected exceptions"
        },
        {
          "lineno": 463,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def get_top_agents_by_downloads(\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[prisma.models.AnalyticsTracker]:\n\"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "try:\n    # Calculate pagination\n    skip = (page - 1) * page_size",
              "successors": [
                {
                  "id": 4,
                  "label": "try:\n    # Agents with no downloads will not be included in the results... is this the desired behavior?\n    analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n        include={\"agent\": True},\n        order={\"downloads\": \"desc\"},\n        where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n        skip=skip,\n        take=page_size\n    )",
                  "successors": [
                    {
                      "id": 5,
                      "label": "except prisma.errors.PrismaError as e:\n    raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "try:\n    total_count = await prisma.models.AnalyticsTracker.prisma().count(\n        where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}}\n    )",
                      "successors": [
                        {
                          "id": 7,
                          "label": "except prisma.errors.PrismaError as e:\n    raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "label": "return market.model.ListResponse(\n    items=analytics,\n    total_count=total_count,\n    page=page,\n    page_size=page_size,\n    total_pages=(total_count + page_size - 1) // page_size\n)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "except AgentQueryError as e:\n    # Log the error or handle it as needed\n    raise e from e",
                  "successors": []
                },
                {
                  "id": 10,
                  "label": "except ValueError as e:\n    raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e",
                  "successors": []
                },
                {
                  "id": 11,
                  "label": "except Exception as e:\n    # Catch any other unexpected exceptions\n    raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "set_agent_featured",
      "type": "function",
      "start_line": 466,
      "end_line": 502,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 466,
          "line": "async def set_agent_featured("
        },
        {
          "lineno": 467,
          "line": "    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]"
        },
        {
          "lineno": 468,
          "line": ") -> prisma.models.FeaturedAgent:"
        },
        {
          "lineno": 469,
          "line": "    \"\"\"Set an agent as featured in the database."
        },
        {
          "lineno": 470,
          "line": ""
        },
        {
          "lineno": 471,
          "line": "    Args:"
        },
        {
          "lineno": 472,
          "line": "        agent_id (str): The ID of the agent."
        },
        {
          "lineno": 473,
          "line": "        category (str, optional): The category to set the agent as featured. Defaults to \"featured\"."
        },
        {
          "lineno": 474,
          "line": ""
        },
        {
          "lineno": 475,
          "line": "    Raises:"
        },
        {
          "lineno": 476,
          "line": "        AgentQueryError: If there is an error setting the agent as featured."
        },
        {
          "lineno": 477,
          "line": "    \"\"\""
        },
        {
          "lineno": 478,
          "line": "    try:"
        },
        {
          "lineno": 479,
          "line": "        agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})"
        },
        {
          "lineno": 480,
          "line": "        if not agent:"
        },
        {
          "lineno": 481,
          "line": "            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")"
        },
        {
          "lineno": 482,
          "line": ""
        },
        {
          "lineno": 483,
          "line": "        featured = await prisma.models.FeaturedAgent.prisma().upsert("
        },
        {
          "lineno": 484,
          "line": "            where={\"agentId\": agent_id},"
        },
        {
          "lineno": 485,
          "line": "            data={"
        },
        {
          "lineno": 486,
          "line": "                \"update\": {"
        },
        {
          "lineno": 487,
          "line": "                    \"featuredCategories\": featured_categories,"
        },
        {
          "lineno": 488,
          "line": "                    \"isActive\": is_active,"
        },
        {
          "lineno": 489,
          "line": "                },"
        },
        {
          "lineno": 490,
          "line": "                \"create\": {"
        },
        {
          "lineno": 491,
          "line": "                    \"featuredCategories\": featured_categories,"
        },
        {
          "lineno": 492,
          "line": "                    \"isActive\": is_active,"
        },
        {
          "lineno": 493,
          "line": "                    \"agent\": {\"connect\": {\"id\": agent_id}},"
        },
        {
          "lineno": 494,
          "line": "                },"
        },
        {
          "lineno": 495,
          "line": "            },"
        },
        {
          "lineno": 496,
          "line": "        )"
        },
        {
          "lineno": 497,
          "line": "        return featured"
        },
        {
          "lineno": 498,
          "line": ""
        },
        {
          "lineno": 499,
          "line": "    except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 500,
          "line": "        raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 501,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 502,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def set_agent_featured(\n    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]\n) -> prisma.models.FeaturedAgent:\n    \"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"\ntry:\n    agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})",
          "successors": [
            {
              "id": 3,
              "label": "if not agent:\n    raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\nfeatured = await prisma.models.FeaturedAgent.prisma().upsert(\n    where={\"agentId\": agent_id},\n    data={\n        \"update\": {\n            \"featuredCategories\": featured_categories,\n            \"isActive\": is_active,\n        },\n        \"create\": {\n            \"featuredCategories\": featured_categories,\n            \"isActive\": is_active,\n            \"agent\": {\"connect\": {\"id\": agent_id}},\n        },\n    },\n)\nreturn featured",
              "successors": []
            },
            {
              "id": 5,
              "label": "except prisma.errors.PrismaError as e:\n    raise AgentQueryError(f\"Database query failed: {str(e)}\")",
              "successors": []
            },
            {
              "id": 6,
              "label": "except Exception as e:\n    raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_featured_agents",
      "type": "function",
      "start_line": 505,
      "end_line": 558,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 505,
          "line": "async def get_featured_agents("
        },
        {
          "lineno": 506,
          "line": "    category: str = \"featured\","
        },
        {
          "lineno": 507,
          "line": "    page: int = 1,"
        },
        {
          "lineno": 508,
          "line": "    page_size: int = 10,"
        },
        {
          "lineno": 509,
          "line": "    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,"
        },
        {
          "lineno": 510,
          "line": ") -> FeaturedAgentResponse:"
        },
        {
          "lineno": 511,
          "line": "    \"\"\"Retrieve a list of featured agents from the database based on the provided category."
        },
        {
          "lineno": 512,
          "line": ""
        },
        {
          "lineno": 513,
          "line": "    Args:"
        },
        {
          "lineno": 514,
          "line": "        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\"."
        },
        {
          "lineno": 515,
          "line": "        page (int, optional): The page number to retrieve. Defaults to 1."
        },
        {
          "lineno": 516,
          "line": "        page_size (int, optional): The number of agents per page. Defaults to 10."
        },
        {
          "lineno": 517,
          "line": ""
        },
        {
          "lineno": 518,
          "line": "    Returns:"
        },
        {
          "lineno": 519,
          "line": "        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages."
        },
        {
          "lineno": 520,
          "line": "    \"\"\""
        },
        {
          "lineno": 521,
          "line": "    try:"
        },
        {
          "lineno": 522,
          "line": "        # Calculate pagination"
        },
        {
          "lineno": 523,
          "line": "        skip = (page - 1) * page_size"
        },
        {
          "lineno": 524,
          "line": ""
        },
        {
          "lineno": 525,
          "line": "        # Execute the query"
        },
        {
          "lineno": 526,
          "line": "        try:"
        },
        {
          "lineno": 527,
          "line": "            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many("
        },
        {
          "lineno": 528,
          "line": "                where={"
        },
        {
          "lineno": 529,
          "line": "                    \"featuredCategories\": {\"has\": category},"
        },
        {
          "lineno": 530,
          "line": "                    \"isActive\": True,"
        },
        {
          "lineno": 531,
          "line": "                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},"
        },
        {
          "lineno": 532,
          "line": "                },"
        },
        {
          "lineno": 533,
          "line": "                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},"
        },
        {
          "lineno": 534,
          "line": "                skip=skip,"
        },
        {
          "lineno": 535,
          "line": "                take=page_size,"
        },
        {
          "lineno": 536,
          "line": "            )"
        },
        {
          "lineno": 537,
          "line": "        except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 538,
          "line": "            raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 539,
          "line": ""
        },
        {
          "lineno": 540,
          "line": "        # Get total count for pagination info"
        },
        {
          "lineno": 541,
          "line": "        total_count = len(featured_agents)"
        },
        {
          "lineno": 542,
          "line": ""
        },
        {
          "lineno": 543,
          "line": "        return FeaturedAgentResponse("
        },
        {
          "lineno": 544,
          "line": "            featured_agents=featured_agents,"
        },
        {
          "lineno": 545,
          "line": "            total_count=total_count,"
        },
        {
          "lineno": 546,
          "line": "            page=page,"
        },
        {
          "lineno": 547,
          "line": "            page_size=page_size,"
        },
        {
          "lineno": 548,
          "line": "            total_pages=(total_count + page_size - 1) // page_size,"
        },
        {
          "lineno": 549,
          "line": "        )"
        },
        {
          "lineno": 550,
          "line": ""
        },
        {
          "lineno": 551,
          "line": "    except AgentQueryError as e:"
        },
        {
          "lineno": 552,
          "line": "        # Log the error or handle it as needed"
        },
        {
          "lineno": 553,
          "line": "        raise e from e"
        },
        {
          "lineno": 554,
          "line": "    except ValueError as e:"
        },
        {
          "lineno": 555,
          "line": "        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e"
        },
        {
          "lineno": 556,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 557,
          "line": "        # Catch any other unexpected exceptions"
        },
        {
          "lineno": 558,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def get_featured_agents(\n    category: str = \"featured\",\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> FeaturedAgentResponse:\n    \"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n# Calculate pagination\nskip = (page - 1) * page_size\n\n# Execute the query",
          "successors": [
            {
              "id": 3,
              "label": "try:\n    featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n        where={\n            \"featuredCategories\": {\"has\": category},\n            \"isActive\": True,\n            \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n        },\n        include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n        skip=skip,\n        take=page_size,\n    )\nexcept prisma.errors.PrismaError as e:\n    raise AgentQueryError(f\"Database query failed: {str(e)}\")",
              "successors": [
                {
                  "id": 5,
                  "label": "# Get total count for pagination info\ntotal_count = len(featured_agents)\n\nreturn FeaturedAgentResponse(\n    featured_agents=featured_agents,\n    total_count=total_count,\n    page=page,\n    page_size=page_size,\n    total_pages=(total_count + page_size - 1) // page_size,\n)",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "except AgentQueryError as e:\n    # Log the error or handle it as needed\n    raise e from e",
              "successors": []
            },
            {
              "id": 7,
              "label": "except ValueError as e:\n    raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e",
              "successors": []
            },
            {
              "id": 8,
              "label": "except Exception as e:\n    # Catch any other unexpected exceptions\n    raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "remove_featured_category",
      "type": "function",
      "start_line": 561,
      "end_line": 596,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 561,
          "line": "async def remove_featured_category("
        },
        {
          "lineno": 562,
          "line": "    agent_id: str, category: str"
        },
        {
          "lineno": 563,
          "line": ") -> prisma.models.FeaturedAgent | None:"
        },
        {
          "lineno": 564,
          "line": "    \"\"\"Adds a featured category to an agent."
        },
        {
          "lineno": 565,
          "line": ""
        },
        {
          "lineno": 566,
          "line": "    Args:"
        },
        {
          "lineno": 567,
          "line": "        agent_id (str): The ID of the agent."
        },
        {
          "lineno": 568,
          "line": "        category (str): The category to add to the agent."
        },
        {
          "lineno": 569,
          "line": ""
        },
        {
          "lineno": 570,
          "line": "    Returns:"
        },
        {
          "lineno": 571,
          "line": "        FeaturedAgentResponse: The updated list of featured agents."
        },
        {
          "lineno": 572,
          "line": "    \"\"\""
        },
        {
          "lineno": 573,
          "line": "    try:"
        },
        {
          "lineno": 574,
          "line": "        # get the existing categories"
        },
        {
          "lineno": 575,
          "line": "        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique("
        },
        {
          "lineno": 576,
          "line": "            where={\"agentId\": agent_id},"
        },
        {
          "lineno": 577,
          "line": "            include={\"agent\": True},"
        },
        {
          "lineno": 578,
          "line": "        )"
        },
        {
          "lineno": 579,
          "line": ""
        },
        {
          "lineno": 580,
          "line": "        if not featured_agent:"
        },
        {
          "lineno": 581,
          "line": "            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")"
        },
        {
          "lineno": 582,
          "line": ""
        },
        {
          "lineno": 583,
          "line": "        # remove the category from the list"
        },
        {
          "lineno": 584,
          "line": "        featured_agent.featuredCategories.remove(category)"
        },
        {
          "lineno": 585,
          "line": ""
        },
        {
          "lineno": 586,
          "line": "        featured_agent = await prisma.models.FeaturedAgent.prisma().update("
        },
        {
          "lineno": 587,
          "line": "            where={\"agentId\": agent_id},"
        },
        {
          "lineno": 588,
          "line": "            data={\"featuredCategories\": featured_agent.featuredCategories},"
        },
        {
          "lineno": 589,
          "line": "        )"
        },
        {
          "lineno": 590,
          "line": ""
        },
        {
          "lineno": 591,
          "line": "        return featured_agent"
        },
        {
          "lineno": 592,
          "line": ""
        },
        {
          "lineno": 593,
          "line": "    except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 594,
          "line": "        raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 595,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 596,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def remove_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "label": "try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\nif not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")",
              "successors": [
                {
                  "id": 4,
                  "label": "# remove the category from the list\n        featured_agent.featuredCategories.remove(category)\nfeatured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )",
                  "successors": [
                    {
                      "id": 6,
                      "label": "return featured_agent",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
              "successors": []
            },
            {
              "id": 8,
              "label": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "add_featured_category",
      "type": "function",
      "start_line": 599,
      "end_line": 622,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 599,
          "line": "async def add_featured_category("
        },
        {
          "lineno": 600,
          "line": "    agent_id: str, category: str"
        },
        {
          "lineno": 601,
          "line": ") -> prisma.models.FeaturedAgent | None:"
        },
        {
          "lineno": 602,
          "line": "    \"\"\"Removes a featured category from an agent."
        },
        {
          "lineno": 603,
          "line": ""
        },
        {
          "lineno": 604,
          "line": "    Args:"
        },
        {
          "lineno": 605,
          "line": "        agent_id (str): The ID of the agent."
        },
        {
          "lineno": 606,
          "line": "        category (str): The category to remove from the agent."
        },
        {
          "lineno": 607,
          "line": ""
        },
        {
          "lineno": 608,
          "line": "    Returns:"
        },
        {
          "lineno": 609,
          "line": "        FeaturedAgentResponse: The updated list of featured agents."
        },
        {
          "lineno": 610,
          "line": "    \"\"\""
        },
        {
          "lineno": 611,
          "line": "    try:"
        },
        {
          "lineno": 612,
          "line": "        featured_agent = await prisma.models.FeaturedAgent.prisma().update("
        },
        {
          "lineno": 613,
          "line": "            where={\"agentId\": agent_id},"
        },
        {
          "lineno": 614,
          "line": "            data={\"featuredCategories\": {\"push\": [category]}},"
        },
        {
          "lineno": 615,
          "line": "        )"
        },
        {
          "lineno": 616,
          "line": ""
        },
        {
          "lineno": 617,
          "line": "        return featured_agent"
        },
        {
          "lineno": 618,
          "line": ""
        },
        {
          "lineno": 619,
          "line": "    except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 620,
          "line": "        raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 621,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 622,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def add_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\ntry:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent",
          "successors": [
            {
              "id": 3,
              "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_agent_featured",
      "type": "function",
      "start_line": 625,
      "end_line": 642,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 625,
          "line": "async def get_agent_featured(agent_id: str) -> prisma.models.FeaturedAgent | None:"
        },
        {
          "lineno": 626,
          "line": "    \"\"\"Retrieve an agent's featured categories from the database."
        },
        {
          "lineno": 627,
          "line": ""
        },
        {
          "lineno": 628,
          "line": "    Args:"
        },
        {
          "lineno": 629,
          "line": "        agent_id (str): The ID of the agent."
        },
        {
          "lineno": 630,
          "line": ""
        },
        {
          "lineno": 631,
          "line": "    Returns:"
        },
        {
          "lineno": 632,
          "line": "        FeaturedAgentResponse: The list of featured agents."
        },
        {
          "lineno": 633,
          "line": "    \"\"\""
        },
        {
          "lineno": 634,
          "line": "    try:"
        },
        {
          "lineno": 635,
          "line": "        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique("
        },
        {
          "lineno": 636,
          "line": "            where={\"agentId\": agent_id},"
        },
        {
          "lineno": 637,
          "line": "        )"
        },
        {
          "lineno": 638,
          "line": "        return featured_agent"
        },
        {
          "lineno": 639,
          "line": "    except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 640,
          "line": "        raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 641,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 642,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def get_agent_featured(agent_id: str) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"\ntry:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent",
          "successors": [
            {
              "id": 3,
              "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\nexcept Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_not_featured_agents",
      "type": "function",
      "start_line": 645,
      "end_line": 681,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 645,
          "line": "async def get_not_featured_agents("
        },
        {
          "lineno": 646,
          "line": "    page: int = 1, page_size: int = 10"
        },
        {
          "lineno": 647,
          "line": ") -> typing.List[prisma.models.Agents]:"
        },
        {
          "lineno": 648,
          "line": "    \"\"\""
        },
        {
          "lineno": 649,
          "line": "    Retrieve a list of not featured agents from the database."
        },
        {
          "lineno": 650,
          "line": "    \"\"\""
        },
        {
          "lineno": 651,
          "line": "    try:"
        },
        {
          "lineno": 652,
          "line": "        agents = await prisma.client.get_client().query_raw("
        },
        {
          "lineno": 653,
          "line": "            query=f\"\"\""
        },
        {
          "lineno": 654,
          "line": "            SELECT "
        },
        {
          "lineno": 655,
          "line": "                \"market\".\"Agents\".id, "
        },
        {
          "lineno": 656,
          "line": "                \"market\".\"Agents\".\"createdAt\", "
        },
        {
          "lineno": 657,
          "line": "                \"market\".\"Agents\".\"updatedAt\", "
        },
        {
          "lineno": 658,
          "line": "                \"market\".\"Agents\".version, "
        },
        {
          "lineno": 659,
          "line": "                \"market\".\"Agents\".name, "
        },
        {
          "lineno": 660,
          "line": "                LEFT(\"market\".\"Agents\".description, 500) AS description, "
        },
        {
          "lineno": 661,
          "line": "                \"market\".\"Agents\".author, "
        },
        {
          "lineno": 662,
          "line": "                \"market\".\"Agents\".keywords, "
        },
        {
          "lineno": 663,
          "line": "                \"market\".\"Agents\".categories, "
        },
        {
          "lineno": 664,
          "line": "                \"market\".\"Agents\".graph,"
        },
        {
          "lineno": 665,
          "line": "                \"market\".\"Agents\".\"submissionStatus\","
        },
        {
          "lineno": 666,
          "line": "                \"market\".\"Agents\".\"submissionDate\","
        },
        {
          "lineno": 667,
          "line": "                \"market\".\"Agents\".search::text AS search"
        },
        {
          "lineno": 668,
          "line": "            FROM \"market\".\"Agents\""
        },
        {
          "lineno": 669,
          "line": "            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\""
        },
        {
          "lineno": 670,
          "line": "            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')"
        },
        {
          "lineno": 671,
          "line": "                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'"
        },
        {
          "lineno": 672,
          "line": "            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC"
        },
        {
          "lineno": 673,
          "line": "            LIMIT {page_size} OFFSET {page_size * (page - 1)}"
        },
        {
          "lineno": 674,
          "line": "            \"\"\","
        },
        {
          "lineno": 675,
          "line": "            model=prisma.models.Agents,"
        },
        {
          "lineno": 676,
          "line": "        )"
        },
        {
          "lineno": 677,
          "line": "        return agents"
        },
        {
          "lineno": 678,
          "line": "    except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 679,
          "line": "        raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 680,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 681,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def get_not_featured_agents(\n    page: int = 1, page_size: int = 10\n) -> typing.List[prisma.models.Agents]:\n    \"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"\ntry:\n        agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )",
          "successors": [
            {
              "id": 3,
              "label": "return agents",
              "successors": []
            },
            {
              "id": 4,
              "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
              "successors": []
            },
            {
              "id": 5,
              "label": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_all_categories",
      "type": "function",
      "start_line": 684,
      "end_line": 706,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 684,
          "line": "async def get_all_categories() -> market.model.CategoriesResponse:"
        },
        {
          "lineno": 685,
          "line": "    \"\"\""
        },
        {
          "lineno": 686,
          "line": "    Retrieve all unique categories from the database."
        },
        {
          "lineno": 687,
          "line": ""
        },
        {
          "lineno": 688,
          "line": "    Returns:"
        },
        {
          "lineno": 689,
          "line": "        CategoriesResponse: A list of unique categories."
        },
        {
          "lineno": 690,
          "line": "    \"\"\""
        },
        {
          "lineno": 691,
          "line": "    try:"
        },
        {
          "lineno": 692,
          "line": "        agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])"
        },
        {
          "lineno": 693,
          "line": ""
        },
        {
          "lineno": 694,
          "line": "        # Aggregate categories on the Python side"
        },
        {
          "lineno": 695,
          "line": "        all_categories = set()"
        },
        {
          "lineno": 696,
          "line": "        for agent in agents:"
        },
        {
          "lineno": 697,
          "line": "            all_categories.update(agent.categories)"
        },
        {
          "lineno": 698,
          "line": ""
        },
        {
          "lineno": 699,
          "line": "        unique_categories = sorted(list(all_categories))"
        },
        {
          "lineno": 700,
          "line": ""
        },
        {
          "lineno": 701,
          "line": "        return market.model.CategoriesResponse(unique_categories=unique_categories)"
        },
        {
          "lineno": 702,
          "line": "    except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 703,
          "line": "        raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 704,
          "line": "    except Exception:"
        },
        {
          "lineno": 705,
          "line": "        # Return an empty list of categories in case of unexpected errors"
        },
        {
          "lineno": 706,
          "line": "        return market.model.CategoriesResponse(unique_categories=[])"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def get_all_categories() -> market.model.CategoriesResponse:\n    \"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"\ntry:",
          "successors": [
            {
              "id": 3,
              "label": "agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)",
              "successors": []
            },
            {
              "id": 4,
              "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
              "successors": []
            },
            {
              "id": 5,
              "label": "except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "create_agent_installed_event",
      "type": "function",
      "start_line": 709,
      "end_line": 725,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 709,
          "line": "async def create_agent_installed_event("
        },
        {
          "lineno": 710,
          "line": "    event_data: market.model.AgentInstalledFromMarketplaceEventData,"
        },
        {
          "lineno": 711,
          "line": "):"
        },
        {
          "lineno": 712,
          "line": "    try:"
        },
        {
          "lineno": 713,
          "line": "        await prisma.models.InstallTracker.prisma().create("
        },
        {
          "lineno": 714,
          "line": "            data={"
        },
        {
          "lineno": 715,
          "line": "                \"installedAgentId\": event_data.installed_agent_id,"
        },
        {
          "lineno": 716,
          "line": "                \"marketplaceAgentId\": event_data.marketplace_agent_id,"
        },
        {
          "lineno": 717,
          "line": "                \"installationLocation\": prisma.enums.InstallationLocation("
        },
        {
          "lineno": 718,
          "line": "                    event_data.installation_location.name"
        },
        {
          "lineno": 719,
          "line": "                ),"
        },
        {
          "lineno": 720,
          "line": "            }"
        },
        {
          "lineno": 721,
          "line": "        )"
        },
        {
          "lineno": 722,
          "line": "    except prisma.errors.PrismaError as e:"
        },
        {
          "lineno": 723,
          "line": "        raise AgentQueryError(f\"Database query failed: {str(e)}\")"
        },
        {
          "lineno": 724,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 725,
          "line": "        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def create_agent_installed_event(\n    event_data: market.model.AgentInstalledFromMarketplaceEventData,\n):\ntry:\n    await prisma.models.InstallTracker.prisma().create(\n        data={\n            \"installedAgentId\": event_data.installed_agent_id,\n            \"marketplaceAgentId\": event_data.marketplace_agent_id,\n            \"installationLocation\": prisma.enums.InstallationLocation(\n                event_data.installation_location.name\n            ),\n        }\n    )",
          "successors": [
            {
              "id": 3,
              "label": "except prisma.errors.PrismaError as e:\n    raise AgentQueryError(f\"Database query failed: {str(e)}\")",
              "successors": []
            },
            {
              "id": 4,
              "label": "except Exception as e:\n    raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "AgentQueryError",
      "type": "class",
      "start_line": 15,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 15,
          "line": "class AgentQueryError(Exception):"
        },
        {
          "lineno": 16,
          "line": "    \"\"\"Custom exception for agent query errors\"\"\""
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 18,
          "line": "    pass"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class AgentQueryError(Exception):\n    \"\"\"Custom exception for agent query errors\"\"\"\n\n    pass",
          "successors": []
        }
      ]
    },
    {
      "name": "TopAgentsDBResponse",
      "type": "class",
      "start_line": 21,
      "end_line": 37,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 21,
          "line": "class TopAgentsDBResponse(pydantic.BaseModel):"
        },
        {
          "lineno": 22,
          "line": "    \"\"\""
        },
        {
          "lineno": 23,
          "line": "    Represents a response containing a list of top agents."
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 25,
          "line": "    Attributes:"
        },
        {
          "lineno": 26,
          "line": "        analytics (list[AgentResponse]): The list of top agents."
        },
        {
          "lineno": 27,
          "line": "        total_count (int): The total count of agents."
        },
        {
          "lineno": 28,
          "line": "        page (int): The current page number."
        },
        {
          "lineno": 29,
          "line": "        page_size (int): The number of agents per page."
        },
        {
          "lineno": 30,
          "line": "        total_pages (int): The total number of pages."
        },
        {
          "lineno": 31,
          "line": "    \"\"\""
        },
        {
          "lineno": 32,
          "line": ""
        },
        {
          "lineno": 33,
          "line": "    analytics: list[prisma.models.AnalyticsTracker]"
        },
        {
          "lineno": 34,
          "line": "    total_count: int"
        },
        {
          "lineno": 35,
          "line": "    page: int"
        },
        {
          "lineno": 36,
          "line": "    page_size: int"
        },
        {
          "lineno": 37,
          "line": "    total_pages: int"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class TopAgentsDBResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\nanalytics: list[prisma.models.AnalyticsTracker]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
          "successors": []
        }
      ]
    },
    {
      "name": "FeaturedAgentResponse",
      "type": "class",
      "start_line": 40,
      "end_line": 56,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 40,
          "line": "class FeaturedAgentResponse(pydantic.BaseModel):"
        },
        {
          "lineno": 41,
          "line": "    \"\"\""
        },
        {
          "lineno": 42,
          "line": "    Represents a response containing a list of featured agents."
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 44,
          "line": "    Attributes:"
        },
        {
          "lineno": 45,
          "line": "        featured_agents (list[FeaturedAgent]): The list of featured agents."
        },
        {
          "lineno": 46,
          "line": "        total_count (int): The total count of featured agents."
        },
        {
          "lineno": 47,
          "line": "        page (int): The current page number."
        },
        {
          "lineno": 48,
          "line": "        page_size (int): The number of agents per page."
        },
        {
          "lineno": 49,
          "line": "        total_pages (int): The total number of pages."
        },
        {
          "lineno": 50,
          "line": "    \"\"\""
        },
        {
          "lineno": 51,
          "line": ""
        },
        {
          "lineno": 52,
          "line": "    featured_agents: list[prisma.models.FeaturedAgent]"
        },
        {
          "lineno": 53,
          "line": "    total_count: int"
        },
        {
          "lineno": 54,
          "line": "    page: int"
        },
        {
          "lineno": 55,
          "line": "    page_size: int"
        },
        {
          "lineno": 56,
          "line": "    total_pages: int"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    featured_agents: list[prisma.models.FeaturedAgent]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import datetime"
    },
    {
      "lineno": 2,
      "line": "import typing"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "import fuzzywuzzy.fuzz"
    },
    {
      "lineno": 5,
      "line": "import prisma.enums"
    },
    {
      "lineno": 6,
      "line": "import prisma.errors"
    },
    {
      "lineno": 7,
      "line": "import prisma.models"
    },
    {
      "lineno": 8,
      "line": "import prisma.types"
    },
    {
      "lineno": 9,
      "line": "import pydantic"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": "import market.model"
    },
    {
      "lineno": 12,
      "line": "import market.utils.extension_types"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 38,
      "line": ""
    },
    {
      "lineno": 39,
      "line": ""
    },
    {
      "lineno": 57,
      "line": ""
    },
    {
      "lineno": 58,
      "line": ""
    },
    {
      "lineno": 81,
      "line": ""
    },
    {
      "lineno": 82,
      "line": ""
    },
    {
      "lineno": 129,
      "line": ""
    },
    {
      "lineno": 130,
      "line": ""
    },
    {
      "lineno": 162,
      "line": ""
    },
    {
      "lineno": 163,
      "line": ""
    },
    {
      "lineno": 260,
      "line": ""
    },
    {
      "lineno": 261,
      "line": ""
    },
    {
      "lineno": 292,
      "line": ""
    },
    {
      "lineno": 293,
      "line": ""
    },
    {
      "lineno": 408,
      "line": ""
    },
    {
      "lineno": 409,
      "line": ""
    },
    {
      "lineno": 464,
      "line": ""
    },
    {
      "lineno": 465,
      "line": ""
    },
    {
      "lineno": 503,
      "line": ""
    },
    {
      "lineno": 504,
      "line": ""
    },
    {
      "lineno": 559,
      "line": ""
    },
    {
      "lineno": 560,
      "line": ""
    },
    {
      "lineno": 597,
      "line": ""
    },
    {
      "lineno": 598,
      "line": ""
    },
    {
      "lineno": 623,
      "line": ""
    },
    {
      "lineno": 624,
      "line": ""
    },
    {
      "lineno": 643,
      "line": ""
    },
    {
      "lineno": 644,
      "line": ""
    },
    {
      "lineno": 682,
      "line": ""
    },
    {
      "lineno": 683,
      "line": ""
    },
    {
      "lineno": 707,
      "line": ""
    },
    {
      "lineno": 708,
      "line": ""
    }
  ],
  "blocks": []
}