{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 153,
  "functions": [
    {
      "name": "launch_darkly_context",
      "type": "function",
      "start_line": 31,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 31,
          "line": "def launch_darkly_context():"
        },
        {
          "lineno": 32,
          "line": "    if settings.config.app_env != backend.util.settings.AppEnvironment.LOCAL:"
        },
        {
          "lineno": 33,
          "line": "        initialize_launchdarkly()"
        },
        {
          "lineno": 34,
          "line": "        try:"
        },
        {
          "lineno": 35,
          "line": "            yield"
        },
        {
          "lineno": 36,
          "line": "        finally:"
        },
        {
          "lineno": 37,
          "line": "            shutdown_launchdarkly()"
        },
        {
          "lineno": 38,
          "line": "    else:"
        },
        {
          "lineno": 39,
          "line": "        yield"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def launch_darkly_context():\nif settings.config.app_env != backend.util.settings.AppEnvironment.LOCAL:\n    initialize_launchdarkly()",
          "successors": [
            {
              "id": 3,
              "label": "try:\n    yield\nfinally:\n    shutdown_launchdarkly()",
              "successors": []
            },
            {
              "id": 4,
              "label": "else:\n    yield",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "lifespan_context",
      "type": "function",
      "start_line": 43,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 43,
          "line": "async def lifespan_context(app: fastapi.FastAPI):"
        },
        {
          "lineno": 44,
          "line": "    await backend.data.db.connect()"
        },
        {
          "lineno": 45,
          "line": "    await backend.data.block.initialize_blocks()"
        },
        {
          "lineno": 46,
          "line": "    await backend.data.user.migrate_and_encrypt_user_integrations()"
        },
        {
          "lineno": 47,
          "line": "    await backend.data.graph.fix_llm_provider_credentials()"
        },
        {
          "lineno": 48,
          "line": "    with launch_darkly_context():"
        },
        {
          "lineno": 49,
          "line": "        yield"
        },
        {
          "lineno": 50,
          "line": "    await backend.data.db.disconnect()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def lifespan_context(app: fastapi.FastAPI):\n    await backend.data.db.connect()\n    await backend.data.block.initialize_blocks()\n    await backend.data.user.migrate_and_encrypt_user_integrations()\n    await backend.data.graph.fix_llm_provider_credentials()\nwith launch_darkly_context():\n    yield",
          "successors": [
            {
              "id": 3,
              "label": "await backend.data.db.disconnect()",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "handle_internal_http_error",
      "type": "function",
      "start_line": 72,
      "end_line": 84,
      "functions": [
        {
          "name": "handler",
          "type": "function",
          "start_line": 73,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 73,
              "line": "    def handler(request: fastapi.Request, exc: Exception):"
            },
            {
              "lineno": 74,
              "line": "        if log_error:"
            },
            {
              "lineno": 75,
              "line": "            logger.exception(f\"{request.method} {request.url.path} failed: {exc}\")"
            },
            {
              "lineno": 76,
              "line": "        return fastapi.responses.JSONResponse("
            },
            {
              "lineno": 77,
              "line": "            content={"
            },
            {
              "lineno": 78,
              "line": "                \"message\": f\"{request.method} {request.url.path} failed\","
            },
            {
              "lineno": 79,
              "line": "                \"detail\": str(exc),"
            },
            {
              "lineno": 80,
              "line": "            },"
            },
            {
              "lineno": 81,
              "line": "            status_code=status_code,"
            },
            {
              "lineno": 82,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def handler(request: fastapi.Request, exc: Exception):\n        if log_error:",
              "successors": [
                {
                  "id": 2,
                  "label": "            logger.exception(f\"{request.method} {request.url.path} failed: {exc}\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "        return fastapi.responses.JSONResponse(\n            content={\n                \"message\": f\"{request.method} {request.url.path} failed\",\n                \"detail\": str(exc),\n            },\n            status_code=status_code,\n        )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 72,
          "line": "def handle_internal_http_error(status_code: int = 500, log_error: bool = True):"
        },
        {
          "lineno": 83,
          "line": ""
        },
        {
          "lineno": 84,
          "line": "    return handler"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def handle_internal_http_error(status_code: int = 500, log_error: bool = True):\n    return handler",
          "successors": []
        }
      ]
    },
    {
      "name": "health",
      "type": "function",
      "start_line": 99,
      "end_line": 100,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 99,
          "line": "async def health():"
        },
        {
          "lineno": 100,
          "line": "    return {\"status\": \"healthy\"}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def health():\n    return {\"status\": \"healthy\"}",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "AgentServer",
      "type": "class",
      "start_line": 103,
      "end_line": 153,
      "functions": [
        {
          "name": "run",
          "type": "function",
          "start_line": 104,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 104,
              "line": "    def run(self):"
            },
            {
              "lineno": 105,
              "line": "        server_app = starlette.middleware.cors.CORSMiddleware("
            },
            {
              "lineno": 106,
              "line": "            app=app,"
            },
            {
              "lineno": 107,
              "line": "            allow_origins=settings.config.backend_cors_allow_origins,"
            },
            {
              "lineno": 108,
              "line": "            allow_credentials=True,"
            },
            {
              "lineno": 109,
              "line": "            allow_methods=[\"*\"],  # Allows all methods"
            },
            {
              "lineno": 110,
              "line": "            allow_headers=[\"*\"],  # Allows all headers"
            },
            {
              "lineno": 111,
              "line": "        )"
            },
            {
              "lineno": 112,
              "line": "        uvicorn.run("
            },
            {
              "lineno": 113,
              "line": "            server_app,"
            },
            {
              "lineno": 114,
              "line": "            host=backend.util.settings.Config().agent_api_host,"
            },
            {
              "lineno": 115,
              "line": "            port=backend.util.settings.Config().agent_api_port,"
            },
            {
              "lineno": 116,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(self):\n        server_app = starlette.middleware.cors.CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],  # Allows all methods\n            allow_headers=[\"*\"],  # Allows all headers\n        )\n        uvicorn.run(\n            server_app,\n            host=backend.util.settings.Config().agent_api_host,\n            port=backend.util.settings.Config().agent_api_port,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "test_execute_graph",
          "type": "function",
          "start_line": 119,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 119,
              "line": "    async def test_execute_graph("
            },
            {
              "lineno": 120,
              "line": "        graph_id: str, node_input: dict[typing.Any, typing.Any], user_id: str"
            },
            {
              "lineno": 121,
              "line": "    ):"
            },
            {
              "lineno": 122,
              "line": "        return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def test_execute_graph(\n        graph_id: str, node_input: dict[typing.Any, typing.Any], user_id: str\n    ):\n        return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_create_graph",
          "type": "function",
          "start_line": 125,
          "end_line": 129,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 125,
              "line": "    async def test_create_graph("
            },
            {
              "lineno": 126,
              "line": "        create_graph: backend.server.routers.v1.CreateGraph,"
            },
            {
              "lineno": 127,
              "line": "        user_id: str,"
            },
            {
              "lineno": 128,
              "line": "    ):"
            },
            {
              "lineno": 129,
              "line": "        return await backend.server.routers.v1.create_new_graph(create_graph, user_id)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def test_create_graph(\n        create_graph: backend.server.routers.v1.CreateGraph,\n        user_id: str,\n    ):\n        return await backend.server.routers.v1.create_new_graph(create_graph, user_id)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_get_graph_run_status",
          "type": "function",
          "start_line": 132,
          "end_line": 138,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 132,
              "line": "    async def test_get_graph_run_status(graph_exec_id: str, user_id: str):"
            },
            {
              "lineno": 133,
              "line": "        execution = await backend.data.graph.get_execution("
            },
            {
              "lineno": 134,
              "line": "            user_id=user_id, execution_id=graph_exec_id"
            },
            {
              "lineno": 135,
              "line": "        )"
            },
            {
              "lineno": 136,
              "line": "        if not execution:"
            },
            {
              "lineno": 137,
              "line": "            raise ValueError(f\"Execution {graph_exec_id} not found\")"
            },
            {
              "lineno": 138,
              "line": "        return execution.status"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "async def test_get_graph_run_status(graph_exec_id: str, user_id: str):\n    execution = await backend.data.graph.get_execution(\n        user_id=user_id, execution_id=graph_exec_id\n    )\nif not execution:\n    raise ValueError(f\"Execution {graph_exec_id} not found\")",
              "successors": [
                {
                  "id": 3,
                  "label": "return execution.status",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "test_get_graph_run_node_execution_results",
          "type": "function",
          "start_line": 141,
          "end_line": 146,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 141,
              "line": "    async def test_get_graph_run_node_execution_results("
            },
            {
              "lineno": 142,
              "line": "        graph_id: str, graph_exec_id: str, user_id: str"
            },
            {
              "lineno": 143,
              "line": "    ):"
            },
            {
              "lineno": 144,
              "line": "        return await backend.server.routers.v1.get_graph_run_node_execution_results("
            },
            {
              "lineno": 145,
              "line": "            graph_id, graph_exec_id, user_id"
            },
            {
              "lineno": 146,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def test_get_graph_run_node_execution_results(\n        graph_id: str, graph_exec_id: str, user_id: str\n    ):\n        return await backend.server.routers.v1.get_graph_run_node_execution_results(\n            graph_id, graph_exec_id, user_id\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "test_delete_graph",
          "type": "function",
          "start_line": 149,
          "end_line": 150,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 149,
              "line": "    async def test_delete_graph(graph_id: str, user_id: str):"
            },
            {
              "lineno": 150,
              "line": "        return await backend.server.routers.v1.delete_graph(graph_id, user_id)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def test_delete_graph(graph_id: str, user_id: str):\n        return await backend.server.routers.v1.delete_graph(graph_id, user_id)",
              "successors": []
            }
          ]
        },
        {
          "name": "set_test_dependency_overrides",
          "type": "function",
          "start_line": 152,
          "end_line": 153,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 152,
              "line": "    def set_test_dependency_overrides(self, overrides: dict):"
            },
            {
              "lineno": 153,
              "line": "        app.dependency_overrides.update(overrides)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def set_test_dependency_overrides(self, overrides: dict):\n        app.dependency_overrides.update(overrides)",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 103,
          "line": "class AgentServer(backend.util.service.AppProcess):"
        },
        {
          "lineno": 117,
          "line": ""
        },
        {
          "lineno": 118,
          "line": "    @staticmethod"
        },
        {
          "lineno": 123,
          "line": ""
        },
        {
          "lineno": 124,
          "line": "    @staticmethod"
        },
        {
          "lineno": 130,
          "line": ""
        },
        {
          "lineno": 131,
          "line": "    @staticmethod"
        },
        {
          "lineno": 139,
          "line": ""
        },
        {
          "lineno": 140,
          "line": "    @staticmethod"
        },
        {
          "lineno": 147,
          "line": ""
        },
        {
          "lineno": 148,
          "line": "    @staticmethod"
        },
        {
          "lineno": 151,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class AgentServer(backend.util.service.AppProcess):\n    @staticmethod",
          "successors": [
            {
              "id": 3,
              "label": "    @staticmethod\n    @staticmethod",
              "successors": [
                {
                  "id": 5,
                  "label": "    @staticmethod\n    @staticmethod",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import contextlib"
    },
    {
      "lineno": 2,
      "line": "import logging"
    },
    {
      "lineno": 3,
      "line": "import typing"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "import fastapi"
    },
    {
      "lineno": 6,
      "line": "import fastapi.responses"
    },
    {
      "lineno": 7,
      "line": "import starlette.middleware.cors"
    },
    {
      "lineno": 8,
      "line": "import uvicorn"
    },
    {
      "lineno": 9,
      "line": "from autogpt_libs.feature_flag.client import ("
    },
    {
      "lineno": 10,
      "line": "    initialize_launchdarkly,"
    },
    {
      "lineno": 11,
      "line": "    shutdown_launchdarkly,"
    },
    {
      "lineno": 12,
      "line": ")"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": "import backend.data.block"
    },
    {
      "lineno": 15,
      "line": "import backend.data.db"
    },
    {
      "lineno": 16,
      "line": "import backend.data.graph"
    },
    {
      "lineno": 17,
      "line": "import backend.data.user"
    },
    {
      "lineno": 18,
      "line": "import backend.server.routers.v1"
    },
    {
      "lineno": 19,
      "line": "import backend.server.v2.library.routes"
    },
    {
      "lineno": 20,
      "line": "import backend.server.v2.store.routes"
    },
    {
      "lineno": 21,
      "line": "import backend.util.service"
    },
    {
      "lineno": 22,
      "line": "import backend.util.settings"
    },
    {
      "lineno": 23,
      "line": ""
    },
    {
      "lineno": 24,
      "line": "settings = backend.util.settings.Settings()"
    },
    {
      "lineno": 25,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 27,
      "line": "logging.getLogger(\"autogpt_libs\").setLevel(logging.INFO)"
    },
    {
      "lineno": 28,
      "line": ""
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": "@contextlib.contextmanager"
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 42,
      "line": "@contextlib.asynccontextmanager"
    },
    {
      "lineno": 51,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 53,
      "line": "docs_url = ("
    },
    {
      "lineno": 54,
      "line": "    \"/docs\""
    },
    {
      "lineno": 55,
      "line": "    if settings.config.app_env == backend.util.settings.AppEnvironment.LOCAL"
    },
    {
      "lineno": 56,
      "line": "    else None"
    },
    {
      "lineno": 57,
      "line": ")"
    },
    {
      "lineno": 58,
      "line": ""
    },
    {
      "lineno": 59,
      "line": "app = fastapi.FastAPI("
    },
    {
      "lineno": 60,
      "line": "    title=\"AutoGPT Agent Server\","
    },
    {
      "lineno": 61,
      "line": "    description=("
    },
    {
      "lineno": 62,
      "line": "        \"This server is used to execute agents that are created by the \""
    },
    {
      "lineno": 63,
      "line": "        \"AutoGPT system.\""
    },
    {
      "lineno": 64,
      "line": "    ),"
    },
    {
      "lineno": 65,
      "line": "    summary=\"AutoGPT Agent Server\","
    },
    {
      "lineno": 66,
      "line": "    version=\"0.1\","
    },
    {
      "lineno": 67,
      "line": "    lifespan=lifespan_context,"
    },
    {
      "lineno": 68,
      "line": "    docs_url=docs_url,"
    },
    {
      "lineno": 69,
      "line": ")"
    },
    {
      "lineno": 70,
      "line": ""
    },
    {
      "lineno": 71,
      "line": ""
    },
    {
      "lineno": 85,
      "line": ""
    },
    {
      "lineno": 86,
      "line": ""
    },
    {
      "lineno": 87,
      "line": "app.add_exception_handler(ValueError, handle_internal_http_error(400))"
    },
    {
      "lineno": 88,
      "line": "app.add_exception_handler(Exception, handle_internal_http_error(500))"
    },
    {
      "lineno": 89,
      "line": "app.include_router(backend.server.routers.v1.v1_router, tags=[\"v1\"], prefix=\"/api\")"
    },
    {
      "lineno": 90,
      "line": "app.include_router("
    },
    {
      "lineno": 91,
      "line": "    backend.server.v2.store.routes.router, tags=[\"v2\"], prefix=\"/api/store\""
    },
    {
      "lineno": 92,
      "line": ")"
    },
    {
      "lineno": 93,
      "line": "app.include_router("
    },
    {
      "lineno": 94,
      "line": "    backend.server.v2.library.routes.router, tags=[\"v2\"], prefix=\"/api/library\""
    },
    {
      "lineno": 95,
      "line": ")"
    },
    {
      "lineno": 96,
      "line": ""
    },
    {
      "lineno": 97,
      "line": ""
    },
    {
      "lineno": 98,
      "line": "@app.get(path=\"/health\", tags=[\"health\"], dependencies=[])"
    },
    {
      "lineno": 101,
      "line": ""
    },
    {
      "lineno": 102,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import contextlib\nimport logging\nimport typing\n\nimport fastapi\nimport fastapi.responses\nimport starlette.middleware.cors\nimport uvicorn\nfrom autogpt_libs.feature_flag.client import (\n    initialize_launchdarkly,\n    shutdown_launchdarkly,\n)\n\nimport backend.data.block\nimport backend.data.db\nimport backend.data.graph\nimport backend.data.user\nimport backend.server.routers.v1\nimport backend.server.v2.library.routes\nimport backend.server.v2.store.routes\nimport backend.util.service\nimport backend.util.settings\n\nsettings = backend.util.settings.Settings()\nlogger = logging.getLogger(__name__)\n\nlogging.getLogger(\"autogpt_libs\").setLevel(logging.INFO)\n",
      "successors": [
        {
          "id": 2,
          "label": "@contextlib.contextmanager\n",
          "successors": []
        },
        {
          "id": 3,
          "label": "@contextlib.asynccontextmanager\n",
          "successors": []
        },
        {
          "id": 4,
          "label": "docs_url = (\n    \"/docs\"\n    if settings.config.app_env == backend.util.settings.AppEnvironment.LOCAL\n    else None\n)\napp = fastapi.FastAPI(\n    title=\"AutoGPT Agent Server\",\n    description=(\n        \"This server is used to execute agents that are created by the \"\n        \"AutoGPT system.\"\n    ),\n    summary=\"AutoGPT Agent Server\",\n    version=\"0.1\",\n    lifespan=lifespan_context,\n    docs_url=docs_url,\n)",
          "successors": [
            {
              "id": 6,
              "label": "app.add_exception_handler(ValueError, handle_internal_http_error(400))\napp.add_exception_handler(Exception, handle_internal_http_error(500))\napp.include_router(backend.server.routers.v1.v1_router, tags=[\"v1\"], prefix=\"/api\")\napp.include_router(\n    backend.server.v2.store.routes.router, tags=[\"v2\"], prefix=\"/api/store\"\n)\napp.include_router(\n    backend.server.v2.library.routes.router, tags=[\"v2\"], prefix=\"/api/library\"\n)\n@app.get(path=\"/health\", tags=[\"health\"], dependencies=[])\n",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}