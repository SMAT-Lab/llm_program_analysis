{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 11,
  "functions": [
    {
      "name": "test_available_blocks",
      "type": "function",
      "start_line": 10,
      "end_line": 11,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "def test_available_blocks(block: Type[Block]):"
        },
        {
          "lineno": 11,
          "line": "    execute_block_test(block())"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_available_blocks(block: Type[Block]):\n    execute_block_test(block())",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from typing import Type"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import pytest"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from backend.data.block import Block, get_blocks"
    },
    {
      "lineno": 6,
      "line": "from backend.util.test import execute_block_test"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "@pytest.mark.parametrize(\"block\", get_blocks().values(), ids=lambda b: b.name)"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from typing import Type\n\nimport pytest\n\nfrom backend.data.block import Block, get_blocks\nfrom backend.util.test import execute_block_test\n@pytest.mark.parametrize(\"block\", get_blocks().values(), ids=lambda b: b.name)",
      "successors": []
    }
  ]
}