{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 167,
  "functions": [
    {
      "name": "get_client",
      "type": "function",
      "start_line": 22,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 22,
          "line": "def get_client() -> LDClient:"
        },
        {
          "lineno": 23,
          "line": "    \"\"\"Get the LaunchDarkly client singleton.\"\"\""
        },
        {
          "lineno": 24,
          "line": "    return ldclient.get()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_client() -> LDClient:\n    \"\"\"Get the LaunchDarkly client singleton.\"\"\"\n    return ldclient.get()",
          "successors": []
        }
      ]
    },
    {
      "name": "initialize_launchdarkly",
      "type": "function",
      "start_line": 27,
      "end_line": 43,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 27,
          "line": "def initialize_launchdarkly() -> None:"
        },
        {
          "lineno": 28,
          "line": "    sdk_key = SETTINGS.launch_darkly_sdk_key"
        },
        {
          "lineno": 29,
          "line": "    logger.debug("
        },
        {
          "lineno": 30,
          "line": "        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\""
        },
        {
          "lineno": 31,
          "line": "    )"
        },
        {
          "lineno": 32,
          "line": ""
        },
        {
          "lineno": 33,
          "line": "    if not sdk_key:"
        },
        {
          "lineno": 34,
          "line": "        logger.warning(\"LaunchDarkly SDK key not configured\")"
        },
        {
          "lineno": 35,
          "line": "        return"
        },
        {
          "lineno": 36,
          "line": ""
        },
        {
          "lineno": 37,
          "line": "    config = Config(sdk_key)"
        },
        {
          "lineno": 38,
          "line": "    ldclient.set_config(config)"
        },
        {
          "lineno": 39,
          "line": ""
        },
        {
          "lineno": 40,
          "line": "    if ldclient.get().is_initialized():"
        },
        {
          "lineno": 41,
          "line": "        logger.info(\"LaunchDarkly client initialized successfully\")"
        },
        {
          "lineno": 42,
          "line": "    else:"
        },
        {
          "lineno": 43,
          "line": "        logger.error(\"LaunchDarkly client failed to initialize\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def initialize_launchdarkly() -> None:\n    sdk_key = SETTINGS.launch_darkly_sdk_key\n    logger.debug(\n        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )\n",
          "successors": [
            {
              "id": 2,
              "label": "if not sdk_key:\n        logger.warning(\"LaunchDarkly SDK key not configured\")\n        return\n",
              "successors": []
            },
            {
              "id": 3,
              "label": "config = Config(sdk_key)\n    ldclient.set_config(config)\n\nif ldclient.get().is_initialized():\n        logger.info(\"LaunchDarkly client initialized successfully\")\n    else:\n        logger.error(\"LaunchDarkly client failed to initialize\")\n",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "shutdown_launchdarkly",
      "type": "function",
      "start_line": 46,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 46,
          "line": "def shutdown_launchdarkly() -> None:"
        },
        {
          "lineno": 47,
          "line": "    \"\"\"Shutdown the LaunchDarkly client.\"\"\""
        },
        {
          "lineno": 48,
          "line": "    if ldclient.get().is_initialized():"
        },
        {
          "lineno": 49,
          "line": "        ldclient.get().close()"
        },
        {
          "lineno": 50,
          "line": "        logger.info(\"LaunchDarkly client closed successfully\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def shutdown_launchdarkly() -> None:\n    \"\"\"Shutdown the LaunchDarkly client.\"\"\"\nif ldclient.get().is_initialized():\n        ldclient.get().close()\n        logger.info(\"LaunchDarkly client closed successfully\")",
          "successors": []
        }
      ]
    },
    {
      "name": "create_context",
      "type": "function",
      "start_line": 53,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 53,
          "line": "def create_context("
        },
        {
          "lineno": 54,
          "line": "    user_id: str, additional_attributes: Optional[Dict[str, Any]] = None"
        },
        {
          "lineno": 55,
          "line": ") -> Context:"
        },
        {
          "lineno": 56,
          "line": "    \"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\""
        },
        {
          "lineno": 57,
          "line": "    builder = Context.builder(str(user_id)).kind(\"user\")"
        },
        {
          "lineno": 58,
          "line": "    if additional_attributes:"
        },
        {
          "lineno": 59,
          "line": "        for key, value in additional_attributes.items():"
        },
        {
          "lineno": 60,
          "line": "            builder.set(key, value)"
        },
        {
          "lineno": 61,
          "line": "    return builder.build()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def create_context(\n    user_id: str, additional_attributes: Optional[Dict[str, Any]] = None\n) -> Context:\n    \"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\n    builder = Context.builder(str(user_id)).kind(\"user\")",
          "successors": [
            {
              "id": 2,
              "label": "if additional_attributes:\n    for key, value in additional_attributes.items():\n        builder.set(key, value)\nreturn builder.build()",
              "successors": []
            },
            {
              "id": 4,
              "label": "return builder.build()",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "feature_flag",
      "type": "function",
      "start_line": 64,
      "end_line": 133,
      "functions": [
        {
          "name": "decorator",
          "type": "function",
          "start_line": 74,
          "end_line": 133,
          "functions": [
            {
              "name": "async_wrapper",
              "type": "function",
              "start_line": 78,
              "end_line": 102,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 78,
                  "line": "        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:"
                },
                {
                  "lineno": 79,
                  "line": "            try:"
                },
                {
                  "lineno": 80,
                  "line": "                user_id = kwargs.get(\"user_id\")"
                },
                {
                  "lineno": 81,
                  "line": "                if not user_id:"
                },
                {
                  "lineno": 82,
                  "line": "                    raise ValueError(\"user_id is required\")"
                },
                {
                  "lineno": 83,
                  "line": ""
                },
                {
                  "lineno": 84,
                  "line": "                if not get_client().is_initialized():"
                },
                {
                  "lineno": 85,
                  "line": "                    logger.warning("
                },
                {
                  "lineno": 86,
                  "line": "                        f\"LaunchDarkly not initialized, using default={default}\""
                },
                {
                  "lineno": 87,
                  "line": "                    )"
                },
                {
                  "lineno": 88,
                  "line": "                    is_enabled = default"
                },
                {
                  "lineno": 89,
                  "line": "                else:"
                },
                {
                  "lineno": 90,
                  "line": "                    context = create_context(str(user_id))"
                },
                {
                  "lineno": 91,
                  "line": "                    is_enabled = get_client().variation(flag_key, context, default)"
                },
                {
                  "lineno": 92,
                  "line": ""
                },
                {
                  "lineno": 93,
                  "line": "                if not is_enabled:"
                },
                {
                  "lineno": 94,
                  "line": "                    raise HTTPException(status_code=404, detail=\"Feature not available\")"
                },
                {
                  "lineno": 95,
                  "line": ""
                },
                {
                  "lineno": 96,
                  "line": "                result = func(*args, **kwargs)"
                },
                {
                  "lineno": 97,
                  "line": "                if asyncio.iscoroutine(result):"
                },
                {
                  "lineno": 98,
                  "line": "                    return await result"
                },
                {
                  "lineno": 99,
                  "line": "                return cast(T, result)"
                },
                {
                  "lineno": 100,
                  "line": "            except Exception as e:"
                },
                {
                  "lineno": 101,
                  "line": "                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")"
                },
                {
                  "lineno": 102,
                  "line": "                raise"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "label": "async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n    try:\n        user_id = kwargs.get(\"user_id\")\nif not user_id:\n    raise ValueError(\"user_id is required\")",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if not get_client().is_initialized():\n    logger.warning(\n        f\"LaunchDarkly not initialized, using default={default}\"\n    )\n    is_enabled = default\nif not is_enabled:\n    raise HTTPException(status_code=404, detail=\"Feature not available\")",
                      "successors": [
                        {
                          "id": 6,
                          "label": "result = func(*args, **kwargs)\nif asyncio.iscoroutine(result):\n    return await result\nreturn cast(T, result)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "context = create_context(str(user_id))\nis_enabled = get_client().variation(flag_key, context, default)\nif not is_enabled:\n    raise HTTPException(status_code=404, detail=\"Feature not available\")",
                      "successors": [
                        {
                          "id": 6,
                          "label": "result = func(*args, **kwargs)\nif asyncio.iscoroutine(result):\n    return await result\nreturn cast(T, result)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "name": "sync_wrapper",
              "type": "function",
              "start_line": 105,
              "end_line": 126,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 105,
                  "line": "        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:"
                },
                {
                  "lineno": 106,
                  "line": "            try:"
                },
                {
                  "lineno": 107,
                  "line": "                user_id = kwargs.get(\"user_id\")"
                },
                {
                  "lineno": 108,
                  "line": "                if not user_id:"
                },
                {
                  "lineno": 109,
                  "line": "                    raise ValueError(\"user_id is required\")"
                },
                {
                  "lineno": 110,
                  "line": ""
                },
                {
                  "lineno": 111,
                  "line": "                if not get_client().is_initialized():"
                },
                {
                  "lineno": 112,
                  "line": "                    logger.warning("
                },
                {
                  "lineno": 113,
                  "line": "                        f\"LaunchDarkly not initialized, using default={default}\""
                },
                {
                  "lineno": 114,
                  "line": "                    )"
                },
                {
                  "lineno": 115,
                  "line": "                    is_enabled = default"
                },
                {
                  "lineno": 116,
                  "line": "                else:"
                },
                {
                  "lineno": 117,
                  "line": "                    context = create_context(str(user_id))"
                },
                {
                  "lineno": 118,
                  "line": "                    is_enabled = get_client().variation(flag_key, context, default)"
                },
                {
                  "lineno": 119,
                  "line": ""
                },
                {
                  "lineno": 120,
                  "line": "                if not is_enabled:"
                },
                {
                  "lineno": 121,
                  "line": "                    raise HTTPException(status_code=404, detail=\"Feature not available\")"
                },
                {
                  "lineno": 122,
                  "line": ""
                },
                {
                  "lineno": 123,
                  "line": "                return cast(T, func(*args, **kwargs))"
                },
                {
                  "lineno": 124,
                  "line": "            except Exception as e:"
                },
                {
                  "lineno": 125,
                  "line": "                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")"
                },
                {
                  "lineno": 126,
                  "line": "                raise"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "label": "        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:",
                  "successors": [
                    {
                      "id": 2,
                      "label": "            try:\n                user_id = kwargs.get(\"user_id\")",
                      "successors": [
                        {
                          "id": 3,
                          "label": "                if not user_id:\n                    raise ValueError(\"user_id is required\")",
                          "successors": []
                        },
                        {
                          "id": 4,
                          "label": "                if not get_client().is_initialized():",
                          "successors": [
                            {
                              "id": 5,
                              "label": "                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "label": "                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "label": "                return cast(T, func(*args, **kwargs))",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 74,
              "line": "    def decorator("
            },
            {
              "lineno": 75,
              "line": "        func: Callable[P, Union[T, Awaitable[T]]],"
            },
            {
              "lineno": 76,
              "line": "    ) -> Callable[P, Union[T, Awaitable[T]]]:"
            },
            {
              "lineno": 77,
              "line": "        @wraps(func)"
            },
            {
              "lineno": 103,
              "line": ""
            },
            {
              "lineno": 104,
              "line": "        @wraps(func)"
            },
            {
              "lineno": 127,
              "line": ""
            },
            {
              "lineno": 128,
              "line": "        return cast("
            },
            {
              "lineno": 129,
              "line": "            Callable[P, Union[T, Awaitable[T]]],"
            },
            {
              "lineno": 130,
              "line": "            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,"
            },
            {
              "lineno": 131,
              "line": "        )"
            },
            {
              "lineno": 132,
              "line": ""
            },
            {
              "lineno": 133,
              "line": "    return decorator"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def decorator(\n        func: Callable[P, Union[T, Awaitable[T]]],\n    ) -> Callable[P, Union[T, Awaitable[T]]]:\n        @wraps(func)\n\n        @wraps(func)\n\n        return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )\n\n    return decorator",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 64,
          "line": "def feature_flag("
        },
        {
          "lineno": 65,
          "line": "    flag_key: str,"
        },
        {
          "lineno": 66,
          "line": "    default: bool = False,"
        },
        {
          "lineno": 67,
          "line": ") -> Callable["
        },
        {
          "lineno": 68,
          "line": "    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]"
        },
        {
          "lineno": 69,
          "line": "]:"
        },
        {
          "lineno": 70,
          "line": "    \"\"\""
        },
        {
          "lineno": 71,
          "line": "    Decorator for feature flag protected endpoints."
        },
        {
          "lineno": 72,
          "line": "    \"\"\""
        },
        {
          "lineno": 73,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def feature_flag(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"\n",
          "successors": []
        }
      ]
    },
    {
      "name": "percentage_rollout",
      "type": "function",
      "start_line": 136,
      "end_line": 143,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 136,
          "line": "def percentage_rollout("
        },
        {
          "lineno": 137,
          "line": "    flag_key: str,"
        },
        {
          "lineno": 138,
          "line": "    default: bool = False,"
        },
        {
          "lineno": 139,
          "line": ") -> Callable["
        },
        {
          "lineno": 140,
          "line": "    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]"
        },
        {
          "lineno": 141,
          "line": "]:"
        },
        {
          "lineno": 142,
          "line": "    \"\"\"Decorator for percentage-based rollouts.\"\"\""
        },
        {
          "lineno": 143,
          "line": "    return feature_flag(flag_key, default)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def percentage_rollout(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"Decorator for percentage-based rollouts.\"\"\"\n    return feature_flag(flag_key, default)",
          "successors": []
        }
      ]
    },
    {
      "name": "beta_feature",
      "type": "function",
      "start_line": 146,
      "end_line": 154,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 146,
          "line": "def beta_feature("
        },
        {
          "lineno": 147,
          "line": "    flag_key: Optional[str] = None,"
        },
        {
          "lineno": 148,
          "line": "    unauthorized_response: Any = {\"message\": \"Not available in beta\"},"
        },
        {
          "lineno": 149,
          "line": ") -> Callable["
        },
        {
          "lineno": 150,
          "line": "    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]"
        },
        {
          "lineno": 151,
          "line": "]:"
        },
        {
          "lineno": 152,
          "line": "    \"\"\"Decorator for beta features.\"\"\""
        },
        {
          "lineno": 153,
          "line": "    actual_key = f\"beta-{flag_key}\" if flag_key else \"beta\""
        },
        {
          "lineno": 154,
          "line": "    return feature_flag(actual_key, False)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def beta_feature(\n    flag_key: Optional[str] = None,\n    unauthorized_response: Any = {\"message\": \"Not available in beta\"},\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"Decorator for beta features.\"\"\"\nactual_key = f\"beta-{flag_key}\" if flag_key else \"beta\"\n    return feature_flag(actual_key, False)",
          "successors": []
        }
      ]
    },
    {
      "name": "mock_flag_variation",
      "type": "function",
      "start_line": 158,
      "end_line": 167,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 158,
          "line": "def mock_flag_variation(flag_key: str, return_value: Any):"
        },
        {
          "lineno": 159,
          "line": "    \"\"\"Context manager for testing feature flags.\"\"\""
        },
        {
          "lineno": 160,
          "line": "    original_variation = get_client().variation"
        },
        {
          "lineno": 161,
          "line": "    get_client().variation = lambda key, context, default: ("
        },
        {
          "lineno": 162,
          "line": "        return_value if key == flag_key else original_variation(key, context, default)"
        },
        {
          "lineno": 163,
          "line": "    )"
        },
        {
          "lineno": 164,
          "line": "    try:"
        },
        {
          "lineno": 165,
          "line": "        yield"
        },
        {
          "lineno": 166,
          "line": "    finally:"
        },
        {
          "lineno": 167,
          "line": "        get_client().variation = original_variation"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def mock_flag_variation(flag_key: str, return_value: Any):\n    \"\"\"Context manager for testing feature flags.\"\"\"\n    original_variation = get_client().variation\nget_client().variation = lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )",
          "successors": [
            {
              "id": 3,
              "label": "try:\n        yield\nfinally:\n        get_client().variation = original_variation",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import asyncio"
    },
    {
      "lineno": 2,
      "line": "import contextlib"
    },
    {
      "lineno": 3,
      "line": "import logging"
    },
    {
      "lineno": 4,
      "line": "from functools import wraps"
    },
    {
      "lineno": 5,
      "line": "from typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "import ldclient"
    },
    {
      "lineno": 8,
      "line": "from fastapi import HTTPException"
    },
    {
      "lineno": 9,
      "line": "from ldclient import Context, LDClient"
    },
    {
      "lineno": 10,
      "line": "from ldclient.config import Config"
    },
    {
      "lineno": 11,
      "line": "from typing_extensions import ParamSpec"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "from .config import SETTINGS"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 16,
      "line": "logging.basicConfig(level=logging.DEBUG)"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": "P = ParamSpec(\"P\")"
    },
    {
      "lineno": 19,
      "line": "T = TypeVar(\"T\")"
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 25,
      "line": ""
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 44,
      "line": ""
    },
    {
      "lineno": 45,
      "line": ""
    },
    {
      "lineno": 51,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 62,
      "line": ""
    },
    {
      "lineno": 63,
      "line": ""
    },
    {
      "lineno": 134,
      "line": ""
    },
    {
      "lineno": 135,
      "line": ""
    },
    {
      "lineno": 144,
      "line": ""
    },
    {
      "lineno": 145,
      "line": ""
    },
    {
      "lineno": 155,
      "line": ""
    },
    {
      "lineno": 156,
      "line": ""
    },
    {
      "lineno": 157,
      "line": "@contextlib.contextmanager"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import asyncio\nimport contextlib\nimport logging\nfrom functools import wraps\nfrom typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast\n\nimport ldclient\nfrom fastapi import HTTPException\nfrom ldclient import Context, LDClient\nfrom ldclient.config import Config\nfrom typing_extensions import ParamSpec\n\nfrom .config import SETTINGS\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.DEBUG)\n\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n@contextlib.contextmanager",
      "successors": []
    }
  ]
}