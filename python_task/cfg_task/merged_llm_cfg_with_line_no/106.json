{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 190,
  "functions": [],
  "classes": [
    {
      "name": "ProgrammingLanguage",
      "type": "class",
      "start_line": 31,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 31,
          "line": "class ProgrammingLanguage(Enum):"
        },
        {
          "lineno": 32,
          "line": "    PYTHON = \"python\""
        },
        {
          "lineno": 33,
          "line": "    JAVASCRIPT = \"js\""
        },
        {
          "lineno": 34,
          "line": "    BASH = \"bash\""
        },
        {
          "lineno": 35,
          "line": "    R = \"r\""
        },
        {
          "lineno": 36,
          "line": "    JAVA = \"java\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ProgrammingLanguage(Enum):\n    PYTHON = \"python\"\n    JAVASCRIPT = \"js\"\n    BASH = \"bash\"\n    R = \"r\"\n    JAVA = \"java\"",
          "successors": []
        }
      ]
    },
    {
      "name": "CodeExecutionBlock",
      "type": "class",
      "start_line": 39,
      "end_line": 190,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 97,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 97,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 98,
              "line": "        super().__init__("
            },
            {
              "lineno": 99,
              "line": "            id=\"0b02b072-abe7-11ef-8372-fb5d162dd712\","
            },
            {
              "lineno": 100,
              "line": "            description=\"Executes code in an isolated sandbox environment with internet access.\","
            },
            {
              "lineno": 101,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 102,
              "line": "            input_schema=CodeExecutionBlock.Input,"
            },
            {
              "lineno": 103,
              "line": "            output_schema=CodeExecutionBlock.Output,"
            },
            {
              "lineno": 104,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 105,
              "line": "            test_input={"
            },
            {
              "lineno": 106,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 107,
              "line": "                \"code\": \"print('Hello World')\","
            },
            {
              "lineno": 108,
              "line": "                \"language\": ProgrammingLanguage.PYTHON.value,"
            },
            {
              "lineno": 109,
              "line": "                \"setup_commands\": [],"
            },
            {
              "lineno": 110,
              "line": "                \"timeout\": 300,"
            },
            {
              "lineno": 111,
              "line": "                \"template_id\": \"\","
            },
            {
              "lineno": 112,
              "line": "            },"
            },
            {
              "lineno": 113,
              "line": "            test_output=["
            },
            {
              "lineno": 114,
              "line": "                (\"response\", \"Hello World\"),"
            },
            {
              "lineno": 115,
              "line": "                (\"stdout_logs\", \"Hello World\\n\"),"
            },
            {
              "lineno": 116,
              "line": "            ],"
            },
            {
              "lineno": 117,
              "line": "            test_mock={"
            },
            {
              "lineno": 118,
              "line": "                \"execute_code\": lambda code, language, setup_commands, timeout, api_key, template_id: ("
            },
            {
              "lineno": 119,
              "line": "                    \"Hello World\","
            },
            {
              "lineno": 120,
              "line": "                    \"Hello World\\n\","
            },
            {
              "lineno": 121,
              "line": "                    \"\","
            },
            {
              "lineno": 122,
              "line": "                ),"
            },
            {
              "lineno": 123,
              "line": "            },"
            },
            {
              "lineno": 124,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"0b02b072-abe7-11ef-8372-fb5d162dd712\",\n            description=\"Executes code in an isolated sandbox environment with internet access.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=CodeExecutionBlock.Input,\n            output_schema=CodeExecutionBlock.Output,\n            test_credentials=TEST_CREDENTIALS,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"code\": \"print('Hello World')\",\n                \"language\": ProgrammingLanguage.PYTHON.value,\n                \"setup_commands\": [],\n                \"timeout\": 300,\n                \"template_id\": \"\",\n            },\n            test_output=[\n                (\"response\", \"Hello World\"),\n                (\"stdout_logs\", \"Hello World\\n\"),\n            ],\n            test_mock={\n                \"execute_code\": lambda code, language, setup_commands, timeout, api_key, template_id: (\n                    \"Hello World\",\n                    \"Hello World\\n\",\n                    \"\",\n                ),\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "execute_code",
          "type": "function",
          "start_line": 126,
          "end_line": 168,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 126,
              "line": "    def execute_code("
            },
            {
              "lineno": 127,
              "line": "        self,"
            },
            {
              "lineno": 128,
              "line": "        code: str,"
            },
            {
              "lineno": 129,
              "line": "        language: ProgrammingLanguage,"
            },
            {
              "lineno": 130,
              "line": "        setup_commands: list[str],"
            },
            {
              "lineno": 131,
              "line": "        timeout: int,"
            },
            {
              "lineno": 132,
              "line": "        api_key: str,"
            },
            {
              "lineno": 133,
              "line": "        template_id: str,"
            },
            {
              "lineno": 134,
              "line": "    ):"
            },
            {
              "lineno": 135,
              "line": "        try:"
            },
            {
              "lineno": 136,
              "line": "            sandbox = None"
            },
            {
              "lineno": 137,
              "line": "            if template_id:"
            },
            {
              "lineno": 138,
              "line": "                sandbox = Sandbox("
            },
            {
              "lineno": 139,
              "line": "                    template=template_id, api_key=api_key, timeout=timeout"
            },
            {
              "lineno": 140,
              "line": "                )"
            },
            {
              "lineno": 141,
              "line": "            else:"
            },
            {
              "lineno": 142,
              "line": "                sandbox = Sandbox(api_key=api_key, timeout=timeout)"
            },
            {
              "lineno": 143,
              "line": ""
            },
            {
              "lineno": 144,
              "line": "            if not sandbox:"
            },
            {
              "lineno": 145,
              "line": "                raise Exception(\"Sandbox not created\")"
            },
            {
              "lineno": 146,
              "line": ""
            },
            {
              "lineno": 147,
              "line": "            # Running setup commands"
            },
            {
              "lineno": 148,
              "line": "            for cmd in setup_commands:"
            },
            {
              "lineno": 149,
              "line": "                sandbox.commands.run(cmd)"
            },
            {
              "lineno": 150,
              "line": ""
            },
            {
              "lineno": 151,
              "line": "            # Executing the code"
            },
            {
              "lineno": 152,
              "line": "            execution = sandbox.run_code("
            },
            {
              "lineno": 153,
              "line": "                code,"
            },
            {
              "lineno": 154,
              "line": "                language=language.value,"
            },
            {
              "lineno": 155,
              "line": "                on_error=lambda e: sandbox.kill(),  # Kill the sandbox if there is an error"
            },
            {
              "lineno": 156,
              "line": "            )"
            },
            {
              "lineno": 157,
              "line": ""
            },
            {
              "lineno": 158,
              "line": "            if execution.error:"
            },
            {
              "lineno": 159,
              "line": "                raise Exception(execution.error)"
            },
            {
              "lineno": 160,
              "line": ""
            },
            {
              "lineno": 161,
              "line": "            response = execution.text"
            },
            {
              "lineno": 162,
              "line": "            stdout_logs = \"\".join(execution.logs.stdout)"
            },
            {
              "lineno": 163,
              "line": "            stderr_logs = \"\".join(execution.logs.stderr)"
            },
            {
              "lineno": 164,
              "line": ""
            },
            {
              "lineno": 165,
              "line": "            return response, stdout_logs, stderr_logs"
            },
            {
              "lineno": 166,
              "line": ""
            },
            {
              "lineno": 167,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 168,
              "line": "            raise e"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "try:\nsandbox = None",
              "successors": [
                {
                  "id": 3,
                  "label": "if template_id: sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)\nelse: sandbox = Sandbox(api_key=api_key, timeout=timeout)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if not sandbox: raise Exception(\"Sandbox not created\")",
                      "successors": [
                        {
                          "id": 6,
                          "label": "for cmd in setup_commands: sandbox.commands.run(cmd)",
                          "successors": [
                            {
                              "id": 7,
                              "label": "execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())\nif execution.error: raise Exception(execution.error)",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "response = execution.text\nstdout_logs = \"\".join(execution.logs.stdout)\nstderr_logs = \"\".join(execution.logs.stderr)\nreturn response, stdout_logs, stderr_logs",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 170,
          "end_line": 190,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 170,
              "line": "    def run("
            },
            {
              "lineno": 171,
              "line": "        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs"
            },
            {
              "lineno": 172,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 173,
              "line": "        try:"
            },
            {
              "lineno": 174,
              "line": "            response, stdout_logs, stderr_logs = self.execute_code("
            },
            {
              "lineno": 175,
              "line": "                input_data.code,"
            },
            {
              "lineno": 176,
              "line": "                input_data.language,"
            },
            {
              "lineno": 177,
              "line": "                input_data.setup_commands,"
            },
            {
              "lineno": 178,
              "line": "                input_data.timeout,"
            },
            {
              "lineno": 179,
              "line": "                credentials.api_key.get_secret_value(),"
            },
            {
              "lineno": 180,
              "line": "                input_data.template_id,"
            },
            {
              "lineno": 181,
              "line": "            )"
            },
            {
              "lineno": 182,
              "line": ""
            },
            {
              "lineno": 183,
              "line": "            if response:"
            },
            {
              "lineno": 184,
              "line": "                yield \"response\", response"
            },
            {
              "lineno": 185,
              "line": "            if stdout_logs:"
            },
            {
              "lineno": 186,
              "line": "                yield \"stdout_logs\", stdout_logs"
            },
            {
              "lineno": 187,
              "line": "            if stderr_logs:"
            },
            {
              "lineno": 188,
              "line": "                yield \"stderr_logs\", stderr_logs"
            },
            {
              "lineno": 189,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 190,
              "line": "            yield \"error\", str(e)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            response, stdout_logs, stderr_logs = self.execute_code(\n                input_data.code,\n                input_data.language,\n                input_data.setup_commands,\n                input_data.timeout,\n                credentials.api_key.get_secret_value(),\n                input_data.template_id,\n            )",
              "successors": [
                {
                  "id": 3,
                  "label": "            if response:\n                yield \"response\", response\n            if stdout_logs:\n                yield \"stdout_logs\", stdout_logs",
                  "successors": [
                    {
                      "id": 7,
                      "label": "            if stderr_logs:\n                yield \"stderr_logs\", stderr_logs\n        except Exception as e:\n            yield \"error\", str(e)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "            if stdout_logs:\n                yield \"stdout_logs\", stdout_logs\n            if stderr_logs:\n                yield \"stderr_logs\", stderr_logs",
                  "successors": [
                    {
                      "id": 8,
                      "label": "        except Exception as e:\n            yield \"error\", str(e)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 10,
                  "label": "        except Exception as e:\n            yield \"error\", str(e)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 42,
          "end_line": 87,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 43,
              "line": "        credentials: CredentialsMetaInput["
            },
            {
              "lineno": 44,
              "line": "            Literal[ProviderName.E2B], Literal[\"api_key\"]"
            },
            {
              "lineno": 45,
              "line": "        ] = CredentialsField("
            },
            {
              "lineno": 46,
              "line": "            description=\"Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs\","
            },
            {
              "lineno": 47,
              "line": "        )"
            },
            {
              "lineno": 48,
              "line": ""
            },
            {
              "lineno": 49,
              "line": "        # Todo : Option to run commond in background"
            },
            {
              "lineno": 50,
              "line": "        setup_commands: list[str] = SchemaField("
            },
            {
              "lineno": 51,
              "line": "            description=("
            },
            {
              "lineno": 52,
              "line": "                \"Shell commands to set up the sandbox before running the code. \""
            },
            {
              "lineno": 53,
              "line": "                \"You can use `curl` or `git` to install your desired Debian based \""
            },
            {
              "lineno": 54,
              "line": "                \"package manager. `pip` and `npm` are pre-installed.\\n\\n\""
            },
            {
              "lineno": 55,
              "line": "                \"These commands are executed with `sh`, in the foreground.\""
            },
            {
              "lineno": 56,
              "line": "            ),"
            },
            {
              "lineno": 57,
              "line": "            placeholder=\"pip install cowsay\","
            },
            {
              "lineno": 58,
              "line": "            default=[],"
            },
            {
              "lineno": 59,
              "line": "            advanced=False,"
            },
            {
              "lineno": 60,
              "line": "        )"
            },
            {
              "lineno": 61,
              "line": ""
            },
            {
              "lineno": 62,
              "line": "        code: str = SchemaField("
            },
            {
              "lineno": 63,
              "line": "            description=\"Code to execute in the sandbox\","
            },
            {
              "lineno": 64,
              "line": "            placeholder=\"print('Hello, World!')\","
            },
            {
              "lineno": 65,
              "line": "            default=\"\","
            },
            {
              "lineno": 66,
              "line": "            advanced=False,"
            },
            {
              "lineno": 67,
              "line": "        )"
            },
            {
              "lineno": 68,
              "line": ""
            },
            {
              "lineno": 69,
              "line": "        language: ProgrammingLanguage = SchemaField("
            },
            {
              "lineno": 70,
              "line": "            description=\"Programming language to execute\","
            },
            {
              "lineno": 71,
              "line": "            default=ProgrammingLanguage.PYTHON,"
            },
            {
              "lineno": 72,
              "line": "            advanced=False,"
            },
            {
              "lineno": 73,
              "line": "        )"
            },
            {
              "lineno": 74,
              "line": ""
            },
            {
              "lineno": 75,
              "line": "        timeout: int = SchemaField("
            },
            {
              "lineno": 76,
              "line": "            description=\"Execution timeout in seconds\", default=300"
            },
            {
              "lineno": 77,
              "line": "        )"
            },
            {
              "lineno": 78,
              "line": ""
            },
            {
              "lineno": 79,
              "line": "        template_id: str = SchemaField("
            },
            {
              "lineno": 80,
              "line": "            description=("
            },
            {
              "lineno": 81,
              "line": "                \"You can use an E2B sandbox template by entering its ID here. \""
            },
            {
              "lineno": 82,
              "line": "                \"Check out the E2B docs for more details: \""
            },
            {
              "lineno": 83,
              "line": "                \"[E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)\""
            },
            {
              "lineno": 84,
              "line": "            ),"
            },
            {
              "lineno": 85,
              "line": "            default=\"\","
            },
            {
              "lineno": 86,
              "line": "            advanced=True,"
            },
            {
              "lineno": 87,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.E2B], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs\",\n        )\n        # Todo : Option to run commond in background\n        setup_commands: list[str] = SchemaField(\n            description=(\n                \"Shell commands to set up the sandbox before running the code. \"\n                \"You can use `curl` or `git` to install your desired Debian based \"\n                \"package manager. `pip` and `npm` are pre-installed.\\n\\n\"\n                \"These commands are executed with `sh`, in the foreground.\"\n            ),\n            placeholder=\"pip install cowsay\",\n            default=[],\n            advanced=False,\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        code: str = SchemaField(\n            description=\"Code to execute in the sandbox\",\n            placeholder=\"print('Hello, World!')\",\n            default=\"\",\n            advanced=False,\n        )\n        language: ProgrammingLanguage = SchemaField(\n            description=\"Programming language to execute\",\n            default=ProgrammingLanguage.PYTHON,\n            advanced=False,\n        )",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        timeout: int = SchemaField(\n            description=\"Execution timeout in seconds\", default=300\n        )\n        template_id: str = SchemaField(\n            description=(\n                \"You can use an E2B sandbox template by entering its ID here. \"\n                \"Check out the E2B docs for more details: \"\n                \"[E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)\"\n            ),\n            default=\"\",\n            advanced=True,\n        )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 89,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 89,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 90,
              "line": "        response: str = SchemaField(description=\"Response from code execution\")"
            },
            {
              "lineno": 91,
              "line": "        stdout_logs: str = SchemaField("
            },
            {
              "lineno": 92,
              "line": "            description=\"Standard output logs from execution\""
            },
            {
              "lineno": 93,
              "line": "        )"
            },
            {
              "lineno": 94,
              "line": "        stderr_logs: str = SchemaField(description=\"Standard error logs from execution\")"
            },
            {
              "lineno": 95,
              "line": "        error: str = SchemaField(description=\"Error message if execution failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        response: str = SchemaField(description=\"Response from code execution\")\n        stdout_logs: str = SchemaField(\n            description=\"Standard output logs from execution\"\n        )\n        stderr_logs: str = SchemaField(description=\"Standard error logs from execution\")\n        error: str = SchemaField(description=\"Error message if execution failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 39,
          "line": "class CodeExecutionBlock(Block):"
        },
        {
          "lineno": 40,
          "line": "    # TODO : Add support to upload and download files"
        },
        {
          "lineno": 41,
          "line": "    # Currently, You can customized the CPU and Memory, only by creating a pre customized sandbox template"
        },
        {
          "lineno": 88,
          "line": ""
        },
        {
          "lineno": 96,
          "line": ""
        },
        {
          "lineno": 125,
          "line": ""
        },
        {
          "lineno": 169,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class CodeExecutionBlock(Block):\n    # TODO : Add support to upload and download files\n    # Currently, You can customized the CPU and Memory, only by creating a pre customized sandbox template",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from enum import Enum"
    },
    {
      "lineno": 2,
      "line": "from typing import Literal"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from e2b_code_interpreter import Sandbox"
    },
    {
      "lineno": 5,
      "line": "from pydantic import SecretStr"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 8,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 9,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 10,
      "line": "    CredentialsField,"
    },
    {
      "lineno": 11,
      "line": "    CredentialsMetaInput,"
    },
    {
      "lineno": 12,
      "line": "    SchemaField,"
    },
    {
      "lineno": 13,
      "line": ")"
    },
    {
      "lineno": 14,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": "TEST_CREDENTIALS = APIKeyCredentials("
    },
    {
      "lineno": 17,
      "line": "    id=\"01234567-89ab-cdef-0123-456789abcdef\","
    },
    {
      "lineno": 18,
      "line": "    provider=\"e2b\","
    },
    {
      "lineno": 19,
      "line": "    api_key=SecretStr(\"mock-e2b-api-key\"),"
    },
    {
      "lineno": 20,
      "line": "    title=\"Mock E2B API key\","
    },
    {
      "lineno": 21,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 22,
      "line": ")"
    },
    {
      "lineno": 23,
      "line": "TEST_CREDENTIALS_INPUT = {"
    },
    {
      "lineno": 24,
      "line": "    \"provider\": TEST_CREDENTIALS.provider,"
    },
    {
      "lineno": 25,
      "line": "    \"id\": TEST_CREDENTIALS.id,"
    },
    {
      "lineno": 26,
      "line": "    \"type\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 27,
      "line": "    \"title\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 28,
      "line": "}"
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": ""
    },
    {
      "lineno": 37,
      "line": ""
    },
    {
      "lineno": 38,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from enum import Enum\nfrom typing import Literal\n\nfrom e2b_code_interpreter import Sandbox\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"e2b\",\n    api_key=SecretStr(\"mock-e2b-api-key\"),\n    title=\"Mock E2B API key\",\n    expires_at=None,\n)",
      "successors": [
        {
          "id": 3,
          "label": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
          "successors": []
        }
      ]
    }
  ]
}