{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 61,
  "functions": [
    {
      "name": "match_word_pattern",
      "type": "function",
      "start_line": 1,
      "end_line": 55,
      "functions": [
        {
          "name": "backtrack",
          "type": "function",
          "start_line": 19,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 19,
              "line": "    def backtrack(pattern_index: int, str_index: int) -> bool:"
            },
            {
              "lineno": 20,
              "line": "        \"\"\""
            },
            {
              "lineno": 21,
              "line": "        >>> backtrack(0, 0)"
            },
            {
              "lineno": 22,
              "line": "        True"
            },
            {
              "lineno": 23,
              "line": ""
            },
            {
              "lineno": 24,
              "line": "        >>> backtrack(0, 1)"
            },
            {
              "lineno": 25,
              "line": "        True"
            },
            {
              "lineno": 26,
              "line": ""
            },
            {
              "lineno": 27,
              "line": "        >>> backtrack(0, 4)"
            },
            {
              "lineno": 28,
              "line": "        False"
            },
            {
              "lineno": 29,
              "line": "        \"\"\""
            },
            {
              "lineno": 30,
              "line": "        if pattern_index == len(pattern) and str_index == len(input_string):"
            },
            {
              "lineno": 31,
              "line": "            return True"
            },
            {
              "lineno": 32,
              "line": "        if pattern_index == len(pattern) or str_index == len(input_string):"
            },
            {
              "lineno": 33,
              "line": "            return False"
            },
            {
              "lineno": 34,
              "line": "        char = pattern[pattern_index]"
            },
            {
              "lineno": 35,
              "line": "        if char in pattern_map:"
            },
            {
              "lineno": 36,
              "line": "            mapped_str = pattern_map[char]"
            },
            {
              "lineno": 37,
              "line": "            if input_string.startswith(mapped_str, str_index):"
            },
            {
              "lineno": 38,
              "line": "                return backtrack(pattern_index + 1, str_index + len(mapped_str))"
            },
            {
              "lineno": 39,
              "line": "            else:"
            },
            {
              "lineno": 40,
              "line": "                return False"
            },
            {
              "lineno": 41,
              "line": "        for end in range(str_index + 1, len(input_string) + 1):"
            },
            {
              "lineno": 42,
              "line": "            substr = input_string[str_index:end]"
            },
            {
              "lineno": 43,
              "line": "            if substr in str_map:"
            },
            {
              "lineno": 44,
              "line": "                continue"
            },
            {
              "lineno": 45,
              "line": "            pattern_map[char] = substr"
            },
            {
              "lineno": 46,
              "line": "            str_map[substr] = char"
            },
            {
              "lineno": 47,
              "line": "            if backtrack(pattern_index + 1, end):"
            },
            {
              "lineno": 48,
              "line": "                return True"
            },
            {
              "lineno": 49,
              "line": "            del pattern_map[char]"
            },
            {
              "lineno": 50,
              "line": "            del str_map[substr]"
            },
            {
              "lineno": 51,
              "line": "        return False"
            }
          ],
          "blocks": []
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 1,
          "line": "def match_word_pattern(pattern: str, input_string: str) -> bool:"
        },
        {
          "lineno": 2,
          "line": "    \"\"\""
        },
        {
          "lineno": 3,
          "line": "    Determine if a given pattern matches a string using backtracking."
        },
        {
          "lineno": 4,
          "line": ""
        },
        {
          "lineno": 5,
          "line": "    pattern: The pattern to match."
        },
        {
          "lineno": 6,
          "line": "    input_string: The string to match against the pattern."
        },
        {
          "lineno": 7,
          "line": "    return: True if the pattern matches the string, False otherwise."
        },
        {
          "lineno": 8,
          "line": ""
        },
        {
          "lineno": 9,
          "line": "    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")"
        },
        {
          "lineno": 10,
          "line": "    True"
        },
        {
          "lineno": 11,
          "line": ""
        },
        {
          "lineno": 12,
          "line": "    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")"
        },
        {
          "lineno": 13,
          "line": "    True"
        },
        {
          "lineno": 14,
          "line": ""
        },
        {
          "lineno": 15,
          "line": "    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")"
        },
        {
          "lineno": 16,
          "line": "    False"
        },
        {
          "lineno": 17,
          "line": "    \"\"\""
        },
        {
          "lineno": 18,
          "line": ""
        },
        {
          "lineno": 52,
          "line": ""
        },
        {
          "lineno": 53,
          "line": "    pattern_map: dict[str, str] = {}"
        },
        {
          "lineno": 54,
          "line": "    str_map: dict[str, str] = {}"
        },
        {
          "lineno": 55,
          "line": "    return backtrack(0, 0)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def match_word_pattern(pattern: str, input_string: str) -> bool:\n    \"\"\"\n    Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False\n    \"\"\"\npattern_map: dict[str, str] = {}\n    str_map: dict[str, str] = {}",
          "successors": [
            {
              "id": 3,
              "label": "return backtrack(0, 0)",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 56,
      "line": ""
    },
    {
      "lineno": 57,
      "line": ""
    },
    {
      "lineno": 58,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 59,
      "line": "    import doctest"
    },
    {
      "lineno": 60,
      "line": ""
    },
    {
      "lineno": 61,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "if __name__ == \"__main__\":\nimport doctest\n\ndoctest.testmod()",
      "successors": []
    }
  ]
}