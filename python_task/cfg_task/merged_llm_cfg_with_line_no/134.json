{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 158,
  "functions": [],
  "classes": [
    {
      "name": "GitHubTriggerBase",
      "type": "class",
      "start_line": 27,
      "end_line": 58,
      "functions": [
        {
          "name": "run",
          "type": "function",
          "start_line": 55,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 55,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 56,
              "line": "        yield \"payload\", input_data.payload"
            },
            {
              "lineno": 57,
              "line": "        yield \"triggered_by_user\", input_data.payload[\"sender\"]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"payload\", input_data.payload\n        yield \"triggered_by_user\", input_data.payload[\"sender\"]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 28,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 29,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 30,
              "line": "        repo: str = SchemaField("
            },
            {
              "lineno": 31,
              "line": "            description=("
            },
            {
              "lineno": 32,
              "line": "                \"Repository to subscribe to.\\n\\n\""
            },
            {
              "lineno": 33,
              "line": "                \"**Note:** Make sure your GitHub credentials have permissions \""
            },
            {
              "lineno": 34,
              "line": "                \"to create webhooks on this repo.\""
            },
            {
              "lineno": 35,
              "line": "            ),"
            },
            {
              "lineno": 36,
              "line": "            placeholder=\"{owner}/{repo}\","
            },
            {
              "lineno": 37,
              "line": "        )"
            },
            {
              "lineno": 38,
              "line": "        # --8<-- [start:example-payload-field]"
            },
            {
              "lineno": 39,
              "line": "        payload: dict = SchemaField(hidden=True, default={})"
            },
            {
              "lineno": 40,
              "line": "        # --8<-- [end:example-payload-field]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo: str = SchemaField(\n            description=(\n                \"Repository to subscribe to.\\n\\n\"\n                \"**Note:** Make sure your GitHub credentials have permissions \"\n                \"to create webhooks on this repo.\"\n            ),\n            placeholder=\"{owner}/{repo}\",\n        )\n        # --8<-- [start:example-payload-field]\n        payload: dict = SchemaField(hidden=True, default={})\n        # --8<-- [end:example-payload-field]",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 42,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 43,
              "line": "        payload: dict = SchemaField("
            },
            {
              "lineno": 44,
              "line": "            description=\"The complete webhook payload that was received from GitHub. \""
            },
            {
              "lineno": 45,
              "line": "            \"Includes information about the affected resource (e.g. pull request), \""
            },
            {
              "lineno": 46,
              "line": "            \"the event, and the user who triggered the event.\""
            },
            {
              "lineno": 47,
              "line": "        )"
            },
            {
              "lineno": 48,
              "line": "        triggered_by_user: dict = SchemaField("
            },
            {
              "lineno": 49,
              "line": "            description=\"Object representing the GitHub user who triggered the event\""
            },
            {
              "lineno": 50,
              "line": "        )"
            },
            {
              "lineno": 51,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 52,
              "line": "            description=\"Error message if the payload could not be processed\""
            },
            {
              "lineno": 53,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        payload: dict = SchemaField(\n            description=\"The complete webhook payload that was received from GitHub. \"\n            \"Includes information about the affected resource (e.g. pull request), \"\n            \"the event, and the user who triggered the event.\"\n        )\n        triggered_by_user: dict = SchemaField(\n            description=\"Object representing the GitHub user who triggered the event\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the payload could not be processed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 27,
          "line": "class GitHubTriggerBase:"
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 58,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GitHubTriggerBase:\n",
          "successors": [
            {
              "id": 3,
              "label": "\n",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "GithubPullRequestTriggerBlock",
      "type": "class",
      "start_line": 60,
      "end_line": 155,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 111,
          "end_line": 148,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 111,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 112,
              "line": "        from backend.integrations.webhooks.github import GithubWebhookType"
            },
            {
              "lineno": 113,
              "line": ""
            },
            {
              "lineno": 114,
              "line": "        example_payload = json.loads("
            },
            {
              "lineno": 115,
              "line": "            self.EXAMPLE_PAYLOAD_FILE.read_text(encoding=\"utf-8\")"
            },
            {
              "lineno": 116,
              "line": "        )"
            },
            {
              "lineno": 117,
              "line": ""
            },
            {
              "lineno": 118,
              "line": "        super().__init__("
            },
            {
              "lineno": 119,
              "line": "            id=\"6c60ec01-8128-419e-988f-96a063ee2fea\","
            },
            {
              "lineno": 120,
              "line": "            description=\"This block triggers on pull request events and outputs the event type and payload.\","
            },
            {
              "lineno": 121,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS, BlockCategory.INPUT},"
            },
            {
              "lineno": 122,
              "line": "            input_schema=GithubPullRequestTriggerBlock.Input,"
            },
            {
              "lineno": 123,
              "line": "            output_schema=GithubPullRequestTriggerBlock.Output,"
            },
            {
              "lineno": 124,
              "line": "            # --8<-- [start:example-webhook_config]"
            },
            {
              "lineno": 125,
              "line": "            webhook_config=BlockWebhookConfig("
            },
            {
              "lineno": 126,
              "line": "                provider=\"github\","
            },
            {
              "lineno": 127,
              "line": "                webhook_type=GithubWebhookType.REPO,"
            },
            {
              "lineno": 128,
              "line": "                resource_format=\"{repo}\","
            },
            {
              "lineno": 129,
              "line": "                event_filter_input=\"events\","
            },
            {
              "lineno": 130,
              "line": "                event_format=\"pull_request.{event}\","
            },
            {
              "lineno": 131,
              "line": "            ),"
            },
            {
              "lineno": 132,
              "line": "            # --8<-- [end:example-webhook_config]"
            },
            {
              "lineno": 133,
              "line": "            test_input={"
            },
            {
              "lineno": 134,
              "line": "                \"repo\": \"Significant-Gravitas/AutoGPT\","
            },
            {
              "lineno": 135,
              "line": "                \"events\": {\"opened\": True, \"synchronize\": True},"
            },
            {
              "lineno": 136,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 137,
              "line": "                \"payload\": example_payload,"
            },
            {
              "lineno": 138,
              "line": "            },"
            },
            {
              "lineno": 139,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 140,
              "line": "            test_output=["
            },
            {
              "lineno": 141,
              "line": "                (\"payload\", example_payload),"
            },
            {
              "lineno": 142,
              "line": "                (\"triggered_by_user\", example_payload[\"sender\"]),"
            },
            {
              "lineno": 143,
              "line": "                (\"event\", example_payload[\"action\"]),"
            },
            {
              "lineno": 144,
              "line": "                (\"number\", example_payload[\"number\"]),"
            },
            {
              "lineno": 145,
              "line": "                (\"pull_request\", example_payload[\"pull_request\"]),"
            },
            {
              "lineno": 146,
              "line": "                (\"pull_request_url\", example_payload[\"pull_request\"][\"html_url\"]),"
            },
            {
              "lineno": 147,
              "line": "            ],"
            },
            {
              "lineno": 148,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        from backend.integrations.webhooks.github import GithubWebhookType\n\n        example_payload = json.loads(\n            self.EXAMPLE_PAYLOAD_FILE.read_text(encoding=\"utf-8\")\n        )\n\n        super().__init__(\n            id=\"6c60ec01-8128-419e-988f-96a063ee2fea\",\n            description=\"This block triggers on pull request events and outputs the event type and payload.\",\n            categories={BlockCategory.DEVELOPER_TOOLS, BlockCategory.INPUT},\n            input_schema=GithubPullRequestTriggerBlock.Input,\n            output_schema=GithubPullRequestTriggerBlock.Output,\n            # --8<-- [start:example-webhook_config]\n            webhook_config=BlockWebhookConfig(\n                provider=\"github\",\n                webhook_type=GithubWebhookType.REPO,\n                resource_format=\"{repo}\",\n                event_filter_input=\"events\",\n                event_format=\"pull_request.{event}\",\n            ),\n            # --8<-- [end:example-webhook_config]\n            test_input={\n                \"repo\": \"Significant-Gravitas/AutoGPT\",\n                \"events\": {\"opened\": True, \"synchronize\": True},\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"payload\": example_payload,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"payload\", example_payload),\n                (\"triggered_by_user\", example_payload[\"sender\"]),\n                (\"event\", example_payload[\"action\"]),\n                (\"number\", example_payload[\"number\"]),\n                (\"pull_request\", example_payload[\"pull_request\"]),\n                (\"pull_request_url\", example_payload[\"pull_request\"][\"html_url\"]),\n            ],",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 150,
          "end_line": 155,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 150,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:  # type: ignore"
            },
            {
              "lineno": 151,
              "line": "        yield from super().run(input_data, **kwargs)"
            },
            {
              "lineno": 152,
              "line": "        yield \"event\", input_data.payload[\"action\"]"
            },
            {
              "lineno": 153,
              "line": "        yield \"number\", input_data.payload[\"number\"]"
            },
            {
              "lineno": 154,
              "line": "        yield \"pull_request\", input_data.payload[\"pull_request\"]"
            },
            {
              "lineno": 155,
              "line": "        yield \"pull_request_url\", input_data.payload[\"pull_request\"][\"html_url\"]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:  # type: ignore\n        yield from super().run(input_data, **kwargs)\n        yield \"event\", input_data.payload[\"action\"]\n        yield \"number\", input_data.payload[\"number\"]\n        yield \"pull_request\", input_data.payload[\"pull_request\"]\n        yield \"pull_request_url\", input_data.payload[\"pull_request\"][\"html_url\"]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 66,
          "end_line": 96,
          "functions": [],
          "classes": [
            {
              "name": "EventsFilter",
              "type": "class",
              "start_line": 67,
              "end_line": 92,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 67,
                  "line": "        class EventsFilter(BaseModel):"
                },
                {
                  "lineno": 68,
                  "line": "            \"\"\""
                },
                {
                  "lineno": 69,
                  "line": "            https://docs.github.com/en/webhooks/webhook-events-and-payloads#pull_request"
                },
                {
                  "lineno": 70,
                  "line": "            \"\"\""
                },
                {
                  "lineno": 71,
                  "line": ""
                },
                {
                  "lineno": 72,
                  "line": "            opened: bool = False"
                },
                {
                  "lineno": 73,
                  "line": "            edited: bool = False"
                },
                {
                  "lineno": 74,
                  "line": "            closed: bool = False"
                },
                {
                  "lineno": 75,
                  "line": "            reopened: bool = False"
                },
                {
                  "lineno": 76,
                  "line": "            synchronize: bool = False"
                },
                {
                  "lineno": 77,
                  "line": "            assigned: bool = False"
                },
                {
                  "lineno": 78,
                  "line": "            unassigned: bool = False"
                },
                {
                  "lineno": 79,
                  "line": "            labeled: bool = False"
                },
                {
                  "lineno": 80,
                  "line": "            unlabeled: bool = False"
                },
                {
                  "lineno": 81,
                  "line": "            converted_to_draft: bool = False"
                },
                {
                  "lineno": 82,
                  "line": "            locked: bool = False"
                },
                {
                  "lineno": 83,
                  "line": "            unlocked: bool = False"
                },
                {
                  "lineno": 84,
                  "line": "            enqueued: bool = False"
                },
                {
                  "lineno": 85,
                  "line": "            dequeued: bool = False"
                },
                {
                  "lineno": 86,
                  "line": "            milestoned: bool = False"
                },
                {
                  "lineno": 87,
                  "line": "            demilestoned: bool = False"
                },
                {
                  "lineno": 88,
                  "line": "            ready_for_review: bool = False"
                },
                {
                  "lineno": 89,
                  "line": "            review_requested: bool = False"
                },
                {
                  "lineno": 90,
                  "line": "            review_request_removed: bool = False"
                },
                {
                  "lineno": 91,
                  "line": "            auto_merge_enabled: bool = False"
                },
                {
                  "lineno": 92,
                  "line": "            auto_merge_disabled: bool = False"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "label": "        class EventsFilter(BaseModel):\n            \"\"\"\n            https://docs.github.com/en/webhooks/webhook-events-and-payloads#pull_request\n            \"\"\"\n\n            opened: bool = False\n            edited: bool = False\n            closed: bool = False\n            reopened: bool = False\n            synchronize: bool = False\n            assigned: bool = False\n            unassigned: bool = False\n            labeled: bool = False\n            unlabeled: bool = False\n            converted_to_draft: bool = False\n            locked: bool = False\n            unlocked: bool = False\n            enqueued: bool = False\n            dequeued: bool = False\n            milestoned: bool = False\n            demilestoned: bool = False\n            ready_for_review: bool = False\n            review_requested: bool = False\n            review_request_removed: bool = False\n            auto_merge_enabled: bool = False\n            auto_merge_disabled: bool = False",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": [
            {
              "lineno": 66,
              "line": "    class Input(GitHubTriggerBase.Input):"
            },
            {
              "lineno": 93,
              "line": ""
            },
            {
              "lineno": 94,
              "line": "        events: EventsFilter = SchemaField("
            },
            {
              "lineno": 95,
              "line": "            title=\"Events\", description=\"The events to subscribe to\""
            },
            {
              "lineno": 96,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(GitHubTriggerBase.Input):\n        events: EventsFilter = SchemaField(\n            title=\"Events\", description=\"The events to subscribe to\"\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 99,
          "end_line": 109,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 99,
              "line": "    class Output(GitHubTriggerBase.Output):"
            },
            {
              "lineno": 100,
              "line": "        event: str = SchemaField("
            },
            {
              "lineno": 101,
              "line": "            description=\"The PR event that triggered the webhook (e.g. 'opened')\""
            },
            {
              "lineno": 102,
              "line": "        )"
            },
            {
              "lineno": 103,
              "line": "        number: int = SchemaField(description=\"The number of the affected pull request\")"
            },
            {
              "lineno": 104,
              "line": "        pull_request: dict = SchemaField("
            },
            {
              "lineno": 105,
              "line": "            description=\"Object representing the affected pull request\""
            },
            {
              "lineno": 106,
              "line": "        )"
            },
            {
              "lineno": 107,
              "line": "        pull_request_url: str = SchemaField("
            },
            {
              "lineno": 108,
              "line": "            description=\"The URL of the affected pull request\""
            },
            {
              "lineno": 109,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(GitHubTriggerBase.Output):\n        event: str = SchemaField(\n            description=\"The PR event that triggered the webhook (e.g. 'opened')\"\n        )\n        number: int = SchemaField(description=\"The number of the affected pull request\")\n        pull_request: dict = SchemaField(\n            description=\"Object representing the affected pull request\"\n        )\n        pull_request_url: str = SchemaField(\n            description=\"The URL of the affected pull request\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 60,
          "line": "class GithubPullRequestTriggerBlock(GitHubTriggerBase, Block):"
        },
        {
          "lineno": 61,
          "line": "    EXAMPLE_PAYLOAD_FILE = ("
        },
        {
          "lineno": 62,
          "line": "        Path(__file__).parent / \"example_payloads\" / \"pull_request.synchronize.json\""
        },
        {
          "lineno": 63,
          "line": "    )"
        },
        {
          "lineno": 64,
          "line": ""
        },
        {
          "lineno": 65,
          "line": "    # --8<-- [start:example-event-filter]"
        },
        {
          "lineno": 97,
          "line": "        # --8<-- [end:example-event-filter]"
        },
        {
          "lineno": 98,
          "line": ""
        },
        {
          "lineno": 110,
          "line": ""
        },
        {
          "lineno": 149,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubPullRequestTriggerBlock(GitHubTriggerBase, Block):\n    EXAMPLE_PAYLOAD_FILE = (\n        Path(__file__).parent / \"example_payloads\" / \"pull_request.synchronize.json\"\n    )\n\n    # --8<-- [start:example-event-filter]\n# --8<-- [end:example-event-filter]",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import json"
    },
    {
      "lineno": 2,
      "line": "import logging"
    },
    {
      "lineno": 3,
      "line": "from pathlib import Path"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from pydantic import BaseModel"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "from backend.data.block import ("
    },
    {
      "lineno": 8,
      "line": "    Block,"
    },
    {
      "lineno": 9,
      "line": "    BlockCategory,"
    },
    {
      "lineno": 10,
      "line": "    BlockOutput,"
    },
    {
      "lineno": 11,
      "line": "    BlockSchema,"
    },
    {
      "lineno": 12,
      "line": "    BlockWebhookConfig,"
    },
    {
      "lineno": 13,
      "line": ")"
    },
    {
      "lineno": 14,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": "from ._auth import ("
    },
    {
      "lineno": 17,
      "line": "    TEST_CREDENTIALS,"
    },
    {
      "lineno": 18,
      "line": "    TEST_CREDENTIALS_INPUT,"
    },
    {
      "lineno": 19,
      "line": "    GithubCredentialsField,"
    },
    {
      "lineno": 20,
      "line": "    GithubCredentialsInput,"
    },
    {
      "lineno": 21,
      "line": ")"
    },
    {
      "lineno": 22,
      "line": ""
    },
    {
      "lineno": 23,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 24,
      "line": ""
    },
    {
      "lineno": 25,
      "line": ""
    },
    {
      "lineno": 26,
      "line": "# --8<-- [start:GithubTriggerExample]"
    },
    {
      "lineno": 59,
      "line": ""
    },
    {
      "lineno": 156,
      "line": ""
    },
    {
      "lineno": 157,
      "line": ""
    },
    {
      "lineno": 158,
      "line": "# --8<-- [end:GithubTriggerExample]"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import json\nimport logging\nfrom pathlib import Path\n\nfrom pydantic import BaseModel\n\nfrom backend.data.block import (\n    Block,\n    BlockCategory,\n    BlockOutput,\n    BlockSchema,\n    BlockWebhookConfig,\n)\nfrom backend.data.model import SchemaField\n\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ]
}