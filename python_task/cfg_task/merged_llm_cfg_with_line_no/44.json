{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 195,
  "functions": [],
  "classes": [
    {
      "name": "PublishToMediumStatus",
      "type": "class",
      "start_line": 33,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 33,
          "line": "class PublishToMediumStatus(str, Enum):"
        },
        {
          "lineno": 34,
          "line": "    PUBLIC = \"public\""
        },
        {
          "lineno": 35,
          "line": "    DRAFT = \"draft\""
        },
        {
          "lineno": 36,
          "line": "    UNLISTED = \"unlisted\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class PublishToMediumStatus(str, Enum):\n    PUBLIC = \"public\"\n    DRAFT = \"draft\"\n    UNLISTED = \"unlisted\"",
          "successors": []
        }
      ]
    },
    {
      "name": "PublishToMediumBlock",
      "type": "class",
      "start_line": 39,
      "end_line": 195,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 97,
          "end_line": 131,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 97,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 98,
              "line": "        super().__init__("
            },
            {
              "lineno": 99,
              "line": "            id=\"3f7b2dcb-4a78-4e3f-b0f1-88132e1b89df\","
            },
            {
              "lineno": 100,
              "line": "            input_schema=PublishToMediumBlock.Input,"
            },
            {
              "lineno": 101,
              "line": "            output_schema=PublishToMediumBlock.Output,"
            },
            {
              "lineno": 102,
              "line": "            description=\"Publishes a post to Medium.\","
            },
            {
              "lineno": 103,
              "line": "            categories={BlockCategory.SOCIAL},"
            },
            {
              "lineno": 104,
              "line": "            test_input={"
            },
            {
              "lineno": 105,
              "line": "                \"author_id\": \"1234567890abcdef\","
            },
            {
              "lineno": 106,
              "line": "                \"title\": \"Test Post\","
            },
            {
              "lineno": 107,
              "line": "                \"content\": \"<h1>Test Content</h1><p>This is a test post.</p>\","
            },
            {
              "lineno": 108,
              "line": "                \"content_format\": \"html\","
            },
            {
              "lineno": 109,
              "line": "                \"tags\": [\"test\", \"automation\"],"
            },
            {
              "lineno": 110,
              "line": "                \"license\": \"all-rights-reserved\","
            },
            {
              "lineno": 111,
              "line": "                \"notify_followers\": False,"
            },
            {
              "lineno": 112,
              "line": "                \"publish_status\": PublishToMediumStatus.DRAFT.value,"
            },
            {
              "lineno": 113,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 114,
              "line": "            },"
            },
            {
              "lineno": 115,
              "line": "            test_output=["
            },
            {
              "lineno": 116,
              "line": "                (\"post_id\", \"e6f36a\"),"
            },
            {
              "lineno": 117,
              "line": "                (\"post_url\", \"https://medium.com/@username/test-post-e6f36a\"),"
            },
            {
              "lineno": 118,
              "line": "                (\"published_at\", 1626282600),"
            },
            {
              "lineno": 119,
              "line": "            ],"
            },
            {
              "lineno": 120,
              "line": "            test_mock={"
            },
            {
              "lineno": 121,
              "line": "                \"create_post\": lambda *args, **kwargs: {"
            },
            {
              "lineno": 122,
              "line": "                    \"data\": {"
            },
            {
              "lineno": 123,
              "line": "                        \"id\": \"e6f36a\","
            },
            {
              "lineno": 124,
              "line": "                        \"url\": \"https://medium.com/@username/test-post-e6f36a\","
            },
            {
              "lineno": 125,
              "line": "                        \"authorId\": \"1234567890abcdef\","
            },
            {
              "lineno": 126,
              "line": "                        \"publishedAt\": 1626282600,"
            },
            {
              "lineno": 127,
              "line": "                    }"
            },
            {
              "lineno": 128,
              "line": "                }"
            },
            {
              "lineno": 129,
              "line": "            },"
            },
            {
              "lineno": 130,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 131,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"3f7b2dcb-4a78-4e3f-b0f1-88132e1b89df\",\n            input_schema=PublishToMediumBlock.Input,\n            output_schema=PublishToMediumBlock.Output,\n            description=\"Publishes a post to Medium.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"author_id\": \"1234567890abcdef\",\n                \"title\": \"Test Post\",\n                \"content\": \"<h1>Test Content</h1><p>This is a test post.</p>\",\n                \"content_format\": \"html\",\n                \"tags\": [\"test\", \"automation\"],\n                \"license\": \"all-rights-reserved\",\n                \"notify_followers\": False,\n                \"publish_status\": PublishToMediumStatus.DRAFT.value,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\"post_id\", \"e6f36a\"),\n                (\"post_url\", \"https://medium.com/@username/test-post-e6f36a\"),\n                (\"published_at\", 1626282600),\n            ],\n            test_mock={\n                \"create_post\": lambda *args, **kwargs: {\n                    \"data\": {\n                        \"id\": \"e6f36a\",\n                        \"url\": \"https://medium.com/@username/test-post-e6f36a\",\n                        \"authorId\": \"1234567890abcdef\",\n                        \"publishedAt\": 1626282600,\n                    }\n                },\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "create_post",
          "type": "function",
          "start_line": 133,
          "end_line": 169,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 133,
              "line": "    def create_post("
            },
            {
              "lineno": 134,
              "line": "        self,"
            },
            {
              "lineno": 135,
              "line": "        api_key: SecretStr,"
            },
            {
              "lineno": 136,
              "line": "        author_id,"
            },
            {
              "lineno": 137,
              "line": "        title,"
            },
            {
              "lineno": 138,
              "line": "        content,"
            },
            {
              "lineno": 139,
              "line": "        content_format,"
            },
            {
              "lineno": 140,
              "line": "        tags,"
            },
            {
              "lineno": 141,
              "line": "        canonical_url,"
            },
            {
              "lineno": 142,
              "line": "        publish_status,"
            },
            {
              "lineno": 143,
              "line": "        license,"
            },
            {
              "lineno": 144,
              "line": "        notify_followers,"
            },
            {
              "lineno": 145,
              "line": "    ):"
            },
            {
              "lineno": 146,
              "line": "        headers = {"
            },
            {
              "lineno": 147,
              "line": "            \"Authorization\": f\"Bearer {api_key.get_secret_value()}\","
            },
            {
              "lineno": 148,
              "line": "            \"Content-Type\": \"application/json\","
            },
            {
              "lineno": 149,
              "line": "            \"Accept\": \"application/json\","
            },
            {
              "lineno": 150,
              "line": "        }"
            },
            {
              "lineno": 151,
              "line": ""
            },
            {
              "lineno": 152,
              "line": "        data = {"
            },
            {
              "lineno": 153,
              "line": "            \"title\": title,"
            },
            {
              "lineno": 154,
              "line": "            \"content\": content,"
            },
            {
              "lineno": 155,
              "line": "            \"contentFormat\": content_format,"
            },
            {
              "lineno": 156,
              "line": "            \"tags\": tags,"
            },
            {
              "lineno": 157,
              "line": "            \"canonicalUrl\": canonical_url,"
            },
            {
              "lineno": 158,
              "line": "            \"publishStatus\": publish_status,"
            },
            {
              "lineno": 159,
              "line": "            \"license\": license,"
            },
            {
              "lineno": 160,
              "line": "            \"notifyFollowers\": notify_followers,"
            },
            {
              "lineno": 161,
              "line": "        }"
            },
            {
              "lineno": 162,
              "line": ""
            },
            {
              "lineno": 163,
              "line": "        response = requests.post("
            },
            {
              "lineno": 164,
              "line": "            f\"https://api.medium.com/v1/users/{author_id}/posts\","
            },
            {
              "lineno": 165,
              "line": "            headers=headers,"
            },
            {
              "lineno": 166,
              "line": "            json=data,"
            },
            {
              "lineno": 167,
              "line": "        )"
            },
            {
              "lineno": 168,
              "line": ""
            },
            {
              "lineno": 169,
              "line": "        return response.json()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def create_post(\n        self,\n        api_key: SecretStr,\n        author_id,\n        title,\n        content,\n        content_format,\n        tags,\n        canonical_url,\n        publish_status,\n        license,\n        notify_followers,\n    ):\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n        }\n\n        data = {\n            \"title\": title,\n            \"content\": content,\n            \"contentFormat\": content_format,\n            \"tags\": tags,\n            \"canonicalUrl\": canonical_url,\n            \"publishStatus\": publish_status,\n            \"license\": license,\n            \"notifyFollowers\": notify_followers,\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        response = requests.post(\n            f\"https://api.medium.com/v1/users/{author_id}/posts\",\n            headers=headers,\n            json=data,\n        )\n        return response.json()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 171,
          "end_line": 195,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 171,
              "line": "    def run("
            },
            {
              "lineno": 172,
              "line": "        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs"
            },
            {
              "lineno": 173,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 174,
              "line": "        response = self.create_post("
            },
            {
              "lineno": 175,
              "line": "            credentials.api_key,"
            },
            {
              "lineno": 176,
              "line": "            input_data.author_id.get_secret_value(),"
            },
            {
              "lineno": 177,
              "line": "            input_data.title,"
            },
            {
              "lineno": 178,
              "line": "            input_data.content,"
            },
            {
              "lineno": 179,
              "line": "            input_data.content_format,"
            },
            {
              "lineno": 180,
              "line": "            input_data.tags,"
            },
            {
              "lineno": 181,
              "line": "            input_data.canonical_url,"
            },
            {
              "lineno": 182,
              "line": "            input_data.publish_status,"
            },
            {
              "lineno": 183,
              "line": "            input_data.license,"
            },
            {
              "lineno": 184,
              "line": "            input_data.notify_followers,"
            },
            {
              "lineno": 185,
              "line": "        )"
            },
            {
              "lineno": 186,
              "line": ""
            },
            {
              "lineno": 187,
              "line": "        if \"data\" in response:"
            },
            {
              "lineno": 188,
              "line": "            yield \"post_id\", response[\"data\"][\"id\"]"
            },
            {
              "lineno": 189,
              "line": "            yield \"post_url\", response[\"data\"][\"url\"]"
            },
            {
              "lineno": 190,
              "line": "            yield \"published_at\", response[\"data\"][\"publishedAt\"]"
            },
            {
              "lineno": 191,
              "line": "        else:"
            },
            {
              "lineno": 192,
              "line": "            error_message = response.get(\"errors\", [{}])[0].get("
            },
            {
              "lineno": 193,
              "line": "                \"message\", \"Unknown error occurred\""
            },
            {
              "lineno": 194,
              "line": "            )"
            },
            {
              "lineno": 195,
              "line": "            raise RuntimeError(f\"Failed to create Medium post: {error_message}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        response = self.create_post(\n            credentials.api_key,\n            input_data.author_id.get_secret_value(),\n            input_data.title,\n            input_data.content,\n            input_data.content_format,\n            input_data.tags,\n            input_data.canonical_url,\n            input_data.publish_status,\n            input_data.license,\n            input_data.notify_followers,\n        )",
              "successors": [
                {
                  "id": 2,
                  "label": "        if \"data\" in response:\n            yield \"post_id\", response[\"data\"][\"id\"]\n            yield \"post_url\", response[\"data\"][\"url\"]\n            yield \"published_at\", response[\"data\"][\"publishedAt\"]",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "        else:\n            error_message = response.get(\"errors\", [{}])[0].get(\n                \"message\", \"Unknown error occurred\"\n            )\n            raise RuntimeError(f\"Failed to create Medium post: {error_message}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 40,
          "end_line": 86,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 40,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 41,
              "line": "        author_id: BlockSecret = SecretField("
            },
            {
              "lineno": 42,
              "line": "            key=\"medium_author_id\","
            },
            {
              "lineno": 43,
              "line": "            description=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" https://api.medium.com/v1/me\" the response will contain the authorId field.\"\"\","
            },
            {
              "lineno": 44,
              "line": "            placeholder=\"Enter the author's Medium AuthorID\","
            },
            {
              "lineno": 45,
              "line": "        )"
            },
            {
              "lineno": 46,
              "line": "        title: str = SchemaField("
            },
            {
              "lineno": 47,
              "line": "            description=\"The title of your Medium post\","
            },
            {
              "lineno": 48,
              "line": "            placeholder=\"Enter your post title\","
            },
            {
              "lineno": 49,
              "line": "        )"
            },
            {
              "lineno": 50,
              "line": "        content: str = SchemaField("
            },
            {
              "lineno": 51,
              "line": "            description=\"The main content of your Medium post\","
            },
            {
              "lineno": 52,
              "line": "            placeholder=\"Enter your post content\","
            },
            {
              "lineno": 53,
              "line": "        )"
            },
            {
              "lineno": 54,
              "line": "        content_format: str = SchemaField("
            },
            {
              "lineno": 55,
              "line": "            description=\"The format of the content: 'html' or 'markdown'\","
            },
            {
              "lineno": 56,
              "line": "            placeholder=\"html\","
            },
            {
              "lineno": 57,
              "line": "        )"
            },
            {
              "lineno": 58,
              "line": "        tags: List[str] = SchemaField("
            },
            {
              "lineno": 59,
              "line": "            description=\"List of tags for your Medium post (up to 5)\","
            },
            {
              "lineno": 60,
              "line": "            placeholder=\"['technology', 'AI', 'blogging']\","
            },
            {
              "lineno": 61,
              "line": "        )"
            },
            {
              "lineno": 62,
              "line": "        canonical_url: str | None = SchemaField("
            },
            {
              "lineno": 63,
              "line": "            default=None,"
            },
            {
              "lineno": 64,
              "line": "            description=\"The original home of this content, if it was originally published elsewhere\","
            },
            {
              "lineno": 65,
              "line": "            placeholder=\"https://yourblog.com/original-post\","
            },
            {
              "lineno": 66,
              "line": "        )"
            },
            {
              "lineno": 67,
              "line": "        publish_status: PublishToMediumStatus = SchemaField("
            },
            {
              "lineno": 68,
              "line": "            description=\"The publish status\","
            },
            {
              "lineno": 69,
              "line": "            placeholder=PublishToMediumStatus.DRAFT,"
            },
            {
              "lineno": 70,
              "line": "        )"
            },
            {
              "lineno": 71,
              "line": "        license: str = SchemaField("
            },
            {
              "lineno": 72,
              "line": "            default=\"all-rights-reserved\","
            },
            {
              "lineno": 73,
              "line": "            description=\"The license of the post: 'all-rights-reserved', 'cc-40-by', 'cc-40-by-sa', 'cc-40-by-nd', 'cc-40-by-nc', 'cc-40-by-nc-nd', 'cc-40-by-nc-sa', 'cc-40-zero', 'public-domain'\","
            },
            {
              "lineno": 74,
              "line": "            placeholder=\"all-rights-reserved\","
            },
            {
              "lineno": 75,
              "line": "        )"
            },
            {
              "lineno": 76,
              "line": "        notify_followers: bool = SchemaField("
            },
            {
              "lineno": 77,
              "line": "            default=False,"
            },
            {
              "lineno": 78,
              "line": "            description=\"Whether to notify followers that the user has published\","
            },
            {
              "lineno": 79,
              "line": "            placeholder=\"False\","
            },
            {
              "lineno": 80,
              "line": "        )"
            },
            {
              "lineno": 81,
              "line": "        credentials: CredentialsMetaInput["
            },
            {
              "lineno": 82,
              "line": "            Literal[ProviderName.MEDIUM], Literal[\"api_key\"]"
            },
            {
              "lineno": 83,
              "line": "        ] = CredentialsField("
            },
            {
              "lineno": 84,
              "line": "            description=\"The Medium integration can be used with any API key with sufficient permissions for the blocks it is used on.\","
            },
            {
              "lineno": 85,
              "line": "        )"
            },
            {
              "lineno": 86,
              "line": ""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\n    author_id: BlockSecret = SecretField(\n        key=\"medium_author_id\",\n        description=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" https://api.medium.com/v1/me\" the response will contain the authorId field.\"\"\",\n        placeholder=\"Enter the author's Medium AuthorID\",\n    )\n    title: str = SchemaField(\n        description=\"The title of your Medium post\",\n        placeholder=\"Enter your post title\",\n    )\n    content: str = SchemaField(\n        description=\"The main content of your Medium post\",\n        placeholder=\"Enter your post content\",\n    )\n    content_format: str = SchemaField(\n        description=\"The format of the content: 'html' or 'markdown'\",\n        placeholder=\"html\",\n    )\n    tags: List[str] = SchemaField(\n        description=\"List of tags for your Medium post (up to 5)\",\n        placeholder=\"['technology', 'AI', 'blogging']\",\n    )\n    canonical_url: str | None = SchemaField(\n        default=None,\n        description=\"The original home of this content, if it was originally published elsewhere\",\n        placeholder=\"https://yourblog.com/original-post\",\n    )\n    publish_status: PublishToMediumStatus = SchemaField(\n        description=\"The publish status\",\n        placeholder=PublishToMediumStatus.DRAFT,\n    )\n    license: str = SchemaField(\n        default=\"all-rights-reserved\",\n        description=\"The license of the post: 'all-rights-reserved', 'cc-40-by', 'cc-40-by-sa', 'cc-40-by-nd', 'cc-40-by-nc', 'cc-40-by-nc-nd', 'cc-40-by-nc-sa', 'cc-40-zero', 'public-domain'\",\n        placeholder=\"all-rights-reserved\",\n    )\n    notify_followers: bool = SchemaField(\n        default=False,\n        description=\"Whether to notify followers that the user has published\",\n        placeholder=\"False\",\n    )\n    credentials: CredentialsMetaInput[\n        Literal[ProviderName.MEDIUM], Literal[\"api_key\"]\n    ] = CredentialsField(\n        description=\"The Medium integration can be used with any API key with sufficient permissions for the blocks it is used on.\",\n    )\n",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 87,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 87,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 88,
              "line": "        post_id: str = SchemaField(description=\"The ID of the created Medium post\")"
            },
            {
              "lineno": 89,
              "line": "        post_url: str = SchemaField(description=\"The URL of the created Medium post\")"
            },
            {
              "lineno": 90,
              "line": "        published_at: int = SchemaField("
            },
            {
              "lineno": 91,
              "line": "            description=\"The timestamp when the post was published\""
            },
            {
              "lineno": 92,
              "line": "        )"
            },
            {
              "lineno": 93,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 94,
              "line": "            description=\"Error message if the post creation failed\""
            },
            {
              "lineno": 95,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        post_id: str = SchemaField(description=\"The ID of the created Medium post\")\n        post_url: str = SchemaField(description=\"The URL of the created Medium post\")\n        published_at: int = SchemaField(\n            description=\"The timestamp when the post was published\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the post creation failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 39,
          "line": "class PublishToMediumBlock(Block):"
        },
        {
          "lineno": 96,
          "line": ""
        },
        {
          "lineno": 132,
          "line": ""
        },
        {
          "lineno": 170,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from enum import Enum"
    },
    {
      "lineno": 2,
      "line": "from typing import List, Literal"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from pydantic import SecretStr"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 7,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 8,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 9,
      "line": "    BlockSecret,"
    },
    {
      "lineno": 10,
      "line": "    CredentialsField,"
    },
    {
      "lineno": 11,
      "line": "    CredentialsMetaInput,"
    },
    {
      "lineno": 12,
      "line": "    SchemaField,"
    },
    {
      "lineno": 13,
      "line": "    SecretField,"
    },
    {
      "lineno": 14,
      "line": ")"
    },
    {
      "lineno": 15,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 16,
      "line": "from backend.util.request import requests"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": "TEST_CREDENTIALS = APIKeyCredentials("
    },
    {
      "lineno": 19,
      "line": "    id=\"01234567-89ab-cdef-0123-456789abcdef\","
    },
    {
      "lineno": 20,
      "line": "    provider=\"medium\","
    },
    {
      "lineno": 21,
      "line": "    api_key=SecretStr(\"mock-medium-api-key\"),"
    },
    {
      "lineno": 22,
      "line": "    title=\"Mock Medium API key\","
    },
    {
      "lineno": 23,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 24,
      "line": ")"
    },
    {
      "lineno": 25,
      "line": "TEST_CREDENTIALS_INPUT = {"
    },
    {
      "lineno": 26,
      "line": "    \"provider\": TEST_CREDENTIALS.provider,"
    },
    {
      "lineno": 27,
      "line": "    \"id\": TEST_CREDENTIALS.id,"
    },
    {
      "lineno": 28,
      "line": "    \"type\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 29,
      "line": "    \"title\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 30,
      "line": "}"
    },
    {
      "lineno": 31,
      "line": ""
    },
    {
      "lineno": 32,
      "line": ""
    },
    {
      "lineno": 37,
      "line": ""
    },
    {
      "lineno": 38,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from enum import Enum\nfrom typing import List, Literal\n\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    BlockSecret,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n    SecretField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"medium\",\n    api_key=SecretStr(\"mock-medium-api-key\"),\n    title=\"Mock Medium API key\",\n    expires_at=None,\n)",
      "successors": [
        {
          "id": 3,
          "label": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
          "successors": []
        }
      ]
    }
  ]
}