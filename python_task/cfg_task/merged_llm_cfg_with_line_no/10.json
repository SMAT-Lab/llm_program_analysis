{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 116,
  "functions": [
    {
      "name": "get_environment_variables",
      "type": "function",
      "start_line": 11,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "def get_environment_variables() -> Tuple[str, str, str, str, str]:"
        },
        {
          "lineno": 12,
          "line": "    \"\"\"Retrieve and return necessary environment variables.\"\"\""
        },
        {
          "lineno": 13,
          "line": "    try:"
        },
        {
          "lineno": 14,
          "line": "        with open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:"
        },
        {
          "lineno": 15,
          "line": "            event = json.load(f)"
        },
        {
          "lineno": 16,
          "line": ""
        },
        {
          "lineno": 17,
          "line": "        # Handle both PR and merge group events"
        },
        {
          "lineno": 18,
          "line": "        if \"pull_request\" in event:"
        },
        {
          "lineno": 19,
          "line": "            sha = event[\"pull_request\"][\"head\"][\"sha\"]"
        },
        {
          "lineno": 20,
          "line": "        else:"
        },
        {
          "lineno": 21,
          "line": "            sha = os.environ[\"GITHUB_SHA\"]"
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 23,
          "line": "        return ("
        },
        {
          "lineno": 24,
          "line": "            os.environ[\"GITHUB_API_URL\"],"
        },
        {
          "lineno": 25,
          "line": "            os.environ[\"GITHUB_REPOSITORY\"],"
        },
        {
          "lineno": 26,
          "line": "            sha,"
        },
        {
          "lineno": 27,
          "line": "            os.environ[\"GITHUB_TOKEN\"],"
        },
        {
          "lineno": 28,
          "line": "            os.environ[\"GITHUB_RUN_ID\"],"
        },
        {
          "lineno": 29,
          "line": "        )"
        },
        {
          "lineno": 30,
          "line": "    except KeyError as e:"
        },
        {
          "lineno": 31,
          "line": "        print(f\"Error: Missing required environment variable or event data: {e}\")"
        },
        {
          "lineno": 32,
          "line": "        sys.exit(1)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_environment_variables() -> Tuple[str, str, str, str, str]:\n    \"\"\"Retrieve and return necessary environment variables.\"\"\"",
          "successors": [
            {
              "id": 2,
              "label": "try:\n        with open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:\n            event = json.load(f)",
              "successors": [
                {
                  "id": 3,
                  "label": "if \"pull_request\" in event:\n            sha = event[\"pull_request\"][\"head\"][\"sha\"]\nreturn (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "else:\n            sha = os.environ[\"GITHUB_SHA\"]\nreturn (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "except KeyError as e:\n        print(f\"Error: Missing required environment variable or event data: {e}\")\n        sys.exit(1)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "make_api_request",
      "type": "function",
      "start_line": 35,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 35,
          "line": "def make_api_request(url: str, headers: Dict[str, str]) -> Dict:"
        },
        {
          "lineno": 36,
          "line": "    \"\"\"Make an API request and return the JSON response.\"\"\""
        },
        {
          "lineno": 37,
          "line": "    try:"
        },
        {
          "lineno": 38,
          "line": "        print(\"Making API request to:\", url)"
        },
        {
          "lineno": 39,
          "line": "        response = requests.get(url, headers=headers, timeout=10)"
        },
        {
          "lineno": 40,
          "line": "        response.raise_for_status()"
        },
        {
          "lineno": 41,
          "line": "        return response.json()"
        },
        {
          "lineno": 42,
          "line": "    except requests.RequestException as e:"
        },
        {
          "lineno": 43,
          "line": "        print(f\"Error: API request failed. {e}\")"
        },
        {
          "lineno": 44,
          "line": "        sys.exit(1)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def make_api_request(url: str, headers: Dict[str, str]) -> Dict:\n    \"\"\"Make an API request and return the JSON response.\"\"\"\ntry:\n    print(\"Making API request to:\", url)",
          "successors": [
            {
              "id": 3,
              "label": "response = requests.get(url, headers=headers, timeout=10)\nresponse.raise_for_status()\nreturn response.json()",
              "successors": []
            },
            {
              "id": 4,
              "label": "except requests.RequestException as e:\n    print(f\"Error: API request failed. {e}\")\n    sys.exit(1)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "process_check_runs",
      "type": "function",
      "start_line": 47,
      "end_line": 72,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 47,
          "line": "def process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:"
        },
        {
          "lineno": 48,
          "line": "    \"\"\"Process check runs and return their status.\"\"\""
        },
        {
          "lineno": 49,
          "line": "    runs_in_progress = False"
        },
        {
          "lineno": 50,
          "line": "    all_others_passed = True"
        },
        {
          "lineno": 51,
          "line": ""
        },
        {
          "lineno": 52,
          "line": "    for run in check_runs:"
        },
        {
          "lineno": 53,
          "line": "        if str(run[\"name\"]) != \"Check PR Status\":"
        },
        {
          "lineno": 54,
          "line": "            status = run[\"status\"]"
        },
        {
          "lineno": 55,
          "line": "            conclusion = run[\"conclusion\"]"
        },
        {
          "lineno": 56,
          "line": ""
        },
        {
          "lineno": 57,
          "line": "            if status == \"completed\":"
        },
        {
          "lineno": 58,
          "line": "                if conclusion not in [\"success\", \"skipped\", \"neutral\"]:"
        },
        {
          "lineno": 59,
          "line": "                    all_others_passed = False"
        },
        {
          "lineno": 60,
          "line": "                    print("
        },
        {
          "lineno": 61,
          "line": "                        f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\""
        },
        {
          "lineno": 62,
          "line": "                    )"
        },
        {
          "lineno": 63,
          "line": "            else:"
        },
        {
          "lineno": 64,
          "line": "                runs_in_progress = True"
        },
        {
          "lineno": 65,
          "line": "                print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")"
        },
        {
          "lineno": 66,
          "line": "                all_others_passed = False"
        },
        {
          "lineno": 67,
          "line": "        else:"
        },
        {
          "lineno": 68,
          "line": "            print("
        },
        {
          "lineno": 69,
          "line": "                f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\""
        },
        {
          "lineno": 70,
          "line": "            )"
        },
        {
          "lineno": 71,
          "line": ""
        },
        {
          "lineno": 72,
          "line": "    return runs_in_progress, all_others_passed"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:\n    \"\"\"Process check runs and return their status.\"\"\"\n    runs_in_progress = False\n    all_others_passed = True\n\n    for run in check_runs:\nif str(run[\"name\"]) != \"Check PR Status\":\n    status = run[\"status\"]\n    conclusion = run[\"conclusion\"]\n\n    if status == \"completed\":\n        if conclusion not in [\"success\", \"skipped\", \"neutral\"]:\n            all_others_passed = False\n            print(\n                f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\"\n            )\n    else:\n        runs_in_progress = True\n        print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\n        all_others_passed = False\nelse:\n    print(\n        f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\"\n    )",
          "successors": [
            {
              "id": 3,
              "label": "return runs_in_progress, all_others_passed",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 75,
      "end_line": 112,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 75,
          "line": "def main():"
        },
        {
          "lineno": 76,
          "line": "    api_url, repo, sha, github_token, current_run_id = get_environment_variables()"
        },
        {
          "lineno": 77,
          "line": ""
        },
        {
          "lineno": 78,
          "line": "    endpoint = f\"{api_url}/repos/{repo}/commits/{sha}/check-runs\""
        },
        {
          "lineno": 79,
          "line": "    headers = {"
        },
        {
          "lineno": 80,
          "line": "        \"Accept\": \"application/vnd.github.v3+json\","
        },
        {
          "lineno": 81,
          "line": "    }"
        },
        {
          "lineno": 82,
          "line": "    if github_token:"
        },
        {
          "lineno": 83,
          "line": "        headers[\"Authorization\"] = f\"token {github_token}\""
        },
        {
          "lineno": 84,
          "line": ""
        },
        {
          "lineno": 85,
          "line": "    print(f\"Current run ID: {current_run_id}\")"
        },
        {
          "lineno": 86,
          "line": ""
        },
        {
          "lineno": 87,
          "line": "    while True:"
        },
        {
          "lineno": 88,
          "line": "        data = make_api_request(endpoint, headers)"
        },
        {
          "lineno": 89,
          "line": ""
        },
        {
          "lineno": 90,
          "line": "        check_runs = data[\"check_runs\"]"
        },
        {
          "lineno": 91,
          "line": ""
        },
        {
          "lineno": 92,
          "line": "        print(\"Processing check runs...\")"
        },
        {
          "lineno": 93,
          "line": ""
        },
        {
          "lineno": 94,
          "line": "        print(check_runs)"
        },
        {
          "lineno": 95,
          "line": ""
        },
        {
          "lineno": 96,
          "line": "        runs_in_progress, all_others_passed = process_check_runs(check_runs)"
        },
        {
          "lineno": 97,
          "line": ""
        },
        {
          "lineno": 98,
          "line": "        if not runs_in_progress:"
        },
        {
          "lineno": 99,
          "line": "            break"
        },
        {
          "lineno": 100,
          "line": ""
        },
        {
          "lineno": 101,
          "line": "        print("
        },
        {
          "lineno": 102,
          "line": "            \"Some check runs are still in progress. \""
        },
        {
          "lineno": 103,
          "line": "            f\"Waiting {CHECK_INTERVAL} seconds before checking again...\""
        },
        {
          "lineno": 104,
          "line": "        )"
        },
        {
          "lineno": 105,
          "line": "        time.sleep(CHECK_INTERVAL)"
        },
        {
          "lineno": 106,
          "line": ""
        },
        {
          "lineno": 107,
          "line": "    if all_others_passed:"
        },
        {
          "lineno": 108,
          "line": "        print(\"All other completed check runs have passed. This check passes.\")"
        },
        {
          "lineno": 109,
          "line": "        sys.exit(0)"
        },
        {
          "lineno": 110,
          "line": "    else:"
        },
        {
          "lineno": 111,
          "line": "        print(\"Some check runs have failed or have not completed. This check fails.\")"
        },
        {
          "lineno": 112,
          "line": "        sys.exit(1)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def main():\n    api_url, repo, sha, github_token, current_run_id = get_environment_variables()\nendpoint = f\"{api_url}/repos/{repo}/commits/{sha}/check-runs\"\n    headers = {\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }",
          "successors": [
            {
              "id": 3,
              "label": "if github_token:\n        headers[\"Authorization\"] = f\"token {github_token}\"\nprint(f\"Current run ID: {current_run_id}\")",
              "successors": [
                {
                  "id": 5,
                  "label": "while True:",
                  "successors": [
                    {
                      "id": 6,
                      "label": "data = make_api_request(endpoint, headers)\n\n        check_runs = data[\"check_runs\"]\n\n        print(\"Processing check runs...\")\n\n        print(check_runs)\n\n        runs_in_progress, all_others_passed = process_check_runs(check_runs)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if not runs_in_progress:\n            break",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "label": "print(\n            \"Some check runs are still in progress. \"\n            f\"Waiting {CHECK_INTERVAL} seconds before checking again...\"\n        )\n        time.sleep(CHECK_INTERVAL)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "while True:",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "if all_others_passed:\n        print(\"All other completed check runs have passed. This check passes.\")\n        sys.exit(0)\n    else:\n        print(\"Some check runs have failed or have not completed. This check fails.\")\n        sys.exit(1)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import json"
    },
    {
      "lineno": 2,
      "line": "import os"
    },
    {
      "lineno": 3,
      "line": "import requests"
    },
    {
      "lineno": 4,
      "line": "import sys"
    },
    {
      "lineno": 5,
      "line": "import time"
    },
    {
      "lineno": 6,
      "line": "from typing import Dict, List, Tuple"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "CHECK_INTERVAL = 30"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 33,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 45,
      "line": ""
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 73,
      "line": ""
    },
    {
      "lineno": 74,
      "line": ""
    },
    {
      "lineno": 113,
      "line": ""
    },
    {
      "lineno": 114,
      "line": ""
    },
    {
      "lineno": 115,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 116,
      "line": "    main()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import json\nimport os\nimport requests\nimport sys\nimport time\nfrom typing import Dict, List, Tuple\nCHECK_INTERVAL = 30",
      "successors": [
        {
          "id": 3,
          "label": "if __name__ == \"__main__\":\nmain()",
          "successors": []
        }
      ]
    }
  ]
}