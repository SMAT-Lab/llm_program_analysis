{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [
    {
      "name": "get_highest_set_bit_position",
      "type": "function",
      "start_line": 1,
      "end_line": 28,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 1,
          "line": "def get_highest_set_bit_position(number: int) -> int:"
        },
        {
          "lineno": 2,
          "line": "    \"\"\""
        },
        {
          "lineno": 3,
          "line": "    Returns position of the highest set bit of a number."
        },
        {
          "lineno": 4,
          "line": "    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious"
        },
        {
          "lineno": 5,
          "line": "    >>> get_highest_set_bit_position(25)"
        },
        {
          "lineno": 6,
          "line": "    5"
        },
        {
          "lineno": 7,
          "line": "    >>> get_highest_set_bit_position(37)"
        },
        {
          "lineno": 8,
          "line": "    6"
        },
        {
          "lineno": 9,
          "line": "    >>> get_highest_set_bit_position(1)"
        },
        {
          "lineno": 10,
          "line": "    1"
        },
        {
          "lineno": 11,
          "line": "    >>> get_highest_set_bit_position(4)"
        },
        {
          "lineno": 12,
          "line": "    3"
        },
        {
          "lineno": 13,
          "line": "    >>> get_highest_set_bit_position(0)"
        },
        {
          "lineno": 14,
          "line": "    0"
        },
        {
          "lineno": 15,
          "line": "    >>> get_highest_set_bit_position(0.8)"
        },
        {
          "lineno": 16,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 17,
          "line": "        ..."
        },
        {
          "lineno": 18,
          "line": "    TypeError: Input value must be an 'int' type"
        },
        {
          "lineno": 19,
          "line": "    \"\"\""
        },
        {
          "lineno": 20,
          "line": "    if not isinstance(number, int):"
        },
        {
          "lineno": 21,
          "line": "        raise TypeError(\"Input value must be an 'int' type\")"
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 23,
          "line": "    position = 0"
        },
        {
          "lineno": 24,
          "line": "    while number:"
        },
        {
          "lineno": 25,
          "line": "        position += 1"
        },
        {
          "lineno": 26,
          "line": "        number >>= 1"
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 28,
          "line": "    return position"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_highest_set_bit_position(number: int) -> int:\n    \"\"\"\n    Returns position of the highest set bit of a number.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious\n    >>> get_highest_set_bit_position(25)\n    5\n    >>> get_highest_set_bit_position(37)\n    6\n    >>> get_highest_set_bit_position(1)\n    1\n    >>> get_highest_set_bit_position(4)\n    3\n    >>> get_highest_set_bit_position(0)\n    0\n    >>> get_highest_set_bit_position(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be an 'int' type\n    \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "    if not isinstance(number, int):\n        raise TypeError(\"Input value must be an 'int' type\")\n    position = 0",
              "successors": [
                {
                  "id": 5,
                  "label": "    while number:\n        position += 1\n        number >>= 1",
                  "successors": [
                    {
                      "id": 6,
                      "label": "    return position",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "    return position",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": ""
    },
    {
      "lineno": 31,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 32,
      "line": "    import doctest"
    },
    {
      "lineno": 33,
      "line": ""
    },
    {
      "lineno": 34,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "if __name__ == \"__main__\":\n    import doctest",
      "successors": [
        {
          "id": 3,
          "label": "    doctest.testmod()",
          "successors": []
        }
      ]
    }
  ]
}