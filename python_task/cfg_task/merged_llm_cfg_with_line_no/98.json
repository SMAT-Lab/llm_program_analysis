{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 466,
  "functions": [],
  "classes": [
    {
      "name": "TestValidadeFormat",
      "type": "class",
      "start_line": 17,
      "end_line": 466,
      "functions": [
        {
          "name": "test_error_message_return_and_return_type",
          "type": "function",
          "start_line": 19,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 19,
              "line": "    def test_error_message_return_and_return_type(self):"
            },
            {
              "lineno": 20,
              "line": "        line_num_unity = 1"
            },
            {
              "lineno": 21,
              "line": "        line_num_ten = 10"
            },
            {
              "lineno": 22,
              "line": "        line_num_hundred = 100"
            },
            {
              "lineno": 23,
              "line": "        line_num_thousand = 1000"
            },
            {
              "lineno": 24,
              "line": ""
            },
            {
              "lineno": 25,
              "line": "        msg = 'This is a unit test'"
            },
            {
              "lineno": 26,
              "line": ""
            },
            {
              "lineno": 27,
              "line": "        err_msg_unity = error_message(line_num_unity, msg)"
            },
            {
              "lineno": 28,
              "line": "        err_msg_ten = error_message(line_num_ten, msg)"
            },
            {
              "lineno": 29,
              "line": "        err_msg_hundred = error_message(line_num_hundred, msg)"
            },
            {
              "lineno": 30,
              "line": "        err_msg_thousand = error_message(line_num_thousand, msg)"
            },
            {
              "lineno": 31,
              "line": ""
            },
            {
              "lineno": 32,
              "line": "        self.assertIsInstance(err_msg_unity, str)"
            },
            {
              "lineno": 33,
              "line": "        self.assertIsInstance(err_msg_ten, str)"
            },
            {
              "lineno": 34,
              "line": "        self.assertIsInstance(err_msg_hundred, str)"
            },
            {
              "lineno": 35,
              "line": "        self.assertIsInstance(err_msg_thousand, str)"
            },
            {
              "lineno": 36,
              "line": ""
            },
            {
              "lineno": 37,
              "line": "        self.assertEqual(err_msg_unity, '(L002) This is a unit test')"
            },
            {
              "lineno": 38,
              "line": "        self.assertEqual(err_msg_ten, '(L011) This is a unit test')"
            },
            {
              "lineno": 39,
              "line": "        self.assertEqual(err_msg_hundred, '(L101) This is a unit test')"
            },
            {
              "lineno": 40,
              "line": "        self.assertEqual(err_msg_thousand, '(L1001) This is a unit test')"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_error_message_return_and_return_type(self):\n        line_num_unity = 1\n        line_num_ten = 10\n        line_num_hundred = 100\n        line_num_thousand = 1000\n        msg = 'This is a unit test'\n        err_msg_unity = error_message(line_num_unity, msg)\n        err_msg_ten = error_message(line_num_ten, msg)\n        err_msg_hundred = error_message(line_num_hundred, msg)\n        err_msg_thousand = error_message(line_num_thousand, msg)",
              "successors": [
                {
                  "id": 3,
                  "label": "        self.assertIsInstance(err_msg_unity, str)\n        self.assertIsInstance(err_msg_ten, str)\n        self.assertIsInstance(err_msg_hundred, str)\n        self.assertIsInstance(err_msg_thousand, str)\n        self.assertEqual(err_msg_unity, '(L002) This is a unit test')\n        self.assertEqual(err_msg_ten, '(L011) This is a unit test')\n        self.assertEqual(err_msg_hundred, '(L101) This is a unit test')\n        self.assertEqual(err_msg_thousand, '(L1001) This is a unit test')",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "test_if_get_categories_content_return_correct_data_of_categories",
          "type": "function",
          "start_line": 42,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    def test_if_get_categories_content_return_correct_data_of_categories(self):"
            },
            {
              "lineno": 43,
              "line": "        fake_contents = ["
            },
            {
              "lineno": 44,
              "line": "            '### A',"
            },
            {
              "lineno": 45,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 46,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 47,
              "line": "            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 48,
              "line": "            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 49,
              "line": "            '',"
            },
            {
              "lineno": 50,
              "line": "            '### B',"
            },
            {
              "lineno": 51,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 52,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 53,
              "line": "            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 54,
              "line": "            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'"
            },
            {
              "lineno": 55,
              "line": "        ]"
            },
            {
              "lineno": 56,
              "line": ""
            },
            {
              "lineno": 57,
              "line": "        result = get_categories_content(fake_contents)"
            },
            {
              "lineno": 58,
              "line": "        self.assertIsInstance(result, tuple)"
            },
            {
              "lineno": 59,
              "line": ""
            },
            {
              "lineno": 60,
              "line": "        categories, category_line_num = result"
            },
            {
              "lineno": 61,
              "line": "        self.assertIsInstance(categories, dict)"
            },
            {
              "lineno": 62,
              "line": "        self.assertIsInstance(category_line_num, dict)"
            },
            {
              "lineno": 63,
              "line": ""
            },
            {
              "lineno": 64,
              "line": "        expected_result = ({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})"
            },
            {
              "lineno": 65,
              "line": ""
            },
            {
              "lineno": 66,
              "line": "        for res, ex_res in zip(result, expected_result):"
            },
            {
              "lineno": 67,
              "line": ""
            },
            {
              "lineno": 68,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 69,
              "line": "                self.assertEqual(res, ex_res)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_if_get_categories_content_return_correct_data_of_categories(self):\n        fake_contents = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n        result = get_categories_content(fake_contents)\n        self.assertIsInstance(result, tuple)",
              "successors": [
                {
                  "id": 3,
                  "label": "        categories, category_line_num = result\n        self.assertIsInstance(categories, dict)\n        self.assertIsInstance(category_line_num, dict)\n        expected_result = ({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        for res, ex_res in zip(result, expected_result):",
                      "successors": [
                        {
                          "id": 6,
                          "label": "            with self.subTest():\n                self.assertEqual(res, ex_res)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "test_if_check_alphabetical_order_return_correct_msg_error",
          "type": "function",
          "start_line": 71,
          "end_line": 118,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 71,
              "line": "    def test_if_check_alphabetical_order_return_correct_msg_error(self):"
            },
            {
              "lineno": 72,
              "line": "        correct_lines = ["
            },
            {
              "lineno": 73,
              "line": "            '### A',"
            },
            {
              "lineno": 74,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 75,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 76,
              "line": "            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 77,
              "line": "            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 78,
              "line": "            '',"
            },
            {
              "lineno": 79,
              "line": "            '### B',"
            },
            {
              "lineno": 80,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 81,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 82,
              "line": "            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 83,
              "line": "            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'"
            },
            {
              "lineno": 84,
              "line": "        ]"
            },
            {
              "lineno": 85,
              "line": ""
            },
            {
              "lineno": 86,
              "line": "        incorrect_lines = ["
            },
            {
              "lineno": 87,
              "line": "            '### A',"
            },
            {
              "lineno": 88,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 89,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 90,
              "line": "            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 91,
              "line": "            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 92,
              "line": "            '',"
            },
            {
              "lineno": 93,
              "line": "            '### B',"
            },
            {
              "lineno": 94,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 95,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 96,
              "line": "            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 97,
              "line": "            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'"
            },
            {
              "lineno": 98,
              "line": "        ]"
            },
            {
              "lineno": 99,
              "line": ""
            },
            {
              "lineno": 100,
              "line": ""
            },
            {
              "lineno": 101,
              "line": "        err_msgs_1 = check_alphabetical_order(correct_lines)"
            },
            {
              "lineno": 102,
              "line": "        err_msgs_2 = check_alphabetical_order(incorrect_lines)"
            },
            {
              "lineno": 103,
              "line": ""
            },
            {
              "lineno": 104,
              "line": "        self.assertIsInstance(err_msgs_1, list)"
            },
            {
              "lineno": 105,
              "line": "        self.assertIsInstance(err_msgs_2, list)"
            },
            {
              "lineno": 106,
              "line": ""
            },
            {
              "lineno": 107,
              "line": "        self.assertEqual(len(err_msgs_1), 0)"
            },
            {
              "lineno": 108,
              "line": "        self.assertEqual(len(err_msgs_2), 2)"
            },
            {
              "lineno": 109,
              "line": ""
            },
            {
              "lineno": 110,
              "line": "        expected_err_msgs = ["
            },
            {
              "lineno": 111,
              "line": "            '(L001) A category is not alphabetical order',"
            },
            {
              "lineno": 112,
              "line": "            '(L007) B category is not alphabetical order'"
            },
            {
              "lineno": 113,
              "line": "        ]"
            },
            {
              "lineno": 114,
              "line": ""
            },
            {
              "lineno": 115,
              "line": "        for err_msg, ex_err_msg in zip(err_msgs_2, expected_err_msgs):"
            },
            {
              "lineno": 116,
              "line": ""
            },
            {
              "lineno": 117,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 118,
              "line": "                self.assertEqual(err_msg, ex_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_if_check_alphabetical_order_return_correct_msg_error(self):\n        correct_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n        incorrect_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]",
              "successors": [
                {
                  "id": 3,
                  "label": "        err_msgs_1 = check_alphabetical_order(correct_lines)\n        err_msgs_2 = check_alphabetical_order(incorrect_lines)\n        self.assertIsInstance(err_msgs_1, list)\n        self.assertIsInstance(err_msgs_2, list)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        self.assertEqual(len(err_msgs_1), 0)\n        self.assertEqual(len(err_msgs_2), 2)\n        expected_err_msgs = [\n            '(L001) A category is not alphabetical order',\n            '(L007) B category is not alphabetical order'\n        ]",
                      "successors": [
                        {
                          "id": 7,
                          "label": "        for err_msg, ex_err_msg in zip(err_msgs_2, expected_err_msgs):\n\n            with self.subTest():\n                self.assertEqual(err_msg, ex_err_msg)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_title_with_correct_title",
          "type": "function",
          "start_line": 120,
          "end_line": 127,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 120,
              "line": "    def test_check_title_with_correct_title(self):"
            },
            {
              "lineno": 121,
              "line": "        raw_title = '[A](https://www.ex.com)'"
            },
            {
              "lineno": 122,
              "line": ""
            },
            {
              "lineno": 123,
              "line": "        err_msgs = check_title(0, raw_title)"
            },
            {
              "lineno": 124,
              "line": ""
            },
            {
              "lineno": 125,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 126,
              "line": "        self.assertEqual(len(err_msgs), 0)"
            },
            {
              "lineno": 127,
              "line": "        self.assertEqual(err_msgs, [])"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_title_with_correct_title(self):\n        raw_title = '[A](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
              "successors": []
            }
          ]
        },
        {
          "name": "test_check_title_with_markdown_syntax_incorrect",
          "type": "function",
          "start_line": 129,
          "end_line": 140,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 129,
              "line": "    def test_check_title_with_markdown_syntax_incorrect(self):"
            },
            {
              "lineno": 130,
              "line": "        raw_title = '[A(https://www.ex.com)'"
            },
            {
              "lineno": 131,
              "line": ""
            },
            {
              "lineno": 132,
              "line": "        err_msgs = check_title(0, raw_title)"
            },
            {
              "lineno": 133,
              "line": ""
            },
            {
              "lineno": 134,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 135,
              "line": "        self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 136,
              "line": "        "
            },
            {
              "lineno": 137,
              "line": "        err_msg = err_msgs[0]"
            },
            {
              "lineno": 138,
              "line": "        expected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'"
            },
            {
              "lineno": 139,
              "line": ""
            },
            {
              "lineno": 140,
              "line": "        self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_title_with_markdown_syntax_incorrect(self):\n        raw_title = '[A(https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'\n\n        self.assertEqual(err_msg, expected_err_msg)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_check_title_with_api_at_the_end_of_the_title",
          "type": "function",
          "start_line": 142,
          "end_line": 153,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 142,
              "line": "    def test_check_title_with_api_at_the_end_of_the_title(self):"
            },
            {
              "lineno": 143,
              "line": "        raw_title = '[A API](https://www.ex.com)'"
            },
            {
              "lineno": 144,
              "line": ""
            },
            {
              "lineno": 145,
              "line": "        err_msgs = check_title(0, raw_title)"
            },
            {
              "lineno": 146,
              "line": "        "
            },
            {
              "lineno": 147,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 148,
              "line": "        self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 149,
              "line": "        "
            },
            {
              "lineno": 150,
              "line": "        err_msg = err_msgs[0]"
            },
            {
              "lineno": 151,
              "line": "        expected_err_msg = '(L001) Title should not end with \"... API\". Every entry is an API here!'"
            },
            {
              "lineno": 152,
              "line": ""
            },
            {
              "lineno": 153,
              "line": "        self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_title_with_api_at_the_end_of_the_title(self):\n        raw_title = '[A API](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title should not end with \"... API\". Every entry is an API here!'\n\n        self.assertEqual(err_msg, expected_err_msg)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_check_description_with_correct_description",
          "type": "function",
          "start_line": 155,
          "end_line": 162,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 155,
              "line": "    def test_check_description_with_correct_description(self):"
            },
            {
              "lineno": 156,
              "line": "        desc = 'This is a fake description'"
            },
            {
              "lineno": 157,
              "line": ""
            },
            {
              "lineno": 158,
              "line": "        err_msgs = check_description(0, desc)"
            },
            {
              "lineno": 159,
              "line": ""
            },
            {
              "lineno": 160,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 161,
              "line": "        self.assertEqual(len(err_msgs), 0)"
            },
            {
              "lineno": 162,
              "line": "        self.assertEqual(err_msgs, [])"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_description_with_correct_description(self):\n        desc = 'This is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
              "successors": []
            }
          ]
        },
        {
          "name": "test_check_description_with_first_char_is_not_capitalized",
          "type": "function",
          "start_line": 164,
          "end_line": 176,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 164,
              "line": "    def test_check_description_with_first_char_is_not_capitalized(self):"
            },
            {
              "lineno": 165,
              "line": "        desc = 'this is a fake description'"
            },
            {
              "lineno": 166,
              "line": ""
            },
            {
              "lineno": 167,
              "line": "        err_msgs = check_description(0, desc)"
            },
            {
              "lineno": 168,
              "line": ""
            },
            {
              "lineno": 169,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 170,
              "line": "        self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 171,
              "line": "        "
            },
            {
              "lineno": 172,
              "line": "        err_msg = err_msgs[0]"
            },
            {
              "lineno": 173,
              "line": "        expected_err_msg = '(L001) first character of description is not capitalized'"
            },
            {
              "lineno": 174,
              "line": ""
            },
            {
              "lineno": 175,
              "line": "        self.assertIsInstance(err_msg, str)"
            },
            {
              "lineno": 176,
              "line": "        self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_description_with_first_char_is_not_capitalized(self):\n        desc = 'this is a fake description'",
              "successors": [
                {
                  "id": 3,
                  "label": "        err_msgs = check_description(0, desc)\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) first character of description is not capitalized'\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_description_with_punctuation_in_the_end",
          "type": "function",
          "start_line": 178,
          "end_line": 195,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 178,
              "line": "    def test_check_description_with_punctuation_in_the_end(self):"
            },
            {
              "lineno": 179,
              "line": "        base_desc = 'This is a fake description'"
            },
            {
              "lineno": 180,
              "line": "        punctuation = r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\""
            },
            {
              "lineno": 181,
              "line": "        desc_with_punc = [base_desc + punc for punc in punctuation]"
            },
            {
              "lineno": 182,
              "line": "        "
            },
            {
              "lineno": 183,
              "line": "        for desc in desc_with_punc:"
            },
            {
              "lineno": 184,
              "line": ""
            },
            {
              "lineno": 185,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 186,
              "line": "                err_msgs = check_description(0, desc)"
            },
            {
              "lineno": 187,
              "line": ""
            },
            {
              "lineno": 188,
              "line": "                self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 189,
              "line": "                self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 190,
              "line": "        "
            },
            {
              "lineno": 191,
              "line": "                err_msg = err_msgs[0]"
            },
            {
              "lineno": 192,
              "line": "                expected_err_msg = f'(L001) description should not end with {desc[-1]}'"
            },
            {
              "lineno": 193,
              "line": ""
            },
            {
              "lineno": 194,
              "line": "                self.assertIsInstance(err_msg, str)"
            },
            {
              "lineno": 195,
              "line": "                self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_description_with_punctuation_in_the_end(self):\n        base_desc = 'This is a fake description'\n        punctuation = r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\"\n        desc_with_punc = [base_desc + punc for punc in punctuation]\n        \n        for desc in desc_with_punc:\n            with self.subTest():\n                err_msgs = check_description(0, desc)\n\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_check_description_that_exceeds_the_character_limit",
          "type": "function",
          "start_line": 197,
          "end_line": 210,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 197,
              "line": "    def test_check_description_that_exceeds_the_character_limit(self):"
            },
            {
              "lineno": 198,
              "line": "        long_desc = 'Desc' * max_description_length"
            },
            {
              "lineno": 199,
              "line": "        long_desc_length = len(long_desc)"
            },
            {
              "lineno": 200,
              "line": ""
            },
            {
              "lineno": 201,
              "line": "        err_msgs = check_description(0, long_desc)"
            },
            {
              "lineno": 202,
              "line": ""
            },
            {
              "lineno": 203,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 204,
              "line": "        self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 205,
              "line": ""
            },
            {
              "lineno": 206,
              "line": "        err_msg = err_msgs[0]"
            },
            {
              "lineno": 207,
              "line": "        expected_err_msg = f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'"
            },
            {
              "lineno": 208,
              "line": ""
            },
            {
              "lineno": 209,
              "line": "        self.assertIsInstance(err_msg, str)"
            },
            {
              "lineno": 210,
              "line": "        self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_description_that_exceeds_the_character_limit(self):\n        long_desc = 'Desc' * max_description_length\n        long_desc_length = len(long_desc)\n\n        err_msgs = check_description(0, long_desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n\n        err_msg = err_msgs[0]\n        expected_err_msg = f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)",
              "successors": []
            }
          ]
        },
        {
          "name": "test_check_auth_with_valid_auth",
          "type": "function",
          "start_line": 212,
          "end_line": 221,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 212,
              "line": "    def test_check_auth_with_valid_auth(self):"
            },
            {
              "lineno": 213,
              "line": "        auth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']"
            },
            {
              "lineno": 214,
              "line": "        auth_valid.append('No')"
            },
            {
              "lineno": 215,
              "line": ""
            },
            {
              "lineno": 216,
              "line": "        for auth in auth_valid:"
            },
            {
              "lineno": 217,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 218,
              "line": "                err_msgs = check_auth(0, auth)"
            },
            {
              "lineno": 219,
              "line": "                self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 220,
              "line": "                self.assertEqual(len(err_msgs), 0)"
            },
            {
              "lineno": 221,
              "line": "                self.assertEqual(err_msgs, [])"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_auth_with_valid_auth(self):\n        auth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']\n        auth_valid.append('No')",
              "successors": [
                {
                  "id": 2,
                  "label": "        for auth in auth_valid:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "                self.assertEqual(err_msgs, [])",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_auth_without_backtick",
          "type": "function",
          "start_line": 223,
          "end_line": 236,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 223,
              "line": "    def test_check_auth_without_backtick(self):"
            },
            {
              "lineno": 224,
              "line": "        auth_without_backtick = [auth for auth in auth_keys if auth != 'No']"
            },
            {
              "lineno": 225,
              "line": ""
            },
            {
              "lineno": 226,
              "line": "        for auth in auth_without_backtick:"
            },
            {
              "lineno": 227,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 228,
              "line": "                err_msgs = check_auth(0, auth)"
            },
            {
              "lineno": 229,
              "line": "                self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 230,
              "line": "                self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 231,
              "line": ""
            },
            {
              "lineno": 232,
              "line": "                err_msg = err_msgs[0]"
            },
            {
              "lineno": 233,
              "line": "                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'"
            },
            {
              "lineno": 234,
              "line": ""
            },
            {
              "lineno": 235,
              "line": "                self.assertIsInstance(err_msg, str)"
            },
            {
              "lineno": 236,
              "line": "                self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_auth_without_backtick(self):\n        auth_without_backtick = [auth for auth in auth_keys if auth != 'No']",
              "successors": [
                {
                  "id": 2,
                  "label": "        for auth in auth_without_backtick:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_auth_with_invalid_auth",
          "type": "function",
          "start_line": 238,
          "end_line": 269,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 238,
              "line": "    def test_check_auth_with_invalid_auth(self):"
            },
            {
              "lineno": 239,
              "line": "        auth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']"
            },
            {
              "lineno": 240,
              "line": "        auth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']"
            },
            {
              "lineno": 241,
              "line": ""
            },
            {
              "lineno": 242,
              "line": "        for auth in auth_invalid_without_backtick:"
            },
            {
              "lineno": 243,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 244,
              "line": "                err_msgs = check_auth(0, auth)"
            },
            {
              "lineno": 245,
              "line": "                self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 246,
              "line": "                self.assertEqual(len(err_msgs), 2)"
            },
            {
              "lineno": 247,
              "line": ""
            },
            {
              "lineno": 248,
              "line": "                err_msg_1 = err_msgs[0]"
            },
            {
              "lineno": 249,
              "line": "                err_msg_2 = err_msgs[1]"
            },
            {
              "lineno": 250,
              "line": ""
            },
            {
              "lineno": 251,
              "line": "                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'"
            },
            {
              "lineno": 252,
              "line": "                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'"
            },
            {
              "lineno": 253,
              "line": ""
            },
            {
              "lineno": 254,
              "line": "                self.assertIsInstance(err_msg_1, str)"
            },
            {
              "lineno": 255,
              "line": "                self.assertIsInstance(err_msg_2, str)"
            },
            {
              "lineno": 256,
              "line": "                self.assertEqual(err_msg_1, expected_err_msg_1)"
            },
            {
              "lineno": 257,
              "line": "                self.assertEqual(err_msg_2, expected_err_msg_2)"
            },
            {
              "lineno": 258,
              "line": ""
            },
            {
              "lineno": 259,
              "line": "        for auth in auth_invalid_with_backtick:"
            },
            {
              "lineno": 260,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 261,
              "line": "                err_msgs = check_auth(0, auth)"
            },
            {
              "lineno": 262,
              "line": "                self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 263,
              "line": "                self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 264,
              "line": ""
            },
            {
              "lineno": 265,
              "line": "                err_msg = err_msgs[0]"
            },
            {
              "lineno": 266,
              "line": "                expected_err_msg = f'(L001) {auth} is not a valid Auth option'"
            },
            {
              "lineno": 267,
              "line": ""
            },
            {
              "lineno": 268,
              "line": "                self.assertIsInstance(err_msg, str)"
            },
            {
              "lineno": 269,
              "line": "                self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_auth_with_invalid_auth(self):\n        auth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']\n        auth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']\n",
              "successors": [
                {
                  "id": 2,
                  "label": "        for auth in auth_invalid_without_backtick:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n\n                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n\n                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)\n",
                      "successors": [
                        {
                          "id": 5,
                          "label": "        for auth in auth_invalid_with_backtick:",
                          "successors": [
                            {
                              "id": 6,
                              "label": "            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_https_with_valid_https",
          "type": "function",
          "start_line": 271,
          "end_line": 277,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 271,
              "line": "    def test_check_https_with_valid_https(self):"
            },
            {
              "lineno": 272,
              "line": "        for https in https_keys:"
            },
            {
              "lineno": 273,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 274,
              "line": "                err_msgs = check_https(0, https)"
            },
            {
              "lineno": 275,
              "line": "                self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 276,
              "line": "                self.assertEqual(len(err_msgs), 0)"
            },
            {
              "lineno": 277,
              "line": "                self.assertEqual(err_msgs, [])"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_https_with_valid_https(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "        for https in https_keys:\n            with self.subTest():",
                  "successors": [
                    {
                      "id": 3,
                      "label": "                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_https_with_invalid_https",
          "type": "function",
          "start_line": 279,
          "end_line": 292,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 279,
              "line": "    def test_check_https_with_invalid_https(self):"
            },
            {
              "lineno": 280,
              "line": "        invalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']"
            },
            {
              "lineno": 281,
              "line": ""
            },
            {
              "lineno": 282,
              "line": "        for https in invalid_https_keys:"
            },
            {
              "lineno": 283,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 284,
              "line": "                err_msgs = check_https(0, https)"
            },
            {
              "lineno": 285,
              "line": "                self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 286,
              "line": "                self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 287,
              "line": ""
            },
            {
              "lineno": 288,
              "line": "                err_msg = err_msgs[0]"
            },
            {
              "lineno": 289,
              "line": "                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'"
            },
            {
              "lineno": 290,
              "line": ""
            },
            {
              "lineno": 291,
              "line": "                self.assertIsInstance(err_msg, str)"
            },
            {
              "lineno": 292,
              "line": "                self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_https_with_invalid_https(self):\n        invalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']\n\n        for https in invalid_https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)",
              "successors": [
                {
                  "id": 3,
                  "label": "        for https in invalid_https_keys:",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_cors_with_valid_cors",
          "type": "function",
          "start_line": 294,
          "end_line": 300,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 294,
              "line": "    def test_check_cors_with_valid_cors(self):"
            },
            {
              "lineno": 295,
              "line": "        for cors in cors_keys:"
            },
            {
              "lineno": 296,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 297,
              "line": "                err_msgs = check_cors(0, cors)"
            },
            {
              "lineno": 298,
              "line": "                self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 299,
              "line": "                self.assertEqual(len(err_msgs), 0)"
            },
            {
              "lineno": 300,
              "line": "                self.assertEqual(err_msgs, [])"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_cors_with_valid_cors(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "        for cors in cors_keys:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_cors_with_invalid_cors",
          "type": "function",
          "start_line": 302,
          "end_line": 315,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 302,
              "line": "    def test_check_cors_with_invalid_cors(self):"
            },
            {
              "lineno": 303,
              "line": "        invalid_cors_keys = ['yes', 'no', 'unknown', 'cors']"
            },
            {
              "lineno": 304,
              "line": ""
            },
            {
              "lineno": 305,
              "line": "        for cors in invalid_cors_keys:"
            },
            {
              "lineno": 306,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 307,
              "line": "                err_msgs = check_cors(0, cors)"
            },
            {
              "lineno": 308,
              "line": "                self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 309,
              "line": "                self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 310,
              "line": ""
            },
            {
              "lineno": 311,
              "line": "                err_msg = err_msgs[0]"
            },
            {
              "lineno": 312,
              "line": "                expected_err_msg = f'(L001) {cors} is not a valid CORS option'"
            },
            {
              "lineno": 313,
              "line": ""
            },
            {
              "lineno": 314,
              "line": "                self.assertIsInstance(err_msg, str)"
            },
            {
              "lineno": 315,
              "line": "                self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def test_check_cors_with_invalid_cors(self):\n    invalid_cors_keys = ['yes', 'no', 'unknown', 'cors']",
              "successors": [
                {
                  "id": 2,
                  "label": "for cors in invalid_cors_keys:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "with self.subTest():\n    err_msgs = check_cors(0, cors)\nself.assertIsInstance(err_msgs, list)\nself.assertEqual(len(err_msgs), 1)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "err_msg = err_msgs[0]\nexpected_err_msg = f'(L001) {cors} is not a valid CORS option'\nself.assertIsInstance(err_msg, str)\nself.assertEqual(err_msg, expected_err_msg)",
                          "successors": [
                            {
                              "id": 7,
                              "label": "for cors in invalid_cors_keys:",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_entry_with_correct_segments",
          "type": "function",
          "start_line": 317,
          "end_line": 324,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 317,
              "line": "    def test_check_entry_with_correct_segments(self):"
            },
            {
              "lineno": 318,
              "line": "        correct_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']"
            },
            {
              "lineno": 319,
              "line": ""
            },
            {
              "lineno": 320,
              "line": "        err_msgs = check_entry(0, correct_segments)"
            },
            {
              "lineno": 321,
              "line": "        "
            },
            {
              "lineno": 322,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 323,
              "line": "        self.assertEqual(len(err_msgs), 0)"
            },
            {
              "lineno": 324,
              "line": "        self.assertEqual(err_msgs, [])"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_entry_with_correct_segments(self):\n        correct_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']",
              "successors": [
                {
                  "id": 3,
                  "label": "        err_msgs = check_entry(0, correct_segments)\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_entry_with_incorrect_segments",
          "type": "function",
          "start_line": 326,
          "end_line": 345,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 326,
              "line": "    def test_check_entry_with_incorrect_segments(self):"
            },
            {
              "lineno": 327,
              "line": "        incorrect_segments = ['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes', 'yes']"
            },
            {
              "lineno": 328,
              "line": ""
            },
            {
              "lineno": 329,
              "line": "        err_msgs = check_entry(0, incorrect_segments)"
            },
            {
              "lineno": 330,
              "line": "        expected_err_msgs = ["
            },
            {
              "lineno": 331,
              "line": "            '(L001) Title should not end with \"... API\". Every entry is an API here!',"
            },
            {
              "lineno": 332,
              "line": "            '(L001) first character of description is not capitalized',"
            },
            {
              "lineno": 333,
              "line": "            '(L001) description should not end with .',"
            },
            {
              "lineno": 334,
              "line": "            '(L001) auth value is not enclosed with `backticks`',"
            },
            {
              "lineno": 335,
              "line": "            '(L001) yes is not a valid Auth option',"
            },
            {
              "lineno": 336,
              "line": "            '(L001) yes is not a valid HTTPS option',"
            },
            {
              "lineno": 337,
              "line": "            '(L001) yes is not a valid CORS option'"
            },
            {
              "lineno": 338,
              "line": "        ]"
            },
            {
              "lineno": 339,
              "line": ""
            },
            {
              "lineno": 340,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 341,
              "line": "        self.assertEqual(len(err_msgs), 7)"
            },
            {
              "lineno": 342,
              "line": "        for err_msg in err_msgs:"
            },
            {
              "lineno": 343,
              "line": "            with self.subTest():"
            },
            {
              "lineno": 344,
              "line": "                self.assertIsInstance(err_msg, str)"
            },
            {
              "lineno": 345,
              "line": "        self.assertEqual(err_msgs, expected_err_msgs)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "   def test_check_entry_with_incorrect_segments(self): incorrect_segments=[.... pass',['../{rew.... def   agrees to rationale,,,, what subttest ---",
              "successors": []
            }
          ]
        },
        {
          "name": "test_check_file_format_with_correct_format",
          "type": "function",
          "start_line": 347,
          "end_line": 372,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 347,
              "line": "    def test_check_file_format_with_correct_format(self):"
            },
            {
              "lineno": 348,
              "line": "        correct_format = ["
            },
            {
              "lineno": 349,
              "line": "            '## Index',"
            },
            {
              "lineno": 350,
              "line": "            '* [A](#a)',"
            },
            {
              "lineno": 351,
              "line": "            '* [B](#b)',"
            },
            {
              "lineno": 352,
              "line": "            '',"
            },
            {
              "lineno": 353,
              "line": "            '### A',"
            },
            {
              "lineno": 354,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 355,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 356,
              "line": "            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 357,
              "line": "            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 358,
              "line": "            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 359,
              "line": "            '',"
            },
            {
              "lineno": 360,
              "line": "            '### B',"
            },
            {
              "lineno": 361,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 362,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 363,
              "line": "            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 364,
              "line": "            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 365,
              "line": "            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'"
            },
            {
              "lineno": 366,
              "line": "        ]"
            },
            {
              "lineno": 367,
              "line": ""
            },
            {
              "lineno": 368,
              "line": "        err_msgs = check_file_format(lines=correct_format)"
            },
            {
              "lineno": 369,
              "line": ""
            },
            {
              "lineno": 370,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 371,
              "line": "        self.assertEqual(len(err_msgs), 0)"
            },
            {
              "lineno": 372,
              "line": "        self.assertEqual(err_msgs, [])"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_file_format_with_correct_format(self):\n        correct_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n        err_msgs = check_file_format(lines=correct_format)",
              "successors": [
                {
                  "id": 3,
                  "label": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_file_format_with_category_header_not_added_to_index",
          "type": "function",
          "start_line": 374,
          "end_line": 392,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 374,
              "line": "    def test_check_file_format_with_category_header_not_added_to_index(self):"
            },
            {
              "lineno": 375,
              "line": "        incorrect_format = ["
            },
            {
              "lineno": 376,
              "line": "            '## Index',"
            },
            {
              "lineno": 377,
              "line": "            '',"
            },
            {
              "lineno": 378,
              "line": "            '### A',"
            },
            {
              "lineno": 379,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 380,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 381,
              "line": "            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 382,
              "line": "            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 383,
              "line": "            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 384,
              "line": "        ]"
            },
            {
              "lineno": 385,
              "line": ""
            },
            {
              "lineno": 386,
              "line": "        err_msgs = check_file_format(lines=incorrect_format)"
            },
            {
              "lineno": 387,
              "line": "        expected_err_msg = '(L003) category header (A) not added to Index section'"
            },
            {
              "lineno": 388,
              "line": ""
            },
            {
              "lineno": 389,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 390,
              "line": "        self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 391,
              "line": "        err_msg = err_msgs[0]"
            },
            {
              "lineno": 392,
              "line": "        self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_file_format_with_category_header_not_added_to_index(self):\n        incorrect_format = [\n            '## Index',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = '(L003) category header (A) not added to Index section'",
              "successors": [
                {
                  "id": 3,
                  "label": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_file_format_with_category_without_min_entries",
          "type": "function",
          "start_line": 394,
          "end_line": 422,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 394,
              "line": "    def test_check_file_format_with_category_without_min_entries(self):"
            },
            {
              "lineno": 395,
              "line": "        incorrect_format = ["
            },
            {
              "lineno": 396,
              "line": "            '## Index',"
            },
            {
              "lineno": 397,
              "line": "            '* [A](#a)',"
            },
            {
              "lineno": 398,
              "line": "            '* [B](#b)',"
            },
            {
              "lineno": 399,
              "line": "            '',"
            },
            {
              "lineno": 400,
              "line": "            '### A',"
            },
            {
              "lineno": 401,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 402,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 403,
              "line": "            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 404,
              "line": "            '',"
            },
            {
              "lineno": 405,
              "line": "            '### B',"
            },
            {
              "lineno": 406,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 407,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 408,
              "line": "            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 409,
              "line": "            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 410,
              "line": "            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'"
            },
            {
              "lineno": 411,
              "line": "        ]"
            },
            {
              "lineno": 412,
              "line": ""
            },
            {
              "lineno": 413,
              "line": "        category_with_err = 'A'"
            },
            {
              "lineno": 414,
              "line": "        num_in_category = 1"
            },
            {
              "lineno": 415,
              "line": ""
            },
            {
              "lineno": 416,
              "line": "        err_msgs = check_file_format(lines=incorrect_format)"
            },
            {
              "lineno": 417,
              "line": "        expected_err_msg = f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'"
            },
            {
              "lineno": 418,
              "line": ""
            },
            {
              "lineno": 419,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 420,
              "line": "        self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 421,
              "line": "        err_msg = err_msgs[0]"
            },
            {
              "lineno": 422,
              "line": "        self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_file_format_with_category_without_min_entries(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        category_with_err = 'A'\n        num_in_category = 1\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'",
              "successors": [
                {
                  "id": 3,
                  "label": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_file_format_entry_without_all_necessary_columns",
          "type": "function",
          "start_line": 424,
          "end_line": 445,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 424,
              "line": "    def test_check_file_format_entry_without_all_necessary_columns(self):"
            },
            {
              "lineno": 425,
              "line": "        incorrect_format = ["
            },
            {
              "lineno": 426,
              "line": "            '## Index',"
            },
            {
              "lineno": 427,
              "line": "            '* [A](#a)',"
            },
            {
              "lineno": 428,
              "line": "            '',"
            },
            {
              "lineno": 429,
              "line": "            '### A',"
            },
            {
              "lineno": 430,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 431,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 432,
              "line": "            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 433,
              "line": "            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors"
            },
            {
              "lineno": 434,
              "line": "            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 435,
              "line": "        ]"
            },
            {
              "lineno": 436,
              "line": ""
            },
            {
              "lineno": 437,
              "line": "        current_segments_num = 3"
            },
            {
              "lineno": 438,
              "line": ""
            },
            {
              "lineno": 439,
              "line": "        err_msgs = check_file_format(lines=incorrect_format)"
            },
            {
              "lineno": 440,
              "line": "        expected_err_msg = f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'"
            },
            {
              "lineno": 441,
              "line": ""
            },
            {
              "lineno": 442,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 443,
              "line": "        self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 444,
              "line": "        err_msg = err_msgs[0]"
            },
            {
              "lineno": 445,
              "line": "        self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_file_format_entry_without_all_necessary_columns(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]",
              "successors": [
                {
                  "id": 3,
                  "label": "        current_segments_num = 3\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "test_check_file_format_without_1_space_between_the_segments",
          "type": "function",
          "start_line": 447,
          "end_line": 466,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 447,
              "line": "    def test_check_file_format_without_1_space_between_the_segments(self):"
            },
            {
              "lineno": 448,
              "line": "        incorrect_format = ["
            },
            {
              "lineno": 449,
              "line": "            '## Index',"
            },
            {
              "lineno": 450,
              "line": "            '* [A](#a)',"
            },
            {
              "lineno": 451,
              "line": "            '',"
            },
            {
              "lineno": 452,
              "line": "            '### A',"
            },
            {
              "lineno": 453,
              "line": "            'API | Description | Auth | HTTPS | CORS |',"
            },
            {
              "lineno": 454,
              "line": "            '|---|---|---|---|---|',"
            },
            {
              "lineno": 455,
              "line": "            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing"
            },
            {
              "lineno": 456,
              "line": "            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 457,
              "line": "            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',"
            },
            {
              "lineno": 458,
              "line": "        ]"
            },
            {
              "lineno": 459,
              "line": ""
            },
            {
              "lineno": 460,
              "line": "        err_msgs = check_file_format(lines=incorrect_format)"
            },
            {
              "lineno": 461,
              "line": "        expected_err_msg = f'(L007) each segment must start and end with exactly 1 space'"
            },
            {
              "lineno": 462,
              "line": ""
            },
            {
              "lineno": 463,
              "line": "        self.assertIsInstance(err_msgs, list)"
            },
            {
              "lineno": 464,
              "line": "        self.assertEqual(len(err_msgs), 1)"
            },
            {
              "lineno": 465,
              "line": "        err_msg = err_msgs[0]"
            },
            {
              "lineno": 466,
              "line": "        self.assertEqual(err_msg, expected_err_msg)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def test_check_file_format_without_1_space_between_the_segments(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L007) each segment must start and end with exactly 1 space'",
              "successors": [
                {
                  "id": 3,
                  "label": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 17,
          "line": "class TestValidadeFormat(unittest.TestCase):"
        },
        {
          "lineno": 18,
          "line": "    "
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 70,
          "line": ""
        },
        {
          "lineno": 119,
          "line": "    "
        },
        {
          "lineno": 128,
          "line": ""
        },
        {
          "lineno": 141,
          "line": ""
        },
        {
          "lineno": 154,
          "line": ""
        },
        {
          "lineno": 163,
          "line": "    "
        },
        {
          "lineno": 177,
          "line": "    "
        },
        {
          "lineno": 196,
          "line": ""
        },
        {
          "lineno": 211,
          "line": ""
        },
        {
          "lineno": 222,
          "line": ""
        },
        {
          "lineno": 237,
          "line": ""
        },
        {
          "lineno": 270,
          "line": ""
        },
        {
          "lineno": 278,
          "line": ""
        },
        {
          "lineno": 293,
          "line": ""
        },
        {
          "lineno": 301,
          "line": ""
        },
        {
          "lineno": 316,
          "line": ""
        },
        {
          "lineno": 325,
          "line": ""
        },
        {
          "lineno": 346,
          "line": ""
        },
        {
          "lineno": 373,
          "line": ""
        },
        {
          "lineno": 393,
          "line": ""
        },
        {
          "lineno": 423,
          "line": ""
        },
        {
          "lineno": 446,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class TestValidadeFormat(unittest.TestCase):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# -*- coding: utf-8 -*-"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import unittest"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from validate.format import error_message"
    },
    {
      "lineno": 6,
      "line": "from validate.format import get_categories_content"
    },
    {
      "lineno": 7,
      "line": "from validate.format import check_alphabetical_order"
    },
    {
      "lineno": 8,
      "line": "from validate.format import check_title"
    },
    {
      "lineno": 9,
      "line": "from validate.format import check_description, max_description_length"
    },
    {
      "lineno": 10,
      "line": "from validate.format import check_auth, auth_keys"
    },
    {
      "lineno": 11,
      "line": "from validate.format import check_https, https_keys"
    },
    {
      "lineno": 12,
      "line": "from validate.format import check_cors, cors_keys"
    },
    {
      "lineno": 13,
      "line": "from validate.format import check_entry"
    },
    {
      "lineno": 14,
      "line": "from validate.format import check_file_format, min_entries_per_category, num_segments"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "# -*- coding: utf-8 -*-\n\nimport unittest\n\nfrom validate.format import error_message\nfrom validate.format import get_categories_content\nfrom validate.format import check_alphabetical_order\nfrom validate.format import check_title\nfrom validate.format import check_description, max_description_length\nfrom validate.format import check_auth, auth_keys\nfrom validate.format import check_https, https_keys\nfrom validate.format import check_cors, cors_keys\nfrom validate.format import check_entry\nfrom validate.format import check_file_format, min_entries_per_category, num_segments\n\n\n",
      "successors": []
    }
  ]
}