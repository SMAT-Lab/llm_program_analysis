{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 51,
  "functions": [],
  "classes": [
    {
      "name": "RateLimiter",
      "type": "class",
      "start_line": 9,
      "end_line": 51,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 10,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 10,
              "line": "    def __init__("
            },
            {
              "lineno": 11,
              "line": "        self,"
            },
            {
              "lineno": 12,
              "line": "        redis_host: str = RATE_LIMIT_SETTINGS.redis_host,"
            },
            {
              "lineno": 13,
              "line": "        redis_port: str = RATE_LIMIT_SETTINGS.redis_port,"
            },
            {
              "lineno": 14,
              "line": "        redis_password: str = RATE_LIMIT_SETTINGS.redis_password,"
            },
            {
              "lineno": 15,
              "line": "        requests_per_minute: int = RATE_LIMIT_SETTINGS.requests_per_minute,"
            },
            {
              "lineno": 16,
              "line": "    ):"
            },
            {
              "lineno": 17,
              "line": "        self.redis = Redis("
            },
            {
              "lineno": 18,
              "line": "            host=redis_host,"
            },
            {
              "lineno": 19,
              "line": "            port=int(redis_port),"
            },
            {
              "lineno": 20,
              "line": "            password=redis_password,"
            },
            {
              "lineno": 21,
              "line": "            decode_responses=True,"
            },
            {
              "lineno": 22,
              "line": "        )"
            },
            {
              "lineno": 23,
              "line": "        self.window = 60"
            },
            {
              "lineno": 24,
              "line": "        self.max_requests = requests_per_minute"
            }
          ],
          "blocks": []
        },
        {
          "name": "check_rate_limit",
          "type": "function",
          "start_line": 26,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 26,
              "line": "    async def check_rate_limit(self, api_key_id: str) -> Tuple[bool, int, int]:"
            },
            {
              "lineno": 27,
              "line": "        \"\"\""
            },
            {
              "lineno": 28,
              "line": "        Check if request is within rate limits."
            },
            {
              "lineno": 29,
              "line": ""
            },
            {
              "lineno": 30,
              "line": "        Args:"
            },
            {
              "lineno": 31,
              "line": "            api_key_id: The API key identifier to check"
            },
            {
              "lineno": 32,
              "line": ""
            },
            {
              "lineno": 33,
              "line": "        Returns:"
            },
            {
              "lineno": 34,
              "line": "            Tuple of (is_allowed, remaining_requests, reset_time)"
            },
            {
              "lineno": 35,
              "line": "        \"\"\""
            },
            {
              "lineno": 36,
              "line": "        now = time.time()"
            },
            {
              "lineno": 37,
              "line": "        window_start = now - self.window"
            },
            {
              "lineno": 38,
              "line": "        key = f\"ratelimit:{api_key_id}:1min\""
            },
            {
              "lineno": 39,
              "line": ""
            },
            {
              "lineno": 40,
              "line": "        pipe = self.redis.pipeline()"
            },
            {
              "lineno": 41,
              "line": "        pipe.zremrangebyscore(key, 0, window_start)"
            },
            {
              "lineno": 42,
              "line": "        pipe.zadd(key, {str(now): now})"
            },
            {
              "lineno": 43,
              "line": "        pipe.zcount(key, window_start, now)"
            },
            {
              "lineno": 44,
              "line": "        pipe.expire(key, self.window)"
            },
            {
              "lineno": 45,
              "line": ""
            },
            {
              "lineno": 46,
              "line": "        _, _, request_count, _ = pipe.execute()"
            },
            {
              "lineno": 47,
              "line": ""
            },
            {
              "lineno": 48,
              "line": "        remaining = max(0, self.max_requests - request_count)"
            },
            {
              "lineno": 49,
              "line": "        reset_time = int(now + self.window)"
            },
            {
              "lineno": 50,
              "line": ""
            },
            {
              "lineno": 51,
              "line": "        return request_count <= self.max_requests, remaining, reset_time"
            }
          ],
          "blocks": []
        }
      ],
      "simplified_code": [
        {
          "lineno": 9,
          "line": "class RateLimiter:"
        },
        {
          "lineno": 25,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class RateLimiter:\n",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import time"
    },
    {
      "lineno": 2,
      "line": "from typing import Tuple"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from redis import Redis"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from .config import RATE_LIMIT_SETTINGS"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import time\nfrom typing import Tuple\n\nfrom redis import Redis\n\nfrom .config import RATE_LIMIT_SETTINGS",
      "successors": []
    }
  ]
}