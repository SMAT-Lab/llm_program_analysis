{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 422,
  "functions": [
    {
      "name": "login",
      "type": "function",
      "start_line": 48,
      "end_line": 69,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 48,
          "line": "def login("
        },
        {
          "lineno": 49,
          "line": "    provider: Annotated["
        },
        {
          "lineno": 50,
          "line": "        ProviderName, Path(title=\"The provider to initiate an OAuth flow for\")"
        },
        {
          "lineno": 51,
          "line": "    ],"
        },
        {
          "lineno": 52,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 53,
          "line": "    request: Request,"
        },
        {
          "lineno": 54,
          "line": "    scopes: Annotated["
        },
        {
          "lineno": 55,
          "line": "        str, Query(title=\"Comma-separated list of authorization scopes\")"
        },
        {
          "lineno": 56,
          "line": "    ] = \"\","
        },
        {
          "lineno": 57,
          "line": ") -> LoginResponse:"
        },
        {
          "lineno": 58,
          "line": "    handler = _get_provider_oauth_handler(request, provider)"
        },
        {
          "lineno": 59,
          "line": ""
        },
        {
          "lineno": 60,
          "line": "    requested_scopes = scopes.split(\",\") if scopes else []"
        },
        {
          "lineno": 61,
          "line": ""
        },
        {
          "lineno": 62,
          "line": "    # Generate and store a secure random state token along with the scopes"
        },
        {
          "lineno": 63,
          "line": "    state_token = creds_manager.store.store_state_token("
        },
        {
          "lineno": 64,
          "line": "        user_id, provider, requested_scopes"
        },
        {
          "lineno": 65,
          "line": "    )"
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 67,
          "line": "    login_url = handler.get_login_url(requested_scopes, state_token)"
        },
        {
          "lineno": 68,
          "line": ""
        },
        {
          "lineno": 69,
          "line": "    return LoginResponse(login_url=login_url, state_token=state_token)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def login(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to initiate an OAuth flow for\")\n    ],\n    user_id: Annotated[str, Depends(get_user_id)],\n    request: Request,\n    scopes: Annotated[\n        str, Query(title=\"Comma-separated list of authorization scopes\")\n    ] = \"\",\n) -> LoginResponse:\n    handler = _get_provider_oauth_handler(request, provider)\n\n    requested_scopes = scopes.split(\",\") if scopes else []\n\n    # Generate and store a secure random state token along with the scopes\n    state_token = creds_manager.store.store_state_token(\n        user_id, provider, requested_scopes\n    )\n\n    login_url = handler.get_login_url(requested_scopes, state_token)\n\n    return LoginResponse(login_url=login_url, state_token=state_token)",
          "successors": []
        }
      ]
    },
    {
      "name": "callback",
      "type": "function",
      "start_line": 82,
      "end_line": 138,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 82,
          "line": "def callback("
        },
        {
          "lineno": 83,
          "line": "    provider: Annotated["
        },
        {
          "lineno": 84,
          "line": "        ProviderName, Path(title=\"The target provider for this OAuth exchange\")"
        },
        {
          "lineno": 85,
          "line": "    ],"
        },
        {
          "lineno": 86,
          "line": "    code: Annotated[str, Body(title=\"Authorization code acquired by user login\")],"
        },
        {
          "lineno": 87,
          "line": "    state_token: Annotated[str, Body(title=\"Anti-CSRF nonce\")],"
        },
        {
          "lineno": 88,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 89,
          "line": "    request: Request,"
        },
        {
          "lineno": 90,
          "line": ") -> CredentialsMetaResponse:"
        },
        {
          "lineno": 91,
          "line": "    logger.debug(f\"Received OAuth callback for provider: {provider}\")"
        },
        {
          "lineno": 92,
          "line": "    handler = _get_provider_oauth_handler(request, provider)"
        },
        {
          "lineno": 93,
          "line": ""
        },
        {
          "lineno": 94,
          "line": "    # Verify the state token"
        },
        {
          "lineno": 95,
          "line": "    if not creds_manager.store.verify_state_token(user_id, state_token, provider):"
        },
        {
          "lineno": 96,
          "line": "        logger.warning(f\"Invalid or expired state token for user {user_id}\")"
        },
        {
          "lineno": 97,
          "line": "        raise HTTPException(status_code=400, detail=\"Invalid or expired state token\")"
        },
        {
          "lineno": 98,
          "line": ""
        },
        {
          "lineno": 99,
          "line": "    try:"
        },
        {
          "lineno": 100,
          "line": "        scopes = creds_manager.store.get_any_valid_scopes_from_state_token("
        },
        {
          "lineno": 101,
          "line": "            user_id, state_token, provider"
        },
        {
          "lineno": 102,
          "line": "        )"
        },
        {
          "lineno": 103,
          "line": "        logger.debug(f\"Retrieved scopes from state token: {scopes}\")"
        },
        {
          "lineno": 104,
          "line": ""
        },
        {
          "lineno": 105,
          "line": "        scopes = handler.handle_default_scopes(scopes)"
        },
        {
          "lineno": 106,
          "line": ""
        },
        {
          "lineno": 107,
          "line": "        credentials = handler.exchange_code_for_tokens(code, scopes)"
        },
        {
          "lineno": 108,
          "line": "        logger.debug(f\"Received credentials with final scopes: {credentials.scopes}\")"
        },
        {
          "lineno": 109,
          "line": ""
        },
        {
          "lineno": 110,
          "line": "        # Check if the granted scopes are sufficient for the requested scopes"
        },
        {
          "lineno": 111,
          "line": "        if not set(scopes).issubset(set(credentials.scopes)):"
        },
        {
          "lineno": 112,
          "line": "            # For now, we'll just log the warning and continue"
        },
        {
          "lineno": 113,
          "line": "            logger.warning("
        },
        {
          "lineno": 114,
          "line": "                f\"Granted scopes {credentials.scopes} for provider {provider.value} \""
        },
        {
          "lineno": 115,
          "line": "                f\"do not include all requested scopes {scopes}\""
        },
        {
          "lineno": 116,
          "line": "            )"
        },
        {
          "lineno": 117,
          "line": ""
        },
        {
          "lineno": 118,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 119,
          "line": "        logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")"
        },
        {
          "lineno": 120,
          "line": "        raise HTTPException("
        },
        {
          "lineno": 121,
          "line": "            status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\""
        },
        {
          "lineno": 122,
          "line": "        )"
        },
        {
          "lineno": 123,
          "line": ""
        },
        {
          "lineno": 124,
          "line": "    # TODO: Allow specifying `title` to set on `credentials`"
        },
        {
          "lineno": 125,
          "line": "    creds_manager.create(user_id, credentials)"
        },
        {
          "lineno": 126,
          "line": ""
        },
        {
          "lineno": 127,
          "line": "    logger.debug("
        },
        {
          "lineno": 128,
          "line": "        f\"Successfully processed OAuth callback for user {user_id} \""
        },
        {
          "lineno": 129,
          "line": "        f\"and provider {provider.value}\""
        },
        {
          "lineno": 130,
          "line": "    )"
        },
        {
          "lineno": 131,
          "line": "    return CredentialsMetaResponse("
        },
        {
          "lineno": 132,
          "line": "        id=credentials.id,"
        },
        {
          "lineno": 133,
          "line": "        provider=credentials.provider,"
        },
        {
          "lineno": 134,
          "line": "        type=credentials.type,"
        },
        {
          "lineno": 135,
          "line": "        title=credentials.title,"
        },
        {
          "lineno": 136,
          "line": "        scopes=credentials.scopes,"
        },
        {
          "lineno": 137,
          "line": "        username=credentials.username,"
        },
        {
          "lineno": 138,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def callback(\n    provider: Annotated[\n        ProviderName, Path(title=\"The target provider for this OAuth exchange\")\n    ],\n    code: Annotated[str, Body(title=\"Authorization code acquired by user login\")],\n    state_token: Annotated[str, Body(title=\"Anti-CSRF nonce\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n    request: Request,\n) -> CredentialsMetaResponse:\nlogger.debug(f\"Received OAuth callback for provider: {provider}\")\nhandler = _get_provider_oauth_handler(request, provider)",
          "successors": [
            {
              "id": 3,
              "label": "if not creds_manager.store.verify_state_token(user_id, state_token, provider):\n    logger.warning(f\"Invalid or expired state token for user {user_id}\")\n    raise HTTPException(status_code=400, detail=\"Invalid or expired state token\")\ntry:\n    scopes = creds_manager.store.get_any_valid_scopes_from_state_token(\n        user_id, state_token, provider\n    )\n    logger.debug(f\"Retrieved scopes from state token: {scopes}\")\n\n    scopes = handler.handle_default_scopes(scopes)\n\n    credentials = handler.exchange_code_for_tokens(code, scopes)\n    logger.debug(f\"Received credentials with final scopes: {credentials.scopes}\")\n\n    # Check if the granted scopes are sufficient for the requested scopes\n    if not set(scopes).issubset(set(credentials.scopes)):\n        # For now, we'll just log the warning and continue\n        logger.warning(\n            f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n            f\"do not include all requested scopes {scopes}\"\n        )",
              "successors": [
                {
                  "id": 5,
                  "label": "except Exception as e:\n    logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")\n    raise HTTPException(\n        status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\"\n    )\ncreds_manager.create(user_id, credentials)\n\nlogger.debug(\n    f\"Successfully processed OAuth callback for user {user_id} \"\n    f\"and provider {provider.value}\"\n)\nreturn CredentialsMetaResponse(\n    id=credentials.id,\n    provider=credentials.provider,\n    type=credentials.type,\n    title=credentials.title,\n    scopes=credentials.scopes,\n    username=credentials.username,\n)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "list_credentials",
      "type": "function",
      "start_line": 142,
      "end_line": 156,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 142,
          "line": "def list_credentials("
        },
        {
          "lineno": 143,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 144,
          "line": ") -> list[CredentialsMetaResponse]:"
        },
        {
          "lineno": 145,
          "line": "    credentials = creds_manager.store.get_all_creds(user_id)"
        },
        {
          "lineno": 146,
          "line": "    return ["
        },
        {
          "lineno": 147,
          "line": "        CredentialsMetaResponse("
        },
        {
          "lineno": 148,
          "line": "            id=cred.id,"
        },
        {
          "lineno": 149,
          "line": "            provider=cred.provider,"
        },
        {
          "lineno": 150,
          "line": "            type=cred.type,"
        },
        {
          "lineno": 151,
          "line": "            title=cred.title,"
        },
        {
          "lineno": 152,
          "line": "            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,"
        },
        {
          "lineno": 153,
          "line": "            username=cred.username if isinstance(cred, OAuth2Credentials) else None,"
        },
        {
          "lineno": 154,
          "line": "        )"
        },
        {
          "lineno": 155,
          "line": "        for cred in credentials"
        },
        {
          "lineno": 156,
          "line": "    ]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def list_credentials(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[CredentialsMetaResponse]:\n    credentials = creds_manager.store.get_all_creds(user_id)\nreturn [\n    CredentialsMetaResponse(\n        id=cred.id,\n        provider=cred.provider,\n        type=cred.type,\n        title=cred.title,\n        scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n        username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n    )\n    for cred in credentials\n]",
          "successors": []
        }
      ]
    },
    {
      "name": "list_credentials_by_provider",
      "type": "function",
      "start_line": 160,
      "end_line": 177,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 160,
          "line": "def list_credentials_by_provider("
        },
        {
          "lineno": 161,
          "line": "    provider: Annotated["
        },
        {
          "lineno": 162,
          "line": "        ProviderName, Path(title=\"The provider to list credentials for\")"
        },
        {
          "lineno": 163,
          "line": "    ],"
        },
        {
          "lineno": 164,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 165,
          "line": ") -> list[CredentialsMetaResponse]:"
        },
        {
          "lineno": 166,
          "line": "    credentials = creds_manager.store.get_creds_by_provider(user_id, provider)"
        },
        {
          "lineno": 167,
          "line": "    return ["
        },
        {
          "lineno": 168,
          "line": "        CredentialsMetaResponse("
        },
        {
          "lineno": 169,
          "line": "            id=cred.id,"
        },
        {
          "lineno": 170,
          "line": "            provider=cred.provider,"
        },
        {
          "lineno": 171,
          "line": "            type=cred.type,"
        },
        {
          "lineno": 172,
          "line": "            title=cred.title,"
        },
        {
          "lineno": 173,
          "line": "            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,"
        },
        {
          "lineno": 174,
          "line": "            username=cred.username if isinstance(cred, OAuth2Credentials) else None,"
        },
        {
          "lineno": 175,
          "line": "        )"
        },
        {
          "lineno": 176,
          "line": "        for cred in credentials"
        },
        {
          "lineno": 177,
          "line": "    ]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def list_credentials_by_provider(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to list credentials for\")\n    ],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[CredentialsMetaResponse]:\ncredentials = creds_manager.store.get_creds_by_provider(user_id, provider)",
          "successors": [
            {
              "id": 3,
              "label": "return [\n    CredentialsMetaResponse(\n        id=cred.id,\n        provider=cred.provider,\n        type=cred.type,\n        title=cred.title,\n        scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n        username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n    )\n    for cred in credentials\n]",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_credential",
      "type": "function",
      "start_line": 181,
      "end_line": 195,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 181,
          "line": "def get_credential("
        },
        {
          "lineno": 182,
          "line": "    provider: Annotated["
        },
        {
          "lineno": 183,
          "line": "        ProviderName, Path(title=\"The provider to retrieve credentials for\")"
        },
        {
          "lineno": 184,
          "line": "    ],"
        },
        {
          "lineno": 185,
          "line": "    cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")],"
        },
        {
          "lineno": 186,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 187,
          "line": ") -> Credentials:"
        },
        {
          "lineno": 188,
          "line": "    credential = creds_manager.get(user_id, cred_id)"
        },
        {
          "lineno": 189,
          "line": "    if not credential:"
        },
        {
          "lineno": 190,
          "line": "        raise HTTPException(status_code=404, detail=\"Credentials not found\")"
        },
        {
          "lineno": 191,
          "line": "    if credential.provider != provider:"
        },
        {
          "lineno": 192,
          "line": "        raise HTTPException("
        },
        {
          "lineno": 193,
          "line": "            status_code=404, detail=\"Credentials do not match the specified provider\""
        },
        {
          "lineno": 194,
          "line": "        )"
        },
        {
          "lineno": 195,
          "line": "    return credential"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_credential(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to retrieve credentials for\")\n    ],\n    cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Credentials:\ncredential = creds_manager.get(user_id, cred_id)",
          "successors": [
            {
              "id": 3,
              "label": "if not credential:\n    raise HTTPException(status_code=404, detail=\"Credentials not found\")\nif credential.provider != provider:\n    raise HTTPException(\n        status_code=404, detail=\"Credentials do not match the specified provider\"\n    )",
              "successors": [
                {
                  "id": 5,
                  "label": "return credential",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "create_api_key_credentials",
      "type": "function",
      "start_line": 199,
      "end_line": 223,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 199,
          "line": "def create_api_key_credentials("
        },
        {
          "lineno": 200,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 201,
          "line": "    provider: Annotated["
        },
        {
          "lineno": 202,
          "line": "        ProviderName, Path(title=\"The provider to create credentials for\")"
        },
        {
          "lineno": 203,
          "line": "    ],"
        },
        {
          "lineno": 204,
          "line": "    api_key: Annotated[str, Body(title=\"The API key to store\")],"
        },
        {
          "lineno": 205,
          "line": "    title: Annotated[str, Body(title=\"Optional title for the credentials\")],"
        },
        {
          "lineno": 206,
          "line": "    expires_at: Annotated["
        },
        {
          "lineno": 207,
          "line": "        int | None, Body(title=\"Unix timestamp when the key expires\")"
        },
        {
          "lineno": 208,
          "line": "    ] = None,"
        },
        {
          "lineno": 209,
          "line": ") -> APIKeyCredentials:"
        },
        {
          "lineno": 210,
          "line": "    new_credentials = APIKeyCredentials("
        },
        {
          "lineno": 211,
          "line": "        provider=provider,"
        },
        {
          "lineno": 212,
          "line": "        api_key=SecretStr(api_key),"
        },
        {
          "lineno": 213,
          "line": "        title=title,"
        },
        {
          "lineno": 214,
          "line": "        expires_at=expires_at,"
        },
        {
          "lineno": 215,
          "line": "    )"
        },
        {
          "lineno": 216,
          "line": ""
        },
        {
          "lineno": 217,
          "line": "    try:"
        },
        {
          "lineno": 218,
          "line": "        creds_manager.create(user_id, new_credentials)"
        },
        {
          "lineno": 219,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 220,
          "line": "        raise HTTPException("
        },
        {
          "lineno": 221,
          "line": "            status_code=500, detail=f\"Failed to store credentials: {str(e)}\""
        },
        {
          "lineno": 222,
          "line": "        )"
        },
        {
          "lineno": 223,
          "line": "    return new_credentials"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def create_api_key_credentials(\n    user_id: Annotated[str, Depends(get_user_id)],\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to create credentials for\")\n    ],\n    api_key: Annotated[str, Body(title=\"The API key to store\")],\n    title: Annotated[str, Body(title=\"Optional title for the credentials\")],\n    expires_at: Annotated[\n        int | None, Body(title=\"Unix timestamp when the key expires\")\n    ] = None,\n) -> APIKeyCredentials:\nnew_credentials = APIKeyCredentials(\n    provider=provider,\n    api_key=SecretStr(api_key),\n    title=title,\n    expires_at=expires_at,\n)",
          "successors": [
            {
              "id": 3,
              "label": "try:\n    creds_manager.create(user_id, new_credentials)\nreturn new_credentials",
              "successors": []
            },
            {
              "id": 5,
              "label": "except Exception as e:\n    raise HTTPException(\n        status_code=500, detail=f\"Failed to store credentials: {str(e)}\"\n    )",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "delete_credentials",
      "type": "function",
      "start_line": 242,
      "end_line": 273,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 242,
          "line": "async def delete_credentials("
        },
        {
          "lineno": 243,
          "line": "    request: Request,"
        },
        {
          "lineno": 244,
          "line": "    provider: Annotated["
        },
        {
          "lineno": 245,
          "line": "        ProviderName, Path(title=\"The provider to delete credentials for\")"
        },
        {
          "lineno": 246,
          "line": "    ],"
        },
        {
          "lineno": 247,
          "line": "    cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")],"
        },
        {
          "lineno": 248,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],"
        },
        {
          "lineno": 249,
          "line": "    force: Annotated["
        },
        {
          "lineno": 250,
          "line": "        bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\")"
        },
        {
          "lineno": 251,
          "line": "    ] = False,"
        },
        {
          "lineno": 252,
          "line": ") -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse:"
        },
        {
          "lineno": 253,
          "line": "    creds = creds_manager.store.get_creds_by_id(user_id, cred_id)"
        },
        {
          "lineno": 254,
          "line": "    if not creds:"
        },
        {
          "lineno": 255,
          "line": "        raise HTTPException(status_code=404, detail=\"Credentials not found\")"
        },
        {
          "lineno": 256,
          "line": "    if creds.provider != provider:"
        },
        {
          "lineno": 257,
          "line": "        raise HTTPException("
        },
        {
          "lineno": 258,
          "line": "            status_code=404, detail=\"Credentials do not match the specified provider\""
        },
        {
          "lineno": 259,
          "line": "        )"
        },
        {
          "lineno": 260,
          "line": ""
        },
        {
          "lineno": 261,
          "line": "    try:"
        },
        {
          "lineno": 262,
          "line": "        await remove_all_webhooks_for_credentials(creds, force)"
        },
        {
          "lineno": 263,
          "line": "    except NeedConfirmation as e:"
        },
        {
          "lineno": 264,
          "line": "        return CredentialsDeletionNeedsConfirmationResponse(message=str(e))"
        },
        {
          "lineno": 265,
          "line": ""
        },
        {
          "lineno": 266,
          "line": "    creds_manager.delete(user_id, cred_id)"
        },
        {
          "lineno": 267,
          "line": ""
        },
        {
          "lineno": 268,
          "line": "    tokens_revoked = None"
        },
        {
          "lineno": 269,
          "line": "    if isinstance(creds, OAuth2Credentials):"
        },
        {
          "lineno": 270,
          "line": "        handler = _get_provider_oauth_handler(request, provider)"
        },
        {
          "lineno": 271,
          "line": "        tokens_revoked = handler.revoke_tokens(creds)"
        },
        {
          "lineno": 272,
          "line": ""
        },
        {
          "lineno": 273,
          "line": "    return CredentialsDeletionResponse(revoked=tokens_revoked)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def delete_credentials(\n    request: Request,\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to delete credentials for\")\n    ],\n    cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n    force: Annotated[\n        bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\")\n    ] = False,\n) -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse:\ncreds = creds_manager.store.get_creds_by_id(user_id, cred_id)",
          "successors": [
            {
              "id": 3,
              "label": "if not creds:\n    raise HTTPException(status_code=404, detail=\"Credentials not found\")\nif creds.provider != provider:\n    raise HTTPException(\n        status_code=404, detail=\"Credentials do not match the specified provider\"\n    )",
              "successors": [
                {
                  "id": 5,
                  "label": "try:\n    await remove_all_webhooks_for_credentials(creds, force)",
                  "successors": [
                    {
                      "id": 6,
                      "label": "except NeedConfirmation as e:\n    return CredentialsDeletionNeedsConfirmationResponse(message=str(e))",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "creds_manager.delete(user_id, cred_id)\ntokens_revoked = None",
                      "successors": [
                        {
                          "id": 9,
                          "label": "if isinstance(creds, OAuth2Credentials):\n    handler = _get_provider_oauth_handler(request, provider)\n    tokens_revoked = handler.revoke_tokens(creds)\nreturn CredentialsDeletionResponse(revoked=tokens_revoked)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "webhook_ingress_generic",
      "type": "function",
      "start_line": 283,
      "end_line": 323,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 283,
          "line": "async def webhook_ingress_generic("
        },
        {
          "lineno": 284,
          "line": "    request: Request,"
        },
        {
          "lineno": 285,
          "line": "    provider: Annotated["
        },
        {
          "lineno": 286,
          "line": "        ProviderName, Path(title=\"Provider where the webhook was registered\")"
        },
        {
          "lineno": 287,
          "line": "    ],"
        },
        {
          "lineno": 288,
          "line": "    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],"
        },
        {
          "lineno": 289,
          "line": "):"
        },
        {
          "lineno": 290,
          "line": "    logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\")"
        },
        {
          "lineno": 291,
          "line": "    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()"
        },
        {
          "lineno": 292,
          "line": "    webhook = await get_webhook(webhook_id)"
        },
        {
          "lineno": 293,
          "line": "    logger.debug(f\"Webhook #{webhook_id}: {webhook}\")"
        },
        {
          "lineno": 294,
          "line": "    payload, event_type = await webhook_manager.validate_payload(webhook, request)"
        },
        {
          "lineno": 295,
          "line": "    logger.debug("
        },
        {
          "lineno": 296,
          "line": "        f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \""
        },
        {
          "lineno": 297,
          "line": "        f\"with payload {payload}\""
        },
        {
          "lineno": 298,
          "line": "    )"
        },
        {
          "lineno": 299,
          "line": ""
        },
        {
          "lineno": 300,
          "line": "    webhook_event = WebhookEvent("
        },
        {
          "lineno": 301,
          "line": "        provider=provider,"
        },
        {
          "lineno": 302,
          "line": "        webhook_id=webhook_id,"
        },
        {
          "lineno": 303,
          "line": "        event_type=event_type,"
        },
        {
          "lineno": 304,
          "line": "        payload=payload,"
        },
        {
          "lineno": 305,
          "line": "    )"
        },
        {
          "lineno": 306,
          "line": "    await publish_webhook_event(webhook_event)"
        },
        {
          "lineno": 307,
          "line": "    logger.debug(f\"Webhook event published: {webhook_event}\")"
        },
        {
          "lineno": 308,
          "line": ""
        },
        {
          "lineno": 309,
          "line": "    if not webhook.attached_nodes:"
        },
        {
          "lineno": 310,
          "line": "        return"
        },
        {
          "lineno": 311,
          "line": ""
        },
        {
          "lineno": 312,
          "line": "    executor = get_service_client(ExecutionManager)"
        },
        {
          "lineno": 313,
          "line": "    for node in webhook.attached_nodes:"
        },
        {
          "lineno": 314,
          "line": "        logger.debug(f\"Webhook-attached node: {node}\")"
        },
        {
          "lineno": 315,
          "line": "        if not node.is_triggered_by_event_type(event_type):"
        },
        {
          "lineno": 316,
          "line": "            logger.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")"
        },
        {
          "lineno": 317,
          "line": "            continue"
        },
        {
          "lineno": 318,
          "line": "        logger.debug(f\"Executing graph #{node.graph_id} node #{node.id}\")"
        },
        {
          "lineno": 319,
          "line": "        executor.add_execution("
        },
        {
          "lineno": 320,
          "line": "            node.graph_id,"
        },
        {
          "lineno": 321,
          "line": "            data={f\"webhook_{webhook_id}_payload\": payload},"
        },
        {
          "lineno": 322,
          "line": "            user_id=webhook.user_id,"
        },
        {
          "lineno": 323,
          "line": "        )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def webhook_ingress_generic(\n    request: Request,\n    provider: Annotated[\n        ProviderName, Path(title=\"Provider where the webhook was registered\")\n    ],\n    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")]):\n    logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\")\n    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    webhook = await get_webhook(webhook_id)\n    logger.debug(f\"Webhook #{webhook_id}: {webhook}\")\n    payload, event_type = await webhook_manager.validate_payload(webhook, request)\n    logger.debug(\n        f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \"\n        f\"with payload {payload}\"\n    )\n\n    webhook_event = WebhookEvent(\n        provider=provider,\n        webhook_id=webhook_id,\n        event_type=event_type,\n        payload=payload,\n    )\n    await publish_webhook_event(webhook_event)\n    logger.debug(f\"Webhook event published: {webhook_event}\")",
          "successors": [
            {
              "id": 3,
              "label": "    if not webhook.attached_nodes:\n        return\n    executor = get_service_client(ExecutionManager)\n    for node in webhook.attached_nodes:\n        logger.debug(f\"Webhook-attached node: {node}\")\n        if not node.is_triggered_by_event_type(event_type):\n            logger.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")\n            continue\n        logger.debug(f\"Executing graph #{node.graph_id} node #{node.id}\")\n        executor.add_execution(\n            node.graph_id,\n            data={f\"webhook_{webhook_id}_payload\": payload},\n            user_id=webhook.user_id,\n        )",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "webhook_ping",
      "type": "function",
      "start_line": 327,
      "end_line": 347,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 327,
          "line": "async def webhook_ping("
        },
        {
          "lineno": 328,
          "line": "    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],"
        },
        {
          "lineno": 329,
          "line": "    user_id: Annotated[str, Depends(get_user_id)],  # require auth"
        },
        {
          "lineno": 330,
          "line": "):"
        },
        {
          "lineno": 331,
          "line": "    webhook = await get_webhook(webhook_id)"
        },
        {
          "lineno": 332,
          "line": "    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]()"
        },
        {
          "lineno": 333,
          "line": ""
        },
        {
          "lineno": 334,
          "line": "    credentials = ("
        },
        {
          "lineno": 335,
          "line": "        creds_manager.get(user_id, webhook.credentials_id)"
        },
        {
          "lineno": 336,
          "line": "        if webhook.credentials_id"
        },
        {
          "lineno": 337,
          "line": "        else None"
        },
        {
          "lineno": 338,
          "line": "    )"
        },
        {
          "lineno": 339,
          "line": "    try:"
        },
        {
          "lineno": 340,
          "line": "        await webhook_manager.trigger_ping(webhook, credentials)"
        },
        {
          "lineno": 341,
          "line": "    except NotImplementedError:"
        },
        {
          "lineno": 342,
          "line": "        return False"
        },
        {
          "lineno": 343,
          "line": ""
        },
        {
          "lineno": 344,
          "line": "    if not await wait_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10):"
        },
        {
          "lineno": 345,
          "line": "        raise HTTPException(status_code=504, detail=\"Webhook ping timed out\")"
        },
        {
          "lineno": 346,
          "line": ""
        },
        {
          "lineno": 347,
          "line": "    return True"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def webhook_ping(\n    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],\n    user_id: Annotated[str, Depends(get_user_id)],  # require auth\n):\n    webhook = await get_webhook(webhook_id)\n    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]()\n\n    credentials = (\n        creds_manager.get(user_id, webhook.credentials_id)\n        if webhook.credentials_id\n        else None\n    )",
          "successors": [
            {
              "id": 2,
              "label": "try:\n    await webhook_manager.trigger_ping(webhook, credentials)\nif not await wait_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10):",
              "successors": [
                {
                  "id": 4,
                  "label": "raise HTTPException(status_code=504, detail=\"Webhook ping timed out\")\nreturn True",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "except NotImplementedError:\n    return False",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "remove_all_webhooks_for_credentials",
      "type": "function",
      "start_line": 353,
      "end_line": 391,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 353,
          "line": "async def remove_all_webhooks_for_credentials("
        },
        {
          "lineno": 354,
          "line": "    credentials: Credentials, force: bool = False"
        },
        {
          "lineno": 355,
          "line": ") -> None:"
        },
        {
          "lineno": 356,
          "line": "    \"\"\""
        },
        {
          "lineno": 357,
          "line": "    Remove and deregister all webhooks that were registered using the given credentials."
        },
        {
          "lineno": 358,
          "line": ""
        },
        {
          "lineno": 359,
          "line": "    Params:"
        },
        {
          "lineno": 360,
          "line": "        credentials: The credentials for which to remove the associated webhooks."
        },
        {
          "lineno": 361,
          "line": "        force: Whether to proceed if any of the webhooks are still in use."
        },
        {
          "lineno": 362,
          "line": ""
        },
        {
          "lineno": 363,
          "line": "    Raises:"
        },
        {
          "lineno": 364,
          "line": "        NeedConfirmation: If any of the webhooks are still in use and `force` is `False`"
        },
        {
          "lineno": 365,
          "line": "    \"\"\""
        },
        {
          "lineno": 366,
          "line": "    webhooks = await get_all_webhooks_by_creds(credentials.id)"
        },
        {
          "lineno": 367,
          "line": "    if credentials.provider not in WEBHOOK_MANAGERS_BY_NAME:"
        },
        {
          "lineno": 368,
          "line": "        if webhooks:"
        },
        {
          "lineno": 369,
          "line": "            logger.error("
        },
        {
          "lineno": 370,
          "line": "                f\"Credentials #{credentials.id} for provider {credentials.provider} \""
        },
        {
          "lineno": 371,
          "line": "                f\"are attached to {len(webhooks)} webhooks, \""
        },
        {
          "lineno": 372,
          "line": "                f\"but there is no available WebhooksHandler for {credentials.provider}\""
        },
        {
          "lineno": 373,
          "line": "            )"
        },
        {
          "lineno": 374,
          "line": "        return"
        },
        {
          "lineno": 375,
          "line": "    if any(w.attached_nodes for w in webhooks) and not force:"
        },
        {
          "lineno": 376,
          "line": "        raise NeedConfirmation("
        },
        {
          "lineno": 377,
          "line": "            \"Some webhooks linked to these credentials are still in use by an agent\""
        },
        {
          "lineno": 378,
          "line": "        )"
        },
        {
          "lineno": 379,
          "line": "    for webhook in webhooks:"
        },
        {
          "lineno": 380,
          "line": "        # Unlink all nodes"
        },
        {
          "lineno": 381,
          "line": "        for node in webhook.attached_nodes or []:"
        },
        {
          "lineno": 382,
          "line": "            await set_node_webhook(node.id, None)"
        },
        {
          "lineno": 383,
          "line": ""
        },
        {
          "lineno": 384,
          "line": "        # Prune the webhook"
        },
        {
          "lineno": 385,
          "line": "        webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]()"
        },
        {
          "lineno": 386,
          "line": "        success = await webhook_manager.prune_webhook_if_dangling("
        },
        {
          "lineno": 387,
          "line": "            webhook.id, credentials"
        },
        {
          "lineno": 388,
          "line": "        )"
        },
        {
          "lineno": 389,
          "line": "        if not success:"
        },
        {
          "lineno": 390,
          "line": "            logger.warning(f\"Webhook #{webhook.id} failed to prune\")"
        },
        {
          "lineno": 391,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "    webhooks = await get_all_webhooks_by_creds(credentials.id)",
          "successors": [
            {
              "id": 2,
              "label": "    if credentials.provider not in WEBHOOK_MANAGERS_BY_NAME:\n        if webhooks:",
              "successors": [
                {
                  "id": 3,
                  "label": "            logger.error(\n                f\"Credentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"\n            )",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "        return",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "label": "    if any(w.attached_nodes for w in webhooks) and not force:\n        raise NeedConfirmation(\n            \"Some webhooks linked to these credentials are still in use by an agent\"\n        )",
              "successors": []
            },
            {
              "id": 7,
              "label": "    for webhook in webhooks:\n        # Unlink all nodes\n        for node in webhook.attached_nodes or []:\n            await set_node_webhook(node.id, None)",
              "successors": [
                {
                  "id": 8,
                  "label": "        # Prune the webhook\n        webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]()\n        success = await webhook_manager.prune_webhook_if_dangling(\n            webhook.id, credentials\n        )\n        if not success:\n            logger.warning(f\"Webhook #{webhook.id} failed to prune\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "_get_provider_oauth_handler",
      "type": "function",
      "start_line": 393,
      "end_line": 422,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 393,
          "line": "def _get_provider_oauth_handler("
        },
        {
          "lineno": 394,
          "line": "    req: Request, provider_name: ProviderName"
        },
        {
          "lineno": 395,
          "line": ") -> \"BaseOAuthHandler\":"
        },
        {
          "lineno": 396,
          "line": "    if provider_name not in HANDLERS_BY_NAME:"
        },
        {
          "lineno": 397,
          "line": "        raise HTTPException("
        },
        {
          "lineno": 398,
          "line": "            status_code=404,"
        },
        {
          "lineno": 399,
          "line": "            detail=f\"Provider '{provider_name.value}' does not support OAuth\","
        },
        {
          "lineno": 400,
          "line": "        )"
        },
        {
          "lineno": 401,
          "line": ""
        },
        {
          "lineno": 402,
          "line": "    client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id\")"
        },
        {
          "lineno": 403,
          "line": "    client_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret\")"
        },
        {
          "lineno": 404,
          "line": "    if not (client_id and client_secret):"
        },
        {
          "lineno": 405,
          "line": "        raise HTTPException("
        },
        {
          "lineno": 406,
          "line": "            status_code=501,"
        },
        {
          "lineno": 407,
          "line": "            detail=("
        },
        {
          "lineno": 408,
          "line": "                f\"Integration with provider '{provider_name.value}' is not configured\""
        },
        {
          "lineno": 409,
          "line": "            ),"
        },
        {
          "lineno": 410,
          "line": "        )"
        },
        {
          "lineno": 411,
          "line": ""
        },
        {
          "lineno": 412,
          "line": "    handler_class = HANDLERS_BY_NAME[provider_name]"
        },
        {
          "lineno": 413,
          "line": "    frontend_base_url = ("
        },
        {
          "lineno": 414,
          "line": "        settings.config.frontend_base_url"
        },
        {
          "lineno": 415,
          "line": "        or settings.config.platform_base_url"
        },
        {
          "lineno": 416,
          "line": "        or str(req.base_url)"
        },
        {
          "lineno": 417,
          "line": "    )"
        },
        {
          "lineno": 418,
          "line": "    return handler_class("
        },
        {
          "lineno": 419,
          "line": "        client_id=client_id,"
        },
        {
          "lineno": 420,
          "line": "        client_secret=client_secret,"
        },
        {
          "lineno": 421,
          "line": "        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\","
        },
        {
          "lineno": 422,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def _get_provider_oauth_handler(\n    req: Request, provider_name: ProviderName\n) -> \"BaseOAuthHandler\":\nif provider_name not in HANDLERS_BY_NAME:",
          "successors": [
            {
              "id": 3,
              "label": "raise HTTPException(\n    status_code=404,\n    detail=f\"Provider '{provider_name.value}' does not support OAuth\",\n)",
              "successors": []
            },
            {
              "id": 4,
              "label": "client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id\")\nclient_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret\")\nif not (client_id and client_secret):",
              "successors": [
                {
                  "id": 6,
                  "label": "raise HTTPException(\n    status_code=501,\n    detail=(\n        f\"Integration with provider '{provider_name.value}' is not configured\"\n    ),\n)",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "handler_class = HANDLERS_BY_NAME[provider_name]\nfrontend_base_url = (\n    settings.config.frontend_base_url\n    or settings.config.platform_base_url\n    or str(req.base_url)\n)\nreturn handler_class(\n    client_id=client_id,\n    client_secret=client_secret,\n    redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "LoginResponse",
      "type": "class",
      "start_line": 42,
      "end_line": 44,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 42,
          "line": "class LoginResponse(BaseModel):"
        },
        {
          "lineno": 43,
          "line": "    login_url: str"
        },
        {
          "lineno": 44,
          "line": "    state_token: str"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class LoginResponse(BaseModel):\n    login_url: str\n    state_token: str",
          "successors": []
        }
      ]
    },
    {
      "name": "CredentialsMetaResponse",
      "type": "class",
      "start_line": 72,
      "end_line": 78,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 72,
          "line": "class CredentialsMetaResponse(BaseModel):"
        },
        {
          "lineno": 73,
          "line": "    id: str"
        },
        {
          "lineno": 74,
          "line": "    provider: str"
        },
        {
          "lineno": 75,
          "line": "    type: CredentialsType"
        },
        {
          "lineno": 76,
          "line": "    title: str | None"
        },
        {
          "lineno": 77,
          "line": "    scopes: list[str] | None"
        },
        {
          "lineno": 78,
          "line": "    username: str | None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class CredentialsMetaResponse(BaseModel):\n    id: str\n    provider: str\n    type: CredentialsType\n    title: str | None\n    scopes: list[str] | None\n    username: str | None",
          "successors": []
        }
      ]
    },
    {
      "name": "CredentialsDeletionResponse",
      "type": "class",
      "start_line": 226,
      "end_line": 232,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 226,
          "line": "class CredentialsDeletionResponse(BaseModel):"
        },
        {
          "lineno": 227,
          "line": "    deleted: Literal[True] = True"
        },
        {
          "lineno": 228,
          "line": "    revoked: bool | None = Field("
        },
        {
          "lineno": 229,
          "line": "        description=\"Indicates whether the credentials were also revoked by their \""
        },
        {
          "lineno": 230,
          "line": "        \"provider. `None`/`null` if not applicable, e.g. when deleting \""
        },
        {
          "lineno": 231,
          "line": "        \"non-revocable credentials such as API keys.\""
        },
        {
          "lineno": 232,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class CredentialsDeletionResponse(BaseModel):\n    deleted: Literal[True] = True\n    revoked: bool | None = Field(\n        description=\"Indicates whether the credentials were also revoked by their \"\n        \"provider. `None`/`null` if not applicable, e.g. when deleting \"\n        \"non-revocable credentials such as API keys.\"\n    )",
          "successors": []
        }
      ]
    },
    {
      "name": "CredentialsDeletionNeedsConfirmationResponse",
      "type": "class",
      "start_line": 235,
      "end_line": 238,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 235,
          "line": "class CredentialsDeletionNeedsConfirmationResponse(BaseModel):"
        },
        {
          "lineno": 236,
          "line": "    deleted: Literal[False] = False"
        },
        {
          "lineno": 237,
          "line": "    need_confirmation: Literal[True] = True"
        },
        {
          "lineno": 238,
          "line": "    message: str"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class CredentialsDeletionNeedsConfirmationResponse(BaseModel):\n    deleted: Literal[False] = False\n    need_confirmation: Literal[True] = True\n    message: str",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "from typing import TYPE_CHECKING, Annotated, Literal"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from fastapi import APIRouter, Body, Depends, HTTPException, Path, Query, Request"
    },
    {
      "lineno": 5,
      "line": "from pydantic import BaseModel, Field, SecretStr"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "from backend.data.graph import set_node_webhook"
    },
    {
      "lineno": 8,
      "line": "from backend.data.integrations import ("
    },
    {
      "lineno": 9,
      "line": "    WebhookEvent,"
    },
    {
      "lineno": 10,
      "line": "    get_all_webhooks_by_creds,"
    },
    {
      "lineno": 11,
      "line": "    get_webhook,"
    },
    {
      "lineno": 12,
      "line": "    publish_webhook_event,"
    },
    {
      "lineno": 13,
      "line": "    wait_for_webhook_event,"
    },
    {
      "lineno": 14,
      "line": ")"
    },
    {
      "lineno": 15,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 16,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 17,
      "line": "    Credentials,"
    },
    {
      "lineno": 18,
      "line": "    CredentialsType,"
    },
    {
      "lineno": 19,
      "line": "    OAuth2Credentials,"
    },
    {
      "lineno": 20,
      "line": ")"
    },
    {
      "lineno": 21,
      "line": "from backend.executor.manager import ExecutionManager"
    },
    {
      "lineno": 22,
      "line": "from backend.integrations.creds_manager import IntegrationCredentialsManager"
    },
    {
      "lineno": 23,
      "line": "from backend.integrations.oauth import HANDLERS_BY_NAME"
    },
    {
      "lineno": 24,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 25,
      "line": "from backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME"
    },
    {
      "lineno": 26,
      "line": "from backend.util.exceptions import NeedConfirmation"
    },
    {
      "lineno": 27,
      "line": "from backend.util.service import get_service_client"
    },
    {
      "lineno": 28,
      "line": "from backend.util.settings import Settings"
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": "if TYPE_CHECKING:"
    },
    {
      "lineno": 31,
      "line": "    from backend.integrations.oauth import BaseOAuthHandler"
    },
    {
      "lineno": 32,
      "line": ""
    },
    {
      "lineno": 33,
      "line": "from ..utils import get_user_id"
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 35,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 36,
      "line": "settings = Settings()"
    },
    {
      "lineno": 37,
      "line": "router = APIRouter()"
    },
    {
      "lineno": 38,
      "line": ""
    },
    {
      "lineno": 39,
      "line": "creds_manager = IntegrationCredentialsManager()"
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 45,
      "line": ""
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 47,
      "line": "@router.get(\"/{provider}/login\")"
    },
    {
      "lineno": 70,
      "line": ""
    },
    {
      "lineno": 71,
      "line": ""
    },
    {
      "lineno": 79,
      "line": ""
    },
    {
      "lineno": 80,
      "line": ""
    },
    {
      "lineno": 81,
      "line": "@router.post(\"/{provider}/callback\")"
    },
    {
      "lineno": 139,
      "line": ""
    },
    {
      "lineno": 140,
      "line": ""
    },
    {
      "lineno": 141,
      "line": "@router.get(\"/credentials\")"
    },
    {
      "lineno": 157,
      "line": ""
    },
    {
      "lineno": 158,
      "line": ""
    },
    {
      "lineno": 159,
      "line": "@router.get(\"/{provider}/credentials\")"
    },
    {
      "lineno": 178,
      "line": ""
    },
    {
      "lineno": 179,
      "line": ""
    },
    {
      "lineno": 180,
      "line": "@router.get(\"/{provider}/credentials/{cred_id}\")"
    },
    {
      "lineno": 196,
      "line": ""
    },
    {
      "lineno": 197,
      "line": ""
    },
    {
      "lineno": 198,
      "line": "@router.post(\"/{provider}/credentials\", status_code=201)"
    },
    {
      "lineno": 224,
      "line": ""
    },
    {
      "lineno": 225,
      "line": ""
    },
    {
      "lineno": 233,
      "line": ""
    },
    {
      "lineno": 234,
      "line": ""
    },
    {
      "lineno": 239,
      "line": ""
    },
    {
      "lineno": 240,
      "line": ""
    },
    {
      "lineno": 241,
      "line": "@router.delete(\"/{provider}/credentials/{cred_id}\")"
    },
    {
      "lineno": 274,
      "line": ""
    },
    {
      "lineno": 275,
      "line": ""
    },
    {
      "lineno": 276,
      "line": "# ------------------------- WEBHOOK STUFF -------------------------- #"
    },
    {
      "lineno": 277,
      "line": ""
    },
    {
      "lineno": 278,
      "line": ""
    },
    {
      "lineno": 279,
      "line": "# ⚠️ Note"
    },
    {
      "lineno": 280,
      "line": "# No user auth check because this endpoint is for webhook ingress and relies on"
    },
    {
      "lineno": 281,
      "line": "# validation by the provider-specific `WebhooksManager`."
    },
    {
      "lineno": 282,
      "line": "@router.post(\"/{provider}/webhooks/{webhook_id}/ingress\")"
    },
    {
      "lineno": 324,
      "line": ""
    },
    {
      "lineno": 325,
      "line": ""
    },
    {
      "lineno": 326,
      "line": "@router.post(\"/webhooks/{webhook_id}/ping\")"
    },
    {
      "lineno": 348,
      "line": ""
    },
    {
      "lineno": 349,
      "line": ""
    },
    {
      "lineno": 350,
      "line": "# --------------------------- UTILITIES ---------------------------- #"
    },
    {
      "lineno": 351,
      "line": ""
    },
    {
      "lineno": 352,
      "line": ""
    },
    {
      "lineno": 392,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nfrom typing import TYPE_CHECKING, Annotated, Literal\n\nfrom fastapi import APIRouter, Body, Depends, HTTPException, Path, Query, Request\nfrom pydantic import BaseModel, Field, SecretStr\n\nfrom backend.data.graph import set_node_webhook\nfrom backend.data.integrations import (\n    WebhookEvent,\n    get_all_webhooks_by_creds,\n    get_webhook,\n    publish_webhook_event,\n    wait_for_webhook_event,\n)\nfrom backend.data.model import (\n    APIKeyCredentials,\n    Credentials,\n    CredentialsType,\n    OAuth2Credentials,\n)\nfrom backend.executor.manager import ExecutionManager\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.oauth import HANDLERS_BY_NAME\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME\nfrom backend.util.exceptions import NeedConfirmation\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\nif TYPE_CHECKING:\n    from backend.integrations.oauth import BaseOAuthHandler",
      "successors": [
        {
          "id": 3,
          "label": "from ..utils import get_user_id\n\nlogger = logging.getLogger(__name__)\nsettings = Settings()\nrouter = APIRouter()\n\ncreds_manager = IntegrationCredentialsManager()\n@router.get(\"/{provider}/login\")",
          "successors": [
            {
              "id": 5,
              "label": "@router.post(\"/{provider}/callback\")\n@router.get(\"/credentials\")",
              "successors": [
                {
                  "id": 7,
                  "label": "@router.get(\"/{provider}/credentials\")\n@router.get(\"/{provider}/credentials/{cred_id}\")",
                  "successors": [
                    {
                      "id": 9,
                      "label": "@router.post(\"/{provider}/credentials\", status_code=201)\n@router.delete(\"/{provider}/credentials/{cred_id}\")",
                      "successors": [
                        {
                          "id": 11,
                          "label": "@router.post(\"/{provider}/webhooks/{webhook_id}/ingress\")\n@router.post(\"/webhooks/{webhook_id}/ping\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}