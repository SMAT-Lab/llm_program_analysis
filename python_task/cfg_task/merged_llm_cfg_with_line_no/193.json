{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 68,
  "functions": [
    {
      "name": "test_verify_user_no_payload",
      "type": "function",
      "start_line": 6,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "def test_verify_user_no_payload():"
        },
        {
          "lineno": 7,
          "line": "    user = verify_user(None, admin_only=False)"
        },
        {
          "lineno": 8,
          "line": "    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\""
        },
        {
          "lineno": 9,
          "line": "    assert user.role == \"admin\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_verify_user_no_payload():\n    user = verify_user(None, admin_only=False)\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"admin\"",
          "successors": []
        }
      ]
    },
    {
      "name": "test_verify_user_no_user_id",
      "type": "function",
      "start_line": 12,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 12,
          "line": "def test_verify_user_no_user_id():"
        },
        {
          "lineno": 13,
          "line": "    with pytest.raises(Exception):"
        },
        {
          "lineno": 14,
          "line": "        verify_user({\"role\": \"admin\"}, admin_only=False)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_verify_user_no_user_id():\nwith pytest.raises(Exception):",
          "successors": [
            {
              "id": 3,
              "label": "verify_user({\"role\": \"admin\"}, admin_only=False)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_verify_user_not_admin",
      "type": "function",
      "start_line": 17,
      "end_line": 22,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 17,
          "line": "def test_verify_user_not_admin():"
        },
        {
          "lineno": 18,
          "line": "    with pytest.raises(Exception):"
        },
        {
          "lineno": 19,
          "line": "        verify_user("
        },
        {
          "lineno": 20,
          "line": "            {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"},"
        },
        {
          "lineno": 21,
          "line": "            admin_only=True,"
        },
        {
          "lineno": 22,
          "line": "        )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_verify_user_not_admin():\n    with pytest.raises(Exception):\n        verify_user(\n            {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"},\n            admin_only=True,\n        )",
          "successors": []
        }
      ]
    },
    {
      "name": "test_verify_user_with_admin_role",
      "type": "function",
      "start_line": 25,
      "end_line": 31,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 25,
          "line": "def test_verify_user_with_admin_role():"
        },
        {
          "lineno": 26,
          "line": "    user = verify_user("
        },
        {
          "lineno": 27,
          "line": "        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"admin\"},"
        },
        {
          "lineno": 28,
          "line": "        admin_only=True,"
        },
        {
          "lineno": 29,
          "line": "    )"
        },
        {
          "lineno": 30,
          "line": "    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\""
        },
        {
          "lineno": 31,
          "line": "    assert user.role == \"admin\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_verify_user_with_admin_role():\n    user = verify_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"admin\"},\n        admin_only=True,\n    )\nassert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"",
          "successors": [
            {
              "id": 3,
              "label": "assert user.role == \"admin\"",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_verify_user_with_user_role",
      "type": "function",
      "start_line": 34,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 34,
          "line": "def test_verify_user_with_user_role():"
        },
        {
          "lineno": 35,
          "line": "    user = verify_user("
        },
        {
          "lineno": 36,
          "line": "        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"},"
        },
        {
          "lineno": 37,
          "line": "        admin_only=False,"
        },
        {
          "lineno": 38,
          "line": "    )"
        },
        {
          "lineno": 39,
          "line": "    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\""
        },
        {
          "lineno": 40,
          "line": "    assert user.role == \"user\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_verify_user_with_user_role():\n    user = verify_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"},\n        admin_only=False,\n    )\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"user\"",
          "successors": []
        }
      ]
    },
    {
      "name": "test_requires_user",
      "type": "function",
      "start_line": 43,
      "end_line": 48,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 43,
          "line": "def test_requires_user():"
        },
        {
          "lineno": 44,
          "line": "    user = requires_user("
        },
        {
          "lineno": 45,
          "line": "        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"}"
        },
        {
          "lineno": 46,
          "line": "    )"
        },
        {
          "lineno": 47,
          "line": "    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\""
        },
        {
          "lineno": 48,
          "line": "    assert user.role == \"user\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_requires_user():\n    user = requires_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"}\n    )\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"user\"",
          "successors": []
        }
      ]
    },
    {
      "name": "test_requires_user_no_user_id",
      "type": "function",
      "start_line": 51,
      "end_line": 53,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 51,
          "line": "def test_requires_user_no_user_id():"
        },
        {
          "lineno": 52,
          "line": "    with pytest.raises(Exception):"
        },
        {
          "lineno": 53,
          "line": "        requires_user({\"role\": \"user\"})"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_requires_user_no_user_id():\n    with pytest.raises(Exception):\n        requires_user({\"role\": \"user\"})",
          "successors": []
        }
      ]
    },
    {
      "name": "test_requires_admin_user",
      "type": "function",
      "start_line": 56,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 56,
          "line": "def test_requires_admin_user():"
        },
        {
          "lineno": 57,
          "line": "    user = requires_admin_user("
        },
        {
          "lineno": 58,
          "line": "        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"admin\"}"
        },
        {
          "lineno": 59,
          "line": "    )"
        },
        {
          "lineno": 60,
          "line": "    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\""
        },
        {
          "lineno": 61,
          "line": "    assert user.role == \"admin\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_requires_admin_user():\n    user = requires_admin_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"admin\"}\n    )\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"admin\"",
          "successors": []
        }
      ]
    },
    {
      "name": "test_requires_admin_user_not_admin",
      "type": "function",
      "start_line": 64,
      "end_line": 68,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 64,
          "line": "def test_requires_admin_user_not_admin():"
        },
        {
          "lineno": 65,
          "line": "    with pytest.raises(Exception):"
        },
        {
          "lineno": 66,
          "line": "        requires_admin_user("
        },
        {
          "lineno": 67,
          "line": "            {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"}"
        },
        {
          "lineno": 68,
          "line": "        )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_requires_admin_user_not_admin():\nwith pytest.raises(Exception):\n    requires_admin_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"}\n    )",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import pytest"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from .depends import requires_admin_user, requires_user, verify_user"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 23,
      "line": ""
    },
    {
      "lineno": 24,
      "line": ""
    },
    {
      "lineno": 32,
      "line": ""
    },
    {
      "lineno": 33,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 42,
      "line": ""
    },
    {
      "lineno": 49,
      "line": ""
    },
    {
      "lineno": 50,
      "line": ""
    },
    {
      "lineno": 54,
      "line": ""
    },
    {
      "lineno": 55,
      "line": ""
    },
    {
      "lineno": 62,
      "line": ""
    },
    {
      "lineno": 63,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import pytest\nfrom .depends import requires_admin_user, requires_user, verify_user",
      "successors": []
    }
  ]
}