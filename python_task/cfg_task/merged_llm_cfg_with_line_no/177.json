{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 57,
  "functions": [],
  "classes": [
    {
      "name": "RedisKeyedMutex",
      "type": "class",
      "start_line": 12,
      "end_line": 57,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 20,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    def __init__(self, redis: \"Redis\", timeout: int | None = 60):"
            },
            {
              "lineno": 21,
              "line": "        self.redis = redis"
            },
            {
              "lineno": 22,
              "line": "        self.timeout = timeout"
            },
            {
              "lineno": 23,
              "line": "        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict("
            },
            {
              "lineno": 24,
              "line": "            max_len=6000, max_age_seconds=self.timeout"
            },
            {
              "lineno": 25,
              "line": "        )"
            },
            {
              "lineno": 26,
              "line": "        self.locks_lock = Lock()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, redis: \"Redis\", timeout: int | None = 60):\n        self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()",
              "successors": []
            }
          ]
        },
        {
          "name": "locked",
          "type": "function",
          "start_line": 29,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 29,
              "line": "    def locked(self, key: Any):"
            },
            {
              "lineno": 30,
              "line": "        lock = self.acquire(key)"
            },
            {
              "lineno": 31,
              "line": "        try:"
            },
            {
              "lineno": 32,
              "line": "            yield"
            },
            {
              "lineno": 33,
              "line": "        finally:"
            },
            {
              "lineno": 34,
              "line": "            if lock.locked():"
            },
            {
              "lineno": 35,
              "line": "                lock.release()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def locked(self, key: Any):\n        lock = self.acquire(key)\n        try:\n            yield",
              "successors": [
                {
                  "id": 3,
                  "label": "        finally:\n            if lock.locked():\n                lock.release()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "acquire",
          "type": "function",
          "start_line": 37,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 37,
              "line": "    def acquire(self, key: Any) -> \"RedisLock\":"
            },
            {
              "lineno": 38,
              "line": "        \"\"\"Acquires and returns a lock with the given key\"\"\""
            },
            {
              "lineno": 39,
              "line": "        with self.locks_lock:"
            },
            {
              "lineno": 40,
              "line": "            if key not in self.locks:"
            },
            {
              "lineno": 41,
              "line": "                self.locks[key] = self.redis.lock("
            },
            {
              "lineno": 42,
              "line": "                    str(key), self.timeout, thread_local=False"
            },
            {
              "lineno": 43,
              "line": "                )"
            },
            {
              "lineno": 44,
              "line": "            lock = self.locks[key]"
            },
            {
              "lineno": 45,
              "line": "        lock.acquire()"
            },
            {
              "lineno": 46,
              "line": "        return lock"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def acquire(self, key: Any) -> \"RedisLock\":\n        \"\"\"Acquires and returns a lock with the given key\"\"\"\n        with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )",
              "successors": [
                {
                  "id": 3,
                  "label": "            lock = self.locks[key]\n        lock.acquire()\n        return lock",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "release",
          "type": "function",
          "start_line": 48,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 48,
              "line": "    def release(self, key: Any):"
            },
            {
              "lineno": 49,
              "line": "        if (lock := self.locks.get(key)) and lock.locked() and lock.owned():"
            },
            {
              "lineno": 50,
              "line": "            lock.release()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def release(self, key: Any):\n        if (lock := self.locks.get(key)) and lock.locked() and lock.owned():",
              "successors": [
                {
                  "id": 3,
                  "label": "            lock.release()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "release_all_locks",
          "type": "function",
          "start_line": 52,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 52,
              "line": "    def release_all_locks(self):"
            },
            {
              "lineno": 53,
              "line": "        \"\"\"Call this on process termination to ensure all locks are released\"\"\""
            },
            {
              "lineno": 54,
              "line": "        self.locks_lock.acquire(blocking=False)"
            },
            {
              "lineno": 55,
              "line": "        for lock in self.locks.values():"
            },
            {
              "lineno": 56,
              "line": "            if lock.locked() and lock.owned():"
            },
            {
              "lineno": 57,
              "line": "                lock.release()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self.locks_lock.acquire(blocking=False)\n",
              "successors": [
                {
                  "id": 2,
                  "label": "        for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n",
                  "successors": [
                    {
                      "id": 3,
                      "label": "                lock.release()\n",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 12,
          "line": "class RedisKeyedMutex:"
        },
        {
          "lineno": 13,
          "line": "    \"\"\""
        },
        {
          "lineno": 14,
          "line": "    This class provides a mutex that can be locked and unlocked by a specific key,"
        },
        {
          "lineno": 15,
          "line": "    using Redis as a distributed locking provider."
        },
        {
          "lineno": 16,
          "line": "    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,"
        },
        {
          "lineno": 17,
          "line": "    in case the key is not unlocked for a specified duration, to prevent memory leaks."
        },
        {
          "lineno": 18,
          "line": "    \"\"\""
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 28,
          "line": "    @contextmanager"
        },
        {
          "lineno": 36,
          "line": ""
        },
        {
          "lineno": 47,
          "line": ""
        },
        {
          "lineno": 51,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class RedisKeyedMutex:\n    \"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"\n@contextmanager",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from contextlib import contextmanager"
    },
    {
      "lineno": 2,
      "line": "from threading import Lock"
    },
    {
      "lineno": 3,
      "line": "from typing import TYPE_CHECKING, Any"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from expiringdict import ExpiringDict"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "if TYPE_CHECKING:"
    },
    {
      "lineno": 8,
      "line": "    from redis import Redis"
    },
    {
      "lineno": 9,
      "line": "    from redis.lock import Lock as RedisLock"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from contextlib import contextmanager\nfrom threading import Lock\nfrom typing import TYPE_CHECKING, Any\n\nfrom expiringdict import ExpiringDict\n\nif TYPE_CHECKING:\n    from redis import Redis\n    from redis.lock import Lock as RedisLock\n",
      "successors": []
    }
  ]
}