{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 175,
  "functions": [
    {
      "name": "_extract_schema_from_url",
      "type": "function",
      "start_line": 21,
      "end_line": 37,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 21,
          "line": "def _extract_schema_from_url(database_url) -> tuple[str, str]:"
        },
        {
          "lineno": 22,
          "line": "    \"\"\""
        },
        {
          "lineno": 23,
          "line": "    Extracts the schema from the DATABASE_URL and returns the schema and cleaned URL."
        },
        {
          "lineno": 24,
          "line": "    \"\"\""
        },
        {
          "lineno": 25,
          "line": "    parsed_url = urlparse(database_url)"
        },
        {
          "lineno": 26,
          "line": "    query_params = parse_qs(parsed_url.query)"
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 28,
          "line": "    # Extract the 'schema' parameter"
        },
        {
          "lineno": 29,
          "line": "    schema_list = query_params.pop(\"schema\", None)"
        },
        {
          "lineno": 30,
          "line": "    schema = schema_list[0] if schema_list else \"public\""
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 32,
          "line": "    # Reconstruct the query string without the 'schema' parameter"
        },
        {
          "lineno": 33,
          "line": "    new_query = urlencode(query_params, doseq=True)"
        },
        {
          "lineno": 34,
          "line": "    new_parsed_url = parsed_url._replace(query=new_query)"
        },
        {
          "lineno": 35,
          "line": "    database_url_clean = str(urlunparse(new_parsed_url))"
        },
        {
          "lineno": 36,
          "line": ""
        },
        {
          "lineno": 37,
          "line": "    return schema, database_url_clean"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def _extract_schema_from_url(database_url) -> tuple[str, str]:\n    \"\"\"\n    Extracts the schema from the DATABASE_URL and returns the schema and cleaned URL.\n    \"\"\"\n    parsed_url = urlparse(database_url)\nquery_params = parse_qs(parsed_url.query)\n\n    # Extract the 'schema' parameter\n    schema_list = query_params.pop(\"schema\", None)\n    schema = schema_list[0] if schema_list else \"public\"",
          "successors": [
            {
              "id": 3,
              "label": "# Reconstruct the query string without the 'schema' parameter\n    new_query = urlencode(query_params, doseq=True)\n    new_parsed_url = parsed_url._replace(query=new_query)\n    database_url_clean = str(urlunparse(new_parsed_url))\nreturn schema, database_url_clean",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "log",
      "type": "function",
      "start_line": 44,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 44,
          "line": "def log(msg, **kwargs):"
        },
        {
          "lineno": 45,
          "line": "    logger.info(\"[ExecutionScheduler] \" + msg, **kwargs)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def log(msg, **kwargs):\n    logger.info(\"[ExecutionScheduler] \" + msg, **kwargs)",
          "successors": []
        }
      ]
    },
    {
      "name": "job_listener",
      "type": "function",
      "start_line": 48,
      "end_line": 53,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 48,
          "line": "def job_listener(event):"
        },
        {
          "lineno": 49,
          "line": "    \"\"\"Logs job execution outcomes for better monitoring.\"\"\""
        },
        {
          "lineno": 50,
          "line": "    if event.exception:"
        },
        {
          "lineno": 51,
          "line": "        log(f\"Job {event.job_id} failed.\")"
        },
        {
          "lineno": 52,
          "line": "    else:"
        },
        {
          "lineno": 53,
          "line": "        log(f\"Job {event.job_id} completed successfully.\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def job_listener(event):\n    \"\"\"Logs job execution outcomes for better monitoring.\"\"\"\nif event.exception:\n    log(f\"Job {event.job_id} failed.\")",
          "successors": [
            {
              "id": 3,
              "label": "else:\n    log(f\"Job {event.job_id} completed successfully.\")",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_execution_client",
      "type": "function",
      "start_line": 57,
      "end_line": 58,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 57,
          "line": "def get_execution_client() -> ExecutionManager:"
        },
        {
          "lineno": 58,
          "line": "    return get_service_client(ExecutionManager)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_execution_client() -> ExecutionManager:\n    return get_service_client(ExecutionManager)\n",
          "successors": []
        }
      ]
    },
    {
      "name": "execute_graph",
      "type": "function",
      "start_line": 61,
      "end_line": 69,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 61,
          "line": "def execute_graph(**kwargs):"
        },
        {
          "lineno": 62,
          "line": "    args = JobArgs(**kwargs)"
        },
        {
          "lineno": 63,
          "line": "    try:"
        },
        {
          "lineno": 64,
          "line": "        log(f\"Executing recurring job for graph #{args.graph_id}\")"
        },
        {
          "lineno": 65,
          "line": "        get_execution_client().add_execution("
        },
        {
          "lineno": 66,
          "line": "            args.graph_id, args.input_data, args.user_id"
        },
        {
          "lineno": 67,
          "line": "        )"
        },
        {
          "lineno": 68,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 69,
          "line": "        logger.exception(f\"Error executing graph {args.graph_id}: {e}\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def execute_graph(**kwargs):\n    args = JobArgs(**kwargs)\ntry:\n        log(f\"Executing recurring job for graph #{args.graph_id}\")\n        get_execution_client().add_execution(\n            args.graph_id, args.input_data, args.user_id\n        )",
          "successors": [
            {
              "id": 3,
              "label": "except Exception as e:\n        logger.exception(f\"Error executing graph {args.graph_id}: {e}\")",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "JobArgs",
      "type": "class",
      "start_line": 72,
      "end_line": 77,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 72,
          "line": "class JobArgs(BaseModel):"
        },
        {
          "lineno": 73,
          "line": "    graph_id: str"
        },
        {
          "lineno": 74,
          "line": "    input_data: BlockInput"
        },
        {
          "lineno": 75,
          "line": "    user_id: str"
        },
        {
          "lineno": 76,
          "line": "    graph_version: int"
        },
        {
          "lineno": 77,
          "line": "    cron: str"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class JobArgs(BaseModel):\n    graph_id: str\n    input_data: BlockInput\n    user_id: str\n    graph_version: int\n    cron: str",
          "successors": []
        }
      ]
    },
    {
      "name": "JobInfo",
      "type": "class",
      "start_line": 80,
      "end_line": 92,
      "functions": [
        {
          "name": "from_db",
          "type": "function",
          "start_line": 86,
          "end_line": 91,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 86,
              "line": "    def from_db(job_args: JobArgs, job_obj: JobObj) -> \"JobInfo\":"
            },
            {
              "lineno": 87,
              "line": "        return JobInfo("
            },
            {
              "lineno": 88,
              "line": "            id=job_obj.id,"
            },
            {
              "lineno": 89,
              "line": "            name=job_obj.name,"
            },
            {
              "lineno": 90,
              "line": "            next_run_time=job_obj.next_run_time.isoformat(),"
            },
            {
              "lineno": 91,
              "line": "            **job_args.model_dump(),"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def from_db(job_args: JobArgs, job_obj: JobObj) -> \"JobInfo\":\n        return JobInfo(\n            id=job_obj.id,\n            name=job_obj.name,\n            next_run_time=job_obj.next_run_time.isoformat(),\n            **job_args.model_dump(),\n        )",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 80,
          "line": "class JobInfo(JobArgs):"
        },
        {
          "lineno": 81,
          "line": "    id: str"
        },
        {
          "lineno": 82,
          "line": "    name: str"
        },
        {
          "lineno": 83,
          "line": "    next_run_time: str"
        },
        {
          "lineno": 84,
          "line": ""
        },
        {
          "lineno": 85,
          "line": "    @staticmethod"
        },
        {
          "lineno": 92,
          "line": "        )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class JobInfo(JobArgs):\n    id: str\n    name: str\n    next_run_time: str\n\n    @staticmethod\n",
          "successors": [
            {
              "id": 3,
              "label": "        )\n",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "ExecutionScheduler",
      "type": "class",
      "start_line": 95,
      "end_line": 175,
      "functions": [
        {
          "name": "get_port",
          "type": "function",
          "start_line": 99,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 99,
              "line": "    def get_port(cls) -> int:"
            },
            {
              "lineno": 100,
              "line": "        return config.execution_scheduler_port"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def get_port(cls) -> int:\n        return config.execution_scheduler_port",
              "successors": []
            }
          ]
        },
        {
          "name": "execution_client",
          "type": "function",
          "start_line": 104,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 104,
              "line": "    def execution_client(self) -> ExecutionManager:"
            },
            {
              "lineno": 105,
              "line": "        return get_service_client(ExecutionManager)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def execution_client(self) -> ExecutionManager:\n        return get_service_client(ExecutionManager)",
              "successors": []
            }
          ]
        },
        {
          "name": "run_service",
          "type": "function",
          "start_line": 107,
          "end_line": 119,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 107,
              "line": "    def run_service(self):"
            },
            {
              "lineno": 108,
              "line": "        load_dotenv()"
            },
            {
              "lineno": 109,
              "line": "        db_schema, db_url = _extract_schema_from_url(os.getenv(\"DATABASE_URL\"))"
            },
            {
              "lineno": 110,
              "line": "        self.scheduler = BlockingScheduler("
            },
            {
              "lineno": 111,
              "line": "            jobstores={"
            },
            {
              "lineno": 112,
              "line": "                \"default\": SQLAlchemyJobStore("
            },
            {
              "lineno": 113,
              "line": "                    engine=create_engine(db_url),"
            },
            {
              "lineno": 114,
              "line": "                    metadata=MetaData(schema=db_schema),"
            },
            {
              "lineno": 115,
              "line": "                )"
            },
            {
              "lineno": 116,
              "line": "            }"
            },
            {
              "lineno": 117,
              "line": "        )"
            },
            {
              "lineno": 118,
              "line": "        self.scheduler.add_listener(job_listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)"
            },
            {
              "lineno": 119,
              "line": "        self.scheduler.start()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run_service(self):\n        load_dotenv()\n        db_schema, db_url = _extract_schema_from_url(os.getenv(\"DATABASE_URL\"))\n        self.scheduler = BlockingScheduler(\n            jobstores={\n                \"default\": SQLAlchemyJobStore(\n                    engine=create_engine(db_url),\n                    metadata=MetaData(schema=db_schema),\n                )\n            }\n        )\n        self.scheduler.add_listener(job_listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)\n        self.scheduler.start()",
              "successors": []
            }
          ]
        },
        {
          "name": "add_execution_schedule",
          "type": "function",
          "start_line": 122,
          "end_line": 144,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 122,
              "line": "    def add_execution_schedule("
            },
            {
              "lineno": 123,
              "line": "        self,"
            },
            {
              "lineno": 124,
              "line": "        graph_id: str,"
            },
            {
              "lineno": 125,
              "line": "        graph_version: int,"
            },
            {
              "lineno": 126,
              "line": "        cron: str,"
            },
            {
              "lineno": 127,
              "line": "        input_data: BlockInput,"
            },
            {
              "lineno": 128,
              "line": "        user_id: str,"
            },
            {
              "lineno": 129,
              "line": "    ) -> JobInfo:"
            },
            {
              "lineno": 130,
              "line": "        job_args = JobArgs("
            },
            {
              "lineno": 131,
              "line": "            graph_id=graph_id,"
            },
            {
              "lineno": 132,
              "line": "            input_data=input_data,"
            },
            {
              "lineno": 133,
              "line": "            user_id=user_id,"
            },
            {
              "lineno": 134,
              "line": "            graph_version=graph_version,"
            },
            {
              "lineno": 135,
              "line": "            cron=cron,"
            },
            {
              "lineno": 136,
              "line": "        )"
            },
            {
              "lineno": 137,
              "line": "        job = self.scheduler.add_job("
            },
            {
              "lineno": 138,
              "line": "            execute_graph,"
            },
            {
              "lineno": 139,
              "line": "            CronTrigger.from_crontab(cron),"
            },
            {
              "lineno": 140,
              "line": "            kwargs=job_args.model_dump(),"
            },
            {
              "lineno": 141,
              "line": "            replace_existing=True,"
            },
            {
              "lineno": 142,
              "line": "        )"
            },
            {
              "lineno": 143,
              "line": "        log(f\"Added job {job.id} with cron schedule '{cron}' input data: {input_data}\")"
            },
            {
              "lineno": 144,
              "line": "        return JobInfo.from_db(job_args, job)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def add_execution_schedule(\n        self,\n        graph_id: str,\n        graph_version: int,\n        cron: str,\n        input_data: BlockInput,\n        user_id: str,\n    ) -> JobInfo:\n        job_args = JobArgs(\n            graph_id=graph_id,\n            input_data=input_data,\n            user_id=user_id,\n            graph_version=graph_version,\n            cron=cron,\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        job = self.scheduler.add_job(\n            execute_graph,\n            CronTrigger.from_crontab(cron),\n            kwargs=job_args.model_dump(),\n            replace_existing=True,\n        )\n        log(f\"Added job {job.id} with cron schedule '{cron}' input data: {input_data}\")\n        return JobInfo.from_db(job_args, job)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "delete_schedule",
          "type": "function",
          "start_line": 147,
          "end_line": 160,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 147,
              "line": "    def delete_schedule(self, schedule_id: str, user_id: str) -> JobInfo:"
            },
            {
              "lineno": 148,
              "line": "        job = self.scheduler.get_job(schedule_id)"
            },
            {
              "lineno": 149,
              "line": "        if not job:"
            },
            {
              "lineno": 150,
              "line": "            log(f\"Job {schedule_id} not found.\")"
            },
            {
              "lineno": 151,
              "line": "            raise ValueError(f\"Job #{schedule_id} not found.\")"
            },
            {
              "lineno": 152,
              "line": ""
            },
            {
              "lineno": 153,
              "line": "        job_args = JobArgs(**job.kwargs)"
            },
            {
              "lineno": 154,
              "line": "        if job_args.user_id != user_id:"
            },
            {
              "lineno": 155,
              "line": "            raise ValueError(\"User ID does not match the job's user ID.\")"
            },
            {
              "lineno": 156,
              "line": ""
            },
            {
              "lineno": 157,
              "line": "        log(f\"Deleting job {schedule_id}\")"
            },
            {
              "lineno": 158,
              "line": "        job.remove()"
            },
            {
              "lineno": 159,
              "line": ""
            },
            {
              "lineno": 160,
              "line": "        return JobInfo.from_db(job_args, job)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def delete_schedule(self, schedule_id: str, user_id: str) -> JobInfo:\n        job = self.scheduler.get_job(schedule_id)",
              "successors": [
                {
                  "id": 2,
                  "label": "        if not job:\n            log(f\"Job {schedule_id} not found.\")\n            raise ValueError(f\"Job #{schedule_id} not found.\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "        job_args = JobArgs(**job.kwargs)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        if job_args.user_id != user_id:\n            raise ValueError(\"User ID does not match the job's user ID.\")",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "        log(f\"Deleting job {schedule_id}\")\n        job.remove()\n        return JobInfo.from_db(job_args, job)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "get_execution_schedules",
          "type": "function",
          "start_line": 163,
          "end_line": 175,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 163,
              "line": "    def get_execution_schedules("
            },
            {
              "lineno": 164,
              "line": "        self, graph_id: str | None = None, user_id: str | None = None"
            },
            {
              "lineno": 165,
              "line": "    ) -> list[JobInfo]:"
            },
            {
              "lineno": 166,
              "line": "        schedules = []"
            },
            {
              "lineno": 167,
              "line": "        for job in self.scheduler.get_jobs():"
            },
            {
              "lineno": 168,
              "line": "            job_args = JobArgs(**job.kwargs)"
            },
            {
              "lineno": 169,
              "line": "            if ("
            },
            {
              "lineno": 170,
              "line": "                job.next_run_time is not None"
            },
            {
              "lineno": 171,
              "line": "                and (graph_id is None or job_args.graph_id == graph_id)"
            },
            {
              "lineno": 172,
              "line": "                and (user_id is None or job_args.user_id == user_id)"
            },
            {
              "lineno": 173,
              "line": "            ):"
            },
            {
              "lineno": 174,
              "line": "                schedules.append(JobInfo.from_db(job_args, job))"
            },
            {
              "lineno": 175,
              "line": "        return schedules"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def get_execution_schedules(\n        self, graph_id: str | None = None, user_id: str | None = None\n    ) -> list[JobInfo]:\n        schedules = []\n        for job in self.scheduler.get_jobs():",
              "successors": [
                {
                  "id": 2,
                  "label": "            job_args = JobArgs(**job.kwargs)\n            if (\n                job.next_run_time is not None\n                and (graph_id is None or job_args.graph_id == graph_id)\n                and (user_id is None or job_args.user_id == user_id)\n            ):",
                  "successors": [
                    {
                      "id": 3,
                      "label": "                schedules.append(JobInfo.from_db(job_args, job))\n        return schedules",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "        return schedules",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "        return schedules",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 95,
          "line": "class ExecutionScheduler(AppService):"
        },
        {
          "lineno": 96,
          "line": "    scheduler: BlockingScheduler"
        },
        {
          "lineno": 97,
          "line": ""
        },
        {
          "lineno": 98,
          "line": "    @classmethod"
        },
        {
          "lineno": 101,
          "line": ""
        },
        {
          "lineno": 102,
          "line": "    @property"
        },
        {
          "lineno": 103,
          "line": "    @thread_cached"
        },
        {
          "lineno": 106,
          "line": ""
        },
        {
          "lineno": 120,
          "line": ""
        },
        {
          "lineno": 121,
          "line": "    @expose"
        },
        {
          "lineno": 145,
          "line": ""
        },
        {
          "lineno": 146,
          "line": "    @expose"
        },
        {
          "lineno": 161,
          "line": ""
        },
        {
          "lineno": 162,
          "line": "    @expose"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ExecutionScheduler(AppService):",
          "successors": [
            {
              "id": 2,
              "label": "    scheduler: BlockingScheduler",
              "successors": []
            },
            {
              "id": 3,
              "label": "    @classmethod",
              "successors": []
            },
            {
              "id": 4,
              "label": "    @property\n    @thread_cached",
              "successors": []
            },
            {
              "id": 5,
              "label": "    @expose",
              "successors": []
            },
            {
              "id": 6,
              "label": "    @expose",
              "successors": []
            },
            {
              "id": 7,
              "label": "    @expose",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "import os"
    },
    {
      "lineno": 3,
      "line": "from urllib.parse import parse_qs, urlencode, urlparse, urlunparse"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from apscheduler.events import EVENT_JOB_ERROR, EVENT_JOB_EXECUTED"
    },
    {
      "lineno": 6,
      "line": "from apscheduler.job import Job as JobObj"
    },
    {
      "lineno": 7,
      "line": "from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore"
    },
    {
      "lineno": 8,
      "line": "from apscheduler.schedulers.blocking import BlockingScheduler"
    },
    {
      "lineno": 9,
      "line": "from apscheduler.triggers.cron import CronTrigger"
    },
    {
      "lineno": 10,
      "line": "from autogpt_libs.utils.cache import thread_cached"
    },
    {
      "lineno": 11,
      "line": "from dotenv import load_dotenv"
    },
    {
      "lineno": 12,
      "line": "from pydantic import BaseModel"
    },
    {
      "lineno": 13,
      "line": "from sqlalchemy import MetaData, create_engine"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "from backend.data.block import BlockInput"
    },
    {
      "lineno": 16,
      "line": "from backend.executor.manager import ExecutionManager"
    },
    {
      "lineno": 17,
      "line": "from backend.util.service import AppService, expose, get_service_client"
    },
    {
      "lineno": 18,
      "line": "from backend.util.settings import Config"
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 38,
      "line": ""
    },
    {
      "lineno": 39,
      "line": ""
    },
    {
      "lineno": 40,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 41,
      "line": "config = Config()"
    },
    {
      "lineno": 42,
      "line": ""
    },
    {
      "lineno": 43,
      "line": ""
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 47,
      "line": ""
    },
    {
      "lineno": 54,
      "line": ""
    },
    {
      "lineno": 55,
      "line": ""
    },
    {
      "lineno": 56,
      "line": "@thread_cached"
    },
    {
      "lineno": 59,
      "line": ""
    },
    {
      "lineno": 60,
      "line": ""
    },
    {
      "lineno": 70,
      "line": ""
    },
    {
      "lineno": 71,
      "line": ""
    },
    {
      "lineno": 78,
      "line": ""
    },
    {
      "lineno": 79,
      "line": ""
    },
    {
      "lineno": 93,
      "line": ""
    },
    {
      "lineno": 94,
      "line": ""
    }
  ],
  "blocks": []
}