{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 30,
  "functions": [
    {
      "name": "find_previous_power_of_two",
      "type": "function",
      "start_line": 1,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 1,
          "line": "def find_previous_power_of_two(number: int) -> int:"
        },
        {
          "lineno": 2,
          "line": "    \"\"\""
        },
        {
          "lineno": 3,
          "line": "    Find the largest power of two that is less than or equal to a given integer."
        },
        {
          "lineno": 4,
          "line": "    https://stackoverflow.com/questions/1322510"
        },
        {
          "lineno": 5,
          "line": ""
        },
        {
          "lineno": 6,
          "line": "    >>> [find_previous_power_of_two(i) for i in range(18)]"
        },
        {
          "lineno": 7,
          "line": "    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]"
        },
        {
          "lineno": 8,
          "line": "    >>> find_previous_power_of_two(-5)"
        },
        {
          "lineno": 9,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 10,
          "line": "        ..."
        },
        {
          "lineno": 11,
          "line": "    ValueError: Input must be a non-negative integer"
        },
        {
          "lineno": 12,
          "line": "    >>> find_previous_power_of_two(10.5)"
        },
        {
          "lineno": 13,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 14,
          "line": "        ..."
        },
        {
          "lineno": 15,
          "line": "    ValueError: Input must be a non-negative integer"
        },
        {
          "lineno": 16,
          "line": "    \"\"\""
        },
        {
          "lineno": 17,
          "line": "    if not isinstance(number, int) or number < 0:"
        },
        {
          "lineno": 18,
          "line": "        raise ValueError(\"Input must be a non-negative integer\")"
        },
        {
          "lineno": 19,
          "line": "    if number == 0:"
        },
        {
          "lineno": 20,
          "line": "        return 0"
        },
        {
          "lineno": 21,
          "line": "    power = 1"
        },
        {
          "lineno": 22,
          "line": "    while power <= number:"
        },
        {
          "lineno": 23,
          "line": "        power <<= 1  # Equivalent to multiplying by 2"
        },
        {
          "lineno": 24,
          "line": "    return power >> 1 if number > 1 else 1"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def find_previous_power_of_two(number: int) -> int:\n\"\"\"\n    Find the largest power of two that is less than or equal to a given integer.\n    https://stackoverflow.com/questions/1322510\n\n    >>> [find_previous_power_of_two(i) for i in range(18)]\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\n    >>> find_previous_power_of_two(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> find_previous_power_of_two(10.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\nif number == 0:\n        return 0",
              "successors": [
                {
                  "id": 5,
                  "label": "power = 1\n    while power <= number:\n        power <<= 1  # Equivalent to multiplying by 2\n    return power >> 1 if number > 1 else 1",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 25,
      "line": ""
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 27,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 28,
      "line": "    import doctest"
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      "successors": []
    }
  ]
}