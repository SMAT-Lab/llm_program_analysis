{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 43,
  "functions": [],
  "classes": [
    {
      "name": "JinaEmbeddingBlock",
      "type": "class",
      "start_line": 11,
      "end_line": 43,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 23,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 23,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 24,
              "line": "        super().__init__("
            },
            {
              "lineno": 25,
              "line": "            id=\"7c56b3ab-62e7-43a2-a2dc-4ec4245660b6\","
            },
            {
              "lineno": 26,
              "line": "            description=\"Generates embeddings using Jina AI\","
            },
            {
              "lineno": 27,
              "line": "            categories={BlockCategory.AI},"
            },
            {
              "lineno": 28,
              "line": "            input_schema=JinaEmbeddingBlock.Input,"
            },
            {
              "lineno": 29,
              "line": "            output_schema=JinaEmbeddingBlock.Output,"
            },
            {
              "lineno": 30,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"7c56b3ab-62e7-43a2-a2dc-4ec4245660b6\",\n            description=\"Generates embeddings using Jina AI\",\n            categories={BlockCategory.AI},\n            input_schema=JinaEmbeddingBlock.Input,\n            output_schema=JinaEmbeddingBlock.Output,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 32,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 32,
              "line": "    def run("
            },
            {
              "lineno": 33,
              "line": "        self, input_data: Input, *, credentials: JinaCredentials, **kwargs"
            },
            {
              "lineno": 34,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 35,
              "line": "        url = \"https://api.jina.ai/v1/embeddings\""
            },
            {
              "lineno": 36,
              "line": "        headers = {"
            },
            {
              "lineno": 37,
              "line": "            \"Content-Type\": \"application/json\","
            },
            {
              "lineno": 38,
              "line": "            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\","
            },
            {
              "lineno": 39,
              "line": "        }"
            },
            {
              "lineno": 40,
              "line": "        data = {\"input\": input_data.texts, \"model\": input_data.model}"
            },
            {
              "lineno": 41,
              "line": "        response = requests.post(url, headers=headers, json=data)"
            },
            {
              "lineno": 42,
              "line": "        embeddings = [e[\"embedding\"] for e in response.json()[\"data\"]]"
            },
            {
              "lineno": 43,
              "line": "        yield \"embeddings\", embeddings"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.jina.ai/v1/embeddings\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n        data = {\"input\": input_data.texts, \"model\": input_data.model}\n        response = requests.post(url, headers=headers, json=data)\n        embeddings = [e[\"embedding\"] for e in response.json()[\"data\"]]\n        yield \"embeddings\", embeddings",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 12,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 12,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 13,
              "line": "        texts: list = SchemaField(description=\"List of texts to embed\")"
            },
            {
              "lineno": 14,
              "line": "        credentials: JinaCredentialsInput = JinaCredentialsField()"
            },
            {
              "lineno": 15,
              "line": "        model: str = SchemaField("
            },
            {
              "lineno": 16,
              "line": "            description=\"Jina embedding model to use\","
            },
            {
              "lineno": 17,
              "line": "            default=\"jina-embeddings-v2-base-en\","
            },
            {
              "lineno": 18,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        texts: list = SchemaField(description=\"List of texts to embed\")\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n        model: str = SchemaField(\n            description=\"Jina embedding model to use\",\n            default=\"jina-embeddings-v2-base-en\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 20,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 21,
              "line": "        embeddings: list = SchemaField(description=\"List of embeddings\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        embeddings: list = SchemaField(description=\"List of embeddings\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "class JinaEmbeddingBlock(Block):"
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 31,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class JinaEmbeddingBlock(Block):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from backend.blocks.jina._auth import ("
    },
    {
      "lineno": 2,
      "line": "    JinaCredentials,"
    },
    {
      "lineno": 3,
      "line": "    JinaCredentialsField,"
    },
    {
      "lineno": 4,
      "line": "    JinaCredentialsInput,"
    },
    {
      "lineno": 5,
      "line": ")"
    },
    {
      "lineno": 6,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 7,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 8,
      "line": "from backend.util.request import requests"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests",
      "successors": []
    }
  ]
}