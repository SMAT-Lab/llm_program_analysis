{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 92,
  "functions": [
    {
      "name": "create_test_user",
      "type": "function",
      "start_line": 11,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "async def create_test_user() -> User:"
        },
        {
          "lineno": 12,
          "line": "    test_user_data = {"
        },
        {
          "lineno": 13,
          "line": "        \"sub\": \"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\","
        },
        {
          "lineno": 14,
          "line": "        \"email\": \"testuser#example.com\","
        },
        {
          "lineno": 15,
          "line": "        \"name\": \"Test User\","
        },
        {
          "lineno": 16,
          "line": "    }"
        },
        {
          "lineno": 17,
          "line": "    user = await get_or_create_user(test_user_data)"
        },
        {
          "lineno": 18,
          "line": "    return user"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def create_test_user() -> User:\n    test_user_data = {\n        \"sub\": \"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n        \"email\": \"testuser#example.com\",\n        \"name\": \"Test User\",\n    }\n    user = await get_or_create_user(test_user_data)\n    return user",
          "successors": []
        }
      ]
    },
    {
      "name": "create_test_graph",
      "type": "function",
      "start_line": 21,
      "end_line": 73,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 21,
          "line": "def create_test_graph() -> graph.Graph:"
        },
        {
          "lineno": 22,
          "line": "    \"\"\""
        },
        {
          "lineno": 23,
          "line": "    InputBlock"
        },
        {
          "lineno": 24,
          "line": "               \\"
        },
        {
          "lineno": 25,
          "line": "                 ---- FillTextTemplateBlock ---- PrintToConsoleBlock"
        },
        {
          "lineno": 26,
          "line": "               /"
        },
        {
          "lineno": 27,
          "line": "    InputBlock"
        },
        {
          "lineno": 28,
          "line": "    \"\"\""
        },
        {
          "lineno": 29,
          "line": "    nodes = ["
        },
        {
          "lineno": 30,
          "line": "        graph.Node("
        },
        {
          "lineno": 31,
          "line": "            block_id=AgentInputBlock().id,"
        },
        {
          "lineno": 32,
          "line": "            input_default={\"name\": \"input_1\"},"
        },
        {
          "lineno": 33,
          "line": "        ),"
        },
        {
          "lineno": 34,
          "line": "        graph.Node("
        },
        {
          "lineno": 35,
          "line": "            block_id=AgentInputBlock().id,"
        },
        {
          "lineno": 36,
          "line": "            input_default={\"name\": \"input_2\"},"
        },
        {
          "lineno": 37,
          "line": "        ),"
        },
        {
          "lineno": 38,
          "line": "        graph.Node("
        },
        {
          "lineno": 39,
          "line": "            block_id=FillTextTemplateBlock().id,"
        },
        {
          "lineno": 40,
          "line": "            input_default={"
        },
        {
          "lineno": 41,
          "line": "                \"format\": \"{a}, {b}{c}\","
        },
        {
          "lineno": 42,
          "line": "                \"values_#_c\": \"!!!\","
        },
        {
          "lineno": 43,
          "line": "            },"
        },
        {
          "lineno": 44,
          "line": "        ),"
        },
        {
          "lineno": 45,
          "line": "        graph.Node(block_id=PrintToConsoleBlock().id),"
        },
        {
          "lineno": 46,
          "line": "    ]"
        },
        {
          "lineno": 47,
          "line": "    links = ["
        },
        {
          "lineno": 48,
          "line": "        graph.Link("
        },
        {
          "lineno": 49,
          "line": "            source_id=nodes[0].id,"
        },
        {
          "lineno": 50,
          "line": "            sink_id=nodes[2].id,"
        },
        {
          "lineno": 51,
          "line": "            source_name=\"result\","
        },
        {
          "lineno": 52,
          "line": "            sink_name=\"values_#_a\","
        },
        {
          "lineno": 53,
          "line": "        ),"
        },
        {
          "lineno": 54,
          "line": "        graph.Link("
        },
        {
          "lineno": 55,
          "line": "            source_id=nodes[1].id,"
        },
        {
          "lineno": 56,
          "line": "            sink_id=nodes[2].id,"
        },
        {
          "lineno": 57,
          "line": "            source_name=\"result\","
        },
        {
          "lineno": 58,
          "line": "            sink_name=\"values_#_b\","
        },
        {
          "lineno": 59,
          "line": "        ),"
        },
        {
          "lineno": 60,
          "line": "        graph.Link("
        },
        {
          "lineno": 61,
          "line": "            source_id=nodes[2].id,"
        },
        {
          "lineno": 62,
          "line": "            sink_id=nodes[3].id,"
        },
        {
          "lineno": 63,
          "line": "            source_name=\"output\","
        },
        {
          "lineno": 64,
          "line": "            sink_name=\"text\","
        },
        {
          "lineno": 65,
          "line": "        ),"
        },
        {
          "lineno": 66,
          "line": "    ]"
        },
        {
          "lineno": 67,
          "line": ""
        },
        {
          "lineno": 68,
          "line": "    return graph.Graph("
        },
        {
          "lineno": 69,
          "line": "        name=\"TestGraph\","
        },
        {
          "lineno": 70,
          "line": "        description=\"Test graph\","
        },
        {
          "lineno": 71,
          "line": "        nodes=nodes,"
        },
        {
          "lineno": 72,
          "line": "        links=links,"
        },
        {
          "lineno": 73,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def create_test_graph() -> graph.Graph:\n    \"\"\"\n    InputBlock\n               \\\n                 ---- FillTextTemplateBlock ---- PrintToConsoleBlock\n               /\n    InputBlock\n    \"\"\"\nnodes = [\n        graph.Node(\n            block_id=AgentInputBlock().id,\n            input_default={\"name\": \"input_1\"},\n        ),\n        graph.Node(\n            block_id=AgentInputBlock().id,\n            input_default={\"name\": \"input_2\"},\n        ),\n        graph.Node(\n            block_id=FillTextTemplateBlock().id,\n            input_default={\n                \"format\": \"{a}, {b}{c}\",\n                \"values_#_c\": \"!!!\",\n            },\n        ),\n        graph.Node(block_id=PrintToConsoleBlock().id),\n    ]",
          "successors": [
            {
              "id": 3,
              "label": "links = [\n        graph.Link(\n            source_id=nodes[0].id,\n            sink_id=nodes[2].id,\n            source_name=\"result\",\n            sink_name=\"values_#_a\",\n        ),\n        graph.Link(\n            source_id=nodes[1].id,\n            sink_id=nodes[2].id,\n            source_name=\"result\",\n            sink_name=\"values_#_b\",\n        ),\n        graph.Link(\n            source_id=nodes[2].id,\n            sink_id=nodes[3].id,\n            source_name=\"output\",\n            sink_name=\"text\",\n        ),\n    ]\nreturn graph.Graph(\n        name=\"TestGraph\",\n        description=\"Test graph\",\n        nodes=nodes,\n        links=links,\n    )",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "sample_agent",
      "type": "function",
      "start_line": 76,
      "end_line": 86,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 76,
          "line": "async def sample_agent():"
        },
        {
          "lineno": 77,
          "line": "    async with SpinTestServer() as server:"
        },
        {
          "lineno": 78,
          "line": "        test_user = await create_test_user()"
        },
        {
          "lineno": 79,
          "line": "        test_graph = await create_graph(create_test_graph(), test_user.id)"
        },
        {
          "lineno": 80,
          "line": "        input_data = {\"input_1\": \"Hello\", \"input_2\": \"World\"}"
        },
        {
          "lineno": 81,
          "line": "        response = await server.agent_server.test_execute_graph("
        },
        {
          "lineno": 82,
          "line": "            test_graph.id, input_data, test_user.id"
        },
        {
          "lineno": 83,
          "line": "        )"
        },
        {
          "lineno": 84,
          "line": "        print(response)"
        },
        {
          "lineno": 85,
          "line": "        result = await wait_execution(test_user.id, test_graph.id, response[\"id\"], 10)"
        },
        {
          "lineno": 86,
          "line": "        print(result)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def sample_agent():\nasync with SpinTestServer() as server:\n        test_user = await create_test_user()\n        test_graph = await create_graph(create_test_graph(), test_user.id)\n        input_data = {\"input_1\": \"Hello\", \"input_2\": \"World\"}\n        response = await server.agent_server.test_execute_graph(\n            test_graph.id, input_data, test_user.id\n        )",
          "successors": [
            {
              "id": 3,
              "label": "print(response)\nresult = await wait_execution(test_user.id, test_graph.id, response[\"id\"], 10)",
              "successors": [
                {
                  "id": 5,
                  "label": "print(result)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from prisma.models import User"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from backend.blocks.basic import AgentInputBlock, PrintToConsoleBlock"
    },
    {
      "lineno": 4,
      "line": "from backend.blocks.text import FillTextTemplateBlock"
    },
    {
      "lineno": 5,
      "line": "from backend.data import graph"
    },
    {
      "lineno": 6,
      "line": "from backend.data.graph import create_graph"
    },
    {
      "lineno": 7,
      "line": "from backend.data.user import get_or_create_user"
    },
    {
      "lineno": 8,
      "line": "from backend.util.test import SpinTestServer, wait_execution"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 74,
      "line": ""
    },
    {
      "lineno": 75,
      "line": ""
    },
    {
      "lineno": 87,
      "line": ""
    },
    {
      "lineno": 88,
      "line": ""
    },
    {
      "lineno": 89,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 90,
      "line": "    import asyncio"
    },
    {
      "lineno": 91,
      "line": ""
    },
    {
      "lineno": 92,
      "line": "    asyncio.run(sample_agent())"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from prisma.models import User\n\nfrom backend.blocks.basic import AgentInputBlock, PrintToConsoleBlock\nfrom backend.blocks.text import FillTextTemplateBlock\nfrom backend.data import graph\nfrom backend.data.graph import create_graph\nfrom backend.data.user import get_or_create_user\nfrom backend.util.test import SpinTestServer, wait_execution\n\n\n\n\n\n\n\n\n",
      "successors": [
        {
          "id": 3,
          "label": "if __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(sample_agent())",
          "successors": []
        }
      ]
    }
  ]
}