{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 85,
  "functions": [],
  "classes": [
    {
      "name": "Slant3DFilamentBlock",
      "type": "class",
      "start_line": 16,
      "end_line": 85,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 28,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 29,
              "line": "        super().__init__("
            },
            {
              "lineno": 30,
              "line": "            id=\"7cc416f4-f305-4606-9b3b-452b8a81031c\","
            },
            {
              "lineno": 31,
              "line": "            description=\"Get list of available filaments\","
            },
            {
              "lineno": 32,
              "line": "            input_schema=self.Input,"
            },
            {
              "lineno": 33,
              "line": "            output_schema=self.Output,"
            },
            {
              "lineno": 34,
              "line": "            test_input={\"credentials\": TEST_CREDENTIALS_INPUT},"
            },
            {
              "lineno": 35,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 36,
              "line": "            test_output=["
            },
            {
              "lineno": 37,
              "line": "                ("
            },
            {
              "lineno": 38,
              "line": "                    \"filaments\","
            },
            {
              "lineno": 39,
              "line": "                    ["
            },
            {
              "lineno": 40,
              "line": "                        {"
            },
            {
              "lineno": 41,
              "line": "                            \"filament\": \"PLA BLACK\","
            },
            {
              "lineno": 42,
              "line": "                            \"hexColor\": \"000000\","
            },
            {
              "lineno": 43,
              "line": "                            \"colorTag\": \"black\","
            },
            {
              "lineno": 44,
              "line": "                            \"profile\": \"PLA\","
            },
            {
              "lineno": 45,
              "line": "                        },"
            },
            {
              "lineno": 46,
              "line": "                        {"
            },
            {
              "lineno": 47,
              "line": "                            \"filament\": \"PLA WHITE\","
            },
            {
              "lineno": 48,
              "line": "                            \"hexColor\": \"ffffff\","
            },
            {
              "lineno": 49,
              "line": "                            \"colorTag\": \"white\","
            },
            {
              "lineno": 50,
              "line": "                            \"profile\": \"PLA\","
            },
            {
              "lineno": 51,
              "line": "                        },"
            },
            {
              "lineno": 52,
              "line": "                    ],"
            },
            {
              "lineno": 53,
              "line": "                )"
            },
            {
              "lineno": 54,
              "line": "            ],"
            },
            {
              "lineno": 55,
              "line": "            test_mock={"
            },
            {
              "lineno": 56,
              "line": "                \"_make_request\": lambda *args, **kwargs: {"
            },
            {
              "lineno": 57,
              "line": "                    \"filaments\": ["
            },
            {
              "lineno": 58,
              "line": "                        {"
            },
            {
              "lineno": 59,
              "line": "                            \"filament\": \"PLA BLACK\","
            },
            {
              "lineno": 60,
              "line": "                            \"hexColor\": \"000000\","
            },
            {
              "lineno": 61,
              "line": "                            \"colorTag\": \"black\","
            },
            {
              "lineno": 62,
              "line": "                            \"profile\": \"PLA\","
            },
            {
              "lineno": 63,
              "line": "                        },"
            },
            {
              "lineno": 64,
              "line": "                        {"
            },
            {
              "lineno": 65,
              "line": "                            \"filament\": \"PLA WHITE\","
            },
            {
              "lineno": 66,
              "line": "                            \"hexColor\": \"ffffff\","
            },
            {
              "lineno": 67,
              "line": "                            \"colorTag\": \"white\","
            },
            {
              "lineno": 68,
              "line": "                            \"profile\": \"PLA\","
            },
            {
              "lineno": 69,
              "line": "                        },"
            },
            {
              "lineno": 70,
              "line": "                    ]"
            },
            {
              "lineno": 71,
              "line": "                }"
            },
            {
              "lineno": 72,
              "line": "            },"
            },
            {
              "lineno": 73,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"7cc416f4-f305-4606-9b3b-452b8a81031c\",\n            description=\"Get list of available filaments\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\"credentials\": TEST_CREDENTIALS_INPUT},\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"filaments\",\n                    [\n                        {\n                            \"filament\": \"PLA BLACK\",\n                            \"hexColor\": \"000000\",\n                            \"colorTag\": \"black\",\n                            \"profile\": \"PLA\",\n                        },\n                        {\n                            \"filament\": \"PLA WHITE\",\n                            \"hexColor\": \"ffffff\",\n                            \"colorTag\": \"white\",\n                            \"profile\": \"PLA\",\n                        },\n                    ],\n                )\n            ],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"filaments\": [\n                        {\n                            \"filament\": \"PLA BLACK\",\n                            \"hexColor\": \"000000\",\n                            \"colorTag\": \"black\",\n                            \"profile\": \"PLA\",\n                        },\n                        {\n                            \"filament\": \"PLA WHITE\",\n                            \"hexColor\": \"ffffff\",\n                            \"colorTag\": \"white\",\n                            \"profile\": \"PLA\",\n                        },\n                    ]\n                }\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 75,
          "end_line": 85,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 75,
              "line": "    def run("
            },
            {
              "lineno": 76,
              "line": "        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs"
            },
            {
              "lineno": 77,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 78,
              "line": "        try:"
            },
            {
              "lineno": 79,
              "line": "            result = self._make_request("
            },
            {
              "lineno": 80,
              "line": "                \"GET\", \"filament\", credentials.api_key.get_secret_value()"
            },
            {
              "lineno": 81,
              "line": "            )"
            },
            {
              "lineno": 82,
              "line": "            yield \"filaments\", result[\"filaments\"]"
            },
            {
              "lineno": 83,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 84,
              "line": "            yield \"error\", str(e)"
            },
            {
              "lineno": 85,
              "line": "            raise"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            result = self._make_request(",
              "successors": [
                {
                  "id": 3,
                  "label": "                \"GET\", \"filament\", credentials.api_key.get_secret_value()\n            )\n            yield \"filaments\", result[\"filaments\"]\n        except Exception as e:\n            yield \"error\", str(e)",
                  "successors": [
                    {
                      "id": 5,
                      "label": "            raise",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 19,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 19,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 20,
              "line": "        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()"
            },
            {
              "lineno": 21,
              "line": ""
            }
          ],
          "blocks": []
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 22,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 22,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 23,
              "line": "        filaments: List[Filament] = SchemaField("
            },
            {
              "lineno": 24,
              "line": "            description=\"List of available filaments\""
            },
            {
              "lineno": 25,
              "line": "        )"
            },
            {
              "lineno": 26,
              "line": "        error: str = SchemaField(description=\"Error message if request failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        filaments: List[Filament] = SchemaField(\n            description=\"List of available filaments\"\n        )\n        error: str = SchemaField(description=\"Error message if request failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 16,
          "line": "class Slant3DFilamentBlock(Slant3DBlockBase):"
        },
        {
          "lineno": 17,
          "line": "    \"\"\"Block for retrieving available filaments\"\"\""
        },
        {
          "lineno": 18,
          "line": ""
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 74,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Slant3DFilamentBlock(Slant3DBlockBase):\n    \"\"\"Block for retrieving available filaments\"\"\"",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from typing import List"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from backend.data.block import BlockOutput, BlockSchema"
    },
    {
      "lineno": 4,
      "line": "from backend.data.model import APIKeyCredentials, SchemaField"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from ._api import ("
    },
    {
      "lineno": 7,
      "line": "    TEST_CREDENTIALS,"
    },
    {
      "lineno": 8,
      "line": "    TEST_CREDENTIALS_INPUT,"
    },
    {
      "lineno": 9,
      "line": "    Filament,"
    },
    {
      "lineno": 10,
      "line": "    Slant3DCredentialsField,"
    },
    {
      "lineno": 11,
      "line": "    Slant3DCredentialsInput,"
    },
    {
      "lineno": 12,
      "line": ")"
    },
    {
      "lineno": 13,
      "line": "from .base import Slant3DBlockBase"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from typing import List\n\nfrom backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField\n\nfrom ._api import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    Filament,\n    Slant3DCredentialsField,\n    Slant3DCredentialsInput,\n)\nfrom .base import Slant3DBlockBase\n\n",
      "successors": []
    }
  ]
}