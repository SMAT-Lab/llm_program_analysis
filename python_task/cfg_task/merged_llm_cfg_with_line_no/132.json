{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 46,
  "functions": [
    {
      "name": "get_1s_count",
      "type": "function",
      "start_line": 1,
      "end_line": 40,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 1,
          "line": "def get_1s_count(number: int) -> int:"
        },
        {
          "lineno": 2,
          "line": "    \"\"\""
        },
        {
          "lineno": 3,
          "line": "    Count the number of set bits in a 32 bit integer using Brian Kernighan's way."
        },
        {
          "lineno": 4,
          "line": "    Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan"
        },
        {
          "lineno": 5,
          "line": "    >>> get_1s_count(25)"
        },
        {
          "lineno": 6,
          "line": "    3"
        },
        {
          "lineno": 7,
          "line": "    >>> get_1s_count(37)"
        },
        {
          "lineno": 8,
          "line": "    3"
        },
        {
          "lineno": 9,
          "line": "    >>> get_1s_count(21)"
        },
        {
          "lineno": 10,
          "line": "    3"
        },
        {
          "lineno": 11,
          "line": "    >>> get_1s_count(58)"
        },
        {
          "lineno": 12,
          "line": "    4"
        },
        {
          "lineno": 13,
          "line": "    >>> get_1s_count(0)"
        },
        {
          "lineno": 14,
          "line": "    0"
        },
        {
          "lineno": 15,
          "line": "    >>> get_1s_count(256)"
        },
        {
          "lineno": 16,
          "line": "    1"
        },
        {
          "lineno": 17,
          "line": "    >>> get_1s_count(-1)"
        },
        {
          "lineno": 18,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 19,
          "line": "        ..."
        },
        {
          "lineno": 20,
          "line": "    ValueError: Input must be a non-negative integer"
        },
        {
          "lineno": 21,
          "line": "    >>> get_1s_count(0.8)"
        },
        {
          "lineno": 22,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 23,
          "line": "        ..."
        },
        {
          "lineno": 24,
          "line": "    ValueError: Input must be a non-negative integer"
        },
        {
          "lineno": 25,
          "line": "    >>> get_1s_count(\"25\")"
        },
        {
          "lineno": 26,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 27,
          "line": "        ..."
        },
        {
          "lineno": 28,
          "line": "    ValueError: Input must be a non-negative integer"
        },
        {
          "lineno": 29,
          "line": "    \"\"\""
        },
        {
          "lineno": 30,
          "line": "    if not isinstance(number, int) or number < 0:"
        },
        {
          "lineno": 31,
          "line": "        raise ValueError(\"Input must be a non-negative integer\")"
        },
        {
          "lineno": 32,
          "line": ""
        },
        {
          "lineno": 33,
          "line": "    count = 0"
        },
        {
          "lineno": 34,
          "line": "    while number:"
        },
        {
          "lineno": 35,
          "line": "        # This way we arrive at next set bit (next 1) instead of looping"
        },
        {
          "lineno": 36,
          "line": "        # through each bit and checking for 1s hence the"
        },
        {
          "lineno": 37,
          "line": "        # loop won't run 32 times it will only run the number of `1` times"
        },
        {
          "lineno": 38,
          "line": "        number &= number - 1"
        },
        {
          "lineno": 39,
          "line": "        count += 1"
        },
        {
          "lineno": 40,
          "line": "    return count"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_1s_count(number: int) -> int:\nif not isinstance(number, int) or number < 0:\n    raise ValueError(\"Input must be a non-negative integer\")",
          "successors": [
            {
              "id": 3,
              "label": "count = 0",
              "successors": [
                {
                  "id": 4,
                  "label": "while number:\n    # This way we arrive at next set bit (next 1) instead of looping\n    # through each bit and checking for 1s hence the\n    # loop won't run 32 times it will only run the number of `1` times\n    number &= number - 1\n    count += 1",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return count",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 42,
      "line": ""
    },
    {
      "lineno": 43,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 44,
      "line": "    import doctest"
    },
    {
      "lineno": 45,
      "line": ""
    },
    {
      "lineno": 46,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "if __name__ == \"__main__\":\n    import doctest",
      "successors": [
        {
          "id": 3,
          "label": "    doctest.testmod()",
          "successors": []
        }
      ]
    }
  ]
}