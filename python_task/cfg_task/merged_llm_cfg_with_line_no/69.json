{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 323,
  "functions": [],
  "classes": [
    {
      "name": "AudioTrack",
      "type": "class",
      "start_line": 33,
      "end_line": 81,
      "functions": [
        {
          "name": "audio_url",
          "type": "function",
          "start_line": 57,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 57,
              "line": "    def audio_url(self):"
            },
            {
              "lineno": 58,
              "line": "        audio_urls = {"
            },
            {
              "lineno": 59,
              "line": "            AudioTrack.OBSERVER: \"https://cdn.tfrv.xyz/audio/observer.mp3\","
            },
            {
              "lineno": 60,
              "line": "            AudioTrack.FUTURISTIC_BEAT: \"https://cdn.tfrv.xyz/audio/_futuristic-beat.mp3\","
            },
            {
              "lineno": 61,
              "line": "            AudioTrack.SCIENCE_DOCUMENTARY: \"https://cdn.tfrv.xyz/audio/_science-documentary.mp3\","
            },
            {
              "lineno": 62,
              "line": "            AudioTrack.HOTLINE: \"https://cdn.tfrv.xyz/audio/_hotline.mp3\","
            },
            {
              "lineno": 63,
              "line": "            AudioTrack.BLADERUNNER_2049: \"https://cdn.tfrv.xyz/audio/_bladerunner-2049.mp3\","
            },
            {
              "lineno": 64,
              "line": "            AudioTrack.A_FUTURE: \"https://cdn.tfrv.xyz/audio/a-future.mp3\","
            },
            {
              "lineno": 65,
              "line": "            AudioTrack.ELYSIAN_EMBERS: \"https://cdn.tfrv.xyz/audio/elysian-embers.mp3\","
            },
            {
              "lineno": 66,
              "line": "            AudioTrack.INSPIRING_CINEMATIC: \"https://cdn.tfrv.xyz/audio/inspiring-cinematic-ambient.mp3\","
            },
            {
              "lineno": 67,
              "line": "            AudioTrack.BLADERUNNER_REMIX: \"https://cdn.tfrv.xyz/audio/bladerunner-remix.mp3\","
            },
            {
              "lineno": 68,
              "line": "            AudioTrack.IZZAMUZZIC: \"https://cdn.tfrv.xyz/audio/_izzamuzzic.mp3\","
            },
            {
              "lineno": 69,
              "line": "            AudioTrack.NAS: \"https://cdn.tfrv.xyz/audio/_nas.mp3\","
            },
            {
              "lineno": 70,
              "line": "            AudioTrack.PARIS_ELSE: \"https://cdn.tfrv.xyz/audio/_paris-else.mp3\","
            },
            {
              "lineno": 71,
              "line": "            AudioTrack.SNOWFALL: \"https://cdn.tfrv.xyz/audio/_snowfall.mp3\","
            },
            {
              "lineno": 72,
              "line": "            AudioTrack.BURLESQUE: \"https://cdn.tfrv.xyz/audio/burlesque.mp3\","
            },
            {
              "lineno": 73,
              "line": "            AudioTrack.CORNY_CANDY: \"https://cdn.tfrv.xyz/audio/corny-candy.mp3\","
            },
            {
              "lineno": 74,
              "line": "            AudioTrack.HIGHWAY_NOCTURNE: \"https://cdn.tfrv.xyz/audio/highway-nocturne.mp3\","
            },
            {
              "lineno": 75,
              "line": "            AudioTrack.I_DONT_THINK_SO: \"https://cdn.tfrv.xyz/audio/i-dont-think-so.mp3\","
            },
            {
              "lineno": 76,
              "line": "            AudioTrack.LOSING_YOUR_MARBLES: \"https://cdn.tfrv.xyz/audio/losing-your-marbles.mp3\","
            },
            {
              "lineno": 77,
              "line": "            AudioTrack.REFRESHER: \"https://cdn.tfrv.xyz/audio/refresher.mp3\","
            },
            {
              "lineno": 78,
              "line": "            AudioTrack.TOURIST: \"https://cdn.tfrv.xyz/audio/tourist.mp3\","
            },
            {
              "lineno": 79,
              "line": "            AudioTrack.TWIN_TYCHES: \"https://cdn.tfrv.xyz/audio/twin-tynches.mp3\","
            },
            {
              "lineno": 80,
              "line": "        }"
            },
            {
              "lineno": 81,
              "line": "        return audio_urls[self]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def audio_url(self):\n        audio_urls = {\n            AudioTrack.OBSERVER: \"https://cdn.tfrv.xyz/audio/observer.mp3\",\n            AudioTrack.FUTURISTIC_BEAT: \"https://cdn.tfrv.xyz/audio/_futuristic-beat.mp3\",\n            AudioTrack.SCIENCE_DOCUMENTARY: \"https://cdn.tfrv.xyz/audio/_science-documentary.mp3\",\n            AudioTrack.HOTLINE: \"https://cdn.tfrv.xyz/audio/_hotline.mp3\",\n            AudioTrack.BLADERUNNER_2049: \"https://cdn.tfrv.xyz/audio/_bladerunner-2049.mp3\",\n            AudioTrack.A_FUTURE: \"https://cdn.tfrv.xyz/audio/a-future.mp3\",\n            AudioTrack.ELYSIAN_EMBERS: \"https://cdn.tfrv.xyz/audio/elysian-embers.mp3\",\n            AudioTrack.INSPIRING_CINEMATIC: \"https://cdn.tfrv.xyz/audio/inspiring-cinematic-ambient.mp3\",\n            AudioTrack.BLADERUNNER_REMIX: \"https://cdn.tfrv.xyz/audio/bladerunner-remix.mp3\",\n            AudioTrack.IZZAMUZZIC: \"https://cdn.tfrv.xyz/audio/_izzamuzzic.mp3\",\n            AudioTrack.NAS: \"https://cdn.tfrv.xyz/audio/_nas.mp3\",\n            AudioTrack.PARIS_ELSE: \"https://cdn.tfrv.xyz/audio/_paris-else.mp3\",\n            AudioTrack.SNOWFALL: \"https://cdn.tfrv.xyz/audio/_snowfall.mp3\",\n            AudioTrack.BURLESQUE: \"https://cdn.tfrv.xyz/audio/burlesque.mp3\",\n            AudioTrack.CORNY_CANDY: \"https://cdn.tfrv.xyz/audio/corny-candy.mp3\",\n            AudioTrack.HIGHWAY_NOCTURNE: \"https://cdn.tfrv.xyz/audio/highway-nocturne.mp3\",\n            AudioTrack.I_DONT_THINK_SO: \"https://cdn.tfrv.xyz/audio/i-dont-think-so.mp3\",\n            AudioTrack.LOSING_YOUR_MARBLES: \"https://cdn.tfrv.xyz/audio/losing-your-marbles.mp3\",\n            AudioTrack.REFRESHER: \"https://cdn.tfrv.xyz/audio/refresher.mp3\",\n            AudioTrack.TOURIST: \"https://cdn.tfrv.xyz/audio/tourist.mp3\",\n            AudioTrack.TWIN_TYCHES: \"https://cdn.tfrv.xyz/audio/twin-tynches.mp3\",\n        }\n        return audio_urls[self]",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 33,
          "line": "class AudioTrack(str, Enum):"
        },
        {
          "lineno": 34,
          "line": "    OBSERVER = (\"Observer\",)"
        },
        {
          "lineno": 35,
          "line": "    FUTURISTIC_BEAT = (\"Futuristic Beat\",)"
        },
        {
          "lineno": 36,
          "line": "    SCIENCE_DOCUMENTARY = (\"Science Documentary\",)"
        },
        {
          "lineno": 37,
          "line": "    HOTLINE = (\"Hotline\",)"
        },
        {
          "lineno": 38,
          "line": "    BLADERUNNER_2049 = (\"Bladerunner 2049\",)"
        },
        {
          "lineno": 39,
          "line": "    A_FUTURE = (\"A Future\",)"
        },
        {
          "lineno": 40,
          "line": "    ELYSIAN_EMBERS = (\"Elysian Embers\",)"
        },
        {
          "lineno": 41,
          "line": "    INSPIRING_CINEMATIC = (\"Inspiring Cinematic\",)"
        },
        {
          "lineno": 42,
          "line": "    BLADERUNNER_REMIX = (\"Bladerunner Remix\",)"
        },
        {
          "lineno": 43,
          "line": "    IZZAMUZZIC = (\"Izzamuzzic\",)"
        },
        {
          "lineno": 44,
          "line": "    NAS = (\"Nas\",)"
        },
        {
          "lineno": 45,
          "line": "    PARIS_ELSE = (\"Paris - Else\",)"
        },
        {
          "lineno": 46,
          "line": "    SNOWFALL = (\"Snowfall\",)"
        },
        {
          "lineno": 47,
          "line": "    BURLESQUE = (\"Burlesque\",)"
        },
        {
          "lineno": 48,
          "line": "    CORNY_CANDY = (\"Corny Candy\",)"
        },
        {
          "lineno": 49,
          "line": "    HIGHWAY_NOCTURNE = (\"Highway Nocturne\",)"
        },
        {
          "lineno": 50,
          "line": "    I_DONT_THINK_SO = (\"I Don't Think So\",)"
        },
        {
          "lineno": 51,
          "line": "    LOSING_YOUR_MARBLES = (\"Losing Your Marbles\",)"
        },
        {
          "lineno": 52,
          "line": "    REFRESHER = (\"Refresher\",)"
        },
        {
          "lineno": 53,
          "line": "    TOURIST = (\"Tourist\",)"
        },
        {
          "lineno": 54,
          "line": "    TWIN_TYCHES = (\"Twin Tyches\",)"
        },
        {
          "lineno": 55,
          "line": ""
        },
        {
          "lineno": 56,
          "line": "    @property"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class AudioTrack(str, Enum):\n    OBSERVER = (\"Observer\",)\n    FUTURISTIC_BEAT = (\"Futuristic Beat\",)\n    SCIENCE_DOCUMENTARY = (\"Science Documentary\",)\n    HOTLINE = (\"Hotline\",)\n    BLADERUNNER_2049 = (\"Bladerunner 2049\",)\n    A_FUTURE = (\"A Future\",)\n    ELYSIAN_EMBERS = (\"Elysian Embers\",)\n    INSPIRING_CINEMATIC = (\"Inspiring Cinematic\",)\n    BLADERUNNER_REMIX = (\"Bladerunner Remix\",)\n    IZZAMUZZIC = (\"Izzamuzzic\",)\n    NAS = (\"Nas\",)\n    PARIS_ELSE = (\"Paris - Else\",)\n    SNOWFALL = (\"Snowfall\",)\n    BURLESQUE = (\"Burlesque\",)\n    CORNY_CANDY = (\"Corny Candy\",)\n    HIGHWAY_NOCTURNE = (\"Highway Nocturne\",)\n    I_DONT_THINK_SO = (\"I Don't Think So\",)\n    LOSING_YOUR_MARBLES = (\"Losing Your Marbles\",)\n    REFRESHER = (\"Refresher\",)\n    TOURIST = (\"Tourist\",)\n    TWIN_TYCHES = (\"Twin Tyches\",)\n@property",
          "successors": []
        }
      ]
    },
    {
      "name": "GenerationPreset",
      "type": "class",
      "start_line": 84,
      "end_line": 106,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 84,
          "line": "class GenerationPreset(str, Enum):"
        },
        {
          "lineno": 85,
          "line": "    LEONARDO = (\"Default\",)"
        },
        {
          "lineno": 86,
          "line": "    ANIME = (\"Anime\",)"
        },
        {
          "lineno": 87,
          "line": "    REALISM = (\"Realist\",)"
        },
        {
          "lineno": 88,
          "line": "    ILLUSTRATION = (\"Illustration\",)"
        },
        {
          "lineno": 89,
          "line": "    SKETCH_COLOR = (\"Sketch Color\",)"
        },
        {
          "lineno": 90,
          "line": "    SKETCH_BW = (\"Sketch B&W\",)"
        },
        {
          "lineno": 91,
          "line": "    PIXAR = (\"Pixar\",)"
        },
        {
          "lineno": 92,
          "line": "    INK = (\"Japanese Ink\",)"
        },
        {
          "lineno": 93,
          "line": "    RENDER_3D = (\"3D Render\",)"
        },
        {
          "lineno": 94,
          "line": "    LEGO = (\"Lego\",)"
        },
        {
          "lineno": 95,
          "line": "    SCIFI = (\"Sci-Fi\",)"
        },
        {
          "lineno": 96,
          "line": "    RECRO_CARTOON = (\"Retro Cartoon\",)"
        },
        {
          "lineno": 97,
          "line": "    PIXEL_ART = (\"Pixel Art\",)"
        },
        {
          "lineno": 98,
          "line": "    CREATIVE = (\"Creative\",)"
        },
        {
          "lineno": 99,
          "line": "    PHOTOGRAPHY = (\"Photography\",)"
        },
        {
          "lineno": 100,
          "line": "    RAYTRACED = (\"Raytraced\",)"
        },
        {
          "lineno": 101,
          "line": "    ENVIRONMENT = (\"Environment\",)"
        },
        {
          "lineno": 102,
          "line": "    FANTASY = (\"Fantasy\",)"
        },
        {
          "lineno": 103,
          "line": "    ANIME_SR = (\"Anime Realism\",)"
        },
        {
          "lineno": 104,
          "line": "    MOVIE = (\"Movie\",)"
        },
        {
          "lineno": 105,
          "line": "    STYLIZED_ILLUSTRATION = (\"Stylized Illustration\",)"
        },
        {
          "lineno": 106,
          "line": "    MANGA = (\"Manga\",)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GenerationPreset(str, Enum):\n    LEONARDO = (\"Default\",)\n    ANIME = (\"Anime\",)\n    REALISM = (\"Realist\",)\n    ILLUSTRATION = (\"Illustration\",)\n    SKETCH_COLOR = (\"Sketch Color\",)\n    SKETCH_BW = (\"Sketch B&W\",)\n    PIXAR = (\"Pixar\",)\n    INK = (\"Japanese Ink\",)\n    RENDER_3D = (\"3D Render\",)\n    LEGO = (\"Lego\",)\n    SCIFI = (\"Sci-Fi\",)\n    RECRO_CARTOON = (\"Retro Cartoon\",)\n    PIXEL_ART = (\"Pixel Art\",)\n    CREATIVE = (\"Creative\",)\n    PHOTOGRAPHY = (\"Photography\",)\n    RAYTRACED = (\"Raytraced\",)\n    ENVIRONMENT = (\"Environment\",)\n    FANTASY = (\"Fantasy\",)\n    ANIME_SR = (\"Anime Realism\",)\n    MOVIE = (\"Movie\",)\n    STYLIZED_ILLUSTRATION = (\"Stylized Illustration\",)\n    MANGA = (\"Manga\",)",
          "successors": []
        }
      ]
    },
    {
      "name": "Voice",
      "type": "class",
      "start_line": 109,
      "end_line": 130,
      "functions": [
        {
          "name": "voice_id",
          "type": "function",
          "start_line": 118,
          "end_line": 127,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 118,
              "line": "    def voice_id(self):"
            },
            {
              "lineno": 119,
              "line": "        voice_id_map = {"
            },
            {
              "lineno": 120,
              "line": "            Voice.LILY: \"pFZP5JQG7iQjIQuC4Bku\","
            },
            {
              "lineno": 121,
              "line": "            Voice.DANIEL: \"onwK4e9ZLuTAKqWW03F9\","
            },
            {
              "lineno": 122,
              "line": "            Voice.BRIAN: \"nPczCjzI2devNBz1zQrb\","
            },
            {
              "lineno": 123,
              "line": "            Voice.JESSICA: \"cgSgspJ2msm6clMCkdW9\","
            },
            {
              "lineno": 124,
              "line": "            Voice.CHARLOTTE: \"XB0fDUnXU5powFXDhCwa\","
            },
            {
              "lineno": 125,
              "line": "            Voice.CALLUM: \"N2lVS1w4EtoT3dr4eOWO\","
            },
            {
              "lineno": 126,
              "line": "        }"
            },
            {
              "lineno": 127,
              "line": "        return voice_id_map[self]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def voice_id(self):\n        voice_id_map = {\n            Voice.LILY: \"pFZP5JQG7iQjIQuC4Bku\",\n            Voice.DANIEL: \"onwK4e9ZLuTAKqWW03F9\",\n            Voice.BRIAN: \"nPczCjzI2devNBz1zQrb\",\n            Voice.JESSICA: \"cgSgspJ2msm6clMCkdW9\",\n            Voice.CHARLOTTE: \"XB0fDUnXU5powFXDhCwa\",\n            Voice.CALLUM: \"N2lVS1w4EtoT3dr4eOWO\",\n        }\n        return voice_id_map[self]",
              "successors": []
            }
          ]
        },
        {
          "name": "__str__",
          "type": "function",
          "start_line": 129,
          "end_line": 130,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 129,
              "line": "    def __str__(self):"
            },
            {
              "lineno": 130,
              "line": "        return self.value"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __str__(self):\n        return self.value",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 109,
          "line": "class Voice(str, Enum):"
        },
        {
          "lineno": 110,
          "line": "    LILY = \"Lily\""
        },
        {
          "lineno": 111,
          "line": "    DANIEL = \"Daniel\""
        },
        {
          "lineno": 112,
          "line": "    BRIAN = \"Brian\""
        },
        {
          "lineno": 113,
          "line": "    JESSICA = \"Jessica\""
        },
        {
          "lineno": 114,
          "line": "    CHARLOTTE = \"Charlotte\""
        },
        {
          "lineno": 115,
          "line": "    CALLUM = \"Callum\""
        },
        {
          "lineno": 116,
          "line": ""
        },
        {
          "lineno": 117,
          "line": "    @property"
        },
        {
          "lineno": 128,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Voice(str, Enum):\n    LILY = \"Lily\"\n    DANIEL = \"Daniel\"\n    BRIAN = \"Brian\"\n    JESSICA = \"Jessica\"\n    CHARLOTTE = \"Charlotte\"\n    CALLUM = \"Callum\"\n@property",
          "successors": [
            {
              "id": 3,
              "label": "",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "VisualMediaType",
      "type": "class",
      "start_line": 133,
      "end_line": 136,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 133,
          "line": "class VisualMediaType(str, Enum):"
        },
        {
          "lineno": 134,
          "line": "    STOCK_VIDEOS = (\"stockVideo\",)"
        },
        {
          "lineno": 135,
          "line": "    MOVING_AI_IMAGES = (\"movingImage\",)"
        },
        {
          "lineno": 136,
          "line": "    AI_VIDEO = (\"aiVideo\",)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class VisualMediaType(str, Enum):\n    STOCK_VIDEOS = (\"stockVideo\",)\n    MOVING_AI_IMAGES = (\"movingImage\",)\n    AI_VIDEO = (\"aiVideo\",)",
          "successors": []
        }
      ]
    },
    {
      "name": "AIShortformVideoCreatorBlock",
      "type": "class",
      "start_line": 142,
      "end_line": 323,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 186,
          "end_line": 217,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 186,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 187,
              "line": "        super().__init__("
            },
            {
              "lineno": 188,
              "line": "            id=\"361697fb-0c4f-4feb-aed3-8320c88c771b\","
            },
            {
              "lineno": 189,
              "line": "            description=\"Creates a shortform video using revid.ai\","
            },
            {
              "lineno": 190,
              "line": "            categories={BlockCategory.SOCIAL, BlockCategory.AI},"
            },
            {
              "lineno": 191,
              "line": "            input_schema=AIShortformVideoCreatorBlock.Input,"
            },
            {
              "lineno": 192,
              "line": "            output_schema=AIShortformVideoCreatorBlock.Output,"
            },
            {
              "lineno": 193,
              "line": "            test_input={"
            },
            {
              "lineno": 194,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 195,
              "line": "                \"script\": \"[close-up of a cat] Meow!\","
            },
            {
              "lineno": 196,
              "line": "                \"ratio\": \"9 / 16\","
            },
            {
              "lineno": 197,
              "line": "                \"resolution\": \"720p\","
            },
            {
              "lineno": 198,
              "line": "                \"frame_rate\": 60,"
            },
            {
              "lineno": 199,
              "line": "                \"generation_preset\": GenerationPreset.LEONARDO,"
            },
            {
              "lineno": 200,
              "line": "                \"background_music\": AudioTrack.HIGHWAY_NOCTURNE,"
            },
            {
              "lineno": 201,
              "line": "                \"voice\": Voice.LILY,"
            },
            {
              "lineno": 202,
              "line": "                \"video_style\": VisualMediaType.STOCK_VIDEOS,"
            },
            {
              "lineno": 203,
              "line": "            },"
            },
            {
              "lineno": 204,
              "line": "            test_output=("
            },
            {
              "lineno": 205,
              "line": "                \"video_url\","
            },
            {
              "lineno": 206,
              "line": "                \"https://example.com/video.mp4\","
            },
            {
              "lineno": 207,
              "line": "            ),"
            },
            {
              "lineno": 208,
              "line": "            test_mock={"
            },
            {
              "lineno": 209,
              "line": "                \"create_webhook\": lambda: ("
            },
            {
              "lineno": 210,
              "line": "                    \"test_uuid\","
            },
            {
              "lineno": 211,
              "line": "                    \"https://webhook.site/test_uuid\","
            },
            {
              "lineno": 212,
              "line": "                ),"
            },
            {
              "lineno": 213,
              "line": "                \"create_video\": lambda api_key, payload: {\"pid\": \"test_pid\"},"
            },
            {
              "lineno": 214,
              "line": "                \"wait_for_video\": lambda api_key, pid, webhook_token, max_wait_time=1000: \"https://example.com/video.mp4\","
            },
            {
              "lineno": 215,
              "line": "            },"
            },
            {
              "lineno": 216,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 217,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"361697fb-0c4f-4feb-aed3-8320c88c771b\",\n            description=\"Creates a shortform video using revid.ai\",\n            categories={BlockCategory.SOCIAL, BlockCategory.AI},\n            input_schema=AIShortformVideoCreatorBlock.Input,\n            output_schema=AIShortformVideoCreatorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"script\": \"[close-up of a cat] Meow!\",\n                \"ratio\": \"9 / 16\",\n                \"resolution\": \"720p\",\n                \"frame_rate\": 60,\n                \"generation_preset\": GenerationPreset.LEONARDO,\n                \"background_music\": AudioTrack.HIGHWAY_NOCTURNE,\n                \"voice\": Voice.LILY,\n                \"video_style\": VisualMediaType.STOCK_VIDEOS,\n            },\n            test_output=(\n                \"video_url\",\n                \"https://example.com/video.mp4\",\n            ),\n            test_mock={\n                \"create_webhook\": lambda: (\n                    \"test_uuid\",\n                    \"https://webhook.site/test_uuid\",\n                ),\n                \"create_video\": lambda api_key, payload: {\"pid\": \"test_pid\"},\n                \"wait_for_video\": lambda api_key, pid, webhook_token, max_wait_time=1000: \"https://example.com/video.mp4\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "create_webhook",
          "type": "function",
          "start_line": 219,
          "end_line": 224,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 219,
              "line": "    def create_webhook(self):"
            },
            {
              "lineno": 220,
              "line": "        url = \"https://webhook.site/token\""
            },
            {
              "lineno": 221,
              "line": "        headers = {\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"}"
            },
            {
              "lineno": 222,
              "line": "        response = requests.post(url, headers=headers)"
            },
            {
              "lineno": 223,
              "line": "        webhook_data = response.json()"
            },
            {
              "lineno": 224,
              "line": "        return webhook_data[\"uuid\"], f\"https://webhook.site/{webhook_data['uuid']}\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def create_webhook(self):\n    url = \"https://webhook.site/token\"\n    headers = {\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"}\n    response = requests.post(url, headers=headers)\n    webhook_data = response.json()\n    return webhook_data[\"uuid\"], f\"https://webhook.site/{webhook_data['uuid']}\"",
              "successors": []
            }
          ]
        },
        {
          "name": "create_video",
          "type": "function",
          "start_line": 226,
          "end_line": 233,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 226,
              "line": "    def create_video(self, api_key: SecretStr, payload: dict) -> dict:"
            },
            {
              "lineno": 227,
              "line": "        url = \"https://www.revid.ai/api/public/v2/render\""
            },
            {
              "lineno": 228,
              "line": "        headers = {\"key\": api_key.get_secret_value()}"
            },
            {
              "lineno": 229,
              "line": "        response = requests.post(url, json=payload, headers=headers)"
            },
            {
              "lineno": 230,
              "line": "        logger.debug("
            },
            {
              "lineno": 231,
              "line": "            f\"API Response Status Code: {response.status_code}, Content: {response.text}\""
            },
            {
              "lineno": 232,
              "line": "        )"
            },
            {
              "lineno": 233,
              "line": "        return response.json()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def create_video(self, api_key: SecretStr, payload: dict) -> dict:\n        url = \"https://www.revid.ai/api/public/v2/render\"\n        headers = {\"key\": api_key.get_secret_value()}\n        response = requests.post(url, json=payload, headers=headers)\n        logger.debug(\n            f\"API Response Status Code: {response.status_code}, Content: {response.text}\"\n        )\n        return response.json()",
              "successors": []
            }
          ]
        },
        {
          "name": "check_video_status",
          "type": "function",
          "start_line": 235,
          "end_line": 239,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 235,
              "line": "    def check_video_status(self, api_key: SecretStr, pid: str) -> dict:"
            },
            {
              "lineno": 236,
              "line": "        url = f\"https://www.revid.ai/api/public/v2/status?pid={pid}\""
            },
            {
              "lineno": 237,
              "line": "        headers = {\"key\": api_key.get_secret_value()}"
            },
            {
              "lineno": 238,
              "line": "        response = requests.get(url, headers=headers)"
            },
            {
              "lineno": 239,
              "line": "        return response.json()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def check_video_status(self, api_key: SecretStr, pid: str) -> dict:\n        url = f\"https://www.revid.ai/api/public/v2/status?pid={pid}\"\n        headers = {\"key\": api_key.get_secret_value()}\n        response = requests.get(url, headers=headers)\n        return response.json()",
              "successors": []
            }
          ]
        },
        {
          "name": "wait_for_video",
          "type": "function",
          "start_line": 241,
          "end_line": 266,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 241,
              "line": "    def wait_for_video("
            },
            {
              "lineno": 242,
              "line": "        self,"
            },
            {
              "lineno": 243,
              "line": "        api_key: SecretStr,"
            },
            {
              "lineno": 244,
              "line": "        pid: str,"
            },
            {
              "lineno": 245,
              "line": "        webhook_token: str,"
            },
            {
              "lineno": 246,
              "line": "        max_wait_time: int = 1000,"
            },
            {
              "lineno": 247,
              "line": "    ) -> str:"
            },
            {
              "lineno": 248,
              "line": "        start_time = time.time()"
            },
            {
              "lineno": 249,
              "line": "        while time.time() - start_time < max_wait_time:"
            },
            {
              "lineno": 250,
              "line": "            status = self.check_video_status(api_key, pid)"
            },
            {
              "lineno": 251,
              "line": "            logger.debug(f\"Video status: {status}\")"
            },
            {
              "lineno": 252,
              "line": ""
            },
            {
              "lineno": 253,
              "line": "            if status.get(\"status\") == \"ready\" and \"videoUrl\" in status:"
            },
            {
              "lineno": 254,
              "line": "                return status[\"videoUrl\"]"
            },
            {
              "lineno": 255,
              "line": "            elif status.get(\"status\") == \"error\":"
            },
            {
              "lineno": 256,
              "line": "                error_message = status.get(\"error\", \"Unknown error occurred\")"
            },
            {
              "lineno": 257,
              "line": "                logger.error(f\"Video creation failed: {error_message}\")"
            },
            {
              "lineno": 258,
              "line": "                raise ValueError(f\"Video creation failed: {error_message}\")"
            },
            {
              "lineno": 259,
              "line": "            elif status.get(\"status\") in [\"FAILED\", \"CANCELED\"]:"
            },
            {
              "lineno": 260,
              "line": "                logger.error(f\"Video creation failed: {status.get('message')}\")"
            },
            {
              "lineno": 261,
              "line": "                raise ValueError(f\"Video creation failed: {status.get('message')}\")"
            },
            {
              "lineno": 262,
              "line": ""
            },
            {
              "lineno": 263,
              "line": "            time.sleep(10)"
            },
            {
              "lineno": 264,
              "line": ""
            },
            {
              "lineno": 265,
              "line": "        logger.error(\"Video creation timed out\")"
            },
            {
              "lineno": 266,
              "line": "        raise TimeoutError(\"Video creation timed out\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def wait_for_video(\n        self,\n        api_key: SecretStr,\n        pid: str,\n        webhook_token: str,\n        max_wait_time: int = 1000,\n    ) -> str:\n        start_time = time.time()",
              "successors": [
                {
                  "id": 3,
                  "label": "        while time.time() - start_time < max_wait_time:",
                  "successors": [
                    {
                      "id": 4,
                      "label": "            status = self.check_video_status(api_key, pid)\n            logger.debug(f\"Video status: {status}\")",
                      "successors": [
                        {
                          "id": 5,
                          "label": "            if status.get(\"status\") == \"ready\" and \"videoUrl\" in status:\n                return status[\"videoUrl\"]",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "            elif status.get(\"status\") == \"error\":\n                error_message = status.get(\"error\", \"Unknown error occurred\")\n                logger.error(f\"Video creation failed: {error_message}\")\n                raise ValueError(f\"Video creation failed: {error_message}\")",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "            elif status.get(\"status\") in [\"FAILED\", \"CANCELED\"]:\n                logger.error(f\"Video creation failed: {status.get('message')}\")\n                raise ValueError(f\"Video creation failed: {status.get('message')}\")",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "label": "            time.sleep(10)",
                          "successors": [
                            {
                              "id": 3,
                              "label": "        while time.time() - start_time < max_wait_time:",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "        logger.error(\"Video creation timed out\")\n        raise TimeoutError(\"Video creation timed out\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 268,
          "end_line": 323,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 268,
              "line": "    def run("
            },
            {
              "lineno": 269,
              "line": "        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs"
            },
            {
              "lineno": 270,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 271,
              "line": "        # Create a new Webhook.site URL"
            },
            {
              "lineno": 272,
              "line": "        webhook_token, webhook_url = self.create_webhook()"
            },
            {
              "lineno": 273,
              "line": "        logger.debug(f\"Webhook URL: {webhook_url}\")"
            },
            {
              "lineno": 274,
              "line": ""
            },
            {
              "lineno": 275,
              "line": "        audio_url = input_data.background_music.audio_url"
            },
            {
              "lineno": 276,
              "line": ""
            },
            {
              "lineno": 277,
              "line": "        payload = {"
            },
            {
              "lineno": 278,
              "line": "            \"frameRate\": input_data.frame_rate,"
            },
            {
              "lineno": 279,
              "line": "            \"resolution\": input_data.resolution,"
            },
            {
              "lineno": 280,
              "line": "            \"frameDurationMultiplier\": 18,"
            },
            {
              "lineno": 281,
              "line": "            \"webhook\": webhook_url,"
            },
            {
              "lineno": 282,
              "line": "            \"creationParams\": {"
            },
            {
              "lineno": 283,
              "line": "                \"mediaType\": input_data.video_style,"
            },
            {
              "lineno": 284,
              "line": "                \"captionPresetName\": \"Wrap 1\","
            },
            {
              "lineno": 285,
              "line": "                \"selectedVoice\": input_data.voice.voice_id,"
            },
            {
              "lineno": 286,
              "line": "                \"hasEnhancedGeneration\": True,"
            },
            {
              "lineno": 287,
              "line": "                \"generationPreset\": input_data.generation_preset.name,"
            },
            {
              "lineno": 288,
              "line": "                \"selectedAudio\": input_data.background_music,"
            },
            {
              "lineno": 289,
              "line": "                \"origin\": \"/create\","
            },
            {
              "lineno": 290,
              "line": "                \"inputText\": input_data.script,"
            },
            {
              "lineno": 291,
              "line": "                \"flowType\": \"text-to-video\","
            },
            {
              "lineno": 292,
              "line": "                \"slug\": \"create-tiktok-video\","
            },
            {
              "lineno": 293,
              "line": "                \"hasToGenerateVoice\": True,"
            },
            {
              "lineno": 294,
              "line": "                \"hasToTranscript\": False,"
            },
            {
              "lineno": 295,
              "line": "                \"hasToSearchMedia\": True,"
            },
            {
              "lineno": 296,
              "line": "                \"hasAvatar\": False,"
            },
            {
              "lineno": 297,
              "line": "                \"hasWebsiteRecorder\": False,"
            },
            {
              "lineno": 298,
              "line": "                \"hasTextSmallAtBottom\": False,"
            },
            {
              "lineno": 299,
              "line": "                \"ratio\": input_data.ratio,"
            },
            {
              "lineno": 300,
              "line": "                \"sourceType\": \"contentScraping\","
            },
            {
              "lineno": 301,
              "line": "                \"selectedStoryStyle\": {\"value\": \"custom\", \"label\": \"Custom\"},"
            },
            {
              "lineno": 302,
              "line": "                \"hasToGenerateVideos\": input_data.video_style"
            },
            {
              "lineno": 303,
              "line": "                != VisualMediaType.STOCK_VIDEOS,"
            },
            {
              "lineno": 304,
              "line": "                \"audioUrl\": audio_url,"
            },
            {
              "lineno": 305,
              "line": "            },"
            },
            {
              "lineno": 306,
              "line": "        }"
            },
            {
              "lineno": 307,
              "line": ""
            },
            {
              "lineno": 308,
              "line": "        logger.debug(\"Creating video...\")"
            },
            {
              "lineno": 309,
              "line": "        response = self.create_video(credentials.api_key, payload)"
            },
            {
              "lineno": 310,
              "line": "        pid = response.get(\"pid\")"
            },
            {
              "lineno": 311,
              "line": ""
            },
            {
              "lineno": 312,
              "line": "        if not pid:"
            },
            {
              "lineno": 313,
              "line": "            logger.error("
            },
            {
              "lineno": 314,
              "line": "                f\"Failed to create video: No project ID returned. API Response: {response}\""
            },
            {
              "lineno": 315,
              "line": "            )"
            },
            {
              "lineno": 316,
              "line": "            raise RuntimeError(\"Failed to create video: No project ID returned\")"
            },
            {
              "lineno": 317,
              "line": "        else:"
            },
            {
              "lineno": 318,
              "line": "            logger.debug("
            },
            {
              "lineno": 319,
              "line": "                f\"Video created with project ID: {pid}. Waiting for completion...\""
            },
            {
              "lineno": 320,
              "line": "            )"
            },
            {
              "lineno": 321,
              "line": "            video_url = self.wait_for_video(credentials.api_key, pid, webhook_token)"
            },
            {
              "lineno": 322,
              "line": "            logger.debug(f\"Video ready: {video_url}\")"
            },
            {
              "lineno": 323,
              "line": "            yield \"video_url\", video_url"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        # Create a new Webhook.site URL\n        webhook_token, webhook_url = self.create_webhook()\n        logger.debug(f\"Webhook URL: {webhook_url}\")\n\n        audio_url = input_data.background_music.audio_url\n\n        payload = {\n            \"frameRate\": input_data.frame_rate,\n            \"resolution\": input_data.resolution,\n            \"frameDurationMultiplier\": 18,\n            \"webhook\": webhook_url,\n            \"creationParams\": {\n                \"mediaType\": input_data.video_style,\n                \"captionPresetName\": \"Wrap 1\",\n                \"selectedVoice\": input_data.voice.voice_id,\n                \"hasEnhancedGeneration\": True,\n                \"generationPreset\": input_data.generation_preset.name,\n                \"selectedAudio\": input_data.background_music,\n                \"origin\": \"/create\",\n                \"inputText\": input_data.script,\n                \"flowType\": \"text-to-video\",\n                \"slug\": \"create-tiktok-video\",\n                \"hasToGenerateVoice\": True,\n                \"hasToTranscript\": False,\n                \"hasToSearchMedia\": True,\n                \"hasAvatar\": False,\n                \"hasWebsiteRecorder\": False,\n                \"hasTextSmallAtBottom\": False,\n                \"ratio\": input_data.ratio,\n                \"sourceType\": \"contentScraping\",\n                \"selectedStoryStyle\": {\"value\": \"custom\", \"label\": \"Custom\"},\n                \"hasToGenerateVideos\": input_data.video_style != VisualMediaType.STOCK_VIDEOS,\n                \"audioUrl\": audio_url,\n            },\n        }\n\n        logger.debug(\"Creating video...\")\n        response = self.create_video(credentials.api_key, payload)\n        pid = response.get(\"pid\")\n",
              "successors": [
                {
                  "id": 2,
                  "label": "        if not pid:\n            logger.error(\n                f\"Failed to create video: No project ID returned. API Response: {response}\"\n            )\n            raise RuntimeError(\"Failed to create video: No project ID returned\")\n",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "        else:\n            logger.debug(\n                f\"Video created with project ID: {pid}. Waiting for completion...\"\n            )\n            video_url = self.wait_for_video(credentials.api_key, pid, webhook_token)\n            logger.debug(f\"Video ready: {video_url}\")\n            yield \"video_url\", video_url\n",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 143,
          "end_line": 180,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 143,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 144,
              "line": "        credentials: CredentialsMetaInput["
            },
            {
              "lineno": 145,
              "line": "            Literal[ProviderName.REVID], Literal[\"api_key\"]"
            },
            {
              "lineno": 146,
              "line": "        ] = CredentialsField("
            },
            {
              "lineno": 147,
              "line": "            description=\"The revid.ai integration can be used with \""
            },
            {
              "lineno": 148,
              "line": "            \"any API key with sufficient permissions for the blocks it is used on.\","
            },
            {
              "lineno": 149,
              "line": "        )"
            },
            {
              "lineno": 150,
              "line": "        script: str = SchemaField("
            },
            {
              "lineno": 151,
              "line": "            description=\"\"\"1. Use short and punctuated sentences\\n\\n2. Use linebreaks to create a new clip\\n\\n3. Text outside of brackets is spoken by the AI, and [text between brackets] will be used to guide the visual generation. For example, [close-up of a cat] will show a close-up of a cat.\"\"\","
            },
            {
              "lineno": 152,
              "line": "            placeholder=\"[close-up of a cat] Meow!\","
            },
            {
              "lineno": 153,
              "line": "        )"
            },
            {
              "lineno": 154,
              "line": "        ratio: str = SchemaField("
            },
            {
              "lineno": 155,
              "line": "            description=\"Aspect ratio of the video\", default=\"9 / 16\""
            },
            {
              "lineno": 156,
              "line": "        )"
            },
            {
              "lineno": 157,
              "line": "        resolution: str = SchemaField("
            },
            {
              "lineno": 158,
              "line": "            description=\"Resolution of the video\", default=\"720p\""
            },
            {
              "lineno": 159,
              "line": "        )"
            },
            {
              "lineno": 160,
              "line": "        frame_rate: int = SchemaField(description=\"Frame rate of the video\", default=60)"
            },
            {
              "lineno": 161,
              "line": "        generation_preset: GenerationPreset = SchemaField("
            },
            {
              "lineno": 162,
              "line": "            description=\"Generation preset for visual style - only effects AI generated visuals\","
            },
            {
              "lineno": 163,
              "line": "            default=GenerationPreset.LEONARDO,"
            },
            {
              "lineno": 164,
              "line": "            placeholder=GenerationPreset.LEONARDO,"
            },
            {
              "lineno": 165,
              "line": "        )"
            },
            {
              "lineno": 166,
              "line": "        background_music: AudioTrack = SchemaField("
            },
            {
              "lineno": 167,
              "line": "            description=\"Background music track\","
            },
            {
              "lineno": 168,
              "line": "            default=AudioTrack.HIGHWAY_NOCTURNE,"
            },
            {
              "lineno": 169,
              "line": "            placeholder=AudioTrack.HIGHWAY_NOCTURNE,"
            },
            {
              "lineno": 170,
              "line": "        )"
            },
            {
              "lineno": 171,
              "line": "        voice: Voice = SchemaField("
            },
            {
              "lineno": 172,
              "line": "            description=\"AI voice to use for narration\","
            },
            {
              "lineno": 173,
              "line": "            default=Voice.LILY,"
            },
            {
              "lineno": 174,
              "line": "            placeholder=Voice.LILY,"
            },
            {
              "lineno": 175,
              "line": "        )"
            },
            {
              "lineno": 176,
              "line": "        video_style: VisualMediaType = SchemaField("
            },
            {
              "lineno": 177,
              "line": "            description=\"Type of visual media to use for the video\","
            },
            {
              "lineno": 178,
              "line": "            default=VisualMediaType.STOCK_VIDEOS,"
            },
            {
              "lineno": 179,
              "line": "            placeholder=VisualMediaType.STOCK_VIDEOS,"
            },
            {
              "lineno": 180,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REVID], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The revid.ai integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        script: str = SchemaField(\n            description=\"\"\"1. Use short and punctuated sentences\\n\\n2. Use linebreaks to create a new clip\\n\\n3. Text outside of brackets is spoken by the AI, and [text between brackets] will be used to guide the visual generation. For example, [close-up of a cat] will show a close-up of a cat.\"\"\",\n            placeholder=\"[close-up of a cat] Meow!\",\n        )\n        ratio: str = SchemaField(\n            description=\"Aspect ratio of the video\", default=\"9 / 16\"\n        )\n        resolution: str = SchemaField(\n            description=\"Resolution of the video\", default=\"720p\"\n        )\n        frame_rate: int = SchemaField(description=\"Frame rate of the video\", default=60)\n        generation_preset: GenerationPreset = SchemaField(\n            description=\"Generation preset for visual style - only effects AI generated visuals\",\n            default=GenerationPreset.LEONARDO,\n            placeholder=GenerationPreset.LEONARDO,\n        )\n        background_music: AudioTrack = SchemaField(\n            description=\"Background music track\",\n            default=AudioTrack.HIGHWAY_NOCTURNE,\n            placeholder=AudioTrack.HIGHWAY_NOCTURNE,\n        )\n        voice: Voice = SchemaField(\n            description=\"AI voice to use for narration\",\n            default=Voice.LILY,\n            placeholder=Voice.LILY,\n        )\n        video_style: VisualMediaType = SchemaField(\n            description=\"Type of visual media to use for the video\",\n            default=VisualMediaType.STOCK_VIDEOS,\n            placeholder=VisualMediaType.STOCK_VIDEOS,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 182,
          "end_line": 184,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 182,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 183,
              "line": "        video_url: str = SchemaField(description=\"The URL of the created video\")"
            },
            {
              "lineno": 184,
              "line": "        error: str = SchemaField(description=\"Error message if the request failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        video_url: str = SchemaField(description=\"The URL of the created video\")\n        error: str = SchemaField(description=\"Error message if the request failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 142,
          "line": "class AIShortformVideoCreatorBlock(Block):"
        },
        {
          "lineno": 181,
          "line": ""
        },
        {
          "lineno": 185,
          "line": ""
        },
        {
          "lineno": 218,
          "line": ""
        },
        {
          "lineno": 225,
          "line": ""
        },
        {
          "lineno": 234,
          "line": ""
        },
        {
          "lineno": 240,
          "line": ""
        },
        {
          "lineno": 267,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "import time"
    },
    {
      "lineno": 3,
      "line": "from enum import Enum"
    },
    {
      "lineno": 4,
      "line": "from typing import Literal"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from pydantic import SecretStr"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 9,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 10,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 11,
      "line": "    CredentialsField,"
    },
    {
      "lineno": 12,
      "line": "    CredentialsMetaInput,"
    },
    {
      "lineno": 13,
      "line": "    SchemaField,"
    },
    {
      "lineno": 14,
      "line": ")"
    },
    {
      "lineno": 15,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 16,
      "line": "from backend.util.request import requests"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": "TEST_CREDENTIALS = APIKeyCredentials("
    },
    {
      "lineno": 19,
      "line": "    id=\"01234567-89ab-cdef-0123-456789abcdef\","
    },
    {
      "lineno": 20,
      "line": "    provider=\"revid\","
    },
    {
      "lineno": 21,
      "line": "    api_key=SecretStr(\"mock-revid-api-key\"),"
    },
    {
      "lineno": 22,
      "line": "    title=\"Mock Revid API key\","
    },
    {
      "lineno": 23,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 24,
      "line": ")"
    },
    {
      "lineno": 25,
      "line": "TEST_CREDENTIALS_INPUT = {"
    },
    {
      "lineno": 26,
      "line": "    \"provider\": TEST_CREDENTIALS.provider,"
    },
    {
      "lineno": 27,
      "line": "    \"id\": TEST_CREDENTIALS.id,"
    },
    {
      "lineno": 28,
      "line": "    \"type\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 29,
      "line": "    \"title\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 30,
      "line": "}"
    },
    {
      "lineno": 31,
      "line": ""
    },
    {
      "lineno": 32,
      "line": ""
    },
    {
      "lineno": 82,
      "line": ""
    },
    {
      "lineno": 83,
      "line": ""
    },
    {
      "lineno": 107,
      "line": ""
    },
    {
      "lineno": 108,
      "line": ""
    },
    {
      "lineno": 131,
      "line": ""
    },
    {
      "lineno": 132,
      "line": ""
    },
    {
      "lineno": 137,
      "line": ""
    },
    {
      "lineno": 138,
      "line": ""
    },
    {
      "lineno": 139,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 140,
      "line": ""
    },
    {
      "lineno": 141,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nimport time\nfrom enum import Enum\nfrom typing import Literal\n\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"revid\",\n    api_key=SecretStr(\"mock-revid-api-key\"),\n    title=\"Mock Revid API key\",\n    expires_at=None,\n)",
      "successors": [
        {
          "id": 3,
          "label": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\nlogger = logging.getLogger(__name__)",
          "successors": []
        }
      ]
    }
  ]
}