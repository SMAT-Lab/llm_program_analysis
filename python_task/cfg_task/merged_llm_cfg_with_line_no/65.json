{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 91,
  "functions": [
    {
      "name": "backtrack",
      "type": "function",
      "start_line": 10,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "def backtrack("
        },
        {
          "lineno": 11,
          "line": "    needed_sum: int,"
        },
        {
          "lineno": 12,
          "line": "    power: int,"
        },
        {
          "lineno": 13,
          "line": "    current_number: int,"
        },
        {
          "lineno": 14,
          "line": "    current_sum: int,"
        },
        {
          "lineno": 15,
          "line": "    solutions_count: int,"
        },
        {
          "lineno": 16,
          "line": ") -> tuple[int, int]:"
        },
        {
          "lineno": 17,
          "line": "    \"\"\""
        },
        {
          "lineno": 18,
          "line": "    >>> backtrack(13, 2, 1, 0, 0)"
        },
        {
          "lineno": 19,
          "line": "    (0, 1)"
        },
        {
          "lineno": 20,
          "line": "    >>> backtrack(10, 2, 1, 0, 0)"
        },
        {
          "lineno": 21,
          "line": "    (0, 1)"
        },
        {
          "lineno": 22,
          "line": "    >>> backtrack(10, 3, 1, 0, 0)"
        },
        {
          "lineno": 23,
          "line": "    (0, 0)"
        },
        {
          "lineno": 24,
          "line": "    >>> backtrack(20, 2, 1, 0, 0)"
        },
        {
          "lineno": 25,
          "line": "    (0, 1)"
        },
        {
          "lineno": 26,
          "line": "    >>> backtrack(15, 10, 1, 0, 0)"
        },
        {
          "lineno": 27,
          "line": "    (0, 0)"
        },
        {
          "lineno": 28,
          "line": "    >>> backtrack(16, 2, 1, 0, 0)"
        },
        {
          "lineno": 29,
          "line": "    (0, 1)"
        },
        {
          "lineno": 30,
          "line": "    >>> backtrack(20, 1, 1, 0, 0)"
        },
        {
          "lineno": 31,
          "line": "    (0, 64)"
        },
        {
          "lineno": 32,
          "line": "    \"\"\""
        },
        {
          "lineno": 33,
          "line": "    if current_sum == needed_sum:"
        },
        {
          "lineno": 34,
          "line": "        # If the sum of the powers is equal to needed_sum, then we have a solution."
        },
        {
          "lineno": 35,
          "line": "        solutions_count += 1"
        },
        {
          "lineno": 36,
          "line": "        return current_sum, solutions_count"
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "    i_to_n = current_number**power"
        },
        {
          "lineno": 39,
          "line": "    if current_sum + i_to_n <= needed_sum:"
        },
        {
          "lineno": 40,
          "line": "        # If the sum of the powers is less than needed_sum, then continue adding powers."
        },
        {
          "lineno": 41,
          "line": "        current_sum += i_to_n"
        },
        {
          "lineno": 42,
          "line": "        current_sum, solutions_count = backtrack("
        },
        {
          "lineno": 43,
          "line": "            needed_sum, power, current_number + 1, current_sum, solutions_count"
        },
        {
          "lineno": 44,
          "line": "        )"
        },
        {
          "lineno": 45,
          "line": "        current_sum -= i_to_n"
        },
        {
          "lineno": 46,
          "line": "    if i_to_n < needed_sum:"
        },
        {
          "lineno": 47,
          "line": "        # If the power of i is less than needed_sum, then try with the next power."
        },
        {
          "lineno": 48,
          "line": "        current_sum, solutions_count = backtrack("
        },
        {
          "lineno": 49,
          "line": "            needed_sum, power, current_number + 1, current_sum, solutions_count"
        },
        {
          "lineno": 50,
          "line": "        )"
        },
        {
          "lineno": 51,
          "line": "    return current_sum, solutions_count"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def backtrack(\n    needed_sum: int,\n    power: int,\n    current_number: int,\n    current_sum: int,\n    solutions_count: int,\n) -> tuple[int, int]:\n    \"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "label": "if current_sum == needed_sum:\n    # If the sum of the powers is equal to needed_sum, then we have a solution.\n    solutions_count += 1\n    return current_sum, solutions_count",
              "successors": []
            },
            {
              "id": 3,
              "label": "i_to_n = current_number**power",
              "successors": [
                {
                  "id": 4,
                  "label": "if current_sum + i_to_n <= needed_sum:\n    # If the sum of the powers is less than needed_sum, then continue adding powers.\n    current_sum += i_to_n\n    current_sum, solutions_count = backtrack(\n        needed_sum, power, current_number + 1, current_sum, solutions_count\n    )\n    current_sum -= i_to_n",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "if i_to_n < needed_sum:\n    # If the power of i is less than needed_sum, then try with the next power.\n    current_sum, solutions_count = backtrack(\n        needed_sum, power, current_number + 1, current_sum, solutions_count\n    )",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "return current_sum, solutions_count",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "solve",
      "type": "function",
      "start_line": 54,
      "end_line": 85,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 54,
          "line": "def solve(needed_sum: int, power: int) -> int:"
        },
        {
          "lineno": 55,
          "line": "    \"\"\""
        },
        {
          "lineno": 56,
          "line": "    >>> solve(13, 2)"
        },
        {
          "lineno": 57,
          "line": "    1"
        },
        {
          "lineno": 58,
          "line": "    >>> solve(10, 2)"
        },
        {
          "lineno": 59,
          "line": "    1"
        },
        {
          "lineno": 60,
          "line": "    >>> solve(10, 3)"
        },
        {
          "lineno": 61,
          "line": "    0"
        },
        {
          "lineno": 62,
          "line": "    >>> solve(20, 2)"
        },
        {
          "lineno": 63,
          "line": "    1"
        },
        {
          "lineno": 64,
          "line": "    >>> solve(15, 10)"
        },
        {
          "lineno": 65,
          "line": "    0"
        },
        {
          "lineno": 66,
          "line": "    >>> solve(16, 2)"
        },
        {
          "lineno": 67,
          "line": "    1"
        },
        {
          "lineno": 68,
          "line": "    >>> solve(20, 1)"
        },
        {
          "lineno": 69,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 70,
          "line": "        ..."
        },
        {
          "lineno": 71,
          "line": "    ValueError: Invalid input"
        },
        {
          "lineno": 72,
          "line": "    needed_sum must be between 1 and 1000, power between 2 and 10."
        },
        {
          "lineno": 73,
          "line": "    >>> solve(-10, 5)"
        },
        {
          "lineno": 74,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 75,
          "line": "        ..."
        },
        {
          "lineno": 76,
          "line": "    ValueError: Invalid input"
        },
        {
          "lineno": 77,
          "line": "    needed_sum must be between 1 and 1000, power between 2 and 10."
        },
        {
          "lineno": 78,
          "line": "    \"\"\""
        },
        {
          "lineno": 79,
          "line": "    if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):"
        },
        {
          "lineno": 80,
          "line": "        raise ValueError("
        },
        {
          "lineno": 81,
          "line": "            \"Invalid input\\n\""
        },
        {
          "lineno": 82,
          "line": "            \"needed_sum must be between 1 and 1000, power between 2 and 10.\""
        },
        {
          "lineno": 83,
          "line": "        )"
        },
        {
          "lineno": 84,
          "line": ""
        },
        {
          "lineno": 85,
          "line": "    return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def solve(needed_sum: int, power: int) -> int:\n    \"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\"\nif not (1 <= needed_sum <= 1000 and 2 <= power <= 10):",
          "successors": [
            {
              "id": 3,
              "label": "raise ValueError(\n    \"Invalid input\\n\"\n    \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n)",
              "successors": []
            },
            {
              "id": 4,
              "label": "return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "Problem source: https://www.hackerrank.com/challenges/the-power-sum/problem"
    },
    {
      "lineno": 3,
      "line": "Find the number of ways that a given integer X, can be expressed as the sum"
    },
    {
      "lineno": 4,
      "line": "of the Nth powers of unique, natural numbers. For example, if X=13 and N=2."
    },
    {
      "lineno": 5,
      "line": "We have to find all combinations of unique squares adding up to 13."
    },
    {
      "lineno": 6,
      "line": "The only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10."
    },
    {
      "lineno": 7,
      "line": "\"\"\""
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 53,
      "line": ""
    },
    {
      "lineno": 86,
      "line": ""
    },
    {
      "lineno": 87,
      "line": ""
    },
    {
      "lineno": 88,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 89,
      "line": "    import doctest"
    },
    {
      "lineno": 90,
      "line": ""
    },
    {
      "lineno": 91,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "\"\"\"\nProblem source: https://www.hackerrank.com/challenges/the-power-sum/problem\nFind the number of ways that a given integer X, can be expressed as the sum\nof the Nth powers of unique, natural numbers. For example, if X=13 and N=2.\nWe have to find all combinations of unique squares adding up to 13.\nThe only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10.",
      "successors": [
        {
          "id": 3,
          "label": "\"\"\"",
          "successors": []
        },
        {
          "id": 4,
          "label": "\n\n\n\n\n\n\n",
          "successors": []
        }
      ]
    }
  ]
}