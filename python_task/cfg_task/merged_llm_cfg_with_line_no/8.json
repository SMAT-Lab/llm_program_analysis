{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 100,
  "functions": [
    {
      "name": "get_executor_manager_client",
      "type": "function",
      "start_line": 21,
      "end_line": 25,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 21,
          "line": "def get_executor_manager_client():"
        },
        {
          "lineno": 22,
          "line": "    from backend.executor import ExecutionManager"
        },
        {
          "lineno": 23,
          "line": "    from backend.util.service import get_service_client"
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 25,
          "line": "    return get_service_client(ExecutionManager)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_executor_manager_client():\n    from backend.executor import ExecutionManager\n    from backend.util.service import get_service_client\nreturn get_service_client(ExecutionManager)",
          "successors": []
        }
      ]
    },
    {
      "name": "get_event_bus",
      "type": "function",
      "start_line": 29,
      "end_line": 32,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 29,
          "line": "def get_event_bus():"
        },
        {
          "lineno": 30,
          "line": "    from backend.data.execution import RedisExecutionEventBus"
        },
        {
          "lineno": 31,
          "line": ""
        },
        {
          "lineno": 32,
          "line": "    return RedisExecutionEventBus()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_event_bus():\n from backend.data.execution import RedisExecutionEventBus\n\n return RedisExecutionEventBus()",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "AgentExecutorBlock",
      "type": "class",
      "start_line": 35,
      "end_line": 100,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 48,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 48,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 49,
              "line": "        super().__init__("
            },
            {
              "lineno": 50,
              "line": "            id=\"e189baac-8c20-45a1-94a7-55177ea42565\","
            },
            {
              "lineno": 51,
              "line": "            description=\"Executes an existing agent inside your agent\","
            },
            {
              "lineno": 52,
              "line": "            input_schema=AgentExecutorBlock.Input,"
            },
            {
              "lineno": 53,
              "line": "            output_schema=AgentExecutorBlock.Output,"
            },
            {
              "lineno": 54,
              "line": "            block_type=BlockType.AGENT,"
            },
            {
              "lineno": 55,
              "line": "            categories={BlockCategory.AGENT},"
            },
            {
              "lineno": 56,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 58,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 58,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 59,
              "line": "        executor_manager = get_executor_manager_client()"
            },
            {
              "lineno": 60,
              "line": "        event_bus = get_event_bus()"
            },
            {
              "lineno": 61,
              "line": ""
            },
            {
              "lineno": 62,
              "line": "        graph_exec = executor_manager.add_execution("
            },
            {
              "lineno": 63,
              "line": "            graph_id=input_data.graph_id,"
            },
            {
              "lineno": 64,
              "line": "            graph_version=input_data.graph_version,"
            },
            {
              "lineno": 65,
              "line": "            user_id=input_data.user_id,"
            },
            {
              "lineno": 66,
              "line": "            data=input_data.data,"
            },
            {
              "lineno": 67,
              "line": "        )"
            },
            {
              "lineno": 68,
              "line": "        log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\""
            },
            {
              "lineno": 69,
              "line": "        logger.info(f\"Starting execution of {log_id}\")"
            },
            {
              "lineno": 70,
              "line": ""
            },
            {
              "lineno": 71,
              "line": "        for event in event_bus.listen("
            },
            {
              "lineno": 72,
              "line": "            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id"
            },
            {
              "lineno": 73,
              "line": "        ):"
            },
            {
              "lineno": 74,
              "line": "            logger.info("
            },
            {
              "lineno": 75,
              "line": "                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\""
            },
            {
              "lineno": 76,
              "line": "            )"
            },
            {
              "lineno": 77,
              "line": ""
            },
            {
              "lineno": 78,
              "line": "            if not event.node_id:"
            },
            {
              "lineno": 79,
              "line": "                if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:"
            },
            {
              "lineno": 80,
              "line": "                    logger.info(f\"Execution {log_id} ended with status {event.status}\")"
            },
            {
              "lineno": 81,
              "line": "                    break"
            },
            {
              "lineno": 82,
              "line": "                else:"
            },
            {
              "lineno": 83,
              "line": "                    continue"
            },
            {
              "lineno": 84,
              "line": ""
            },
            {
              "lineno": 85,
              "line": "            if not event.block_id:"
            },
            {
              "lineno": 86,
              "line": "                logger.warning(f\"{log_id} received event without block_id {event}\")"
            },
            {
              "lineno": 87,
              "line": "                continue"
            },
            {
              "lineno": 88,
              "line": ""
            },
            {
              "lineno": 89,
              "line": "            block = get_block(event.block_id)"
            },
            {
              "lineno": 90,
              "line": "            if not block or block.block_type != BlockType.OUTPUT:"
            },
            {
              "lineno": 91,
              "line": "                continue"
            },
            {
              "lineno": 92,
              "line": ""
            },
            {
              "lineno": 93,
              "line": "            output_name = event.input_data.get(\"name\")"
            },
            {
              "lineno": 94,
              "line": "            if not output_name:"
            },
            {
              "lineno": 95,
              "line": "                logger.warning(f\"{log_id} produced an output with no name {event}\")"
            },
            {
              "lineno": 96,
              "line": "                continue"
            },
            {
              "lineno": 97,
              "line": ""
            },
            {
              "lineno": 98,
              "line": "            for output_data in event.output_data.get(\"output\", []):"
            },
            {
              "lineno": 99,
              "line": "                logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")"
            },
            {
              "lineno": 100,
              "line": "                yield output_name, output_data"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    executor_manager = get_executor_manager_client()\n    event_bus = get_event_bus()\n\n    graph_exec = executor_manager.add_execution(\n        graph_id=input_data.graph_id,\n        graph_version=input_data.graph_version,\n        user_id=input_data.user_id,\n        data=input_data.data,\n    )\n    log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\n    logger.info(f\"Starting execution of {log_id}\")",
              "successors": [
                {
                  "id": 2,
                  "label": "for event in event_bus.listen(\n    graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n):\n    logger.info(\n        f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n    )",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if not event.node_id:\n    if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n        logger.info(f\"Execution {log_id} ended with status {event.status}\")\n        break\n    else:\n        continue",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "if not event.block_id:\n    logger.warning(f\"{log_id} received event without block_id {event}\")\n    continue\n\nblock = get_block(event.block_id)\nif not block or block.block_type != BlockType.OUTPUT:\n    continue",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "output_name = event.input_data.get(\"name\")\nif not output_name:\n    logger.warning(f\"{log_id} produced an output with no name {event}\")\n    continue",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "for output_data in event.output_data.get(\"output\", []):\n    logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n    yield output_name, output_data",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 36,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 36,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 37,
              "line": "        user_id: str = SchemaField(description=\"User ID\")"
            },
            {
              "lineno": 38,
              "line": "        graph_id: str = SchemaField(description=\"Graph ID\")"
            },
            {
              "lineno": 39,
              "line": "        graph_version: int = SchemaField(description=\"Graph Version\")"
            },
            {
              "lineno": 40,
              "line": ""
            },
            {
              "lineno": 41,
              "line": "        data: BlockInput = SchemaField(description=\"Input data for the graph\")"
            },
            {
              "lineno": 42,
              "line": "        input_schema: dict = SchemaField(description=\"Input schema for the graph\")"
            },
            {
              "lineno": 43,
              "line": "        output_schema: dict = SchemaField(description=\"Output schema for the graph\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        user_id: str = SchemaField(description=\"User ID\")\n        graph_id: str = SchemaField(description=\"Graph ID\")\n        graph_version: int = SchemaField(description=\"Graph Version\")\n\n        data: BlockInput = SchemaField(description=\"Input data for the graph\")\n        input_schema: dict = SchemaField(description=\"Input schema for the graph\")\n        output_schema: dict = SchemaField(description=\"Output schema for the graph\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 45,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 45,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 46,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        pass",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 35,
          "line": "class AgentExecutorBlock(Block):"
        },
        {
          "lineno": 44,
          "line": ""
        },
        {
          "lineno": 47,
          "line": ""
        },
        {
          "lineno": 57,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from autogpt_libs.utils.cache import thread_cached"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from backend.data.block import ("
    },
    {
      "lineno": 6,
      "line": "    Block,"
    },
    {
      "lineno": 7,
      "line": "    BlockCategory,"
    },
    {
      "lineno": 8,
      "line": "    BlockInput,"
    },
    {
      "lineno": 9,
      "line": "    BlockOutput,"
    },
    {
      "lineno": 10,
      "line": "    BlockSchema,"
    },
    {
      "lineno": 11,
      "line": "    BlockType,"
    },
    {
      "lineno": 12,
      "line": "    get_block,"
    },
    {
      "lineno": 13,
      "line": ")"
    },
    {
      "lineno": 14,
      "line": "from backend.data.execution import ExecutionStatus"
    },
    {
      "lineno": 15,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 18,
      "line": ""
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": "@thread_cached"
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 27,
      "line": ""
    },
    {
      "lineno": 28,
      "line": "@thread_cached"
    },
    {
      "lineno": 33,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import logging",
      "successors": []
    }
  ]
}