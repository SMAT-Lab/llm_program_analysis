{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 95,
  "functions": [],
  "classes": [
    {
      "name": "FancyConsoleFormatter",
      "type": "class",
      "start_line": 9,
      "end_line": 51,
      "functions": [
        {
          "name": "format",
          "type": "function",
          "start_line": 29,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 29,
              "line": "    def format(self, record: logging.LogRecord) -> str:"
            },
            {
              "lineno": 30,
              "line": "        # Make sure `msg` is a string"
            },
            {
              "lineno": 31,
              "line": "        if not hasattr(record, \"msg\"):"
            },
            {
              "lineno": 32,
              "line": "            record.msg = \"\""
            },
            {
              "lineno": 33,
              "line": "        elif type(record.msg) is not str:"
            },
            {
              "lineno": 34,
              "line": "            record.msg = str(record.msg)"
            },
            {
              "lineno": 35,
              "line": ""
            },
            {
              "lineno": 36,
              "line": "        # Determine default color based on error level"
            },
            {
              "lineno": 37,
              "line": "        level_color = \"\""
            },
            {
              "lineno": 38,
              "line": "        if record.levelno in self.LEVEL_COLOR_MAP:"
            },
            {
              "lineno": 39,
              "line": "            level_color = self.LEVEL_COLOR_MAP[record.levelno]"
            },
            {
              "lineno": 40,
              "line": "            record.levelname = f\"{level_color}{record.levelname}{Style.RESET_ALL}\""
            },
            {
              "lineno": 41,
              "line": ""
            },
            {
              "lineno": 42,
              "line": "        # Determine color for message"
            },
            {
              "lineno": 43,
              "line": "        color = getattr(record, \"color\", level_color)"
            },
            {
              "lineno": 44,
              "line": "        color_is_specified = hasattr(record, \"color\")"
            },
            {
              "lineno": 45,
              "line": ""
            },
            {
              "lineno": 46,
              "line": "        # Don't color INFO messages unless the color is explicitly specified."
            },
            {
              "lineno": 47,
              "line": "        if color and (record.levelno != logging.INFO or color_is_specified):"
            },
            {
              "lineno": 48,
              "line": "            record.msg = f\"{color}{record.msg}{Style.RESET_ALL}\""
            },
            {
              "lineno": 49,
              "line": ""
            },
            {
              "lineno": 50,
              "line": "        return super().format(record)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def format(self, record: logging.LogRecord) -> str:\n        # Make sure `msg` is a string\n        if not hasattr(record, \"msg\"):\n            record.msg = \"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "        elif type(record.msg) is not str:\n            record.msg = str(record.msg)\n        # Determine default color based on error level\n        level_color = \"\"",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        if record.levelno in self.LEVEL_COLOR_MAP:\n            level_color = self.LEVEL_COLOR_MAP[record.levelno]\n            record.levelname = f\"{level_color}{record.levelname}{Style.RESET_ALL}\"\n        # Determine color for message\n        color = getattr(record, \"color\", level_color)\n        color_is_specified = hasattr(record, \"color\")",
                      "successors": [
                        {
                          "id": 7,
                          "label": "        # Don't color INFO messages unless the color is explicitly specified.\n        if color and (record.levelno != logging.INFO or color_is_specified):\n            record.msg = f\"{color}{record.msg}{Style.RESET_ALL}\"\n        return super().format(record)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 9,
          "line": "class FancyConsoleFormatter(logging.Formatter):"
        },
        {
          "lineno": 10,
          "line": "    \"\"\""
        },
        {
          "lineno": 11,
          "line": "    A custom logging formatter designed for console output."
        },
        {
          "lineno": 12,
          "line": ""
        },
        {
          "lineno": 13,
          "line": "    This formatter enhances the standard logging output with color coding. The color"
        },
        {
          "lineno": 14,
          "line": "    coding is based on the level of the log message, making it easier to distinguish"
        },
        {
          "lineno": 15,
          "line": "    between different types of messages in the console output."
        },
        {
          "lineno": 16,
          "line": ""
        },
        {
          "lineno": 17,
          "line": "    The color for each level is defined in the LEVEL_COLOR_MAP class attribute."
        },
        {
          "lineno": 18,
          "line": "    \"\"\""
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 20,
          "line": "    # level -> (level & text color, title color)"
        },
        {
          "lineno": 21,
          "line": "    LEVEL_COLOR_MAP = {"
        },
        {
          "lineno": 22,
          "line": "        logging.DEBUG: Fore.LIGHTBLACK_EX,"
        },
        {
          "lineno": 23,
          "line": "        logging.INFO: Fore.BLUE,"
        },
        {
          "lineno": 24,
          "line": "        logging.WARNING: Fore.YELLOW,"
        },
        {
          "lineno": 25,
          "line": "        logging.ERROR: Fore.RED,"
        },
        {
          "lineno": 26,
          "line": "        logging.CRITICAL: Fore.RED + Style.BRIGHT,"
        },
        {
          "lineno": 27,
          "line": "    }"
        },
        {
          "lineno": 28,
          "line": ""
        },
        {
          "lineno": 51,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class FancyConsoleFormatter(logging.Formatter):\n    \"\"\"\n    A custom logging formatter designed for console output.\n\n    This formatter enhances the standard logging output with color coding. The color\n    coding is based on the level of the log message, making it easier to distinguish\n    between different types of messages in the console output.\n\n    The color for each level is defined in the LEVEL_COLOR_MAP class attribute.\n    \"\"\"\n\n    # level -> (level & text color, title color)\n    LEVEL_COLOR_MAP = {\nlogging.DEBUG: Fore.LIGHTBLACK_EX,\n        logging.INFO: Fore.BLUE,\n        logging.WARNING: Fore.YELLOW,\n        logging.ERROR: Fore.RED,\n        logging.CRITICAL: Fore.RED + Style.BRIGHT,\n    }",
          "successors": []
        }
      ]
    },
    {
      "name": "AGPTFormatter",
      "type": "class",
      "start_line": 53,
      "end_line": 83,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 54,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 54,
              "line": "    def __init__(self, *args, no_color: bool = False, **kwargs):"
            },
            {
              "lineno": 55,
              "line": "        super().__init__(*args, **kwargs)"
            },
            {
              "lineno": 56,
              "line": "        self.no_color = no_color"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, *args, no_color: bool = False, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.no_color = no_color",
              "successors": []
            }
          ]
        },
        {
          "name": "format",
          "type": "function",
          "start_line": 58,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 58,
              "line": "    def format(self, record: logging.LogRecord) -> str:"
            },
            {
              "lineno": 59,
              "line": "        # Make sure `msg` is a string"
            },
            {
              "lineno": 60,
              "line": "        if not hasattr(record, \"msg\"):"
            },
            {
              "lineno": 61,
              "line": "            record.msg = \"\""
            },
            {
              "lineno": 62,
              "line": "        elif type(record.msg) is not str:"
            },
            {
              "lineno": 63,
              "line": "            record.msg = str(record.msg)"
            },
            {
              "lineno": 64,
              "line": ""
            },
            {
              "lineno": 65,
              "line": "        # Strip color from the message to prevent color spoofing"
            },
            {
              "lineno": 66,
              "line": "        if record.msg and not getattr(record, \"preserve_color\", False):"
            },
            {
              "lineno": 67,
              "line": "            record.msg = remove_color_codes(record.msg)"
            },
            {
              "lineno": 68,
              "line": ""
            },
            {
              "lineno": 69,
              "line": "        # Determine color for title"
            },
            {
              "lineno": 70,
              "line": "        title = getattr(record, \"title\", \"\")"
            },
            {
              "lineno": 71,
              "line": "        title_color = getattr(record, \"title_color\", \"\") or self.LEVEL_COLOR_MAP.get("
            },
            {
              "lineno": 72,
              "line": "            record.levelno, \"\""
            },
            {
              "lineno": 73,
              "line": "        )"
            },
            {
              "lineno": 74,
              "line": "        if title and title_color:"
            },
            {
              "lineno": 75,
              "line": "            title = f\"{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}\""
            },
            {
              "lineno": 76,
              "line": "        # Make sure record.title is set, and padded with a space if not empty"
            },
            {
              "lineno": 77,
              "line": "        record.title = f\"{title} \" if title else \"\""
            },
            {
              "lineno": 78,
              "line": ""
            },
            {
              "lineno": 79,
              "line": "        if self.no_color:"
            },
            {
              "lineno": 80,
              "line": "            return remove_color_codes(super().format(record))"
            },
            {
              "lineno": 81,
              "line": "        else:"
            },
            {
              "lineno": 82,
              "line": "            return super().format(record)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def format(self, record: logging.LogRecord) -> str:\n        # Make sure `msg` is a string\n        if not hasattr(record, \"msg\"):\n            record.msg = \"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "        elif type(record.msg) is not str:\n            record.msg = str(record.msg)\n        # Strip color from the message to prevent color spoofing\n        if record.msg and not getattr(record, \"preserve_color\", False):",
                  "successors": [
                    {
                      "id": 5,
                      "label": "            record.msg = remove_color_codes(record.msg)\n        # Determine color for title\n        title = getattr(record, \"title\", \"\")\n        title_color = getattr(record, \"title_color\", \"\") or self.LEVEL_COLOR_MAP.get(\n            record.levelno, \"\"\n        )",
                      "successors": [
                        {
                          "id": 7,
                          "label": "        if title and title_color:\n            title = f\"{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}\"\n        # Make sure record.title is set, and padded with a space if not empty\n        record.title = f\"{title} \" if title else \"\"",
                          "successors": [
                            {
                              "id": 9,
                              "label": "        if self.no_color:\n            return remove_color_codes(super().format(record))",
                              "successors": []
                            },
                            {
                              "id": 10,
                              "label": "        else:\n            return super().format(record)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 53,
          "line": "class AGPTFormatter(FancyConsoleFormatter):"
        },
        {
          "lineno": 57,
          "line": ""
        },
        {
          "lineno": 83,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class AGPTFormatter(FancyConsoleFormatter):\n",
          "successors": [
            {
              "id": 3,
              "label": "",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "StructuredLoggingFormatter",
      "type": "class",
      "start_line": 85,
      "end_line": 95,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 86,
          "end_line": 91,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 86,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 87,
              "line": "        # Set up CloudLoggingFilter to add diagnostic info to the log records"
            },
            {
              "lineno": 88,
              "line": "        self.cloud_logging_filter = CloudLoggingFilter()"
            },
            {
              "lineno": 89,
              "line": ""
            },
            {
              "lineno": 90,
              "line": "        # Init StructuredLogHandler"
            },
            {
              "lineno": 91,
              "line": "        super().__init__()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        # Set up CloudLoggingFilter to add diagnostic info to the log records\n        self.cloud_logging_filter = CloudLoggingFilter()\n\n        # Init StructuredLogHandler\n        super().__init__()",
              "successors": []
            }
          ]
        },
        {
          "name": "format",
          "type": "function",
          "start_line": 93,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 93,
              "line": "    def format(self, record: logging.LogRecord) -> str:"
            },
            {
              "lineno": 94,
              "line": "        self.cloud_logging_filter.filter(record)"
            },
            {
              "lineno": 95,
              "line": "        return super().format(record)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def format(self, record: logging.LogRecord) -> str:\n        self.cloud_logging_filter.filter(record)\n        return super().format(record)",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 85,
          "line": "class StructuredLoggingFormatter(StructuredLogHandler, logging.Formatter):"
        },
        {
          "lineno": 92,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class StructuredLoggingFormatter(StructuredLogHandler, logging.Formatter):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from colorama import Fore, Style"
    },
    {
      "lineno": 4,
      "line": "from google.cloud.logging_v2.handlers import CloudLoggingFilter, StructuredLogHandler"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from .utils import remove_color_codes"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 84,
      "line": ""
    }
  ],
  "blocks": []
}