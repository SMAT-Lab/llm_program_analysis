{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 77,
  "functions": [],
  "classes": [
    {
      "name": "SalesRanker",
      "type": "class",
      "start_line": 6,
      "end_line": 73,
      "functions": [
        {
          "name": "within_past_week",
          "type": "function",
          "start_line": 8,
          "end_line": 10,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 8,
              "line": "    def within_past_week(self, timestamp):"
            },
            {
              "lineno": 9,
              "line": "        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\""
            },
            {
              "lineno": 10,
              "line": "        ..."
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def within_past_week(self, timestamp):\n        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n        ...",
              "successors": []
            }
          ]
        },
        {
          "name": "mapper",
          "type": "function",
          "start_line": 12,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 12,
              "line": "    def mapper(self, _, line):"
            },
            {
              "lineno": 13,
              "line": "        \"\"\"Parse each log line, extract and transform relevant lines."
            },
            {
              "lineno": 14,
              "line": ""
            },
            {
              "lineno": 15,
              "line": "        Emit key value pairs of the form:"
            },
            {
              "lineno": 16,
              "line": ""
            },
            {
              "lineno": 17,
              "line": "        (foo, p1), 2"
            },
            {
              "lineno": 18,
              "line": "        (bar, p1), 2"
            },
            {
              "lineno": 19,
              "line": "        (bar, p1), 1"
            },
            {
              "lineno": 20,
              "line": "        (foo, p2), 3"
            },
            {
              "lineno": 21,
              "line": "        (bar, p3), 10"
            },
            {
              "lineno": 22,
              "line": "        (foo, p4), 1"
            },
            {
              "lineno": 23,
              "line": "        \"\"\""
            },
            {
              "lineno": 24,
              "line": "        timestamp, product_id, category, quantity = line.split('\\t')"
            },
            {
              "lineno": 25,
              "line": "        if self.within_past_week(timestamp):"
            },
            {
              "lineno": 26,
              "line": "            yield (category, product_id), quantity"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        timestamp, product_id, category, quantity = line.split('\\t')\n        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity",
              "successors": []
            }
          ]
        },
        {
          "name": "reducer",
          "type": "function",
          "start_line": 28,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    def reducer(self, key, values):"
            },
            {
              "lineno": 29,
              "line": "        \"\"\"Sum values for each key."
            },
            {
              "lineno": 30,
              "line": ""
            },
            {
              "lineno": 31,
              "line": "        (foo, p1), 2"
            },
            {
              "lineno": 32,
              "line": "        (bar, p1), 3"
            },
            {
              "lineno": 33,
              "line": "        (foo, p2), 3"
            },
            {
              "lineno": 34,
              "line": "        (bar, p3), 10"
            },
            {
              "lineno": 35,
              "line": "        (foo, p4), 1"
            },
            {
              "lineno": 36,
              "line": "        \"\"\""
            },
            {
              "lineno": 37,
              "line": "        yield key, sum(values)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "        yield key, sum(values)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "mapper_sort",
          "type": "function",
          "start_line": 39,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 39,
              "line": "    def mapper_sort(self, key, value):"
            },
            {
              "lineno": 40,
              "line": "        \"\"\"Construct key to ensure proper sorting."
            },
            {
              "lineno": 41,
              "line": ""
            },
            {
              "lineno": 42,
              "line": "        Transform key and value to the form:"
            },
            {
              "lineno": 43,
              "line": ""
            },
            {
              "lineno": 44,
              "line": "        (foo, 2), p1"
            },
            {
              "lineno": 45,
              "line": "        (bar, 3), p1"
            },
            {
              "lineno": 46,
              "line": "        (foo, 3), p2"
            },
            {
              "lineno": 47,
              "line": "        (bar, 10), p3"
            },
            {
              "lineno": 48,
              "line": "        (foo, 1), p4"
            },
            {
              "lineno": 49,
              "line": ""
            },
            {
              "lineno": 50,
              "line": "        The shuffle/sort step of MapReduce will then do a"
            },
            {
              "lineno": 51,
              "line": "        distributed sort on the keys, resulting in:"
            },
            {
              "lineno": 52,
              "line": ""
            },
            {
              "lineno": 53,
              "line": "        (category1, 1), product4"
            },
            {
              "lineno": 54,
              "line": "        (category1, 2), product1"
            },
            {
              "lineno": 55,
              "line": "        (category1, 3), product2"
            },
            {
              "lineno": 56,
              "line": "        (category2, 3), product1"
            },
            {
              "lineno": 57,
              "line": "        (category2, 7), product3"
            },
            {
              "lineno": 58,
              "line": "        \"\"\""
            },
            {
              "lineno": 59,
              "line": "        category, product_id = key"
            },
            {
              "lineno": 60,
              "line": "        quantity = value"
            },
            {
              "lineno": 61,
              "line": "        yield (category, quantity), product_id"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id",
              "successors": []
            }
          ]
        },
        {
          "name": "reducer_identity",
          "type": "function",
          "start_line": 63,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 63,
              "line": "    def reducer_identity(self, key, value):"
            },
            {
              "lineno": 64,
              "line": "        yield key, value"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def reducer_identity(self, key, value):\n        yield key, value",
              "successors": []
            }
          ]
        },
        {
          "name": "steps",
          "type": "function",
          "start_line": 66,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 66,
              "line": "    def steps(self):"
            },
            {
              "lineno": 67,
              "line": "        \"\"\"Run the map and reduce steps.\"\"\""
            },
            {
              "lineno": 68,
              "line": "        return ["
            },
            {
              "lineno": 69,
              "line": "            self.mr(mapper=self.mapper,"
            },
            {
              "lineno": 70,
              "line": "                    reducer=self.reducer),"
            },
            {
              "lineno": 71,
              "line": "            self.mr(mapper=self.mapper_sort,"
            },
            {
              "lineno": 72,
              "line": "                    reducer=self.reducer_identity),"
            },
            {
              "lineno": 73,
              "line": "        ]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "class SalesRanker(MRJob):"
        },
        {
          "lineno": 7,
          "line": ""
        },
        {
          "lineno": 11,
          "line": ""
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 38,
          "line": ""
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 65,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class SalesRanker(MRJob):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# -*- coding: utf-8 -*-"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from mrjob.job import MRJob"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 74,
      "line": ""
    },
    {
      "lineno": 75,
      "line": ""
    },
    {
      "lineno": 76,
      "line": "if __name__ == '__main__':"
    },
    {
      "lineno": 77,
      "line": "    SalesRanker.run()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob",
      "successors": [
        {
          "id": 3,
          "label": "\n\n\n",
          "successors": [
            {
              "id": 5,
              "label": "if __name__ == '__main__':\n    SalesRanker.run()",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}