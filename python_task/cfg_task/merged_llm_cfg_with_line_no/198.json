{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 20,
  "functions": [
    {
      "name": "configure_logging",
      "type": "function",
      "start_line": 6,
      "end_line": 20,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "def configure_logging():"
        },
        {
          "lineno": 7,
          "line": "    import logging"
        },
        {
          "lineno": 8,
          "line": ""
        },
        {
          "lineno": 9,
          "line": "    import autogpt_libs.logging.config"
        },
        {
          "lineno": 10,
          "line": ""
        },
        {
          "lineno": 11,
          "line": "    if ("
        },
        {
          "lineno": 12,
          "line": "        settings.config.behave_as == BehaveAs.LOCAL"
        },
        {
          "lineno": 13,
          "line": "        or settings.config.app_env == AppEnvironment.LOCAL"
        },
        {
          "lineno": 14,
          "line": "    ):"
        },
        {
          "lineno": 15,
          "line": "        autogpt_libs.logging.config.configure_logging(force_cloud_logging=False)"
        },
        {
          "lineno": 16,
          "line": "    else:"
        },
        {
          "lineno": 17,
          "line": "        autogpt_libs.logging.config.configure_logging(force_cloud_logging=True)"
        },
        {
          "lineno": 18,
          "line": ""
        },
        {
          "lineno": 19,
          "line": "    # Silence httpx logger"
        },
        {
          "lineno": 20,
          "line": "    logging.getLogger(\"httpx\").setLevel(logging.WARNING)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def configure_logging():\n    import logging\n    \n    import autogpt_libs.logging.config\n    \nif (\n        settings.config.behave_as == BehaveAs.LOCAL\n        or settings.config.app_env == AppEnvironment.LOCAL\n    ):",
          "successors": [
            {
              "id": 3,
              "label": "autogpt_libs.logging.config.configure_logging(force_cloud_logging=False)\n\n# Silence httpx logger\n    logging.getLogger(\"httpx\").setLevel(logging.WARNING)",
              "successors": []
            },
            {
              "id": 4,
              "label": "else:\n    autogpt_libs.logging.config.configure_logging(force_cloud_logging=True)\n\n# Silence httpx logger\n    logging.getLogger(\"httpx\").setLevel(logging.WARNING)",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from backend.util.settings import AppEnvironment, BehaveAs, Settings"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "settings = Settings()"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from backend.util.settings import AppEnvironment, BehaveAs, Settings\nsettings = Settings()",
      "successors": []
    }
  ]
}