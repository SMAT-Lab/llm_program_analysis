{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 228,
  "functions": [
    {
      "name": "PineconeCredentialsField",
      "type": "function",
      "start_line": 22,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 22,
          "line": "def PineconeCredentialsField() -> PineconeCredentialsInput:"
        },
        {
          "lineno": 23,
          "line": "    \"\"\"Creates a Pinecone credentials input on a block.\"\"\""
        },
        {
          "lineno": 24,
          "line": "    return CredentialsField("
        },
        {
          "lineno": 25,
          "line": "        description=\"The Pinecone integration can be used with an API Key.\","
        },
        {
          "lineno": 26,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def PineconeCredentialsField() -> PineconeCredentialsInput:\n    \"\"\"Creates a Pinecone credentials input on a block.\"\"\"\n    return CredentialsField(\n        description=\"The Pinecone integration can be used with an API Key.\",\n    )",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "PineconeInitBlock",
      "type": "class",
      "start_line": 29,
      "end_line": 83,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 50,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 50,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 51,
              "line": "        super().__init__("
            },
            {
              "lineno": 52,
              "line": "            id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\","
            },
            {
              "lineno": 53,
              "line": "            description=\"Initializes a Pinecone index\","
            },
            {
              "lineno": 54,
              "line": "            categories={BlockCategory.LOGIC},"
            },
            {
              "lineno": 55,
              "line": "            input_schema=PineconeInitBlock.Input,"
            },
            {
              "lineno": 56,
              "line": "            output_schema=PineconeInitBlock.Output,"
            },
            {
              "lineno": 57,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\n            description=\"Initializes a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInitBlock.Input,\n            output_schema=PineconeInitBlock.Output,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 59,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 59,
              "line": "    def run("
            },
            {
              "lineno": 60,
              "line": "        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs"
            },
            {
              "lineno": 61,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 62,
              "line": "        pc = Pinecone(api_key=credentials.api_key.get_secret_value())"
            },
            {
              "lineno": 63,
              "line": ""
            },
            {
              "lineno": 64,
              "line": "        try:"
            },
            {
              "lineno": 65,
              "line": "            existing_indexes = pc.list_indexes()"
            },
            {
              "lineno": 66,
              "line": "            if input_data.index_name not in [index.name for index in existing_indexes]:"
            },
            {
              "lineno": 67,
              "line": "                pc.create_index("
            },
            {
              "lineno": 68,
              "line": "                    name=input_data.index_name,"
            },
            {
              "lineno": 69,
              "line": "                    dimension=input_data.dimension,"
            },
            {
              "lineno": 70,
              "line": "                    metric=input_data.metric,"
            },
            {
              "lineno": 71,
              "line": "                    spec=ServerlessSpec("
            },
            {
              "lineno": 72,
              "line": "                        cloud=input_data.cloud, region=input_data.region"
            },
            {
              "lineno": 73,
              "line": "                    ),"
            },
            {
              "lineno": 74,
              "line": "                )"
            },
            {
              "lineno": 75,
              "line": "                message = f\"Created new index: {input_data.index_name}\""
            },
            {
              "lineno": 76,
              "line": "            else:"
            },
            {
              "lineno": 77,
              "line": "                message = f\"Using existing index: {input_data.index_name}\""
            },
            {
              "lineno": 78,
              "line": ""
            },
            {
              "lineno": 79,
              "line": "            yield \"index\", input_data.index_name"
            },
            {
              "lineno": 80,
              "line": "            yield \"message\", message"
            },
            {
              "lineno": 81,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 82,
              "line": "            yield \"message\", f\"Error initializing Pinecone index: {str(e)}\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        pc = Pinecone(api_key=credentials.api_key.get_secret_value())",
              "successors": [
                {
                  "id": 2,
                  "label": "try:\n    existing_indexes = pc.list_indexes()\nif input_data.index_name not in [index.name for index in existing_indexes]:",
                  "successors": [
                    {
                      "id": 4,
                      "label": "pc.create_index(\n    name=input_data.index_name,\n    dimension=input_data.dimension,\n    metric=input_data.metric,\n    spec=ServerlessSpec(\n        cloud=input_data.cloud, region=input_data.region\n    ),\n)\nmessage = f\"Created new index: {input_data.index_name}\"\nyield \"index\", input_data.index_name\nyield \"message\", message",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "else:\n    message = f\"Using existing index: {input_data.index_name}\"\nyield \"index\", input_data.index_name\nyield \"message\", message",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "except Exception as e:\n    yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 30,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 30,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 31,
              "line": "        credentials: PineconeCredentialsInput = PineconeCredentialsField()"
            },
            {
              "lineno": 32,
              "line": "        index_name: str = SchemaField(description=\"Name of the Pinecone index\")"
            },
            {
              "lineno": 33,
              "line": "        dimension: int = SchemaField("
            },
            {
              "lineno": 34,
              "line": "            description=\"Dimension of the vectors\", default=768"
            },
            {
              "lineno": 35,
              "line": "        )"
            },
            {
              "lineno": 36,
              "line": "        metric: str = SchemaField("
            },
            {
              "lineno": 37,
              "line": "            description=\"Distance metric for the index\", default=\"cosine\""
            },
            {
              "lineno": 38,
              "line": "        )"
            },
            {
              "lineno": 39,
              "line": "        cloud: str = SchemaField("
            },
            {
              "lineno": 40,
              "line": "            description=\"Cloud provider for serverless\", default=\"aws\""
            },
            {
              "lineno": 41,
              "line": "        )"
            },
            {
              "lineno": 42,
              "line": "        region: str = SchemaField("
            },
            {
              "lineno": 43,
              "line": "            description=\"Region for serverless\", default=\"us-east-1\""
            },
            {
              "lineno": 44,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index_name: str = SchemaField(description=\"Name of the Pinecone index\")\n        dimension: int = SchemaField(\n            description=\"Dimension of the vectors\", default=768\n        )\n        metric: str = SchemaField(\n            description=\"Distance metric for the index\", default=\"cosine\"\n        )\n        cloud: str = SchemaField(\n            description=\"Cloud provider for serverless\", default=\"aws\"\n        )\n        region: str = SchemaField(\n            description=\"Region for serverless\", default=\"us-east-1\"\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 46,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 46,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 47,
              "line": "        index: str = SchemaField(description=\"Name of the initialized Pinecone index\")"
            },
            {
              "lineno": 48,
              "line": "        message: str = SchemaField(description=\"Status message\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        index: str = SchemaField(description=\"Name of the initialized Pinecone index\")\n        message: str = SchemaField(description=\"Status message\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 29,
          "line": "class PineconeInitBlock(Block):"
        },
        {
          "lineno": 45,
          "line": ""
        },
        {
          "lineno": 49,
          "line": ""
        },
        {
          "lineno": 58,
          "line": ""
        },
        {
          "lineno": 83,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class PineconeInitBlock(Block):",
          "successors": []
        }
      ]
    },
    {
      "name": "PineconeQueryBlock",
      "type": "class",
      "start_line": 85,
      "end_line": 167,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 111,
          "end_line": 118,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 111,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 112,
              "line": "        super().__init__("
            },
            {
              "lineno": 113,
              "line": "            id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\","
            },
            {
              "lineno": 114,
              "line": "            description=\"Queries a Pinecone index\","
            },
            {
              "lineno": 115,
              "line": "            categories={BlockCategory.LOGIC},"
            },
            {
              "lineno": 116,
              "line": "            input_schema=PineconeQueryBlock.Input,"
            },
            {
              "lineno": 117,
              "line": "            output_schema=PineconeQueryBlock.Output,"
            },
            {
              "lineno": 118,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\n            description=\"Queries a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeQueryBlock.Input,\n            output_schema=PineconeQueryBlock.Output,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 120,
          "end_line": 165,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 120,
              "line": "    def run("
            },
            {
              "lineno": 121,
              "line": "        self,"
            },
            {
              "lineno": 122,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 123,
              "line": "        *,"
            },
            {
              "lineno": 124,
              "line": "        credentials: APIKeyCredentials,"
            },
            {
              "lineno": 125,
              "line": "        **kwargs,"
            },
            {
              "lineno": 126,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 127,
              "line": "        try:"
            },
            {
              "lineno": 128,
              "line": "            # Create a new client instance"
            },
            {
              "lineno": 129,
              "line": "            pc = Pinecone(api_key=credentials.api_key.get_secret_value())"
            },
            {
              "lineno": 130,
              "line": ""
            },
            {
              "lineno": 131,
              "line": "            # Get the index"
            },
            {
              "lineno": 132,
              "line": "            idx = pc.Index(input_data.idx_name)"
            },
            {
              "lineno": 133,
              "line": ""
            },
            {
              "lineno": 134,
              "line": "            # Ensure query_vector is in correct format"
            },
            {
              "lineno": 135,
              "line": "            query_vector = input_data.query_vector"
            },
            {
              "lineno": 136,
              "line": "            if isinstance(query_vector, list) and len(query_vector) > 0:"
            },
            {
              "lineno": 137,
              "line": "                if isinstance(query_vector[0], list):"
            },
            {
              "lineno": 138,
              "line": "                    query_vector = query_vector[0]"
            },
            {
              "lineno": 139,
              "line": ""
            },
            {
              "lineno": 140,
              "line": "            results = idx.query("
            },
            {
              "lineno": 141,
              "line": "                namespace=input_data.namespace,"
            },
            {
              "lineno": 142,
              "line": "                vector=query_vector,"
            },
            {
              "lineno": 143,
              "line": "                top_k=input_data.top_k,"
            },
            {
              "lineno": 144,
              "line": "                include_values=input_data.include_values,"
            },
            {
              "lineno": 145,
              "line": "                include_metadata=input_data.include_metadata,"
            },
            {
              "lineno": 146,
              "line": "            ).to_dict()  # type: ignore"
            },
            {
              "lineno": 147,
              "line": "            combined_text = \"\""
            },
            {
              "lineno": 148,
              "line": "            if results[\"matches\"]:"
            },
            {
              "lineno": 149,
              "line": "                texts = ["
            },
            {
              "lineno": 150,
              "line": "                    match[\"metadata\"][\"text\"]"
            },
            {
              "lineno": 151,
              "line": "                    for match in results[\"matches\"]"
            },
            {
              "lineno": 152,
              "line": "                    if match.get(\"metadata\", {}).get(\"text\")"
            },
            {
              "lineno": 153,
              "line": "                ]"
            },
            {
              "lineno": 154,
              "line": "                combined_text = \"\\n\\n\".join(texts)"
            },
            {
              "lineno": 155,
              "line": ""
            },
            {
              "lineno": 156,
              "line": "            # Return both the raw matches and combined text"
            },
            {
              "lineno": 157,
              "line": "            yield \"results\", {"
            },
            {
              "lineno": 158,
              "line": "                \"matches\": results[\"matches\"],"
            },
            {
              "lineno": 159,
              "line": "                \"combined_text\": combined_text,"
            },
            {
              "lineno": 160,
              "line": "            }"
            },
            {
              "lineno": 161,
              "line": "            yield \"combined_results\", combined_text"
            },
            {
              "lineno": 162,
              "line": ""
            },
            {
              "lineno": 163,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 164,
              "line": "            error_msg = f\"Error querying Pinecone: {str(e)}\""
            },
            {
              "lineno": 165,
              "line": "            raise RuntimeError(error_msg) from e"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "label": "        try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.idx_name)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "            # Ensure query_vector is in correct format\n            query_vector = input_data.query_vector\n            if isinstance(query_vector, list) and len(query_vector) > 0:\n                if isinstance(query_vector[0], list):\n                    query_vector = query_vector[0]",
                      "successors": [
                        {
                          "id": 6,
                          "label": "            results = idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict()  # type: ignore\n            combined_text = \"\"",
                          "successors": [
                            {
                              "id": 7,
                              "label": "            if results[\"matches\"]:\n                texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]\n                combined_text = \"\\n\\n\".join(texts)",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "label": "            # Return both the raw matches and combined text\n            yield \"results\", {\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }\n            yield \"combined_results\", combined_text",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "        except Exception as e:\n            error_msg = f\"Error querying Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 86,
          "end_line": 103,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 86,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 87,
              "line": "        credentials: PineconeCredentialsInput = PineconeCredentialsField()"
            },
            {
              "lineno": 88,
              "line": "        query_vector: list = SchemaField(description=\"Query vector\")"
            },
            {
              "lineno": 89,
              "line": "        namespace: str = SchemaField("
            },
            {
              "lineno": 90,
              "line": "            description=\"Namespace to query in Pinecone\", default=\"\""
            },
            {
              "lineno": 91,
              "line": "        )"
            },
            {
              "lineno": 92,
              "line": "        top_k: int = SchemaField("
            },
            {
              "lineno": 93,
              "line": "            description=\"Number of top results to return\", default=3"
            },
            {
              "lineno": 94,
              "line": "        )"
            },
            {
              "lineno": 95,
              "line": "        include_values: bool = SchemaField("
            },
            {
              "lineno": 96,
              "line": "            description=\"Whether to include vector values in the response\","
            },
            {
              "lineno": 97,
              "line": "            default=False,"
            },
            {
              "lineno": 98,
              "line": "        )"
            },
            {
              "lineno": 99,
              "line": "        include_metadata: bool = SchemaField("
            },
            {
              "lineno": 100,
              "line": "            description=\"Whether to include metadata in the response\", default=True"
            },
            {
              "lineno": 101,
              "line": "        )"
            },
            {
              "lineno": 102,
              "line": "        host: str = SchemaField(description=\"Host for pinecone\", default=\"\")"
            },
            {
              "lineno": 103,
              "line": "        idx_name: str = SchemaField(description=\"Index name for pinecone\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        query_vector: list = SchemaField(description=\"Query vector\")\n        namespace: str = SchemaField(\n            description=\"Namespace to query in Pinecone\", default=\"\"\n        )\n        top_k: int = SchemaField(\n            description=\"Number of top results to return\", default=3\n        )\n        include_values: bool = SchemaField(\n            description=\"Whether to include vector values in the response\",\n            default=False,\n        )\n        include_metadata: bool = SchemaField(\n            description=\"Whether to include metadata in the response\", default=True\n        )\n        host: str = SchemaField(description=\"Host for pinecone\", default=\"\")\n        idx_name: str = SchemaField(description=\"Index name for pinecone\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 105,
          "end_line": 109,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 105,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 106,
              "line": "        results: Any = SchemaField(description=\"Query results from Pinecone\")"
            },
            {
              "lineno": 107,
              "line": "        combined_results: Any = SchemaField("
            },
            {
              "lineno": 108,
              "line": "            description=\"Combined results from Pinecone\""
            },
            {
              "lineno": 109,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\n    results: Any = SchemaField(description=\"Query results from Pinecone\")\n    combined_results: Any = SchemaField(\n        description=\"Combined results from Pinecone\"\n    )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 85,
          "line": "class PineconeQueryBlock(Block):"
        },
        {
          "lineno": 104,
          "line": ""
        },
        {
          "lineno": 110,
          "line": ""
        },
        {
          "lineno": 119,
          "line": ""
        },
        {
          "lineno": 166,
          "line": ""
        },
        {
          "lineno": 167,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "PineconeInsertBlock",
      "type": "class",
      "start_line": 168,
      "end_line": 228,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 188,
          "end_line": 195,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 188,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 189,
              "line": "        super().__init__("
            },
            {
              "lineno": 190,
              "line": "            id=\"477f2168-cd91-475a-8146-9499a5982434\","
            },
            {
              "lineno": 191,
              "line": "            description=\"Upload data to a Pinecone index\","
            },
            {
              "lineno": 192,
              "line": "            categories={BlockCategory.LOGIC},"
            },
            {
              "lineno": 193,
              "line": "            input_schema=PineconeInsertBlock.Input,"
            },
            {
              "lineno": 194,
              "line": "            output_schema=PineconeInsertBlock.Output,"
            },
            {
              "lineno": 195,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"477f2168-cd91-475a-8146-9499a5982434\",\n            description=\"Upload data to a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInsertBlock.Input,\n            output_schema=PineconeInsertBlock.Output,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 197,
          "end_line": 228,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 197,
              "line": "    def run("
            },
            {
              "lineno": 198,
              "line": "        self,"
            },
            {
              "lineno": 199,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 200,
              "line": "        *,"
            },
            {
              "lineno": 201,
              "line": "        credentials: APIKeyCredentials,"
            },
            {
              "lineno": 202,
              "line": "        **kwargs,"
            },
            {
              "lineno": 203,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 204,
              "line": "        try:"
            },
            {
              "lineno": 205,
              "line": "            # Create a new client instance"
            },
            {
              "lineno": 206,
              "line": "            pc = Pinecone(api_key=credentials.api_key.get_secret_value())"
            },
            {
              "lineno": 207,
              "line": ""
            },
            {
              "lineno": 208,
              "line": "            # Get the index"
            },
            {
              "lineno": 209,
              "line": "            idx = pc.Index(input_data.index)"
            },
            {
              "lineno": 210,
              "line": ""
            },
            {
              "lineno": 211,
              "line": "            vectors = []"
            },
            {
              "lineno": 212,
              "line": "            for chunk, embedding in zip(input_data.chunks, input_data.embeddings):"
            },
            {
              "lineno": 213,
              "line": "                vector_metadata = input_data.metadata.copy()"
            },
            {
              "lineno": 214,
              "line": "                vector_metadata[\"text\"] = chunk"
            },
            {
              "lineno": 215,
              "line": "                vectors.append("
            },
            {
              "lineno": 216,
              "line": "                    {"
            },
            {
              "lineno": 217,
              "line": "                        \"id\": str(uuid.uuid4()),"
            },
            {
              "lineno": 218,
              "line": "                        \"values\": embedding,"
            },
            {
              "lineno": 219,
              "line": "                        \"metadata\": vector_metadata,"
            },
            {
              "lineno": 220,
              "line": "                    }"
            },
            {
              "lineno": 221,
              "line": "                )"
            },
            {
              "lineno": 222,
              "line": "            idx.upsert(vectors=vectors, namespace=input_data.namespace)"
            },
            {
              "lineno": 223,
              "line": ""
            },
            {
              "lineno": 224,
              "line": "            yield \"upsert_response\", \"successfully upserted\""
            },
            {
              "lineno": 225,
              "line": ""
            },
            {
              "lineno": 226,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 227,
              "line": "            error_msg = f\"Error uploading to Pinecone: {str(e)}\""
            },
            {
              "lineno": 228,
              "line": "            raise RuntimeError(error_msg) from e"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "        try:",
              "successors": [
                {
                  "id": 2,
                  "label": "            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.index)\n\n            vectors = []\n            for chunk, embedding in zip(input_data.chunks, input_data.embeddings):\n                vector_metadata = input_data.metadata.copy()\n                vector_metadata[\"text\"] = chunk\n                vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )\n            idx.upsert(vectors=vectors, namespace=input_data.namespace)\n            yield \"upsert_response\", \"successfully upserted\"",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "        except Exception as e:\n            error_msg = f\"Error uploading to Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 169,
          "end_line": 181,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 169,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 170,
              "line": "        credentials: PineconeCredentialsInput = PineconeCredentialsField()"
            },
            {
              "lineno": 171,
              "line": "        index: str = SchemaField(description=\"Initialized Pinecone index\")"
            },
            {
              "lineno": 172,
              "line": "        chunks: list = SchemaField(description=\"List of text chunks to ingest\")"
            },
            {
              "lineno": 173,
              "line": "        embeddings: list = SchemaField("
            },
            {
              "lineno": 174,
              "line": "            description=\"List of embeddings corresponding to the chunks\""
            },
            {
              "lineno": 175,
              "line": "        )"
            },
            {
              "lineno": 176,
              "line": "        namespace: str = SchemaField("
            },
            {
              "lineno": 177,
              "line": "            description=\"Namespace to use in Pinecone\", default=\"\""
            },
            {
              "lineno": 178,
              "line": "        )"
            },
            {
              "lineno": 179,
              "line": "        metadata: dict = SchemaField("
            },
            {
              "lineno": 180,
              "line": "            description=\"Additional metadata to store with each vector\", default={}"
            },
            {
              "lineno": 181,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index: str = SchemaField(description=\"Initialized Pinecone index\")\n        chunks: list = SchemaField(description=\"List of text chunks to ingest\")\n        embeddings: list = SchemaField(\n            description=\"List of embeddings corresponding to the chunks\"\n        )\n        namespace: str = SchemaField(\n            description=\"Namespace to use in Pinecone\", default=\"\"\n        )\n        metadata: dict = SchemaField(\n            description=\"Additional metadata to store with each vector\", default={}\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 183,
          "end_line": 186,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 183,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 184,
              "line": "        upsert_response: str = SchemaField("
            },
            {
              "lineno": 185,
              "line": "            description=\"Response from Pinecone upsert operation\""
            },
            {
              "lineno": 186,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        upsert_response: str = SchemaField(\n            description=\"Response from Pinecone upsert operation\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 168,
          "line": "class PineconeInsertBlock(Block):"
        },
        {
          "lineno": 182,
          "line": ""
        },
        {
          "lineno": 187,
          "line": ""
        },
        {
          "lineno": 196,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import uuid"
    },
    {
      "lineno": 2,
      "line": "from typing import Any, Literal"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from pinecone import Pinecone, ServerlessSpec"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 7,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 8,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 9,
      "line": "    CredentialsField,"
    },
    {
      "lineno": 10,
      "line": "    CredentialsMetaInput,"
    },
    {
      "lineno": 11,
      "line": "    SchemaField,"
    },
    {
      "lineno": 12,
      "line": ")"
    },
    {
      "lineno": 13,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "PineconeCredentials = APIKeyCredentials"
    },
    {
      "lineno": 16,
      "line": "PineconeCredentialsInput = CredentialsMetaInput["
    },
    {
      "lineno": 17,
      "line": "    Literal[ProviderName.PINECONE],"
    },
    {
      "lineno": 18,
      "line": "    Literal[\"api_key\"],"
    },
    {
      "lineno": 19,
      "line": "]"
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 27,
      "line": ""
    },
    {
      "lineno": 28,
      "line": ""
    },
    {
      "lineno": 84,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import uuid\nfrom typing import Any, Literal\n\nfrom pinecone import Pinecone, ServerlessSpec\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nPineconeCredentials = APIKeyCredentials\nPineconeCredentialsInput = CredentialsMetaInput[\n    Literal[ProviderName.PINECONE],\n    Literal[\"api_key\"],\n]\n\n",
      "successors": []
    }
  ]
}