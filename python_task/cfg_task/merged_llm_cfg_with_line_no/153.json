{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 174,
  "functions": [
    {
      "name": "get_praw",
      "type": "function",
      "start_line": 34,
      "end_line": 46,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 34,
          "line": "def get_praw(creds: RedditCredentials) -> praw.Reddit:"
        },
        {
          "lineno": 35,
          "line": "    client = praw.Reddit("
        },
        {
          "lineno": 36,
          "line": "        client_id=creds.client_id.get_secret_value(),"
        },
        {
          "lineno": 37,
          "line": "        client_secret=creds.client_secret.get_secret_value(),"
        },
        {
          "lineno": 38,
          "line": "        username=creds.username.get_secret_value(),"
        },
        {
          "lineno": 39,
          "line": "        password=creds.password.get_secret_value(),"
        },
        {
          "lineno": 40,
          "line": "        user_agent=creds.user_agent,"
        },
        {
          "lineno": 41,
          "line": "    )"
        },
        {
          "lineno": 42,
          "line": "    me = client.user.me()"
        },
        {
          "lineno": 43,
          "line": "    if not me:"
        },
        {
          "lineno": 44,
          "line": "        raise ValueError(\"Invalid Reddit credentials.\")"
        },
        {
          "lineno": 45,
          "line": "    print(f\"Logged in as Reddit user: {me.name}\")"
        },
        {
          "lineno": 46,
          "line": "    return client"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_praw(creds: RedditCredentials) -> praw.Reddit:\n    client = praw.Reddit(\n        client_id=creds.client_id.get_secret_value(),\n        client_secret=creds.client_secret.get_secret_value(),\n        username=creds.username.get_secret_value(),\n        password=creds.password.get_secret_value(),\n        user_agent=creds.user_agent,\n    )\n    me = client.user.me()\n    if not me:",
          "successors": [
            {
              "id": 2,
              "label": "raise ValueError(\"Invalid Reddit credentials.\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "print(f\"Logged in as Reddit user: {me.name}\")\n    return client",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "RedditCredentials",
      "type": "class",
      "start_line": 12,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 12,
          "line": "class RedditCredentials(BaseModel):"
        },
        {
          "lineno": 13,
          "line": "    client_id: BlockSecret = SecretField(key=\"reddit_client_id\")"
        },
        {
          "lineno": 14,
          "line": "    client_secret: BlockSecret = SecretField(key=\"reddit_client_secret\")"
        },
        {
          "lineno": 15,
          "line": "    username: BlockSecret = SecretField(key=\"reddit_username\")"
        },
        {
          "lineno": 16,
          "line": "    password: BlockSecret = SecretField(key=\"reddit_password\")"
        },
        {
          "lineno": 17,
          "line": "    user_agent: str = \"AutoGPT:1.0 (by /u/autogpt)\""
        },
        {
          "lineno": 18,
          "line": ""
        },
        {
          "lineno": 19,
          "line": "    model_config = ConfigDict(title=\"Reddit Credentials\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class RedditCredentials(BaseModel):\n    client_id: BlockSecret = SecretField(key=\"reddit_client_id\")\n    client_secret: BlockSecret = SecretField(key=\"reddit_client_secret\")\n    username: BlockSecret = SecretField(key=\"reddit_username\")\n    password: BlockSecret = SecretField(key=\"reddit_password\")\n    user_agent: str = \"AutoGPT:1.0 (by /u/autogpt)\"\n\n    model_config = ConfigDict(title=\"Reddit Credentials\")",
          "successors": []
        }
      ]
    },
    {
      "name": "RedditPost",
      "type": "class",
      "start_line": 22,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 22,
          "line": "class RedditPost(BaseModel):"
        },
        {
          "lineno": 23,
          "line": "    id: str"
        },
        {
          "lineno": 24,
          "line": "    subreddit: str"
        },
        {
          "lineno": 25,
          "line": "    title: str"
        },
        {
          "lineno": 26,
          "line": "    body: str"
        }
      ],
      "blocks": []
    },
    {
      "name": "RedditComment",
      "type": "class",
      "start_line": 29,
      "end_line": 31,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 29,
          "line": "class RedditComment(BaseModel):"
        },
        {
          "lineno": 30,
          "line": "    post_id: str"
        },
        {
          "lineno": 31,
          "line": "    comment: str"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class RedditComment(BaseModel):\n    post_id: str\n    comment: str",
          "successors": []
        }
      ]
    },
    {
      "name": "GetRedditPostsBlock",
      "type": "class",
      "start_line": 49,
      "end_line": 139,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 71,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 71,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 72,
              "line": "        super().__init__("
            },
            {
              "lineno": 73,
              "line": "            disabled=True,"
            },
            {
              "lineno": 74,
              "line": "            id=\"c6731acb-4285-4ee1-bc9b-03d0766c370f\","
            },
            {
              "lineno": 75,
              "line": "            description=\"This block fetches Reddit posts from a defined subreddit name.\","
            },
            {
              "lineno": 76,
              "line": "            categories={BlockCategory.SOCIAL},"
            },
            {
              "lineno": 77,
              "line": "            input_schema=GetRedditPostsBlock.Input,"
            },
            {
              "lineno": 78,
              "line": "            output_schema=GetRedditPostsBlock.Output,"
            },
            {
              "lineno": 79,
              "line": "            test_input={"
            },
            {
              "lineno": 80,
              "line": "                \"creds\": {"
            },
            {
              "lineno": 81,
              "line": "                    \"client_id\": \"client_id\","
            },
            {
              "lineno": 82,
              "line": "                    \"client_secret\": \"client_secret\","
            },
            {
              "lineno": 83,
              "line": "                    \"username\": \"username\","
            },
            {
              "lineno": 84,
              "line": "                    \"password\": \"password\","
            },
            {
              "lineno": 85,
              "line": "                    \"user_agent\": \"user_agent\","
            },
            {
              "lineno": 86,
              "line": "                },"
            },
            {
              "lineno": 87,
              "line": "                \"subreddit\": \"subreddit\","
            },
            {
              "lineno": 88,
              "line": "                \"last_post\": \"id3\","
            },
            {
              "lineno": 89,
              "line": "                \"post_limit\": 2,"
            },
            {
              "lineno": 90,
              "line": "            },"
            },
            {
              "lineno": 91,
              "line": "            test_output=["
            },
            {
              "lineno": 92,
              "line": "                ("
            },
            {
              "lineno": 93,
              "line": "                    \"post\","
            },
            {
              "lineno": 94,
              "line": "                    RedditPost("
            },
            {
              "lineno": 95,
              "line": "                        id=\"id1\", subreddit=\"subreddit\", title=\"title1\", body=\"body1\""
            },
            {
              "lineno": 96,
              "line": "                    ),"
            },
            {
              "lineno": 97,
              "line": "                ),"
            },
            {
              "lineno": 98,
              "line": "                ("
            },
            {
              "lineno": 99,
              "line": "                    \"post\","
            },
            {
              "lineno": 100,
              "line": "                    RedditPost("
            },
            {
              "lineno": 101,
              "line": "                        id=\"id2\", subreddit=\"subreddit\", title=\"title2\", body=\"body2\""
            },
            {
              "lineno": 102,
              "line": "                    ),"
            },
            {
              "lineno": 103,
              "line": "                ),"
            },
            {
              "lineno": 104,
              "line": "            ],"
            },
            {
              "lineno": 105,
              "line": "            test_mock={"
            },
            {
              "lineno": 106,
              "line": "                \"get_posts\": lambda _: ["
            },
            {
              "lineno": 107,
              "line": "                    MockObject(id=\"id1\", title=\"title1\", selftext=\"body1\"),"
            },
            {
              "lineno": 108,
              "line": "                    MockObject(id=\"id2\", title=\"title2\", selftext=\"body2\"),"
            },
            {
              "lineno": 109,
              "line": "                    MockObject(id=\"id3\", title=\"title2\", selftext=\"body2\"),"
            },
            {
              "lineno": 110,
              "line": "                ]"
            },
            {
              "lineno": 111,
              "line": "            },"
            },
            {
              "lineno": 112,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            disabled=True,\n            id=\"c6731acb-4285-4ee1-bc9b-03d0766c370f\",\n            description=\"This block fetches Reddit posts from a defined subreddit name.\",\n            categories={BlockCategory.SOCIAL},\n            input_schema=GetRedditPostsBlock.Input,\n            output_schema=GetRedditPostsBlock.Output,\n            test_input={\n                \"creds\": {\n                    \"client_id\": \"client_id\",\n                    \"client_secret\": \"client_secret\",\n                    \"username\": \"username\",\n                    \"password\": \"password\",\n                    \"user_agent\": \"user_agent\",\n                },\n                \"subreddit\": \"subreddit\",\n                \"last_post\": \"id3\",\n                \"post_limit\": 2,\n            },\n            test_output=[\n                (\n                    \"post\",\n                    RedditPost(\n                        id=\"id1\", subreddit=\"subreddit\", title=\"title1\", body=\"body1\"\n                    ),\n                ),\n                (\n                    \"post\",\n                    RedditPost(\n                        id=\"id2\", subreddit=\"subreddit\", title=\"title2\", body=\"body2\"\n                    ),\n                ),\n            ],\n            test_mock={\n                \"get_posts\": lambda _: [\n                    MockObject(id=\"id1\", title=\"title1\", selftext=\"body1\"),\n                    MockObject(id=\"id2\", title=\"title2\", selftext=\"body2\"),\n                    MockObject(id=\"id3\", title=\"title2\", selftext=\"body2\"),\n                ]\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "get_posts",
          "type": "function",
          "start_line": 114,
          "end_line": 118,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 114,
              "line": "    @staticmethod"
            },
            {
              "lineno": 115,
              "line": "    def get_posts(input_data: Input) -> Iterator[praw.reddit.Submission]:"
            },
            {
              "lineno": 116,
              "line": "        client = get_praw(input_data.creds)"
            },
            {
              "lineno": 117,
              "line": "        subreddit = client.subreddit(input_data.subreddit)"
            },
            {
              "lineno": 118,
              "line": "        return subreddit.new(limit=input_data.post_limit or 10)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "@staticmethod\ndef get_posts(input_data: Input) -> Iterator[praw.reddit.Submission]:\nclient = get_praw(input_data.creds)\nsubreddit = client.subreddit(input_data.subreddit)\nreturn subreddit.new(limit=input_data.post_limit or 10)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 120,
          "end_line": 139,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 120,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 121,
              "line": "        current_time = datetime.now(tz=timezone.utc)"
            },
            {
              "lineno": 122,
              "line": "        for post in self.get_posts(input_data):"
            },
            {
              "lineno": 123,
              "line": "            if input_data.last_minutes:"
            },
            {
              "lineno": 124,
              "line": "                post_datetime = datetime.fromtimestamp("
            },
            {
              "lineno": 125,
              "line": "                    post.created_utc, tz=timezone.utc"
            },
            {
              "lineno": 126,
              "line": "                )"
            },
            {
              "lineno": 127,
              "line": "                time_difference = current_time - post_datetime"
            },
            {
              "lineno": 128,
              "line": "                if time_difference.total_seconds() / 60 > input_data.last_minutes:"
            },
            {
              "lineno": 129,
              "line": "                    continue"
            },
            {
              "lineno": 130,
              "line": ""
            },
            {
              "lineno": 131,
              "line": "            if input_data.last_post and post.id == input_data.last_post:"
            },
            {
              "lineno": 132,
              "line": "                break"
            },
            {
              "lineno": 133,
              "line": ""
            },
            {
              "lineno": 134,
              "line": "            yield \"post\", RedditPost("
            },
            {
              "lineno": 135,
              "line": "                id=post.id,"
            },
            {
              "lineno": 136,
              "line": "                subreddit=input_data.subreddit,"
            },
            {
              "lineno": 137,
              "line": "                title=post.title,"
            },
            {
              "lineno": 138,
              "line": "                body=post.selftext,"
            },
            {
              "lineno": 139,
              "line": "            )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_time = datetime.now(tz=timezone.utc)",
              "successors": [
                {
                  "id": 3,
                  "label": "        for post in self.get_posts(input_data):",
                  "successors": [
                    {
                      "id": 4,
                      "label": "            if input_data.last_minutes:\n                post_datetime = datetime.fromtimestamp(\n                    post.created_utc, tz=timezone.utc\n                )\n                time_difference = current_time - post_datetime\n                if time_difference.total_seconds() / 60 > input_data.last_minutes:",
                      "successors": [
                        {
                          "id": 5,
                          "label": "                    continue\n            if input_data.last_post and post.id == input_data.last_post:\n                break",
                          "successors": [
                            {
                              "id": 7,
                              "label": "            yield \"post\", RedditPost(\n                id=post.id,\n                subreddit=input_data.subreddit,\n                title=post.title,\n                body=post.selftext,\n            )",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "            if input_data.last_post and post.id == input_data.last_post:\n                break\n            yield \"post\", RedditPost(\n                id=post.id,\n                subreddit=input_data.subreddit,\n                title=post.title,\n                body=post.selftext,\n            )",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "            if input_data.last_post and post.id == input_data.last_post:\n                break\n            yield \"post\", RedditPost(\n                id=post.id,\n                subreddit=input_data.subreddit,\n                title=post.title,\n                body=post.selftext,\n            )",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "            yield \"post\", RedditPost(\n                id=post.id,\n                subreddit=input_data.subreddit,\n                title=post.title,\n                body=post.selftext,\n            )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 50,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 50,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 51,
              "line": "        subreddit: str = SchemaField(description=\"Subreddit name\")"
            },
            {
              "lineno": 52,
              "line": "        creds: RedditCredentials = SchemaField("
            },
            {
              "lineno": 53,
              "line": "            description=\"Reddit credentials\","
            },
            {
              "lineno": 54,
              "line": "            default=RedditCredentials(),"
            },
            {
              "lineno": 55,
              "line": "        )"
            },
            {
              "lineno": 56,
              "line": "        last_minutes: int | None = SchemaField("
            },
            {
              "lineno": 57,
              "line": "            description=\"Post time to stop minutes ago while fetching posts\","
            },
            {
              "lineno": 58,
              "line": "            default=None,"
            },
            {
              "lineno": 59,
              "line": "        )"
            },
            {
              "lineno": 60,
              "line": "        last_post: str | None = SchemaField("
            },
            {
              "lineno": 61,
              "line": "            description=\"Post ID to stop when reached while fetching posts\","
            },
            {
              "lineno": 62,
              "line": "            default=None,"
            },
            {
              "lineno": 63,
              "line": "        )"
            },
            {
              "lineno": 64,
              "line": "        post_limit: int | None = SchemaField("
            },
            {
              "lineno": 65,
              "line": "            description=\"Number of posts to fetch\", default=10"
            },
            {
              "lineno": 66,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        subreddit: str = SchemaField(description=\"Subreddit name\")\n        creds: RedditCredentials = SchemaField(\n            description=\"Reddit credentials\",\n            default=RedditCredentials(),\n        )\n        last_minutes: int | None = SchemaField(\n            description=\"Post time to stop minutes ago while fetching posts\",\n            default=None,\n        )\n        last_post: str | None = SchemaField(\n            description=\"Post ID to stop when reached while fetching posts\",\n            default=None,\n        )\n        post_limit: int | None = SchemaField(\n            description=\"Number of posts to fetch\", default=10\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 68,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 68,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 69,
              "line": "        post: RedditPost = SchemaField(description=\"Reddit post\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        post: RedditPost = SchemaField(description=\"Reddit post\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 49,
          "line": "class GetRedditPostsBlock(Block):"
        },
        {
          "lineno": 67,
          "line": ""
        },
        {
          "lineno": 70,
          "line": ""
        },
        {
          "lineno": 113,
          "line": ""
        },
        {
          "lineno": 119,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "PostRedditCommentBlock",
      "type": "class",
      "start_line": 142,
      "end_line": 174,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 152,
          "end_line": 162,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 152,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 153,
              "line": "        super().__init__("
            },
            {
              "lineno": 154,
              "line": "            id=\"4a92261b-701e-4ffb-8970-675fd28e261f\","
            },
            {
              "lineno": 155,
              "line": "            description=\"This block posts a Reddit comment on a specified Reddit post.\","
            },
            {
              "lineno": 156,
              "line": "            categories={BlockCategory.SOCIAL},"
            },
            {
              "lineno": 157,
              "line": "            input_schema=PostRedditCommentBlock.Input,"
            },
            {
              "lineno": 158,
              "line": "            output_schema=PostRedditCommentBlock.Output,"
            },
            {
              "lineno": 159,
              "line": "            test_input={\"data\": {\"post_id\": \"id\", \"comment\": \"comment\"}},"
            },
            {
              "lineno": 160,
              "line": "            test_output=[(\"comment_id\", \"dummy_comment_id\")],"
            },
            {
              "lineno": 161,
              "line": "            test_mock={\"reply_post\": lambda creds, comment: \"dummy_comment_id\"},"
            },
            {
              "lineno": 162,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"4a92261b-701e-4ffb-8970-675fd28e261f\",\n            description=\"This block posts a Reddit comment on a specified Reddit post.\",\n            categories={BlockCategory.SOCIAL},\n            input_schema=PostRedditCommentBlock.Input,\n            output_schema=PostRedditCommentBlock.Output,\n            test_input={\"data\": {\"post_id\": \"id\", \"comment\": \"comment\"}},\n            test_output=[(\"comment_id\", \"dummy_comment_id\")],\n            test_mock={\"reply_post\": lambda creds, comment: \"dummy_comment_id\"},\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "reply_post",
          "type": "function",
          "start_line": 165,
          "end_line": 171,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 165,
              "line": "    def reply_post(creds: RedditCredentials, comment: RedditComment) -> str:"
            },
            {
              "lineno": 166,
              "line": "        client = get_praw(creds)"
            },
            {
              "lineno": 167,
              "line": "        submission = client.submission(id=comment.post_id)"
            },
            {
              "lineno": 168,
              "line": "        new_comment = submission.reply(comment.comment)"
            },
            {
              "lineno": 169,
              "line": "        if not new_comment:"
            },
            {
              "lineno": 170,
              "line": "            raise ValueError(\"Failed to post comment.\")"
            },
            {
              "lineno": 171,
              "line": "        return new_comment.id"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def reply_post(creds: RedditCredentials, comment: RedditComment) -> str:\n        client = get_praw(creds)\n        submission = client.submission(id=comment.post_id)\n        new_comment = submission.reply(comment.comment)\n        if not new_comment:\n            raise ValueError(\"Failed to post comment.\")",
              "successors": [
                {
                  "id": 3,
                  "label": "        return new_comment.id",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 173,
          "end_line": 174,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 173,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 174,
              "line": "        yield \"comment_id\", self.reply_post(input_data.creds, input_data.data)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield \"comment_id\", self.reply_post(input_data.creds, input_data.data)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 143,
          "end_line": 147,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 143,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 144,
              "line": "        creds: RedditCredentials = SchemaField("
            },
            {
              "lineno": 145,
              "line": "            description=\"Reddit credentials\", default=RedditCredentials()"
            },
            {
              "lineno": 146,
              "line": "        )"
            },
            {
              "lineno": 147,
              "line": "        data: RedditComment = SchemaField(description=\"Reddit comment\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        creds: RedditCredentials = SchemaField(\n            description=\"Reddit credentials\", default=RedditCredentials()\n        )\n        data: RedditComment = SchemaField(description=\"Reddit comment\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 149,
          "end_line": 150,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 149,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 150,
              "line": "        comment_id: str = SchemaField(description=\"Posted comment ID\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        comment_id: str = SchemaField(description=\"Posted comment ID\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 142,
          "line": "class PostRedditCommentBlock(Block):"
        },
        {
          "lineno": 148,
          "line": ""
        },
        {
          "lineno": 151,
          "line": ""
        },
        {
          "lineno": 163,
          "line": ""
        },
        {
          "lineno": 164,
          "line": "    @staticmethod"
        },
        {
          "lineno": 172,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class PostRedditCommentBlock(Block):\n@staticmethod",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from datetime import datetime, timezone"
    },
    {
      "lineno": 2,
      "line": "from typing import Iterator"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "import praw"
    },
    {
      "lineno": 5,
      "line": "from pydantic import BaseModel, ConfigDict"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 8,
      "line": "from backend.data.model import BlockSecret, SchemaField, SecretField"
    },
    {
      "lineno": 9,
      "line": "from backend.util.mock import MockObject"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 27,
      "line": ""
    },
    {
      "lineno": 28,
      "line": ""
    },
    {
      "lineno": 32,
      "line": ""
    },
    {
      "lineno": 33,
      "line": ""
    },
    {
      "lineno": 47,
      "line": ""
    },
    {
      "lineno": 48,
      "line": ""
    },
    {
      "lineno": 140,
      "line": ""
    },
    {
      "lineno": 141,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from datetime import datetime, timezone\nfrom typing import Iterator\n\nimport praw\nfrom pydantic import BaseModel, ConfigDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import BlockSecret, SchemaField, SecretField\nfrom backend.util.mock import MockObject",
      "successors": []
    }
  ]
}