{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 237,
  "functions": [],
  "classes": [
    {
      "name": "ReplicateFluxModelName",
      "type": "class",
      "start_line": 34,
      "end_line": 46,
      "functions": [
        {
          "name": "api_name",
          "type": "function",
          "start_line": 40,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 40,
              "line": "    def api_name(self):"
            },
            {
              "lineno": 41,
              "line": "        api_names = {"
            },
            {
              "lineno": 42,
              "line": "            ReplicateFluxModelName.FLUX_SCHNELL: \"black-forest-labs/flux-schnell\","
            },
            {
              "lineno": 43,
              "line": "            ReplicateFluxModelName.FLUX_PRO: \"black-forest-labs/flux-pro\","
            },
            {
              "lineno": 44,
              "line": "            ReplicateFluxModelName.FLUX_PRO1_1: \"black-forest-labs/flux-1.1-pro\","
            },
            {
              "lineno": 45,
              "line": "        }"
            },
            {
              "lineno": 46,
              "line": "        return api_names[self]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def api_name(self):\n        api_names = {\n            ReplicateFluxModelName.FLUX_SCHNELL: \"black-forest-labs/flux-schnell\",\n            ReplicateFluxModelName.FLUX_PRO: \"black-forest-labs/flux-pro\",\n            ReplicateFluxModelName.FLUX_PRO1_1: \"black-forest-labs/flux-1.1-pro\",\n        }\n        return api_names[self]",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 34,
          "line": "class ReplicateFluxModelName(str, Enum):"
        },
        {
          "lineno": 35,
          "line": "    FLUX_SCHNELL = (\"Flux Schnell\",)"
        },
        {
          "lineno": 36,
          "line": "    FLUX_PRO = (\"Flux Pro\",)"
        },
        {
          "lineno": 37,
          "line": "    FLUX_PRO1_1 = (\"Flux Pro 1.1\",)"
        },
        {
          "lineno": 38,
          "line": ""
        },
        {
          "lineno": 39,
          "line": "    @property"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ReplicateFluxModelName(str, Enum):\n    FLUX_SCHNELL = (\"Flux Schnell\",)\n    FLUX_PRO = (\"Flux Pro\",)\n    FLUX_PRO1_1 = (\"Flux Pro 1.1\",)\n@property",
          "successors": []
        }
      ]
    },
    {
      "name": "ImageType",
      "type": "class",
      "start_line": 50,
      "end_line": 53,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 50,
          "line": "class ImageType(str, Enum):"
        },
        {
          "lineno": 51,
          "line": "    WEBP = \"webp\""
        },
        {
          "lineno": 52,
          "line": "    JPG = \"jpg\""
        },
        {
          "lineno": 53,
          "line": "    PNG = \"png\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ImageType(str, Enum):\n    WEBP = \"webp\"\n    JPG = \"jpg\"\n    PNG = \"png\"",
          "successors": []
        }
      ]
    },
    {
      "name": "ReplicateFluxAdvancedModelBlock",
      "type": "class",
      "start_line": 56,
      "end_line": 237,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 130,
          "end_line": 160,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 130,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 131,
              "line": "        super().__init__("
            },
            {
              "lineno": 132,
              "line": "            id=\"90f8c45e-e983-4644-aa0b-b4ebe2f531bc\","
            },
            {
              "lineno": 133,
              "line": "            description=\"This block runs Flux models on Replicate with advanced settings.\","
            },
            {
              "lineno": 134,
              "line": "            categories={BlockCategory.AI},"
            },
            {
              "lineno": 135,
              "line": "            input_schema=ReplicateFluxAdvancedModelBlock.Input,"
            },
            {
              "lineno": 136,
              "line": "            output_schema=ReplicateFluxAdvancedModelBlock.Output,"
            },
            {
              "lineno": 137,
              "line": "            test_input={"
            },
            {
              "lineno": 138,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 139,
              "line": "                \"replicate_model_name\": ReplicateFluxModelName.FLUX_SCHNELL,"
            },
            {
              "lineno": 140,
              "line": "                \"prompt\": \"A beautiful landscape painting of a serene lake at sunrise\","
            },
            {
              "lineno": 141,
              "line": "                \"seed\": None,"
            },
            {
              "lineno": 142,
              "line": "                \"steps\": 25,"
            },
            {
              "lineno": 143,
              "line": "                \"guidance\": 3.0,"
            },
            {
              "lineno": 144,
              "line": "                \"interval\": 2.0,"
            },
            {
              "lineno": 145,
              "line": "                \"aspect_ratio\": \"1:1\","
            },
            {
              "lineno": 146,
              "line": "                \"output_format\": ImageType.PNG,"
            },
            {
              "lineno": 147,
              "line": "                \"output_quality\": 80,"
            },
            {
              "lineno": 148,
              "line": "                \"safety_tolerance\": 2,"
            },
            {
              "lineno": 149,
              "line": "            },"
            },
            {
              "lineno": 150,
              "line": "            test_output=["
            },
            {
              "lineno": 151,
              "line": "                ("
            },
            {
              "lineno": 152,
              "line": "                    \"result\","
            },
            {
              "lineno": 153,
              "line": "                    \"https://replicate.com/output/generated-image-url.jpg\","
            },
            {
              "lineno": 154,
              "line": "                ),"
            },
            {
              "lineno": 155,
              "line": "            ],"
            },
            {
              "lineno": 156,
              "line": "            test_mock={"
            },
            {
              "lineno": 157,
              "line": "                \"run_model\": lambda api_key, model_name, prompt, seed, steps, guidance, interval, aspect_ratio, output_format, output_quality, safety_tolerance: \"https://replicate.com/output/generated-image-url.jpg\","
            },
            {
              "lineno": 158,
              "line": "            },"
            },
            {
              "lineno": 159,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 160,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": [
                "    def __init__(self):",
                "        super().__init__(",
                "            id=\"90f8c45e-e983-4644-aa0b-b4ebe2f531bc\",",
                "            description=\"This block runs Flux models on Replicate with advanced settings.\",",
                "            categories={BlockCategory.AI},",
                "            input_schema=ReplicateFluxAdvancedModelBlock.Input,",
                "            output_schema=ReplicateFluxAdvancedModelBlock.Output,",
                "            test_input={",
                "                \"credentials\": TEST_CREDENTIALS_INPUT,",
                "                \"replicate_model_name\": ReplicateFluxModelName.FLUX_SCHNELL,",
                "                \"prompt\": \"A beautiful landscape painting of a serene lake at sunrise\",",
                "                \"seed\": None,",
                "                \"steps\": 25,",
                "                \"guidance\": 3.0,",
                "                \"interval\": 2.0,",
                "                \"aspect_ratio\": \"1:1\",",
                "                \"output_format\": ImageType.PNG,",
                "                \"output_quality\": 80,",
                "                \"safety_tolerance\": 2,",
                "            },",
                "            test_output=[",
                "                (",
                "                    \"result\",",
                "                    \"https://replicate.com/output/generated-image-url.jpg\",",
                "                ),",
                "            ],",
                "            test_mock={",
                "                \"run_model\": lambda api_key, model_name, prompt, seed, steps, guidance, interval, aspect_ratio, output_format, output_quality, safety_tolerance: \"https://replicate.com/output/generated-image-url.jpg\",",
                "            },",
                "            test_credentials=TEST_CREDENTIALS,",
                "        )"
              ],
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 162,
          "end_line": 184,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 162,
              "line": "    def run("
            },
            {
              "lineno": 163,
              "line": "        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs"
            },
            {
              "lineno": 164,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 165,
              "line": "        # If the seed is not provided, generate a random seed"
            },
            {
              "lineno": 166,
              "line": "        seed = input_data.seed"
            },
            {
              "lineno": 167,
              "line": "        if seed is None:"
            },
            {
              "lineno": 168,
              "line": "            seed = int.from_bytes(os.urandom(4), \"big\")"
            },
            {
              "lineno": 169,
              "line": ""
            },
            {
              "lineno": 170,
              "line": "        # Run the model using the provided inputs"
            },
            {
              "lineno": 171,
              "line": "        result = self.run_model("
            },
            {
              "lineno": 172,
              "line": "            api_key=credentials.api_key,"
            },
            {
              "lineno": 173,
              "line": "            model_name=input_data.replicate_model_name.api_name,"
            },
            {
              "lineno": 174,
              "line": "            prompt=input_data.prompt,"
            },
            {
              "lineno": 175,
              "line": "            seed=seed,"
            },
            {
              "lineno": 176,
              "line": "            steps=input_data.steps,"
            },
            {
              "lineno": 177,
              "line": "            guidance=input_data.guidance,"
            },
            {
              "lineno": 178,
              "line": "            interval=input_data.interval,"
            },
            {
              "lineno": 179,
              "line": "            aspect_ratio=input_data.aspect_ratio,"
            },
            {
              "lineno": 180,
              "line": "            output_format=input_data.output_format,"
            },
            {
              "lineno": 181,
              "line": "            output_quality=input_data.output_quality,"
            },
            {
              "lineno": 182,
              "line": "            safety_tolerance=input_data.safety_tolerance,"
            },
            {
              "lineno": 183,
              "line": "        )"
            },
            {
              "lineno": 184,
              "line": "        yield \"result\", result"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        # If the seed is not provided, generate a random seed\n        seed = input_data.seed\n        if seed is None:\n            seed = int.from_bytes(os.urandom(4), \"big\")",
              "successors": [
                {
                  "id": 3,
                  "label": "        # Run the model using the provided inputs\n        result = self.run_model(\n            api_key=credentials.api_key,\n            model_name=input_data.replicate_model_name.api_name,\n            prompt=input_data.prompt,\n            seed=seed,\n            steps=input_data.steps,\n            guidance=input_data.guidance,\n            interval=input_data.interval,\n            aspect_ratio=input_data.aspect_ratio,\n            output_format=input_data.output_format,\n            output_quality=input_data.output_quality,\n            safety_tolerance=input_data.safety_tolerance,\n        )\n        yield \"result\", result",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run_model",
          "type": "function",
          "start_line": 186,
          "end_line": 237,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 186,
              "line": "    def run_model("
            },
            {
              "lineno": 187,
              "line": "        self,"
            },
            {
              "lineno": 188,
              "line": "        api_key: SecretStr,"
            },
            {
              "lineno": 189,
              "line": "        model_name,"
            },
            {
              "lineno": 190,
              "line": "        prompt,"
            },
            {
              "lineno": 191,
              "line": "        seed,"
            },
            {
              "lineno": 192,
              "line": "        steps,"
            },
            {
              "lineno": 193,
              "line": "        guidance,"
            },
            {
              "lineno": 194,
              "line": "        interval,"
            },
            {
              "lineno": 195,
              "line": "        aspect_ratio,"
            },
            {
              "lineno": 196,
              "line": "        output_format,"
            },
            {
              "lineno": 197,
              "line": "        output_quality,"
            },
            {
              "lineno": 198,
              "line": "        safety_tolerance,"
            },
            {
              "lineno": 199,
              "line": "    ):"
            },
            {
              "lineno": 200,
              "line": "        # Initialize Replicate client with the API key"
            },
            {
              "lineno": 201,
              "line": "        client = replicate.Client(api_token=api_key.get_secret_value())"
            },
            {
              "lineno": 202,
              "line": ""
            },
            {
              "lineno": 203,
              "line": "        # Run the model with additional parameters"
            },
            {
              "lineno": 204,
              "line": "        output: FileOutput | list[FileOutput] = client.run(  # type: ignore This is because they changed the return type, and didn't update the type hint! It should be overloaded depending on the value of `use_file_output` to `FileOutput | list[FileOutput]` but it's `Any | Iterator[Any]`"
            },
            {
              "lineno": 205,
              "line": "            f\"{model_name}\","
            },
            {
              "lineno": 206,
              "line": "            input={"
            },
            {
              "lineno": 207,
              "line": "                \"prompt\": prompt,"
            },
            {
              "lineno": 208,
              "line": "                \"seed\": seed,"
            },
            {
              "lineno": 209,
              "line": "                \"steps\": steps,"
            },
            {
              "lineno": 210,
              "line": "                \"guidance\": guidance,"
            },
            {
              "lineno": 211,
              "line": "                \"interval\": interval,"
            },
            {
              "lineno": 212,
              "line": "                \"aspect_ratio\": aspect_ratio,"
            },
            {
              "lineno": 213,
              "line": "                \"output_format\": output_format,"
            },
            {
              "lineno": 214,
              "line": "                \"output_quality\": output_quality,"
            },
            {
              "lineno": 215,
              "line": "                \"safety_tolerance\": safety_tolerance,"
            },
            {
              "lineno": 216,
              "line": "            },"
            },
            {
              "lineno": 217,
              "line": "            wait=False,  # don't arbitrarily return data:octect/stream or sometimes url depending on the model???? what is this api"
            },
            {
              "lineno": 218,
              "line": "        )"
            },
            {
              "lineno": 219,
              "line": ""
            },
            {
              "lineno": 220,
              "line": "        # Check if output is a list or a string and extract accordingly; otherwise, assign a default message"
            },
            {
              "lineno": 221,
              "line": "        if isinstance(output, list) and len(output) > 0:"
            },
            {
              "lineno": 222,
              "line": "            if isinstance(output[0], FileOutput):"
            },
            {
              "lineno": 223,
              "line": "                result_url = output[0].url  # If output is a list, get the first element"
            },
            {
              "lineno": 224,
              "line": "            else:"
            },
            {
              "lineno": 225,
              "line": "                result_url = output["
            },
            {
              "lineno": 226,
              "line": "                    0"
            },
            {
              "lineno": 227,
              "line": "                ]  # If output is a list and not a FileOutput, get the first element. Should never happen, but just in case."
            },
            {
              "lineno": 228,
              "line": "        elif isinstance(output, FileOutput):"
            },
            {
              "lineno": 229,
              "line": "            result_url = output.url  # If output is a FileOutput, use the url"
            },
            {
              "lineno": 230,
              "line": "        elif isinstance(output, str):"
            },
            {
              "lineno": 231,
              "line": "            result_url = output  # If output is a string (for some reason due to their janky type hinting), use it directly"
            },
            {
              "lineno": 232,
              "line": "        else:"
            },
            {
              "lineno": 233,
              "line": "            result_url = ("
            },
            {
              "lineno": 234,
              "line": "                \"No output received\"  # Fallback message if output is not as expected"
            },
            {
              "lineno": 235,
              "line": "            )"
            },
            {
              "lineno": 236,
              "line": ""
            },
            {
              "lineno": 237,
              "line": "        return result_url"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run_model(\n        self,\n        api_key: SecretStr,\n        model_name,\n        prompt,\n        seed,\n        steps,\n        guidance,\n        interval,\n        aspect_ratio,\n        output_format,\n        output_quality,\n        safety_tolerance,\n    ):\n        # Initialize Replicate client with the API key\n        client = replicate.Client(api_token=api_key.get_secret_value())\n        # Run the model with additional parameters\n        output: FileOutput | list[FileOutput] = client.run(  # type: ignore This is because they changed the return type, and didn't update the type hint! It should be overloaded depending on the value of `use_file_output` to `FileOutput | list[FileOutput]` but it's `Any | Iterator[Any]`\n            f\"{model_name}\",\n            input={\n                \"prompt\": prompt,\n                \"seed\": seed,\n                \"steps\": steps,\n                \"guidance\": guidance,\n                \"interval\": interval,\n                \"aspect_ratio\": aspect_ratio,\n                \"output_format\": output_format,\n                \"output_quality\": output_quality,\n                \"safety_tolerance\": safety_tolerance,\n            },\n            wait=False,  # don't arbitrarily return data:octect/stream or sometimes url depending on the model???? what is this api\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        # Check if output is a list or a string and extract accordingly; otherwise, assign a default message\n        if isinstance(output, list) and len(output) > 0:\n            if isinstance(output[0], FileOutput):\n                result_url = output[0].url  # If output is a list, get the first element\n            else:\n                result_url = output[\n                    0\n                ]  # If output is a list and not a FileOutput, get the first element. Should never happen, but just in case.",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        elif isinstance(output, FileOutput):\n            result_url = output.url  # If output is a FileOutput, use the url\n        elif isinstance(output, str):\n            result_url = output  # If output is a string (for some reason due to their janky type hinting), use it directly\n        else:\n            result_url = (\n                \"No output received\"  # Fallback message if output is not as expected\n            )",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "        return result_url",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 57,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 57,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 58,
              "line": "        credentials: CredentialsMetaInput["
            },
            {
              "lineno": 59,
              "line": "            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]"
            },
            {
              "lineno": 60,
              "line": "        ] = CredentialsField("
            },
            {
              "lineno": 61,
              "line": "            description=\"The Replicate integration can be used with \""
            },
            {
              "lineno": 62,
              "line": "            \"any API key with sufficient permissions for the blocks it is used on.\","
            },
            {
              "lineno": 63,
              "line": "        )"
            },
            {
              "lineno": 64,
              "line": "        prompt: str = SchemaField("
            },
            {
              "lineno": 65,
              "line": "            description=\"Text prompt for image generation\","
            },
            {
              "lineno": 66,
              "line": "            placeholder=\"e.g., 'A futuristic cityscape at sunset'\","
            },
            {
              "lineno": 67,
              "line": "            title=\"Prompt\","
            },
            {
              "lineno": 68,
              "line": "        )"
            },
            {
              "lineno": 69,
              "line": "        replicate_model_name: ReplicateFluxModelName = SchemaField("
            },
            {
              "lineno": 70,
              "line": "            description=\"The name of the Image Generation Model, i.e Flux Schnell\","
            },
            {
              "lineno": 71,
              "line": "            default=ReplicateFluxModelName.FLUX_SCHNELL,"
            },
            {
              "lineno": 72,
              "line": "            title=\"Image Generation Model\","
            },
            {
              "lineno": 73,
              "line": "            advanced=False,"
            },
            {
              "lineno": 74,
              "line": "        )"
            },
            {
              "lineno": 75,
              "line": "        seed: int | None = SchemaField("
            },
            {
              "lineno": 76,
              "line": "            description=\"Random seed. Set for reproducible generation\","
            },
            {
              "lineno": 77,
              "line": "            default=None,"
            },
            {
              "lineno": 78,
              "line": "            title=\"Seed\","
            },
            {
              "lineno": 79,
              "line": "        )"
            },
            {
              "lineno": 80,
              "line": "        steps: int = SchemaField("
            },
            {
              "lineno": 81,
              "line": "            description=\"Number of diffusion steps\","
            },
            {
              "lineno": 82,
              "line": "            default=25,"
            },
            {
              "lineno": 83,
              "line": "            title=\"Steps\","
            },
            {
              "lineno": 84,
              "line": "        )"
            },
            {
              "lineno": 85,
              "line": "        guidance: float = SchemaField("
            },
            {
              "lineno": 86,
              "line": "            description=("
            },
            {
              "lineno": 87,
              "line": "                \"Controls the balance between adherence to the text prompt and image quality/diversity. \""
            },
            {
              "lineno": 88,
              "line": "                \"Higher values make the output more closely match the prompt but may reduce overall image quality.\""
            },
            {
              "lineno": 89,
              "line": "            ),"
            },
            {
              "lineno": 90,
              "line": "            default=3,"
            },
            {
              "lineno": 91,
              "line": "            title=\"Guidance\","
            },
            {
              "lineno": 92,
              "line": "        )"
            },
            {
              "lineno": 93,
              "line": "        interval: float = SchemaField("
            },
            {
              "lineno": 94,
              "line": "            description=("
            },
            {
              "lineno": 95,
              "line": "                \"Interval is a setting that increases the variance in possible outputs. \""
            },
            {
              "lineno": 96,
              "line": "                \"Setting this value low will ensure strong prompt following with more consistent outputs.\""
            },
            {
              "lineno": 97,
              "line": "            ),"
            },
            {
              "lineno": 98,
              "line": "            default=2,"
            },
            {
              "lineno": 99,
              "line": "            title=\"Interval\","
            },
            {
              "lineno": 100,
              "line": "        )"
            },
            {
              "lineno": 101,
              "line": "        aspect_ratio: str = SchemaField("
            },
            {
              "lineno": 102,
              "line": "            description=\"Aspect ratio for the generated image\","
            },
            {
              "lineno": 103,
              "line": "            default=\"1:1\","
            },
            {
              "lineno": 104,
              "line": "            title=\"Aspect Ratio\","
            },
            {
              "lineno": 105,
              "line": "            placeholder=\"Choose from: 1:1, 16:9, 2:3, 3:2, 4:5, 5:4, 9:16\","
            },
            {
              "lineno": 106,
              "line": "        )"
            },
            {
              "lineno": 107,
              "line": "        output_format: ImageType = SchemaField("
            },
            {
              "lineno": 108,
              "line": "            description=\"File format of the output image\","
            },
            {
              "lineno": 109,
              "line": "            default=ImageType.WEBP,"
            },
            {
              "lineno": 110,
              "line": "            title=\"Output Format\","
            },
            {
              "lineno": 111,
              "line": "        )"
            },
            {
              "lineno": 112,
              "line": "        output_quality: int = SchemaField("
            },
            {
              "lineno": 113,
              "line": "            description=("
            },
            {
              "lineno": 114,
              "line": "                \"Quality when saving the output images, from 0 to 100. \""
            },
            {
              "lineno": 115,
              "line": "                \"Not relevant for .png outputs\""
            },
            {
              "lineno": 116,
              "line": "            ),"
            },
            {
              "lineno": 117,
              "line": "            default=80,"
            },
            {
              "lineno": 118,
              "line": "            title=\"Output Quality\","
            },
            {
              "lineno": 119,
              "line": "        )"
            },
            {
              "lineno": 120,
              "line": "        safety_tolerance: int = SchemaField("
            },
            {
              "lineno": 121,
              "line": "            description=\"Safety tolerance, 1 is most strict and 5 is most permissive\","
            },
            {
              "lineno": 122,
              "line": "            default=2,"
            },
            {
              "lineno": 123,
              "line": "            title=\"Safety Tolerance\","
            },
            {
              "lineno": 124,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Replicate integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A futuristic cityscape at sunset'\",\n            title=\"Prompt\",\n        )\n        replicate_model_name: ReplicateFluxModelName = SchemaField(\n            description=\"The name of the Image Generation Model, i.e Flux Schnell\",\n            default=ReplicateFluxModelName.FLUX_SCHNELL,\n            title=\"Image Generation Model\",\n            advanced=False,\n        )\n        seed: int | None = SchemaField(\n            description=\"Random seed. Set for reproducible generation\",\n            default=None,\n            title=\"Seed\",\n        )\n        steps: int = SchemaField(\n            description=\"Number of diffusion steps\",\n            default=25,\n            title=\"Steps\",\n        )\n        guidance: float = SchemaField(\n            description=(\n                \"Controls the balance between adherence to the text prompt and image quality/diversity. \"\n                \"Higher values make the output more closely match the prompt but may reduce overall image quality.\"\n            ),\n            default=3,\n            title=\"Guidance\",\n        )\n        interval: float = SchemaField(\n            description=(\n                \"Interval is a setting that increases the variance in possible outputs. \"\n                \"Setting this value low will ensure strong prompt following with more consistent outputs.\"\n            ),\n            default=2,\n            title=\"Interval\",\n        )\n        aspect_ratio: str = SchemaField(\n            description=\"Aspect ratio for the generated image\",\n            default=\"1:1\",\n            title=\"Aspect Ratio\",\n            placeholder=\"Choose from: 1:1, 16:9, 2:3, 3:2, 4:5, 5:4, 9:16\",\n        )\n        output_format: ImageType = SchemaField(\n            description=\"File format of the output image\",\n            default=ImageType.WEBP,\n            title=\"Output Format\",\n        )\n        output_quality: int = SchemaField(\n            description=(\n                \"Quality when saving the output images, from 0 to 100. \"\n                \"Not relevant for .png outputs\"\n            ),\n            default=80,\n            title=\"Output Quality\",\n        )\n        safety_tolerance: int = SchemaField(\n            description=\"Safety tolerance, 1 is most strict and 5 is most permissive\",\n            default=2,\n            title=\"Safety Tolerance\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 126,
          "end_line": 128,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 126,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 127,
              "line": "        result: str = SchemaField(description=\"Generated output\")"
            },
            {
              "lineno": 128,
              "line": "        error: str = SchemaField(description=\"Error message if the model run failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        result: str = SchemaField(description=\"Generated output\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 56,
          "line": "class ReplicateFluxAdvancedModelBlock(Block):"
        },
        {
          "lineno": 125,
          "line": ""
        },
        {
          "lineno": 129,
          "line": ""
        },
        {
          "lineno": 161,
          "line": ""
        },
        {
          "lineno": 185,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import os"
    },
    {
      "lineno": 2,
      "line": "from enum import Enum"
    },
    {
      "lineno": 3,
      "line": "from typing import Literal"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "import replicate"
    },
    {
      "lineno": 6,
      "line": "from pydantic import SecretStr"
    },
    {
      "lineno": 7,
      "line": "from replicate.helpers import FileOutput"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 10,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 11,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 12,
      "line": "    CredentialsField,"
    },
    {
      "lineno": 13,
      "line": "    CredentialsMetaInput,"
    },
    {
      "lineno": 14,
      "line": "    SchemaField,"
    },
    {
      "lineno": 15,
      "line": ")"
    },
    {
      "lineno": 16,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": "TEST_CREDENTIALS = APIKeyCredentials("
    },
    {
      "lineno": 19,
      "line": "    id=\"01234567-89ab-cdef-0123-456789abcdef\","
    },
    {
      "lineno": 20,
      "line": "    provider=\"replicate\","
    },
    {
      "lineno": 21,
      "line": "    api_key=SecretStr(\"mock-replicate-api-key\"),"
    },
    {
      "lineno": 22,
      "line": "    title=\"Mock Replicate API key\","
    },
    {
      "lineno": 23,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 24,
      "line": ")"
    },
    {
      "lineno": 25,
      "line": "TEST_CREDENTIALS_INPUT = {"
    },
    {
      "lineno": 26,
      "line": "    \"provider\": TEST_CREDENTIALS.provider,"
    },
    {
      "lineno": 27,
      "line": "    \"id\": TEST_CREDENTIALS.id,"
    },
    {
      "lineno": 28,
      "line": "    \"type\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 29,
      "line": "    \"title\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 30,
      "line": "}"
    },
    {
      "lineno": 31,
      "line": ""
    },
    {
      "lineno": 32,
      "line": ""
    },
    {
      "lineno": 33,
      "line": "# Model name enum"
    },
    {
      "lineno": 47,
      "line": ""
    },
    {
      "lineno": 48,
      "line": ""
    },
    {
      "lineno": 49,
      "line": "# Image type Enum"
    },
    {
      "lineno": 54,
      "line": ""
    },
    {
      "lineno": 55,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import os\nfrom enum import Enum\nfrom typing import Literal",
      "successors": []
    }
  ]
}