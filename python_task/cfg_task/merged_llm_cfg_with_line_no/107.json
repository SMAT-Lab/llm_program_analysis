{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 73,
  "functions": [],
  "classes": [
    {
      "name": "StepThroughItemsBlock",
      "type": "class",
      "start_line": 8,
      "end_line": 73,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 35,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 35,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 36,
              "line": "        super().__init__("
            },
            {
              "lineno": 37,
              "line": "            id=\"f66a3543-28d3-4ab5-8945-9b336371e2ce\","
            },
            {
              "lineno": 38,
              "line": "            input_schema=StepThroughItemsBlock.Input,"
            },
            {
              "lineno": 39,
              "line": "            output_schema=StepThroughItemsBlock.Output,"
            },
            {
              "lineno": 40,
              "line": "            categories={BlockCategory.LOGIC},"
            },
            {
              "lineno": 41,
              "line": "            description=\"Iterates over a list or dictionary and outputs each item.\","
            },
            {
              "lineno": 42,
              "line": "            test_input={\"items\": [1, 2, 3, {\"key1\": \"value1\", \"key2\": \"value2\"}]},"
            },
            {
              "lineno": 43,
              "line": "            test_output=["
            },
            {
              "lineno": 44,
              "line": "                (\"item\", 1),"
            },
            {
              "lineno": 45,
              "line": "                (\"key\", 0),"
            },
            {
              "lineno": 46,
              "line": "                (\"item\", 2),"
            },
            {
              "lineno": 47,
              "line": "                (\"key\", 1),"
            },
            {
              "lineno": 48,
              "line": "                (\"item\", 3),"
            },
            {
              "lineno": 49,
              "line": "                (\"key\", 2),"
            },
            {
              "lineno": 50,
              "line": "                (\"item\", {\"key1\": \"value1\", \"key2\": \"value2\"}),"
            },
            {
              "lineno": 51,
              "line": "                (\"key\", 3),"
            },
            {
              "lineno": 52,
              "line": "            ],"
            },
            {
              "lineno": 53,
              "line": "            test_mock={},"
            },
            {
              "lineno": 54,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"f66a3543-28d3-4ab5-8945-9b336371e2ce\",\n            input_schema=StepThroughItemsBlock.Input,\n            output_schema=StepThroughItemsBlock.Output,\n            categories={BlockCategory.LOGIC},\n            description=\"Iterates over a list or dictionary and outputs each item.\",\n            test_input={\"items\": [1, 2, 3, {\"key1\": \"value1\", \"key2\": \"value2\"}]},\n            test_output=[\n                (\"item\", 1),\n                (\"key\", 0),\n                (\"item\", 2),\n                (\"key\", 1),\n                (\"item\", 3),\n                (\"key\", 2),\n                (\"item\", {\"key1\": \"value1\", \"key2\": \"value2\"}),\n                (\"key\", 3),\n            ],\n            test_mock={},\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 56,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 56,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 57,
              "line": "        for data in [input_data.items, input_data.items_object, input_data.items_str]:"
            },
            {
              "lineno": 58,
              "line": "            if not data:"
            },
            {
              "lineno": 59,
              "line": "                continue"
            },
            {
              "lineno": 60,
              "line": "            if isinstance(data, str):"
            },
            {
              "lineno": 61,
              "line": "                items = json.loads(data)"
            },
            {
              "lineno": 62,
              "line": "            else:"
            },
            {
              "lineno": 63,
              "line": "                items = data"
            },
            {
              "lineno": 64,
              "line": "            if isinstance(items, dict):"
            },
            {
              "lineno": 65,
              "line": "                # If items is a dictionary, iterate over its values"
            },
            {
              "lineno": 66,
              "line": "                for item in items.values():"
            },
            {
              "lineno": 67,
              "line": "                    yield \"item\", item"
            },
            {
              "lineno": 68,
              "line": "                    yield \"key\", item"
            },
            {
              "lineno": 69,
              "line": "            else:"
            },
            {
              "lineno": 70,
              "line": "                # If items is a list, iterate over the list"
            },
            {
              "lineno": 71,
              "line": "                for index, item in enumerate(items):"
            },
            {
              "lineno": 72,
              "line": "                    yield \"item\", item"
            },
            {
              "lineno": 73,
              "line": "                    yield \"key\", index"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "label": "        for data in [input_data.items, input_data.items_object, input_data.items_str]:\n            if not data:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "                continue\n            if isinstance(data, str):",
                      "successors": [
                        {
                          "id": 5,
                          "label": "                items = json.loads(data)",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "            else:\n                items = data",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "            if isinstance(items, dict):",
                          "successors": [
                            {
                              "id": 8,
                              "label": "                for item in items.values():\n                    yield \"item\", item\n                    yield \"key\", item",
                              "successors": []
                            },
                            {
                              "id": 9,
                              "label": "            else:\n                # If items is a list, iterate over the list",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "                for index, item in enumerate(items):\n                    yield \"item\", item\n                    yield \"key\", index",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 9,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 9,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 10,
              "line": "        items: list = SchemaField("
            },
            {
              "lineno": 11,
              "line": "            advanced=False,"
            },
            {
              "lineno": 12,
              "line": "            description=\"The list or dictionary of items to iterate over\","
            },
            {
              "lineno": 13,
              "line": "            placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\","
            },
            {
              "lineno": 14,
              "line": "            default=[],"
            },
            {
              "lineno": 15,
              "line": "        )"
            },
            {
              "lineno": 16,
              "line": "        items_object: dict = SchemaField("
            },
            {
              "lineno": 17,
              "line": "            advanced=False,"
            },
            {
              "lineno": 18,
              "line": "            description=\"The list or dictionary of items to iterate over\","
            },
            {
              "lineno": 19,
              "line": "            placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\","
            },
            {
              "lineno": 20,
              "line": "            default={},"
            },
            {
              "lineno": 21,
              "line": "        )"
            },
            {
              "lineno": 22,
              "line": "        items_str: str = SchemaField("
            },
            {
              "lineno": 23,
              "line": "            advanced=False,"
            },
            {
              "lineno": 24,
              "line": "            description=\"The list or dictionary of items to iterate over\","
            },
            {
              "lineno": 25,
              "line": "            placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\","
            },
            {
              "lineno": 26,
              "line": "            default=\"\","
            },
            {
              "lineno": 27,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        items: list = SchemaField(\n            advanced=False,\n            description=\"The list or dictionary of items to iterate over\",\n            placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\",\n            default=[],\n        )\n        items_object: dict = SchemaField(\n            advanced=False,\n            description=\"The list or dictionary of items to iterate over\",\n            placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\",\n            default={},\n        )\n        items_str: str = SchemaField(\n            advanced=False,\n            description=\"The list or dictionary of items to iterate over\",\n            placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\",\n            default=\"\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 29,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 29,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 30,
              "line": "        item: Any = SchemaField(description=\"The current item in the iteration\")"
            },
            {
              "lineno": 31,
              "line": "        key: Any = SchemaField("
            },
            {
              "lineno": 32,
              "line": "            description=\"The key or index of the current item in the iteration\","
            },
            {
              "lineno": 33,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        item: Any = SchemaField(description=\"The current item in the iteration\")\n        key: Any = SchemaField(\n            description=\"The key or index of the current item in the iteration\",\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 8,
          "line": "class StepThroughItemsBlock(Block):"
        },
        {
          "lineno": 28,
          "line": ""
        },
        {
          "lineno": 34,
          "line": ""
        },
        {
          "lineno": 55,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class StepThroughItemsBlock(Block):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from typing import Any"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 4,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 5,
      "line": "from backend.util.json import json"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from typing import Any\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.json import json",
      "successors": []
    }
  ]
}