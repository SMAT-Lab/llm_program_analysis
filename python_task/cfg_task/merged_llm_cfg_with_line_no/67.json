{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 244,
  "functions": [
    {
      "name": "on_graph_activate",
      "type": "function",
      "start_line": 18,
      "end_line": 48,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 18,
          "line": "async def on_graph_activate("
        },
        {
          "lineno": 19,
          "line": "    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]"
        },
        {
          "lineno": 20,
          "line": "):"
        },
        {
          "lineno": 21,
          "line": "    \"\"\""
        },
        {
          "lineno": 22,
          "line": "    Hook to be called when a graph is activated/created."
        },
        {
          "lineno": 23,
          "line": ""
        },
        {
          "lineno": 24,
          "line": "    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️"
        },
        {
          "lineno": 25,
          "line": "    this hook calls `on_node_activate` on all nodes in this graph."
        },
        {
          "lineno": 26,
          "line": ""
        },
        {
          "lineno": 27,
          "line": "    Params:"
        },
        {
          "lineno": 28,
          "line": "        get_credentials: `credentials_id` -> Credentials"
        },
        {
          "lineno": 29,
          "line": "    \"\"\""
        },
        {
          "lineno": 30,
          "line": "    # Compare nodes in new_graph_version with previous_graph_version"
        },
        {
          "lineno": 31,
          "line": "    updated_nodes = []"
        },
        {
          "lineno": 32,
          "line": "    for new_node in graph.nodes:"
        },
        {
          "lineno": 33,
          "line": "        node_credentials = None"
        },
        {
          "lineno": 34,
          "line": "        if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):"
        },
        {
          "lineno": 35,
          "line": "            node_credentials = get_credentials(creds_meta[\"id\"])"
        },
        {
          "lineno": 36,
          "line": "            if not node_credentials:"
        },
        {
          "lineno": 37,
          "line": "                raise ValueError("
        },
        {
          "lineno": 38,
          "line": "                    f\"Node #{new_node.id} updated with non-existent \""
        },
        {
          "lineno": 39,
          "line": "                    f\"credentials #{node_credentials}\""
        },
        {
          "lineno": 40,
          "line": "                )"
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 42,
          "line": "        updated_node = await on_node_activate("
        },
        {
          "lineno": 43,
          "line": "            graph.user_id, new_node, credentials=node_credentials"
        },
        {
          "lineno": 44,
          "line": "        )"
        },
        {
          "lineno": 45,
          "line": "        updated_nodes.append(updated_node)"
        },
        {
          "lineno": 46,
          "line": ""
        },
        {
          "lineno": 47,
          "line": "    graph.nodes = updated_nodes"
        },
        {
          "lineno": 48,
          "line": "    return graph"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def on_graph_activate(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n    \"\"\"\n    Hook to be called when a graph is activated/created.\n\n    \n    this hook calls `on_node_activate` on all nodes in this graph.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n# Compare nodes in new_graph_version with previous_graph_version",
          "successors": [
            {
              "id": 3,
              "label": "updated_nodes = []",
              "successors": [
                {
                  "id": 4,
                  "label": "for new_node in graph.nodes:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "node_credentials = None",
                      "successors": [
                        {
                          "id": 6,
                          "label": "if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):\n    node_credentials = get_credentials(creds_meta[\"id\"])\nif not node_credentials:\n    raise ValueError(\n        f\"Node #{new_node.id} updated with non-existent \"\n        f\"credentials #{node_credentials}\"\n    )",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "label": "updated_node = await on_node_activate(\n    graph.user_id, new_node, credentials=node_credentials\n)\nupdated_nodes.append(updated_node)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 9,
              "label": "graph.nodes = updated_nodes\nreturn graph",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "on_graph_deactivate",
      "type": "function",
      "start_line": 51,
      "end_line": 78,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 51,
          "line": "async def on_graph_deactivate("
        },
        {
          "lineno": 52,
          "line": "    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]"
        },
        {
          "lineno": 53,
          "line": "):"
        },
        {
          "lineno": 54,
          "line": "    \"\"\""
        },
        {
          "lineno": 55,
          "line": "    Hook to be called when a graph is deactivated/deleted."
        },
        {
          "lineno": 56,
          "line": ""
        },
        {
          "lineno": 57,
          "line": "    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️"
        },
        {
          "lineno": 58,
          "line": "    this hook calls `on_node_deactivate` on all nodes in `graph`."
        },
        {
          "lineno": 59,
          "line": ""
        },
        {
          "lineno": 60,
          "line": "    Params:"
        },
        {
          "lineno": 61,
          "line": "        get_credentials: `credentials_id` -> Credentials"
        },
        {
          "lineno": 62,
          "line": "    \"\"\""
        },
        {
          "lineno": 63,
          "line": "    updated_nodes = []"
        },
        {
          "lineno": 64,
          "line": "    for node in graph.nodes:"
        },
        {
          "lineno": 65,
          "line": "        node_credentials = None"
        },
        {
          "lineno": 66,
          "line": "        if creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME):"
        },
        {
          "lineno": 67,
          "line": "            node_credentials = get_credentials(creds_meta[\"id\"])"
        },
        {
          "lineno": 68,
          "line": "            if not node_credentials:"
        },
        {
          "lineno": 69,
          "line": "                logger.error("
        },
        {
          "lineno": 70,
          "line": "                    f\"Node #{node.id} referenced non-existent \""
        },
        {
          "lineno": 71,
          "line": "                    f\"credentials #{creds_meta['id']}\""
        },
        {
          "lineno": 72,
          "line": "                )"
        },
        {
          "lineno": 73,
          "line": ""
        },
        {
          "lineno": 74,
          "line": "        updated_node = await on_node_deactivate(node, credentials=node_credentials)"
        },
        {
          "lineno": 75,
          "line": "        updated_nodes.append(updated_node)"
        },
        {
          "lineno": 76,
          "line": ""
        },
        {
          "lineno": 77,
          "line": "    graph.nodes = updated_nodes"
        },
        {
          "lineno": 78,
          "line": "    return graph"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "    updated_nodes = []",
          "successors": [
            {
              "id": 2,
              "label": "    for node in graph.nodes:\n        node_credentials = None",
              "successors": [
                {
                  "id": 3,
                  "label": "        if creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n            if not node_credentials:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "                logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n        updated_node = await on_node_deactivate(node, credentials=node_credentials)\n        updated_nodes.append(updated_node)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    graph.nodes = updated_nodes\n    return graph",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "        updated_node = await on_node_deactivate(node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n    graph.nodes = updated_nodes\n    return graph",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "on_node_activate",
      "type": "function",
      "start_line": 81,
      "end_line": 185,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 81,
          "line": "async def on_node_activate("
        },
        {
          "lineno": 82,
          "line": "    user_id: str,"
        },
        {
          "lineno": 83,
          "line": "    node: \"NodeModel\","
        },
        {
          "lineno": 84,
          "line": "    *,"
        },
        {
          "lineno": 85,
          "line": "    credentials: Optional[\"Credentials\"] = None,"
        },
        {
          "lineno": 86,
          "line": ") -> \"NodeModel\":"
        },
        {
          "lineno": 87,
          "line": "    \"\"\"Hook to be called when the node is activated/created\"\"\""
        },
        {
          "lineno": 88,
          "line": ""
        },
        {
          "lineno": 89,
          "line": "    block = get_block(node.block_id)"
        },
        {
          "lineno": 90,
          "line": "    if not block:"
        },
        {
          "lineno": 91,
          "line": "        raise ValueError("
        },
        {
          "lineno": 92,
          "line": "            f\"Node #{node.id} is instance of unknown block #{node.block_id}\""
        },
        {
          "lineno": 93,
          "line": "        )"
        },
        {
          "lineno": 94,
          "line": ""
        },
        {
          "lineno": 95,
          "line": "    if not block.webhook_config:"
        },
        {
          "lineno": 96,
          "line": "        return node"
        },
        {
          "lineno": 97,
          "line": ""
        },
        {
          "lineno": 98,
          "line": "    provider = block.webhook_config.provider"
        },
        {
          "lineno": 99,
          "line": "    if provider not in WEBHOOK_MANAGERS_BY_NAME:"
        },
        {
          "lineno": 100,
          "line": "        raise ValueError("
        },
        {
          "lineno": 101,
          "line": "            f\"Block #{block.id} has webhook_config for provider {provider} \""
        },
        {
          "lineno": 102,
          "line": "            \"which does not support webhooks\""
        },
        {
          "lineno": 103,
          "line": "        )"
        },
        {
          "lineno": 104,
          "line": ""
        },
        {
          "lineno": 105,
          "line": "    logger.debug("
        },
        {
          "lineno": 106,
          "line": "        f\"Activating webhook node #{node.id} with config {block.webhook_config}\""
        },
        {
          "lineno": 107,
          "line": "    )"
        },
        {
          "lineno": 108,
          "line": ""
        },
        {
          "lineno": 109,
          "line": "    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()"
        },
        {
          "lineno": 110,
          "line": ""
        },
        {
          "lineno": 111,
          "line": "    if auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig):"
        },
        {
          "lineno": 112,
          "line": "        try:"
        },
        {
          "lineno": 113,
          "line": "            resource = block.webhook_config.resource_format.format(**node.input_default)"
        },
        {
          "lineno": 114,
          "line": "        except KeyError:"
        },
        {
          "lineno": 115,
          "line": "            resource = None"
        },
        {
          "lineno": 116,
          "line": "        logger.debug("
        },
        {
          "lineno": 117,
          "line": "            f\"Constructed resource string {resource} from input {node.input_default}\""
        },
        {
          "lineno": 118,
          "line": "        )"
        },
        {
          "lineno": 119,
          "line": "    else:"
        },
        {
          "lineno": 120,
          "line": "        resource = \"\"  # not relevant for manual webhooks"
        },
        {
          "lineno": 121,
          "line": ""
        },
        {
          "lineno": 122,
          "line": "    needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields"
        },
        {
          "lineno": 123,
          "line": "    credentials_meta = ("
        },
        {
          "lineno": 124,
          "line": "        node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None"
        },
        {
          "lineno": 125,
          "line": "    )"
        },
        {
          "lineno": 126,
          "line": "    event_filter_input_name = block.webhook_config.event_filter_input"
        },
        {
          "lineno": 127,
          "line": "    has_everything_for_webhook = ("
        },
        {
          "lineno": 128,
          "line": "        resource is not None"
        },
        {
          "lineno": 129,
          "line": "        and (credentials_meta or not needs_credentials)"
        },
        {
          "lineno": 130,
          "line": "        and ("
        },
        {
          "lineno": 131,
          "line": "            not event_filter_input_name"
        },
        {
          "lineno": 132,
          "line": "            or ("
        },
        {
          "lineno": 133,
          "line": "                event_filter_input_name in node.input_default"
        },
        {
          "lineno": 134,
          "line": "                and any("
        },
        {
          "lineno": 135,
          "line": "                    is_on"
        },
        {
          "lineno": 136,
          "line": "                    for is_on in node.input_default[event_filter_input_name].values()"
        },
        {
          "lineno": 137,
          "line": "                )"
        },
        {
          "lineno": 138,
          "line": "            )"
        },
        {
          "lineno": 139,
          "line": "        )"
        },
        {
          "lineno": 140,
          "line": "    )"
        },
        {
          "lineno": 141,
          "line": ""
        },
        {
          "lineno": 142,
          "line": "    if has_everything_for_webhook and resource is not None:"
        },
        {
          "lineno": 143,
          "line": "        logger.debug(f\"Node #{node} has everything for a webhook!\")"
        },
        {
          "lineno": 144,
          "line": "        if credentials_meta and not credentials:"
        },
        {
          "lineno": 145,
          "line": "            raise ValueError("
        },
        {
          "lineno": 146,
          "line": "                f\"Cannot set up webhook for node #{node.id}: \""
        },
        {
          "lineno": 147,
          "line": "                f\"credentials #{credentials_meta['id']} not available\""
        },
        {
          "lineno": 148,
          "line": "            )"
        },
        {
          "lineno": 149,
          "line": ""
        },
        {
          "lineno": 150,
          "line": "        if event_filter_input_name:"
        },
        {
          "lineno": 151,
          "line": "            # Shape of the event filter is enforced in Block.__init__"
        },
        {
          "lineno": 152,
          "line": "            event_filter = cast(dict, node.input_default[event_filter_input_name])"
        },
        {
          "lineno": 153,
          "line": "            events = ["
        },
        {
          "lineno": 154,
          "line": "                block.webhook_config.event_format.format(event=event)"
        },
        {
          "lineno": 155,
          "line": "                for event, enabled in event_filter.items()"
        },
        {
          "lineno": 156,
          "line": "                if enabled is True"
        },
        {
          "lineno": 157,
          "line": "            ]"
        },
        {
          "lineno": 158,
          "line": "            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")"
        },
        {
          "lineno": 159,
          "line": "        else:"
        },
        {
          "lineno": 160,
          "line": "            events = []"
        },
        {
          "lineno": 161,
          "line": ""
        },
        {
          "lineno": 162,
          "line": "        # Find/make and attach a suitable webhook to the node"
        },
        {
          "lineno": 163,
          "line": "        if auto_setup_webhook:"
        },
        {
          "lineno": 164,
          "line": "            assert credentials is not None"
        },
        {
          "lineno": 165,
          "line": "            new_webhook = await webhooks_manager.get_suitable_auto_webhook("
        },
        {
          "lineno": 166,
          "line": "                user_id,"
        },
        {
          "lineno": 167,
          "line": "                credentials,"
        },
        {
          "lineno": 168,
          "line": "                block.webhook_config.webhook_type,"
        },
        {
          "lineno": 169,
          "line": "                resource,"
        },
        {
          "lineno": 170,
          "line": "                events,"
        },
        {
          "lineno": 171,
          "line": "            )"
        },
        {
          "lineno": 172,
          "line": "        else:"
        },
        {
          "lineno": 173,
          "line": "            # Manual webhook -> no credentials -> don't register but do create"
        },
        {
          "lineno": 174,
          "line": "            new_webhook = await webhooks_manager.get_manual_webhook("
        },
        {
          "lineno": 175,
          "line": "                user_id,"
        },
        {
          "lineno": 176,
          "line": "                node.graph_id,"
        },
        {
          "lineno": 177,
          "line": "                block.webhook_config.webhook_type,"
        },
        {
          "lineno": 178,
          "line": "                events,"
        },
        {
          "lineno": 179,
          "line": "            )"
        },
        {
          "lineno": 180,
          "line": "        logger.debug(f\"Acquired webhook: {new_webhook}\")"
        },
        {
          "lineno": 181,
          "line": "        return await set_node_webhook(node.id, new_webhook.id)"
        },
        {
          "lineno": 182,
          "line": "    else:"
        },
        {
          "lineno": 183,
          "line": "        logger.debug(f\"Node #{node.id} does not have everything for a webhook\")"
        },
        {
          "lineno": 184,
          "line": ""
        },
        {
          "lineno": 185,
          "line": "    return node"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def on_node_activate(\n    user_id: str,\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n) -> \"NodeModel\":\n    \"\"\"Hook to be called when the node is activated/created\"\"\"\n\n    block = get_block(node.block_id)\nif not block:\n    raise ValueError(\n        f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n    )",
          "successors": [
            {
              "id": 3,
              "label": "if not block.webhook_config:\n    return node\nprovider = block.webhook_config.provider\nif provider not in WEBHOOK_MANAGERS_BY_NAME:",
              "successors": [
                {
                  "id": 5,
                  "label": "raise ValueError(\n    f\"Block #{block.id} has webhook_config for provider {provider} \"\n    \"which does not support webhooks\"\n)\nlogger.debug(\n    f\"Activating webhook node #{node.id} with config {block.webhook_config}\"\n)",
                  "successors": [
                    {
                      "id": 7,
                      "label": "webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\nif auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig):\n    try:\n        resource = block.webhook_config.resource_format.format(**node.input_default)\n    except KeyError:\n        resource = None\n    logger.debug(\n        f\"Constructed resource string {resource} from input {node.input_default}\"\n    )\nelse:\n    resource = \"\"  # not relevant for manual webhooks",
                      "successors": [
                        {
                          "id": 9,
                          "label": "needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\ncredentials_meta = (\n    node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n)\nevent_filter_input_name = block.webhook_config.event_filter_input\nhas_everything_for_webhook = (\n    resource is not None\n    and (credentials_meta or not needs_credentials)\n    and (\n        not event_filter_input_name\n        or (\n            event_filter_input_name in node.input_default\n            and any(\n                is_on\n                for is_on in node.input_default[event_filter_input_name].values()\n            )\n        )\n    )\n)\nif has_everything_for_webhook and resource is not None:\n    logger.debug(f\"Node #{node} has everything for a webhook!\")\n    if credentials_meta and not credentials:\n        raise ValueError(\n            f\"Cannot set up webhook for node #{node.id}: \"\n            f\"credentials #{credentials_meta['id']} not available\"\n        )\n\n    if event_filter_input_name:\n        # Shape of the event filter is enforced in Block.__init__\n        event_filter = cast(dict, node.input_default[event_filter_input_name])\n        events = [\n            block.webhook_config.event_format.format(event=event)\n            for event, enabled in event_filter.items()\n            if enabled is True\n        ]\n        logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n    else:\n        events = []\n\n    # Find/make and attach a suitable webhook to the node\n    if auto_setup_webhook:\n        assert credentials is not None\n        new_webhook = await webhooks_manager.get_suitable_auto_webhook(\n            user_id,\n            credentials,\n            block.webhook_config.webhook_type,\n            resource,\n            events,\n        )\n    else:\n        # Manual webhook -> no credentials -> don't register but do create\n        new_webhook = await webhooks_manager.get_manual_webhook(\n            user_id,\n            node.graph_id,\n            block.webhook_config.webhook_type,\n            events,\n        )\n    logger.debug(f\"Acquired webhook: {new_webhook}\")\n    return await set_node_webhook(node.id, new_webhook.id)\nelse:\n    logger.debug(f\"Node #{node.id} does not have everything for a webhook\")",
                          "successors": [
                            {
                              "id": 11,
                              "label": "return node",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "on_node_deactivate",
      "type": "function",
      "start_line": 188,
      "end_line": 244,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 188,
          "line": "async def on_node_deactivate("
        },
        {
          "lineno": 189,
          "line": "    node: \"NodeModel\","
        },
        {
          "lineno": 190,
          "line": "    *,"
        },
        {
          "lineno": 191,
          "line": "    credentials: Optional[\"Credentials\"] = None,"
        },
        {
          "lineno": 192,
          "line": "    webhooks_manager: Optional[\"BaseWebhooksManager\"] = None,"
        },
        {
          "lineno": 193,
          "line": ") -> \"NodeModel\":"
        },
        {
          "lineno": 194,
          "line": "    \"\"\"Hook to be called when node is deactivated/deleted\"\"\""
        },
        {
          "lineno": 195,
          "line": ""
        },
        {
          "lineno": 196,
          "line": "    logger.debug(f\"Deactivating node #{node.id}\")"
        },
        {
          "lineno": 197,
          "line": "    block = get_block(node.block_id)"
        },
        {
          "lineno": 198,
          "line": "    if not block:"
        },
        {
          "lineno": 199,
          "line": "        raise ValueError("
        },
        {
          "lineno": 200,
          "line": "            f\"Node #{node.id} is instance of unknown block #{node.block_id}\""
        },
        {
          "lineno": 201,
          "line": "        )"
        },
        {
          "lineno": 202,
          "line": ""
        },
        {
          "lineno": 203,
          "line": "    if not block.webhook_config:"
        },
        {
          "lineno": 204,
          "line": "        return node"
        },
        {
          "lineno": 205,
          "line": ""
        },
        {
          "lineno": 206,
          "line": "    provider = block.webhook_config.provider"
        },
        {
          "lineno": 207,
          "line": "    if provider not in WEBHOOK_MANAGERS_BY_NAME:"
        },
        {
          "lineno": 208,
          "line": "        raise ValueError("
        },
        {
          "lineno": 209,
          "line": "            f\"Block #{block.id} has webhook_config for provider {provider} \""
        },
        {
          "lineno": 210,
          "line": "            \"which does not support webhooks\""
        },
        {
          "lineno": 211,
          "line": "        )"
        },
        {
          "lineno": 212,
          "line": ""
        },
        {
          "lineno": 213,
          "line": "    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()"
        },
        {
          "lineno": 214,
          "line": ""
        },
        {
          "lineno": 215,
          "line": "    if node.webhook_id:"
        },
        {
          "lineno": 216,
          "line": "        logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\")"
        },
        {
          "lineno": 217,
          "line": "        if not node.webhook:"
        },
        {
          "lineno": 218,
          "line": "            logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")"
        },
        {
          "lineno": 219,
          "line": "            raise ValueError(\"node.webhook not included\")"
        },
        {
          "lineno": 220,
          "line": ""
        },
        {
          "lineno": 221,
          "line": "        # Detach webhook from node"
        },
        {
          "lineno": 222,
          "line": "        logger.debug(f\"Detaching webhook from node #{node.id}\")"
        },
        {
          "lineno": 223,
          "line": "        updated_node = await set_node_webhook(node.id, None)"
        },
        {
          "lineno": 224,
          "line": ""
        },
        {
          "lineno": 225,
          "line": "        # Prune and deregister the webhook if it is no longer used anywhere"
        },
        {
          "lineno": 226,
          "line": "        webhook = node.webhook"
        },
        {
          "lineno": 227,
          "line": "        logger.debug("
        },
        {
          "lineno": 228,
          "line": "            f\"Pruning{' and deregistering' if credentials else ''} \""
        },
        {
          "lineno": 229,
          "line": "            f\"webhook #{webhook.id}\""
        },
        {
          "lineno": 230,
          "line": "        )"
        },
        {
          "lineno": 231,
          "line": "        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)"
        },
        {
          "lineno": 232,
          "line": "        if ("
        },
        {
          "lineno": 233,
          "line": "            CREDENTIALS_FIELD_NAME in block.input_schema.model_fields"
        },
        {
          "lineno": 234,
          "line": "            and not credentials"
        },
        {
          "lineno": 235,
          "line": "        ):"
        },
        {
          "lineno": 236,
          "line": "            logger.warning("
        },
        {
          "lineno": 237,
          "line": "                f\"Cannot deregister webhook #{webhook.id}: credentials \""
        },
        {
          "lineno": 238,
          "line": "                f\"#{webhook.credentials_id} not available \""
        },
        {
          "lineno": 239,
          "line": "                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\""
        },
        {
          "lineno": 240,
          "line": "            )"
        },
        {
          "lineno": 241,
          "line": "        return updated_node"
        },
        {
          "lineno": 242,
          "line": ""
        },
        {
          "lineno": 243,
          "line": "    logger.debug(f\"Node #{node.id} has no webhook_id, returning\")"
        },
        {
          "lineno": 244,
          "line": "    return node"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def on_node_deactivate(\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n    webhooks_manager: Optional[\"BaseWebhooksManager\"] = None,\n) -> \"NodeModel\":\n    \"\"\"Hook to be called when node is deactivated/deleted\"\"\"\n\n    logger.debug(f\"Deactivating node #{node.id}\")\n    block = get_block(node.block_id)\n    if not block:",
          "successors": [
            {
              "id": 2,
              "label": "raise ValueError(\n    f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n)",
              "successors": []
            },
            {
              "id": 3,
              "label": "if not block.webhook_config:\n    return node",
              "successors": []
            },
            {
              "id": 4,
              "label": "provider = block.webhook_config.provider\nif provider not in WEBHOOK_MANAGERS_BY_NAME:\nraise ValueError(\n    f\"Block #{block.id} has webhook_config for provider {provider} \"\n    \"which does not support webhooks\"\n)",
              "successors": []
            },
            {
              "id": 6,
              "label": "webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n\nif node.webhook_id:\n    logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\")\n    if not node.webhook:\n        logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")\n        raise ValueError(\"node.webhook not included\")\n\n    # Detach webhook from node\n    logger.debug(f\"Detaching webhook from node #{node.id}\")\n    updated_node = await set_node_webhook(node.id, None)\n\n    # Prune and deregister the webhook if it is no longer used anywhere\n    webhook = node.webhook\n    logger.debug(\n        f\"Pruning{' and deregistering' if credentials else ''} \"\n        f\"webhook #{webhook.id}\"\n    )\n    await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)\nif (\n    CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n    and not credentials\n):\n    logger.warning(\n        f\"Cannot deregister webhook #{webhook.id}: credentials \"\n        f\"#{webhook.credentials_id} not available \"\n        f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n    )\nreturn updated_node",
              "successors": []
            },
            {
              "id": 8,
              "label": "logger.debug(f\"Node #{node.id} has no webhook_id, returning\")\nreturn node",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "from typing import TYPE_CHECKING, Callable, Optional, cast"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from backend.data.block import BlockWebhookConfig, get_block"
    },
    {
      "lineno": 5,
      "line": "from backend.data.graph import set_node_webhook"
    },
    {
      "lineno": 6,
      "line": "from backend.data.model import CREDENTIALS_FIELD_NAME"
    },
    {
      "lineno": 7,
      "line": "from backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "if TYPE_CHECKING:"
    },
    {
      "lineno": 10,
      "line": "    from backend.data.graph import GraphModel, NodeModel"
    },
    {
      "lineno": 11,
      "line": "    from backend.data.model import Credentials"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "    from ._base import BaseWebhooksManager"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 49,
      "line": ""
    },
    {
      "lineno": 50,
      "line": ""
    },
    {
      "lineno": 79,
      "line": ""
    },
    {
      "lineno": 80,
      "line": ""
    },
    {
      "lineno": 186,
      "line": ""
    },
    {
      "lineno": 187,
      "line": ""
    }
  ],
  "blocks": []
}