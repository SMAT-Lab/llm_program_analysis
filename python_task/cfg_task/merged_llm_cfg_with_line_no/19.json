{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 122,
  "functions": [],
  "classes": [
    {
      "name": "DateTimeEncoder",
      "type": "class",
      "start_line": 17,
      "end_line": 21,
      "functions": [
        {
          "name": "default",
          "type": "function",
          "start_line": 18,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    def default(self, o):"
            },
            {
              "lineno": 19,
              "line": "        if isinstance(o, datetime):"
            },
            {
              "lineno": 20,
              "line": "            return o.isoformat()"
            },
            {
              "lineno": 21,
              "line": "        return super().default(o)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def default(self, o):\n        if isinstance(o, datetime):\n            return o.isoformat()",
              "successors": [
                {
                  "id": 3,
                  "label": "        return super().default(o)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 17,
          "line": "class DateTimeEncoder(json.JSONEncoder):"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class DateTimeEncoder(json.JSONEncoder):",
          "successors": []
        }
      ]
    },
    {
      "name": "BaseRedisEventBus",
      "type": "class",
      "start_line": 27,
      "end_line": 57,
      "functions": [
        {
          "name": "event_bus_name",
          "type": "function",
          "start_line": 32,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 32,
              "line": "    def event_bus_name(self) -> str:"
            },
            {
              "lineno": 33,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def event_bus_name(self) -> str:\n        pass",
              "successors": []
            }
          ]
        },
        {
          "name": "_serialize_message",
          "type": "function",
          "start_line": 35,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 35,
              "line": "    def _serialize_message(self, item: M, channel_key: str) -> tuple[str, str]:"
            },
            {
              "lineno": 36,
              "line": "        message = json.dumps(item.model_dump(), cls=DateTimeEncoder)"
            },
            {
              "lineno": 37,
              "line": "        channel_name = f\"{self.event_bus_name}/{channel_key}\""
            },
            {
              "lineno": 38,
              "line": "        logger.info(f\"[{channel_name}] Publishing an event to Redis {message}\")"
            },
            {
              "lineno": 39,
              "line": "        return message, channel_name"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def _serialize_message(self, item: M, channel_key: str) -> tuple[str, str]:\n        message = json.dumps(item.model_dump(), cls=DateTimeEncoder)\n        channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        logger.info(f\"[{channel_name}] Publishing an event to Redis {message}\")\n        return message, channel_name",
              "successors": []
            }
          ]
        },
        {
          "name": "_deserialize_message",
          "type": "function",
          "start_line": 41,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 41,
              "line": "    def _deserialize_message(self, msg: Any, channel_key: str) -> M | None:"
            },
            {
              "lineno": 42,
              "line": "        message_type = \"pmessage\" if \"*\" in channel_key else \"message\""
            },
            {
              "lineno": 43,
              "line": "        if msg[\"type\"] != message_type:"
            },
            {
              "lineno": 44,
              "line": "            return None"
            },
            {
              "lineno": 45,
              "line": "        try:"
            },
            {
              "lineno": 46,
              "line": "            data = json.loads(msg[\"data\"])"
            },
            {
              "lineno": 47,
              "line": "            logger.info(f\"Consuming an event from Redis {data}\")"
            },
            {
              "lineno": 48,
              "line": "            return self.Model(**data)"
            },
            {
              "lineno": 49,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 50,
              "line": "            logger.error(f\"Failed to parse event result from Redis {msg} {e}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def _deserialize_message(self, msg: Any, channel_key: str) -> M | None:\n        message_type = \"pmessage\" if \"*\" in channel_key else \"message\"\n        if msg[\"type\"] != message_type:\n            return None",
              "successors": [
                {
                  "id": 3,
                  "label": "        try:\n            data = json.loads(msg[\"data\"])\n            logger.info(f\"Consuming an event from Redis {data}\")\n            return self.Model(**data)\n        except Exception as e:\n            logger.error(f\"Failed to parse event result from Redis {msg} {e}\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_get_pubsub_channel",
          "type": "function",
          "start_line": 52,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 52,
              "line": "    def _get_pubsub_channel("
            },
            {
              "lineno": 53,
              "line": "        self, connection: redis.Redis | redis.AsyncRedis, channel_key: str"
            },
            {
              "lineno": 54,
              "line": "    ) -> tuple[PubSub | AsyncPubSub, str]:"
            },
            {
              "lineno": 55,
              "line": "        full_channel_name = f\"{self.event_bus_name}/{channel_key}\""
            },
            {
              "lineno": 56,
              "line": "        pubsub = connection.pubsub()"
            },
            {
              "lineno": 57,
              "line": "        return pubsub, full_channel_name"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def _get_pubsub_channel(\n        self, connection: redis.Redis | redis.AsyncRedis, channel_key: str\n    ) -> tuple[PubSub | AsyncPubSub, str]:\n        full_channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        pubsub = connection.pubsub()\n        return pubsub, full_channel_name",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 27,
          "line": "class BaseRedisEventBus(Generic[M], ABC):"
        },
        {
          "lineno": 28,
          "line": "    Model: type[M]"
        },
        {
          "lineno": 29,
          "line": ""
        },
        {
          "lineno": 30,
          "line": "    @property"
        },
        {
          "lineno": 31,
          "line": "    @abstractmethod"
        },
        {
          "lineno": 34,
          "line": ""
        },
        {
          "lineno": 40,
          "line": ""
        },
        {
          "lineno": 51,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class BaseRedisEventBus(Generic[M], ABC):\n    Model: type[M]\n    @property\n    @abstractmethod",
          "successors": []
        }
      ]
    },
    {
      "name": "RedisEventBus",
      "type": "class",
      "start_line": 60,
      "end_line": 84,
      "functions": [
        {
          "name": "connection",
          "type": "function",
          "start_line": 64,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 64,
              "line": "    def connection(self) -> redis.Redis:"
            },
            {
              "lineno": 65,
              "line": "        return redis.get_redis()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def connection(self) -> redis.Redis:\n        return redis.get_redis()",
              "successors": []
            }
          ]
        },
        {
          "name": "publish_event",
          "type": "function",
          "start_line": 67,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 67,
              "line": "    def publish_event(self, event: M, channel_key: str):"
            },
            {
              "lineno": 68,
              "line": "        message, full_channel_name = self._serialize_message(event, channel_key)"
            },
            {
              "lineno": 69,
              "line": "        self.connection.publish(full_channel_name, message)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def publish_event(self, event: M, channel_key: str):\n        message, full_channel_name = self._serialize_message(event, channel_key)\n        self.connection.publish(full_channel_name, message)",
              "successors": []
            }
          ]
        },
        {
          "name": "listen_events",
          "type": "function",
          "start_line": 71,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 71,
              "line": "    def listen_events(self, channel_key: str) -> Generator[M, None, None]:"
            },
            {
              "lineno": 72,
              "line": "        pubsub, full_channel_name = self._get_pubsub_channel("
            },
            {
              "lineno": 73,
              "line": "            self.connection, channel_key"
            },
            {
              "lineno": 74,
              "line": "        )"
            },
            {
              "lineno": 75,
              "line": "        assert isinstance(pubsub, PubSub)"
            },
            {
              "lineno": 76,
              "line": ""
            },
            {
              "lineno": 77,
              "line": "        if \"*\" in channel_key:"
            },
            {
              "lineno": 78,
              "line": "            pubsub.psubscribe(full_channel_name)"
            },
            {
              "lineno": 79,
              "line": "        else:"
            },
            {
              "lineno": 80,
              "line": "            pubsub.subscribe(full_channel_name)"
            },
            {
              "lineno": 81,
              "line": ""
            },
            {
              "lineno": 82,
              "line": "        for message in pubsub.listen():"
            },
            {
              "lineno": 83,
              "line": "            if event := self._deserialize_message(message, channel_key):"
            },
            {
              "lineno": 84,
              "line": "                yield event"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def listen_events(self, channel_key: str) -> Generator[M, None, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            self.connection, channel_key\n        )\n        assert isinstance(pubsub, PubSub)",
              "successors": [
                {
                  "id": 3,
                  "label": "        if \"*\" in channel_key:",
                  "successors": [
                    {
                      "id": 4,
                      "label": "            pubsub.psubscribe(full_channel_name)",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "        else:\n            pubsub.subscribe(full_channel_name)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "        for message in pubsub.listen():",
                  "successors": [
                    {
                      "id": 7,
                      "label": "            if event := self._deserialize_message(message, channel_key):\n                yield event",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 60,
          "line": "class RedisEventBus(BaseRedisEventBus[M], ABC):"
        },
        {
          "lineno": 61,
          "line": "    Model: type[M]"
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 63,
          "line": "    @property"
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 70,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class RedisEventBus(BaseRedisEventBus[M], ABC):\n    Model: type[M]\n",
          "successors": [
            {
              "id": 3,
              "label": "    @property\n",
              "successors": [
                {
                  "id": 5,
                  "label": "",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "AsyncRedisEventBus",
      "type": "class",
      "start_line": 87,
      "end_line": 122,
      "functions": [
        {
          "name": "connection",
          "type": "function",
          "start_line": 91,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 91,
              "line": "    async def connection(self) -> redis.AsyncRedis:"
            },
            {
              "lineno": 92,
              "line": "        return await redis.get_redis_async()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def connection(self) -> redis.AsyncRedis:\n        return await redis.get_redis_async()",
              "successors": []
            }
          ]
        },
        {
          "name": "publish_event",
          "type": "function",
          "start_line": 94,
          "end_line": 97,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 94,
              "line": "    async def publish_event(self, event: M, channel_key: str):"
            },
            {
              "lineno": 95,
              "line": "        message, full_channel_name = self._serialize_message(event, channel_key)"
            },
            {
              "lineno": 96,
              "line": "        connection = await self.connection"
            },
            {
              "lineno": 97,
              "line": "        await connection.publish(full_channel_name, message)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def publish_event(self, event: M, channel_key: str):\n        message, full_channel_name = self._serialize_message(event, channel_key)\n        connection = await self.connection\n        await connection.publish(full_channel_name, message)",
              "successors": []
            }
          ]
        },
        {
          "name": "listen_events",
          "type": "function",
          "start_line": 99,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 99,
              "line": "    async def listen_events(self, channel_key: str) -> AsyncGenerator[M, None]:"
            },
            {
              "lineno": 100,
              "line": "        pubsub, full_channel_name = self._get_pubsub_channel("
            },
            {
              "lineno": 101,
              "line": "            await self.connection, channel_key"
            },
            {
              "lineno": 102,
              "line": "        )"
            },
            {
              "lineno": 103,
              "line": "        assert isinstance(pubsub, AsyncPubSub)"
            },
            {
              "lineno": 104,
              "line": ""
            },
            {
              "lineno": 105,
              "line": "        if \"*\" in channel_key:"
            },
            {
              "lineno": 106,
              "line": "            await pubsub.psubscribe(full_channel_name)"
            },
            {
              "lineno": 107,
              "line": "        else:"
            },
            {
              "lineno": 108,
              "line": "            await pubsub.subscribe(full_channel_name)"
            },
            {
              "lineno": 109,
              "line": ""
            },
            {
              "lineno": 110,
              "line": "        async for message in pubsub.listen():"
            },
            {
              "lineno": 111,
              "line": "            if event := self._deserialize_message(message, channel_key):"
            },
            {
              "lineno": 112,
              "line": "                yield event"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def listen_events(self, channel_key: str) -> AsyncGenerator[M, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            await self.connection, channel_key\n        )\n        assert isinstance(pubsub, AsyncPubSub)",
              "successors": [
                {
                  "id": 2,
                  "label": "        if \"*\" in channel_key:\n            await pubsub.psubscribe(full_channel_name)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        async for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):",
                      "successors": [
                        {
                          "id": 6,
                          "label": "                yield event",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "        else:\n            await pubsub.subscribe(full_channel_name)\n        async for message in pubsub.listen():",
                  "successors": [
                    {
                      "id": 5,
                      "label": "            if event := self._deserialize_message(message, channel_key):\n                yield event",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "wait_for_event",
          "type": "function",
          "start_line": 114,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 114,
              "line": "    async def wait_for_event("
            },
            {
              "lineno": 115,
              "line": "        self, channel_key: str, timeout: Optional[float] = None"
            },
            {
              "lineno": 116,
              "line": "    ) -> M | None:"
            },
            {
              "lineno": 117,
              "line": "        try:"
            },
            {
              "lineno": 118,
              "line": "            return await asyncio.wait_for("
            },
            {
              "lineno": 119,
              "line": "                anext(aiter(self.listen_events(channel_key))), timeout"
            },
            {
              "lineno": 120,
              "line": "            )"
            },
            {
              "lineno": 121,
              "line": "        except TimeoutError:"
            },
            {
              "lineno": 122,
              "line": "            return None"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def wait_for_event(\n        self, channel_key: str, timeout: Optional[float] = None\n    ) -> M | None:\n        try:\n            return await asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )",
              "successors": [
                {
                  "id": 3,
                  "label": "        except TimeoutError:\n            return None",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 87,
          "line": "class AsyncRedisEventBus(BaseRedisEventBus[M], ABC):"
        },
        {
          "lineno": 88,
          "line": "    Model: type[M]"
        },
        {
          "lineno": 89,
          "line": ""
        },
        {
          "lineno": 90,
          "line": "    @property"
        },
        {
          "lineno": 93,
          "line": ""
        },
        {
          "lineno": 98,
          "line": ""
        },
        {
          "lineno": 113,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class AsyncRedisEventBus(BaseRedisEventBus[M], ABC):\n    Model: type[M]",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import asyncio"
    },
    {
      "lineno": 2,
      "line": "import json"
    },
    {
      "lineno": 3,
      "line": "import logging"
    },
    {
      "lineno": 4,
      "line": "from abc import ABC, abstractmethod"
    },
    {
      "lineno": 5,
      "line": "from datetime import datetime"
    },
    {
      "lineno": 6,
      "line": "from typing import Any, AsyncGenerator, Generator, Generic, Optional, TypeVar"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from pydantic import BaseModel"
    },
    {
      "lineno": 9,
      "line": "from redis.asyncio.client import PubSub as AsyncPubSub"
    },
    {
      "lineno": 10,
      "line": "from redis.client import PubSub"
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": "from backend.data import redis"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 22,
      "line": ""
    },
    {
      "lineno": 23,
      "line": ""
    },
    {
      "lineno": 24,
      "line": "M = TypeVar(\"M\", bound=BaseModel)"
    },
    {
      "lineno": 25,
      "line": ""
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 58,
      "line": ""
    },
    {
      "lineno": 59,
      "line": ""
    },
    {
      "lineno": 85,
      "line": ""
    },
    {
      "lineno": 86,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import asyncio\nimport json\nimport logging\nfrom abc import ABC, abstractmethod\nfrom datetime import datetime\nfrom typing import Any, AsyncGenerator, Generator, Generic, Optional, TypeVar\n\nfrom pydantic import BaseModel\nfrom redis.asyncio.client import PubSub as AsyncPubSub\nfrom redis.client import PubSub\n\nfrom backend.data import redis\n\nlogger = logging.getLogger(__name__)\nM = TypeVar(\"M\", bound=BaseModel)",
      "successors": []
    }
  ]
}