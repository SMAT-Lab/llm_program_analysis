{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 175,
  "functions": [
    {
      "name": "_get_provider_oauth_handler",
      "type": "function",
      "start_line": 156,
      "end_line": 175,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 156,
          "line": "def _get_provider_oauth_handler(provider_name: str) -> \"BaseOAuthHandler\":"
        },
        {
          "lineno": 157,
          "line": "    if provider_name not in HANDLERS_BY_NAME:"
        },
        {
          "lineno": 158,
          "line": "        raise KeyError(f\"Unknown provider '{provider_name}'\")"
        },
        {
          "lineno": 159,
          "line": ""
        },
        {
          "lineno": 160,
          "line": "    client_id = getattr(settings.secrets, f\"{provider_name}_client_id\")"
        },
        {
          "lineno": 161,
          "line": "    client_secret = getattr(settings.secrets, f\"{provider_name}_client_secret\")"
        },
        {
          "lineno": 162,
          "line": "    if not (client_id and client_secret):"
        },
        {
          "lineno": 163,
          "line": "        raise MissingConfigError("
        },
        {
          "lineno": 164,
          "line": "            f\"Integration with provider '{provider_name}' is not configured\","
        },
        {
          "lineno": 165,
          "line": "        )"
        },
        {
          "lineno": 166,
          "line": ""
        },
        {
          "lineno": 167,
          "line": "    handler_class = HANDLERS_BY_NAME[provider_name]"
        },
        {
          "lineno": 168,
          "line": "    frontend_base_url = ("
        },
        {
          "lineno": 169,
          "line": "        settings.config.frontend_base_url or settings.config.platform_base_url"
        },
        {
          "lineno": 170,
          "line": "    )"
        },
        {
          "lineno": 171,
          "line": "    return handler_class("
        },
        {
          "lineno": 172,
          "line": "        client_id=client_id,"
        },
        {
          "lineno": 173,
          "line": "        client_secret=client_secret,"
        },
        {
          "lineno": 174,
          "line": "        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\","
        },
        {
          "lineno": 175,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def _get_provider_oauth_handler(provider_name: str) -> \"BaseOAuthHandler\":\nif provider_name not in HANDLERS_BY_NAME:\n    raise KeyError(f\"Unknown provider '{provider_name}'\")",
          "successors": [
            {
              "id": 3,
              "label": "client_id = getattr(settings.secrets, f\"{provider_name}_client_id\")\nclient_secret = getattr(settings.secrets, f\"{provider_name}_client_secret\")\nif not (client_id and client_secret):\n    raise MissingConfigError(\n        f\"Integration with provider '{provider_name}' is not configured\",\n    )",
              "successors": [
                {
                  "id": 5,
                  "label": "handler_class = HANDLERS_BY_NAME[provider_name]\nfrontend_base_url = (\n    settings.config.frontend_base_url or settings.config.platform_base_url\n)\nreturn handler_class(\n    client_id=client_id,\n    client_secret=client_secret,\n    redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "IntegrationCredentialsManager",
      "type": "class",
      "start_line": 23,
      "end_line": 154,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 55,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 55,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 56,
              "line": "        redis_conn = redis.get_redis()"
            },
            {
              "lineno": 57,
              "line": "        self._locks = RedisKeyedMutex(redis_conn)"
            },
            {
              "lineno": 58,
              "line": "        self.store = IntegrationCredentialsStore()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        redis_conn = redis.get_redis()\n        self._locks = RedisKeyedMutex(redis_conn)\n        self.store = IntegrationCredentialsStore()",
              "successors": []
            }
          ]
        },
        {
          "name": "create",
          "type": "function",
          "start_line": 60,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 60,
              "line": "    def create(self, user_id: str, credentials: Credentials) -> None:"
            },
            {
              "lineno": 61,
              "line": "        return self.store.add_creds(user_id, credentials)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def create(self, user_id: str, credentials: Credentials) -> None:\n        return self.store.add_creds(user_id, credentials)",
              "successors": []
            }
          ]
        },
        {
          "name": "exists",
          "type": "function",
          "start_line": 63,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 63,
              "line": "    def exists(self, user_id: str, credentials_id: str) -> bool:"
            },
            {
              "lineno": 64,
              "line": "        return self.store.get_creds_by_id(user_id, credentials_id) is not None"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def exists(self, user_id: str, credentials_id: str) -> bool:\n        return self.store.get_creds_by_id(user_id, credentials_id) is not None",
              "successors": []
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "start_line": 66,
          "end_line": 102,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 66,
              "line": "    def get("
            },
            {
              "lineno": 67,
              "line": "        self, user_id: str, credentials_id: str, lock: bool = True"
            },
            {
              "lineno": 68,
              "line": "    ) -> Credentials | None:"
            },
            {
              "lineno": 69,
              "line": "        credentials = self.store.get_creds_by_id(user_id, credentials_id)"
            },
            {
              "lineno": 70,
              "line": "        if not credentials:"
            },
            {
              "lineno": 71,
              "line": "            return None"
            },
            {
              "lineno": 72,
              "line": ""
            },
            {
              "lineno": 73,
              "line": "        # Refresh OAuth credentials if needed"
            },
            {
              "lineno": 74,
              "line": "        if credentials.type == \"oauth2\" and credentials.access_token_expires_at:"
            },
            {
              "lineno": 75,
              "line": "            logger.debug("
            },
            {
              "lineno": 76,
              "line": "                f\"Credentials #{credentials.id} expire at \""
            },
            {
              "lineno": 77,
              "line": "                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \""
            },
            {
              "lineno": 78,
              "line": "                f\"current time is {datetime.now()}\""
            },
            {
              "lineno": 79,
              "line": "            )"
            },
            {
              "lineno": 80,
              "line": ""
            },
            {
              "lineno": 81,
              "line": "            with self._locked(user_id, credentials_id, \"refresh\"):"
            },
            {
              "lineno": 82,
              "line": "                oauth_handler = _get_provider_oauth_handler(credentials.provider)"
            },
            {
              "lineno": 83,
              "line": "                if oauth_handler.needs_refresh(credentials):"
            },
            {
              "lineno": 84,
              "line": "                    logger.debug("
            },
            {
              "lineno": 85,
              "line": "                        f\"Refreshing '{credentials.provider}' \""
            },
            {
              "lineno": 86,
              "line": "                        f\"credentials #{credentials.id}\""
            },
            {
              "lineno": 87,
              "line": "                    )"
            },
            {
              "lineno": 88,
              "line": "                    _lock = None"
            },
            {
              "lineno": 89,
              "line": "                    if lock:"
            },
            {
              "lineno": 90,
              "line": "                        # Wait until the credentials are no longer in use anywhere"
            },
            {
              "lineno": 91,
              "line": "                        _lock = self._acquire_lock(user_id, credentials_id)"
            },
            {
              "lineno": 92,
              "line": ""
            },
            {
              "lineno": 93,
              "line": "                    fresh_credentials = oauth_handler.refresh_tokens(credentials)"
            },
            {
              "lineno": 94,
              "line": "                    self.store.update_creds(user_id, fresh_credentials)"
            },
            {
              "lineno": 95,
              "line": "                    if _lock and _lock.locked():"
            },
            {
              "lineno": 96,
              "line": "                        _lock.release()"
            },
            {
              "lineno": 97,
              "line": ""
            },
            {
              "lineno": 98,
              "line": "                    credentials = fresh_credentials"
            },
            {
              "lineno": 99,
              "line": "        else:"
            },
            {
              "lineno": 100,
              "line": "            logger.debug(f\"Credentials #{credentials.id} never expire\")"
            },
            {
              "lineno": 101,
              "line": ""
            },
            {
              "lineno": 102,
              "line": "        return credentials"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def get(\n        self, user_id: str, credentials_id: str, lock: bool = True\n    ) -> Credentials | None:\n        credentials = self.store.get_creds_by_id(user_id, credentials_id)\nif not credentials:\n    return None",
              "successors": [
                {
                  "id": 3,
                  "label": "if credentials.type == \"oauth2\" and credentials.access_token_expires_at:\n    logger.debug(\n        f\"Credentials #{credentials.id} expire at \"\n        f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n        f\"current time is {datetime.now()}\"\n    )\nwith self._locked(user_id, credentials_id, \"refresh\"):\n    oauth_handler = _get_provider_oauth_handler(credentials.provider)\n    if oauth_handler.needs_refresh(credentials):\n        logger.debug(\n            f\"Refreshing '{credentials.provider}' \"\n            f\"credentials #{credentials.id}\"\n        )\n        _lock = None\n        if lock:\n            # Wait until the credentials are no longer in use anywhere\n            _lock = self._acquire_lock(user_id, credentials_id)\n\n        fresh_credentials = oauth_handler.refresh_tokens(credentials)\n        self.store.update_creds(user_id, fresh_credentials)\n        if _lock and _lock.locked():\n            _lock.release()\n\n        credentials = fresh_credentials",
                  "successors": [
                    {
                      "id": 5,
                      "label": "return credentials",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "else:\n    logger.debug(f\"Credentials #{credentials.id} never expire\")\nreturn credentials",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "acquire",
          "type": "function",
          "start_line": 104,
          "end_line": 121,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 104,
              "line": "    def acquire("
            },
            {
              "lineno": 105,
              "line": "        self, user_id: str, credentials_id: str"
            },
            {
              "lineno": 106,
              "line": "    ) -> tuple[Credentials, RedisLock]:"
            },
            {
              "lineno": 107,
              "line": "        \"\"\""
            },
            {
              "lineno": 108,
              "line": "        ⚠️ WARNING: this locks credentials system-wide and blocks both acquiring"
            },
            {
              "lineno": 109,
              "line": "        and updating them elsewhere until the lock is released."
            },
            {
              "lineno": 110,
              "line": "        See the class docstring for more info."
            },
            {
              "lineno": 111,
              "line": "        \"\"\""
            },
            {
              "lineno": 112,
              "line": "        # Use a low-priority (!time_sensitive) locking queue on top of the general lock"
            },
            {
              "lineno": 113,
              "line": "        # to allow priority access for refreshing/updating the tokens."
            },
            {
              "lineno": 114,
              "line": "        with self._locked(user_id, credentials_id, \"!time_sensitive\"):"
            },
            {
              "lineno": 115,
              "line": "            lock = self._acquire_lock(user_id, credentials_id)"
            },
            {
              "lineno": 116,
              "line": "        credentials = self.get(user_id, credentials_id, lock=False)"
            },
            {
              "lineno": 117,
              "line": "        if not credentials:"
            },
            {
              "lineno": 118,
              "line": "            raise ValueError("
            },
            {
              "lineno": 119,
              "line": "                f\"Credentials #{credentials_id} for user #{user_id} not found\""
            },
            {
              "lineno": 120,
              "line": "            )"
            },
            {
              "lineno": 121,
              "line": "        return credentials, lock"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def acquire(\n        self, user_id: str, credentials_id: str\n    ) -> tuple[Credentials, RedisLock]:\n        \"\"\"\n        \n            WARNING: this locks credentials system-wide and blocks both acquiring\n        and updating them elsewhere until the lock is released.\n        See the class docstring for more info.\n        \"\"\"\n        # Use a low-priority (!time_sensitive) locking queue on top of the general lock\n        # to allow priority access for refreshing/updating the tokens.\n        with self._locked(user_id, credentials_id, \"!time_sensitive\"):\n            lock = self._acquire_lock(user_id, credentials_id)",
              "successors": [
                {
                  "id": 3,
                  "label": "        credentials = self.get(user_id, credentials_id, lock=False)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        if not credentials:\n            raise ValueError(\n                f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "        return credentials, lock",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "start_line": 123,
          "end_line": 125,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 123,
              "line": "    def update(self, user_id: str, updated: Credentials) -> None:"
            },
            {
              "lineno": 124,
              "line": "        with self._locked(user_id, updated.id):"
            },
            {
              "lineno": 125,
              "line": "            self.store.update_creds(user_id, updated)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def update(self, user_id: str, updated: Credentials) -> None:\n        with self._locked(user_id, updated.id):\n            self.store.update_creds(user_id, updated)",
              "successors": []
            }
          ]
        },
        {
          "name": "delete",
          "type": "function",
          "start_line": 127,
          "end_line": 129,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 127,
              "line": "    def delete(self, user_id: str, credentials_id: str) -> None:"
            },
            {
              "lineno": 128,
              "line": "        with self._locked(user_id, credentials_id):"
            },
            {
              "lineno": 129,
              "line": "            self.store.delete_creds_by_id(user_id, credentials_id)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def delete(self, user_id: str, credentials_id: str) -> None:\n        with self._locked(user_id, credentials_id):\n            self.store.delete_creds_by_id(user_id, credentials_id)",
              "successors": []
            }
          ]
        },
        {
          "name": "_acquire_lock",
          "type": "function",
          "start_line": 133,
          "end_line": 139,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 133,
              "line": "    def _acquire_lock(self, user_id: str, credentials_id: str, *args: str) -> RedisLock:"
            },
            {
              "lineno": 134,
              "line": "        key = ("
            },
            {
              "lineno": 135,
              "line": "            f\"user:{user_id}\","
            },
            {
              "lineno": 136,
              "line": "            f\"credentials:{credentials_id}\","
            },
            {
              "lineno": 137,
              "line": "            *args,"
            },
            {
              "lineno": 138,
              "line": "        )"
            },
            {
              "lineno": 139,
              "line": "        return self._locks.acquire(key)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def _acquire_lock(self, user_id: str, credentials_id: str, *args: str) -> RedisLock:\n        key = (\n            f\"user:{user_id}\",\n            f\"credentials:{credentials_id}\",\n            *args,\n        )\n        return self._locks.acquire(key)",
              "successors": []
            }
          ]
        },
        {
          "name": "_locked",
          "type": "function",
          "start_line": 142,
          "end_line": 148,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 142,
              "line": "    def _locked(self, user_id: str, credentials_id: str, *args: str):"
            },
            {
              "lineno": 143,
              "line": "        lock = self._acquire_lock(user_id, credentials_id, *args)"
            },
            {
              "lineno": 144,
              "line": "        try:"
            },
            {
              "lineno": 145,
              "line": "            yield"
            },
            {
              "lineno": 146,
              "line": "        finally:"
            },
            {
              "lineno": 147,
              "line": "            if lock.locked():"
            },
            {
              "lineno": 148,
              "line": "                lock.release()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def _locked(self, user_id: str, credentials_id: str, *args: str):\n        lock = self._acquire_lock(user_id, credentials_id, *args)\n        try:\n            yield",
              "successors": [
                {
                  "id": 3,
                  "label": "        finally:\n            if lock.locked():\n                lock.release()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "release_all_locks",
          "type": "function",
          "start_line": 150,
          "end_line": 153,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 150,
              "line": "    def release_all_locks(self):"
            },
            {
              "lineno": 151,
              "line": "        \"\"\"Call this on process termination to ensure all locks are released\"\"\""
            },
            {
              "lineno": 152,
              "line": "        self._locks.release_all_locks()"
            },
            {
              "lineno": 153,
              "line": "        self.store.locks.release_all_locks()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self._locks.release_all_locks()\n        self.store.locks.release_all_locks()",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 23,
          "line": "class IntegrationCredentialsManager:"
        },
        {
          "lineno": 24,
          "line": "    \"\"\""
        },
        {
          "lineno": 25,
          "line": "    Handles the lifecycle of integration credentials."
        },
        {
          "lineno": 26,
          "line": "    - Automatically refreshes requested credentials if needed."
        },
        {
          "lineno": 27,
          "line": "    - Uses locking mechanisms to ensure system-wide consistency and"
        },
        {
          "lineno": 28,
          "line": "      prevent invalidation of in-use tokens."
        },
        {
          "lineno": 29,
          "line": ""
        },
        {
          "lineno": 30,
          "line": "    ### ⚠️ Gotcha"
        },
        {
          "lineno": 31,
          "line": "    With `acquire(..)`, credentials can only be in use in one place at a time (e.g. one"
        },
        {
          "lineno": 32,
          "line": "    block execution)."
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 34,
          "line": "    ### Locking mechanism"
        },
        {
          "lineno": 35,
          "line": "    - Because *getting* credentials can result in a refresh (= *invalidation* +"
        },
        {
          "lineno": 36,
          "line": "      *replacement*) of the stored credentials, *getting* is an operation that"
        },
        {
          "lineno": 37,
          "line": "      potentially requires read/write access."
        },
        {
          "lineno": 38,
          "line": "    - Checking whether a token has to be refreshed is subject to an additional `refresh`"
        },
        {
          "lineno": 39,
          "line": "      scoped lock to prevent unnecessary sequential refreshes when multiple executions"
        },
        {
          "lineno": 40,
          "line": "      try to access the same credentials simultaneously."
        },
        {
          "lineno": 41,
          "line": "    - We MUST lock credentials while in use to prevent them from being invalidated while"
        },
        {
          "lineno": 42,
          "line": "      they are in use, e.g. because they are being refreshed by a different part"
        },
        {
          "lineno": 43,
          "line": "      of the system."
        },
        {
          "lineno": 44,
          "line": "    - The `!time_sensitive` lock in `acquire(..)` is part of a two-tier locking"
        },
        {
          "lineno": 45,
          "line": "      mechanism in which *updating* gets priority over *getting* credentials."
        },
        {
          "lineno": 46,
          "line": "      This is to prevent a long queue of waiting *get* requests from blocking essential"
        },
        {
          "lineno": 47,
          "line": "      credential refreshes or user-initiated updates."
        },
        {
          "lineno": 48,
          "line": ""
        },
        {
          "lineno": 49,
          "line": "    It is possible to implement a reader/writer locking system where either multiple"
        },
        {
          "lineno": 50,
          "line": "    readers or a single writer can have simultaneous access, but this would add a lot of"
        },
        {
          "lineno": 51,
          "line": "    complexity to the mechanism. I don't expect the current (\"simple\") mechanism to"
        },
        {
          "lineno": 52,
          "line": "    cause so much latency that it's worth implementing."
        },
        {
          "lineno": 53,
          "line": "    \"\"\""
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 59,
          "line": ""
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 65,
          "line": ""
        },
        {
          "lineno": 103,
          "line": ""
        },
        {
          "lineno": 122,
          "line": ""
        },
        {
          "lineno": 126,
          "line": ""
        },
        {
          "lineno": 130,
          "line": ""
        },
        {
          "lineno": 131,
          "line": "    # -- Locking utilities -- #"
        },
        {
          "lineno": 132,
          "line": ""
        },
        {
          "lineno": 140,
          "line": ""
        },
        {
          "lineno": 141,
          "line": "    @contextmanager"
        },
        {
          "lineno": 149,
          "line": ""
        },
        {
          "lineno": 154,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class IntegrationCredentialsManager:\n    \"\"\"\n    Handles the lifecycle of integration credentials.\n    - Automatically refreshes requested credentials if needed.\n    - Uses locking mechanisms to ensure system-wide consistency and\n      prevent invalidation of in-use tokens.\n\n    ### ⚠️ Gotcha\n    With `acquire(..)`, credentials can only be in use in one place at a time (e.g. one\n    block execution).\n\n    ### Locking mechanism\n    - Because *getting* credentials can result in a refresh (= *invalidation* +\n      *replacement*) of the stored credentials, *getting* is an operation that\n      potentially requires read/write access.\n    - Checking whether a token has to be refreshed is subject to an additional `refresh`\n      scoped lock to prevent unnecessary sequential refreshes when multiple executions\n      try to access the same credentials simultaneously.\n    - We MUST lock credentials while in use to prevent them from being invalidated while\n      they are in use, e.g. because they are being refreshed by a different part\n      of the system.\n    - The `!time_sensitive` lock in `acquire(..)` is part of a two-tier locking\n      mechanism in which *updating* gets priority over *getting* credentials.\n      This is to prevent a long queue of waiting *get* requests from blocking essential\n      credential refreshes or user-initiated updates.\n\n    It is possible to implement a reader/writer locking system where either multiple\n    readers or a single writer can have simultaneous access, but this would add a lot of\n    complexity to the mechanism. I don't expect the current (\"simple\") mechanism to\n    cause so much latency that it's worth implementing.\n    \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "    # -- Locking utilities -- #\n    @contextmanager",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "from contextlib import contextmanager"
    },
    {
      "lineno": 3,
      "line": "from datetime import datetime"
    },
    {
      "lineno": 4,
      "line": "from typing import TYPE_CHECKING"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from autogpt_libs.utils.synchronize import RedisKeyedMutex"
    },
    {
      "lineno": 7,
      "line": "from redis.lock import Lock as RedisLock"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "from backend.data import redis"
    },
    {
      "lineno": 10,
      "line": "from backend.data.model import Credentials"
    },
    {
      "lineno": 11,
      "line": "from backend.integrations.credentials_store import IntegrationCredentialsStore"
    },
    {
      "lineno": 12,
      "line": "from backend.integrations.oauth import HANDLERS_BY_NAME"
    },
    {
      "lineno": 13,
      "line": "from backend.util.exceptions import MissingConfigError"
    },
    {
      "lineno": 14,
      "line": "from backend.util.settings import Settings"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": "if TYPE_CHECKING:"
    },
    {
      "lineno": 17,
      "line": "    from backend.integrations.oauth import BaseOAuthHandler"
    },
    {
      "lineno": 18,
      "line": ""
    },
    {
      "lineno": 19,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 20,
      "line": "settings = Settings()"
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 22,
      "line": ""
    },
    {
      "lineno": 155,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nfrom contextlib import contextmanager\nfrom datetime import datetime\nfrom typing import TYPE_CHECKING\n\nfrom autogpt_libs.utils.synchronize import RedisKeyedMutex\nfrom redis.lock import Lock as RedisLock\n\nfrom backend.data import redis\nfrom backend.data.model import Credentials\nfrom backend.integrations.credentials_store import IntegrationCredentialsStore\nfrom backend.integrations.oauth import HANDLERS_BY_NAME\nfrom backend.util.exceptions import MissingConfigError\nfrom backend.util.settings import Settings\nif TYPE_CHECKING:\n    from backend.integrations.oauth import BaseOAuthHandler",
      "successors": [
        {
          "id": 3,
          "label": "logger = logging.getLogger(__name__)\nsettings = Settings()",
          "successors": []
        }
      ]
    }
  ]
}