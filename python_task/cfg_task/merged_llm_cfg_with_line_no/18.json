{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 113,
  "functions": [
    {
      "name": "valid_coloring",
      "type": "function",
      "start_line": 10,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "def valid_coloring("
        },
        {
          "lineno": 11,
          "line": "    neighbours: list[int], colored_vertices: list[int], color: int"
        },
        {
          "lineno": 12,
          "line": ") -> bool:"
        },
        {
          "lineno": 13,
          "line": "    \"\"\""
        },
        {
          "lineno": 14,
          "line": "    For each neighbour check if the coloring constraint is satisfied"
        },
        {
          "lineno": 15,
          "line": "    If any of the neighbours fail the constraint return False"
        },
        {
          "lineno": 16,
          "line": "    If all neighbours validate the constraint return True"
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 18,
          "line": "    >>> neighbours = [0,1,0,1,0]"
        },
        {
          "lineno": 19,
          "line": "    >>> colored_vertices = [0, 2, 1, 2, 0]"
        },
        {
          "lineno": 20,
          "line": ""
        },
        {
          "lineno": 21,
          "line": "    >>> color = 1"
        },
        {
          "lineno": 22,
          "line": "    >>> valid_coloring(neighbours, colored_vertices, color)"
        },
        {
          "lineno": 23,
          "line": "    True"
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 25,
          "line": "    >>> color = 2"
        },
        {
          "lineno": 26,
          "line": "    >>> valid_coloring(neighbours, colored_vertices, color)"
        },
        {
          "lineno": 27,
          "line": "    False"
        },
        {
          "lineno": 28,
          "line": "    \"\"\""
        },
        {
          "lineno": 29,
          "line": "    # Does any neighbour not satisfy the constraints"
        },
        {
          "lineno": 30,
          "line": "    return not any("
        },
        {
          "lineno": 31,
          "line": "        neighbour == 1 and colored_vertices[i] == color"
        },
        {
          "lineno": 32,
          "line": "        for i, neighbour in enumerate(neighbours)"
        },
        {
          "lineno": 33,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def valid_coloring(\n    neighbours: list[int], colored_vertices: list[int], color: int\n) -> bool:\n    \"\"\"\n    For each neighbour check if the coloring constraint is satisfied\n    If any of the neighbours fail the constraint return False\n    If all neighbours validate the constraint return True\n\n    >>> neighbours = [0,1,0,1,0]\n    >>> colored_vertices = [0, 2, 1, 2, 0]\n\n    >>> color = 1\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    True\n\n    >>> color = 2\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    False\n    \"\"\"\n# Does any neighbour not satisfy the constraints\nreturn not any(\n    neighbour == 1 and colored_vertices[i] == color\n    for i, neighbour in enumerate(neighbours)\n)",
          "successors": []
        }
      ]
    },
    {
      "name": "util_color",
      "type": "function",
      "start_line": 36,
      "end_line": 85,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 36,
          "line": "def util_color("
        },
        {
          "lineno": 37,
          "line": "    graph: list[list[int]], max_colors: int, colored_vertices: list[int], index: int"
        },
        {
          "lineno": 38,
          "line": ") -> bool:"
        },
        {
          "lineno": 39,
          "line": "    \"\"\""
        },
        {
          "lineno": 40,
          "line": "    Pseudo-Code"
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 42,
          "line": "    Base Case:"
        },
        {
          "lineno": 43,
          "line": "    1. Check if coloring is complete"
        },
        {
          "lineno": 44,
          "line": "        1.1 If complete return True (meaning that we successfully colored the graph)"
        },
        {
          "lineno": 45,
          "line": ""
        },
        {
          "lineno": 46,
          "line": "    Recursive Step:"
        },
        {
          "lineno": 47,
          "line": "    2. Iterates over each color:"
        },
        {
          "lineno": 48,
          "line": "        Check if the current coloring is valid:"
        },
        {
          "lineno": 49,
          "line": "            2.1. Color given vertex"
        },
        {
          "lineno": 50,
          "line": "            2.2. Do recursive call, check if this coloring leads to a solution"
        },
        {
          "lineno": 51,
          "line": "            2.4. if current coloring leads to a solution return"
        },
        {
          "lineno": 52,
          "line": "            2.5. Uncolor given vertex"
        },
        {
          "lineno": 53,
          "line": ""
        },
        {
          "lineno": 54,
          "line": "    >>> graph = [[0, 1, 0, 0, 0],"
        },
        {
          "lineno": 55,
          "line": "    ...          [1, 0, 1, 0, 1],"
        },
        {
          "lineno": 56,
          "line": "    ...          [0, 1, 0, 1, 0],"
        },
        {
          "lineno": 57,
          "line": "    ...          [0, 1, 1, 0, 0],"
        },
        {
          "lineno": 58,
          "line": "    ...          [0, 1, 0, 0, 0]]"
        },
        {
          "lineno": 59,
          "line": "    >>> max_colors = 3"
        },
        {
          "lineno": 60,
          "line": "    >>> colored_vertices = [0, 1, 0, 0, 0]"
        },
        {
          "lineno": 61,
          "line": "    >>> index = 3"
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 63,
          "line": "    >>> util_color(graph, max_colors, colored_vertices, index)"
        },
        {
          "lineno": 64,
          "line": "    True"
        },
        {
          "lineno": 65,
          "line": ""
        },
        {
          "lineno": 66,
          "line": "    >>> max_colors = 2"
        },
        {
          "lineno": 67,
          "line": "    >>> util_color(graph, max_colors, colored_vertices, index)"
        },
        {
          "lineno": 68,
          "line": "    False"
        },
        {
          "lineno": 69,
          "line": "    \"\"\""
        },
        {
          "lineno": 70,
          "line": ""
        },
        {
          "lineno": 71,
          "line": "    # Base Case"
        },
        {
          "lineno": 72,
          "line": "    if index == len(graph):"
        },
        {
          "lineno": 73,
          "line": "        return True"
        },
        {
          "lineno": 74,
          "line": ""
        },
        {
          "lineno": 75,
          "line": "    # Recursive Step"
        },
        {
          "lineno": 76,
          "line": "    for i in range(max_colors):"
        },
        {
          "lineno": 77,
          "line": "        if valid_coloring(graph[index], colored_vertices, i):"
        },
        {
          "lineno": 78,
          "line": "            # Color current vertex"
        },
        {
          "lineno": 79,
          "line": "            colored_vertices[index] = i"
        },
        {
          "lineno": 80,
          "line": "            # Validate coloring"
        },
        {
          "lineno": 81,
          "line": "            if util_color(graph, max_colors, colored_vertices, index + 1):"
        },
        {
          "lineno": 82,
          "line": "                return True"
        },
        {
          "lineno": 83,
          "line": "            # Backtrack"
        },
        {
          "lineno": 84,
          "line": "            colored_vertices[index] = -1"
        },
        {
          "lineno": 85,
          "line": "    return False"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def util_color(\n graph: list[list[int]], max_colors: int, colored_vertices: list[int], index: int\n) -> bool:\n\"\"\"\n \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "# Base Case\n if index == len(graph):",
              "successors": [
                {
                  "id": 4,
                  "label": "return True",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "# Recursive Step\n for i in range(max_colors):\nif valid_coloring(graph[index], colored_vertices, i):",
                  "successors": [
                    {
                      "id": 7,
                      "label": "colored_vertices[index] = i",
                      "successors": [
                        {
                          "id": 8,
                          "label": "if util_color(graph, max_colors, colored_vertices, index + 1):\nreturn True",
                          "successors": []
                        },
                        {
                          "id": 10,
                          "label": "colored_vertices[index] = -1",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "color",
      "type": "function",
      "start_line": 88,
      "end_line": 113,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 88,
          "line": "def color(graph: list[list[int]], max_colors: int) -> list[int]:"
        },
        {
          "lineno": 89,
          "line": "    \"\"\""
        },
        {
          "lineno": 90,
          "line": "    Wrapper function to call subroutine called util_color"
        },
        {
          "lineno": 91,
          "line": "    which will either return True or False."
        },
        {
          "lineno": 92,
          "line": "    If True is returned colored_vertices list is filled with correct colorings"
        },
        {
          "lineno": 93,
          "line": ""
        },
        {
          "lineno": 94,
          "line": "    >>> graph = [[0, 1, 0, 0, 0],"
        },
        {
          "lineno": 95,
          "line": "    ...          [1, 0, 1, 0, 1],"
        },
        {
          "lineno": 96,
          "line": "    ...          [0, 1, 0, 1, 0],"
        },
        {
          "lineno": 97,
          "line": "    ...          [0, 1, 1, 0, 0],"
        },
        {
          "lineno": 98,
          "line": "    ...          [0, 1, 0, 0, 0]]"
        },
        {
          "lineno": 99,
          "line": ""
        },
        {
          "lineno": 100,
          "line": "    >>> max_colors = 3"
        },
        {
          "lineno": 101,
          "line": "    >>> color(graph, max_colors)"
        },
        {
          "lineno": 102,
          "line": "    [0, 1, 0, 2, 0]"
        },
        {
          "lineno": 103,
          "line": ""
        },
        {
          "lineno": 104,
          "line": "    >>> max_colors = 2"
        },
        {
          "lineno": 105,
          "line": "    >>> color(graph, max_colors)"
        },
        {
          "lineno": 106,
          "line": "    []"
        },
        {
          "lineno": 107,
          "line": "    \"\"\""
        },
        {
          "lineno": 108,
          "line": "    colored_vertices = [-1] * len(graph)"
        },
        {
          "lineno": 109,
          "line": ""
        },
        {
          "lineno": 110,
          "line": "    if util_color(graph, max_colors, colored_vertices, 0):"
        },
        {
          "lineno": 111,
          "line": "        return colored_vertices"
        },
        {
          "lineno": 112,
          "line": ""
        },
        {
          "lineno": 113,
          "line": "    return []"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def color(graph: list[list[int]], max_colors: int) -> list[int]:\n    \"\"\"\n    Wrapper function to call subroutine called util_color\n    which will either return True or False.\n    If True is returned colored_vertices list is filled with correct colorings\n\n    >>> graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n\n    >>> max_colors = 3\n    >>> color(graph, max_colors)\n    [0, 1, 0, 2, 0]\n\n    >>> max_colors = 2\n    >>> color(graph, max_colors)\n    []\n    \"\"\"\n    colored_vertices = [-1] * len(graph)\nif util_color(graph, max_colors, colored_vertices, 0):",
          "successors": [
            {
              "id": 3,
              "label": "return colored_vertices",
              "successors": []
            },
            {
              "id": 4,
              "label": "return []",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "Graph Coloring also called \"m coloring problem\""
    },
    {
      "lineno": 3,
      "line": "consists of coloring a given graph with at most m colors"
    },
    {
      "lineno": 4,
      "line": "such that no adjacent vertices are assigned the same color"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "Wikipedia: https://en.wikipedia.org/wiki/Graph_coloring"
    },
    {
      "lineno": 7,
      "line": "\"\"\""
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 86,
      "line": ""
    },
    {
      "lineno": 87,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "\"\"\"\nGraph Coloring also called \"m coloring problem\"\nconsists of coloring a given graph with at most m colors\nsuch that no adjacent vertices are assigned the same color\n\nWikipedia: https://en.wikipedia.org/wiki/Graph_coloring\n\"\"\"",
      "successors": []
    }
  ]
}