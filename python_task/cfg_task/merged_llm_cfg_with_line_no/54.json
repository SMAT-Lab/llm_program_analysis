{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 277,
  "functions": [
    {
      "name": "error_message",
      "type": "function",
      "start_line": 37,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 37,
          "line": "def error_message(line_number: int, message: str) -> str:"
        },
        {
          "lineno": 38,
          "line": "    line = line_number + 1"
        },
        {
          "lineno": 39,
          "line": "    return f'(L{line:03d}) {message}'"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def error_message(line_number: int, message: str) -> str:\n    line = line_number + 1\n    return f'(L{line:03d}) {message}'",
          "successors": []
        }
      ]
    },
    {
      "name": "get_categories_content",
      "type": "function",
      "start_line": 42,
      "end_line": 67,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 42,
          "line": "def get_categories_content(contents: List[str]) -> Tuple[Categories, CategoriesLineNumber]:"
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 44,
          "line": "    categories = {}"
        },
        {
          "lineno": 45,
          "line": "    category_line_num = {}"
        },
        {
          "lineno": 46,
          "line": ""
        },
        {
          "lineno": 47,
          "line": "    for line_num, line_content in enumerate(contents):"
        },
        {
          "lineno": 48,
          "line": ""
        },
        {
          "lineno": 49,
          "line": "        if line_content.startswith(anchor):"
        },
        {
          "lineno": 50,
          "line": "            category = line_content.split(anchor)[1].strip()"
        },
        {
          "lineno": 51,
          "line": "            categories[category] = []"
        },
        {
          "lineno": 52,
          "line": "            category_line_num[category] = line_num"
        },
        {
          "lineno": 53,
          "line": "            continue"
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 55,
          "line": "        if not line_content.startswith('|') or line_content.startswith('|---'):"
        },
        {
          "lineno": 56,
          "line": "            continue"
        },
        {
          "lineno": 57,
          "line": ""
        },
        {
          "lineno": 58,
          "line": "        raw_title = ["
        },
        {
          "lineno": 59,
          "line": "            raw_content.strip() for raw_content in line_content.split('|')[1:-1]"
        },
        {
          "lineno": 60,
          "line": "        ][0]"
        },
        {
          "lineno": 61,
          "line": ""
        },
        {
          "lineno": 62,
          "line": "        title_match = link_re.match(raw_title)"
        },
        {
          "lineno": 63,
          "line": "        if title_match:"
        },
        {
          "lineno": 64,
          "line": "                title = title_match.group(1).upper()"
        },
        {
          "lineno": 65,
          "line": "                categories[category].append(title)"
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 67,
          "line": "    return (categories, category_line_num)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_categories_content(contents: List[str]) -> Tuple[Categories, CategoriesLineNumber]:\n\n    categories = {}\n    category_line_num = {}\n",
          "successors": [
            {
              "id": 2,
              "label": "for line_num, line_content in enumerate(contents):\n\n        if line_content.startswith(anchor):\n            category = line_content.split(anchor)[1].strip()\n            categories[category] = []\n            category_line_num[category] = line_num\n            continue\n\n        if not line_content.startswith('|') or line_content.startswith('|---'):\n            continue\n\n        raw_title = [\n            raw_content.strip() for raw_content in line_content.split('|')[1:-1]\n        ][0]\n\n        title_match = link_re.match(raw_title)\n        if title_match:",
              "successors": [
                {
                  "id": 3,
                  "label": "title = title_match.group(1).upper()\ncategories[category].append(title)",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "return (categories, category_line_num)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "check_alphabetical_order",
      "type": "function",
      "start_line": 70,
      "end_line": 84,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 70,
          "line": "def check_alphabetical_order(lines: List[str]) -> List[str]:"
        },
        {
          "lineno": 71,
          "line": ""
        },
        {
          "lineno": 72,
          "line": "    err_msgs = []"
        },
        {
          "lineno": 73,
          "line": ""
        },
        {
          "lineno": 74,
          "line": "    categories, category_line_num = get_categories_content(contents=lines)"
        },
        {
          "lineno": 75,
          "line": ""
        },
        {
          "lineno": 76,
          "line": "    for category, api_list in categories.items():"
        },
        {
          "lineno": 77,
          "line": "        if sorted(api_list) != api_list:"
        },
        {
          "lineno": 78,
          "line": "            err_msg = error_message("
        },
        {
          "lineno": 79,
          "line": "                category_line_num[category], "
        },
        {
          "lineno": 80,
          "line": "                f'{category} category is not alphabetical order'"
        },
        {
          "lineno": 81,
          "line": "            )"
        },
        {
          "lineno": 82,
          "line": "            err_msgs.append(err_msg)"
        },
        {
          "lineno": 83,
          "line": "    "
        },
        {
          "lineno": 84,
          "line": "    return err_msgs"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def check_alphabetical_order(lines: List[str]) -> List[str]:\n\n    err_msgs = []\n\n    categories, category_line_num = get_categories_content(contents=lines)",
          "successors": [
            {
              "id": 2,
              "label": "for category, api_list in categories.items():",
              "successors": [
                {
                  "id": 3,
                  "label": "if sorted(api_list) != api_list:\n    err_msg = error_message(\n        category_line_num[category], \n        f'{category} category is not alphabetical order'\n    )\n    err_msgs.append(err_msg)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "return err_msgs",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "check_title",
      "type": "function",
      "start_line": 87,
      "end_line": 104,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 87,
          "line": "def check_title(line_num: int, raw_title: str) -> List[str]:"
        },
        {
          "lineno": 88,
          "line": ""
        },
        {
          "lineno": 89,
          "line": "    err_msgs = []"
        },
        {
          "lineno": 90,
          "line": ""
        },
        {
          "lineno": 91,
          "line": "    title_match = link_re.match(raw_title)"
        },
        {
          "lineno": 92,
          "line": ""
        },
        {
          "lineno": 93,
          "line": "    # url should be wrapped in \"[TITLE](LINK)\" Markdown syntax"
        },
        {
          "lineno": 94,
          "line": "    if not title_match:"
        },
        {
          "lineno": 95,
          "line": "        err_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')"
        },
        {
          "lineno": 96,
          "line": "        err_msgs.append(err_msg)"
        },
        {
          "lineno": 97,
          "line": "    else:"
        },
        {
          "lineno": 98,
          "line": "        # do not allow \"... API\" in the entry title"
        },
        {
          "lineno": 99,
          "line": "        title = title_match.group(1)"
        },
        {
          "lineno": 100,
          "line": "        if title.upper().endswith(' API'):"
        },
        {
          "lineno": 101,
          "line": "            err_msg = error_message(line_num, 'Title should not end with \"... API\". Every entry is an API here!')"
        },
        {
          "lineno": 102,
          "line": "            err_msgs.append(err_msg)"
        },
        {
          "lineno": 103,
          "line": ""
        },
        {
          "lineno": 104,
          "line": "    return err_msgs"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def check_title(line_num: int, raw_title: str) -> List[str]:\n    err_msgs = []\n    title_match = link_re.match(raw_title)",
          "successors": [
            {
              "id": 2,
              "label": "if not title_match:\n        err_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')\n        err_msgs.append(err_msg)\nreturn err_msgs",
              "successors": []
            },
            {
              "id": 4,
              "label": "else:\n        title = title_match.group(1)\n        if title.upper().endswith(' API'):\n            err_msg = error_message(line_num, 'Title should not end with \"... API\". Every entry is an API here!')\n            err_msgs.append(err_msg)\nreturn err_msgs",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "check_description",
      "type": "function",
      "start_line": 107,
      "end_line": 126,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 107,
          "line": "def check_description(line_num: int, description: str) -> List[str]:"
        },
        {
          "lineno": 108,
          "line": ""
        },
        {
          "lineno": 109,
          "line": "    err_msgs = []"
        },
        {
          "lineno": 110,
          "line": ""
        },
        {
          "lineno": 111,
          "line": "    first_char = description[0]"
        },
        {
          "lineno": 112,
          "line": "    if first_char.upper() != first_char:"
        },
        {
          "lineno": 113,
          "line": "        err_msg = error_message(line_num, 'first character of description is not capitalized')"
        },
        {
          "lineno": 114,
          "line": "        err_msgs.append(err_msg)"
        },
        {
          "lineno": 115,
          "line": ""
        },
        {
          "lineno": 116,
          "line": "    last_char = description[-1]"
        },
        {
          "lineno": 117,
          "line": "    if last_char in punctuation:"
        },
        {
          "lineno": 118,
          "line": "        err_msg = error_message(line_num, f'description should not end with {last_char}')"
        },
        {
          "lineno": 119,
          "line": "        err_msgs.append(err_msg)"
        },
        {
          "lineno": 120,
          "line": ""
        },
        {
          "lineno": 121,
          "line": "    desc_length = len(description)"
        },
        {
          "lineno": 122,
          "line": "    if desc_length > max_description_length:"
        },
        {
          "lineno": 123,
          "line": "        err_msg = error_message(line_num, f'description should not exceed {max_description_length} characters (currently {desc_length})')"
        },
        {
          "lineno": 124,
          "line": "        err_msgs.append(err_msg)"
        },
        {
          "lineno": 125,
          "line": "    "
        },
        {
          "lineno": 126,
          "line": "    return err_msgs"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def check_description(line_num: int, description: str) -> List[str]:\n\n    err_msgs = []\nfirst_char = description[0]\n    if first_char.upper() != first_char:",
          "successors": [
            {
              "id": 3,
              "label": "err_msg = error_message(line_num, 'first character of description is not capitalized')\n        err_msgs.append(err_msg)",
              "successors": []
            },
            {
              "id": 4,
              "label": "last_char = description[-1]\n    if last_char in punctuation:",
              "successors": [
                {
                  "id": 5,
                  "label": "err_msg = error_message(line_num, f'description should not end with {last_char}')\n        err_msgs.append(err_msg)",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "desc_length = len(description)\n    if desc_length > max_description_length:",
                  "successors": [
                    {
                      "id": 7,
                      "label": "err_msg = error_message(line_num, f'description should not exceed {max_description_length} characters (currently {desc_length})')\n        err_msgs.append(err_msg)",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "return err_msgs",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "check_auth",
      "type": "function",
      "start_line": 129,
      "end_line": 142,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 129,
          "line": "def check_auth(line_num: int, auth: str) -> List[str]:"
        },
        {
          "lineno": 130,
          "line": ""
        },
        {
          "lineno": 131,
          "line": "    err_msgs = []"
        },
        {
          "lineno": 132,
          "line": ""
        },
        {
          "lineno": 133,
          "line": "    backtick = '`'"
        },
        {
          "lineno": 134,
          "line": "    if auth != 'No' and (not auth.startswith(backtick) or not auth.endswith(backtick)):"
        },
        {
          "lineno": 135,
          "line": "        err_msg = error_message(line_num, 'auth value is not enclosed with `backticks`')"
        },
        {
          "lineno": 136,
          "line": "        err_msgs.append(err_msg)"
        },
        {
          "lineno": 137,
          "line": ""
        },
        {
          "lineno": 138,
          "line": "    if auth.replace(backtick, '') not in auth_keys:"
        },
        {
          "lineno": 139,
          "line": "        err_msg = error_message(line_num, f'{auth} is not a valid Auth option')"
        },
        {
          "lineno": 140,
          "line": "        err_msgs.append(err_msg)"
        },
        {
          "lineno": 141,
          "line": "    "
        },
        {
          "lineno": 142,
          "line": "    return err_msgs"
        }
      ],
      "blocks": []
    },
    {
      "name": "check_https",
      "type": "function",
      "start_line": 145,
      "end_line": 153,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 145,
          "line": "def check_https(line_num: int, https: str) -> List[str]:"
        },
        {
          "lineno": 146,
          "line": ""
        },
        {
          "lineno": 147,
          "line": "    err_msgs = []"
        },
        {
          "lineno": 148,
          "line": ""
        },
        {
          "lineno": 149,
          "line": "    if https not in https_keys:"
        },
        {
          "lineno": 150,
          "line": "        err_msg = error_message(line_num, f'{https} is not a valid HTTPS option')"
        },
        {
          "lineno": 151,
          "line": "        err_msgs.append(err_msg)"
        },
        {
          "lineno": 152,
          "line": ""
        },
        {
          "lineno": 153,
          "line": "    return err_msgs"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def check_https(line_num: int, https: str) -> List[str]:\n\n    err_msgs = []",
          "successors": [
            {
              "id": 2,
              "label": "if https not in https_keys:\n        err_msg = error_message(line_num, f'{https} is not a valid HTTPS option')\n        err_msgs.append(err_msg)",
              "successors": []
            },
            {
              "id": 3,
              "label": "return err_msgs",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "check_cors",
      "type": "function",
      "start_line": 156,
      "end_line": 164,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 156,
          "line": "def check_cors(line_num: int, cors: str) -> List[str]:"
        },
        {
          "lineno": 157,
          "line": ""
        },
        {
          "lineno": 158,
          "line": "    err_msgs = []"
        },
        {
          "lineno": 159,
          "line": ""
        },
        {
          "lineno": 160,
          "line": "    if cors not in cors_keys:"
        },
        {
          "lineno": 161,
          "line": "        err_msg = error_message(line_num, f'{cors} is not a valid CORS option')"
        },
        {
          "lineno": 162,
          "line": "        err_msgs.append(err_msg)"
        },
        {
          "lineno": 163,
          "line": "    "
        },
        {
          "lineno": 164,
          "line": "    return err_msgs"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def check_cors(line_num: int, cors: str) -> List[str]:\n    err_msgs = []\nif cors not in cors_keys:\n        err_msg = error_message(line_num, f'{cors} is not a valid CORS option')\n        err_msgs.append(err_msg)",
          "successors": [
            {
              "id": 3,
              "label": "return err_msgs",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "check_entry",
      "type": "function",
      "start_line": 167,
      "end_line": 189,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 167,
          "line": "def check_entry(line_num: int, segments: List[str]) -> List[str]:"
        },
        {
          "lineno": 168,
          "line": ""
        },
        {
          "lineno": 169,
          "line": "    raw_title = segments[index_title]"
        },
        {
          "lineno": 170,
          "line": "    description = segments[index_desc]"
        },
        {
          "lineno": 171,
          "line": "    auth = segments[index_auth]"
        },
        {
          "lineno": 172,
          "line": "    https = segments[index_https]"
        },
        {
          "lineno": 173,
          "line": "    cors = segments[index_cors]"
        },
        {
          "lineno": 174,
          "line": ""
        },
        {
          "lineno": 175,
          "line": "    title_err_msgs = check_title(line_num, raw_title)"
        },
        {
          "lineno": 176,
          "line": "    desc_err_msgs = check_description(line_num, description)"
        },
        {
          "lineno": 177,
          "line": "    auth_err_msgs = check_auth(line_num, auth)"
        },
        {
          "lineno": 178,
          "line": "    https_err_msgs = check_https(line_num, https)"
        },
        {
          "lineno": 179,
          "line": "    cors_err_msgs = check_cors(line_num, cors)"
        },
        {
          "lineno": 180,
          "line": ""
        },
        {
          "lineno": 181,
          "line": "    err_msgs = ["
        },
        {
          "lineno": 182,
          "line": "        *title_err_msgs,"
        },
        {
          "lineno": 183,
          "line": "        *desc_err_msgs,"
        },
        {
          "lineno": 184,
          "line": "        *auth_err_msgs,"
        },
        {
          "lineno": 185,
          "line": "        *https_err_msgs,"
        },
        {
          "lineno": 186,
          "line": "        *cors_err_msgs"
        },
        {
          "lineno": 187,
          "line": "    ]"
        },
        {
          "lineno": 188,
          "line": ""
        },
        {
          "lineno": 189,
          "line": "    return err_msgs"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def check_entry(line_num: int, segments: List[str]) -> List[str]:\n\n    raw_title = segments[index_title]\n    description = segments[index_desc]\n    auth = segments[index_auth]\n    https = segments[index_https]\n    cors = segments[index_cors]\n\n    title_err_msgs = check_title(line_num, raw_title)\n    desc_err_msgs = check_description(line_num, description)\n    auth_err_msgs = check_auth(line_num, auth)\n    https_err_msgs = check_https(line_num, https)\n    cors_err_msgs = check_cors(line_num, cors)\n\n    err_msgs = [\n        *title_err_msgs,\n        *desc_err_msgs,\n        *auth_err_msgs,\n        *https_err_msgs,\n        *cors_err_msgs\n    ]\nreturn err_msgs",
          "successors": []
        }
      ]
    },
    {
      "name": "check_file_format",
      "type": "function",
      "start_line": 192,
      "end_line": 251,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 192,
          "line": "def check_file_format(lines: List[str]) -> List[str]:"
        },
        {
          "lineno": 193,
          "line": ""
        },
        {
          "lineno": 194,
          "line": "    err_msgs = []"
        },
        {
          "lineno": 195,
          "line": "    category_title_in_index = []"
        },
        {
          "lineno": 196,
          "line": ""
        },
        {
          "lineno": 197,
          "line": "    alphabetical_err_msgs = check_alphabetical_order(lines)"
        },
        {
          "lineno": 198,
          "line": "    err_msgs.extend(alphabetical_err_msgs)"
        },
        {
          "lineno": 199,
          "line": ""
        },
        {
          "lineno": 200,
          "line": "    num_in_category = min_entries_per_category + 1"
        },
        {
          "lineno": 201,
          "line": "    category = ''"
        },
        {
          "lineno": 202,
          "line": "    category_line = 0"
        },
        {
          "lineno": 203,
          "line": ""
        },
        {
          "lineno": 204,
          "line": "    for line_num, line_content in enumerate(lines):"
        },
        {
          "lineno": 205,
          "line": ""
        },
        {
          "lineno": 206,
          "line": "        category_title_match = category_title_in_index_re.match(line_content)"
        },
        {
          "lineno": 207,
          "line": "        if category_title_match:"
        },
        {
          "lineno": 208,
          "line": "            category_title_in_index.append(category_title_match.group(1))"
        },
        {
          "lineno": 209,
          "line": ""
        },
        {
          "lineno": 210,
          "line": "        # check each category for the minimum number of entries"
        },
        {
          "lineno": 211,
          "line": "        if line_content.startswith(anchor):"
        },
        {
          "lineno": 212,
          "line": "            category_match = anchor_re.match(line_content)"
        },
        {
          "lineno": 213,
          "line": "            if category_match:"
        },
        {
          "lineno": 214,
          "line": "                if category_match.group(1) not in category_title_in_index:"
        },
        {
          "lineno": 215,
          "line": "                    err_msg = error_message(line_num, f'category header ({category_match.group(1)}) not added to Index section')"
        },
        {
          "lineno": 216,
          "line": "                    err_msgs.append(err_msg)"
        },
        {
          "lineno": 217,
          "line": "            else:"
        },
        {
          "lineno": 218,
          "line": "                err_msg = error_message(line_num, 'category header is not formatted correctly')"
        },
        {
          "lineno": 219,
          "line": "                err_msgs.append(err_msg)"
        },
        {
          "lineno": 220,
          "line": ""
        },
        {
          "lineno": 221,
          "line": "            if num_in_category < min_entries_per_category:"
        },
        {
          "lineno": 222,
          "line": "                err_msg = error_message(category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')"
        },
        {
          "lineno": 223,
          "line": "                err_msgs.append(err_msg)"
        },
        {
          "lineno": 224,
          "line": ""
        },
        {
          "lineno": 225,
          "line": "            category = line_content.split(' ')[1]"
        },
        {
          "lineno": 226,
          "line": "            category_line = line_num"
        },
        {
          "lineno": 227,
          "line": "            num_in_category = 0"
        },
        {
          "lineno": 228,
          "line": "            continue"
        },
        {
          "lineno": 229,
          "line": ""
        },
        {
          "lineno": 230,
          "line": "        # skips lines that we do not care about"
        },
        {
          "lineno": 231,
          "line": "        if not line_content.startswith('|') or line_content.startswith('|---'):"
        },
        {
          "lineno": 232,
          "line": "            continue"
        },
        {
          "lineno": 233,
          "line": ""
        },
        {
          "lineno": 234,
          "line": "        num_in_category += 1"
        },
        {
          "lineno": 235,
          "line": "        segments = line_content.split('|')[1:-1]"
        },
        {
          "lineno": 236,
          "line": "        if len(segments) < num_segments:"
        },
        {
          "lineno": 237,
          "line": "            err_msg = error_message(line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})')"
        },
        {
          "lineno": 238,
          "line": "            err_msgs.append(err_msg)"
        },
        {
          "lineno": 239,
          "line": "            continue"
        },
        {
          "lineno": 240,
          "line": "    "
        },
        {
          "lineno": 241,
          "line": "        for segment in segments:"
        },
        {
          "lineno": 242,
          "line": "            # every line segment should start and end with exactly 1 space"
        },
        {
          "lineno": 243,
          "line": "            if len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1:"
        },
        {
          "lineno": 244,
          "line": "                err_msg = error_message(line_num, 'each segment must start and end with exactly 1 space')"
        },
        {
          "lineno": 245,
          "line": "                err_msgs.append(err_msg)"
        },
        {
          "lineno": 246,
          "line": "        "
        },
        {
          "lineno": 247,
          "line": "        segments = [segment.strip() for segment in segments]"
        },
        {
          "lineno": 248,
          "line": "        entry_err_msgs = check_entry(line_num, segments)"
        },
        {
          "lineno": 249,
          "line": "        err_msgs.extend(entry_err_msgs)"
        },
        {
          "lineno": 250,
          "line": "    "
        },
        {
          "lineno": 251,
          "line": "    return err_msgs"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def check_file_format(lines: List[str]) -> List[str]:\n\n    err_msgs = []\n    category_title_in_index = []\n\n    alphabetical_err_msgs = check_alphabetical_order(lines)\n    err_msgs.extend(alphabetical_err_msgs)\n\n    num_in_category = min_entries_per_category + 1\n    category = ''\n    category_line = 0\n",
          "successors": [
            {
              "id": 2,
              "label": "for line_num, line_content in enumerate(lines):",
              "successors": [
                {
                  "id": 3,
                  "label": "category_title_match = category_title_in_index_re.match(line_content)\nif category_title_match:\n    category_title_in_index.append(category_title_match.group(1))\n\nif line_content.startswith(anchor):\n    category_match = anchor_re.match(line_content)\n    if category_match:\n        if category_match.group(1) not in category_title_in_index:\n            err_msg = error_message(line_num, f'category header ({category_match.group(1)}) not added to Index section')\n            err_msgs.append(err_msg)\n    else:\n        err_msg = error_message(line_num, 'category header is not formatted correctly')\n        err_msgs.append(err_msg)\n",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if num_in_category < min_entries_per_category:\n    err_msg = error_message(category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\n    err_msgs.append(err_msg)\n",
                      "successors": [
                        {
                          "id": 6,
                          "label": "category = line_content.split(' ')[1]\ncategory_line = line_num\nnum_in_category = 0\ncontinue\n",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "label": "if not line_content.startswith('|') or line_content.startswith('|---'):\n    continue\n\nnum_in_category += 1\nsegments = line_content.split('|')[1:-1]\nif len(segments) < num_segments:\n    err_msg = error_message(line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\n    err_msgs.append(err_msg)\n    continue\n",
                          "successors": [
                            {
                              "id": 9,
                              "label": "for segment in segments:\n    # every line segment should start and end with exactly 1 space\n    if len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1:\n        err_msg = error_message(line_num, 'each segment must start and end with exactly 1 space')\n        err_msgs.append(err_msg)\n\nsegments = [segment.strip() for segment in segments]\nentry_err_msgs = check_entry(line_num, segments)\nerr_msgs.extend(entry_err_msgs)\n",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 10,
              "label": "return err_msgs",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 254,
      "end_line": 264,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 254,
          "line": "def main(filename: str) -> None:"
        },
        {
          "lineno": 255,
          "line": ""
        },
        {
          "lineno": 256,
          "line": "    with open(filename, mode='r', encoding='utf-8') as file:"
        },
        {
          "lineno": 257,
          "line": "        lines = list(line.rstrip() for line in file)"
        },
        {
          "lineno": 258,
          "line": ""
        },
        {
          "lineno": 259,
          "line": "    file_format_err_msgs = check_file_format(lines)"
        },
        {
          "lineno": 260,
          "line": ""
        },
        {
          "lineno": 261,
          "line": "    if file_format_err_msgs:"
        },
        {
          "lineno": 262,
          "line": "        for err_msg in file_format_err_msgs:"
        },
        {
          "lineno": 263,
          "line": "            print(err_msg)"
        },
        {
          "lineno": 264,
          "line": "        sys.exit(1)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def main(filename: str) -> None:\n\n    with open(filename, mode='r', encoding='utf-8') as file:\n        lines = list(line.rstrip() for line in file)\n",
          "successors": [
            {
              "id": 3,
              "label": "    file_format_err_msgs = check_file_format(lines)\n\n    if file_format_err_msgs:\n",
              "successors": [
                {
                  "id": 5,
                  "label": "        for err_msg in file_format_err_msgs:\n            print(err_msg)\n        sys.exit(1)\n",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# -*- coding: utf-8 -*-"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import re"
    },
    {
      "lineno": 4,
      "line": "import sys"
    },
    {
      "lineno": 5,
      "line": "from string import punctuation"
    },
    {
      "lineno": 6,
      "line": "from typing import List, Tuple, Dict"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "# Temporary replacement"
    },
    {
      "lineno": 9,
      "line": "# The descriptions that contain () at the end must adapt to the new policy later"
    },
    {
      "lineno": 10,
      "line": "punctuation = punctuation.replace('()', '')"
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": "anchor = '###'"
    },
    {
      "lineno": 13,
      "line": "auth_keys = ['apiKey', 'OAuth', 'X-Mashape-Key', 'User-Agent', 'No']"
    },
    {
      "lineno": 14,
      "line": "https_keys = ['Yes', 'No']"
    },
    {
      "lineno": 15,
      "line": "cors_keys = ['Yes', 'No', 'Unknown']"
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": "index_title = 0"
    },
    {
      "lineno": 18,
      "line": "index_desc = 1"
    },
    {
      "lineno": 19,
      "line": "index_auth = 2"
    },
    {
      "lineno": 20,
      "line": "index_https = 3"
    },
    {
      "lineno": 21,
      "line": "index_cors = 4"
    },
    {
      "lineno": 22,
      "line": ""
    },
    {
      "lineno": 23,
      "line": "num_segments = 5"
    },
    {
      "lineno": 24,
      "line": "min_entries_per_category = 3"
    },
    {
      "lineno": 25,
      "line": "max_description_length = 100"
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 27,
      "line": "anchor_re = re.compile(anchor + '\\s(.+)')"
    },
    {
      "lineno": 28,
      "line": "category_title_in_index_re = re.compile('\\*\\s\\[(.*)\\]')"
    },
    {
      "lineno": 29,
      "line": "link_re = re.compile('\\[(.+)\\]\\((http.*)\\)')"
    },
    {
      "lineno": 30,
      "line": ""
    },
    {
      "lineno": 31,
      "line": "# Type aliases"
    },
    {
      "lineno": 32,
      "line": "APIList = List[str]"
    },
    {
      "lineno": 33,
      "line": "Categories = Dict[str, APIList]"
    },
    {
      "lineno": 34,
      "line": "CategoriesLineNumber = Dict[str, int]"
    },
    {
      "lineno": 35,
      "line": ""
    },
    {
      "lineno": 36,
      "line": ""
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 68,
      "line": ""
    },
    {
      "lineno": 69,
      "line": ""
    },
    {
      "lineno": 85,
      "line": ""
    },
    {
      "lineno": 86,
      "line": ""
    },
    {
      "lineno": 105,
      "line": ""
    },
    {
      "lineno": 106,
      "line": ""
    },
    {
      "lineno": 127,
      "line": ""
    },
    {
      "lineno": 128,
      "line": ""
    },
    {
      "lineno": 143,
      "line": ""
    },
    {
      "lineno": 144,
      "line": ""
    },
    {
      "lineno": 154,
      "line": ""
    },
    {
      "lineno": 155,
      "line": ""
    },
    {
      "lineno": 165,
      "line": ""
    },
    {
      "lineno": 166,
      "line": ""
    },
    {
      "lineno": 190,
      "line": ""
    },
    {
      "lineno": 191,
      "line": ""
    },
    {
      "lineno": 252,
      "line": ""
    },
    {
      "lineno": 253,
      "line": ""
    },
    {
      "lineno": 265,
      "line": ""
    },
    {
      "lineno": 266,
      "line": ""
    },
    {
      "lineno": 267,
      "line": "if __name__ == '__main__':"
    },
    {
      "lineno": 268,
      "line": ""
    },
    {
      "lineno": 269,
      "line": "    num_args = len(sys.argv)"
    },
    {
      "lineno": 270,
      "line": ""
    },
    {
      "lineno": 271,
      "line": "    if num_args < 2:"
    },
    {
      "lineno": 272,
      "line": "        print('No .md file passed (file should contain Markdown table syntax)')"
    },
    {
      "lineno": 273,
      "line": "        sys.exit(1)"
    },
    {
      "lineno": 274,
      "line": ""
    },
    {
      "lineno": 275,
      "line": "    filename = sys.argv[1]"
    },
    {
      "lineno": 276,
      "line": ""
    },
    {
      "lineno": 277,
      "line": "    main(filename)"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "# -*- coding: utf-8 -*-\n\nimport re\nimport sys\nfrom string import punctuation\nfrom typing import List, Tuple, Dict\n\n# Temporary replacement\n# The descriptions that contain () at the end must adapt to the new policy later\npunctuation = punctuation.replace('()', '')\n\nanchor = '###'\nauth_keys = ['apiKey', 'OAuth', 'X-Mashape-Key', 'User-Agent', 'No']\nhttps_keys = ['Yes', 'No']\ncors_keys = ['Yes', 'No', 'Unknown']\n\nindex_title = 0\nindex_desc = 1\nindex_auth = 2\nindex_https = 3\nindex_cors = 4\n\nnum_segments = 5\nmin_entries_per_category = 3\nmax_description_length = 100\n\nanchor_re = re.compile(anchor + '\\s(.+)')",
      "successors": [
        {
          "id": 3,
          "label": "category_title_in_index_re = re.compile('\\*\\s\\[(.*)\\]')\nlink_re = re.compile('\\[(.+)\\]\\((http.*)\\)')\n\n# Type aliases\nAPIList = List[str]\nCategories = Dict[str, APIList]\nCategoriesLineNumber = Dict[str, int]\nif __name__ == '__main__':\n\n    num_args = len(sys.argv)\n\n    if num_args < 2:\n        print('No .md file passed (file should contain Markdown table syntax)')\n        sys.exit(1)\n\n    filename = sys.argv[1]\n\n    main(filename)",
          "successors": []
        }
      ]
    }
  ]
}