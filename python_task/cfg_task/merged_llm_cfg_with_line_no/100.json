{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 67,
  "functions": [],
  "classes": [
    {
      "name": "JinaChunkingBlock",
      "type": "class",
      "start_line": 11,
      "end_line": 67,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 29,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 29,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 30,
              "line": "        super().__init__("
            },
            {
              "lineno": 31,
              "line": "            id=\"806fb15e-830f-4796-8692-557d300ff43c\","
            },
            {
              "lineno": 32,
              "line": "            description=\"Chunks texts using Jina AI's segmentation service\","
            },
            {
              "lineno": 33,
              "line": "            categories={BlockCategory.AI, BlockCategory.TEXT},"
            },
            {
              "lineno": 34,
              "line": "            input_schema=JinaChunkingBlock.Input,"
            },
            {
              "lineno": 35,
              "line": "            output_schema=JinaChunkingBlock.Output,"
            },
            {
              "lineno": 36,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"806fb15e-830f-4796-8692-557d300ff43c\",\n            description=\"Chunks texts using Jina AI's segmentation service\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=JinaChunkingBlock.Input,\n            output_schema=JinaChunkingBlock.Output,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 38,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 38,
              "line": "    def run("
            },
            {
              "lineno": 39,
              "line": "        self, input_data: Input, *, credentials: JinaCredentials, **kwargs"
            },
            {
              "lineno": 40,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 41,
              "line": "        url = \"https://segment.jina.ai/\""
            },
            {
              "lineno": 42,
              "line": "        headers = {"
            },
            {
              "lineno": 43,
              "line": "            \"Content-Type\": \"application/json\","
            },
            {
              "lineno": 44,
              "line": "            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\","
            },
            {
              "lineno": 45,
              "line": "        }"
            },
            {
              "lineno": 46,
              "line": ""
            },
            {
              "lineno": 47,
              "line": "        all_chunks = []"
            },
            {
              "lineno": 48,
              "line": "        all_tokens = []"
            },
            {
              "lineno": 49,
              "line": ""
            },
            {
              "lineno": 50,
              "line": "        for text in input_data.texts:"
            },
            {
              "lineno": 51,
              "line": "            data = {"
            },
            {
              "lineno": 52,
              "line": "                \"content\": text,"
            },
            {
              "lineno": 53,
              "line": "                \"return_tokens\": str(input_data.return_tokens).lower(),"
            },
            {
              "lineno": 54,
              "line": "                \"return_chunks\": \"true\","
            },
            {
              "lineno": 55,
              "line": "                \"max_chunk_length\": str(input_data.max_chunk_length),"
            },
            {
              "lineno": 56,
              "line": "            }"
            },
            {
              "lineno": 57,
              "line": ""
            },
            {
              "lineno": 58,
              "line": "            response = requests.post(url, headers=headers, json=data)"
            },
            {
              "lineno": 59,
              "line": "            result = response.json()"
            },
            {
              "lineno": 60,
              "line": ""
            },
            {
              "lineno": 61,
              "line": "            all_chunks.extend(result.get(\"chunks\", []))"
            },
            {
              "lineno": 62,
              "line": "            if input_data.return_tokens:"
            },
            {
              "lineno": 63,
              "line": "                all_tokens.extend(result.get(\"tokens\", []))"
            },
            {
              "lineno": 64,
              "line": ""
            },
            {
              "lineno": 65,
              "line": "        yield \"chunks\", all_chunks"
            },
            {
              "lineno": 66,
              "line": "        if input_data.return_tokens:"
            },
            {
              "lineno": 67,
              "line": "            yield \"tokens\", all_tokens"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://segment.jina.ai/\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n\n        all_chunks = []\n        all_tokens = []",
              "successors": [
                {
                  "id": 3,
                  "label": "        for text in input_data.texts:\n            data = {\n                \"content\": text,\n                \"return_tokens\": str(input_data.return_tokens).lower(),\n                \"return_chunks\": \"true\",\n                \"max_chunk_length\": str(input_data.max_chunk_length),\n            }\n\n            response = requests.post(url, headers=headers, json=data)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "            result = response.json()\n\n            all_chunks.extend(result.get(\"chunks\", []))\n            if input_data.return_tokens:\n                all_tokens.extend(result.get(\"tokens\", []))",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "        yield \"chunks\", all_chunks\n        if input_data.return_tokens:\n            yield \"tokens\", all_tokens",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 12,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 12,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 13,
              "line": "        texts: list = SchemaField(description=\"List of texts to chunk\")"
            },
            {
              "lineno": 14,
              "line": ""
            },
            {
              "lineno": 15,
              "line": "        credentials: JinaCredentialsInput = JinaCredentialsField()"
            },
            {
              "lineno": 16,
              "line": "        max_chunk_length: int = SchemaField("
            },
            {
              "lineno": 17,
              "line": "            description=\"Maximum length of each chunk\", default=1000"
            },
            {
              "lineno": 18,
              "line": "        )"
            },
            {
              "lineno": 19,
              "line": "        return_tokens: bool = SchemaField("
            },
            {
              "lineno": 20,
              "line": "            description=\"Whether to return token information\", default=False"
            },
            {
              "lineno": 21,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        texts: list = SchemaField(description=\"List of texts to chunk\")\n\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n        max_chunk_length: int = SchemaField(\n            description=\"Maximum length of each chunk\", default=1000\n        )\n        return_tokens: bool = SchemaField(\n            description=\"Whether to return token information\", default=False\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 23,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 23,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 24,
              "line": "        chunks: list = SchemaField(description=\"List of chunked texts\")"
            },
            {
              "lineno": 25,
              "line": "        tokens: list = SchemaField("
            },
            {
              "lineno": 26,
              "line": "            description=\"List of token information for each chunk\", optional=True"
            },
            {
              "lineno": 27,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        chunks: list = SchemaField(description=\"List of chunked texts\")\n        tokens: list = SchemaField(\n            description=\"List of token information for each chunk\", optional=True\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "class JinaChunkingBlock(Block):"
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 28,
          "line": ""
        },
        {
          "lineno": 37,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class JinaChunkingBlock(Block):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from backend.blocks.jina._auth import ("
    },
    {
      "lineno": 2,
      "line": "    JinaCredentials,"
    },
    {
      "lineno": 3,
      "line": "    JinaCredentialsField,"
    },
    {
      "lineno": 4,
      "line": "    JinaCredentialsInput,"
    },
    {
      "lineno": 5,
      "line": ")"
    },
    {
      "lineno": 6,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 7,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 8,
      "line": "from backend.util.request import requests"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests",
      "successors": []
    }
  ]
}