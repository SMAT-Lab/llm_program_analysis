{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 325,
  "functions": [],
  "classes": [
    {
      "name": "ImageSize",
      "type": "class",
      "start_line": 18,
      "end_line": 27,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 18,
          "line": "class ImageSize(str, Enum):"
        },
        {
          "lineno": 19,
          "line": "    \"\"\""
        },
        {
          "lineno": 20,
          "line": "    Semantic sizes that map reliably across all models"
        },
        {
          "lineno": 21,
          "line": "    \"\"\""
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 23,
          "line": "    SQUARE = \"square\"  # For profile pictures, icons, etc."
        },
        {
          "lineno": 24,
          "line": "    LANDSCAPE = \"landscape\"  # For traditional photos, scenes"
        },
        {
          "lineno": 25,
          "line": "    PORTRAIT = \"portrait\"  # For vertical photos, portraits"
        },
        {
          "lineno": 26,
          "line": "    WIDE = \"wide\"  # For cinematic, desktop wallpapers"
        },
        {
          "lineno": 27,
          "line": "    TALL = \"tall\"  # For mobile wallpapers, stories"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ImageSize(str, Enum):\n    \"\"\"\n    Semantic sizes that map reliably across all models\n    \"\"\"\n\n    SQUARE = \"square\"  # For profile pictures, icons, etc.\n    LANDSCAPE = \"landscape\"  # For traditional photos, scenes\n    PORTRAIT = \"portrait\"  # For vertical photos, portraits\n    WIDE = \"wide\"  # For cinematic, desktop wallpapers\n    TALL = \"tall\"  # For mobile wallpapers, stories",
          "successors": []
        }
      ]
    },
    {
      "name": "ImageStyle",
      "type": "class",
      "start_line": 64,
      "end_line": 89,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 64,
          "line": "class ImageStyle(str, Enum):"
        },
        {
          "lineno": 65,
          "line": "    \"\"\""
        },
        {
          "lineno": 66,
          "line": "    Complete set of supported styles"
        },
        {
          "lineno": 67,
          "line": "    \"\"\""
        },
        {
          "lineno": 68,
          "line": ""
        },
        {
          "lineno": 69,
          "line": "    ANY = \"any\""
        },
        {
          "lineno": 70,
          "line": "    # Realistic image styles"
        },
        {
          "lineno": 71,
          "line": "    REALISTIC = \"realistic_image\""
        },
        {
          "lineno": 72,
          "line": "    REALISTIC_BW = \"realistic_image/b_and_w\""
        },
        {
          "lineno": 73,
          "line": "    REALISTIC_HDR = \"realistic_image/hdr\""
        },
        {
          "lineno": 74,
          "line": "    REALISTIC_NATURAL = \"realistic_image/natural_light\""
        },
        {
          "lineno": 75,
          "line": "    REALISTIC_STUDIO = \"realistic_image/studio_portrait\""
        },
        {
          "lineno": 76,
          "line": "    REALISTIC_ENTERPRISE = \"realistic_image/enterprise\""
        },
        {
          "lineno": 77,
          "line": "    REALISTIC_HARD_FLASH = \"realistic_image/hard_flash\""
        },
        {
          "lineno": 78,
          "line": "    REALISTIC_MOTION_BLUR = \"realistic_image/motion_blur\""
        },
        {
          "lineno": 79,
          "line": "    # Digital illustration styles"
        },
        {
          "lineno": 80,
          "line": "    DIGITAL_ART = \"digital_illustration\""
        },
        {
          "lineno": 81,
          "line": "    PIXEL_ART = \"digital_illustration/pixel_art\""
        },
        {
          "lineno": 82,
          "line": "    HAND_DRAWN = \"digital_illustration/hand_drawn\""
        },
        {
          "lineno": 83,
          "line": "    GRAIN = \"digital_illustration/grain\""
        },
        {
          "lineno": 84,
          "line": "    SKETCH = \"digital_illustration/infantile_sketch\""
        },
        {
          "lineno": 85,
          "line": "    POSTER = \"digital_illustration/2d_art_poster\""
        },
        {
          "lineno": 86,
          "line": "    POSTER_2 = \"digital_illustration/2d_art_poster_2\""
        },
        {
          "lineno": 87,
          "line": "    HANDMADE_3D = \"digital_illustration/handmade_3d\""
        },
        {
          "lineno": 88,
          "line": "    HAND_DRAWN_OUTLINE = \"digital_illustration/hand_drawn_outline\""
        },
        {
          "lineno": 89,
          "line": "    ENGRAVING_COLOR = \"digital_illustration/engraving_color\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ImageStyle(str, Enum):\n    \"\"\"\n    Complete set of supported styles\n    \"\"\"\n\n    ANY = \"any\"\n    # Realistic image styles\n    REALISTIC = \"realistic_image\"\n    REALISTIC_BW = \"realistic_image/b_and_w\"\n    REALISTIC_HDR = \"realistic_image/hdr\"\n    REALISTIC_NATURAL = \"realistic_image/natural_light\"\n    REALISTIC_STUDIO = \"realistic_image/studio_portrait\"\n    REALISTIC_ENTERPRISE = \"realistic_image/enterprise\"\n    REALISTIC_HARD_FLASH = \"realistic_image/hard_flash\"\n    REALISTIC_MOTION_BLUR = \"realistic_image/motion_blur\"\n    # Digital illustration styles\n    DIGITAL_ART = \"digital_illustration\"\n    PIXEL_ART = \"digital_illustration/pixel_art\"\n    HAND_DRAWN = \"digital_illustration/hand_drawn\"\n    GRAIN = \"digital_illustration/grain\"\n    SKETCH = \"digital_illustration/infantile_sketch\"\n    POSTER = \"digital_illustration/2d_art_poster\"\n    POSTER_2 = \"digital_illustration/2d_art_poster_2\"\n    HANDMADE_3D = \"digital_illustration/handmade_3d\"\n    HAND_DRAWN_OUTLINE = \"digital_illustration/hand_drawn_outline\"\n    ENGRAVING_COLOR = \"digital_illustration/engraving_color\"\n",
          "successors": []
        }
      ]
    },
    {
      "name": "ImageGenModel",
      "type": "class",
      "start_line": 92,
      "end_line": 100,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 92,
          "line": "class ImageGenModel(str, Enum):"
        },
        {
          "lineno": 93,
          "line": "    \"\"\""
        },
        {
          "lineno": 94,
          "line": "    Available model providers"
        },
        {
          "lineno": 95,
          "line": "    \"\"\""
        },
        {
          "lineno": 96,
          "line": ""
        },
        {
          "lineno": 97,
          "line": "    FLUX = \"Flux 1.1 Pro\""
        },
        {
          "lineno": 98,
          "line": "    FLUX_ULTRA = \"Flux 1.1 Pro Ultra\""
        },
        {
          "lineno": 99,
          "line": "    RECRAFT = \"Recraft v3\""
        },
        {
          "lineno": 100,
          "line": "    SD3_5 = \"Stable Diffusion 3.5 Medium\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ImageGenModel(str, Enum):\n    \"\"\"\n    Available model providers\n    \"\"\"\n\n    FLUX = \"Flux 1.1 Pro\"\n    FLUX_ULTRA = \"Flux 1.1 Pro Ultra\"\n    RECRAFT = \"Recraft v3\"\n    SD3_5 = \"Stable Diffusion 3.5 Medium\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AIImageGeneratorBlock",
      "type": "class",
      "start_line": 103,
      "end_line": 308,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 142,
          "end_line": 166,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 142,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 143,
              "line": "        super().__init__("
            },
            {
              "lineno": 144,
              "line": "            id=\"ed1ae7a0-b770-4089-b520-1f0005fad19a\","
            },
            {
              "lineno": 145,
              "line": "            description=\"Generate images using various AI models through a unified interface\","
            },
            {
              "lineno": 146,
              "line": "            categories={BlockCategory.AI},"
            },
            {
              "lineno": 147,
              "line": "            input_schema=AIImageGeneratorBlock.Input,"
            },
            {
              "lineno": 148,
              "line": "            output_schema=AIImageGeneratorBlock.Output,"
            },
            {
              "lineno": 149,
              "line": "            test_input={"
            },
            {
              "lineno": 150,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 151,
              "line": "                \"prompt\": \"An octopus using a laptop in a snowy forest with 'AutoGPT' clearly visible on the screen\","
            },
            {
              "lineno": 152,
              "line": "                \"model\": ImageGenModel.RECRAFT,"
            },
            {
              "lineno": 153,
              "line": "                \"size\": ImageSize.SQUARE,"
            },
            {
              "lineno": 154,
              "line": "                \"style\": ImageStyle.REALISTIC,"
            },
            {
              "lineno": 155,
              "line": "            },"
            },
            {
              "lineno": 156,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 157,
              "line": "            test_output=["
            },
            {
              "lineno": 158,
              "line": "                ("
            },
            {
              "lineno": 159,
              "line": "                    \"image_url\","
            },
            {
              "lineno": 160,
              "line": "                    \"https://replicate.delivery/generated-image.webp\","
            },
            {
              "lineno": 161,
              "line": "                ),"
            },
            {
              "lineno": 162,
              "line": "            ],"
            },
            {
              "lineno": 163,
              "line": "            test_mock={"
            },
            {
              "lineno": 164,
              "line": "                \"_run_client\": lambda *args, **kwargs: \"https://replicate.delivery/generated-image.webp\""
            },
            {
              "lineno": 165,
              "line": "            },"
            },
            {
              "lineno": 166,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": " def __init__(self):\n super().__init__(\n id=\"ed1ae7a0-b770-4089-b520-1f0005fad19a\",\n description=\"Generate images using various AI models through a unified interface\",\n categories={BlockCategory.AI},\n input_schema=AIImageGeneratorBlock.Input,\n output_schema=AIImageGeneratorBlock.Output,\n test_input={\n \"credentials\": TEST_CREDENTIALS_INPUT,\n \"prompt\": \"An octopus using a laptop in a snowy forest with 'AutoGPT' clearly visible on the screen\",\n \"model\": ImageGenModel.RECRAFT,\n \"size\": ImageSize.SQUARE,\n \"style\": ImageStyle.REALISTIC,\n },\n test_credentials=TEST_CREDENTIALS,\n test_output=[\n (\n \"image_url\",\n \"https://replicate.delivery/generated-image.webp\",\n ),\n ],\n test_mock={\n \"_run_client\": lambda *args, **kwargs: \"https://replicate.delivery/generated-image.webp\"\n },\n )",
              "successors": []
            }
          ]
        },
        {
          "name": "_run_client",
          "type": "function",
          "start_line": 168,
          "end_line": 196,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 168,
              "line": "    def _run_client("
            },
            {
              "lineno": 169,
              "line": "        self, credentials: APIKeyCredentials, model_name: str, input_params: dict"
            },
            {
              "lineno": 170,
              "line": "    ):"
            },
            {
              "lineno": 171,
              "line": "        try:"
            },
            {
              "lineno": 172,
              "line": "            # Initialize Replicate client"
            },
            {
              "lineno": 173,
              "line": "            client = replicate.Client(api_token=credentials.api_key.get_secret_value())"
            },
            {
              "lineno": 174,
              "line": ""
            },
            {
              "lineno": 175,
              "line": "            # Run the model with input parameters"
            },
            {
              "lineno": 176,
              "line": "            output = client.run(model_name, input=input_params, wait=False)"
            },
            {
              "lineno": 177,
              "line": ""
            },
            {
              "lineno": 178,
              "line": "            # Process output"
            },
            {
              "lineno": 179,
              "line": "            if isinstance(output, list) and len(output) > 0:"
            },
            {
              "lineno": 180,
              "line": "                if isinstance(output[0], FileOutput):"
            },
            {
              "lineno": 181,
              "line": "                    result_url = output[0].url"
            },
            {
              "lineno": 182,
              "line": "                else:"
            },
            {
              "lineno": 183,
              "line": "                    result_url = output[0]"
            },
            {
              "lineno": 184,
              "line": "            elif isinstance(output, FileOutput):"
            },
            {
              "lineno": 185,
              "line": "                result_url = output.url"
            },
            {
              "lineno": 186,
              "line": "            elif isinstance(output, str):"
            },
            {
              "lineno": 187,
              "line": "                result_url = output"
            },
            {
              "lineno": 188,
              "line": "            else:"
            },
            {
              "lineno": 189,
              "line": "                result_url = None"
            },
            {
              "lineno": 190,
              "line": ""
            },
            {
              "lineno": 191,
              "line": "            return result_url"
            },
            {
              "lineno": 192,
              "line": ""
            },
            {
              "lineno": 193,
              "line": "        except TypeError as e:"
            },
            {
              "lineno": 194,
              "line": "            raise TypeError(f\"Error during model execution: {e}\")"
            },
            {
              "lineno": 195,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 196,
              "line": "            raise RuntimeError(f\"Unexpected error during model execution: {e}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def _run_client(\n        self, credentials: APIKeyCredentials, model_name: str, input_params: dict\n    ):\n        try:",
              "successors": [
                {
                  "id": 2,
                  "label": "            # Initialize Replicate client\n            client = replicate.Client(api_token=credentials.api_key.get_secret_value())\n\n            # Run the model with input parameters\n            output = client.run(model_name, input=input_params, wait=False)\n            # Process output\n            if isinstance(output, list) and len(output) > 0:",
                  "successors": [
                    {
                      "id": 4,
                      "label": "                if isinstance(output[0], FileOutput):\n                    result_url = output[0].url\n                else:\n                    result_url = output[0]\n            return result_url",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "            elif isinstance(output, FileOutput):\n                result_url = output.url\n            return result_url",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "            elif isinstance(output, str):\n                result_url = output\n            return result_url",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "            else:\n                result_url = None\n            return result_url",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "        except TypeError as e:\n            raise TypeError(f\"Error during model execution: {e}\")",
                  "successors": []
                },
                {
                  "id": 10,
                  "label": "        except Exception as e:\n            raise RuntimeError(f\"Unexpected error during model execution: {e}\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "generate_image",
          "type": "function",
          "start_line": 198,
          "end_line": 266,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 198,
              "line": "    def generate_image(self, input_data: Input, credentials: APIKeyCredentials):"
            },
            {
              "lineno": 199,
              "line": "        try:"
            },
            {
              "lineno": 200,
              "line": "            # Handle style-based prompt modification for models without native style support"
            },
            {
              "lineno": 201,
              "line": "            modified_prompt = input_data.prompt"
            },
            {
              "lineno": 202,
              "line": "            if input_data.model not in [ImageGenModel.RECRAFT]:"
            },
            {
              "lineno": 203,
              "line": "                style_prefix = self._style_to_prompt_prefix(input_data.style)"
            },
            {
              "lineno": 204,
              "line": "                modified_prompt = f\"{style_prefix} {modified_prompt}\".strip()"
            },
            {
              "lineno": 205,
              "line": ""
            },
            {
              "lineno": 206,
              "line": "            if input_data.model == ImageGenModel.SD3_5:"
            },
            {
              "lineno": 207,
              "line": "                # Use Stable Diffusion 3.5 with aspect ratio"
            },
            {
              "lineno": 208,
              "line": "                input_params = {"
            },
            {
              "lineno": 209,
              "line": "                    \"prompt\": modified_prompt,"
            },
            {
              "lineno": 210,
              "line": "                    \"aspect_ratio\": SIZE_TO_SD_RATIO[input_data.size],"
            },
            {
              "lineno": 211,
              "line": "                    \"output_format\": \"webp\","
            },
            {
              "lineno": 212,
              "line": "                    \"output_quality\": 90,"
            },
            {
              "lineno": 213,
              "line": "                    \"steps\": 40,"
            },
            {
              "lineno": 214,
              "line": "                    \"cfg_scale\": 7.0,"
            },
            {
              "lineno": 215,
              "line": "                }"
            },
            {
              "lineno": 216,
              "line": "                output = self._run_client("
            },
            {
              "lineno": 217,
              "line": "                    credentials,"
            },
            {
              "lineno": 218,
              "line": "                    \"stability-ai/stable-diffusion-3.5-medium\","
            },
            {
              "lineno": 219,
              "line": "                    input_params,"
            },
            {
              "lineno": 220,
              "line": "                )"
            },
            {
              "lineno": 221,
              "line": "                return output"
            },
            {
              "lineno": 222,
              "line": ""
            },
            {
              "lineno": 223,
              "line": "            elif input_data.model == ImageGenModel.FLUX:"
            },
            {
              "lineno": 224,
              "line": "                # Use Flux-specific dimensions with 'jpg' format to avoid ReplicateError"
            },
            {
              "lineno": 225,
              "line": "                width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]"
            },
            {
              "lineno": 226,
              "line": "                input_params = {"
            },
            {
              "lineno": 227,
              "line": "                    \"prompt\": modified_prompt,"
            },
            {
              "lineno": 228,
              "line": "                    \"width\": width,"
            },
            {
              "lineno": 229,
              "line": "                    \"height\": height,"
            },
            {
              "lineno": 230,
              "line": "                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],"
            },
            {
              "lineno": 231,
              "line": "                    \"output_format\": \"jpg\",  # Set to jpg for Flux models"
            },
            {
              "lineno": 232,
              "line": "                    \"output_quality\": 90,"
            },
            {
              "lineno": 233,
              "line": "                }"
            },
            {
              "lineno": 234,
              "line": "                output = self._run_client("
            },
            {
              "lineno": 235,
              "line": "                    credentials, \"black-forest-labs/flux-1.1-pro\", input_params"
            },
            {
              "lineno": 236,
              "line": "                )"
            },
            {
              "lineno": 237,
              "line": "                return output"
            },
            {
              "lineno": 238,
              "line": ""
            },
            {
              "lineno": 239,
              "line": "            elif input_data.model == ImageGenModel.FLUX_ULTRA:"
            },
            {
              "lineno": 240,
              "line": "                width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]"
            },
            {
              "lineno": 241,
              "line": "                input_params = {"
            },
            {
              "lineno": 242,
              "line": "                    \"prompt\": modified_prompt,"
            },
            {
              "lineno": 243,
              "line": "                    \"width\": width,"
            },
            {
              "lineno": 244,
              "line": "                    \"height\": height,"
            },
            {
              "lineno": 245,
              "line": "                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],"
            },
            {
              "lineno": 246,
              "line": "                    \"output_format\": \"jpg\","
            },
            {
              "lineno": 247,
              "line": "                    \"output_quality\": 90,"
            },
            {
              "lineno": 248,
              "line": "                }"
            },
            {
              "lineno": 249,
              "line": "                output = self._run_client("
            },
            {
              "lineno": 250,
              "line": "                    credentials, \"black-forest-labs/flux-1.1-pro-ultra\", input_params"
            },
            {
              "lineno": 251,
              "line": "                )"
            },
            {
              "lineno": 252,
              "line": "                return output"
            },
            {
              "lineno": 253,
              "line": ""
            },
            {
              "lineno": 254,
              "line": "            elif input_data.model == ImageGenModel.RECRAFT:"
            },
            {
              "lineno": 255,
              "line": "                input_params = {"
            },
            {
              "lineno": 256,
              "line": "                    \"prompt\": input_data.prompt,"
            },
            {
              "lineno": 257,
              "line": "                    \"size\": SIZE_TO_RECRAFT_DIMENSIONS[input_data.size],"
            },
            {
              "lineno": 258,
              "line": "                    \"style\": input_data.style.value,"
            },
            {
              "lineno": 259,
              "line": "                }"
            },
            {
              "lineno": 260,
              "line": "                output = self._run_client("
            },
            {
              "lineno": 261,
              "line": "                    credentials, \"recraft-ai/recraft-v3\", input_params"
            },
            {
              "lineno": 262,
              "line": "                )"
            },
            {
              "lineno": 263,
              "line": "                return output"
            },
            {
              "lineno": 264,
              "line": ""
            },
            {
              "lineno": 265,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 266,
              "line": "            raise RuntimeError(f\"Failed to generate image: {str(e)}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def generate_image(self, input_data: Input, credentials: APIKeyCredentials):\n        try:\n            # Handle style-based prompt modification for models without native style support\n            modified_prompt = input_data.prompt",
              "successors": [
                {
                  "id": 2,
                  "label": "            if input_data.model not in [ImageGenModel.RECRAFT]:\n                style_prefix = self._style_to_prompt_prefix(input_data.style)\n                modified_prompt = f\"{style_prefix} {modified_prompt}\".strip()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            if input_data.model == ImageGenModel.SD3_5:\n                # Use Stable Diffusion 3.5 with aspect ratio\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"aspect_ratio\": SIZE_TO_SD_RATIO[input_data.size],\n                    \"output_format\": \"webp\",\n                    \"output_quality\": 90,\n                    \"steps\": 40,\n                    \"cfg_scale\": 7.0,\n                }\n                output = self._run_client(\n                    credentials,\n                    \"stability-ai/stable-diffusion-3.5-medium\",\n                    input_params,\n                )\n                return output",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "            elif input_data.model == ImageGenModel.FLUX:\n                # Use Flux-specific dimensions with 'jpg' format to avoid ReplicateError\n                width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"width\": width,\n                    \"height\": height,\n                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],\n                    \"output_format\": \"jpg\",  # Set to jpg for Flux models\n                    \"output_quality\": 90,\n                }\n                output = self._run_client(\n                    credentials, \"black-forest-labs/flux-1.1-pro\", input_params\n                )\n                return output",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "            elif input_data.model == ImageGenModel.FLUX_ULTRA:\n                width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"width\": width,\n                    \"height\": height,\n                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],\n                    \"output_format\": \"jpg\",\n                    \"output_quality\": 90,\n                }\n                output = self._run_client(\n                    credentials, \"black-forest-labs/flux-1.1-pro-ultra\", input_params\n                )\n                return output",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "            elif input_data.model == ImageGenModel.RECRAFT:\n                input_params = {\n                    \"prompt\": input_data.prompt,\n                    \"size\": SIZE_TO_RECRAFT_DIMENSIONS[input_data.size],\n                    \"style\": input_data.style.value,\n                }\n                output = self._run_client(\n                    credentials, \"recraft-ai/recraft-v3\", input_params\n                )\n                return output",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "label": "        except Exception as e:\n            raise RuntimeError(f\"Failed to generate image: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_style_to_prompt_prefix",
          "type": "function",
          "start_line": 268,
          "end_line": 297,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 268,
              "line": "    def _style_to_prompt_prefix(self, style: ImageStyle) -> str:"
            },
            {
              "lineno": 269,
              "line": "        \"\"\""
            },
            {
              "lineno": 270,
              "line": "        Convert a style enum to a prompt prefix for models without native style support."
            },
            {
              "lineno": 271,
              "line": "        \"\"\""
            },
            {
              "lineno": 272,
              "line": "        if style == ImageStyle.ANY:"
            },
            {
              "lineno": 273,
              "line": "            return \"\""
            },
            {
              "lineno": 274,
              "line": ""
            },
            {
              "lineno": 275,
              "line": "        style_map = {"
            },
            {
              "lineno": 276,
              "line": "            ImageStyle.REALISTIC: \"photorealistic\","
            },
            {
              "lineno": 277,
              "line": "            ImageStyle.REALISTIC_BW: \"black and white photograph\","
            },
            {
              "lineno": 278,
              "line": "            ImageStyle.REALISTIC_HDR: \"HDR photograph\","
            },
            {
              "lineno": 279,
              "line": "            ImageStyle.REALISTIC_NATURAL: \"natural light photograph\","
            },
            {
              "lineno": 280,
              "line": "            ImageStyle.REALISTIC_STUDIO: \"studio portrait photograph\","
            },
            {
              "lineno": 281,
              "line": "            ImageStyle.REALISTIC_ENTERPRISE: \"enterprise photograph\","
            },
            {
              "lineno": 282,
              "line": "            ImageStyle.REALISTIC_HARD_FLASH: \"hard flash photograph\","
            },
            {
              "lineno": 283,
              "line": "            ImageStyle.REALISTIC_MOTION_BLUR: \"motion blur photograph\","
            },
            {
              "lineno": 284,
              "line": "            ImageStyle.DIGITAL_ART: \"digital art\","
            },
            {
              "lineno": 285,
              "line": "            ImageStyle.PIXEL_ART: \"pixel art\","
            },
            {
              "lineno": 286,
              "line": "            ImageStyle.HAND_DRAWN: \"hand drawn illustration\","
            },
            {
              "lineno": 287,
              "line": "            ImageStyle.GRAIN: \"grainy digital illustration\","
            },
            {
              "lineno": 288,
              "line": "            ImageStyle.SKETCH: \"sketchy illustration\","
            },
            {
              "lineno": 289,
              "line": "            ImageStyle.POSTER: \"2D art poster\","
            },
            {
              "lineno": 290,
              "line": "            ImageStyle.POSTER_2: \"alternate 2D art poster\","
            },
            {
              "lineno": 291,
              "line": "            ImageStyle.HANDMADE_3D: \"handmade 3D illustration\","
            },
            {
              "lineno": 292,
              "line": "            ImageStyle.HAND_DRAWN_OUTLINE: \"hand drawn outline illustration\","
            },
            {
              "lineno": 293,
              "line": "            ImageStyle.ENGRAVING_COLOR: \"color engraving illustration\","
            },
            {
              "lineno": 294,
              "line": "        }"
            },
            {
              "lineno": 295,
              "line": ""
            },
            {
              "lineno": 296,
              "line": "        style_text = style_map.get(style, \"\")"
            },
            {
              "lineno": 297,
              "line": "        return f\"{style_text} of\" if style_text else \"\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def _style_to_prompt_prefix(self, style: ImageStyle) -> str:\n        \"\"\"\n        Convert a style enum to a prompt prefix for models without native style support.\n        \"\"\"\n        if style == ImageStyle.ANY:",
              "successors": [
                {
                  "id": 2,
                  "label": "            return \"\"",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "        style_map = {\n            ImageStyle.REALISTIC: \"photorealistic\",\n            ImageStyle.REALISTIC_BW: \"black and white photograph\",\n            ImageStyle.REALISTIC_HDR: \"HDR photograph\",\n            ImageStyle.REALISTIC_NATURAL: \"natural light photograph\",\n            ImageStyle.REALISTIC_STUDIO: \"studio portrait photograph\",\n            ImageStyle.REALISTIC_ENTERPRISE: \"enterprise photograph\",\n            ImageStyle.REALISTIC_HARD_FLASH: \"hard flash photograph\",\n            ImageStyle.REALISTIC_MOTION_BLUR: \"motion blur photograph\",\n            ImageStyle.DIGITAL_ART: \"digital art\",\n            ImageStyle.PIXEL_ART: \"pixel art\",\n            ImageStyle.HAND_DRAWN: \"hand drawn illustration\",\n            ImageStyle.GRAIN: \"grainy digital illustration\",\n            ImageStyle.SKETCH: \"sketchy illustration\",\n            ImageStyle.POSTER: \"2D art poster\",\n            ImageStyle.POSTER_2: \"alternate 2D art poster\",\n            ImageStyle.HANDMADE_3D: \"handmade 3D illustration\",\n            ImageStyle.HAND_DRAWN_OUTLINE: \"hand drawn outline illustration\",\n            ImageStyle.ENGRAVING_COLOR: \"color engraving illustration\",\n        }\n        style_text = style_map.get(style, \"\")\n        return f\"{style_text} of\" if style_text else \"\"",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 299,
          "end_line": 308,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 299,
              "line": "    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs):"
            },
            {
              "lineno": 300,
              "line": "        try:"
            },
            {
              "lineno": 301,
              "line": "            url = self.generate_image(input_data, credentials)"
            },
            {
              "lineno": 302,
              "line": "            if url:"
            },
            {
              "lineno": 303,
              "line": "                yield \"image_url\", url"
            },
            {
              "lineno": 304,
              "line": "            else:"
            },
            {
              "lineno": 305,
              "line": "                yield \"error\", \"Image generation returned an empty result.\""
            },
            {
              "lineno": 306,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 307,
              "line": "            # Capture and return only the message of the exception, avoiding serialization of non-serializable objects"
            },
            {
              "lineno": 308,
              "line": "            yield \"error\", str(e)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs):\n        try:",
              "successors": [
                {
                  "id": 2,
                  "label": "            url = self.generate_image(input_data, credentials)\n            if url:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "                yield \"image_url\", url",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "            else:\n                yield \"error\", \"Image generation returned an empty result.\"",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "        except Exception as e:\n            # Capture and return only the message of the exception, avoiding serialization of non-serializable objects\n            yield \"error\", str(e)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 104,
          "end_line": 136,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 104,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 105,
              "line": "        credentials: CredentialsMetaInput["
            },
            {
              "lineno": 106,
              "line": "            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]"
            },
            {
              "lineno": 107,
              "line": "        ] = CredentialsField("
            },
            {
              "lineno": 108,
              "line": "            description=\"Enter your Replicate API key to access the image generation API. You can obtain an API key from https://replicate.com/account/api-tokens.\","
            },
            {
              "lineno": 109,
              "line": "        )"
            },
            {
              "lineno": 110,
              "line": "        prompt: str = SchemaField("
            },
            {
              "lineno": 111,
              "line": "            description=\"Text prompt for image generation\","
            },
            {
              "lineno": 112,
              "line": "            placeholder=\"e.g., 'A red panda using a laptop in a snowy forest'\","
            },
            {
              "lineno": 113,
              "line": "            title=\"Prompt\","
            },
            {
              "lineno": 114,
              "line": "        )"
            },
            {
              "lineno": 115,
              "line": "        model: ImageGenModel = SchemaField("
            },
            {
              "lineno": 116,
              "line": "            description=\"The AI model to use for image generation\","
            },
            {
              "lineno": 117,
              "line": "            default=ImageGenModel.SD3_5,"
            },
            {
              "lineno": 118,
              "line": "            title=\"Model\","
            },
            {
              "lineno": 119,
              "line": "        )"
            },
            {
              "lineno": 120,
              "line": "        size: ImageSize = SchemaField("
            },
            {
              "lineno": 121,
              "line": "            description=("
            },
            {
              "lineno": 122,
              "line": "                \"Format of the generated image:\\n\""
            },
            {
              "lineno": 123,
              "line": "                \"- Square: Perfect for profile pictures, icons\\n\""
            },
            {
              "lineno": 124,
              "line": "                \"- Landscape: Traditional photo format\\n\""
            },
            {
              "lineno": 125,
              "line": "                \"- Portrait: Vertical photos, portraits\\n\""
            },
            {
              "lineno": 126,
              "line": "                \"- Wide: Cinematic format, desktop wallpapers\\n\""
            },
            {
              "lineno": 127,
              "line": "                \"- Tall: Mobile wallpapers, social media stories\""
            },
            {
              "lineno": 128,
              "line": "            ),"
            },
            {
              "lineno": 129,
              "line": "            default=ImageSize.SQUARE,"
            },
            {
              "lineno": 130,
              "line": "            title=\"Image Format\","
            },
            {
              "lineno": 131,
              "line": "        )"
            },
            {
              "lineno": 132,
              "line": "        style: ImageStyle = SchemaField("
            },
            {
              "lineno": 133,
              "line": "            description=\"Visual style for the generated image\","
            },
            {
              "lineno": 134,
              "line": "            default=ImageStyle.ANY,"
            },
            {
              "lineno": 135,
              "line": "            title=\"Image Style\","
            },
            {
              "lineno": 136,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"Enter your Replicate API key to access the image generation API. You can obtain an API key from https://replicate.com/account/api-tokens.\",\n        )\n\n        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A red panda using a laptop in a snowy forest'\",\n            title=\"Prompt\",\n        )\n\n        model: ImageGenModel = SchemaField(\n            description=\"The AI model to use for image generation\",\n            default=ImageGenModel.SD3_5,\n            title=\"Model\",\n        )\n\n        size: ImageSize = SchemaField(\n            description=(\n                \"Format of the generated image:\\n\"\n                \"- Square: Perfect for profile pictures, icons\\n\"\n                \"- Landscape: Traditional photo format\\n\"\n                \"- Portrait: Vertical photos, portraits\\n\"\n                \"- Wide: Cinematic format, desktop wallpapers\\n\"\n                \"- Tall: Mobile wallpapers, social media stories\"\n            ),\n            default=ImageSize.SQUARE,\n            title=\"Image Format\",\n        )\n\n        style: ImageStyle = SchemaField(\n            description=\"Visual style for the generated image\",\n            default=ImageStyle.ANY,\n            title=\"Image Style\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 138,
          "end_line": 140,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 138,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 139,
              "line": "        image_url: str = SchemaField(description=\"URL of the generated image\")"
            },
            {
              "lineno": 140,
              "line": "        error: str = SchemaField(description=\"Error message if generation failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        image_url: str = SchemaField(description=\"URL of the generated image\")\n        error: str = SchemaField(description=\"Error message if generation failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 103,
          "line": "class AIImageGeneratorBlock(Block):"
        },
        {
          "lineno": 137,
          "line": ""
        },
        {
          "lineno": 141,
          "line": ""
        },
        {
          "lineno": 167,
          "line": ""
        },
        {
          "lineno": 197,
          "line": ""
        },
        {
          "lineno": 267,
          "line": ""
        },
        {
          "lineno": 298,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from enum import Enum"
    },
    {
      "lineno": 2,
      "line": "from typing import Literal"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "import replicate"
    },
    {
      "lineno": 5,
      "line": "from pydantic import SecretStr"
    },
    {
      "lineno": 6,
      "line": "from replicate.helpers import FileOutput"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from backend.data.block import Block, BlockCategory, BlockSchema"
    },
    {
      "lineno": 9,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 10,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 11,
      "line": "    CredentialsField,"
    },
    {
      "lineno": 12,
      "line": "    CredentialsMetaInput,"
    },
    {
      "lineno": 13,
      "line": "    SchemaField,"
    },
    {
      "lineno": 14,
      "line": ")"
    },
    {
      "lineno": 15,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 28,
      "line": ""
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": "# Mapping semantic sizes to model-specific formats"
    },
    {
      "lineno": 31,
      "line": "SIZE_TO_SD_RATIO = {"
    },
    {
      "lineno": 32,
      "line": "    ImageSize.SQUARE: \"1:1\","
    },
    {
      "lineno": 33,
      "line": "    ImageSize.LANDSCAPE: \"4:3\","
    },
    {
      "lineno": 34,
      "line": "    ImageSize.PORTRAIT: \"3:4\","
    },
    {
      "lineno": 35,
      "line": "    ImageSize.WIDE: \"16:9\","
    },
    {
      "lineno": 36,
      "line": "    ImageSize.TALL: \"9:16\","
    },
    {
      "lineno": 37,
      "line": "}"
    },
    {
      "lineno": 38,
      "line": ""
    },
    {
      "lineno": 39,
      "line": "SIZE_TO_FLUX_RATIO = {"
    },
    {
      "lineno": 40,
      "line": "    ImageSize.SQUARE: \"1:1\","
    },
    {
      "lineno": 41,
      "line": "    ImageSize.LANDSCAPE: \"4:3\","
    },
    {
      "lineno": 42,
      "line": "    ImageSize.PORTRAIT: \"3:4\","
    },
    {
      "lineno": 43,
      "line": "    ImageSize.WIDE: \"16:9\","
    },
    {
      "lineno": 44,
      "line": "    ImageSize.TALL: \"9:16\","
    },
    {
      "lineno": 45,
      "line": "}"
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 47,
      "line": "SIZE_TO_FLUX_DIMENSIONS = {"
    },
    {
      "lineno": 48,
      "line": "    ImageSize.SQUARE: (1024, 1024),"
    },
    {
      "lineno": 49,
      "line": "    ImageSize.LANDSCAPE: (1365, 1024),"
    },
    {
      "lineno": 50,
      "line": "    ImageSize.PORTRAIT: (1024, 1365),"
    },
    {
      "lineno": 51,
      "line": "    ImageSize.WIDE: (1440, 810),  # Adjusted to maintain 16:9 within 1440 limit"
    },
    {
      "lineno": 52,
      "line": "    ImageSize.TALL: (810, 1440),  # Adjusted to maintain 9:16 within 1440 limit"
    },
    {
      "lineno": 53,
      "line": "}"
    },
    {
      "lineno": 54,
      "line": ""
    },
    {
      "lineno": 55,
      "line": "SIZE_TO_RECRAFT_DIMENSIONS = {"
    },
    {
      "lineno": 56,
      "line": "    ImageSize.SQUARE: \"1024x1024\","
    },
    {
      "lineno": 57,
      "line": "    ImageSize.LANDSCAPE: \"1365x1024\","
    },
    {
      "lineno": 58,
      "line": "    ImageSize.PORTRAIT: \"1024x1365\","
    },
    {
      "lineno": 59,
      "line": "    ImageSize.WIDE: \"1536x1024\","
    },
    {
      "lineno": 60,
      "line": "    ImageSize.TALL: \"1024x1536\","
    },
    {
      "lineno": 61,
      "line": "}"
    },
    {
      "lineno": 62,
      "line": ""
    },
    {
      "lineno": 63,
      "line": ""
    },
    {
      "lineno": 90,
      "line": ""
    },
    {
      "lineno": 91,
      "line": ""
    },
    {
      "lineno": 101,
      "line": ""
    },
    {
      "lineno": 102,
      "line": ""
    },
    {
      "lineno": 309,
      "line": ""
    },
    {
      "lineno": 310,
      "line": ""
    },
    {
      "lineno": 311,
      "line": "# Test credentials stay the same"
    },
    {
      "lineno": 312,
      "line": "TEST_CREDENTIALS = APIKeyCredentials("
    },
    {
      "lineno": 313,
      "line": "    id=\"01234567-89ab-cdef-0123-456789abcdef\","
    },
    {
      "lineno": 314,
      "line": "    provider=\"replicate\","
    },
    {
      "lineno": 315,
      "line": "    api_key=SecretStr(\"mock-replicate-api-key\"),"
    },
    {
      "lineno": 316,
      "line": "    title=\"Mock Replicate API key\","
    },
    {
      "lineno": 317,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 318,
      "line": ")"
    },
    {
      "lineno": 319,
      "line": ""
    },
    {
      "lineno": 320,
      "line": "TEST_CREDENTIALS_INPUT = {"
    },
    {
      "lineno": 321,
      "line": "    \"provider\": TEST_CREDENTIALS.provider,"
    },
    {
      "lineno": 322,
      "line": "    \"id\": TEST_CREDENTIALS.id,"
    },
    {
      "lineno": 323,
      "line": "    \"type\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 324,
      "line": "    \"title\": TEST_CREDENTIALS.title,"
    },
    {
      "lineno": 325,
      "line": "}"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": [],
      "successors": []
    }
  ]
}