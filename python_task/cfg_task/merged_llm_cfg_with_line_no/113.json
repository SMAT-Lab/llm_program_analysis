{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 148,
  "functions": [],
  "classes": [
    {
      "name": "Place",
      "type": "class",
      "start_line": 30,
      "end_line": 36,
      "functions": [],
      "simplified_code": [
        {
          "lineno": 30,
          "line": "class Place(BaseModel):"
        },
        {
          "lineno": 31,
          "line": "    name: str"
        },
        {
          "lineno": 32,
          "line": "    address: str"
        },
        {
          "lineno": 33,
          "line": "    phone: str"
        },
        {
          "lineno": 34,
          "line": "    rating: float"
        },
        {
          "lineno": 35,
          "line": "    reviews: int"
        },
        {
          "lineno": 36,
          "line": "    website: str"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Place(BaseModel):\n    name: str\n    address: str\n    phone: str\n    rating: float\n    reviews: int\n    website: str",
          "successors": []
        }
      ]
    },
    {
      "name": "GoogleMapsSearchBlock",
      "type": "class",
      "start_line": 39,
      "end_line": 148,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 65,
          "end_line": 104,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 65,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 66,
              "line": "        super().__init__("
            },
            {
              "lineno": 67,
              "line": "            id=\"f47ac10b-58cc-4372-a567-0e02b2c3d479\","
            },
            {
              "lineno": 68,
              "line": "            description=\"This block searches for local businesses using Google Maps API.\","
            },
            {
              "lineno": 69,
              "line": "            categories={BlockCategory.SEARCH},"
            },
            {
              "lineno": 70,
              "line": "            input_schema=GoogleMapsSearchBlock.Input,"
            },
            {
              "lineno": 71,
              "line": "            output_schema=GoogleMapsSearchBlock.Output,"
            },
            {
              "lineno": 72,
              "line": "            test_input={"
            },
            {
              "lineno": 73,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 74,
              "line": "                \"query\": \"restaurants in new york\","
            },
            {
              "lineno": 75,
              "line": "                \"radius\": 5000,"
            },
            {
              "lineno": 76,
              "line": "                \"max_results\": 5,"
            },
            {
              "lineno": 77,
              "line": "            },"
            },
            {
              "lineno": 78,
              "line": "            test_output=["
            },
            {
              "lineno": 79,
              "line": "                ("
            },
            {
              "lineno": 80,
              "line": "                    \"place\","
            },
            {
              "lineno": 81,
              "line": "                    {"
            },
            {
              "lineno": 82,
              "line": "                        \"name\": \"Test Restaurant\","
            },
            {
              "lineno": 83,
              "line": "                        \"address\": \"123 Test St, New York, NY 10001\","
            },
            {
              "lineno": 84,
              "line": "                        \"phone\": \"+1 (555) 123-4567\","
            },
            {
              "lineno": 85,
              "line": "                        \"rating\": 4.5,"
            },
            {
              "lineno": 86,
              "line": "                        \"reviews\": 100,"
            },
            {
              "lineno": 87,
              "line": "                        \"website\": \"https://testrestaurant.com\","
            },
            {
              "lineno": 88,
              "line": "                    },"
            },
            {
              "lineno": 89,
              "line": "                ),"
            },
            {
              "lineno": 90,
              "line": "            ],"
            },
            {
              "lineno": 91,
              "line": "            test_mock={"
            },
            {
              "lineno": 92,
              "line": "                \"search_places\": lambda *args, **kwargs: ["
            },
            {
              "lineno": 93,
              "line": "                    {"
            },
            {
              "lineno": 94,
              "line": "                        \"name\": \"Test Restaurant\","
            },
            {
              "lineno": 95,
              "line": "                        \"address\": \"123 Test St, New York, NY 10001\","
            },
            {
              "lineno": 96,
              "line": "                        \"phone\": \"+1 (555) 123-4567\","
            },
            {
              "lineno": 97,
              "line": "                        \"rating\": 4.5,"
            },
            {
              "lineno": 98,
              "line": "                        \"reviews\": 100,"
            },
            {
              "lineno": 99,
              "line": "                        \"website\": \"https://testrestaurant.com\","
            },
            {
              "lineno": 100,
              "line": "                    }"
            },
            {
              "lineno": 101,
              "line": "                ]"
            },
            {
              "lineno": 102,
              "line": "            },"
            },
            {
              "lineno": 103,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 104,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n            description=\"This block searches for local businesses using Google Maps API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=GoogleMapsSearchBlock.Input,\n            output_schema=GoogleMapsSearchBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"query\": \"restaurants in new york\",\n                \"radius\": 5000,\n                \"max_results\": 5,\n            },\n            test_output=[\n                (\n                    \"place\",\n                    {\n                        \"name\": \"Test Restaurant\",\n                        \"address\": \"123 Test St, New York, NY 10001\",\n                        \"phone\": \"+1 (555) 123-4567\",\n                        \"rating\": 4.5,\n                        \"reviews\": 100,\n                        \"website\": \"https://testrestaurant.com\",\n                    },\n                ),\n            ],\n            test_mock={\n                \"search_places\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"Test Restaurant\",\n                        \"address\": \"123 Test St, New York, NY 10001\",\n                        \"phone\": \"+1 (555) 123-4567\",\n                        \"rating\": 4.5,\n                        \"reviews\": 100,\n                        \"website\": \"https://testrestaurant.com\",\n                    }\n                ]\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 106,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 106,
              "line": "    def run("
            },
            {
              "lineno": 107,
              "line": "        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs"
            },
            {
              "lineno": 108,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 109,
              "line": "        places = self.search_places("
            },
            {
              "lineno": 110,
              "line": "            credentials.api_key,"
            },
            {
              "lineno": 111,
              "line": "            input_data.query,"
            },
            {
              "lineno": 112,
              "line": "            input_data.radius,"
            },
            {
              "lineno": 113,
              "line": "            input_data.max_results,"
            },
            {
              "lineno": 114,
              "line": "        )"
            },
            {
              "lineno": 115,
              "line": "        for place in places:"
            },
            {
              "lineno": 116,
              "line": "            yield \"place\", place"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        places = self.search_places(\n            credentials.api_key,\n            input_data.query,\n            input_data.radius,\n            input_data.max_results,\n        )",
              "successors": [
                {
                  "id": 2,
                  "label": "        for place in places:\n            yield \"place\", place",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "search_places",
          "type": "function",
          "start_line": 118,
          "end_line": 120,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 118,
              "line": "    def search_places(self, api_key: SecretStr, query, radius, max_results):"
            },
            {
              "lineno": 119,
              "line": "        client = googlemaps.Client(key=api_key.get_secret_value())"
            },
            {
              "lineno": 120,
              "line": "        return self._search_places(client, query, radius, max_results)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def search_places(self, api_key: SecretStr, query, radius, max_results):\n        client = googlemaps.Client(key=api_key.get_secret_value())\n        return self._search_places(client, query, radius, max_results)",
              "successors": []
            }
          ]
        },
        {
          "name": "_search_places",
          "type": "function",
          "start_line": 122,
          "end_line": 148,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 122,
              "line": "    def _search_places(self, client, query, radius, max_results):"
            },
            {
              "lineno": 123,
              "line": "        results = []"
            },
            {
              "lineno": 124,
              "line": "        next_page_token = None"
            },
            {
              "lineno": 125,
              "line": "        while len(results) < max_results:"
            },
            {
              "lineno": 126,
              "line": "            response = client.places("
            },
            {
              "lineno": 127,
              "line": "                query=query,"
            },
            {
              "lineno": 128,
              "line": "                radius=radius,"
            },
            {
              "lineno": 129,
              "line": "                page_token=next_page_token,"
            },
            {
              "lineno": 130,
              "line": "            )"
            },
            {
              "lineno": 131,
              "line": "            for place in response[\"results\"]:"
            },
            {
              "lineno": 132,
              "line": "                if len(results) >= max_results:"
            },
            {
              "lineno": 133,
              "line": "                    break"
            },
            {
              "lineno": 134,
              "line": "                place_details = client.place(place[\"place_id\"])[\"result\"]"
            },
            {
              "lineno": 135,
              "line": "                results.append("
            },
            {
              "lineno": 136,
              "line": "                    Place("
            },
            {
              "lineno": 137,
              "line": "                        name=place_details.get(\"name\", \"\"),"
            },
            {
              "lineno": 138,
              "line": "                        address=place_details.get(\"formatted_address\", \"\"),"
            },
            {
              "lineno": 139,
              "line": "                        phone=place_details.get(\"formatted_phone_number\", \"\"),"
            },
            {
              "lineno": 140,
              "line": "                        rating=place_details.get(\"rating\", 0),"
            },
            {
              "lineno": 141,
              "line": "                        reviews=place_details.get(\"user_ratings_total\", 0),"
            },
            {
              "lineno": 142,
              "line": "                        website=place_details.get(\"website\", \"\"),"
            },
            {
              "lineno": 143,
              "line": "                    )"
            },
            {
              "lineno": 144,
              "line": "                )"
            },
            {
              "lineno": 145,
              "line": "            next_page_token = response.get(\"next_page_token\")"
            },
            {
              "lineno": 146,
              "line": "            if not next_page_token:"
            },
            {
              "lineno": 147,
              "line": "                break"
            },
            {
              "lineno": 148,
              "line": "        return results"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def _search_places(self, client, query, radius, max_results):\n        results = []\n        next_page_token = None",
              "successors": [
                {
                  "id": 2,
                  "label": "        while len(results) < max_results:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            response = client.places(\n                query=query,\n                radius=radius,\n                page_token=next_page_token,\n            )",
                      "successors": [
                        {
                          "id": 4,
                          "label": "            for place in response[\"results\"]:",
                          "successors": [
                            {
                              "id": 5,
                              "label": "                if len(results) >= max_results:\n                    break\n                place_details = client.place(place[\"place_id\"])[\"result\"]\n                results.append(\n                    Place(\n                        name=place_details.get(\"name\", \"\"),\n                        address=place_details.get(\"formatted_address\", \"\"),\n                        phone=place_details.get(\"formatted_phone_number\", \"\"),\n                        rating=place_details.get(\"rating\", 0),\n                        reviews=place_details.get(\"user_ratings_total\", 0),\n                        website=place_details.get(\"website\", \"\"),\n                    )\n                )",
                              "successors": [
                                {
                                  "id": 4,
                                  "label": "            for place in response[\"results\"]:",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "            next_page_token = response.get(\"next_page_token\")\n            if not next_page_token:\n                break",
                          "successors": [
                            {
                              "id": 2,
                              "label": "        while len(results) < max_results:",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "        return results",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 40,
          "end_line": 59,
          "functions": [],
          "simplified_code": [
            {
              "lineno": 40,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 41,
              "line": "        credentials: CredentialsMetaInput["
            },
            {
              "lineno": 42,
              "line": "            Literal[ProviderName.GOOGLE_MAPS], Literal[\"api_key\"]"
            },
            {
              "lineno": 43,
              "line": "        ] = CredentialsField(description=\"Google Maps API Key\")"
            },
            {
              "lineno": 44,
              "line": "        query: str = SchemaField("
            },
            {
              "lineno": 45,
              "line": "            description=\"Search query for local businesses\","
            },
            {
              "lineno": 46,
              "line": "            placeholder=\"e.g., 'restaurants in New York'\","
            },
            {
              "lineno": 47,
              "line": "        )"
            },
            {
              "lineno": 48,
              "line": "        radius: int = SchemaField("
            },
            {
              "lineno": 49,
              "line": "            description=\"Search radius in meters (max 50000)\","
            },
            {
              "lineno": 50,
              "line": "            default=5000,"
            },
            {
              "lineno": 51,
              "line": "            ge=1,"
            },
            {
              "lineno": 52,
              "line": "            le=50000,"
            },
            {
              "lineno": 53,
              "line": "        )"
            },
            {
              "lineno": 54,
              "line": "        max_results: int = SchemaField("
            },
            {
              "lineno": 55,
              "line": "            description=\"Maximum number of results to return (max 60)\","
            },
            {
              "lineno": 56,
              "line": "            default=20,"
            },
            {
              "lineno": 57,
              "line": "            ge=1,"
            },
            {
              "lineno": 58,
              "line": "            le=60,"
            },
            {
              "lineno": 59,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.GOOGLE_MAPS], Literal[\"api_key\"]\n        ] = CredentialsField(description=\"Google Maps API Key\")\n        query: str = SchemaField(\n            description=\"Search query for local businesses\",\n            placeholder=\"e.g., 'restaurants in New York'\",\n        )\n        radius: int = SchemaField(\n            description=\"Search radius in meters (max 50000)\",\n            default=5000,\n            ge=1,\n            le=50000,\n        )\n        max_results: int = SchemaField(\n            description=\"Maximum number of results to return (max 60)\",\n            default=20,\n            ge=1,\n            le=60,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 61,
          "end_line": 63,
          "functions": [],
          "simplified_code": [
            {
              "lineno": 61,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 62,
              "line": "        place: Place = SchemaField(description=\"Place found\")"
            },
            {
              "lineno": 63,
              "line": "        error: str = SchemaField(description=\"Error message if the search failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        place: Place = SchemaField(description=\"Place found\")\n        error: str = SchemaField(description=\"Error message if the search failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 39,
          "line": "class GoogleMapsSearchBlock(Block):"
        },
        {
          "lineno": 60,
          "line": ""
        },
        {
          "lineno": 64,
          "line": ""
        },
        {
          "lineno": 105,
          "line": ""
        },
        {
          "lineno": 117,
          "line": ""
        },
        {
          "lineno": 121,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from typing import Literal"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import googlemaps"
    },
    {
      "lineno": 4,
      "line": "from pydantic import BaseModel, SecretStr"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 7,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 8,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 9,
      "line": "    CredentialsField,"
    },
    {
      "lineno": 10,
      "line": "    CredentialsMetaInput,"
    },
    {
      "lineno": 11,
      "line": "    SchemaField,"
    },
    {
      "lineno": 12,
      "line": ")"
    },
    {
      "lineno": 13,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "TEST_CREDENTIALS = APIKeyCredentials("
    },
    {
      "lineno": 16,
      "line": "    id=\"01234567-89ab-cdef-0123-456789abcdef\","
    },
    {
      "lineno": 17,
      "line": "    provider=\"google_maps\","
    },
    {
      "lineno": 18,
      "line": "    api_key=SecretStr(\"mock-google-maps-api-key\"),"
    },
    {
      "lineno": 19,
      "line": "    title=\"Mock Google Maps API key\","
    },
    {
      "lineno": 20,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 21,
      "line": ")"
    },
    {
      "lineno": 22,
      "line": "TEST_CREDENTIALS_INPUT = {"
    },
    {
      "lineno": 23,
      "line": "    \"provider\": TEST_CREDENTIALS.provider,"
    },
    {
      "lineno": 24,
      "line": "    \"id\": TEST_CREDENTIALS.id,"
    },
    {
      "lineno": 25,
      "line": "    \"type\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 26,
      "line": "    \"title\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 27,
      "line": "}"
    },
    {
      "lineno": 28,
      "line": ""
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 37,
      "line": ""
    },
    {
      "lineno": 38,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from typing import Literal\nimport googlemaps\nfrom pydantic import BaseModel, SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"google_maps\",\n    api_key=SecretStr(\"mock-google-maps-api-key\"),\n    title=\"Mock Google Maps API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
      "successors": []
    }
  ]
}