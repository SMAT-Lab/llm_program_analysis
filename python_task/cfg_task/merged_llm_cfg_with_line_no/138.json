{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 172,
  "functions": [],
  "classes": [
    {
      "name": "CreateTalkingAvatarVideoBlock",
      "type": "class",
      "start_line": 31,
      "end_line": 172,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 77,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 77,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 78,
              "line": "        super().__init__("
            },
            {
              "lineno": 79,
              "line": "            id=\"98c6f503-8c47-4b1c-a96d-351fc7c87dab\","
            },
            {
              "lineno": 80,
              "line": "            description=\"This block integrates with D-ID to create video clips and retrieve their URLs.\","
            },
            {
              "lineno": 81,
              "line": "            categories={BlockCategory.AI},"
            },
            {
              "lineno": 82,
              "line": "            input_schema=CreateTalkingAvatarVideoBlock.Input,"
            },
            {
              "lineno": 83,
              "line": "            output_schema=CreateTalkingAvatarVideoBlock.Output,"
            },
            {
              "lineno": 84,
              "line": "            test_input={"
            },
            {
              "lineno": 85,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 86,
              "line": "                \"script_input\": \"Welcome to AutoGPT\","
            },
            {
              "lineno": 87,
              "line": "                \"voice_id\": \"en-US-JennyNeural\","
            },
            {
              "lineno": 88,
              "line": "                \"presenter_id\": \"amy-Aq6OmGZnMt\","
            },
            {
              "lineno": 89,
              "line": "                \"driver_id\": \"Vcq0R4a8F0\","
            },
            {
              "lineno": 90,
              "line": "                \"result_format\": \"mp4\","
            },
            {
              "lineno": 91,
              "line": "                \"crop_type\": \"wide\","
            },
            {
              "lineno": 92,
              "line": "                \"subtitles\": False,"
            },
            {
              "lineno": 93,
              "line": "                \"ssml\": False,"
            },
            {
              "lineno": 94,
              "line": "                \"max_polling_attempts\": 5,"
            },
            {
              "lineno": 95,
              "line": "                \"polling_interval\": 5,"
            },
            {
              "lineno": 96,
              "line": "            },"
            },
            {
              "lineno": 97,
              "line": "            test_output=["
            },
            {
              "lineno": 98,
              "line": "                ("
            },
            {
              "lineno": 99,
              "line": "                    \"video_url\","
            },
            {
              "lineno": 100,
              "line": "                    \"https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video\","
            },
            {
              "lineno": 101,
              "line": "                ),"
            },
            {
              "lineno": 102,
              "line": "            ],"
            },
            {
              "lineno": 103,
              "line": "            test_mock={"
            },
            {
              "lineno": 104,
              "line": "                \"create_clip\": lambda *args, **kwargs: {"
            },
            {
              "lineno": 105,
              "line": "                    \"id\": \"abcd1234-5678-efgh-ijkl-mnopqrstuvwx\","
            },
            {
              "lineno": 106,
              "line": "                    \"status\": \"created\","
            },
            {
              "lineno": 107,
              "line": "                },"
            },
            {
              "lineno": 108,
              "line": "                \"get_clip_status\": lambda *args, **kwargs: {"
            },
            {
              "lineno": 109,
              "line": "                    \"status\": \"done\","
            },
            {
              "lineno": 110,
              "line": "                    \"result_url\": \"https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video\","
            },
            {
              "lineno": 111,
              "line": "                },"
            },
            {
              "lineno": 112,
              "line": "            },"
            },
            {
              "lineno": 113,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 114,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"98c6f503-8c47-4b1c-a96d-351fc7c87dab\",\n            description=\"This block integrates with D-ID to create video clips and retrieve their URLs.\",\n            categories={BlockCategory.AI},\n            input_schema=CreateTalkingAvatarVideoBlock.Input,\n            output_schema=CreateTalkingAvatarVideoBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"script_input\": \"Welcome to AutoGPT\",\n                \"voice_id\": \"en-US-JennyNeural\",\n                \"presenter_id\": \"amy-Aq6OmGZnMt\",\n                \"driver_id\": \"Vcq0R4a8F0\",\n                \"result_format\": \"mp4\",\n                \"crop_type\": \"wide\",\n                \"subtitles\": False,\n                \"ssml\": False,\n                \"max_polling_attempts\": 5,\n                \"polling_interval\": 5,\n            },\n            test_output=[\n                (\n                    \"video_url\",\n                    \"https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video\",\n                ),\n            ],\n            test_mock={\n                \"create_clip\": lambda *args, **kwargs: {\n                    \"id\": \"abcd1234-5678-efgh-ijkl-mnopqrstuvwx\",\n                    \"status\": \"created\",\n                },\n                \"get_clip_status\": lambda *args, **kwargs: {\n                    \"status\": \"done\",\n                    \"result_url\": \"https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video\",\n                },\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "create_clip",
          "type": "function",
          "start_line": 116,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 116,
              "line": "    def create_clip(self, api_key: SecretStr, payload: dict) -> dict:"
            },
            {
              "lineno": 117,
              "line": "        url = \"https://api.d-id.com/clips\""
            },
            {
              "lineno": 118,
              "line": "        headers = {"
            },
            {
              "lineno": 119,
              "line": "            \"accept\": \"application/json\","
            },
            {
              "lineno": 120,
              "line": "            \"content-type\": \"application/json\","
            },
            {
              "lineno": 121,
              "line": "            \"authorization\": f\"Basic {api_key.get_secret_value()}\","
            },
            {
              "lineno": 122,
              "line": "        }"
            },
            {
              "lineno": 123,
              "line": "        response = requests.post(url, json=payload, headers=headers)"
            },
            {
              "lineno": 124,
              "line": "        return response.json()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def create_clip(self, api_key: SecretStr, payload: dict) -> dict:\n        url = \"https://api.d-id.com/clips\"\n        headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Basic {api_key.get_secret_value()}\",\n        }\n        response = requests.post(url, json=payload, headers=headers)\n        return response.json()",
              "successors": []
            }
          ]
        },
        {
          "name": "get_clip_status",
          "type": "function",
          "start_line": 126,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 126,
              "line": "    def get_clip_status(self, api_key: SecretStr, clip_id: str) -> dict:"
            },
            {
              "lineno": 127,
              "line": "        url = f\"https://api.d-id.com/clips/{clip_id}\""
            },
            {
              "lineno": 128,
              "line": "        headers = {"
            },
            {
              "lineno": 129,
              "line": "            \"accept\": \"application/json\","
            },
            {
              "lineno": 130,
              "line": "            \"authorization\": f\"Basic {api_key.get_secret_value()}\","
            },
            {
              "lineno": 131,
              "line": "        }"
            },
            {
              "lineno": 132,
              "line": "        response = requests.get(url, headers=headers)"
            },
            {
              "lineno": 133,
              "line": "        return response.json()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def get_clip_status(self, api_key: SecretStr, clip_id: str) -> dict:\n        url = f\"https://api.d-id.com/clips/{clip_id}\"\n        headers = {\n            \"accept\": \"application/json\",\n            \"authorization\": f\"Basic {api_key.get_secret_value()}\",\n        }\n        response = requests.get(url, headers=headers)\n        return response.json()",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 135,
          "end_line": 172,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 135,
              "line": "    def run("
            },
            {
              "lineno": 136,
              "line": "        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs"
            },
            {
              "lineno": 137,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 138,
              "line": "        # Create the clip"
            },
            {
              "lineno": 139,
              "line": "        payload = {"
            },
            {
              "lineno": 140,
              "line": "            \"script\": {"
            },
            {
              "lineno": 141,
              "line": "                \"type\": \"text\","
            },
            {
              "lineno": 142,
              "line": "                \"subtitles\": str(input_data.subtitles).lower(),"
            },
            {
              "lineno": 143,
              "line": "                \"provider\": {"
            },
            {
              "lineno": 144,
              "line": "                    \"type\": input_data.provider,"
            },
            {
              "lineno": 145,
              "line": "                    \"voice_id\": input_data.voice_id,"
            },
            {
              "lineno": 146,
              "line": "                },"
            },
            {
              "lineno": 147,
              "line": "                \"ssml\": str(input_data.ssml).lower(),"
            },
            {
              "lineno": 148,
              "line": "                \"input\": input_data.script_input,"
            },
            {
              "lineno": 149,
              "line": "            },"
            },
            {
              "lineno": 150,
              "line": "            \"config\": {\"result_format\": input_data.result_format},"
            },
            {
              "lineno": 151,
              "line": "            \"presenter_config\": {\"crop\": {\"type\": input_data.crop_type}},"
            },
            {
              "lineno": 152,
              "line": "            \"presenter_id\": input_data.presenter_id,"
            },
            {
              "lineno": 153,
              "line": "            \"driver_id\": input_data.driver_id,"
            },
            {
              "lineno": 154,
              "line": "        }"
            },
            {
              "lineno": 155,
              "line": ""
            },
            {
              "lineno": 156,
              "line": "        response = self.create_clip(credentials.api_key, payload)"
            },
            {
              "lineno": 157,
              "line": "        clip_id = response[\"id\"]"
            },
            {
              "lineno": 158,
              "line": ""
            },
            {
              "lineno": 159,
              "line": "        # Poll for clip status"
            },
            {
              "lineno": 160,
              "line": "        for _ in range(input_data.max_polling_attempts):"
            },
            {
              "lineno": 161,
              "line": "            status_response = self.get_clip_status(credentials.api_key, clip_id)"
            },
            {
              "lineno": 162,
              "line": "            if status_response[\"status\"] == \"done\":"
            },
            {
              "lineno": 163,
              "line": "                yield \"video_url\", status_response[\"result_url\"]"
            },
            {
              "lineno": 164,
              "line": "                return"
            },
            {
              "lineno": 165,
              "line": "            elif status_response[\"status\"] == \"error\":"
            },
            {
              "lineno": 166,
              "line": "                raise RuntimeError("
            },
            {
              "lineno": 167,
              "line": "                    f\"Clip creation failed: {status_response.get('error', 'Unknown error')}\""
            },
            {
              "lineno": 168,
              "line": "                )"
            },
            {
              "lineno": 169,
              "line": ""
            },
            {
              "lineno": 170,
              "line": "            time.sleep(input_data.polling_interval)"
            },
            {
              "lineno": 171,
              "line": ""
            },
            {
              "lineno": 172,
              "line": "        raise TimeoutError(\"Clip creation timed out\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        # Create the clip\n        payload = {\n            \"script\": {\n                \"type\": \"text\",\n                \"subtitles\": str(input_data.subtitles).lower(),\n                \"provider\": {\n                    \"type\": input_data.provider,\n                    \"voice_id\": input_data.voice_id,\n                },\n                \"ssml\": str(input_data.ssml).lower(),\n                \"input\": input_data.script_input,\n            },\n            \"config\": {\"result_format\": input_data.result_format},\n            \"presenter_config\": {\"crop\": {\"type\": input_data.crop_type}},\n            \"presenter_id\": input_data.presenter_id,\n            \"driver_id\": input_data.driver_id,\n        }\n        response = self.create_clip(credentials.api_key, payload)\n        clip_id = response[\"id\"]",
              "successors": [
                {
                  "id": 3,
                  "label": "        for _ in range(input_data.max_polling_attempts):\n            status_response = self.get_clip_status(credentials.api_key, clip_id)\n            if status_response[\"status\"] == \"done\":\n                yield \"video_url\", status_response[\"result_url\"]\n                return\n            elif status_response[\"status\"] == \"error\":\n                raise RuntimeError(\n                    f\"Clip creation failed: {status_response.get('error', 'Unknown error')}\"\n                )\n\n            time.sleep(input_data.polling_interval)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        raise TimeoutError(\"Clip creation timed out\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 32,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 32,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 33,
              "line": "        credentials: CredentialsMetaInput["
            },
            {
              "lineno": 34,
              "line": "            Literal[ProviderName.D_ID], Literal[\"api_key\"]"
            },
            {
              "lineno": 35,
              "line": "        ] = CredentialsField("
            },
            {
              "lineno": 36,
              "line": "            description=\"The D-ID integration can be used with \""
            },
            {
              "lineno": 37,
              "line": "            \"any API key with sufficient permissions for the blocks it is used on.\","
            },
            {
              "lineno": 38,
              "line": "        )"
            },
            {
              "lineno": 39,
              "line": "        script_input: str = SchemaField("
            },
            {
              "lineno": 40,
              "line": "            description=\"The text input for the script\","
            },
            {
              "lineno": 41,
              "line": "            placeholder=\"Welcome to AutoGPT\","
            },
            {
              "lineno": 42,
              "line": "        )"
            },
            {
              "lineno": 43,
              "line": "        provider: Literal[\"microsoft\", \"elevenlabs\", \"amazon\"] = SchemaField("
            },
            {
              "lineno": 44,
              "line": "            description=\"The voice provider to use\", default=\"microsoft\""
            },
            {
              "lineno": 45,
              "line": "        )"
            },
            {
              "lineno": 46,
              "line": "        voice_id: str = SchemaField("
            },
            {
              "lineno": 47,
              "line": "            description=\"The voice ID to use, get list of voices [here](https://docs.agpt.co/server/d_id)\","
            },
            {
              "lineno": 48,
              "line": "            default=\"en-US-JennyNeural\","
            },
            {
              "lineno": 49,
              "line": "        )"
            },
            {
              "lineno": 50,
              "line": "        presenter_id: str = SchemaField("
            },
            {
              "lineno": 51,
              "line": "            description=\"The presenter ID to use\", default=\"amy-Aq6OmGZnMt\""
            },
            {
              "lineno": 52,
              "line": "        )"
            },
            {
              "lineno": 53,
              "line": "        driver_id: str = SchemaField("
            },
            {
              "lineno": 54,
              "line": "            description=\"The driver ID to use\", default=\"Vcq0R4a8F0\""
            },
            {
              "lineno": 55,
              "line": "        )"
            },
            {
              "lineno": 56,
              "line": "        result_format: Literal[\"mp4\", \"gif\", \"wav\"] = SchemaField("
            },
            {
              "lineno": 57,
              "line": "            description=\"The desired result format\", default=\"mp4\""
            },
            {
              "lineno": 58,
              "line": "        )"
            },
            {
              "lineno": 59,
              "line": "        crop_type: Literal[\"wide\", \"square\", \"vertical\"] = SchemaField("
            },
            {
              "lineno": 60,
              "line": "            description=\"The crop type for the presenter\", default=\"wide\""
            },
            {
              "lineno": 61,
              "line": "        )"
            },
            {
              "lineno": 62,
              "line": "        subtitles: bool = SchemaField("
            },
            {
              "lineno": 63,
              "line": "            description=\"Whether to include subtitles\", default=False"
            },
            {
              "lineno": 64,
              "line": "        )"
            },
            {
              "lineno": 65,
              "line": "        ssml: bool = SchemaField(description=\"Whether the input is SSML\", default=False)"
            },
            {
              "lineno": 66,
              "line": "        max_polling_attempts: int = SchemaField("
            },
            {
              "lineno": 67,
              "line": "            description=\"Maximum number of polling attempts\", default=30, ge=5"
            },
            {
              "lineno": 68,
              "line": "        )"
            },
            {
              "lineno": 69,
              "line": "        polling_interval: int = SchemaField("
            },
            {
              "lineno": 70,
              "line": "            description=\"Interval between polling attempts in seconds\", default=10, ge=5"
            },
            {
              "lineno": 71,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.D_ID], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The D-ID integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        script_input: str = SchemaField(\n            description=\"The text input for the script\",\n            placeholder=\"Welcome to AutoGPT\",\n        )\n        provider: Literal[\"microsoft\", \"elevenlabs\", \"amazon\"] = SchemaField(\n            description=\"The voice provider to use\", default=\"microsoft\"\n        )\n        voice_id: str = SchemaField(\n            description=\"The voice ID to use, get list of voices [here](https://docs.agpt.co/server/d_id)\",\n            default=\"en-US-JennyNeural\",\n        )\n        presenter_id: str = SchemaField(\n            description=\"The presenter ID to use\", default=\"amy-Aq6OmGZnMt\"\n        )\n        driver_id: str = SchemaField(\n            description=\"The driver ID to use\", default=\"Vcq0R4a8F0\"\n        )\n        result_format: Literal[\"mp4\", \"gif\", \"wav\"] = SchemaField(\n            description=\"The desired result format\", default=\"mp4\"\n        )\n        crop_type: Literal[\"wide\", \"square\", \"vertical\"] = SchemaField(\n            description=\"The crop type for the presenter\", default=\"wide\"\n        )\n        subtitles: bool = SchemaField(\n            description=\"Whether to include subtitles\", default=False\n        )\n        ssml: bool = SchemaField(description=\"Whether the input is SSML\", default=False)\n        max_polling_attempts: int = SchemaField(\n            description=\"Maximum number of polling attempts\", default=30, ge=5\n        )\n        polling_interval: int = SchemaField(\n            description=\"Interval between polling attempts in seconds\", default=10, ge=5\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 73,
          "end_line": 75,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 73,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 74,
              "line": "        video_url: str = SchemaField(description=\"The URL of the created video\")"
            },
            {
              "lineno": 75,
              "line": "        error: str = SchemaField(description=\"Error message if the request failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        video_url: str = SchemaField(description=\"The URL of the created video\")\n        error: str = SchemaField(description=\"Error message if the request failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 31,
          "line": "class CreateTalkingAvatarVideoBlock(Block):"
        },
        {
          "lineno": 72,
          "line": ""
        },
        {
          "lineno": 76,
          "line": ""
        },
        {
          "lineno": 115,
          "line": ""
        },
        {
          "lineno": 125,
          "line": ""
        },
        {
          "lineno": 134,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class CreateTalkingAvatarVideoBlock(Block):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import time"
    },
    {
      "lineno": 2,
      "line": "from typing import Literal"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "from pydantic import SecretStr"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 7,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 8,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 9,
      "line": "    CredentialsField,"
    },
    {
      "lineno": 10,
      "line": "    CredentialsMetaInput,"
    },
    {
      "lineno": 11,
      "line": "    SchemaField,"
    },
    {
      "lineno": 12,
      "line": ")"
    },
    {
      "lineno": 13,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 14,
      "line": "from backend.util.request import requests"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": "TEST_CREDENTIALS = APIKeyCredentials("
    },
    {
      "lineno": 17,
      "line": "    id=\"01234567-89ab-cdef-0123-456789abcdef\","
    },
    {
      "lineno": 18,
      "line": "    provider=\"d_id\","
    },
    {
      "lineno": 19,
      "line": "    api_key=SecretStr(\"mock-d-id-api-key\"),"
    },
    {
      "lineno": 20,
      "line": "    title=\"Mock D-ID API key\","
    },
    {
      "lineno": 21,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 22,
      "line": ")"
    },
    {
      "lineno": 23,
      "line": "TEST_CREDENTIALS_INPUT = {"
    },
    {
      "lineno": 24,
      "line": "    \"provider\": TEST_CREDENTIALS.provider,"
    },
    {
      "lineno": 25,
      "line": "    \"id\": TEST_CREDENTIALS.id,"
    },
    {
      "lineno": 26,
      "line": "    \"type\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 27,
      "line": "    \"title\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 28,
      "line": "}"
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import time\nfrom typing import Literal\n\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"d_id\",\n    api_key=SecretStr(\"mock-d-id-api-key\"),\n    title=\"Mock D-ID API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n",
      "successors": []
    }
  ]
}