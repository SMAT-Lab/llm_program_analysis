{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 154,
  "functions": [
    {
      "name": "mock_websocket",
      "type": "function",
      "start_line": 18,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 18,
          "line": "def mock_websocket() -> AsyncMock:"
        },
        {
          "lineno": 19,
          "line": "    return AsyncMock(spec=WebSocket)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def mock_websocket() -> AsyncMock:\n    return AsyncMock(spec=WebSocket)",
          "successors": []
        }
      ]
    },
    {
      "name": "mock_manager",
      "type": "function",
      "start_line": 23,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 23,
          "line": "def mock_manager() -> AsyncMock:"
        },
        {
          "lineno": 24,
          "line": "    return AsyncMock(spec=ConnectionManager)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)",
          "successors": []
        }
      ]
    },
    {
      "name": "test_websocket_router_subscribe",
      "type": "function",
      "start_line": 28,
      "end_line": 47,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 28,
          "line": "async def test_websocket_router_subscribe("
        },
        {
          "lineno": 29,
          "line": "    mock_websocket: AsyncMock, mock_manager: AsyncMock"
        },
        {
          "lineno": 30,
          "line": ") -> None:"
        },
        {
          "lineno": 31,
          "line": "    mock_websocket.receive_text.side_effect = ["
        },
        {
          "lineno": 32,
          "line": "        WsMessage("
        },
        {
          "lineno": 33,
          "line": "            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}"
        },
        {
          "lineno": 34,
          "line": "        ).model_dump_json(),"
        },
        {
          "lineno": 35,
          "line": "        WebSocketDisconnect(),"
        },
        {
          "lineno": 36,
          "line": "    ]"
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "    await websocket_router("
        },
        {
          "lineno": 39,
          "line": "        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)"
        },
        {
          "lineno": 40,
          "line": "    )"
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 42,
          "line": "    mock_manager.connect.assert_called_once_with(mock_websocket)"
        },
        {
          "lineno": 43,
          "line": "    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)"
        },
        {
          "lineno": 44,
          "line": "    mock_websocket.send_text.assert_called_once()"
        },
        {
          "lineno": 45,
          "line": "    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]"
        },
        {
          "lineno": 46,
          "line": "    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]"
        },
        {
          "lineno": 47,
          "line": "    mock_manager.disconnect.assert_called_once_with(mock_websocket)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\nmock_websocket.receive_text.side_effect = [\n    WsMessage(\n        method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n    ).model_dump_json(),\n    WebSocketDisconnect(),\n]",
          "successors": [
            {
              "id": 3,
              "label": "await websocket_router(\n    cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n)\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\nmock_manager.disconnect.assert_called_once_with(mock_websocket)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_websocket_router_unsubscribe",
      "type": "function",
      "start_line": 51,
      "end_line": 70,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 51,
          "line": "async def test_websocket_router_unsubscribe("
        },
        {
          "lineno": 52,
          "line": "    mock_websocket: AsyncMock, mock_manager: AsyncMock"
        },
        {
          "lineno": 53,
          "line": ") -> None:"
        },
        {
          "lineno": 54,
          "line": "    mock_websocket.receive_text.side_effect = ["
        },
        {
          "lineno": 55,
          "line": "        WsMessage("
        },
        {
          "lineno": 56,
          "line": "            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}"
        },
        {
          "lineno": 57,
          "line": "        ).model_dump_json(),"
        },
        {
          "lineno": 58,
          "line": "        WebSocketDisconnect(),"
        },
        {
          "lineno": 59,
          "line": "    ]"
        },
        {
          "lineno": 60,
          "line": ""
        },
        {
          "lineno": 61,
          "line": "    await websocket_router("
        },
        {
          "lineno": 62,
          "line": "        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)"
        },
        {
          "lineno": 63,
          "line": "    )"
        },
        {
          "lineno": 64,
          "line": ""
        },
        {
          "lineno": 65,
          "line": "    mock_manager.connect.assert_called_once_with(mock_websocket)"
        },
        {
          "lineno": 66,
          "line": "    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)"
        },
        {
          "lineno": 67,
          "line": "    mock_websocket.send_text.assert_called_once()"
        },
        {
          "lineno": 68,
          "line": "    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]"
        },
        {
          "lineno": 69,
          "line": "    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]"
        },
        {
          "lineno": 70,
          "line": "    mock_manager.disconnect.assert_called_once_with(mock_websocket)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def test_websocket_router_unsubscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\nmock_websocket.receive_text.side_effect = [\n    WsMessage(\n        method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n    ).model_dump_json(),\n    WebSocketDisconnect(),\n]",
          "successors": [
            {
              "id": 3,
              "label": "await websocket_router(\n    cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n)\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\nmock_manager.disconnect.assert_called_once_with(mock_websocket)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_websocket_router_invalid_method",
      "type": "function",
      "start_line": 74,
      "end_line": 90,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 74,
          "line": "async def test_websocket_router_invalid_method("
        },
        {
          "lineno": 75,
          "line": "    mock_websocket: AsyncMock, mock_manager: AsyncMock"
        },
        {
          "lineno": 76,
          "line": ") -> None:"
        },
        {
          "lineno": 77,
          "line": "    mock_websocket.receive_text.side_effect = ["
        },
        {
          "lineno": 78,
          "line": "        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),"
        },
        {
          "lineno": 79,
          "line": "        WebSocketDisconnect(),"
        },
        {
          "lineno": 80,
          "line": "    ]"
        },
        {
          "lineno": 81,
          "line": ""
        },
        {
          "lineno": 82,
          "line": "    await websocket_router("
        },
        {
          "lineno": 83,
          "line": "        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)"
        },
        {
          "lineno": 84,
          "line": "    )"
        },
        {
          "lineno": 85,
          "line": ""
        },
        {
          "lineno": 86,
          "line": "    mock_manager.connect.assert_called_once_with(mock_websocket)"
        },
        {
          "lineno": 87,
          "line": "    mock_websocket.send_text.assert_called_once()"
        },
        {
          "lineno": 88,
          "line": "    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]"
        },
        {
          "lineno": 89,
          "line": "    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]"
        },
        {
          "lineno": 90,
          "line": "    mock_manager.disconnect.assert_called_once_with(mock_websocket)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\nmock_websocket.receive_text.side_effect = [\n    WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n    WebSocketDisconnect(),\n]",
          "successors": [
            {
              "id": 3,
              "label": "await websocket_router(\n    cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n)\nmock_manager.connect.assert_called_once_with(mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\\\"method\\\":\\\"error\\\"' in mock_websocket.send_text.call_args[0][0]\nassert '\\\"success\\\":false' in mock_websocket.send_text.call_args[0][0]\nmock_manager.disconnect.assert_called_once_with(mock_websocket)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_handle_subscribe_success",
      "type": "function",
      "start_line": 94,
      "end_line": 106,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 94,
          "line": "async def test_handle_subscribe_success("
        },
        {
          "lineno": 95,
          "line": "    mock_websocket: AsyncMock, mock_manager: AsyncMock"
        },
        {
          "lineno": 96,
          "line": ") -> None:"
        },
        {
          "lineno": 97,
          "line": "    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})"
        },
        {
          "lineno": 98,
          "line": ""
        },
        {
          "lineno": 99,
          "line": "    await handle_subscribe("
        },
        {
          "lineno": 100,
          "line": "        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message"
        },
        {
          "lineno": 101,
          "line": "    )"
        },
        {
          "lineno": 102,
          "line": ""
        },
        {
          "lineno": 103,
          "line": "    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)"
        },
        {
          "lineno": 104,
          "line": "    mock_websocket.send_text.assert_called_once()"
        },
        {
          "lineno": 105,
          "line": "    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]"
        },
        {
          "lineno": 106,
          "line": "    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def test_handle_subscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\nawait handle_subscribe(\n    cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n)",
          "successors": [
            {
              "id": 3,
              "label": "mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\nmock_websocket.send_text.assert_called_once()\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_handle_subscribe_missing_data",
      "type": "function",
      "start_line": 110,
      "end_line": 122,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 110,
          "line": "async def test_handle_subscribe_missing_data("
        },
        {
          "lineno": 111,
          "line": "    mock_websocket: AsyncMock, mock_manager: AsyncMock"
        },
        {
          "lineno": 112,
          "line": ") -> None:"
        },
        {
          "lineno": 113,
          "line": "    message = WsMessage(method=Methods.SUBSCRIBE)"
        },
        {
          "lineno": 114,
          "line": ""
        },
        {
          "lineno": 115,
          "line": "    await handle_subscribe("
        },
        {
          "lineno": 116,
          "line": "        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message"
        },
        {
          "lineno": 117,
          "line": "    )"
        },
        {
          "lineno": 118,
          "line": ""
        },
        {
          "lineno": 119,
          "line": "    mock_manager.subscribe.assert_not_called()"
        },
        {
          "lineno": 120,
          "line": "    mock_websocket.send_text.assert_called_once()"
        },
        {
          "lineno": 121,
          "line": "    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]"
        },
        {
          "lineno": 122,
          "line": "    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE)\nawait handle_subscribe(\n    cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n)",
          "successors": [
            {
              "id": 3,
              "label": "mock_manager.subscribe.assert_not_called()\nmock_websocket.send_text.assert_called_once()",
              "successors": [
                {
                  "id": 5,
                  "label": "assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\nassert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_handle_unsubscribe_success",
      "type": "function",
      "start_line": 126,
      "end_line": 138,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 126,
          "line": "async def test_handle_unsubscribe_success("
        },
        {
          "lineno": 127,
          "line": "    mock_websocket: AsyncMock, mock_manager: AsyncMock"
        },
        {
          "lineno": 128,
          "line": ") -> None:"
        },
        {
          "lineno": 129,
          "line": "    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})"
        },
        {
          "lineno": 130,
          "line": ""
        },
        {
          "lineno": 131,
          "line": "    await handle_unsubscribe("
        },
        {
          "lineno": 132,
          "line": "        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message"
        },
        {
          "lineno": 133,
          "line": "    )"
        },
        {
          "lineno": 134,
          "line": ""
        },
        {
          "lineno": 135,
          "line": "    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)"
        },
        {
          "lineno": 136,
          "line": "    mock_websocket.send_text.assert_called_once()"
        },
        {
          "lineno": 137,
          "line": "    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]"
        },
        {
          "lineno": 138,
          "line": "    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def test_handle_unsubscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
          "successors": []
        }
      ]
    },
    {
      "name": "test_handle_unsubscribe_missing_data",
      "type": "function",
      "start_line": 142,
      "end_line": 154,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 142,
          "line": "async def test_handle_unsubscribe_missing_data("
        },
        {
          "lineno": 143,
          "line": "    mock_websocket: AsyncMock, mock_manager: AsyncMock"
        },
        {
          "lineno": 144,
          "line": ") -> None:"
        },
        {
          "lineno": 145,
          "line": "    message = WsMessage(method=Methods.UNSUBSCRIBE)"
        },
        {
          "lineno": 146,
          "line": ""
        },
        {
          "lineno": 147,
          "line": "    await handle_unsubscribe("
        },
        {
          "lineno": 148,
          "line": "        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message"
        },
        {
          "lineno": 149,
          "line": "    )"
        },
        {
          "lineno": 150,
          "line": ""
        },
        {
          "lineno": 151,
          "line": "    mock_manager.unsubscribe.assert_not_called()"
        },
        {
          "lineno": 152,
          "line": "    mock_websocket.send_text.assert_called_once()"
        },
        {
          "lineno": 153,
          "line": "    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]"
        },
        {
          "lineno": 154,
          "line": "    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\nmessage = WsMessage(method=Methods.UNSUBSCRIBE)",
          "successors": [
            {
              "id": 3,
              "label": "await handle_unsubscribe(\n    cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n)\nmock_manager.unsubscribe.assert_not_called()\nmock_websocket.send_text.assert_called_once()\nassert '\\\"method\\\":\\\"error\\\"' in mock_websocket.send_text.call_args[0][0]\nassert '\\\"success\\\":false' in mock_websocket.send_text.call_args[0][0]",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from typing import cast"
    },
    {
      "lineno": 2,
      "line": "from unittest.mock import AsyncMock"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "import pytest"
    },
    {
      "lineno": 5,
      "line": "from fastapi import WebSocket, WebSocketDisconnect"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "from backend.server.conn_manager import ConnectionManager"
    },
    {
      "lineno": 8,
      "line": "from backend.server.ws_api import ("
    },
    {
      "lineno": 9,
      "line": "    Methods,"
    },
    {
      "lineno": 10,
      "line": "    WsMessage,"
    },
    {
      "lineno": 11,
      "line": "    handle_subscribe,"
    },
    {
      "lineno": 12,
      "line": "    handle_unsubscribe,"
    },
    {
      "lineno": 13,
      "line": "    websocket_router,"
    },
    {
      "lineno": 14,
      "line": ")"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": "@pytest.fixture"
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 22,
      "line": "@pytest.fixture"
    },
    {
      "lineno": 25,
      "line": ""
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 27,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 48,
      "line": ""
    },
    {
      "lineno": 49,
      "line": ""
    },
    {
      "lineno": 50,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 71,
      "line": ""
    },
    {
      "lineno": 72,
      "line": ""
    },
    {
      "lineno": 73,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 91,
      "line": ""
    },
    {
      "lineno": 92,
      "line": ""
    },
    {
      "lineno": 93,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 107,
      "line": ""
    },
    {
      "lineno": 108,
      "line": ""
    },
    {
      "lineno": 109,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 123,
      "line": ""
    },
    {
      "lineno": 124,
      "line": ""
    },
    {
      "lineno": 125,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 139,
      "line": ""
    },
    {
      "lineno": 140,
      "line": ""
    },
    {
      "lineno": 141,
      "line": "@pytest.mark.asyncio"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from typing import cast\nfrom unittest.mock import AsyncMock\n\nimport pytest\nfrom fastapi import WebSocket, WebSocketDisconnect\n\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.ws_api import (\n    Methods,\n    WsMessage,\n    handle_subscribe,\n    handle_unsubscribe,\n    websocket_router,\n)\n\n\n@pytest.fixture\n\n\n",
      "successors": [
        {
          "id": 3,
          "label": "@pytest.fixture\n\n\n\n@pytest.mark.asyncio\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
          "successors": [
            {
              "id": 5,
              "label": "@pytest.mark.asyncio\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@pytest.mark.asyncio\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
              "successors": [
                {
                  "id": 7,
                  "label": "@pytest.mark.asyncio\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@pytest.mark.asyncio\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                  "successors": [
                    {
                      "id": 9,
                      "label": "@pytest.mark.asyncio\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@pytest.mark.asyncio",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}