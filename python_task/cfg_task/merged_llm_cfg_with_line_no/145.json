{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 117,
  "functions": [],
  "classes": [
    {
      "name": "Suit",
      "type": "class",
      "start_line": 6,
      "end_line": 11,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "class Suit(Enum):"
        },
        {
          "lineno": 7,
          "line": ""
        },
        {
          "lineno": 8,
          "line": "    HEART = 0"
        },
        {
          "lineno": 9,
          "line": "    DIAMOND = 1"
        },
        {
          "lineno": 10,
          "line": "    CLUBS = 2"
        },
        {
          "lineno": 11,
          "line": "    SPADE = 3"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Suit(Enum):\n\n    HEART = 0\n    DIAMOND = 1\n    CLUBS = 2\n    SPADE = 3",
          "successors": []
        }
      ]
    },
    {
      "name": "Card",
      "type": "class",
      "start_line": 14,
      "end_line": 29,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 16,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 16,
              "line": "    def __init__(self, value, suit):"
            },
            {
              "lineno": 17,
              "line": "        self.value = value"
            },
            {
              "lineno": 18,
              "line": "        self.suit = suit"
            },
            {
              "lineno": 19,
              "line": "        self.is_available = True"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": " def __init__(self, value, suit):\n self.value = value\n self.suit = suit\n self.is_available = True",
              "successors": []
            }
          ]
        },
        {
          "name": "value",
          "type": "function",
          "start_line": 23,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 23,
              "line": "    def value(self):"
            },
            {
              "lineno": 24,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def value(self):\n        pass",
              "successors": []
            }
          ]
        },
        {
          "name": "value",
          "type": "function",
          "start_line": 28,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    def value(self, other):"
            },
            {
              "lineno": 29,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def value(self, other):\n        pass",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 14,
          "line": "class Card(metaclass=ABCMeta):"
        },
        {
          "lineno": 15,
          "line": ""
        },
        {
          "lineno": 20,
          "line": ""
        },
        {
          "lineno": 21,
          "line": "    @property"
        },
        {
          "lineno": 22,
          "line": "    @abstractmethod"
        },
        {
          "lineno": 25,
          "line": ""
        },
        {
          "lineno": 26,
          "line": "    @value.setter"
        },
        {
          "lineno": 27,
          "line": "    @abstractmethod"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Card(metaclass=ABCMeta):\n    @property\n    @abstractmethod",
          "successors": [
            {
              "id": 3,
              "label": "    @value.setter\n    @abstractmethod",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "BlackJackCard",
      "type": "class",
      "start_line": 32,
      "end_line": 58,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 34,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    def __init__(self, value, suit):"
            },
            {
              "lineno": 35,
              "line": "        super(BlackJackCard, self).__init__(value, suit)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)",
              "successors": []
            }
          ]
        },
        {
          "name": "is_ace",
          "type": "function",
          "start_line": 37,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 37,
              "line": "    def is_ace(self):"
            },
            {
              "lineno": 38,
              "line": "        return True if self._value == 1 else False"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def is_ace(self):\n        return True if self._value == 1 else False",
              "successors": []
            }
          ]
        },
        {
          "name": "is_face_card",
          "type": "function",
          "start_line": 40,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 40,
              "line": "    def is_face_card(self):"
            },
            {
              "lineno": 41,
              "line": "        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\""
            },
            {
              "lineno": 42,
              "line": "        return True if 10 < self._value <= 13 else False"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False",
              "successors": []
            }
          ]
        },
        {
          "name": "value",
          "type": "function",
          "start_line": 45,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 45,
              "line": "    def value(self):"
            },
            {
              "lineno": 46,
              "line": "        if self.is_ace() == 1:"
            },
            {
              "lineno": 47,
              "line": "            return 1"
            },
            {
              "lineno": 48,
              "line": "        elif self.is_face_card():"
            },
            {
              "lineno": 49,
              "line": "            return 10"
            },
            {
              "lineno": 50,
              "line": "        else:"
            },
            {
              "lineno": 51,
              "line": "            return self._value"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def value(self):\n        if self.is_ace() == 1:\n            return 1",
              "successors": [
                {
                  "id": 3,
                  "label": "        elif self.is_face_card():\n            return 10\n        else:\n            return self._value",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "value",
          "type": "function",
          "start_line": 54,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 54,
              "line": "    def value(self, new_value):"
            },
            {
              "lineno": 55,
              "line": "        if 1 <= new_value <= 13:"
            },
            {
              "lineno": 56,
              "line": "            self._value = new_value"
            },
            {
              "lineno": 57,
              "line": "        else:"
            },
            {
              "lineno": 58,
              "line": "            raise ValueError('Invalid card value: {}'.format(new_value))"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value",
              "successors": [
                {
                  "id": 3,
                  "label": "        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 32,
          "line": "class BlackJackCard(Card):"
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 36,
          "line": ""
        },
        {
          "lineno": 39,
          "line": ""
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 44,
          "line": "    @property"
        },
        {
          "lineno": 52,
          "line": ""
        },
        {
          "lineno": 53,
          "line": "    @value.setter"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class BlackJackCard(Card):\n    @property",
          "successors": [
            {
              "id": 3,
              "label": "    @value.setter",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Hand",
      "type": "class",
      "start_line": 61,
      "end_line": 73,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 63,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 63,
              "line": "    def __init__(self, cards):"
            },
            {
              "lineno": 64,
              "line": "        self.cards = cards"
            }
          ],
          "blocks": []
        },
        {
          "name": "add_card",
          "type": "function",
          "start_line": 66,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 66,
              "line": "    def add_card(self, card):"
            },
            {
              "lineno": 67,
              "line": "        self.cards.append(card)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def add_card(self, card):\n        self.cards.append(card)",
              "successors": []
            }
          ]
        },
        {
          "name": "score",
          "type": "function",
          "start_line": 69,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 69,
              "line": "    def score(self):"
            },
            {
              "lineno": 70,
              "line": "        total_value = 0"
            },
            {
              "lineno": 71,
              "line": "        for card in self.cards:"
            },
            {
              "lineno": 72,
              "line": "            total_value += card.value"
            },
            {
              "lineno": 73,
              "line": "        return total_value"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def score(self):\n        total_value = 0\n        for card in self.cards:",
              "successors": [
                {
                  "id": 3,
                  "label": "            total_value += card.value",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        total_value = 0\n        for card in self.cards:",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "        return total_value",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 61,
          "line": "class Hand(object):"
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 65,
          "line": ""
        },
        {
          "lineno": 68,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Hand(object):",
          "successors": []
        }
      ]
    },
    {
      "name": "BlackJackHand",
      "type": "class",
      "start_line": 76,
      "end_line": 95,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 80,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 80,
              "line": "    def __init__(self, cards):"
            },
            {
              "lineno": 81,
              "line": "        super(BlackJackHand, self).__init__(cards)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)",
              "successors": []
            }
          ]
        },
        {
          "name": "score",
          "type": "function",
          "start_line": 83,
          "end_line": 91,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 83,
              "line": "    def score(self):"
            },
            {
              "lineno": 84,
              "line": "        min_over = sys.MAXSIZE"
            },
            {
              "lineno": 85,
              "line": "        max_under = -sys.MAXSIZE"
            },
            {
              "lineno": 86,
              "line": "        for score in self.possible_scores():"
            },
            {
              "lineno": 87,
              "line": "            if self.BLACKJACK < score < min_over:"
            },
            {
              "lineno": 88,
              "line": "                min_over = score"
            },
            {
              "lineno": 89,
              "line": "            elif max_under < score <= self.BLACKJACK:"
            },
            {
              "lineno": 90,
              "line": "                max_under = score"
            },
            {
              "lineno": 91,
              "line": "        return max_under if max_under != -sys.MAXSIZE else min_over"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE",
              "successors": [
                {
                  "id": 2,
                  "label": "        for score in self.possible_scores():",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            if self.BLACKJACK < score < min_over:\n                min_over = score",
                      "successors": [
                        {
                          "id": 4,
                          "label": "            elif max_under < score <= self.BLACKJACK:\n                max_under = score",
                          "successors": [
                            {
                              "id": 5,
                              "label": "        for score in self.possible_scores():",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "        return max_under if max_under != -sys.MAXSIZE else min_over",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "        return max_under if max_under != -sys.MAXSIZE else min_over",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "            elif max_under < score <= self.BLACKJACK:\n                max_under = score",
                      "successors": [
                        {
                          "id": 5,
                          "label": "        for score in self.possible_scores():",
                          "successors": [
                            {
                              "id": 6,
                              "label": "        return max_under if max_under != -sys.MAXSIZE else min_over",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "        return max_under if max_under != -sys.MAXSIZE else min_over",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "possible_scores",
          "type": "function",
          "start_line": 93,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 93,
              "line": "    def possible_scores(self):"
            },
            {
              "lineno": 94,
              "line": "        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\""
            },
            {
              "lineno": 95,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 76,
          "line": "class BlackJackHand(Hand):"
        },
        {
          "lineno": 77,
          "line": ""
        },
        {
          "lineno": 78,
          "line": "    BLACKJACK = 21"
        },
        {
          "lineno": 79,
          "line": ""
        },
        {
          "lineno": 82,
          "line": ""
        },
        {
          "lineno": 92,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "Deck",
      "type": "class",
      "start_line": 98,
      "end_line": 117,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 100,
          "end_line": 102,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 100,
              "line": "    def __init__(self, cards):"
            },
            {
              "lineno": 101,
              "line": "        self.cards = cards"
            },
            {
              "lineno": 102,
              "line": "        self.deal_index = 0"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0",
              "successors": []
            }
          ]
        },
        {
          "name": "remaining_cards",
          "type": "function",
          "start_line": 104,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 104,
              "line": "    def remaining_cards(self):"
            },
            {
              "lineno": 105,
              "line": "        return len(self.cards) - self.deal_index"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def remaining_cards(self):\n        return len(self.cards) - self.deal_index",
              "successors": []
            }
          ]
        },
        {
          "name": "deal_card",
          "type": "function",
          "start_line": 107,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 107,
              "line": "    def deal_card(self):"
            },
            {
              "lineno": 108,
              "line": "        try:"
            },
            {
              "lineno": 109,
              "line": "            card = self.cards[self.deal_index]"
            },
            {
              "lineno": 110,
              "line": "            card.is_available = False"
            },
            {
              "lineno": 111,
              "line": "            self.deal_index += 1"
            },
            {
              "lineno": 112,
              "line": "        except IndexError:"
            },
            {
              "lineno": 113,
              "line": "            return None"
            },
            {
              "lineno": 114,
              "line": "        return card"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1",
              "successors": [
                {
                  "id": 3,
                  "label": "        except IndexError:\n            return None",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "        return card",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "shuffle",
          "type": "function",
          "start_line": 116,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 116,
              "line": "    def shuffle(self):"
            },
            {
              "lineno": 117,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def shuffle(self):\n        pass",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 98,
          "line": "class Deck(object):"
        },
        {
          "lineno": 99,
          "line": ""
        },
        {
          "lineno": 103,
          "line": ""
        },
        {
          "lineno": 106,
          "line": ""
        },
        {
          "lineno": 115,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Deck(object):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from abc import ABCMeta, abstractmethod"
    },
    {
      "lineno": 2,
      "line": "from enum import Enum"
    },
    {
      "lineno": 3,
      "line": "import sys"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 30,
      "line": ""
    },
    {
      "lineno": 31,
      "line": ""
    },
    {
      "lineno": 59,
      "line": ""
    },
    {
      "lineno": 60,
      "line": ""
    },
    {
      "lineno": 74,
      "line": ""
    },
    {
      "lineno": 75,
      "line": ""
    },
    {
      "lineno": 96,
      "line": ""
    },
    {
      "lineno": 97,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\nimport sys",
      "successors": []
    }
  ]
}