{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 125,
  "functions": [],
  "classes": [
    {
      "name": "Slant3DTriggerBase",
      "type": "class",
      "start_line": 22,
      "end_line": 41,
      "functions": [
        {
          "name": "run",
          "type": "function",
          "start_line": 39,
          "end_line": 41,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 39,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 40,
              "line": "        yield \"payload\", input_data.payload"
            },
            {
              "lineno": 41,
              "line": "        yield \"order_id\", input_data.payload[\"orderId\"]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"payload\", input_data.payload\n        yield \"order_id\", input_data.payload[\"orderId\"]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 25,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 26,
              "line": "        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()"
            },
            {
              "lineno": 27,
              "line": "        # Webhook URL is handled by the webhook system"
            },
            {
              "lineno": 28,
              "line": "        payload: dict = SchemaField(hidden=True, default={})"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        # Webhook URL is handled by the webhook system\n        payload: dict = SchemaField(hidden=True, default={})",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 30,
          "end_line": 37,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 30,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 31,
              "line": "        payload: dict = SchemaField("
            },
            {
              "lineno": 32,
              "line": "            description=\"The complete webhook payload received from Slant3D\""
            },
            {
              "lineno": 33,
              "line": "        )"
            },
            {
              "lineno": 34,
              "line": "        order_id: str = SchemaField(description=\"The ID of the affected order\")"
            },
            {
              "lineno": 35,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 36,
              "line": "            description=\"Error message if payload processing failed\""
            },
            {
              "lineno": 37,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        payload: dict = SchemaField(\n            description=\"The complete webhook payload received from Slant3D\"\n        )\n        order_id: str = SchemaField(description=\"The ID of the affected order\")\n        error: str = SchemaField(\n            description=\"Error message if payload processing failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 22,
          "line": "class Slant3DTriggerBase:"
        },
        {
          "lineno": 23,
          "line": "    \"\"\"Base class for Slant3D webhook triggers\"\"\""
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 29,
          "line": ""
        },
        {
          "lineno": 38,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Slant3DTriggerBase:\n    \"\"\"Base class for Slant3D webhook triggers\"\"\"",
          "successors": []
        }
      ]
    },
    {
      "name": "Slant3DOrderWebhookBlock",
      "type": "class",
      "start_line": 44,
      "end_line": 125,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 69,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 69,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 70,
              "line": "        super().__init__("
            },
            {
              "lineno": 71,
              "line": "            id=\"8a74c2ad-0104-4640-962f-26c6b69e58cd\","
            },
            {
              "lineno": 72,
              "line": "            description=("
            },
            {
              "lineno": 73,
              "line": "                \"This block triggers on Slant3D order status updates and outputs \""
            },
            {
              "lineno": 74,
              "line": "                \"the event details, including tracking information when orders are shipped.\""
            },
            {
              "lineno": 75,
              "line": "            ),"
            },
            {
              "lineno": 76,
              "line": "            # All webhooks are currently subscribed to for all orders. This works for self hosted, but not for cloud hosted prod"
            },
            {
              "lineno": 77,
              "line": "            disabled=("
            },
            {
              "lineno": 78,
              "line": "                settings.Settings().config.behave_as == BehaveAs.CLOUD"
            },
            {
              "lineno": 79,
              "line": "                and settings.Settings().config.app_env != AppEnvironment.LOCAL"
            },
            {
              "lineno": 80,
              "line": "            ),"
            },
            {
              "lineno": 81,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 82,
              "line": "            input_schema=self.Input,"
            },
            {
              "lineno": 83,
              "line": "            output_schema=self.Output,"
            },
            {
              "lineno": 84,
              "line": "            webhook_config=BlockWebhookConfig("
            },
            {
              "lineno": 85,
              "line": "                provider=\"slant3d\","
            },
            {
              "lineno": 86,
              "line": "                webhook_type=\"orders\",  # Only one type for now"
            },
            {
              "lineno": 87,
              "line": "                resource_format=\"\",  # No resource format needed"
            },
            {
              "lineno": 88,
              "line": "                event_filter_input=\"events\","
            },
            {
              "lineno": 89,
              "line": "                event_format=\"order.{event}\","
            },
            {
              "lineno": 90,
              "line": "            ),"
            },
            {
              "lineno": 91,
              "line": "            test_input={"
            },
            {
              "lineno": 92,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 93,
              "line": "                \"events\": {\"shipped\": True},"
            },
            {
              "lineno": 94,
              "line": "                \"payload\": {"
            },
            {
              "lineno": 95,
              "line": "                    \"orderId\": \"1234567890\","
            },
            {
              "lineno": 96,
              "line": "                    \"status\": \"SHIPPED\","
            },
            {
              "lineno": 97,
              "line": "                    \"trackingNumber\": \"ABCDEF123456\","
            },
            {
              "lineno": 98,
              "line": "                    \"carrierCode\": \"usps\","
            },
            {
              "lineno": 99,
              "line": "                },"
            },
            {
              "lineno": 100,
              "line": "            },"
            },
            {
              "lineno": 101,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 102,
              "line": "            test_output=["
            },
            {
              "lineno": 103,
              "line": "                ("
            },
            {
              "lineno": 104,
              "line": "                    \"payload\","
            },
            {
              "lineno": 105,
              "line": "                    {"
            },
            {
              "lineno": 106,
              "line": "                        \"orderId\": \"1234567890\","
            },
            {
              "lineno": 107,
              "line": "                        \"status\": \"SHIPPED\","
            },
            {
              "lineno": 108,
              "line": "                        \"trackingNumber\": \"ABCDEF123456\","
            },
            {
              "lineno": 109,
              "line": "                        \"carrierCode\": \"usps\","
            },
            {
              "lineno": 110,
              "line": "                    },"
            },
            {
              "lineno": 111,
              "line": "                ),"
            },
            {
              "lineno": 112,
              "line": "                (\"order_id\", \"1234567890\"),"
            },
            {
              "lineno": 113,
              "line": "                (\"status\", \"SHIPPED\"),"
            },
            {
              "lineno": 114,
              "line": "                (\"tracking_number\", \"ABCDEF123456\"),"
            },
            {
              "lineno": 115,
              "line": "                (\"carrier_code\", \"usps\"),"
            },
            {
              "lineno": 116,
              "line": "            ],"
            },
            {
              "lineno": 117,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"8a74c2ad-0104-4640-962f-26c6b69e58cd\",\n            description=(\n                \"This block triggers on Slant3D order status updates and outputs \"\n                \"the event details, including tracking information when orders are shipped.\"\n            ),\n            # All webhooks are currently subscribed to for all orders. This works for self hosted, but not for cloud hosted prod\n            disabled=(\n                settings.Settings().config.behave_as == BehaveAs.CLOUD\n                and settings.Settings().config.app_env != AppEnvironment.LOCAL\n            ),\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=self.Input,\n            output_schema=self.Output,\n            webhook_config=BlockWebhookConfig(\n                provider=\"slant3d\",\n                webhook_type=\"orders\",  # Only one type for now\n                resource_format=\"\",  # No resource format needed\n                event_filter_input=\"events\",\n                event_format=\"order.{event}\",\n            ),\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"events\": {\"shipped\": True},\n                \"payload\": {\n                    \"orderId\": \"1234567890\",\n                    \"status\": \"SHIPPED\",\n                    \"trackingNumber\": \"ABCDEF123456\",\n                    \"carrierCode\": \"usps\",\n                },\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"payload\",\n                    {\n                        \"orderId\": \"1234567890\",\n                        \"status\": \"SHIPPED\",\n                        \"trackingNumber\": \"ABCDEF123456\",\n                        \"carrierCode\": \"usps\",\n                    },\n                ),\n                (\"order_id\", \"1234567890\"),\n                (\"status\", \"SHIPPED\"),\n                (\"tracking_number\", \"ABCDEF123456\"),\n                (\"carrier_code\", \"usps\"),\n            ],\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 119,
          "end_line": 125,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 119,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:  # type: ignore"
            },
            {
              "lineno": 120,
              "line": "        yield from super().run(input_data, **kwargs)"
            },
            {
              "lineno": 121,
              "line": ""
            },
            {
              "lineno": 122,
              "line": "        # Extract and normalize values from the payload"
            },
            {
              "lineno": 123,
              "line": "        yield \"status\", input_data.payload[\"status\"]"
            },
            {
              "lineno": 124,
              "line": "        yield \"tracking_number\", input_data.payload[\"trackingNumber\"]"
            },
            {
              "lineno": 125,
              "line": "        yield \"carrier_code\", input_data.payload[\"carrierCode\"]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:  # type: ignore\n        yield from super().run(input_data, **kwargs)\n\n        # Extract and normalize values from the payload\n        yield \"status\", input_data.payload[\"status\"]\n        yield \"tracking_number\", input_data.payload[\"trackingNumber\"]\n        yield \"carrier_code\", input_data.payload[\"carrierCode\"]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 47,
          "end_line": 60,
          "functions": [],
          "classes": [
            {
              "name": "EventsFilter",
              "type": "class",
              "start_line": 48,
              "end_line": 54,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 48,
                  "line": "        class EventsFilter(BaseModel):"
                },
                {
                  "lineno": 49,
                  "line": "            \"\"\""
                },
                {
                  "lineno": 50,
                  "line": "            Currently Slant3D only supports 'SHIPPED' status updates"
                },
                {
                  "lineno": 51,
                  "line": "            Could be expanded in the future with more status types"
                },
                {
                  "lineno": 52,
                  "line": "            \"\"\""
                },
                {
                  "lineno": 53,
                  "line": ""
                },
                {
                  "lineno": 54,
                  "line": "            shipped: bool = True"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "label": "        class EventsFilter(BaseModel):\n            \"\"\"\n            Currently Slant3D only supports 'SHIPPED' status updates\n            Could be expanded in the future with more status types\n            \"\"\"\n\n            shipped: bool = True",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": [
            {
              "lineno": 47,
              "line": "    class Input(Slant3DTriggerBase.Input):"
            },
            {
              "lineno": 55,
              "line": ""
            },
            {
              "lineno": 56,
              "line": "        events: EventsFilter = SchemaField("
            },
            {
              "lineno": 57,
              "line": "            title=\"Events\","
            },
            {
              "lineno": 58,
              "line": "            description=\"Order status events to subscribe to\","
            },
            {
              "lineno": 59,
              "line": "            default=EventsFilter(shipped=True),"
            },
            {
              "lineno": 60,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(Slant3DTriggerBase.Input):\n\n        events: EventsFilter = SchemaField(\n            title=\"Events\",\n            description=\"Order status events to subscribe to\",\n            default=EventsFilter(shipped=True),\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 62,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 62,
              "line": "    class Output(Slant3DTriggerBase.Output):"
            },
            {
              "lineno": 63,
              "line": "        status: str = SchemaField(description=\"The new status of the order\")"
            },
            {
              "lineno": 64,
              "line": "        tracking_number: str = SchemaField("
            },
            {
              "lineno": 65,
              "line": "            description=\"The tracking number for the shipment\""
            },
            {
              "lineno": 66,
              "line": "        )"
            },
            {
              "lineno": 67,
              "line": "        carrier_code: str = SchemaField(description=\"The carrier code (e.g., 'usps')\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(Slant3DTriggerBase.Output):\n        status: str = SchemaField(description=\"The new status of the order\")\n        tracking_number: str = SchemaField(\n            description=\"The tracking number for the shipment\"\n        )\n        carrier_code: str = SchemaField(description=\"The carrier code (e.g., 'usps')\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 44,
          "line": "class Slant3DOrderWebhookBlock(Slant3DTriggerBase, Block):"
        },
        {
          "lineno": 45,
          "line": "    \"\"\"Block for handling Slant3D order webhooks\"\"\""
        },
        {
          "lineno": 46,
          "line": ""
        },
        {
          "lineno": 61,
          "line": ""
        },
        {
          "lineno": 68,
          "line": ""
        },
        {
          "lineno": 118,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from pydantic import BaseModel"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from backend.data.block import ("
    },
    {
      "lineno": 4,
      "line": "    Block,"
    },
    {
      "lineno": 5,
      "line": "    BlockCategory,"
    },
    {
      "lineno": 6,
      "line": "    BlockOutput,"
    },
    {
      "lineno": 7,
      "line": "    BlockSchema,"
    },
    {
      "lineno": 8,
      "line": "    BlockWebhookConfig,"
    },
    {
      "lineno": 9,
      "line": ")"
    },
    {
      "lineno": 10,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 11,
      "line": "from backend.util import settings"
    },
    {
      "lineno": 12,
      "line": "from backend.util.settings import AppEnvironment, BehaveAs"
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": "from ._api import ("
    },
    {
      "lineno": 15,
      "line": "    TEST_CREDENTIALS,"
    },
    {
      "lineno": 16,
      "line": "    TEST_CREDENTIALS_INPUT,"
    },
    {
      "lineno": 17,
      "line": "    Slant3DCredentialsField,"
    },
    {
      "lineno": 18,
      "line": "    Slant3DCredentialsInput,"
    },
    {
      "lineno": 19,
      "line": ")"
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 42,
      "line": ""
    },
    {
      "lineno": 43,
      "line": ""
    }
  ],
  "blocks": []
}