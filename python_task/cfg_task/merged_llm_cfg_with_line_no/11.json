{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 67,
  "functions": [
    {
      "name": "_start_measurement",
      "type": "function",
      "start_line": 15,
      "end_line": 16,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 15,
          "line": "def _start_measurement() -> Tuple[float, float]:"
        },
        {
          "lineno": 16,
          "line": "    return time.time(), os.times()[0] + os.times()[1]"
        }
      ],
      "blocks": []
    },
    {
      "name": "_end_measurement",
      "type": "function",
      "start_line": 19,
      "end_line": 24,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 19,
          "line": "def _end_measurement("
        },
        {
          "lineno": 20,
          "line": "    start_wall_time: float, start_cpu_time: float"
        },
        {
          "lineno": 21,
          "line": ") -> Tuple[float, float]:"
        },
        {
          "lineno": 22,
          "line": "    end_wall_time = time.time()"
        },
        {
          "lineno": 23,
          "line": "    end_cpu_time = os.times()[0] + os.times()[1]"
        },
        {
          "lineno": 24,
          "line": "    return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def _end_measurement(\n    start_wall_time: float, start_cpu_time: float\n) -> Tuple[float, float]:\n    end_wall_time = time.time()\n    end_cpu_time = os.times()[0] + os.times()[1]\nreturn end_wall_time - start_wall_time, end_cpu_time - start_cpu_time",
          "successors": []
        }
      ]
    },
    {
      "name": "time_measured",
      "type": "function",
      "start_line": 33,
      "end_line": 50,
      "functions": [
        {
          "name": "wrapper",
          "type": "function",
          "start_line": 39,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 39,
              "line": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:"
            },
            {
              "lineno": 40,
              "line": "        start_wall_time, start_cpu_time = _start_measurement()"
            },
            {
              "lineno": 41,
              "line": "        try:"
            },
            {
              "lineno": 42,
              "line": "            result = func(*args, **kwargs)"
            },
            {
              "lineno": 43,
              "line": "        finally:"
            },
            {
              "lineno": 44,
              "line": "            wall_duration, cpu_duration = _end_measurement("
            },
            {
              "lineno": 45,
              "line": "                start_wall_time, start_cpu_time"
            },
            {
              "lineno": 46,
              "line": "            )"
            },
            {
              "lineno": 47,
              "line": "            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)"
            },
            {
              "lineno": 48,
              "line": "        return timing_info, result"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:\n        start_wall_time, start_cpu_time = _start_measurement()\n        try:\n            result = func(*args, **kwargs)",
              "successors": [
                {
                  "id": 3,
                  "label": "        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\n        return timing_info, result",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 33,
          "line": "def time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:"
        },
        {
          "lineno": 34,
          "line": "    \"\"\""
        },
        {
          "lineno": 35,
          "line": "    Decorator to measure the time taken by a function to execute."
        },
        {
          "lineno": 36,
          "line": "    \"\"\""
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "    @functools.wraps(func)"
        },
        {
          "lineno": 49,
          "line": ""
        },
        {
          "lineno": 50,
          "line": "    return wrapper"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:\n    \"\"\"\n    Decorator to measure the time taken by a function to execute.\n    \"\"\"\n\n    @functools.wraps(func)\nreturn wrapper",
          "successors": []
        }
      ]
    },
    {
      "name": "error_logged",
      "type": "function",
      "start_line": 53,
      "end_line": 67,
      "functions": [
        {
          "name": "wrapper",
          "type": "function",
          "start_line": 59,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 59,
              "line": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:"
            },
            {
              "lineno": 60,
              "line": "        try:"
            },
            {
              "lineno": 61,
              "line": "            return func(*args, **kwargs)"
            },
            {
              "lineno": 62,
              "line": "        except Exception as e:"
            },
            {
              "lineno": 63,
              "line": "            logger.exception("
            },
            {
              "lineno": 64,
              "line": "                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\""
            },
            {
              "lineno": 65,
              "line": "            )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:\n        try:\n            return func(*args, **kwargs)",
              "successors": [
                {
                  "id": 3,
                  "label": "        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 53,
          "line": "def error_logged(func: Callable[P, T]) -> Callable[P, T | None]:"
        },
        {
          "lineno": 54,
          "line": "    \"\"\""
        },
        {
          "lineno": 55,
          "line": "    Decorator to suppress and log any exceptions raised by a function."
        },
        {
          "lineno": 56,
          "line": "    \"\"\""
        },
        {
          "lineno": 57,
          "line": ""
        },
        {
          "lineno": 58,
          "line": "    @functools.wraps(func)"
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 67,
          "line": "    return wrapper"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def error_logged(func: Callable[P, T]) -> Callable[P, T | None]:\n    \"\"\"\n    Decorator to suppress and log any exceptions raised by a function.\n    \"\"\"\n\n    @functools.wraps(func)\n\n    return wrapper",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "TimingInfo",
      "type": "class",
      "start_line": 10,
      "end_line": 12,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "class TimingInfo(BaseModel):"
        },
        {
          "lineno": 11,
          "line": "    cpu_time: float"
        },
        {
          "lineno": 12,
          "line": "    wall_time: float"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class TimingInfo(BaseModel):\n    cpu_time: float\n    wall_time: float",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import functools"
    },
    {
      "lineno": 2,
      "line": "import logging"
    },
    {
      "lineno": 3,
      "line": "import os"
    },
    {
      "lineno": 4,
      "line": "import time"
    },
    {
      "lineno": 5,
      "line": "from typing import Callable, ParamSpec, Tuple, TypeVar"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "from pydantic import BaseModel"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": ""
    },
    {
      "lineno": 25,
      "line": ""
    },
    {
      "lineno": 26,
      "line": ""
    },
    {
      "lineno": 27,
      "line": "P = ParamSpec(\"P\")"
    },
    {
      "lineno": 28,
      "line": "T = TypeVar(\"T\")"
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 31,
      "line": ""
    },
    {
      "lineno": 32,
      "line": ""
    },
    {
      "lineno": 51,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import functools\nimport logging\nimport os\nimport time\nfrom typing import Callable, ParamSpec, Tuple, TypeVar\nfrom pydantic import BaseModel",
      "successors": [
        {
          "id": 3,
          "label": "P = ParamSpec(\"P\")\nT = TypeVar(\"T\")\nlogger = logging.getLogger(__name__)",
          "successors": []
        }
      ]
    }
  ]
}