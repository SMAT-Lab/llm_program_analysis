{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 83,
  "functions": [
    {
      "name": "sort_blocks",
      "type": "function",
      "start_line": 17,
      "end_line": 43,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 17,
          "line": "def sort_blocks():"
        },
        {
          "lineno": 18,
          "line": "    # First, we load the current README into memory"
        },
        {
          "lineno": 19,
          "line": "    with open('README.md', 'r') as read_me_file:"
        },
        {
          "lineno": 20,
          "line": "        read_me = read_me_file.read()"
        },
        {
          "lineno": 21,
          "line": ""
        },
        {
          "lineno": 22,
          "line": "    # Separating the 'table of contents' from the contents (blocks)"
        },
        {
          "lineno": 23,
          "line": "    table_of_contents = ''.join(read_me.split('- - -')[0])"
        },
        {
          "lineno": 24,
          "line": "    blocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')"
        },
        {
          "lineno": 25,
          "line": "    for i in range(len(blocks)):"
        },
        {
          "lineno": 26,
          "line": "        if i == 0:"
        },
        {
          "lineno": 27,
          "line": "            blocks[i] = blocks[i] + '\\n'"
        },
        {
          "lineno": 28,
          "line": "        else:"
        },
        {
          "lineno": 29,
          "line": "            blocks[i] = '# ' + blocks[i] + '\\n'"
        },
        {
          "lineno": 30,
          "line": ""
        },
        {
          "lineno": 31,
          "line": "    # Sorting the libraries"
        },
        {
          "lineno": 32,
          "line": "    inner_blocks = sorted(blocks[0].split('##'))"
        },
        {
          "lineno": 33,
          "line": "    for i in range(1, len(inner_blocks)):"
        },
        {
          "lineno": 34,
          "line": "        if inner_blocks[i][0] != '#':"
        },
        {
          "lineno": 35,
          "line": "            inner_blocks[i] = '##' + inner_blocks[i]"
        },
        {
          "lineno": 36,
          "line": "    inner_blocks = ''.join(inner_blocks)"
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "    # Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file"
        },
        {
          "lineno": 39,
          "line": "    blocks[0] = inner_blocks"
        },
        {
          "lineno": 40,
          "line": "    final_README = table_of_contents + '- - -' + ''.join(blocks)"
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 42,
          "line": "    with open('README.md', 'w+') as sorted_file:"
        },
        {
          "lineno": 43,
          "line": "        sorted_file.write(final_README)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def sort_blocks():\nwith open('README.md', 'r') as read_me_file:\n    read_me = read_me_file.read()",
          "successors": [
            {
              "id": 3,
              "label": "table_of_contents = ''.join(read_me.split('- - -')[0])\nblocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')",
              "successors": [
                {
                  "id": 4,
                  "label": "for i in range(len(blocks)):\n    if i == 0:\n        blocks[i] = blocks[i] + '\\n'\n    else:\n        blocks[i] = '# ' + blocks[i] + '\\n'",
                  "successors": [
                    {
                      "id": 5,
                      "label": "inner_blocks = sorted(blocks[0].split('##'))",
                      "successors": [
                        {
                          "id": 6,
                          "label": "for i in range(1, len(inner_blocks)):\n    if inner_blocks[i][0] != '#':\n        inner_blocks[i] = '##' + inner_blocks[i]",
                          "successors": [
                            {
                              "id": 7,
                              "label": "inner_blocks = ''.join(inner_blocks)\nblocks[0] = inner_blocks\nfinal_README = table_of_contents + '- - -' + ''.join(blocks)\nwith open('README.md', 'w+') as sorted_file:\n    sorted_file.write(final_README)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "main",
      "type": "function",
      "start_line": 45,
      "end_line": 79,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 45,
          "line": "def main():"
        },
        {
          "lineno": 46,
          "line": "    # First, we load the current README into memory as an array of lines"
        },
        {
          "lineno": 47,
          "line": "    with open('README.md', 'r') as read_me_file:"
        },
        {
          "lineno": 48,
          "line": "        read_me = read_me_file.readlines()"
        },
        {
          "lineno": 49,
          "line": ""
        },
        {
          "lineno": 50,
          "line": "    # Then we cluster the lines together as blocks"
        },
        {
          "lineno": 51,
          "line": "    # Each block represents a collection of lines that should be sorted"
        },
        {
          "lineno": 52,
          "line": "    # This was done by assuming only links ([...](...)) are meant to be sorted"
        },
        {
          "lineno": 53,
          "line": "    # Clustering is done by indentation"
        },
        {
          "lineno": 54,
          "line": "    blocks = []"
        },
        {
          "lineno": 55,
          "line": "    last_indent = None"
        },
        {
          "lineno": 56,
          "line": "    for line in read_me:"
        },
        {
          "lineno": 57,
          "line": "        s_line = line.lstrip()"
        },
        {
          "lineno": 58,
          "line": "        indent = len(line) - len(s_line)"
        },
        {
          "lineno": 59,
          "line": ""
        },
        {
          "lineno": 60,
          "line": "        if any([s_line.startswith(s) for s in ['* [', '- [']]):"
        },
        {
          "lineno": 61,
          "line": "            if indent == last_indent:"
        },
        {
          "lineno": 62,
          "line": "                blocks[-1].append(line)"
        },
        {
          "lineno": 63,
          "line": "            else:"
        },
        {
          "lineno": 64,
          "line": "                blocks.append([line])"
        },
        {
          "lineno": 65,
          "line": "            last_indent = indent"
        },
        {
          "lineno": 66,
          "line": "        else:"
        },
        {
          "lineno": 67,
          "line": "            blocks.append([line])"
        },
        {
          "lineno": 68,
          "line": "            last_indent = None"
        },
        {
          "lineno": 69,
          "line": ""
        },
        {
          "lineno": 70,
          "line": "    with open('README.md', 'w+') as sorted_file:"
        },
        {
          "lineno": 71,
          "line": "        # Then all of the blocks are sorted individually"
        },
        {
          "lineno": 72,
          "line": "        blocks = ["
        },
        {
          "lineno": 73,
          "line": "            ''.join(sorted(block, key=str.lower)) for block in blocks"
        },
        {
          "lineno": 74,
          "line": "        ]"
        },
        {
          "lineno": 75,
          "line": "        # And the result is written back to README.md"
        },
        {
          "lineno": 76,
          "line": "        sorted_file.write(''.join(blocks))"
        },
        {
          "lineno": 77,
          "line": ""
        },
        {
          "lineno": 78,
          "line": "    # Then we call the sorting method"
        },
        {
          "lineno": 79,
          "line": "    sort_blocks()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def main():\n    # First, we load the current README into memory as an array of lines\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.readlines()\n    ",
          "successors": [
            {
              "id": 3,
              "label": "    # Then we cluster the lines together as blocks\n    # Each block represents a collection of lines that should be sorted\n    # This was done by assuming only links ([...](...)) are meant to be sorted\n    # Clustering is done by indentation\n    blocks = []\n    last_indent = None\n    ",
              "successors": [
                {
                  "id": 4,
                  "label": "    for line in read_me:\n        s_line = line.lstrip()\n        indent = len(line) - len(s_line)\n    ",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        if any([s_line.startswith(s) for s in ['* [', '- [']]):\n        ",
                      "successors": [
                        {
                          "id": 6,
                          "label": "            if indent == last_indent:\n                blocks[-1].append(line)\n            \n            else:\n                blocks.append([line])\n            last_indent = indent\n            ",
                          "successors": [
                            {
                              "id": 8,
                              "label": "        else:\n            blocks.append([line])\n            last_indent = None\n        ",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "label": "    with open('README.md', 'w+') as sorted_file:\n        # Then all of the blocks are sorted individually\n        blocks = [\n            ''.join(sorted(block, key=str.lower)) for block in blocks\n        ]\n        \n        sorted_file.write(''.join(blocks))\n        ",
                          "successors": [
                            {
                              "id": 11,
                              "label": "    # Then we call the sorting method\n    sort_blocks()\n    ",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "#!/usr/bin/env python"
    },
    {
      "lineno": 2,
      "line": "# coding: utf-8"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "\"\"\""
    },
    {
      "lineno": 5,
      "line": "    The approach taken is explained below. I decided to do it simply."
    },
    {
      "lineno": 6,
      "line": "    Initially I was considering parsing the data into some sort of"
    },
    {
      "lineno": 7,
      "line": "    structure and then generating an appropriate README. I am still"
    },
    {
      "lineno": 8,
      "line": "    considering doing it - but for now this should work. The only issue"
    },
    {
      "lineno": 9,
      "line": "    I see is that it only sorts the entries at the lowest level, and that"
    },
    {
      "lineno": 10,
      "line": "    the order of the top-level contents do not match the order of the actual"
    },
    {
      "lineno": 11,
      "line": "    entries."
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "    This could be extended by having nested blocks, sorting them recursively"
    },
    {
      "lineno": 14,
      "line": "    and flattening the end structure into a list of lines. Revision 2 maybe ^.^."
    },
    {
      "lineno": 15,
      "line": "\"\"\""
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 44,
      "line": ""
    },
    {
      "lineno": 80,
      "line": ""
    },
    {
      "lineno": 81,
      "line": ""
    },
    {
      "lineno": 82,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 83,
      "line": "    main()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "#!/usr/bin/env python\n# coding: utf-8\n\n\"\"\"\n    The approach taken is explained below. I decided to do it simply.\n    Initially I was considering parsing the data into some sort of\n    structure and then generating an appropriate README. I am still\n    considering doing it - but for now this should work. The only issue\n    I see is that it only sorts the entries at the lowest level, and that\n    the order of the top-level contents do not match the order of the actual\n    entries.\n\n    This could be extended by having nested blocks, sorting them recursively\n    and flattening the end structure into a list of lines. Revision 2 maybe ^.^.\n\"\"\"\n\n\n\n\n\nif __name__ == \"__main__\":\n    main()",
      "successors": []
    }
  ]
}