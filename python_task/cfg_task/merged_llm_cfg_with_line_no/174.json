{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 72,
  "functions": [],
  "classes": [
    {
      "name": "State",
      "type": "class",
      "start_line": 6,
      "end_line": 8,
      "functions": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "class State(Enum):"
        },
        {
          "lineno": 7,
          "line": "    unvisited = 0"
        },
        {
          "lineno": 8,
          "line": "    visited = 1"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class State(Enum):\n    unvisited = 0\n    visited = 1",
          "successors": []
        }
      ]
    },
    {
      "name": "Graph",
      "type": "class",
      "start_line": 11,
      "end_line": 28,
      "functions": [
        {
          "name": "bfs",
          "type": "function",
          "start_line": 13,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 13,
              "line": "    def bfs(self, source, dest):"
            },
            {
              "lineno": 14,
              "line": "        if source is None:"
            },
            {
              "lineno": 15,
              "line": "            return False"
            },
            {
              "lineno": 16,
              "line": "        queue = deque()"
            },
            {
              "lineno": 17,
              "line": "        queue.append(source)"
            },
            {
              "lineno": 18,
              "line": "        source.visit_state = State.visited"
            },
            {
              "lineno": 19,
              "line": "        while queue:"
            },
            {
              "lineno": 20,
              "line": "            node = queue.popleft()"
            },
            {
              "lineno": 21,
              "line": "            print(node)"
            },
            {
              "lineno": 22,
              "line": "            if dest is node:"
            },
            {
              "lineno": 23,
              "line": "                return True"
            },
            {
              "lineno": 24,
              "line": "            for adjacent_node in node.adj_nodes.values():"
            },
            {
              "lineno": 25,
              "line": "                if adjacent_node.visit_state == State.unvisited:"
            },
            {
              "lineno": 26,
              "line": "                    queue.append(adjacent_node)"
            },
            {
              "lineno": 27,
              "line": "                    adjacent_node.visit_state = State.visited"
            },
            {
              "lineno": 28,
              "line": "        return False"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def bfs(self, source, dest):\n        if source is None:\n            return False",
              "successors": [
                {
                  "id": 3,
                  "label": "        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        while queue:",
                      "successors": [
                        {
                          "id": 5,
                          "label": "            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True",
                          "successors": [
                            {
                              "id": 7,
                              "label": "            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "        return False",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "class Graph(object):"
        },
        {
          "lineno": 12,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Graph(object):\n",
          "successors": []
        }
      ]
    },
    {
      "name": "Person",
      "type": "class",
      "start_line": 31,
      "end_line": 36,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 33,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 33,
              "line": "    def __init__(self, id, name):"
            },
            {
              "lineno": 34,
              "line": "        self.id = id"
            },
            {
              "lineno": 35,
              "line": "        self.name = name"
            },
            {
              "lineno": 36,
              "line": "        self.friend_ids = []"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 31,
          "line": "class Person(object):"
        },
        {
          "lineno": 32,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Person(object):\n",
          "successors": []
        }
      ]
    },
    {
      "name": "LookupService",
      "type": "class",
      "start_line": 39,
      "end_line": 46,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 41,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 41,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 42,
              "line": "        self.lookup = {}  # key: person_id, value: person_server"
            }
          ],
          "blocks": []
        },
        {
          "name": "get_person",
          "type": "function",
          "start_line": 44,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 44,
              "line": "    def get_person(self, person_id):"
            },
            {
              "lineno": 45,
              "line": "        person_server = self.lookup[person_id]"
            },
            {
              "lineno": 46,
              "line": "        return person_server.people[person_id]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 39,
          "line": "class LookupService(object):"
        },
        {
          "lineno": 40,
          "line": ""
        },
        {
          "lineno": 43,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "PersonServer",
      "type": "class",
      "start_line": 49,
      "end_line": 59,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 51,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 51,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 52,
              "line": "        self.people = {}  # key: person_id, value: person"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        self.people = {}  # key: person_id, value: person",
              "successors": []
            }
          ]
        },
        {
          "name": "get_people",
          "type": "function",
          "start_line": 54,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 54,
              "line": "    def get_people(self, ids):"
            },
            {
              "lineno": 55,
              "line": "        results = []"
            },
            {
              "lineno": 56,
              "line": "        for id in ids:"
            },
            {
              "lineno": 57,
              "line": "            if id in self.people:"
            },
            {
              "lineno": 58,
              "line": "                results.append(self.people[id])"
            },
            {
              "lineno": 59,
              "line": "        return results"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def get_people(self, ids):\n        results = []",
              "successors": [
                {
                  "id": 2,
                  "label": "        for id in ids:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            if id in self.people:\n                results.append(self.people[id])",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "        return results",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 49,
          "line": "class PersonServer(object):"
        },
        {
          "lineno": 50,
          "line": ""
        },
        {
          "lineno": 53,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class PersonServer(object):",
          "successors": []
        }
      ]
    },
    {
      "name": "UserGraphService",
      "type": "class",
      "start_line": 62,
      "end_line": 72,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 64,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 64,
              "line": "    def __init__(self, person_ids, lookup):"
            },
            {
              "lineno": 65,
              "line": "        self.lookup = lookup"
            },
            {
              "lineno": 66,
              "line": "        self.person_ids = person_ids"
            },
            {
              "lineno": 67,
              "line": "        self.visited_ids = set()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()",
              "successors": []
            }
          ]
        },
        {
          "name": "bfs",
          "type": "function",
          "start_line": 69,
          "end_line": 72,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 69,
              "line": "    def bfs(self, source, dest):"
            },
            {
              "lineno": 70,
              "line": "        # Use self.visited_ids to track visited nodes"
            },
            {
              "lineno": 71,
              "line": "        # Use self.lookup to translate a person_id to a Person"
            },
            {
              "lineno": 72,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": [
                "    def bfs(self, source, dest):",
                "        # Use self.visited_ids to track visited nodes",
                "        # Use self.lookup to translate a person_id to a Person",
                "        pass"
              ],
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 62,
          "line": "class UserGraphService(object):"
        },
        {
          "lineno": 63,
          "line": ""
        },
        {
          "lineno": 68,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class UserGraphService(object):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# -*- coding: utf-8 -*-"
    },
    {
      "lineno": 2,
      "line": "from collections import deque"
    },
    {
      "lineno": 3,
      "line": "from enum import Enum"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": ""
    },
    {
      "lineno": 37,
      "line": ""
    },
    {
      "lineno": 38,
      "line": ""
    },
    {
      "lineno": 47,
      "line": ""
    },
    {
      "lineno": 48,
      "line": ""
    },
    {
      "lineno": 60,
      "line": ""
    },
    {
      "lineno": 61,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "# -*- coding: utf-8 -*-\nfrom collections import deque\nfrom enum import Enum",
      "successors": []
    }
  ]
}