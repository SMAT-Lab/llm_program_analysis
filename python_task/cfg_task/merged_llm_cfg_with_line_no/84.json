{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 118,
  "functions": [
    {
      "name": "connection_manager",
      "type": "function",
      "start_line": 13,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 13,
          "line": "def connection_manager() -> ConnectionManager:"
        },
        {
          "lineno": 14,
          "line": "    return ConnectionManager()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def connection_manager() -> ConnectionManager:\n    return ConnectionManager()",
          "successors": []
        }
      ]
    },
    {
      "name": "mock_websocket",
      "type": "function",
      "start_line": 18,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 18,
          "line": "def mock_websocket() -> AsyncMock:"
        },
        {
          "lineno": 19,
          "line": "    websocket: AsyncMock = AsyncMock(spec=WebSocket)"
        },
        {
          "lineno": 20,
          "line": "    websocket.send_text = AsyncMock()"
        },
        {
          "lineno": 21,
          "line": "    return websocket"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def mock_websocket() -> AsyncMock:\n    websocket: AsyncMock = AsyncMock(spec=WebSocket)\n    websocket.send_text = AsyncMock()\n    return websocket",
          "successors": []
        }
      ]
    },
    {
      "name": "test_connect",
      "type": "function",
      "start_line": 25,
      "end_line": 30,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 25,
          "line": "async def test_connect("
        },
        {
          "lineno": 26,
          "line": "    connection_manager: ConnectionManager, mock_websocket: AsyncMock"
        },
        {
          "lineno": 27,
          "line": ") -> None:"
        },
        {
          "lineno": 28,
          "line": "    await connection_manager.connect(mock_websocket)"
        },
        {
          "lineno": 29,
          "line": "    assert mock_websocket in connection_manager.active_connections"
        },
        {
          "lineno": 30,
          "line": "    mock_websocket.accept.assert_called_once()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def test_connect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    await connection_manager.connect(mock_websocket)\n    assert mock_websocket in connection_manager.active_connections\n    mock_websocket.accept.assert_called_once()",
          "successors": []
        }
      ]
    },
    {
      "name": "test_disconnect",
      "type": "function",
      "start_line": 33,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 33,
          "line": "def test_disconnect("
        },
        {
          "lineno": 34,
          "line": "    connection_manager: ConnectionManager, mock_websocket: AsyncMock"
        },
        {
          "lineno": 35,
          "line": ") -> None:"
        },
        {
          "lineno": 36,
          "line": "    connection_manager.active_connections.add(mock_websocket)"
        },
        {
          "lineno": 37,
          "line": "    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}"
        },
        {
          "lineno": 38,
          "line": ""
        },
        {
          "lineno": 39,
          "line": "    connection_manager.disconnect(mock_websocket)"
        },
        {
          "lineno": 40,
          "line": ""
        },
        {
          "lineno": 41,
          "line": "    assert mock_websocket not in connection_manager.active_connections"
        },
        {
          "lineno": 42,
          "line": "    assert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_disconnect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\nconnection_manager.active_connections.add(mock_websocket)\nconnection_manager.subscriptions[\"test_graph\"] = {mock_websocket}",
          "successors": [
            {
              "id": 3,
              "label": "connection_manager.disconnect(mock_websocket)\nassert mock_websocket not in connection_manager.active_connections\nassert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_subscribe",
      "type": "function",
      "start_line": 46,
      "end_line": 50,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 46,
          "line": "async def test_subscribe("
        },
        {
          "lineno": 47,
          "line": "    connection_manager: ConnectionManager, mock_websocket: AsyncMock"
        },
        {
          "lineno": 48,
          "line": ") -> None:"
        },
        {
          "lineno": 49,
          "line": "    await connection_manager.subscribe(\"test_graph\", mock_websocket)"
        },
        {
          "lineno": 50,
          "line": "    assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def test_subscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    await connection_manager.subscribe(\"test_graph\", mock_websocket)\n    assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]",
          "successors": []
        }
      ]
    },
    {
      "name": "test_unsubscribe",
      "type": "function",
      "start_line": 54,
      "end_line": 61,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 54,
          "line": "async def test_unsubscribe("
        },
        {
          "lineno": 55,
          "line": "    connection_manager: ConnectionManager, mock_websocket: AsyncMock"
        },
        {
          "lineno": 56,
          "line": ") -> None:"
        },
        {
          "lineno": 57,
          "line": "    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}"
        },
        {
          "lineno": 58,
          "line": ""
        },
        {
          "lineno": 59,
          "line": "    await connection_manager.unsubscribe(\"test_graph\", mock_websocket)"
        },
        {
          "lineno": 60,
          "line": ""
        },
        {
          "lineno": 61,
          "line": "    assert \"test_graph\" not in connection_manager.subscriptions"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def test_unsubscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    await connection_manager.unsubscribe(\"test_graph\", mock_websocket)",
          "successors": [
            {
              "id": 3,
              "label": "    assert \"test_graph\" not in connection_manager.subscriptions",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_send_execution_result",
      "type": "function",
      "start_line": 65,
      "end_line": 93,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 65,
          "line": "async def test_send_execution_result("
        },
        {
          "lineno": 66,
          "line": "    connection_manager: ConnectionManager, mock_websocket: AsyncMock"
        },
        {
          "lineno": 67,
          "line": ") -> None:"
        },
        {
          "lineno": 68,
          "line": "    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}"
        },
        {
          "lineno": 69,
          "line": "    result: ExecutionResult = ExecutionResult("
        },
        {
          "lineno": 70,
          "line": "        graph_id=\"test_graph\","
        },
        {
          "lineno": 71,
          "line": "        graph_version=1,"
        },
        {
          "lineno": 72,
          "line": "        graph_exec_id=\"test_exec_id\","
        },
        {
          "lineno": 73,
          "line": "        node_exec_id=\"test_node_exec_id\","
        },
        {
          "lineno": 74,
          "line": "        node_id=\"test_node_id\","
        },
        {
          "lineno": 75,
          "line": "        block_id=\"test_block_id\","
        },
        {
          "lineno": 76,
          "line": "        status=ExecutionStatus.COMPLETED,"
        },
        {
          "lineno": 77,
          "line": "        input_data={\"input1\": \"value1\"},"
        },
        {
          "lineno": 78,
          "line": "        output_data={\"output1\": [\"result1\"]},"
        },
        {
          "lineno": 79,
          "line": "        add_time=datetime.now(tz=timezone.utc),"
        },
        {
          "lineno": 80,
          "line": "        queue_time=None,"
        },
        {
          "lineno": 81,
          "line": "        start_time=datetime.now(tz=timezone.utc),"
        },
        {
          "lineno": 82,
          "line": "        end_time=datetime.now(tz=timezone.utc),"
        },
        {
          "lineno": 83,
          "line": "    )"
        },
        {
          "lineno": 84,
          "line": ""
        },
        {
          "lineno": 85,
          "line": "    await connection_manager.send_execution_result(result)"
        },
        {
          "lineno": 86,
          "line": ""
        },
        {
          "lineno": 87,
          "line": "    mock_websocket.send_text.assert_called_once_with("
        },
        {
          "lineno": 88,
          "line": "        WsMessage("
        },
        {
          "lineno": 89,
          "line": "            method=Methods.EXECUTION_EVENT,"
        },
        {
          "lineno": 90,
          "line": "            channel=\"test_graph\","
        },
        {
          "lineno": 91,
          "line": "            data=result.model_dump(),"
        },
        {
          "lineno": 92,
          "line": "        ).model_dump_json()"
        },
        {
          "lineno": 93,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def test_send_execution_result(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\nconnection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\nresult: ExecutionResult = ExecutionResult(\n    graph_id=\"test_graph\",\n    graph_version=1,\n    graph_exec_id=\"test_exec_id\",\n    node_exec_id=\"test_node_exec_id\",\n    node_id=\"test_node_id\",\n    block_id=\"test_block_id\",\n    status=ExecutionStatus.COMPLETED,\n    input_data={\"input1\": \"value1\"},\n    output_data={\"output1\": [\"result1\"]},\n    add_time=datetime.now(tz=timezone.utc),\n    queue_time=None,\n    start_time=datetime.now(tz=timezone.utc),\n    end_time=datetime.now(tz=timezone.utc),\n)",
          "successors": [
            {
              "id": 3,
              "label": "await connection_manager.send_execution_result(result)\nmock_websocket.send_text.assert_called_once_with(\n    WsMessage(\n        method=Methods.EXECUTION_EVENT,\n        channel=\"test_graph\",\n        data=result.model_dump(),\n    ).model_dump_json()\n)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_send_execution_result_no_subscribers",
      "type": "function",
      "start_line": 97,
      "end_line": 118,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 97,
          "line": "async def test_send_execution_result_no_subscribers("
        },
        {
          "lineno": 98,
          "line": "    connection_manager: ConnectionManager, mock_websocket: AsyncMock"
        },
        {
          "lineno": 99,
          "line": ") -> None:"
        },
        {
          "lineno": 100,
          "line": "    result: ExecutionResult = ExecutionResult("
        },
        {
          "lineno": 101,
          "line": "        graph_id=\"test_graph\","
        },
        {
          "lineno": 102,
          "line": "        graph_version=1,"
        },
        {
          "lineno": 103,
          "line": "        graph_exec_id=\"test_exec_id\","
        },
        {
          "lineno": 104,
          "line": "        node_exec_id=\"test_node_exec_id\","
        },
        {
          "lineno": 105,
          "line": "        node_id=\"test_node_id\","
        },
        {
          "lineno": 106,
          "line": "        block_id=\"test_block_id\","
        },
        {
          "lineno": 107,
          "line": "        status=ExecutionStatus.COMPLETED,"
        },
        {
          "lineno": 108,
          "line": "        input_data={\"input1\": \"value1\"},"
        },
        {
          "lineno": 109,
          "line": "        output_data={\"output1\": [\"result1\"]},"
        },
        {
          "lineno": 110,
          "line": "        add_time=datetime.now(),"
        },
        {
          "lineno": 111,
          "line": "        queue_time=None,"
        },
        {
          "lineno": 112,
          "line": "        start_time=datetime.now(),"
        },
        {
          "lineno": 113,
          "line": "        end_time=datetime.now(),"
        },
        {
          "lineno": 114,
          "line": "    )"
        },
        {
          "lineno": 115,
          "line": ""
        },
        {
          "lineno": 116,
          "line": "    await connection_manager.send_execution_result(result)"
        },
        {
          "lineno": 117,
          "line": ""
        },
        {
          "lineno": 118,
          "line": "    mock_websocket.send_text.assert_not_called()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def test_send_execution_result_no_subscribers(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(),\n        queue_time=None,\n        start_time=datetime.now(),\n        end_time=datetime.now(),\n    )\nawait connection_manager.send_execution_result(result)",
          "successors": [
            {
              "id": 3,
              "label": "mock_websocket.send_text.assert_not_called()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from datetime import datetime, timezone"
    },
    {
      "lineno": 2,
      "line": "from unittest.mock import AsyncMock"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": "import pytest"
    },
    {
      "lineno": 5,
      "line": "from fastapi import WebSocket"
    },
    {
      "lineno": 6,
      "line": ""
    },
    {
      "lineno": 7,
      "line": "from backend.data.execution import ExecutionResult, ExecutionStatus"
    },
    {
      "lineno": 8,
      "line": "from backend.server.conn_manager import ConnectionManager"
    },
    {
      "lineno": 9,
      "line": "from backend.server.model import Methods, WsMessage"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": "@pytest.fixture"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": "@pytest.fixture"
    },
    {
      "lineno": 22,
      "line": ""
    },
    {
      "lineno": 23,
      "line": ""
    },
    {
      "lineno": 24,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 31,
      "line": ""
    },
    {
      "lineno": 32,
      "line": ""
    },
    {
      "lineno": 43,
      "line": ""
    },
    {
      "lineno": 44,
      "line": ""
    },
    {
      "lineno": 45,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 51,
      "line": ""
    },
    {
      "lineno": 52,
      "line": ""
    },
    {
      "lineno": 53,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 62,
      "line": ""
    },
    {
      "lineno": 63,
      "line": ""
    },
    {
      "lineno": 64,
      "line": "@pytest.mark.asyncio"
    },
    {
      "lineno": 94,
      "line": ""
    },
    {
      "lineno": 95,
      "line": ""
    },
    {
      "lineno": 96,
      "line": "@pytest.mark.asyncio"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from datetime import datetime, timezone\nfrom unittest.mock import AsyncMock\n\nimport pytest",
      "successors": [
        {
          "id": 3,
          "label": "from fastapi import WebSocket\n\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import Methods, WsMessage",
          "successors": [
            {
              "id": 5,
              "label": "\n@pytest.mark.asyncio",
              "successors": [
                {
                  "id": 7,
                  "label": "\n@pytest.mark.asyncio",
                  "successors": [
                    {
                      "id": 9,
                      "label": "\n@pytest.mark.asyncio",
                      "successors": [
                        {
                          "id": 11,
                          "label": "",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}