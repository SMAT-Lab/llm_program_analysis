{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 227,
  "functions": [],
  "classes": [
    {
      "name": "MusicGenModelVersion",
      "type": "class",
      "start_line": 36,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 36,
          "line": "class MusicGenModelVersion(str, Enum):"
        },
        {
          "lineno": 37,
          "line": "    STEREO_LARGE = \"stereo-large\""
        },
        {
          "lineno": 38,
          "line": "    MELODY_LARGE = \"melody-large\""
        },
        {
          "lineno": 39,
          "line": "    LARGE = \"large\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class MusicGenModelVersion(str, Enum):\n    STEREO_LARGE = \"stereo-large\"\n    MELODY_LARGE = \"melody-large\"\n    LARGE = \"large\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AudioFormat",
      "type": "class",
      "start_line": 43,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 43,
          "line": "class AudioFormat(str, Enum):"
        },
        {
          "lineno": 44,
          "line": "    WAV = \"wav\""
        },
        {
          "lineno": 45,
          "line": "    MP3 = \"mp3\""
        }
      ],
      "blocks": []
    },
    {
      "name": "NormalizationStrategy",
      "type": "class",
      "start_line": 49,
      "end_line": 53,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 49,
          "line": "class NormalizationStrategy(str, Enum):"
        },
        {
          "lineno": 50,
          "line": "    LOUDNESS = \"loudness\""
        },
        {
          "lineno": 51,
          "line": "    CLIP = \"clip\""
        },
        {
          "lineno": 52,
          "line": "    PEAK = \"peak\""
        },
        {
          "lineno": 53,
          "line": "    RMS = \"rms\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class NormalizationStrategy(str, Enum):\n    LOUDNESS = \"loudness\"\n    CLIP = \"clip\"\n    PEAK = \"peak\"\n    RMS = \"rms\"",
          "successors": []
        }
      ]
    },
    {
      "name": "AIMusicGeneratorBlock",
      "type": "class",
      "start_line": 56,
      "end_line": 227,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 114,
          "end_line": 143,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 114,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 115,
              "line": "        super().__init__("
            },
            {
              "lineno": 116,
              "line": "            id=\"44f6c8ad-d75c-4ae1-8209-aad1c0326928\","
            },
            {
              "lineno": 117,
              "line": "            description=\"This block generates music using Meta's MusicGen model on Replicate.\","
            },
            {
              "lineno": 118,
              "line": "            categories={BlockCategory.AI},"
            },
            {
              "lineno": 119,
              "line": "            input_schema=AIMusicGeneratorBlock.Input,"
            },
            {
              "lineno": 120,
              "line": "            output_schema=AIMusicGeneratorBlock.Output,"
            },
            {
              "lineno": 121,
              "line": "            test_input={"
            },
            {
              "lineno": 122,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 123,
              "line": "                \"prompt\": \"An upbeat electronic dance track with heavy bass\","
            },
            {
              "lineno": 124,
              "line": "                \"music_gen_model_version\": MusicGenModelVersion.STEREO_LARGE,"
            },
            {
              "lineno": 125,
              "line": "                \"duration\": 8,"
            },
            {
              "lineno": 126,
              "line": "                \"temperature\": 1.0,"
            },
            {
              "lineno": 127,
              "line": "                \"top_k\": 250,"
            },
            {
              "lineno": 128,
              "line": "                \"top_p\": 0.0,"
            },
            {
              "lineno": 129,
              "line": "                \"classifier_free_guidance\": 3,"
            },
            {
              "lineno": 130,
              "line": "                \"output_format\": AudioFormat.WAV,"
            },
            {
              "lineno": 131,
              "line": "                \"normalization_strategy\": NormalizationStrategy.LOUDNESS,"
            },
            {
              "lineno": 132,
              "line": "            },"
            },
            {
              "lineno": 133,
              "line": "            test_output=["
            },
            {
              "lineno": 134,
              "line": "                ("
            },
            {
              "lineno": 135,
              "line": "                    \"result\","
            },
            {
              "lineno": 136,
              "line": "                    \"https://replicate.com/output/generated-audio-url.wav\","
            },
            {
              "lineno": 137,
              "line": "                ),"
            },
            {
              "lineno": 138,
              "line": "            ],"
            },
            {
              "lineno": 139,
              "line": "            test_mock={"
            },
            {
              "lineno": 140,
              "line": "                \"run_model\": lambda api_key, music_gen_model_version, prompt, duration, temperature, top_k, top_p, classifier_free_guidance, output_format, normalization_strategy: \"https://replicate.com/output/generated-audio-url.wav\","
            },
            {
              "lineno": 141,
              "line": "            },"
            },
            {
              "lineno": 142,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 143,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"44f6c8ad-d75c-4ae1-8209-aad1c0326928\",\n            description=\"This block generates music using Meta's MusicGen model on Replicate.\",\n            categories={BlockCategory.AI},\n            input_schema=AIMusicGeneratorBlock.Input,\n            output_schema=AIMusicGeneratorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"prompt\": \"An upbeat electronic dance track with heavy bass\",\n                \"music_gen_model_version\": MusicGenModelVersion.STEREO_LARGE,\n                \"duration\": 8,\n                \"temperature\": 1.0,\n                \"top_k\": 250,\n                \"top_p\": 0.0,\n                \"classifier_free_guidance\": 3,\n                \"output_format\": AudioFormat.WAV,\n                \"normalization_strategy\": NormalizationStrategy.LOUDNESS,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://replicate.com/output/generated-audio-url.wav\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, music_gen_model_version, prompt, duration, temperature, top_k, top_p, classifier_free_guidance, output_format, normalization_strategy: \"https://replicate.com/output/generated-audio-url.wav\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 145,
          "end_line": 183,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 145,
              "line": "    def run("
            },
            {
              "lineno": 146,
              "line": "        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs"
            },
            {
              "lineno": 147,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 148,
              "line": "        max_retries = 3"
            },
            {
              "lineno": 149,
              "line": "        retry_delay = 5  # seconds"
            },
            {
              "lineno": 150,
              "line": "        last_error = None"
            },
            {
              "lineno": 151,
              "line": ""
            },
            {
              "lineno": 152,
              "line": "        for attempt in range(max_retries):"
            },
            {
              "lineno": 153,
              "line": "            try:"
            },
            {
              "lineno": 154,
              "line": "                logger.debug("
            },
            {
              "lineno": 155,
              "line": "                    f\"[AIMusicGeneratorBlock] - Running model (attempt {attempt + 1})\""
            },
            {
              "lineno": 156,
              "line": "                )"
            },
            {
              "lineno": 157,
              "line": "                result = self.run_model("
            },
            {
              "lineno": 158,
              "line": "                    api_key=credentials.api_key,"
            },
            {
              "lineno": 159,
              "line": "                    music_gen_model_version=input_data.music_gen_model_version,"
            },
            {
              "lineno": 160,
              "line": "                    prompt=input_data.prompt,"
            },
            {
              "lineno": 161,
              "line": "                    duration=input_data.duration,"
            },
            {
              "lineno": 162,
              "line": "                    temperature=input_data.temperature,"
            },
            {
              "lineno": 163,
              "line": "                    top_k=input_data.top_k,"
            },
            {
              "lineno": 164,
              "line": "                    top_p=input_data.top_p,"
            },
            {
              "lineno": 165,
              "line": "                    classifier_free_guidance=input_data.classifier_free_guidance,"
            },
            {
              "lineno": 166,
              "line": "                    output_format=input_data.output_format,"
            },
            {
              "lineno": 167,
              "line": "                    normalization_strategy=input_data.normalization_strategy,"
            },
            {
              "lineno": 168,
              "line": "                )"
            },
            {
              "lineno": 169,
              "line": "                if result and result != \"No output received\":"
            },
            {
              "lineno": 170,
              "line": "                    yield \"result\", result"
            },
            {
              "lineno": 171,
              "line": "                    return"
            },
            {
              "lineno": 172,
              "line": "                else:"
            },
            {
              "lineno": 173,
              "line": "                    last_error = \"Model returned empty or invalid response\""
            },
            {
              "lineno": 174,
              "line": "                    raise ValueError(last_error)"
            },
            {
              "lineno": 175,
              "line": "            except Exception as e:"
            },
            {
              "lineno": 176,
              "line": "                last_error = f\"Unexpected error: {str(e)}\""
            },
            {
              "lineno": 177,
              "line": "                logger.error(f\"[AIMusicGeneratorBlock] - Error: {last_error}\")"
            },
            {
              "lineno": 178,
              "line": "                if attempt < max_retries - 1:"
            },
            {
              "lineno": 179,
              "line": "                    time.sleep(retry_delay)"
            },
            {
              "lineno": 180,
              "line": "                    continue"
            },
            {
              "lineno": 181,
              "line": ""
            },
            {
              "lineno": 182,
              "line": "        # If we've exhausted all retries, yield the error"
            },
            {
              "lineno": 183,
              "line": "        yield \"error\", f\"Failed after {max_retries} attempts. Last error: {last_error}\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def run(\n    self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n) -> BlockOutput:\n    max_retries = 3\n    retry_delay = 5  # seconds\n    last_error = None\n",
              "successors": [
                {
                  "id": 2,
                  "label": "for attempt in range(max_retries):\n",
                  "successors": [
                    {
                      "id": 3,
                      "label": "try:\n    logger.debug(\n        f\"[AIMusicGeneratorBlock] - Running model (attempt {attempt + 1})\"\n    )\n",
                      "successors": [
                        {
                          "id": 4,
                          "label": "result = self.run_model(\n    api_key=credentials.api_key,\n    music_gen_model_version=input_data.music_gen_model_version,\n    prompt=input_data.prompt,\n    duration=input_data.duration,\n    temperature=input_data.temperature,\n    top_k=input_data.top_k,\n    top_p=input_data.top_p,\n    classifier_free_guidance=input_data.classifier_free_guidance,\n    output_format=input_data.output_format,\n    normalization_strategy=input_data.normalization_strategy,\n)\n",
                          "successors": [
                            {
                              "id": 5,
                              "label": "if result and result != \"No output received\":\n    yield \"result\", result\n    return\n",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "label": "else:\n    last_error = \"Model returned empty or invalid response\"\n    raise ValueError(last_error)\n",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "except Exception as e:\n    last_error = f\"Unexpected error: {str(e)}\"\n    logger.error(f\"[AIMusicGeneratorBlock] - Error: {last_error}\")\n    if attempt < max_retries - 1:\n        time.sleep(retry_delay)\n        continue\n",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "# If we've exhausted all retries, yield the error\nyield \"error\", f\"Failed after {max_retries} attempts. Last error: {last_error}\"\n",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run_model",
          "type": "function",
          "start_line": 185,
          "end_line": 227,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 185,
              "line": "    def run_model("
            },
            {
              "lineno": 186,
              "line": "        self,"
            },
            {
              "lineno": 187,
              "line": "        api_key: SecretStr,"
            },
            {
              "lineno": 188,
              "line": "        music_gen_model_version: MusicGenModelVersion,"
            },
            {
              "lineno": 189,
              "line": "        prompt: str,"
            },
            {
              "lineno": 190,
              "line": "        duration: int,"
            },
            {
              "lineno": 191,
              "line": "        temperature: float,"
            },
            {
              "lineno": 192,
              "line": "        top_k: int,"
            },
            {
              "lineno": 193,
              "line": "        top_p: float,"
            },
            {
              "lineno": 194,
              "line": "        classifier_free_guidance: int,"
            },
            {
              "lineno": 195,
              "line": "        output_format: AudioFormat,"
            },
            {
              "lineno": 196,
              "line": "        normalization_strategy: NormalizationStrategy,"
            },
            {
              "lineno": 197,
              "line": "    ):"
            },
            {
              "lineno": 198,
              "line": "        # Initialize Replicate client with the API key"
            },
            {
              "lineno": 199,
              "line": "        client = replicate.Client(api_token=api_key.get_secret_value())"
            },
            {
              "lineno": 200,
              "line": ""
            },
            {
              "lineno": 201,
              "line": "        # Run the model with parameters"
            },
            {
              "lineno": 202,
              "line": "        output = client.run("
            },
            {
              "lineno": 203,
              "line": "            \"meta/musicgen:671ac645ce5e552cc63a54a2bbff63fcf798043055d2dac5fc9e36a837eedcfb\","
            },
            {
              "lineno": 204,
              "line": "            input={"
            },
            {
              "lineno": 205,
              "line": "                \"prompt\": prompt,"
            },
            {
              "lineno": 206,
              "line": "                \"music_gen_model_version\": music_gen_model_version,"
            },
            {
              "lineno": 207,
              "line": "                \"duration\": duration,"
            },
            {
              "lineno": 208,
              "line": "                \"temperature\": temperature,"
            },
            {
              "lineno": 209,
              "line": "                \"top_k\": top_k,"
            },
            {
              "lineno": 210,
              "line": "                \"top_p\": top_p,"
            },
            {
              "lineno": 211,
              "line": "                \"classifier_free_guidance\": classifier_free_guidance,"
            },
            {
              "lineno": 212,
              "line": "                \"output_format\": output_format,"
            },
            {
              "lineno": 213,
              "line": "                \"normalization_strategy\": normalization_strategy,"
            },
            {
              "lineno": 214,
              "line": "            },"
            },
            {
              "lineno": 215,
              "line": "        )"
            },
            {
              "lineno": 216,
              "line": ""
            },
            {
              "lineno": 217,
              "line": "        # Handle the output"
            },
            {
              "lineno": 218,
              "line": "        if isinstance(output, list) and len(output) > 0:"
            },
            {
              "lineno": 219,
              "line": "            result_url = output[0]  # If output is a list, get the first element"
            },
            {
              "lineno": 220,
              "line": "        elif isinstance(output, str):"
            },
            {
              "lineno": 221,
              "line": "            result_url = output  # If output is a string, use it directly"
            },
            {
              "lineno": 222,
              "line": "        else:"
            },
            {
              "lineno": 223,
              "line": "            result_url = ("
            },
            {
              "lineno": 224,
              "line": "                \"No output received\"  # Fallback message if output is not as expected"
            },
            {
              "lineno": 225,
              "line": "            )"
            },
            {
              "lineno": 226,
              "line": ""
            },
            {
              "lineno": 227,
              "line": "        return result_url"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run_model(\n        self,\n        api_key: SecretStr,\n        music_gen_model_version: MusicGenModelVersion,\n        prompt: str,\n        duration: int,\n        temperature: float,\n        top_k: int,\n        top_p: float,\n        classifier_free_guidance: int,\n        output_format: AudioFormat,\n        normalization_strategy: NormalizationStrategy,\n    ):\n        # Initialize Replicate client with the API key\n        client = replicate.Client(api_token=api_key.get_secret_value())",
              "successors": [
                {
                  "id": 3,
                  "label": "        # Run the model with parameters\n        output = client.run(\n            \"meta/musicgen:671ac645ce5e552cc63a54a2bbff63fcf798043055d2dac5fc9e36a837eedcfb\",\n            input={\n                \"prompt\": prompt,\n                \"music_gen_model_version\": music_gen_model_version,\n                \"duration\": duration,\n                \"temperature\": temperature,\n                \"top_k\": top_k,\n                \"top_p\": top_p,\n                \"classifier_free_guidance\": classifier_free_guidance,\n                \"output_format\": output_format,\n                \"normalization_strategy\": normalization_strategy,\n            },\n        )\n        # Handle the output\n        if isinstance(output, list) and len(output) > 0:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "            result_url = output[0]  # If output is a list, get the first element\n        return result_url",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "        elif isinstance(output, str):\n            result_url = output  # If output is a string, use it directly\n        return result_url",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "        else:\n            result_url = (\n                \"No output received\"  # Fallback message if output is not as expected\n            )\n        return result_url",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 57,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 57,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 58,
              "line": "        credentials: CredentialsMetaInput["
            },
            {
              "lineno": 59,
              "line": "            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]"
            },
            {
              "lineno": 60,
              "line": "        ] = CredentialsField("
            },
            {
              "lineno": 61,
              "line": "            description=\"The Replicate integration can be used with \""
            },
            {
              "lineno": 62,
              "line": "            \"any API key with sufficient permissions for the blocks it is used on.\","
            },
            {
              "lineno": 63,
              "line": "        )"
            },
            {
              "lineno": 64,
              "line": "        prompt: str = SchemaField("
            },
            {
              "lineno": 65,
              "line": "            description=\"A description of the music you want to generate\","
            },
            {
              "lineno": 66,
              "line": "            placeholder=\"e.g., 'An upbeat electronic dance track with heavy bass'\","
            },
            {
              "lineno": 67,
              "line": "            title=\"Prompt\","
            },
            {
              "lineno": 68,
              "line": "        )"
            },
            {
              "lineno": 69,
              "line": "        music_gen_model_version: MusicGenModelVersion = SchemaField("
            },
            {
              "lineno": 70,
              "line": "            description=\"Model to use for generation\","
            },
            {
              "lineno": 71,
              "line": "            default=MusicGenModelVersion.STEREO_LARGE,"
            },
            {
              "lineno": 72,
              "line": "            title=\"Model Version\","
            },
            {
              "lineno": 73,
              "line": "        )"
            },
            {
              "lineno": 74,
              "line": "        duration: int = SchemaField("
            },
            {
              "lineno": 75,
              "line": "            description=\"Duration of the generated audio in seconds\","
            },
            {
              "lineno": 76,
              "line": "            default=8,"
            },
            {
              "lineno": 77,
              "line": "            title=\"Duration\","
            },
            {
              "lineno": 78,
              "line": "        )"
            },
            {
              "lineno": 79,
              "line": "        temperature: float = SchemaField("
            },
            {
              "lineno": 80,
              "line": "            description=\"Controls the 'conservativeness' of the sampling process. Higher temperature means more diversity\","
            },
            {
              "lineno": 81,
              "line": "            default=1.0,"
            },
            {
              "lineno": 82,
              "line": "            title=\"Temperature\","
            },
            {
              "lineno": 83,
              "line": "        )"
            },
            {
              "lineno": 84,
              "line": "        top_k: int = SchemaField("
            },
            {
              "lineno": 85,
              "line": "            description=\"Reduces sampling to the k most likely tokens\","
            },
            {
              "lineno": 86,
              "line": "            default=250,"
            },
            {
              "lineno": 87,
              "line": "            title=\"Top K\","
            },
            {
              "lineno": 88,
              "line": "        )"
            },
            {
              "lineno": 89,
              "line": "        top_p: float = SchemaField("
            },
            {
              "lineno": 90,
              "line": "            description=\"Reduces sampling to tokens with cumulative probability of p. When set to 0 (default), top_k sampling is used\","
            },
            {
              "lineno": 91,
              "line": "            default=0.0,"
            },
            {
              "lineno": 92,
              "line": "            title=\"Top P\","
            },
            {
              "lineno": 93,
              "line": "        )"
            },
            {
              "lineno": 94,
              "line": "        classifier_free_guidance: int = SchemaField("
            },
            {
              "lineno": 95,
              "line": "            description=\"Increases the influence of inputs on the output. Higher values produce lower-variance outputs that adhere more closely to inputs\","
            },
            {
              "lineno": 96,
              "line": "            default=3,"
            },
            {
              "lineno": 97,
              "line": "            title=\"Classifier Free Guidance\","
            },
            {
              "lineno": 98,
              "line": "        )"
            },
            {
              "lineno": 99,
              "line": "        output_format: AudioFormat = SchemaField("
            },
            {
              "lineno": 100,
              "line": "            description=\"Output format for generated audio\","
            },
            {
              "lineno": 101,
              "line": "            default=AudioFormat.WAV,"
            },
            {
              "lineno": 102,
              "line": "            title=\"Output Format\","
            },
            {
              "lineno": 103,
              "line": "        )"
            },
            {
              "lineno": 104,
              "line": "        normalization_strategy: NormalizationStrategy = SchemaField("
            },
            {
              "lineno": 105,
              "line": "            description=\"Strategy for normalizing audio\","
            },
            {
              "lineno": 106,
              "line": "            default=NormalizationStrategy.LOUDNESS,"
            },
            {
              "lineno": 107,
              "line": "            title=\"Normalization Strategy\","
            },
            {
              "lineno": 108,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Replicate integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        prompt: str = SchemaField(\n            description=\"A description of the music you want to generate\",\n            placeholder=\"e.g., 'An upbeat electronic dance track with heavy bass'\",\n            title=\"Prompt\",\n        )\n        music_gen_model_version: MusicGenModelVersion = SchemaField(\n            description=\"Model to use for generation\",\n            default=MusicGenModelVersion.STEREO_LARGE,\n            title=\"Model Version\",\n        )\n        duration: int = SchemaField(\n            description=\"Duration of the generated audio in seconds\",\n            default=8,\n            title=\"Duration\",\n        )\n        temperature: float = SchemaField(\n            description=\"Controls the 'conservativeness' of the sampling process. Higher temperature means more diversity\",\n            default=1.0,\n            title=\"Temperature\",\n        )\n        top_k: int = SchemaField(\n            description=\"Reduces sampling to the k most likely tokens\",\n            default=250,\n            title=\"Top K\",\n        )\n        top_p: float = SchemaField(\n            description=\"Reduces sampling to tokens with cumulative probability of p. When set to 0 (default), top_k sampling is used\",\n            default=0.0,\n            title=\"Top P\",\n        )\n        classifier_free_guidance: int = SchemaField(\n            description=\"Increases the influence of inputs on the output. Higher values produce lower-variance outputs that adhere more closely to inputs\",\n            default=3,\n            title=\"Classifier Free Guidance\",\n        )\n        output_format: AudioFormat = SchemaField(\n            description=\"Output format for generated audio\",\n            default=AudioFormat.WAV,\n            title=\"Output Format\",\n        )\n        normalization_strategy: NormalizationStrategy = SchemaField(\n            description=\"Strategy for normalizing audio\",\n            default=NormalizationStrategy.LOUDNESS,\n            title=\"Normalization Strategy\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 110,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 110,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 111,
              "line": "        result: str = SchemaField(description=\"URL of the generated audio file\")"
            },
            {
              "lineno": 112,
              "line": "        error: str = SchemaField(description=\"Error message if the model run failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        result: str = SchemaField(description=\"URL of the generated audio file\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 56,
          "line": "class AIMusicGeneratorBlock(Block):"
        },
        {
          "lineno": 109,
          "line": ""
        },
        {
          "lineno": 113,
          "line": ""
        },
        {
          "lineno": 144,
          "line": ""
        },
        {
          "lineno": 184,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class AIMusicGeneratorBlock(Block):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import logging"
    },
    {
      "lineno": 2,
      "line": "import time"
    },
    {
      "lineno": 3,
      "line": "from enum import Enum"
    },
    {
      "lineno": 4,
      "line": "from typing import Literal"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "import replicate"
    },
    {
      "lineno": 7,
      "line": "from pydantic import SecretStr"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 10,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 11,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 12,
      "line": "    CredentialsField,"
    },
    {
      "lineno": 13,
      "line": "    CredentialsMetaInput,"
    },
    {
      "lineno": 14,
      "line": "    SchemaField,"
    },
    {
      "lineno": 15,
      "line": ")"
    },
    {
      "lineno": 16,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 19,
      "line": ""
    },
    {
      "lineno": 20,
      "line": "TEST_CREDENTIALS = APIKeyCredentials("
    },
    {
      "lineno": 21,
      "line": "    id=\"01234567-89ab-cdef-0123-456789abcdef\","
    },
    {
      "lineno": 22,
      "line": "    provider=\"replicate\","
    },
    {
      "lineno": 23,
      "line": "    api_key=SecretStr(\"mock-replicate-api-key\"),"
    },
    {
      "lineno": 24,
      "line": "    title=\"Mock Replicate API key\","
    },
    {
      "lineno": 25,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 26,
      "line": ")"
    },
    {
      "lineno": 27,
      "line": "TEST_CREDENTIALS_INPUT = {"
    },
    {
      "lineno": 28,
      "line": "    \"provider\": TEST_CREDENTIALS.provider,"
    },
    {
      "lineno": 29,
      "line": "    \"id\": TEST_CREDENTIALS.id,"
    },
    {
      "lineno": 30,
      "line": "    \"type\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 31,
      "line": "    \"title\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 32,
      "line": "}"
    },
    {
      "lineno": 33,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 35,
      "line": "# Model version enum"
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 42,
      "line": "# Audio format enum"
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 47,
      "line": ""
    },
    {
      "lineno": 48,
      "line": "# Normalization strategy enum"
    },
    {
      "lineno": 54,
      "line": ""
    },
    {
      "lineno": 55,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nimport time\nfrom enum import Enum\nfrom typing import Literal\n\nimport replicate\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nlogger = logging.getLogger(__name__)\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
      "successors": []
    }
  ]
}