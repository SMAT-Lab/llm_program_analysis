{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 102,
  "functions": [],
  "classes": [
    {
      "name": "UnrealTextToSpeechBlock",
      "type": "class",
      "start_line": 30,
      "end_line": 102,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 52,
          "end_line": 71,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 52,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 53,
              "line": "        super().__init__("
            },
            {
              "lineno": 54,
              "line": "            id=\"4ff1ff6d-cc40-4caa-ae69-011daa20c378\","
            },
            {
              "lineno": 55,
              "line": "            description=\"Converts text to speech using the Unreal Speech API\","
            },
            {
              "lineno": 56,
              "line": "            categories={BlockCategory.AI, BlockCategory.TEXT},"
            },
            {
              "lineno": 57,
              "line": "            input_schema=UnrealTextToSpeechBlock.Input,"
            },
            {
              "lineno": 58,
              "line": "            output_schema=UnrealTextToSpeechBlock.Output,"
            },
            {
              "lineno": 59,
              "line": "            test_input={"
            },
            {
              "lineno": 60,
              "line": "                \"text\": \"This is a test of the text to speech API.\","
            },
            {
              "lineno": 61,
              "line": "                \"voice_id\": \"Scarlett\","
            },
            {
              "lineno": 62,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 63,
              "line": "            },"
            },
            {
              "lineno": 64,
              "line": "            test_output=[(\"mp3_url\", \"https://example.com/test.mp3\")],"
            },
            {
              "lineno": 65,
              "line": "            test_mock={"
            },
            {
              "lineno": 66,
              "line": "                \"call_unreal_speech_api\": lambda *args, **kwargs: {"
            },
            {
              "lineno": 67,
              "line": "                    \"OutputUri\": \"https://example.com/test.mp3\""
            },
            {
              "lineno": 68,
              "line": "                }"
            },
            {
              "lineno": 69,
              "line": "            },"
            },
            {
              "lineno": 70,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 71,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"4ff1ff6d-cc40-4caa-ae69-011daa20c378\",\n            description=\"Converts text to speech using the Unreal Speech API\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=UnrealTextToSpeechBlock.Input,\n            output_schema=UnrealTextToSpeechBlock.Output,\n            test_input={\n                \"text\": \"This is a test of the text to speech API.\",\n                \"voice_id\": \"Scarlett\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"mp3_url\", \"https://example.com/test.mp3\")],\n            test_mock={\n                \"call_unreal_speech_api\": lambda *args, **kwargs: {\n                    \"OutputUri\": \"https://example.com/test.mp3\"\n                }\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "call_unreal_speech_api",
          "type": "function",
          "start_line": 73,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 73,
              "line": "    @staticmethod"
            },
            {
              "lineno": 74,
              "line": "    def call_unreal_speech_api("
            },
            {
              "lineno": 75,
              "line": "        api_key: SecretStr, text: str, voice_id: str"
            },
            {
              "lineno": 76,
              "line": "    ) -> dict[str, Any]:"
            },
            {
              "lineno": 77,
              "line": "        url = \"https://api.v7.unrealspeech.com/speech\""
            },
            {
              "lineno": 78,
              "line": "        headers = {"
            },
            {
              "lineno": 79,
              "line": "            \"Authorization\": f\"Bearer {api_key.get_secret_value()}\","
            },
            {
              "lineno": 80,
              "line": "            \"Content-Type\": \"application/json\","
            },
            {
              "lineno": 81,
              "line": "        }"
            },
            {
              "lineno": 82,
              "line": "        data = {"
            },
            {
              "lineno": 83,
              "line": "            \"Text\": text,"
            },
            {
              "lineno": 84,
              "line": "            \"VoiceId\": voice_id,"
            },
            {
              "lineno": 85,
              "line": "            \"Bitrate\": \"192k\","
            },
            {
              "lineno": 86,
              "line": "            \"Speed\": \"0\","
            },
            {
              "lineno": 87,
              "line": "            \"Pitch\": \"1\","
            },
            {
              "lineno": 88,
              "line": "            \"TimestampType\": \"sentence\","
            },
            {
              "lineno": 89,
              "line": "        }"
            },
            {
              "lineno": 90,
              "line": ""
            },
            {
              "lineno": 91,
              "line": "        response = requests.post(url, headers=headers, json=data)"
            },
            {
              "lineno": 92,
              "line": "        return response.json()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    @staticmethod\n    def call_unreal_speech_api(\n        api_key: SecretStr, text: str, voice_id: str\n    ) -> dict[str, Any]:\n        url = \"https://api.v7.unrealspeech.com/speech\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n        }\n        data = {\n            \"Text\": text,\n            \"VoiceId\": voice_id,\n            \"Bitrate\": \"192k\",\n            \"Speed\": \"0\",\n            \"Pitch\": \"1\",\n            \"TimestampType\": \"sentence\",\n        }",
              "successors": [
                {
                  "id": 3,
                  "label": "        response = requests.post(url, headers=headers, json=data)\n        return response.json()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 94,
          "end_line": 102,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 94,
              "line": "    def run("
            },
            {
              "lineno": 95,
              "line": "        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs"
            },
            {
              "lineno": 96,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 97,
              "line": "        api_response = self.call_unreal_speech_api("
            },
            {
              "lineno": 98,
              "line": "            credentials.api_key,"
            },
            {
              "lineno": 99,
              "line": "            input_data.text,"
            },
            {
              "lineno": 100,
              "line": "            input_data.voice_id,"
            },
            {
              "lineno": 101,
              "line": "        )"
            },
            {
              "lineno": 102,
              "line": "        yield \"mp3_url\", api_response[\"OutputUri\"]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        api_response = self.call_unreal_speech_api(\n            credentials.api_key,\n            input_data.text,\n            input_data.voice_id,\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        yield \"mp3_url\", api_response[\"OutputUri\"]",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 31,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 31,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 32,
              "line": "        text: str = SchemaField("
            },
            {
              "lineno": 33,
              "line": "            description=\"The text to be converted to speech\","
            },
            {
              "lineno": 34,
              "line": "            placeholder=\"Enter the text you want to convert to speech\","
            },
            {
              "lineno": 35,
              "line": "        )"
            },
            {
              "lineno": 36,
              "line": "        voice_id: str = SchemaField("
            },
            {
              "lineno": 37,
              "line": "            description=\"The voice ID to use for text-to-speech conversion\","
            },
            {
              "lineno": 38,
              "line": "            placeholder=\"Scarlett\","
            },
            {
              "lineno": 39,
              "line": "            default=\"Scarlett\","
            },
            {
              "lineno": 40,
              "line": "        )"
            },
            {
              "lineno": 41,
              "line": "        credentials: CredentialsMetaInput["
            },
            {
              "lineno": 42,
              "line": "            Literal[ProviderName.UNREAL_SPEECH], Literal[\"api_key\"]"
            },
            {
              "lineno": 43,
              "line": "        ] = CredentialsField("
            },
            {
              "lineno": 44,
              "line": "            description=\"The Unreal Speech integration can be used with \""
            },
            {
              "lineno": 45,
              "line": "            \"any API key with sufficient permissions for the blocks it is used on.\","
            },
            {
              "lineno": 46,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"The text to be converted to speech\",\n            placeholder=\"Enter the text you want to convert to speech\",\n        )\n        voice_id: str = SchemaField(\n            description=\"The voice ID to use for text-to-speech conversion\",\n            placeholder=\"Scarlett\",\n            default=\"Scarlett\",\n        )\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.UNREAL_SPEECH], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Unreal Speech integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 48,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 48,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 49,
              "line": "        mp3_url: str = SchemaField(description=\"The URL of the generated MP3 file\")"
            },
            {
              "lineno": 50,
              "line": "        error: str = SchemaField(description=\"Error message if the API call failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        mp3_url: str = SchemaField(description=\"The URL of the generated MP3 file\")\n        error: str = SchemaField(description=\"Error message if the API call failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 30,
          "line": "class UnrealTextToSpeechBlock(Block):"
        },
        {
          "lineno": 47,
          "line": ""
        },
        {
          "lineno": 51,
          "line": ""
        },
        {
          "lineno": 72,
          "line": ""
        },
        {
          "lineno": 93,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from typing import Any, Literal"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from pydantic import SecretStr"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 6,
      "line": "from backend.data.model import ("
    },
    {
      "lineno": 7,
      "line": "    APIKeyCredentials,"
    },
    {
      "lineno": 8,
      "line": "    CredentialsField,"
    },
    {
      "lineno": 9,
      "line": "    CredentialsMetaInput,"
    },
    {
      "lineno": 10,
      "line": "    SchemaField,"
    },
    {
      "lineno": 11,
      "line": ")"
    },
    {
      "lineno": 12,
      "line": "from backend.integrations.providers import ProviderName"
    },
    {
      "lineno": 13,
      "line": "from backend.util.request import requests"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "TEST_CREDENTIALS = APIKeyCredentials("
    },
    {
      "lineno": 16,
      "line": "    id=\"01234567-89ab-cdef-0123-456789abcdef\","
    },
    {
      "lineno": 17,
      "line": "    provider=\"unreal_speech\","
    },
    {
      "lineno": 18,
      "line": "    api_key=SecretStr(\"mock-unreal-speech-api-key\"),"
    },
    {
      "lineno": 19,
      "line": "    title=\"Mock Unreal Speech API key\","
    },
    {
      "lineno": 20,
      "line": "    expires_at=None,"
    },
    {
      "lineno": 21,
      "line": ")"
    },
    {
      "lineno": 22,
      "line": "TEST_CREDENTIALS_INPUT = {"
    },
    {
      "lineno": 23,
      "line": "    \"provider\": TEST_CREDENTIALS.provider,"
    },
    {
      "lineno": 24,
      "line": "    \"id\": TEST_CREDENTIALS.id,"
    },
    {
      "lineno": 25,
      "line": "    \"type\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 26,
      "line": "    \"title\": TEST_CREDENTIALS.type,"
    },
    {
      "lineno": 27,
      "line": "}"
    },
    {
      "lineno": 28,
      "line": ""
    },
    {
      "lineno": 29,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from typing import Any, Literal\n\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"unreal_speech\",\n    api_key=SecretStr(\"mock-unreal-speech-api-key\"),\n    title=\"Mock Unreal Speech API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
      "successors": []
    }
  ]
}