{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 77,
  "functions": [
    {
      "name": "backtrack",
      "type": "function",
      "start_line": 11,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 11,
          "line": "def backtrack("
        },
        {
          "lineno": 12,
          "line": "    partial: str, open_count: int, close_count: int, n: int, result: list[str]"
        },
        {
          "lineno": 13,
          "line": ") -> None:"
        },
        {
          "lineno": 14,
          "line": "    \"\"\""
        },
        {
          "lineno": 15,
          "line": "    Generate valid combinations of balanced parentheses using recursion."
        },
        {
          "lineno": 16,
          "line": ""
        },
        {
          "lineno": 17,
          "line": "    :param partial: A string representing the current combination."
        },
        {
          "lineno": 18,
          "line": "    :param open_count: An integer representing the count of open parentheses."
        },
        {
          "lineno": 19,
          "line": "    :param close_count: An integer representing the count of close parentheses."
        },
        {
          "lineno": 20,
          "line": "    :param n: An integer representing the total number of pairs."
        },
        {
          "lineno": 21,
          "line": "    :param result: A list to store valid combinations."
        },
        {
          "lineno": 22,
          "line": "    :return: None"
        },
        {
          "lineno": 23,
          "line": ""
        },
        {
          "lineno": 24,
          "line": "    This function uses recursion to explore all possible combinations,"
        },
        {
          "lineno": 25,
          "line": "    ensuring that at each step, the parentheses remain balanced."
        },
        {
          "lineno": 26,
          "line": ""
        },
        {
          "lineno": 27,
          "line": "    Example:"
        },
        {
          "lineno": 28,
          "line": "    >>> result = []"
        },
        {
          "lineno": 29,
          "line": "    >>> backtrack(\"\", 0, 0, 2, result)"
        },
        {
          "lineno": 30,
          "line": "    >>> result"
        },
        {
          "lineno": 31,
          "line": "    ['(())', '()()']"
        },
        {
          "lineno": 32,
          "line": "    \"\"\""
        },
        {
          "lineno": 33,
          "line": "    if len(partial) == 2 * n:"
        },
        {
          "lineno": 34,
          "line": "        # When the combination is complete, add it to the result."
        },
        {
          "lineno": 35,
          "line": "        result.append(partial)"
        },
        {
          "lineno": 36,
          "line": "        return"
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "    if open_count < n:"
        },
        {
          "lineno": 39,
          "line": "        # If we can add an open parenthesis, do so, and recurse."
        },
        {
          "lineno": 40,
          "line": "        backtrack(partial + \"(\", open_count + 1, close_count, n, result)"
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 42,
          "line": "    if close_count < open_count:"
        },
        {
          "lineno": 43,
          "line": "        # If we can add a close parenthesis (it won't make the combination invalid),"
        },
        {
          "lineno": 44,
          "line": "        # do so, and recurse."
        },
        {
          "lineno": 45,
          "line": "        backtrack(partial + \")\", open_count, close_count + 1, n, result)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def backtrack(\n    partial: str, open_count: int, close_count: int, n: int, result: list[str]\n) -> None:\n    \"\"\"\n    Generate valid combinations of balanced parentheses using recursion.\n\n    :param partial: A string representing the current combination.\n    :param open_count: An integer representing the count of open parentheses.\n    :param close_count: An integer representing the count of close parentheses.\n    :param n: An integer representing the total number of pairs.\n    :param result: A list to store valid combinations.\n    :return: None\n\n    This function uses recursion to explore all possible combinations,\n    ensuring that at each step, the parentheses remain balanced.\n\n    Example:\n    >>> result = []\n    >>> backtrack(\"\", 0, 0, 2, result)\n    >>> result\n    ['(())', '()()']\n    \"\"\"\nif len(partial) == 2 * n:\n    # When the combination is complete, add it to the result.\n    result.append(partial)\n    return",
          "successors": [
            {
              "id": 3,
              "label": "if open_count < n:\n    # If we can add an open parenthesis, do so, and recurse.\n    backtrack(partial + \"(\", open_count + 1, close_count, n, result)\nif close_count < open_count:\n    # If we can add a close parenthesis (it won't make the combination invalid),\n    # do so, and recurse.\n    backtrack(partial + \")\", open_count, close_count + 1, n, result)",
              "successors": []
            },
            {
              "id": 4,
              "label": "if close_count < open_count:\n    # If we can add a close parenthesis (it won't make the combination invalid),\n    # do so, and recurse.\n    backtrack(partial + \")\", open_count, close_count + 1, n, result)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "generate_parenthesis",
      "type": "function",
      "start_line": 48,
      "end_line": 71,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 48,
          "line": "def generate_parenthesis(n: int) -> list[str]:"
        },
        {
          "lineno": 49,
          "line": "    \"\"\""
        },
        {
          "lineno": 50,
          "line": "    Generate valid combinations of balanced parentheses for a given n."
        },
        {
          "lineno": 51,
          "line": ""
        },
        {
          "lineno": 52,
          "line": "    :param n: An integer representing the number of pairs of parentheses."
        },
        {
          "lineno": 53,
          "line": "    :return: A list of strings with valid combinations."
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 55,
          "line": "    This function uses a recursive approach to generate the combinations."
        },
        {
          "lineno": 56,
          "line": ""
        },
        {
          "lineno": 57,
          "line": "    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations."
        },
        {
          "lineno": 58,
          "line": "    Space Complexity: O(n) - where 'n' is the number of pairs."
        },
        {
          "lineno": 59,
          "line": ""
        },
        {
          "lineno": 60,
          "line": "    Example 1:"
        },
        {
          "lineno": 61,
          "line": "    >>> generate_parenthesis(3)"
        },
        {
          "lineno": 62,
          "line": "    ['((()))', '(()())', '(())()', '()(())', '()()()']"
        },
        {
          "lineno": 63,
          "line": ""
        },
        {
          "lineno": 64,
          "line": "    Example 2:"
        },
        {
          "lineno": 65,
          "line": "    >>> generate_parenthesis(1)"
        },
        {
          "lineno": 66,
          "line": "    ['()']"
        },
        {
          "lineno": 67,
          "line": "    \"\"\""
        },
        {
          "lineno": 68,
          "line": ""
        },
        {
          "lineno": 69,
          "line": "    result: list[str] = []"
        },
        {
          "lineno": 70,
          "line": "    backtrack(\"\", 0, 0, n, result)"
        },
        {
          "lineno": 71,
          "line": "    return result"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def generate_parenthesis(n: int) -> list[str]:\n    \"\"\"\n    Generate valid combinations of balanced parentheses for a given n.\n\n    :param n: An integer representing the number of pairs of parentheses.\n    :return: A list of strings with valid combinations.\n\n    This function uses a recursive approach to generate the combinations.\n\n    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.\n    Space Complexity: O(n) - where 'n' is the number of pairs.\n\n    Example 1:\n    >>> generate_parenthesis(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()']\n\n    Example 2:\n    >>> generate_parenthesis(1)\n    ['()']\n    \"\"\"\n\n    result: list[str] = []\n    backtrack(\"\", 0, 0, n, result)\nreturn result",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "author: Aayush Soni"
    },
    {
      "lineno": 3,
      "line": "Given n pairs of parentheses, write a function to generate all"
    },
    {
      "lineno": 4,
      "line": "combinations of well-formed parentheses."
    },
    {
      "lineno": 5,
      "line": "Input: n = 2"
    },
    {
      "lineno": 6,
      "line": "Output: [\"(())\",\"()()\"]"
    },
    {
      "lineno": 7,
      "line": "Leetcode link: https://leetcode.com/problems/generate-parentheses/description/"
    },
    {
      "lineno": 8,
      "line": "\"\"\""
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 47,
      "line": ""
    },
    {
      "lineno": 72,
      "line": ""
    },
    {
      "lineno": 73,
      "line": ""
    },
    {
      "lineno": 74,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 75,
      "line": "    import doctest"
    },
    {
      "lineno": 76,
      "line": ""
    },
    {
      "lineno": 77,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "\"\"\"\nauthor: Aayush Soni\nGiven n pairs of parentheses, write a function to generate all\ncombinations of well-formed parentheses.\nInput: n = 2\nOutput: [\"(())\",\"()()\"]\nLeetcode link: https://leetcode.com/problems/generate-parentheses/description/\n\"\"\"",
      "successors": []
    }
  ]
}