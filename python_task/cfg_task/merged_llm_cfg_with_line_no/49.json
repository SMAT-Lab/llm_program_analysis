{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 109,
  "functions": [],
  "classes": [
    {
      "name": "ReadCsvBlock",
      "type": "class",
      "start_line": 5,
      "end_line": 109,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 48,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 48,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 49,
              "line": "        super().__init__("
            },
            {
              "lineno": 50,
              "line": "            id=\"acf7625e-d2cb-4941-bfeb-2819fc6fc015\","
            },
            {
              "lineno": 51,
              "line": "            input_schema=ReadCsvBlock.Input,"
            },
            {
              "lineno": 52,
              "line": "            output_schema=ReadCsvBlock.Output,"
            },
            {
              "lineno": 53,
              "line": "            description=\"Reads a CSV file and outputs the data as a list of dictionaries and individual rows via rows.\","
            },
            {
              "lineno": 54,
              "line": "            contributors=[ContributorDetails(name=\"Nicholas Tindle\")],"
            },
            {
              "lineno": 55,
              "line": "            categories={BlockCategory.TEXT, BlockCategory.DATA},"
            },
            {
              "lineno": 56,
              "line": "            test_input={"
            },
            {
              "lineno": 57,
              "line": "                \"contents\": \"a, b, c\\n1,2,3\\n4,5,6\","
            },
            {
              "lineno": 58,
              "line": "            },"
            },
            {
              "lineno": 59,
              "line": "            test_output=["
            },
            {
              "lineno": 60,
              "line": "                (\"row\", {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}),"
            },
            {
              "lineno": 61,
              "line": "                (\"row\", {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"}),"
            },
            {
              "lineno": 62,
              "line": "                ("
            },
            {
              "lineno": 63,
              "line": "                    \"all_data\","
            },
            {
              "lineno": 64,
              "line": "                    ["
            },
            {
              "lineno": 65,
              "line": "                        {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"},"
            },
            {
              "lineno": 66,
              "line": "                        {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"},"
            },
            {
              "lineno": 67,
              "line": "                    ],"
            },
            {
              "lineno": 68,
              "line": "                ),"
            },
            {
              "lineno": 69,
              "line": "            ],"
            },
            {
              "lineno": 70,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"acf7625e-d2cb-4941-bfeb-2819fc6fc015\",\n            input_schema=ReadCsvBlock.Input,\n            output_schema=ReadCsvBlock.Output,\n            description=\"Reads a CSV file and outputs the data as a list of dictionaries and individual rows via rows.\",\n            contributors=[ContributorDetails(name=\"Nicholas Tindle\")],\n            categories={BlockCategory.TEXT, BlockCategory.DATA},\n            test_input={\n                \"contents\": \"a, b, c\\n1,2,3\\n4,5,6\",\n            },\n            test_output=[\n                (\"row\", {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}),\n                (\"row\", {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"}),\n                (\n                    \"all_data\",\n                    [\n                        {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"},\n                        {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"},\n                    ],\n                ),\n            ],\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 72,
          "end_line": 109,
          "functions": [
            {
              "name": "process_row",
              "type": "function",
              "start_line": 93,
              "end_line": 101,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 93,
                  "line": "        def process_row(row):"
                },
                {
                  "lineno": 94,
                  "line": "            data = {}"
                },
                {
                  "lineno": 95,
                  "line": "            for i, value in enumerate(row):"
                },
                {
                  "lineno": 96,
                  "line": "                if i not in input_data.skip_columns:"
                },
                {
                  "lineno": 97,
                  "line": "                    if input_data.has_header and header:"
                },
                {
                  "lineno": 98,
                  "line": "                        data[header[i]] = value.strip() if input_data.strip else value"
                },
                {
                  "lineno": 99,
                  "line": "                    else:"
                },
                {
                  "lineno": 100,
                  "line": "                        data[str(i)] = value.strip() if input_data.strip else value"
                },
                {
                  "lineno": 101,
                  "line": "            return data"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "label": "        def process_row(row):\n            data = {}",
                  "successors": [
                    {
                      "id": 3,
                      "label": "            for i, value in enumerate(row):",
                      "successors": [
                        {
                          "id": 4,
                          "label": "                if i not in input_data.skip_columns:",
                          "successors": [
                            {
                              "id": 5,
                              "label": "                    if input_data.has_header and header:\n                        data[header[i]] = value.strip() if input_data.strip else value",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "label": "                    else:\n                        data[str(i)] = value.strip() if input_data.strip else value",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "            return data",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 72,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 73,
              "line": "        import csv"
            },
            {
              "lineno": 74,
              "line": "        from io import StringIO"
            },
            {
              "lineno": 75,
              "line": ""
            },
            {
              "lineno": 76,
              "line": "        csv_file = StringIO(input_data.contents)"
            },
            {
              "lineno": 77,
              "line": "        reader = csv.reader("
            },
            {
              "lineno": 78,
              "line": "            csv_file,"
            },
            {
              "lineno": 79,
              "line": "            delimiter=input_data.delimiter,"
            },
            {
              "lineno": 80,
              "line": "            quotechar=input_data.quotechar,"
            },
            {
              "lineno": 81,
              "line": "            escapechar=input_data.escapechar,"
            },
            {
              "lineno": 82,
              "line": "        )"
            },
            {
              "lineno": 83,
              "line": ""
            },
            {
              "lineno": 84,
              "line": "        header = None"
            },
            {
              "lineno": 85,
              "line": "        if input_data.has_header:"
            },
            {
              "lineno": 86,
              "line": "            header = next(reader)"
            },
            {
              "lineno": 87,
              "line": "            if input_data.strip:"
            },
            {
              "lineno": 88,
              "line": "                header = [h.strip() for h in header]"
            },
            {
              "lineno": 89,
              "line": ""
            },
            {
              "lineno": 90,
              "line": "        for _ in range(input_data.skip_rows):"
            },
            {
              "lineno": 91,
              "line": "            next(reader)"
            },
            {
              "lineno": 92,
              "line": ""
            },
            {
              "lineno": 102,
              "line": ""
            },
            {
              "lineno": 103,
              "line": "        all_data = []"
            },
            {
              "lineno": 104,
              "line": "        for row in reader:"
            },
            {
              "lineno": 105,
              "line": "            processed_row = process_row(row)"
            },
            {
              "lineno": 106,
              "line": "            all_data.append(processed_row)"
            },
            {
              "lineno": 107,
              "line": "            yield \"row\", processed_row"
            },
            {
              "lineno": 108,
              "line": ""
            },
            {
              "lineno": 109,
              "line": "        yield \"all_data\", all_data"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        import csv\n        from io import StringIO\n\n        csv_file = StringIO(input_data.contents)\n        reader = csv.reader(\n            csv_file,\n            delimiter=input_data.delimiter,\n            quotechar=input_data.quotechar,\n            escapechar=input_data.escapechar,\n        )\n\n        header = None",
              "successors": [
                {
                  "id": 2,
                  "label": "        if input_data.has_header:\n            header = next(reader)\n            if input_data.strip:\n                header = [h.strip() for h in header]",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "        for _ in range(input_data.skip_rows):\n            next(reader)",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "        all_data = []\n        for row in reader:\n            processed_row = process_row(row)\n            all_data.append(processed_row)\n            yield \"row\", processed_row\n\n        yield \"all_data\", all_data",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 6,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 6,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 7,
              "line": "        contents: str = SchemaField("
            },
            {
              "lineno": 8,
              "line": "            description=\"The contents of the CSV file to read\","
            },
            {
              "lineno": 9,
              "line": "            placeholder=\"a, b, c\\n1,2,3\\n4,5,6\","
            },
            {
              "lineno": 10,
              "line": "        )"
            },
            {
              "lineno": 11,
              "line": "        delimiter: str = SchemaField("
            },
            {
              "lineno": 12,
              "line": "            description=\"The delimiter used in the CSV file\","
            },
            {
              "lineno": 13,
              "line": "            default=\",\","
            },
            {
              "lineno": 14,
              "line": "        )"
            },
            {
              "lineno": 15,
              "line": "        quotechar: str = SchemaField("
            },
            {
              "lineno": 16,
              "line": "            description=\"The character used to quote fields\","
            },
            {
              "lineno": 17,
              "line": "            default='\"',"
            },
            {
              "lineno": 18,
              "line": "        )"
            },
            {
              "lineno": 19,
              "line": "        escapechar: str = SchemaField("
            },
            {
              "lineno": 20,
              "line": "            description=\"The character used to escape the delimiter\","
            },
            {
              "lineno": 21,
              "line": "            default=\"\\\\\","
            },
            {
              "lineno": 22,
              "line": "        )"
            },
            {
              "lineno": 23,
              "line": "        has_header: bool = SchemaField("
            },
            {
              "lineno": 24,
              "line": "            description=\"Whether the CSV file has a header row\","
            },
            {
              "lineno": 25,
              "line": "            default=True,"
            },
            {
              "lineno": 26,
              "line": "        )"
            },
            {
              "lineno": 27,
              "line": "        skip_rows: int = SchemaField("
            },
            {
              "lineno": 28,
              "line": "            description=\"The number of rows to skip from the start of the file\","
            },
            {
              "lineno": 29,
              "line": "            default=0,"
            },
            {
              "lineno": 30,
              "line": "        )"
            },
            {
              "lineno": 31,
              "line": "        strip: bool = SchemaField("
            },
            {
              "lineno": 32,
              "line": "            description=\"Whether to strip whitespace from the values\","
            },
            {
              "lineno": 33,
              "line": "            default=True,"
            },
            {
              "lineno": 34,
              "line": "        )"
            },
            {
              "lineno": 35,
              "line": "        skip_columns: list[str] = SchemaField("
            },
            {
              "lineno": 36,
              "line": "            description=\"The columns to skip from the start of the row\","
            },
            {
              "lineno": 37,
              "line": "            default=[],"
            },
            {
              "lineno": 38,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        contents: str = SchemaField(\n            description=\"The contents of the CSV file to read\",\n            placeholder=\"a, b, c\\n1,2,3\\n4,5,6\",\n        )\n        delimiter: str = SchemaField(\n            description=\"The delimiter used in the CSV file\",\n            default=\",\",\n        )\n        quotechar: str = SchemaField(\n            description=\"The character used to quote fields\",\n            default='\"',\n        )\n        escapechar: str = SchemaField(\n            description=\"The character used to escape the delimiter\",\n            default=\"\\\\\",\n        )\n        has_header: bool = SchemaField(\n            description=\"Whether the CSV file has a header row\",\n            default=True,\n        )\n        skip_rows: int = SchemaField(\n            description=\"The number of rows to skip from the start of the file\",\n            default=0,\n        )\n        strip: bool = SchemaField(\n            description=\"Whether to strip whitespace from the values\",\n            default=True,\n        )\n        skip_columns: list[str] = SchemaField(\n            description=\"The columns to skip from the start of the row\",\n            default=[],\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 40,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 40,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 41,
              "line": "        row: dict[str, str] = SchemaField("
            },
            {
              "lineno": 42,
              "line": "            description=\"The data produced from each row in the CSV file\""
            },
            {
              "lineno": 43,
              "line": "        )"
            },
            {
              "lineno": 44,
              "line": "        all_data: list[dict[str, str]] = SchemaField("
            },
            {
              "lineno": 45,
              "line": "            description=\"All the data in the CSV file as a list of rows\""
            },
            {
              "lineno": 46,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        row: dict[str, str] = SchemaField(\n            description=\"The data produced from each row in the CSV file\"\n        )\n        all_data: list[dict[str, str]] = SchemaField(\n            description=\"All the data in the CSV file as a list of rows\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 5,
          "line": "class ReadCsvBlock(Block):"
        },
        {
          "lineno": 39,
          "line": ""
        },
        {
          "lineno": 47,
          "line": ""
        },
        {
          "lineno": 71,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ReadCsvBlock(Block):\n",
          "successors": [
            {
              "id": 3,
              "label": "\n",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 2,
      "line": "from backend.data.model import ContributorDetails, SchemaField"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import ContributorDetails, SchemaField\n\n",
      "successors": []
    }
  ]
}