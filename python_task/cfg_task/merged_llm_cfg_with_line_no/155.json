{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 125,
  "functions": [],
  "classes": [
    {
      "name": "VehicleSize",
      "type": "class",
      "start_line": 5,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 5,
          "line": "class VehicleSize(Enum):"
        },
        {
          "lineno": 6,
          "line": ""
        },
        {
          "lineno": 7,
          "line": "    MOTORCYCLE = 0"
        },
        {
          "lineno": 8,
          "line": "    COMPACT = 1"
        },
        {
          "lineno": 9,
          "line": "    LARGE = 2"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class VehicleSize(Enum):\n\n    MOTORCYCLE = 0\n    COMPACT = 1\n    LARGE = 2",
          "successors": []
        }
      ]
    },
    {
      "name": "Vehicle",
      "type": "class",
      "start_line": 12,
      "end_line": 30,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 14,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "    def __init__(self, vehicle_size, license_plate, spot_size):"
            },
            {
              "lineno": 15,
              "line": "        self.vehicle_size = vehicle_size"
            },
            {
              "lineno": 16,
              "line": "        self.license_plate = license_plate"
            },
            {
              "lineno": 17,
              "line": "        self.spot_size"
            },
            {
              "lineno": 18,
              "line": "        self.spots_taken = []"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, vehicle_size, license_plate, spot_size):\n        self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []",
              "successors": []
            }
          ]
        },
        {
          "name": "clear_spots",
          "type": "function",
          "start_line": 20,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    def clear_spots(self):"
            },
            {
              "lineno": 21,
              "line": "        for spot in self.spots_taken:"
            },
            {
              "lineno": 22,
              "line": "            spot.remove_vehicle(self)"
            },
            {
              "lineno": 23,
              "line": "        self.spots_taken = []"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def clear_spots(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "        for spot in self.spots_taken:\n            spot.remove_vehicle(self)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "        self.spots_taken = []",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 3,
                  "label": "        self.spots_taken = []",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "take_spot",
          "type": "function",
          "start_line": 25,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    def take_spot(self, spot):"
            },
            {
              "lineno": 26,
              "line": "        self.spots_taken.append(spot)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def take_spot(self, spot):\n        self.spots_taken.append(spot)",
              "successors": []
            }
          ]
        },
        {
          "name": "can_fit_in_spot",
          "type": "function",
          "start_line": 29,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 29,
              "line": "    def can_fit_in_spot(self, spot):"
            },
            {
              "lineno": 30,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def can_fit_in_spot(self, spot):\n    pass",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 12,
          "line": "class Vehicle(metaclass=ABCMeta):"
        },
        {
          "lineno": 13,
          "line": ""
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 28,
          "line": "    @abstractmethod"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Vehicle(metaclass=ABCMeta):\n@abstractmethod",
          "successors": []
        }
      ]
    },
    {
      "name": "Motorcycle",
      "type": "class",
      "start_line": 33,
      "end_line": 39,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 35,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 35,
              "line": "    def __init__(self, license_plate):"
            },
            {
              "lineno": 36,
              "line": "        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)",
              "successors": []
            }
          ]
        },
        {
          "name": "can_fit_in_spot",
          "type": "function",
          "start_line": 38,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 38,
              "line": "    def can_fit_in_spot(self, spot):"
            },
            {
              "lineno": 39,
              "line": "        return True"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def can_fit_in_spot(self, spot):\n        return True",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 33,
          "line": "class Motorcycle(Vehicle):"
        },
        {
          "lineno": 34,
          "line": ""
        },
        {
          "lineno": 37,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Motorcycle(Vehicle):",
          "successors": []
        }
      ]
    },
    {
      "name": "Car",
      "type": "class",
      "start_line": 42,
      "end_line": 48,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 44,
          "end_line": 45,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 44,
              "line": "    def __init__(self, license_plate):"
            },
            {
              "lineno": 45,
              "line": "        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)",
              "successors": []
            }
          ]
        },
        {
          "name": "can_fit_in_spot",
          "type": "function",
          "start_line": 47,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 47,
              "line": "    def can_fit_in_spot(self, spot):"
            },
            {
              "lineno": 48,
              "line": "        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def can_fit_in_spot(self, spot):\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 42,
          "line": "class Car(Vehicle):"
        },
        {
          "lineno": 43,
          "line": ""
        },
        {
          "lineno": 46,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Car(Vehicle):",
          "successors": []
        }
      ]
    },
    {
      "name": "Bus",
      "type": "class",
      "start_line": 51,
      "end_line": 57,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 53,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 53,
              "line": "    def __init__(self, license_plate):"
            },
            {
              "lineno": 54,
              "line": "        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)",
              "successors": []
            }
          ]
        },
        {
          "name": "can_fit_in_spot",
          "type": "function",
          "start_line": 56,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 56,
              "line": "    def can_fit_in_spot(self, spot):"
            },
            {
              "lineno": 57,
              "line": "        return spot.size == VehicleSize.LARGE"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def can_fit_in_spot(self, spot):\n        return spot.size == VehicleSize.LARGE",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 51,
          "line": "class Bus(Vehicle):"
        },
        {
          "lineno": 52,
          "line": ""
        },
        {
          "lineno": 55,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "ParkingLot",
      "type": "class",
      "start_line": 60,
      "end_line": 70,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 62,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 62,
              "line": "    def __init__(self, num_levels):"
            },
            {
              "lineno": 63,
              "line": "        self.num_levels = num_levels"
            },
            {
              "lineno": 64,
              "line": "        self.levels = []  # List of Levels"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, num_levels):\n        self.num_levels = num_levels\n        self.levels = []  # List of Levels",
              "successors": []
            }
          ]
        },
        {
          "name": "park_vehicle",
          "type": "function",
          "start_line": 66,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 66,
              "line": "    def park_vehicle(self, vehicle):"
            },
            {
              "lineno": 67,
              "line": "        for level in self.levels:"
            },
            {
              "lineno": 68,
              "line": "            if level.park_vehicle(vehicle):"
            },
            {
              "lineno": 69,
              "line": "                return True"
            },
            {
              "lineno": 70,
              "line": "        return False"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def park_vehicle(self, vehicle):",
              "successors": [
                {
                  "id": 2,
                  "label": "        for level in self.levels:\n            if level.park_vehicle(vehicle):\n                return True",
                  "successors": [
                    {
                      "id": 3,
                      "label": "        return False",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 60,
          "line": "class ParkingLot(object):"
        },
        {
          "lineno": 61,
          "line": ""
        },
        {
          "lineno": 65,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ParkingLot(object):",
          "successors": [
            {
              "id": 2,
              "label": "",
              "successors": []
            },
            {
              "id": 3,
              "label": "",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Level",
      "type": "class",
      "start_line": 73,
      "end_line": 100,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 77,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 77,
              "line": "    def __init__(self, floor, total_spots):"
            },
            {
              "lineno": 78,
              "line": "        self.floor = floor"
            },
            {
              "lineno": 79,
              "line": "        self.num_spots = total_spots"
            },
            {
              "lineno": 80,
              "line": "        self.available_spots = 0"
            },
            {
              "lineno": 81,
              "line": "        self.spots = []  # List of ParkingSpots"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, floor, total_spots):\n        self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []  # List of ParkingSpots",
              "successors": []
            }
          ]
        },
        {
          "name": "spot_freed",
          "type": "function",
          "start_line": 83,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 83,
              "line": "    def spot_freed(self):"
            },
            {
              "lineno": 84,
              "line": "        self.available_spots += 1"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def spot_freed(self):\n        self.available_spots += 1",
              "successors": []
            }
          ]
        },
        {
          "name": "park_vehicle",
          "type": "function",
          "start_line": 86,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 86,
              "line": "    def park_vehicle(self, vehicle):"
            },
            {
              "lineno": 87,
              "line": "        spot = self._find_available_spot(vehicle)"
            },
            {
              "lineno": 88,
              "line": "        if spot is None:"
            },
            {
              "lineno": 89,
              "line": "            return None"
            },
            {
              "lineno": 90,
              "line": "        else:"
            },
            {
              "lineno": 91,
              "line": "            spot.park_vehicle(vehicle)"
            },
            {
              "lineno": 92,
              "line": "            return spot"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)",
              "successors": [
                {
                  "id": 2,
                  "label": "        if spot is None:\n            return None",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "        else:\n            spot.park_vehicle(vehicle)\n            return spot",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_find_available_spot",
          "type": "function",
          "start_line": 94,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 94,
              "line": "    def _find_available_spot(self, vehicle):"
            },
            {
              "lineno": 95,
              "line": "        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\""
            },
            {
              "lineno": 96,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass",
              "successors": []
            }
          ]
        },
        {
          "name": "_park_starting_at_spot",
          "type": "function",
          "start_line": 98,
          "end_line": 100,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 98,
              "line": "    def _park_starting_at_spot(self, spot, vehicle):"
            },
            {
              "lineno": 99,
              "line": "        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\""
            },
            {
              "lineno": 100,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 73,
          "line": "class Level(object):"
        },
        {
          "lineno": 74,
          "line": ""
        },
        {
          "lineno": 75,
          "line": "    SPOTS_PER_ROW = 10"
        },
        {
          "lineno": 76,
          "line": ""
        },
        {
          "lineno": 82,
          "line": ""
        },
        {
          "lineno": 85,
          "line": ""
        },
        {
          "lineno": 93,
          "line": ""
        },
        {
          "lineno": 97,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Level(object):\n\n    SPOTS_PER_ROW = 10",
          "successors": []
        }
      ]
    },
    {
      "name": "ParkingSpot",
      "type": "class",
      "start_line": 103,
      "end_line": 125,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 105,
          "end_line": 111,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 105,
              "line": "    def __init__(self, level, row, spot_number, spot_size, vehicle_size):"
            },
            {
              "lineno": 106,
              "line": "        self.level = level"
            },
            {
              "lineno": 107,
              "line": "        self.row = row"
            },
            {
              "lineno": 108,
              "line": "        self.spot_number = spot_number"
            },
            {
              "lineno": 109,
              "line": "        self.spot_size = spot_size"
            },
            {
              "lineno": 110,
              "line": "        self.vehicle_size = vehicle_size"
            },
            {
              "lineno": 111,
              "line": "        self.vehicle = None"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n        self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None",
              "successors": []
            }
          ]
        },
        {
          "name": "is_available",
          "type": "function",
          "start_line": 113,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 113,
              "line": "    def is_available(self):"
            },
            {
              "lineno": 114,
              "line": "        return True if self.vehicle is None else False"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def is_available(self):\n        return True if self.vehicle is None else False",
              "successors": []
            }
          ]
        },
        {
          "name": "can_fit_vehicle",
          "type": "function",
          "start_line": 116,
          "end_line": 119,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 116,
              "line": "    def can_fit_vehicle(self, vehicle):"
            },
            {
              "lineno": 117,
              "line": "        if self.vehicle is not None:"
            },
            {
              "lineno": 118,
              "line": "            return False"
            },
            {
              "lineno": 119,
              "line": "        return vehicle.can_fit_in_spot(self)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def can_fit_vehicle(self, vehicle):\n        if self.vehicle is not None:\n            return False",
              "successors": [
                {
                  "id": 3,
                  "label": "        return vehicle.can_fit_in_spot(self)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "park_vehicle",
          "type": "function",
          "start_line": 121,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 121,
              "line": "    def park_vehicle(self, vehicle):"
            },
            {
              "lineno": 122,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def park_vehicle(self, vehicle):\n        pass",
              "successors": []
            }
          ]
        },
        {
          "name": "remove_vehicle",
          "type": "function",
          "start_line": 124,
          "end_line": 125,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 124,
              "line": "    def remove_vehicle(self):"
            },
            {
              "lineno": 125,
              "line": "        pass"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def remove_vehicle(self):\n        pass",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 103,
          "line": "class ParkingSpot(object):"
        },
        {
          "lineno": 104,
          "line": ""
        },
        {
          "lineno": 112,
          "line": ""
        },
        {
          "lineno": 115,
          "line": ""
        },
        {
          "lineno": 120,
          "line": ""
        },
        {
          "lineno": 123,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ParkingSpot(object):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from abc import ABCMeta, abstractmethod"
    },
    {
      "lineno": 2,
      "line": "from enum import Enum"
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 31,
      "line": ""
    },
    {
      "lineno": 32,
      "line": ""
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 49,
      "line": ""
    },
    {
      "lineno": 50,
      "line": ""
    },
    {
      "lineno": 58,
      "line": ""
    },
    {
      "lineno": 59,
      "line": ""
    },
    {
      "lineno": 71,
      "line": ""
    },
    {
      "lineno": 72,
      "line": ""
    },
    {
      "lineno": 101,
      "line": ""
    },
    {
      "lineno": 102,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum",
      "successors": []
    }
  ]
}