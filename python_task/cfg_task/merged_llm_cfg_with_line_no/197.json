{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 48,
  "functions": [
    {
      "name": "binary_or",
      "type": "function",
      "start_line": 4,
      "end_line": 42,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 4,
          "line": "def binary_or(a: int, b: int) -> str:"
        },
        {
          "lineno": 5,
          "line": "    \"\"\""
        },
        {
          "lineno": 6,
          "line": "    Take in 2 integers, convert them to binary, and return a binary number that is the"
        },
        {
          "lineno": 7,
          "line": "    result of a binary or operation on the integers provided."
        },
        {
          "lineno": 8,
          "line": ""
        },
        {
          "lineno": 9,
          "line": "    >>> binary_or(25, 32)"
        },
        {
          "lineno": 10,
          "line": "    '0b111001'"
        },
        {
          "lineno": 11,
          "line": "    >>> binary_or(37, 50)"
        },
        {
          "lineno": 12,
          "line": "    '0b110111'"
        },
        {
          "lineno": 13,
          "line": "    >>> binary_or(21, 30)"
        },
        {
          "lineno": 14,
          "line": "    '0b11111'"
        },
        {
          "lineno": 15,
          "line": "    >>> binary_or(58, 73)"
        },
        {
          "lineno": 16,
          "line": "    '0b1111011'"
        },
        {
          "lineno": 17,
          "line": "    >>> binary_or(0, 255)"
        },
        {
          "lineno": 18,
          "line": "    '0b11111111'"
        },
        {
          "lineno": 19,
          "line": "    >>> binary_or(0, 256)"
        },
        {
          "lineno": 20,
          "line": "    '0b100000000'"
        },
        {
          "lineno": 21,
          "line": "    >>> binary_or(0, -1)"
        },
        {
          "lineno": 22,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 23,
          "line": "        ..."
        },
        {
          "lineno": 24,
          "line": "    ValueError: the value of both inputs must be positive"
        },
        {
          "lineno": 25,
          "line": "    >>> binary_or(0, 1.1)"
        },
        {
          "lineno": 26,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 27,
          "line": "        ..."
        },
        {
          "lineno": 28,
          "line": "    TypeError: 'float' object cannot be interpreted as an integer"
        },
        {
          "lineno": 29,
          "line": "    >>> binary_or(\"0\", \"1\")"
        },
        {
          "lineno": 30,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 31,
          "line": "        ..."
        },
        {
          "lineno": 32,
          "line": "    TypeError: '<' not supported between instances of 'str' and 'int'"
        },
        {
          "lineno": 33,
          "line": "    \"\"\""
        },
        {
          "lineno": 34,
          "line": "    if a < 0 or b < 0:"
        },
        {
          "lineno": 35,
          "line": "        raise ValueError(\"the value of both inputs must be positive\")"
        },
        {
          "lineno": 36,
          "line": "    a_binary = str(bin(a))[2:]  # remove the leading \"0b\""
        },
        {
          "lineno": 37,
          "line": "    b_binary = str(bin(b))[2:]"
        },
        {
          "lineno": 38,
          "line": "    max_len = max(len(a_binary), len(b_binary))"
        },
        {
          "lineno": 39,
          "line": "    return \"0b\" + \"\".join("
        },
        {
          "lineno": 40,
          "line": "        str(int(\"1\" in (char_a, char_b)))"
        },
        {
          "lineno": 41,
          "line": "        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))"
        },
        {
          "lineno": 42,
          "line": "    )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def binary_or(a: int, b: int) -> str:\n    \"\"\"\n    Take in 2 integers, convert them to binary, and return a binary number that is the\n    result of a binary or operation on the integers provided.\n\n    >>> binary_or(25, 32)\n    '0b111001'\n    >>> binary_or(37, 50)\n    '0b110111'\n    >>> binary_or(21, 30)\n    '0b11111'\n    >>> binary_or(58, 73)\n    '0b1111011'\n    >>> binary_or(0, 255)\n    '0b11111111'\n    >>> binary_or(0, 256)\n    '0b100000000'\n    >>> binary_or(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_or(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    TypeError: 'float' object cannot be interpreted as an integer\n    >>> binary_or(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "    if a < 0 or b < 0:\n        raise ValueError(\"the value of both inputs must be positive\")\n    a_binary = str(bin(a))[2:]  # remove the leading \"0b\"\n    b_binary = str(bin(b))[2:]\n    max_len = max(len(a_binary), len(b_binary))\n    return \"0b\" + \"\".join(\n        str(int(\"1\" in (char_a, char_b)))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "# https://www.tutorialspoint.com/python3/bitwise_operators_example.htm"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 43,
      "line": ""
    },
    {
      "lineno": 44,
      "line": ""
    },
    {
      "lineno": 45,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 46,
      "line": "    import doctest"
    },
    {
      "lineno": 47,
      "line": ""
    },
    {
      "lineno": 48,
      "line": "    doctest.testmod()"
    }
  ],
  "blocks": []
}