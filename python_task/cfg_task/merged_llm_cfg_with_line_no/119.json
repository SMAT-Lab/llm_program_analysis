{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 93,
  "functions": [
    {
      "name": "get_set_bits_count_using_brian_kernighans_algorithm",
      "type": "function",
      "start_line": 4,
      "end_line": 30,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 4,
          "line": "def get_set_bits_count_using_brian_kernighans_algorithm(number: int) -> int:"
        },
        {
          "lineno": 5,
          "line": "    \"\"\""
        },
        {
          "lineno": 6,
          "line": "    Count the number of set bits in a 32 bit integer"
        },
        {
          "lineno": 7,
          "line": "    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)"
        },
        {
          "lineno": 8,
          "line": "    3"
        },
        {
          "lineno": 9,
          "line": "    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)"
        },
        {
          "lineno": 10,
          "line": "    3"
        },
        {
          "lineno": 11,
          "line": "    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)"
        },
        {
          "lineno": 12,
          "line": "    3"
        },
        {
          "lineno": 13,
          "line": "    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)"
        },
        {
          "lineno": 14,
          "line": "    4"
        },
        {
          "lineno": 15,
          "line": "    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)"
        },
        {
          "lineno": 16,
          "line": "    0"
        },
        {
          "lineno": 17,
          "line": "    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)"
        },
        {
          "lineno": 18,
          "line": "    1"
        },
        {
          "lineno": 19,
          "line": "    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)"
        },
        {
          "lineno": 20,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 21,
          "line": "        ..."
        },
        {
          "lineno": 22,
          "line": "    ValueError: the value of input must not be negative"
        },
        {
          "lineno": 23,
          "line": "    \"\"\""
        },
        {
          "lineno": 24,
          "line": "    if number < 0:"
        },
        {
          "lineno": 25,
          "line": "        raise ValueError(\"the value of input must not be negative\")"
        },
        {
          "lineno": 26,
          "line": "    result = 0"
        },
        {
          "lineno": 27,
          "line": "    while number:"
        },
        {
          "lineno": 28,
          "line": "        number &= number - 1"
        },
        {
          "lineno": 29,
          "line": "        result += 1"
        },
        {
          "lineno": 30,
          "line": "    return result"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_set_bits_count_using_brian_kernighans_algorithm(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\nif number < 0:\n        raise ValueError(\"the value of input must not be negative\")",
          "successors": [
            {
              "id": 3,
              "label": "result = 0\n    while number:\n        number &= number - 1\n        result += 1\n    return result",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "get_set_bits_count_using_modulo_operator",
      "type": "function",
      "start_line": 33,
      "end_line": 60,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 33,
          "line": "def get_set_bits_count_using_modulo_operator(number: int) -> int:"
        },
        {
          "lineno": 34,
          "line": "    \"\"\""
        },
        {
          "lineno": 35,
          "line": "    Count the number of set bits in a 32 bit integer"
        },
        {
          "lineno": 36,
          "line": "    >>> get_set_bits_count_using_modulo_operator(25)"
        },
        {
          "lineno": 37,
          "line": "    3"
        },
        {
          "lineno": 38,
          "line": "    >>> get_set_bits_count_using_modulo_operator(37)"
        },
        {
          "lineno": 39,
          "line": "    3"
        },
        {
          "lineno": 40,
          "line": "    >>> get_set_bits_count_using_modulo_operator(21)"
        },
        {
          "lineno": 41,
          "line": "    3"
        },
        {
          "lineno": 42,
          "line": "    >>> get_set_bits_count_using_modulo_operator(58)"
        },
        {
          "lineno": 43,
          "line": "    4"
        },
        {
          "lineno": 44,
          "line": "    >>> get_set_bits_count_using_modulo_operator(0)"
        },
        {
          "lineno": 45,
          "line": "    0"
        },
        {
          "lineno": 46,
          "line": "    >>> get_set_bits_count_using_modulo_operator(256)"
        },
        {
          "lineno": 47,
          "line": "    1"
        },
        {
          "lineno": 48,
          "line": "    >>> get_set_bits_count_using_modulo_operator(-1)"
        },
        {
          "lineno": 49,
          "line": "    Traceback (most recent call last):"
        },
        {
          "lineno": 50,
          "line": "        ..."
        },
        {
          "lineno": 51,
          "line": "    ValueError: the value of input must not be negative"
        },
        {
          "lineno": 52,
          "line": "    \"\"\""
        },
        {
          "lineno": 53,
          "line": "    if number < 0:"
        },
        {
          "lineno": 54,
          "line": "        raise ValueError(\"the value of input must not be negative\")"
        },
        {
          "lineno": 55,
          "line": "    result = 0"
        },
        {
          "lineno": 56,
          "line": "    while number:"
        },
        {
          "lineno": 57,
          "line": "        if number % 2 == 1:"
        },
        {
          "lineno": 58,
          "line": "            result += 1"
        },
        {
          "lineno": 59,
          "line": "        number >>= 1"
        },
        {
          "lineno": 60,
          "line": "    return result"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_set_bits_count_using_modulo_operator(number: int) -> int:\n\"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\nresult = 0\n    while number:\n        if number % 2 == 1:\n            result += 1\n        number >>= 1\n    return result",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "benchmark",
      "type": "function",
      "start_line": 63,
      "end_line": 86,
      "functions": [
        {
          "name": "do_benchmark",
          "type": "function",
          "start_line": 69,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 69,
              "line": "    def do_benchmark(number: int) -> None:"
            },
            {
              "lineno": 70,
              "line": "        setup = \"import __main__ as z\""
            },
            {
              "lineno": 71,
              "line": "        print(f\"Benchmark when {number = }:\")"
            },
            {
              "lineno": 72,
              "line": "        print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")"
            },
            {
              "lineno": 73,
              "line": "        timing = timeit("
            },
            {
              "lineno": 74,
              "line": "            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup"
            },
            {
              "lineno": 75,
              "line": "        )"
            },
            {
              "lineno": 76,
              "line": "        print(f\"timeit() runs in {timing} seconds\")"
            },
            {
              "lineno": 77,
              "line": "        print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")"
            },
            {
              "lineno": 78,
              "line": "        timing = timeit("
            },
            {
              "lineno": 79,
              "line": "            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\","
            },
            {
              "lineno": 80,
              "line": "            setup=setup,"
            },
            {
              "lineno": 81,
              "line": "        )"
            },
            {
              "lineno": 82,
              "line": "        print(f\"timeit() runs in {timing} seconds\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def do_benchmark(number: int) -> None:\n        setup = \"import __main__ as z\"\n        print(f\"Benchmark when {number = }:\")\n        print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n        print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )\n        print(f\"timeit() runs in {timing} seconds\")",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 63,
          "line": "def benchmark() -> None:"
        },
        {
          "lineno": 64,
          "line": "    \"\"\""
        },
        {
          "lineno": 65,
          "line": "    Benchmark code for comparing 2 functions, with different length int values."
        },
        {
          "lineno": 66,
          "line": "    Brian Kernighan's algorithm is consistently faster than using modulo_operator."
        },
        {
          "lineno": 67,
          "line": "    \"\"\""
        },
        {
          "lineno": 68,
          "line": ""
        },
        {
          "lineno": 83,
          "line": ""
        },
        {
          "lineno": 84,
          "line": "    for number in (25, 37, 58, 0):"
        },
        {
          "lineno": 85,
          "line": "        do_benchmark(number)"
        },
        {
          "lineno": 86,
          "line": "        print()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def benchmark() -> None:\n    \"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "label": "for number in (25, 37, 58, 0):",
              "successors": [
                {
                  "id": 3,
                  "label": "do_benchmark(number)\nprint()",
                  "successors": [
                    {
                      "id": 2,
                      "label": "for number in (25, 37, 58, 0):",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from timeit import timeit"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": ""
    },
    {
      "lineno": 31,
      "line": ""
    },
    {
      "lineno": 32,
      "line": ""
    },
    {
      "lineno": 61,
      "line": ""
    },
    {
      "lineno": 62,
      "line": ""
    },
    {
      "lineno": 87,
      "line": ""
    },
    {
      "lineno": 88,
      "line": ""
    },
    {
      "lineno": 89,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 90,
      "line": "    import doctest"
    },
    {
      "lineno": 91,
      "line": ""
    },
    {
      "lineno": 92,
      "line": "    doctest.testmod()"
    },
    {
      "lineno": 93,
      "line": "    benchmark()"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from timeit import timeit\nif __name__ == \"__main__\":",
      "successors": [
        {
          "id": 3,
          "label": "import doctest\n\ndoctest.testmod()\nbenchmark()",
          "successors": []
        }
      ]
    }
  ]
}