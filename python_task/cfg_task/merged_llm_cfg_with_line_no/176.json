{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 189,
  "functions": [
    {
      "name": "lifespan",
      "type": "function",
      "start_line": 23,
      "end_line": 27,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 23,
          "line": "async def lifespan(app: FastAPI):"
        },
        {
          "lineno": 24,
          "line": "    manager = get_connection_manager()"
        },
        {
          "lineno": 25,
          "line": "    fut = asyncio.create_task(event_broadcaster(manager))"
        },
        {
          "lineno": 26,
          "line": "    fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))"
        },
        {
          "lineno": 27,
          "line": "    yield"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def lifespan(app: FastAPI):\n    manager = get_connection_manager()\n    fut = asyncio.create_task(event_broadcaster(manager))\n    fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))\nyield",
          "successors": []
        }
      ]
    },
    {
      "name": "get_connection_manager",
      "type": "function",
      "start_line": 35,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 35,
          "line": "def get_connection_manager():"
        },
        {
          "lineno": 36,
          "line": "    global _connection_manager"
        },
        {
          "lineno": 37,
          "line": "    if _connection_manager is None:"
        },
        {
          "lineno": 38,
          "line": "        _connection_manager = ConnectionManager()"
        },
        {
          "lineno": 39,
          "line": "    return _connection_manager"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def get_connection_manager():\nglobal _connection_manager",
          "successors": [
            {
              "id": 3,
              "label": "if _connection_manager is None:",
              "successors": [
                {
                  "id": 4,
                  "label": "_connection_manager = ConnectionManager()\nreturn _connection_manager",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "return _connection_manager",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "event_broadcaster",
      "type": "function",
      "start_line": 42,
      "end_line": 52,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 42,
          "line": "async def event_broadcaster(manager: ConnectionManager):"
        },
        {
          "lineno": 43,
          "line": "    try:"
        },
        {
          "lineno": 44,
          "line": "        redis.connect()"
        },
        {
          "lineno": 45,
          "line": "        event_queue = AsyncRedisExecutionEventBus()"
        },
        {
          "lineno": 46,
          "line": "        async for event in event_queue.listen():"
        },
        {
          "lineno": 47,
          "line": "            await manager.send_execution_result(event)"
        },
        {
          "lineno": 48,
          "line": "    except Exception as e:"
        },
        {
          "lineno": 49,
          "line": "        logger.exception(f\"Event broadcaster error: {e}\")"
        },
        {
          "lineno": 50,
          "line": "        raise"
        },
        {
          "lineno": 51,
          "line": "    finally:"
        },
        {
          "lineno": 52,
          "line": "        redis.disconnect()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def event_broadcaster(manager: ConnectionManager):\ntry:",
          "successors": [
            {
              "id": 3,
              "label": "redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n        async for event in event_queue.listen():\nawait manager.send_execution_result(event)",
              "successors": [
                {
                  "id": 3,
                  "label": "redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n        async for event in event_queue.listen():",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "label": "except Exception as e:\n        logger.exception(f\"Event broadcaster error: {e}\")\n        raise",
              "successors": []
            },
            {
              "id": 6,
              "label": "finally:\n        redis.disconnect()",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "authenticate_websocket",
      "type": "function",
      "start_line": 55,
      "end_line": 73,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 55,
          "line": "async def authenticate_websocket(websocket: WebSocket) -> str:"
        },
        {
          "lineno": 56,
          "line": "    if not settings.config.enable_auth:"
        },
        {
          "lineno": 57,
          "line": "        return DEFAULT_USER_ID"
        },
        {
          "lineno": 58,
          "line": ""
        },
        {
          "lineno": 59,
          "line": "    token = websocket.query_params.get(\"token\")"
        },
        {
          "lineno": 60,
          "line": "    if not token:"
        },
        {
          "lineno": 61,
          "line": "        await websocket.close(code=4001, reason=\"Missing authentication token\")"
        },
        {
          "lineno": 62,
          "line": "        return \"\""
        },
        {
          "lineno": 63,
          "line": ""
        },
        {
          "lineno": 64,
          "line": "    try:"
        },
        {
          "lineno": 65,
          "line": "        payload = parse_jwt_token(token)"
        },
        {
          "lineno": 66,
          "line": "        user_id = payload.get(\"sub\")"
        },
        {
          "lineno": 67,
          "line": "        if not user_id:"
        },
        {
          "lineno": 68,
          "line": "            await websocket.close(code=4002, reason=\"Invalid token\")"
        },
        {
          "lineno": 69,
          "line": "            return \"\""
        },
        {
          "lineno": 70,
          "line": "        return user_id"
        },
        {
          "lineno": 71,
          "line": "    except ValueError:"
        },
        {
          "lineno": 72,
          "line": "        await websocket.close(code=4003, reason=\"Invalid token\")"
        },
        {
          "lineno": 73,
          "line": "        return \"\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def authenticate_websocket(websocket: WebSocket) -> str:\nif not settings.config.enable_auth:\n        return DEFAULT_USER_ID",
          "successors": [
            {
              "id": 3,
              "label": "token = websocket.query_params.get(\"token\")\nif not token:\n        await websocket.close(code=4001, reason=\"Missing authentication token\")\n        return \"\"",
              "successors": [
                {
                  "id": 5,
                  "label": "try:\n        payload = parse_jwt_token(token)\n        user_id = payload.get(\"sub\")\n        if not user_id:\n            await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"\n        return user_id\nexcept ValueError:\n        await websocket.close(code=4003, reason=\"Invalid token\")\n        return \"\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "handle_subscribe",
      "type": "function",
      "start_line": 76,
      "end_line": 97,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 76,
          "line": "async def handle_subscribe("
        },
        {
          "lineno": 77,
          "line": "    websocket: WebSocket, manager: ConnectionManager, message: WsMessage"
        },
        {
          "lineno": 78,
          "line": "):"
        },
        {
          "lineno": 79,
          "line": "    if not message.data:"
        },
        {
          "lineno": 80,
          "line": "        await websocket.send_text("
        },
        {
          "lineno": 81,
          "line": "            WsMessage("
        },
        {
          "lineno": 82,
          "line": "                method=Methods.ERROR,"
        },
        {
          "lineno": 83,
          "line": "                success=False,"
        },
        {
          "lineno": 84,
          "line": "                error=\"Subscription data missing\","
        },
        {
          "lineno": 85,
          "line": "            ).model_dump_json()"
        },
        {
          "lineno": 86,
          "line": "        )"
        },
        {
          "lineno": 87,
          "line": "    else:"
        },
        {
          "lineno": 88,
          "line": "        ex_sub = ExecutionSubscription.model_validate(message.data)"
        },
        {
          "lineno": 89,
          "line": "        await manager.subscribe(ex_sub.graph_id, websocket)"
        },
        {
          "lineno": 90,
          "line": "        logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")"
        },
        {
          "lineno": 91,
          "line": "        await websocket.send_text("
        },
        {
          "lineno": 92,
          "line": "            WsMessage("
        },
        {
          "lineno": 93,
          "line": "                method=Methods.SUBSCRIBE,"
        },
        {
          "lineno": 94,
          "line": "                success=True,"
        },
        {
          "lineno": 95,
          "line": "                channel=ex_sub.graph_id,"
        },
        {
          "lineno": 96,
          "line": "            ).model_dump_json()"
        },
        {
          "lineno": 97,
          "line": "        )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def handle_subscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\nif not message.data:",
          "successors": [
            {
              "id": 3,
              "label": "await websocket.send_text(\n    WsMessage(\n        method=Methods.ERROR,\n        success=False,\n        error=\"Subscription data missing\",\n    ).model_dump_json()\n)",
              "successors": []
            },
            {
              "id": 4,
              "label": "ex_sub = ExecutionSubscription.model_validate(message.data)\nawait manager.subscribe(ex_sub.graph_id, websocket)\nlogger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")\nawait websocket.send_text(\n    WsMessage(\n        method=Methods.SUBSCRIBE,\n        success=True,\n        channel=ex_sub.graph_id,\n    ).model_dump_json()\n)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "handle_unsubscribe",
      "type": "function",
      "start_line": 100,
      "end_line": 121,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 100,
          "line": "async def handle_unsubscribe("
        },
        {
          "lineno": 101,
          "line": "    websocket: WebSocket, manager: ConnectionManager, message: WsMessage"
        },
        {
          "lineno": 102,
          "line": "):"
        },
        {
          "lineno": 103,
          "line": "    if not message.data:"
        },
        {
          "lineno": 104,
          "line": "        await websocket.send_text("
        },
        {
          "lineno": 105,
          "line": "            WsMessage("
        },
        {
          "lineno": 106,
          "line": "                method=Methods.ERROR,"
        },
        {
          "lineno": 107,
          "line": "                success=False,"
        },
        {
          "lineno": 108,
          "line": "                error=\"Subscription data missing\","
        },
        {
          "lineno": 109,
          "line": "            ).model_dump_json()"
        },
        {
          "lineno": 110,
          "line": "        )"
        },
        {
          "lineno": 111,
          "line": "    else:"
        },
        {
          "lineno": 112,
          "line": "        ex_sub = ExecutionSubscription.model_validate(message.data)"
        },
        {
          "lineno": 113,
          "line": "        await manager.unsubscribe(ex_sub.graph_id, websocket)"
        },
        {
          "lineno": 114,
          "line": "        logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")"
        },
        {
          "lineno": 115,
          "line": "        await websocket.send_text("
        },
        {
          "lineno": 116,
          "line": "            WsMessage("
        },
        {
          "lineno": 117,
          "line": "                method=Methods.UNSUBSCRIBE,"
        },
        {
          "lineno": 118,
          "line": "                success=True,"
        },
        {
          "lineno": 119,
          "line": "                channel=ex_sub.graph_id,"
        },
        {
          "lineno": 120,
          "line": "            ).model_dump_json()"
        },
        {
          "lineno": 121,
          "line": "        )"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def handle_unsubscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\nif not message.data:",
          "successors": [
            {
              "id": 3,
              "label": "await websocket.send_text(\n    WsMessage(\n        method=Methods.ERROR,\n        success=False,\n        error=\"Subscription data missing\",\n    ).model_dump_json()\n)",
              "successors": []
            },
            {
              "id": 4,
              "label": "ex_sub = ExecutionSubscription.model_validate(message.data)\nawait manager.unsubscribe(ex_sub.graph_id, websocket)\nlogger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\nawait websocket.send_text(\n    WsMessage(\n        method=Methods.UNSUBSCRIBE,\n        success=True,\n        channel=ex_sub.graph_id,\n    ).model_dump_json()\n)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "health",
      "type": "function",
      "start_line": 125,
      "end_line": 126,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 125,
          "line": "async def health():"
        },
        {
          "lineno": 126,
          "line": "    return {\"status\": \"healthy\"}"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def health():\n    return {\"status\": \"healthy\"}",
          "successors": []
        }
      ]
    },
    {
      "name": "websocket_router",
      "type": "function",
      "start_line": 130,
      "end_line": 172,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 130,
          "line": "async def websocket_router("
        },
        {
          "lineno": 131,
          "line": "    websocket: WebSocket, manager: ConnectionManager = Depends(get_connection_manager)"
        },
        {
          "lineno": 132,
          "line": "):"
        },
        {
          "lineno": 133,
          "line": "    user_id = await authenticate_websocket(websocket)"
        },
        {
          "lineno": 134,
          "line": "    if not user_id:"
        },
        {
          "lineno": 135,
          "line": "        return"
        },
        {
          "lineno": 136,
          "line": "    await manager.connect(websocket)"
        },
        {
          "lineno": 137,
          "line": "    try:"
        },
        {
          "lineno": 138,
          "line": "        while True:"
        },
        {
          "lineno": 139,
          "line": "            data = await websocket.receive_text()"
        },
        {
          "lineno": 140,
          "line": "            message = WsMessage.model_validate_json(data)"
        },
        {
          "lineno": 141,
          "line": ""
        },
        {
          "lineno": 142,
          "line": "            if message.method == Methods.HEARTBEAT:"
        },
        {
          "lineno": 143,
          "line": "                await websocket.send_json("
        },
        {
          "lineno": 144,
          "line": "                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}"
        },
        {
          "lineno": 145,
          "line": "                )"
        },
        {
          "lineno": 146,
          "line": "                continue"
        },
        {
          "lineno": 147,
          "line": ""
        },
        {
          "lineno": 148,
          "line": "            if message.method == Methods.SUBSCRIBE:"
        },
        {
          "lineno": 149,
          "line": "                await handle_subscribe(websocket, manager, message)"
        },
        {
          "lineno": 150,
          "line": ""
        },
        {
          "lineno": 151,
          "line": "            elif message.method == Methods.UNSUBSCRIBE:"
        },
        {
          "lineno": 152,
          "line": "                await handle_unsubscribe(websocket, manager, message)"
        },
        {
          "lineno": 153,
          "line": ""
        },
        {
          "lineno": 154,
          "line": "            elif message.method == Methods.ERROR:"
        },
        {
          "lineno": 155,
          "line": "                logger.error(f\"WebSocket Error message received: {message.data}\")"
        },
        {
          "lineno": 156,
          "line": ""
        },
        {
          "lineno": 157,
          "line": "            else:"
        },
        {
          "lineno": 158,
          "line": "                logger.warning("
        },
        {
          "lineno": 159,
          "line": "                    f\"Unknown WebSocket message type {message.method} received: \""
        },
        {
          "lineno": 160,
          "line": "                    f\"{message.data}\""
        },
        {
          "lineno": 161,
          "line": "                )"
        },
        {
          "lineno": 162,
          "line": "                await websocket.send_text("
        },
        {
          "lineno": 163,
          "line": "                    WsMessage("
        },
        {
          "lineno": 164,
          "line": "                        method=Methods.ERROR,"
        },
        {
          "lineno": 165,
          "line": "                        success=False,"
        },
        {
          "lineno": 166,
          "line": "                        error=\"Message type is not processed by the server\","
        },
        {
          "lineno": 167,
          "line": "                    ).model_dump_json()"
        },
        {
          "lineno": 168,
          "line": "                )"
        },
        {
          "lineno": 169,
          "line": ""
        },
        {
          "lineno": 170,
          "line": "    except WebSocketDisconnect:"
        },
        {
          "lineno": 171,
          "line": "        manager.disconnect(websocket)"
        },
        {
          "lineno": 172,
          "line": "        logger.debug(\"WebSocket client disconnected\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "async def websocket_router(\n    websocket: WebSocket, manager: ConnectionManager = Depends(get_connection_manager)\n):\nuser_id = await authenticate_websocket(websocket)",
          "successors": [
            {
              "id": 3,
              "label": "if not user_id:\n    return\nawait manager.connect(websocket)",
              "successors": [
                {
                  "id": 5,
                  "label": "try:\n    while True:\n        data = await websocket.receive_text()\n        message = WsMessage.model_validate_json(data)\n\n        if message.method == Methods.HEARTBEAT:\n            await websocket.send_json(\n                {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n            )\n            continue\n\n        if message.method == Methods.SUBSCRIBE:\n            await handle_subscribe(websocket, manager, message)\n\n        elif message.method == Methods.UNSUBSCRIBE:\n            await handle_unsubscribe(websocket, manager, message)\n\n        elif message.method == Methods.ERROR:\n            logger.error(f\"WebSocket Error message received: {message.data}\")\n\n        else:\n            logger.warning(\n                f\"Unknown WebSocket message type {message.method} received: \"\n                f\"{message.data}\"\n            )\n            await websocket.send_text(\n                WsMessage(\n                    method=Methods.ERROR,\n                    success=False,\n                    error=\"Message type is not processed by the server\",\n                ).model_dump_json()\n            )\nexcept WebSocketDisconnect:\n    manager.disconnect(websocket)\n    logger.debug(\"WebSocket client disconnected\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "WebsocketServer",
      "type": "class",
      "start_line": 175,
      "end_line": 189,
      "functions": [
        {
          "name": "run",
          "type": "function",
          "start_line": 176,
          "end_line": 189,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 176,
              "line": "    def run(self):"
            },
            {
              "lineno": 177,
              "line": "        logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")"
            },
            {
              "lineno": 178,
              "line": "        server_app = CORSMiddleware("
            },
            {
              "lineno": 179,
              "line": "            app=app,"
            },
            {
              "lineno": 180,
              "line": "            allow_origins=settings.config.backend_cors_allow_origins,"
            },
            {
              "lineno": 181,
              "line": "            allow_credentials=True,"
            },
            {
              "lineno": 182,
              "line": "            allow_methods=[\"*\"],"
            },
            {
              "lineno": 183,
              "line": "            allow_headers=[\"*\"],"
            },
            {
              "lineno": 184,
              "line": "        )"
            },
            {
              "lineno": 185,
              "line": "        uvicorn.run("
            },
            {
              "lineno": 186,
              "line": "            server_app,"
            },
            {
              "lineno": 187,
              "line": "            host=Config().websocket_server_host,"
            },
            {
              "lineno": 188,
              "line": "            port=Config().websocket_server_port,"
            },
            {
              "lineno": 189,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(self):\n        logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")\n        server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n        uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 175,
          "line": "class WebsocketServer(AppProcess):"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class WebsocketServer(AppProcess):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import asyncio"
    },
    {
      "lineno": 2,
      "line": "import logging"
    },
    {
      "lineno": 3,
      "line": "from contextlib import asynccontextmanager"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "import uvicorn"
    },
    {
      "lineno": 6,
      "line": "from autogpt_libs.auth import parse_jwt_token"
    },
    {
      "lineno": 7,
      "line": "from fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect"
    },
    {
      "lineno": 8,
      "line": "from starlette.middleware.cors import CORSMiddleware"
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 10,
      "line": "from backend.data import redis"
    },
    {
      "lineno": 11,
      "line": "from backend.data.execution import AsyncRedisExecutionEventBus"
    },
    {
      "lineno": 12,
      "line": "from backend.data.user import DEFAULT_USER_ID"
    },
    {
      "lineno": 13,
      "line": "from backend.server.conn_manager import ConnectionManager"
    },
    {
      "lineno": 14,
      "line": "from backend.server.model import ExecutionSubscription, Methods, WsMessage"
    },
    {
      "lineno": 15,
      "line": "from backend.util.service import AppProcess"
    },
    {
      "lineno": 16,
      "line": "from backend.util.settings import AppEnvironment, Config, Settings"
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 18,
      "line": "logger = logging.getLogger(__name__)"
    },
    {
      "lineno": 19,
      "line": "settings = Settings()"
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 22,
      "line": "@asynccontextmanager"
    },
    {
      "lineno": 28,
      "line": ""
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": "docs_url = \"/docs\" if settings.config.app_env == AppEnvironment.LOCAL else None"
    },
    {
      "lineno": 31,
      "line": "app = FastAPI(lifespan=lifespan, docs_url=docs_url)"
    },
    {
      "lineno": 32,
      "line": "_connection_manager = None"
    },
    {
      "lineno": 33,
      "line": ""
    },
    {
      "lineno": 34,
      "line": ""
    },
    {
      "lineno": 40,
      "line": ""
    },
    {
      "lineno": 41,
      "line": ""
    },
    {
      "lineno": 53,
      "line": ""
    },
    {
      "lineno": 54,
      "line": ""
    },
    {
      "lineno": 74,
      "line": ""
    },
    {
      "lineno": 75,
      "line": ""
    },
    {
      "lineno": 98,
      "line": ""
    },
    {
      "lineno": 99,
      "line": ""
    },
    {
      "lineno": 122,
      "line": ""
    },
    {
      "lineno": 123,
      "line": ""
    },
    {
      "lineno": 124,
      "line": "@app.get(\"/\")"
    },
    {
      "lineno": 127,
      "line": ""
    },
    {
      "lineno": 128,
      "line": ""
    },
    {
      "lineno": 129,
      "line": "@app.websocket(\"/ws\")"
    },
    {
      "lineno": 173,
      "line": ""
    },
    {
      "lineno": 174,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import asyncio\nimport logging\nfrom contextlib import asynccontextmanager\n\nimport uvicorn\nfrom autogpt_libs.auth import parse_jwt_token\nfrom fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect\nfrom starlette.middleware.cors import CORSMiddleware\n\nfrom backend.data import redis\nfrom backend.data.execution import AsyncRedisExecutionEventBus\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import ExecutionSubscription, Methods, WsMessage\nfrom backend.util.service import AppProcess\nfrom backend.util.settings import AppEnvironment, Config, Settings\n\nlogger = logging.getLogger(__name__)\nsettings = Settings()\n@asynccontextmanager",
      "successors": [
        {
          "id": 3,
          "label": "docs_url = \"/docs\" if settings.config.app_env == AppEnvironment.LOCAL else None\napp = FastAPI(lifespan=lifespan, docs_url=docs_url)\n_connection_manager = None\n@app.get(\"/\")",
          "successors": [
            {
              "id": 5,
              "label": "@app.websocket(\"/ws\")",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}