{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 34,
  "functions": [],
  "classes": [
    {
      "name": "APIKeyContainer",
      "type": "class",
      "start_line": 6,
      "end_line": 12,
      "functions": [],
      "simplified_code": [
        {
          "lineno": 6,
          "line": "class APIKeyContainer(NamedTuple):"
        },
        {
          "lineno": 7,
          "line": "    \"\"\"Container for API key parts.\"\"\""
        },
        {
          "lineno": 8,
          "line": ""
        },
        {
          "lineno": 9,
          "line": "    raw: str"
        },
        {
          "lineno": 10,
          "line": "    prefix: str"
        },
        {
          "lineno": 11,
          "line": "    postfix: str"
        },
        {
          "lineno": 12,
          "line": "    hash: str"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class APIKeyContainer(NamedTuple):\n    \"\"\"Container for API key parts.\"\"\"\n\n    raw: str\n    prefix: str\n    postfix: str\n    hash: str",
          "successors": []
        }
      ]
    },
    {
      "name": "APIKeyManager",
      "type": "class",
      "start_line": 15,
      "end_line": 34,
      "functions": [
        {
          "name": "generate_api_key",
          "type": "function",
          "start_line": 20,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 20,
              "line": "    def generate_api_key(self) -> APIKeyContainer:"
            },
            {
              "lineno": 21,
              "line": "        \"\"\"Generate a new API key with all its parts.\"\"\""
            },
            {
              "lineno": 22,
              "line": "        raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\""
            },
            {
              "lineno": 23,
              "line": "        return APIKeyContainer("
            },
            {
              "lineno": 24,
              "line": "            raw=raw_key,"
            },
            {
              "lineno": 25,
              "line": "            prefix=raw_key[: self.PREFIX_LENGTH],"
            },
            {
              "lineno": 26,
              "line": "            postfix=raw_key[-self.POSTFIX_LENGTH :],"
            },
            {
              "lineno": 27,
              "line": "            hash=hashlib.sha256(raw_key.encode()).hexdigest(),"
            },
            {
              "lineno": 28,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def generate_api_key(self) -> APIKeyContainer:\n        \"\"\"Generate a new API key with all its parts.\"\"\"\n        raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\"\n        return APIKeyContainer(\n            raw=raw_key,\n            prefix=raw_key[: self.PREFIX_LENGTH],\n            postfix=raw_key[-self.POSTFIX_LENGTH :],\n            hash=hashlib.sha256(raw_key.encode()).hexdigest(),\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "verify_api_key",
          "type": "function",
          "start_line": 30,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 30,
              "line": "    def verify_api_key(self, provided_key: str, stored_hash: str) -> bool:"
            },
            {
              "lineno": 31,
              "line": "        \"\"\"Verify if a provided API key matches the stored hash.\"\"\""
            },
            {
              "lineno": 32,
              "line": "        if not provided_key.startswith(self.PREFIX):"
            },
            {
              "lineno": 33,
              "line": "            return False"
            },
            {
              "lineno": 34,
              "line": "        return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def verify_api_key(self, provided_key: str, stored_hash: str) -> bool:\n        \"\"\"Verify if a provided API key matches the stored hash.\"\"\"\n        if not provided_key.startswith(self.PREFIX):\n            return False",
              "successors": [
                {
                  "id": 3,
                  "label": "        return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 15,
          "line": "class APIKeyManager:"
        },
        {
          "lineno": 16,
          "line": "    PREFIX: str = \"agpt_\""
        },
        {
          "lineno": 17,
          "line": "    PREFIX_LENGTH: int = 8"
        },
        {
          "lineno": 18,
          "line": "    POSTFIX_LENGTH: int = 8"
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 29,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class APIKeyManager:\n    PREFIX: str = \"agpt_\"\n    PREFIX_LENGTH: int = 8\n    POSTFIX_LENGTH: int = 8",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import hashlib"
    },
    {
      "lineno": 2,
      "line": "import secrets"
    },
    {
      "lineno": 3,
      "line": "from typing import NamedTuple"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 13,
      "line": ""
    },
    {
      "lineno": 14,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import hashlib\nimport secrets\nfrom typing import NamedTuple",
      "successors": []
    }
  ]
}