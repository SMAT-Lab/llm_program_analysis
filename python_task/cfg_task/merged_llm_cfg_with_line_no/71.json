{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 133,
  "functions": [
    {
      "name": "is_safe",
      "type": "function",
      "start_line": 44,
      "end_line": 60,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 44,
          "line": "def is_safe(grid: Matrix, row: int, column: int, n: int) -> bool:"
        },
        {
          "lineno": 45,
          "line": "    \"\"\""
        },
        {
          "lineno": 46,
          "line": "    This function checks the grid to see if each row,"
        },
        {
          "lineno": 47,
          "line": "    column, and the 3x3 subgrids contain the digit 'n'."
        },
        {
          "lineno": 48,
          "line": "    It returns False if it is not 'safe' (a duplicate digit"
        },
        {
          "lineno": 49,
          "line": "    is found) else returns True if it is 'safe'"
        },
        {
          "lineno": 50,
          "line": "    \"\"\""
        },
        {
          "lineno": 51,
          "line": "    for i in range(9):"
        },
        {
          "lineno": 52,
          "line": "        if n in {grid[row][i], grid[i][column]}:"
        },
        {
          "lineno": 53,
          "line": "            return False"
        },
        {
          "lineno": 54,
          "line": ""
        },
        {
          "lineno": 55,
          "line": "    for i in range(3):"
        },
        {
          "lineno": 56,
          "line": "        for j in range(3):"
        },
        {
          "lineno": 57,
          "line": "            if grid[(row - row % 3) + i][(column - column % 3) + j] == n:"
        },
        {
          "lineno": 58,
          "line": "                return False"
        },
        {
          "lineno": 59,
          "line": ""
        },
        {
          "lineno": 60,
          "line": "    return True"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def is_safe(grid: Matrix, row: int, column: int, n: int) -> bool:\n    \"\"\"\n    This function checks the grid to see if each row,\n    column, and the 3x3 subgrids contain the digit 'n'.\n    It returns False if it is not 'safe' (a duplicate digit\n    is found) else returns True if it is 'safe'\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "label": "for i in range(9):",
              "successors": [
                {
                  "id": 3,
                  "label": "if n in {grid[row][i], grid[i][column]}:\n            return False",
                  "successors": [
                    {
                      "id": 4,
                      "label": "for i in range(3):",
                      "successors": [
                        {
                          "id": 5,
                          "label": "for j in range(3):",
                          "successors": [
                            {
                              "id": 6,
                              "label": "if grid[(row - row % 3) + i][(column - column % 3) + j] == n:\n                return False",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "return True",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "find_empty_location",
      "type": "function",
      "start_line": 63,
      "end_line": 72,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 63,
          "line": "def find_empty_location(grid: Matrix) -> tuple[int, int] | None:"
        },
        {
          "lineno": 64,
          "line": "    \"\"\""
        },
        {
          "lineno": 65,
          "line": "    This function finds an empty location so that we can assign a number"
        },
        {
          "lineno": 66,
          "line": "    for that particular row and column."
        },
        {
          "lineno": 67,
          "line": "    \"\"\""
        },
        {
          "lineno": 68,
          "line": "    for i in range(9):"
        },
        {
          "lineno": 69,
          "line": "        for j in range(9):"
        },
        {
          "lineno": 70,
          "line": "            if grid[i][j] == 0:"
        },
        {
          "lineno": 71,
          "line": "                return i, j"
        },
        {
          "lineno": 72,
          "line": "    return None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def find_empty_location(grid: Matrix) -> tuple[int, int] | None:\n    \"\"\"\n    This function finds an empty location so that we can assign a number\n    for that particular row and column.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "label": "for i in range(9):",
              "successors": [
                {
                  "id": 3,
                  "label": "for j in range(9):",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if grid[i][j] == 0:\nreturn i, j",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "return None",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "sudoku",
      "type": "function",
      "start_line": 75,
      "end_line": 109,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 75,
          "line": "def sudoku(grid: Matrix) -> Matrix | None:"
        },
        {
          "lineno": 76,
          "line": "    \"\"\""
        },
        {
          "lineno": 77,
          "line": "    Takes a partially filled-in grid and attempts to assign values to"
        },
        {
          "lineno": 78,
          "line": "    all unassigned locations in such a way to meet the requirements"
        },
        {
          "lineno": 79,
          "line": "    for Sudoku solution (non-duplication across rows, columns, and boxes)"
        },
        {
          "lineno": 80,
          "line": ""
        },
        {
          "lineno": 81,
          "line": "    >>> sudoku(initial_grid)  # doctest: +NORMALIZE_WHITESPACE"
        },
        {
          "lineno": 82,
          "line": "    [[3, 1, 6, 5, 7, 8, 4, 9, 2],"
        },
        {
          "lineno": 83,
          "line": "     [5, 2, 9, 1, 3, 4, 7, 6, 8],"
        },
        {
          "lineno": 84,
          "line": "     [4, 8, 7, 6, 2, 9, 5, 3, 1],"
        },
        {
          "lineno": 85,
          "line": "     [2, 6, 3, 4, 1, 5, 9, 8, 7],"
        },
        {
          "lineno": 86,
          "line": "     [9, 7, 4, 8, 6, 3, 1, 2, 5],"
        },
        {
          "lineno": 87,
          "line": "     [8, 5, 1, 7, 9, 2, 6, 4, 3],"
        },
        {
          "lineno": 88,
          "line": "     [1, 3, 8, 9, 4, 7, 2, 5, 6],"
        },
        {
          "lineno": 89,
          "line": "     [6, 9, 2, 3, 5, 1, 8, 7, 4],"
        },
        {
          "lineno": 90,
          "line": "     [7, 4, 5, 2, 8, 6, 3, 1, 9]]"
        },
        {
          "lineno": 91,
          "line": "     >>> sudoku(no_solution) is None"
        },
        {
          "lineno": 92,
          "line": "     True"
        },
        {
          "lineno": 93,
          "line": "    \"\"\""
        },
        {
          "lineno": 94,
          "line": "    if location := find_empty_location(grid):"
        },
        {
          "lineno": 95,
          "line": "        row, column = location"
        },
        {
          "lineno": 96,
          "line": "    else:"
        },
        {
          "lineno": 97,
          "line": "        # If the location is ``None``, then the grid is solved."
        },
        {
          "lineno": 98,
          "line": "        return grid"
        },
        {
          "lineno": 99,
          "line": ""
        },
        {
          "lineno": 100,
          "line": "    for digit in range(1, 10):"
        },
        {
          "lineno": 101,
          "line": "        if is_safe(grid, row, column, digit):"
        },
        {
          "lineno": 102,
          "line": "            grid[row][column] = digit"
        },
        {
          "lineno": 103,
          "line": ""
        },
        {
          "lineno": 104,
          "line": "            if sudoku(grid) is not None:"
        },
        {
          "lineno": 105,
          "line": "                return grid"
        },
        {
          "lineno": 106,
          "line": ""
        },
        {
          "lineno": 107,
          "line": "            grid[row][column] = 0"
        },
        {
          "lineno": 108,
          "line": ""
        },
        {
          "lineno": 109,
          "line": "    return None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def sudoku(grid: Matrix) -> Matrix | None:\n    \"\"\"\n    Takes a partially filled-in grid and attempts to assign values to\n    all unassigned locations in such a way to meet the requirements\n    for Sudoku solution (non-duplication across rows, columns, and boxes)\n\n    >>> sudoku(initial_grid)  # doctest: +NORMALIZE_WHITESPACE\n    [[3, 1, 6, 5, 7, 8, 4, 9, 2],\n     [5, 2, 9, 1, 3, 4, 7, 6, 8],\n     [4, 8, 7, 6, 2, 9, 5, 3, 1],\n     [2, 6, 3, 4, 1, 5, 9, 8, 7],\n     [9, 7, 4, 8, 6, 3, 1, 2, 5],\n     [8, 5, 1, 7, 9, 2, 6, 4, 3],\n     [1, 3, 8, 9, 4, 7, 2, 5, 6],\n     [6, 9, 2, 3, 5, 1, 8, 7, 4],\n     [7, 4, 5, 2, 8, 6, 3, 1, 9]]\n     >>> sudoku(no_solution) is None\n     True\n    \"\"\"",
          "successors": [
            {
              "id": 3,
              "label": "    if location := find_empty_location(grid):\n        row, column = location",
              "successors": [
                {
                  "id": 5,
                  "label": "    for digit in range(1, 10):",
                  "successors": [
                    {
                      "id": 6,
                      "label": "        if is_safe(grid, row, column, digit):\n            grid[row][column] = digit",
                      "successors": [
                        {
                          "id": 8,
                          "label": "            if sudoku(grid) is not None:\n                return grid",
                          "successors": []
                        },
                        {
                          "id": 10,
                          "label": "            grid[row][column] = 0",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "    return None",
                  "successors": []
                }
              ]
            },
            {
              "id": 12,
              "label": "    else:\n        # If the location is ``None``, then the grid is solved.\n        return grid",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "print_solution",
      "type": "function",
      "start_line": 112,
      "end_line": 120,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 112,
          "line": "def print_solution(grid: Matrix) -> None:"
        },
        {
          "lineno": 113,
          "line": "    \"\"\""
        },
        {
          "lineno": 114,
          "line": "    A function to print the solution in the form"
        },
        {
          "lineno": 115,
          "line": "    of a 9x9 grid"
        },
        {
          "lineno": 116,
          "line": "    \"\"\""
        },
        {
          "lineno": 117,
          "line": "    for row in grid:"
        },
        {
          "lineno": 118,
          "line": "        for cell in row:"
        },
        {
          "lineno": 119,
          "line": "            print(cell, end=\" \")"
        },
        {
          "lineno": 120,
          "line": "        print()"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def print_solution(grid: Matrix) -> None:\n    \"\"\"\n    A function to print the solution in the form\n    of a 9x9 grid\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "label": "for row in grid:\n        for cell in row:\n            print(cell, end=\" \")\n        print()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "Given a partially filled 9x9 2D array, the objective is to fill a 9x9"
    },
    {
      "lineno": 3,
      "line": "square grid with digits numbered 1 to 9, so that every row, column, and"
    },
    {
      "lineno": 4,
      "line": "and each of the nine 3x3 sub-grids contains all of the digits."
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "This can be solved using Backtracking and is similar to n-queens."
    },
    {
      "lineno": 7,
      "line": "We check to see if a cell is safe or not and recursively call the"
    },
    {
      "lineno": 8,
      "line": "function on the next column to see if it returns True. if yes, we"
    },
    {
      "lineno": 9,
      "line": "have solved the puzzle. else, we backtrack and place another number"
    },
    {
      "lineno": 10,
      "line": "in that cell and repeat this process."
    },
    {
      "lineno": 11,
      "line": "\"\"\""
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": "from __future__ import annotations"
    },
    {
      "lineno": 14,
      "line": ""
    },
    {
      "lineno": 15,
      "line": "Matrix = list[list[int]]"
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": "# assigning initial values to the grid"
    },
    {
      "lineno": 18,
      "line": "initial_grid: Matrix = ["
    },
    {
      "lineno": 19,
      "line": "    [3, 0, 6, 5, 0, 8, 4, 0, 0],"
    },
    {
      "lineno": 20,
      "line": "    [5, 2, 0, 0, 0, 0, 0, 0, 0],"
    },
    {
      "lineno": 21,
      "line": "    [0, 8, 7, 0, 0, 0, 0, 3, 1],"
    },
    {
      "lineno": 22,
      "line": "    [0, 0, 3, 0, 1, 0, 0, 8, 0],"
    },
    {
      "lineno": 23,
      "line": "    [9, 0, 0, 8, 6, 3, 0, 0, 5],"
    },
    {
      "lineno": 24,
      "line": "    [0, 5, 0, 0, 9, 0, 6, 0, 0],"
    },
    {
      "lineno": 25,
      "line": "    [1, 3, 0, 0, 0, 0, 2, 5, 0],"
    },
    {
      "lineno": 26,
      "line": "    [0, 0, 0, 0, 0, 0, 0, 7, 4],"
    },
    {
      "lineno": 27,
      "line": "    [0, 0, 5, 2, 0, 6, 3, 0, 0],"
    },
    {
      "lineno": 28,
      "line": "]"
    },
    {
      "lineno": 29,
      "line": ""
    },
    {
      "lineno": 30,
      "line": "# a grid with no solution"
    },
    {
      "lineno": 31,
      "line": "no_solution: Matrix = ["
    },
    {
      "lineno": 32,
      "line": "    [5, 0, 6, 5, 0, 8, 4, 0, 3],"
    },
    {
      "lineno": 33,
      "line": "    [5, 2, 0, 0, 0, 0, 0, 0, 2],"
    },
    {
      "lineno": 34,
      "line": "    [1, 8, 7, 0, 0, 0, 0, 3, 1],"
    },
    {
      "lineno": 35,
      "line": "    [0, 0, 3, 0, 1, 0, 0, 8, 0],"
    },
    {
      "lineno": 36,
      "line": "    [9, 0, 0, 8, 6, 3, 0, 0, 5],"
    },
    {
      "lineno": 37,
      "line": "    [0, 5, 0, 0, 9, 0, 6, 0, 0],"
    },
    {
      "lineno": 38,
      "line": "    [1, 3, 0, 0, 0, 0, 2, 5, 0],"
    },
    {
      "lineno": 39,
      "line": "    [0, 0, 0, 0, 0, 0, 0, 7, 4],"
    },
    {
      "lineno": 40,
      "line": "    [0, 0, 5, 2, 0, 6, 3, 0, 0],"
    },
    {
      "lineno": 41,
      "line": "]"
    },
    {
      "lineno": 42,
      "line": ""
    },
    {
      "lineno": 43,
      "line": ""
    },
    {
      "lineno": 61,
      "line": ""
    },
    {
      "lineno": 62,
      "line": ""
    },
    {
      "lineno": 73,
      "line": ""
    },
    {
      "lineno": 74,
      "line": ""
    },
    {
      "lineno": 110,
      "line": ""
    },
    {
      "lineno": 111,
      "line": ""
    },
    {
      "lineno": 121,
      "line": ""
    },
    {
      "lineno": 122,
      "line": ""
    },
    {
      "lineno": 123,
      "line": "if __name__ == \"__main__\":"
    },
    {
      "lineno": 124,
      "line": "    # make a copy of grid so that you can compare with the unmodified grid"
    },
    {
      "lineno": 125,
      "line": "    for example_grid in (initial_grid, no_solution):"
    },
    {
      "lineno": 126,
      "line": "        print(\"\\nExample grid:\\n\" + \"=\" * 20)"
    },
    {
      "lineno": 127,
      "line": "        print_solution(example_grid)"
    },
    {
      "lineno": 128,
      "line": "        print(\"\\nExample grid solution:\")"
    },
    {
      "lineno": 129,
      "line": "        solution = sudoku(example_grid)"
    },
    {
      "lineno": 130,
      "line": "        if solution is not None:"
    },
    {
      "lineno": 131,
      "line": "            print_solution(solution)"
    },
    {
      "lineno": 132,
      "line": "        else:"
    },
    {
      "lineno": 133,
      "line": "            print(\"Cannot find a solution.\")"
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "\"\"\"\nGiven a partially filled 9x9 2D array, the objective is to fill a 9x9\nsquare grid with digits numbered 1 to 9, so that every row, column, and\nand each of the nine 3x3 sub-grids contains all of the digits.\n\nThis can be solved using Backtracking and is similar to n-queens.\nWe check to see if a cell is safe or not and recursively call the\nfunction on the next column to see if it returns True. if yes, we\nhave solved the puzzle. else, we backtrack and place another number\nin that cell and repeat this process.\n\"\"\"\nfrom __future__ import annotations",
      "successors": [
        {
          "id": 3,
          "label": "Matrix = list[list[int]]\n# assigning initial values to the grid\ninitial_grid: Matrix = [\n    [3, 0, 6, 5, 0, 8, 4, 0, 0],\n    [5, 2, 0, 0, 0, 0, 0, 0, 0],\n    [0, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n]",
          "successors": [
            {
              "id": 5,
              "label": "# a grid with no solution\nno_solution: Matrix = [\n    [5, 0, 6, 5, 0, 8, 4, 0, 3],\n    [5, 2, 0, 0, 0, 0, 0, 0, 2],\n    [1, 8, 7, 0, 0, 0, 0, 3, 1],\n    [0, 0, 3, 0, 1, 0, 0, 8, 0],\n    [9, 0, 0, 8, 6, 3, 0, 0, 5],\n    [0, 5, 0, 0, 9, 0, 6, 0, 0],\n    [1, 3, 0, 0, 0, 0, 2, 5, 0],\n    [0, 0, 0, 0, 0, 0, 0, 7, 4],\n    [0, 0, 5, 2, 0, 6, 3, 0, 0],\n]\nif __name__ == \"__main__\":\n    # make a copy of grid so that you can compare with the unmodified grid\n    for example_grid in (initial_grid, no_solution):\n        print(\"\\nExample grid:\\n\" + \"=\" * 20)\n        print_solution(example_grid)\n        print(\"\\nExample grid solution:\")\n        solution = sudoku(example_grid)\n        if solution is not None:\n            print_solution(solution)\n        else:\n            print(\"Cannot find a solution.\")",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}