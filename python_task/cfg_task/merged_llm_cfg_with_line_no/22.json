{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 581,
  "functions": [
    {
      "name": "is_github_url",
      "type": "function",
      "start_line": 18,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 18,
          "line": "def is_github_url(url: str) -> bool:"
        },
        {
          "lineno": 19,
          "line": "    return urlparse(url).netloc == \"github.com\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def is_github_url(url: str) -> bool:\n    return urlparse(url).netloc == \"github.com\"",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "GithubCommentBlock",
      "type": "class",
      "start_line": 23,
      "end_line": 106,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 42,
          "end_line": 77,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 42,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 43,
              "line": "        super().__init__("
            },
            {
              "lineno": 44,
              "line": "            id=\"a8db4d8d-db1c-4a25-a1b0-416a8c33602b\","
            },
            {
              "lineno": 45,
              "line": "            description=\"This block posts a comment on a specified GitHub issue or pull request.\","
            },
            {
              "lineno": 46,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 47,
              "line": "            input_schema=GithubCommentBlock.Input,"
            },
            {
              "lineno": 48,
              "line": "            output_schema=GithubCommentBlock.Output,"
            },
            {
              "lineno": 49,
              "line": "            test_input=["
            },
            {
              "lineno": 50,
              "line": "                {"
            },
            {
              "lineno": 51,
              "line": "                    \"issue_url\": \"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 52,
              "line": "                    \"comment\": \"This is a test comment.\","
            },
            {
              "lineno": 53,
              "line": "                    \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 54,
              "line": "                },"
            },
            {
              "lineno": 55,
              "line": "                {"
            },
            {
              "lineno": 56,
              "line": "                    \"issue_url\": \"https://github.com/owner/repo/pull/1\","
            },
            {
              "lineno": 57,
              "line": "                    \"comment\": \"This is a test comment.\","
            },
            {
              "lineno": 58,
              "line": "                    \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 59,
              "line": "                },"
            },
            {
              "lineno": 60,
              "line": "            ],"
            },
            {
              "lineno": 61,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 62,
              "line": "            test_output=["
            },
            {
              "lineno": 63,
              "line": "                (\"id\", 1337),"
            },
            {
              "lineno": 64,
              "line": "                (\"url\", \"https://github.com/owner/repo/issues/1#issuecomment-1337\"),"
            },
            {
              "lineno": 65,
              "line": "                (\"id\", 1337),"
            },
            {
              "lineno": 66,
              "line": "                ("
            },
            {
              "lineno": 67,
              "line": "                    \"url\","
            },
            {
              "lineno": 68,
              "line": "                    \"https://github.com/owner/repo/issues/1#issuecomment-1337\","
            },
            {
              "lineno": 69,
              "line": "                ),"
            },
            {
              "lineno": 70,
              "line": "            ],"
            },
            {
              "lineno": 71,
              "line": "            test_mock={"
            },
            {
              "lineno": 72,
              "line": "                \"post_comment\": lambda *args, **kwargs: ("
            },
            {
              "lineno": 73,
              "line": "                    1337,"
            },
            {
              "lineno": 74,
              "line": "                    \"https://github.com/owner/repo/issues/1#issuecomment-1337\","
            },
            {
              "lineno": 75,
              "line": "                )"
            },
            {
              "lineno": 76,
              "line": "            },"
            },
            {
              "lineno": 77,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"a8db4d8d-db1c-4a25-a1b0-416a8c33602b\",\n            description=\"This block posts a comment on a specified GitHub issue or pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubCommentBlock.Input,\n            output_schema=GithubCommentBlock.Output,\n            test_input=[\n                {\n                    \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                    \"comment\": \"This is a test comment.\",\n                    \"credentials\": TEST_CREDENTIALS_INPUT,\n                },\n                {\n                    \"issue_url\": \"https://github.com/owner/repo/pull/1\",\n                    \"comment\": \"This is a test comment.\",\n                    \"credentials\": TEST_CREDENTIALS_INPUT,\n                },\n            ],\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"id\", 1337),\n                (\"url\", \"https://github.com/owner/repo/issues/1#issuecomment-1337\"),\n                (\"id\", 1337),\n                (\n                    \"url\",\n                    \"https://github.com/owner/repo/issues/1#issuecomment-1337\",\n                ),\n            ],\n            test_mock={\n                \"post_comment\": lambda *args, **kwargs: (\n                    1337,\n                    \"https://github.com/owner/repo/issues/1#issuecomment-1337\",\n                )\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "post_comment",
          "type": "function",
          "start_line": 80,
          "end_line": 90,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 80,
              "line": "    def post_comment("
            },
            {
              "lineno": 81,
              "line": "        credentials: GithubCredentials, issue_url: str, body_text: str"
            },
            {
              "lineno": 82,
              "line": "    ) -> tuple[int, str]:"
            },
            {
              "lineno": 83,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 84,
              "line": "        data = {\"body\": body_text}"
            },
            {
              "lineno": 85,
              "line": "        if \"pull\" in issue_url:"
            },
            {
              "lineno": 86,
              "line": "            issue_url = issue_url.replace(\"pull\", \"issues\")"
            },
            {
              "lineno": 87,
              "line": "        comments_url = issue_url + \"/comments\""
            },
            {
              "lineno": 88,
              "line": "        response = api.post(comments_url, json=data)"
            },
            {
              "lineno": 89,
              "line": "        comment = response.json()"
            },
            {
              "lineno": 90,
              "line": "        return comment[\"id\"], comment[\"html_url\"]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def post_comment(\n        credentials: GithubCredentials, issue_url: str, body_text: str\n    ) -> tuple[int, str]:\n        api = get_api(credentials)\n        data = {\"body\": body_text}",
              "successors": [
                {
                  "id": 3,
                  "label": "        if \"pull\" in issue_url:\n            issue_url = issue_url.replace(\"pull\", \"issues\")\n        comments_url = issue_url + \"/comments\"\n        response = api.post(comments_url, json=data)\n        comment = response.json()\n        return comment[\"id\"], comment[\"html_url\"]",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 92,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 92,
              "line": "    def run("
            },
            {
              "lineno": 93,
              "line": "        self,"
            },
            {
              "lineno": 94,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 95,
              "line": "        *,"
            },
            {
              "lineno": 96,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 97,
              "line": "        **kwargs,"
            },
            {
              "lineno": 98,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 99,
              "line": "        id, url = self.post_comment("
            },
            {
              "lineno": 100,
              "line": "            credentials,"
            },
            {
              "lineno": 101,
              "line": "            input_data.issue_url,"
            },
            {
              "lineno": 102,
              "line": "            input_data.comment,"
            },
            {
              "lineno": 103,
              "line": "        )"
            },
            {
              "lineno": 104,
              "line": "        yield \"id\", id"
            },
            {
              "lineno": 105,
              "line": "        yield \"url\", url"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        id, url = self.post_comment(\n            credentials,\n            input_data.issue_url,\n            input_data.comment,\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        yield \"id\", id\n        yield \"url\", url",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 24,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 24,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 25,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 26,
              "line": "        issue_url: str = SchemaField("
            },
            {
              "lineno": 27,
              "line": "            description=\"URL of the GitHub issue or pull request\","
            },
            {
              "lineno": 28,
              "line": "            placeholder=\"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 29,
              "line": "        )"
            },
            {
              "lineno": 30,
              "line": "        comment: str = SchemaField("
            },
            {
              "lineno": 31,
              "line": "            description=\"Comment to post on the issue or pull request\","
            },
            {
              "lineno": 32,
              "line": "            placeholder=\"Enter your comment\","
            },
            {
              "lineno": 33,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue or pull request\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        comment: str = SchemaField(\n            description=\"Comment to post on the issue or pull request\",\n            placeholder=\"Enter your comment\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 35,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 35,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 36,
              "line": "        id: int = SchemaField(description=\"ID of the created comment\")"
            },
            {
              "lineno": 37,
              "line": "        url: str = SchemaField(description=\"URL to the comment on GitHub\")"
            },
            {
              "lineno": 38,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 39,
              "line": "            description=\"Error message if the comment posting failed\""
            },
            {
              "lineno": 40,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        id: int = SchemaField(description=\"ID of the created comment\")\n        url: str = SchemaField(description=\"URL to the comment on GitHub\")\n        error: str = SchemaField(\n            description=\"Error message if the comment posting failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 23,
          "line": "class GithubCommentBlock(Block):"
        },
        {
          "lineno": 34,
          "line": ""
        },
        {
          "lineno": 41,
          "line": ""
        },
        {
          "lineno": 78,
          "line": ""
        },
        {
          "lineno": 79,
          "line": "    @staticmethod"
        },
        {
          "lineno": 91,
          "line": ""
        },
        {
          "lineno": 106,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubCommentBlock(Block):",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubMakeIssueBlock",
      "type": "class",
      "start_line": 111,
      "end_line": 185,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 132,
          "end_line": 156,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 132,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 133,
              "line": "        super().__init__("
            },
            {
              "lineno": 134,
              "line": "            id=\"691dad47-f494-44c3-a1e8-05b7990f2dab\","
            },
            {
              "lineno": 135,
              "line": "            description=\"This block creates a new issue on a specified GitHub repository.\","
            },
            {
              "lineno": 136,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 137,
              "line": "            input_schema=GithubMakeIssueBlock.Input,"
            },
            {
              "lineno": 138,
              "line": "            output_schema=GithubMakeIssueBlock.Output,"
            },
            {
              "lineno": 139,
              "line": "            test_input={"
            },
            {
              "lineno": 140,
              "line": "                \"repo_url\": \"https://github.com/owner/repo\","
            },
            {
              "lineno": 141,
              "line": "                \"title\": \"Test Issue\","
            },
            {
              "lineno": 142,
              "line": "                \"body\": \"This is a test issue.\","
            },
            {
              "lineno": 143,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 144,
              "line": "            },"
            },
            {
              "lineno": 145,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 146,
              "line": "            test_output=["
            },
            {
              "lineno": 147,
              "line": "                (\"number\", 1),"
            },
            {
              "lineno": 148,
              "line": "                (\"url\", \"https://github.com/owner/repo/issues/1\"),"
            },
            {
              "lineno": 149,
              "line": "            ],"
            },
            {
              "lineno": 150,
              "line": "            test_mock={"
            },
            {
              "lineno": 151,
              "line": "                \"create_issue\": lambda *args, **kwargs: ("
            },
            {
              "lineno": 152,
              "line": "                    1,"
            },
            {
              "lineno": 153,
              "line": "                    \"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 154,
              "line": "                )"
            },
            {
              "lineno": 155,
              "line": "            },"
            },
            {
              "lineno": 156,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"691dad47-f494-44c3-a1e8-05b7990f2dab\",\n            description=\"This block creates a new issue on a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakeIssueBlock.Input,\n            output_schema=GithubMakeIssueBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"title\": \"Test Issue\",\n                \"body\": \"This is a test issue.\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"number\", 1),\n                (\"url\", \"https://github.com/owner/repo/issues/1\"),\n            ],\n            test_mock={\n                \"create_issue\": lambda *args, **kwargs: (\n                    1,\n                    \"https://github.com/owner/repo/issues/1\",\n                )\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "create_issue",
          "type": "function",
          "start_line": 159,
          "end_line": 167,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 159,
              "line": "    def create_issue("
            },
            {
              "lineno": 160,
              "line": "        credentials: GithubCredentials, repo_url: str, title: str, body: str"
            },
            {
              "lineno": 161,
              "line": "    ) -> tuple[int, str]:"
            },
            {
              "lineno": 162,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 163,
              "line": "        data = {\"title\": title, \"body\": body}"
            },
            {
              "lineno": 164,
              "line": "        issues_url = repo_url + \"/issues\""
            },
            {
              "lineno": 165,
              "line": "        response = api.post(issues_url, json=data)"
            },
            {
              "lineno": 166,
              "line": "        issue = response.json()"
            },
            {
              "lineno": 167,
              "line": "        return issue[\"number\"], issue[\"html_url\"]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def create_issue(\n        credentials: GithubCredentials, repo_url: str, title: str, body: str\n    ) -> tuple[int, str]:\n        api = get_api(credentials)\n        data = {\"title\": title, \"body\": body}\n        issues_url = repo_url + \"/issues\"\n        response = api.post(issues_url, json=data)\n        issue = response.json()\n        return issue[\"number\"], issue[\"html_url\"]",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 169,
          "end_line": 183,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 169,
              "line": "    def run("
            },
            {
              "lineno": 170,
              "line": "        self,"
            },
            {
              "lineno": 171,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 172,
              "line": "        *,"
            },
            {
              "lineno": 173,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 174,
              "line": "        **kwargs,"
            },
            {
              "lineno": 175,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 176,
              "line": "        number, url = self.create_issue("
            },
            {
              "lineno": 177,
              "line": "            credentials,"
            },
            {
              "lineno": 178,
              "line": "            input_data.repo_url,"
            },
            {
              "lineno": 179,
              "line": "            input_data.title,"
            },
            {
              "lineno": 180,
              "line": "            input_data.body,"
            },
            {
              "lineno": 181,
              "line": "        )"
            },
            {
              "lineno": 182,
              "line": "        yield \"number\", number"
            },
            {
              "lineno": 183,
              "line": "        yield \"url\", url"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        number, url = self.create_issue(\n            credentials,\n            input_data.repo_url,\n            input_data.title,\n            input_data.body,\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        yield \"number\", number\n        yield \"url\", url",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 112,
          "end_line": 123,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 112,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 113,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 114,
              "line": "        repo_url: str = SchemaField("
            },
            {
              "lineno": 115,
              "line": "            description=\"URL of the GitHub repository\","
            },
            {
              "lineno": 116,
              "line": "            placeholder=\"https://github.com/owner/repo\","
            },
            {
              "lineno": 117,
              "line": "        )"
            },
            {
              "lineno": 118,
              "line": "        title: str = SchemaField("
            },
            {
              "lineno": 119,
              "line": "            description=\"Title of the issue\", placeholder=\"Enter the issue title\""
            },
            {
              "lineno": 120,
              "line": "        )"
            },
            {
              "lineno": 121,
              "line": "        body: str = SchemaField("
            },
            {
              "lineno": 122,
              "line": "            description=\"Body of the issue\", placeholder=\"Enter the issue body\""
            },
            {
              "lineno": 123,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        title: str = SchemaField(\n            description=\"Title of the issue\", placeholder=\"Enter the issue title\"\n        )\n        body: str = SchemaField(\n            description=\"Body of the issue\", placeholder=\"Enter the issue body\"\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 125,
          "end_line": 130,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 125,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 126,
              "line": "        number: int = SchemaField(description=\"Number of the created issue\")"
            },
            {
              "lineno": 127,
              "line": "        url: str = SchemaField(description=\"URL of the created issue\")"
            },
            {
              "lineno": 128,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 129,
              "line": "            description=\"Error message if the issue creation failed\""
            },
            {
              "lineno": 130,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        number: int = SchemaField(description=\"Number of the created issue\")\n        url: str = SchemaField(description=\"URL of the created issue\")\n        error: str = SchemaField(\n            description=\"Error message if the issue creation failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 111,
          "line": "class GithubMakeIssueBlock(Block):"
        },
        {
          "lineno": 124,
          "line": ""
        },
        {
          "lineno": 131,
          "line": ""
        },
        {
          "lineno": 157,
          "line": ""
        },
        {
          "lineno": 158,
          "line": "    @staticmethod"
        },
        {
          "lineno": 168,
          "line": ""
        },
        {
          "lineno": 184,
          "line": ""
        },
        {
          "lineno": 185,
          "line": ""
        }
      ],
      "blocks": []
    },
    {
      "name": "GithubReadIssueBlock",
      "type": "class",
      "start_line": 186,
      "end_line": 258,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 202,
          "end_line": 226,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 202,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 203,
              "line": "        super().__init__("
            },
            {
              "lineno": 204,
              "line": "            id=\"6443c75d-032a-4772-9c08-230c707c8acc\","
            },
            {
              "lineno": 205,
              "line": "            description=\"This block reads the body, title, and user of a specified GitHub issue.\","
            },
            {
              "lineno": 206,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 207,
              "line": "            input_schema=GithubReadIssueBlock.Input,"
            },
            {
              "lineno": 208,
              "line": "            output_schema=GithubReadIssueBlock.Output,"
            },
            {
              "lineno": 209,
              "line": "            test_input={"
            },
            {
              "lineno": 210,
              "line": "                \"issue_url\": \"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 211,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 212,
              "line": "            },"
            },
            {
              "lineno": 213,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 214,
              "line": "            test_output=["
            },
            {
              "lineno": 215,
              "line": "                (\"title\", \"Title of the issue\"),"
            },
            {
              "lineno": 216,
              "line": "                (\"body\", \"This is the body of the issue.\"),"
            },
            {
              "lineno": 217,
              "line": "                (\"user\", \"username\"),"
            },
            {
              "lineno": 218,
              "line": "            ],"
            },
            {
              "lineno": 219,
              "line": "            test_mock={"
            },
            {
              "lineno": 220,
              "line": "                \"read_issue\": lambda *args, **kwargs: ("
            },
            {
              "lineno": 221,
              "line": "                    \"Title of the issue\","
            },
            {
              "lineno": 222,
              "line": "                    \"This is the body of the issue.\","
            },
            {
              "lineno": 223,
              "line": "                    \"username\","
            },
            {
              "lineno": 224,
              "line": "                )"
            },
            {
              "lineno": 225,
              "line": "            },"
            },
            {
              "lineno": 226,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"6443c75d-032a-4772-9c08-230c707c8acc\",\n            description=\"This block reads the body, title, and user of a specified GitHub issue.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadIssueBlock.Input,\n            output_schema=GithubReadIssueBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"title\", \"Title of the issue\"),\n                (\"body\", \"This is the body of the issue.\"),\n                (\"user\", \"username\"),\n            ],\n            test_mock={\n                \"read_issue\": lambda *args, **kwargs: (\n                    \"Title of the issue\",\n                    \"This is the body of the issue.\",\n                    \"username\",\n                )\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "read_issue",
          "type": "function",
          "start_line": 229,
          "end_line": 238,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 229,
              "line": "    def read_issue("
            },
            {
              "lineno": 230,
              "line": "        credentials: GithubCredentials, issue_url: str"
            },
            {
              "lineno": 231,
              "line": "    ) -> tuple[str, str, str]:"
            },
            {
              "lineno": 232,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 233,
              "line": "        response = api.get(issue_url)"
            },
            {
              "lineno": 234,
              "line": "        data = response.json()"
            },
            {
              "lineno": 235,
              "line": "        title = data.get(\"title\", \"No title found\")"
            },
            {
              "lineno": 236,
              "line": "        body = data.get(\"body\", \"No body content found\")"
            },
            {
              "lineno": 237,
              "line": "        user = data.get(\"user\", {}).get(\"login\", \"No user found\")"
            },
            {
              "lineno": 238,
              "line": "        return title, body, user"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def read_issue(\n        credentials: GithubCredentials, issue_url: str\n    ) -> tuple[str, str, str]:\n        api = get_api(credentials)\n        response = api.get(issue_url)\n        data = response.json()\n        title = data.get(\"title\", \"No title found\")\n        body = data.get(\"body\", \"No body content found\")\n        user = data.get(\"user\", {}).get(\"login\", \"No user found\")\n        return title, body, user",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 240,
          "end_line": 256,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 240,
              "line": "    def run("
            },
            {
              "lineno": 241,
              "line": "        self,"
            },
            {
              "lineno": 242,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 243,
              "line": "        *,"
            },
            {
              "lineno": 244,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 245,
              "line": "        **kwargs,"
            },
            {
              "lineno": 246,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 247,
              "line": "        title, body, user = self.read_issue("
            },
            {
              "lineno": 248,
              "line": "            credentials,"
            },
            {
              "lineno": 249,
              "line": "            input_data.issue_url,"
            },
            {
              "lineno": 250,
              "line": "        )"
            },
            {
              "lineno": 251,
              "line": "        if title:"
            },
            {
              "lineno": 252,
              "line": "            yield \"title\", title"
            },
            {
              "lineno": 253,
              "line": "        if body:"
            },
            {
              "lineno": 254,
              "line": "            yield \"body\", body"
            },
            {
              "lineno": 255,
              "line": "        if user:"
            },
            {
              "lineno": 256,
              "line": "            yield \"user\", user"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        title, body, user = self.read_issue(\n            credentials,\n            input_data.issue_url,\n        )",
              "successors": [
                {
                  "id": 2,
                  "label": "        if title:\n            yield \"title\", title",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "        if body:\n            yield \"body\", body",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "        if user:\n            yield \"user\", user",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 187,
          "end_line": 192,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 187,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 188,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 189,
              "line": "        issue_url: str = SchemaField("
            },
            {
              "lineno": 190,
              "line": "            description=\"URL of the GitHub issue\","
            },
            {
              "lineno": 191,
              "line": "            placeholder=\"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 192,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 194,
          "end_line": 200,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 194,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 195,
              "line": "        title: str = SchemaField(description=\"Title of the issue\")"
            },
            {
              "lineno": 196,
              "line": "        body: str = SchemaField(description=\"Body of the issue\")"
            },
            {
              "lineno": 197,
              "line": "        user: str = SchemaField(description=\"User who created the issue\")"
            },
            {
              "lineno": 198,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 199,
              "line": "            description=\"Error message if reading the issue failed\""
            },
            {
              "lineno": 200,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        title: str = SchemaField(description=\"Title of the issue\")\n        body: str = SchemaField(description=\"Body of the issue\")\n        user: str = SchemaField(description=\"User who created the issue\")\n        error: str = SchemaField(\n            description=\"Error message if reading the issue failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 186,
          "line": "class GithubReadIssueBlock(Block):"
        },
        {
          "lineno": 193,
          "line": ""
        },
        {
          "lineno": 201,
          "line": ""
        },
        {
          "lineno": 227,
          "line": ""
        },
        {
          "lineno": 228,
          "line": "    @staticmethod"
        },
        {
          "lineno": 239,
          "line": ""
        },
        {
          "lineno": 257,
          "line": ""
        },
        {
          "lineno": 258,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubReadIssueBlock(Block):",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubListIssuesBlock",
      "type": "class",
      "start_line": 259,
      "end_line": 334,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 277,
          "end_line": 306,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 277,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 278,
              "line": "        super().__init__("
            },
            {
              "lineno": 279,
              "line": "            id=\"c215bfd7-0e57-4573-8f8c-f7d4963dcd74\","
            },
            {
              "lineno": 280,
              "line": "            description=\"This block lists all issues for a specified GitHub repository.\","
            },
            {
              "lineno": 281,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 282,
              "line": "            input_schema=GithubListIssuesBlock.Input,"
            },
            {
              "lineno": 283,
              "line": "            output_schema=GithubListIssuesBlock.Output,"
            },
            {
              "lineno": 284,
              "line": "            test_input={"
            },
            {
              "lineno": 285,
              "line": "                \"repo_url\": \"https://github.com/owner/repo\","
            },
            {
              "lineno": 286,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 287,
              "line": "            },"
            },
            {
              "lineno": 288,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 289,
              "line": "            test_output=["
            },
            {
              "lineno": 290,
              "line": "                ("
            },
            {
              "lineno": 291,
              "line": "                    \"issue\","
            },
            {
              "lineno": 292,
              "line": "                    {"
            },
            {
              "lineno": 293,
              "line": "                        \"title\": \"Issue 1\","
            },
            {
              "lineno": 294,
              "line": "                        \"url\": \"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 295,
              "line": "                    },"
            },
            {
              "lineno": 296,
              "line": "                )"
            },
            {
              "lineno": 297,
              "line": "            ],"
            },
            {
              "lineno": 298,
              "line": "            test_mock={"
            },
            {
              "lineno": 299,
              "line": "                \"list_issues\": lambda *args, **kwargs: ["
            },
            {
              "lineno": 300,
              "line": "                    {"
            },
            {
              "lineno": 301,
              "line": "                        \"title\": \"Issue 1\","
            },
            {
              "lineno": 302,
              "line": "                        \"url\": \"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 303,
              "line": "                    }"
            },
            {
              "lineno": 304,
              "line": "                ]"
            },
            {
              "lineno": 305,
              "line": "            },"
            },
            {
              "lineno": 306,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"c215bfd7-0e57-4573-8f8c-f7d4963dcd74\",\n            description=\"This block lists all issues for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListIssuesBlock.Input,\n            output_schema=GithubListIssuesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"issue\",\n                    {\n                        \"title\": \"Issue 1\",\n                        \"url\": \"https://github.com/owner/repo/issues/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_issues\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Issue 1\",\n                        \"url\": \"https://github.com/owner/repo/issues/1\",\n                    }\n                ]\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "list_issues",
          "type": "function",
          "start_line": 309,
          "end_line": 319,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 309,
              "line": "    def list_issues("
            },
            {
              "lineno": 310,
              "line": "        credentials: GithubCredentials, repo_url: str"
            },
            {
              "lineno": 311,
              "line": "    ) -> list[Output.IssueItem]:"
            },
            {
              "lineno": 312,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 313,
              "line": "        issues_url = repo_url + \"/issues\""
            },
            {
              "lineno": 314,
              "line": "        response = api.get(issues_url)"
            },
            {
              "lineno": 315,
              "line": "        data = response.json()"
            },
            {
              "lineno": 316,
              "line": "        issues: list[GithubListIssuesBlock.Output.IssueItem] = ["
            },
            {
              "lineno": 317,
              "line": "            {\"title\": issue[\"title\"], \"url\": issue[\"html_url\"]} for issue in data"
            },
            {
              "lineno": 318,
              "line": "        ]"
            },
            {
              "lineno": 319,
              "line": "        return issues"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def list_issues(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.IssueItem]:\n        api = get_api(credentials)\n        issues_url = repo_url + \"/issues\"\n        response = api.get(issues_url)\n        data = response.json()\n        issues: list[GithubListIssuesBlock.Output.IssueItem] = [\n            {\"title\": issue[\"title\"], \"url\": issue[\"html_url\"]} for issue in data\n        ]\n        return issues",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 321,
          "end_line": 332,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 321,
              "line": "    def run("
            },
            {
              "lineno": 322,
              "line": "        self,"
            },
            {
              "lineno": 323,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 324,
              "line": "        *,"
            },
            {
              "lineno": 325,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 326,
              "line": "        **kwargs,"
            },
            {
              "lineno": 327,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 328,
              "line": "        issues = self.list_issues("
            },
            {
              "lineno": 329,
              "line": "            credentials,"
            },
            {
              "lineno": 330,
              "line": "            input_data.repo_url,"
            },
            {
              "lineno": 331,
              "line": "        )"
            },
            {
              "lineno": 332,
              "line": "        yield from ((\"issue\", issue) for issue in issues)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        issues = self.list_issues(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"issue\", issue) for issue in issues)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 260,
          "end_line": 265,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 260,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 261,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 262,
              "line": "        repo_url: str = SchemaField("
            },
            {
              "lineno": 263,
              "line": "            description=\"URL of the GitHub repository\","
            },
            {
              "lineno": 264,
              "line": "            placeholder=\"https://github.com/owner/repo\","
            },
            {
              "lineno": 265,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 267,
          "end_line": 275,
          "functions": [],
          "classes": [
            {
              "name": "IssueItem",
              "type": "class",
              "start_line": 268,
              "end_line": 270,
              "functions": [],
              "classes": [],
              "simplified_code": [
                {
                  "lineno": 268,
                  "line": "        class IssueItem(TypedDict):"
                },
                {
                  "lineno": 269,
                  "line": "            title: str"
                },
                {
                  "lineno": 270,
                  "line": "            url: str"
                }
              ],
              "blocks": [
                {
                  "id": 1,
                  "label": "class IssueItem(TypedDict):\n    title: str\n    url: str\n",
                  "successors": []
                }
              ]
            }
          ],
          "simplified_code": [
            {
              "lineno": 267,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 271,
              "line": ""
            },
            {
              "lineno": 272,
              "line": "        issue: IssueItem = SchemaField("
            },
            {
              "lineno": 273,
              "line": "            title=\"Issue\", description=\"Issues with their title and URL\""
            },
            {
              "lineno": 274,
              "line": "        )"
            },
            {
              "lineno": 275,
              "line": "        error: str = SchemaField(description=\"Error message if listing issues failed\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        issue: IssueItem = SchemaField(\n            title=\"Issue\", description=\"Issues with their title and URL\"\n        )\n        error: str = SchemaField(description=\"Error message if listing issues failed\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 259,
          "line": "class GithubListIssuesBlock(Block):"
        },
        {
          "lineno": 266,
          "line": ""
        },
        {
          "lineno": 276,
          "line": ""
        },
        {
          "lineno": 307,
          "line": ""
        },
        {
          "lineno": 308,
          "line": "    @staticmethod"
        },
        {
          "lineno": 320,
          "line": ""
        },
        {
          "lineno": 333,
          "line": ""
        },
        {
          "lineno": 334,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubListIssuesBlock(Block):",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubAddLabelBlock",
      "type": "class",
      "start_line": 335,
      "end_line": 392,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 353,
          "end_line": 368,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 353,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 354,
              "line": "        super().__init__("
            },
            {
              "lineno": 355,
              "line": "            id=\"98bd6b77-9506-43d5-b669-6b9733c4b1f1\","
            },
            {
              "lineno": 356,
              "line": "            description=\"This block adds a label to a specified GitHub issue or pull request.\","
            },
            {
              "lineno": 357,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 358,
              "line": "            input_schema=GithubAddLabelBlock.Input,"
            },
            {
              "lineno": 359,
              "line": "            output_schema=GithubAddLabelBlock.Output,"
            },
            {
              "lineno": 360,
              "line": "            test_input={"
            },
            {
              "lineno": 361,
              "line": "                \"issue_url\": \"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 362,
              "line": "                \"label\": \"bug\","
            },
            {
              "lineno": 363,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 364,
              "line": "            },"
            },
            {
              "lineno": 365,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 366,
              "line": "            test_output=[(\"status\", \"Label added successfully\")],"
            },
            {
              "lineno": 367,
              "line": "            test_mock={\"add_label\": lambda *args, **kwargs: \"Label added successfully\"},"
            },
            {
              "lineno": 368,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"98bd6b77-9506-43d5-b669-6b9733c4b1f1\",\n            description=\"This block adds a label to a specified GitHub issue or pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubAddLabelBlock.Input,\n            output_schema=GithubAddLabelBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"label\": \"bug\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Label added successfully\")],\n            test_mock={\"add_label\": lambda *args, **kwargs: \"Label added successfully\"},\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "add_label",
          "type": "function",
          "start_line": 371,
          "end_line": 376,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 371,
              "line": "    def add_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:"
            },
            {
              "lineno": 372,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 373,
              "line": "        data = {\"labels\": [label]}"
            },
            {
              "lineno": 374,
              "line": "        labels_url = issue_url + \"/labels\""
            },
            {
              "lineno": 375,
              "line": "        api.post(labels_url, json=data)"
            },
            {
              "lineno": 376,
              "line": "        return \"Label added successfully\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def add_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:\n        api = get_api(credentials)\n        data = {\"labels\": [label]}\n        labels_url = issue_url + \"/labels\"\n        api.post(labels_url, json=data)\n        return \"Label added successfully\"",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 378,
          "end_line": 390,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 378,
              "line": "    def run("
            },
            {
              "lineno": 379,
              "line": "        self,"
            },
            {
              "lineno": 380,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 381,
              "line": "        *,"
            },
            {
              "lineno": 382,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 383,
              "line": "        **kwargs,"
            },
            {
              "lineno": 384,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 385,
              "line": "        status = self.add_label("
            },
            {
              "lineno": 386,
              "line": "            credentials,"
            },
            {
              "lineno": 387,
              "line": "            input_data.issue_url,"
            },
            {
              "lineno": 388,
              "line": "            input_data.label,"
            },
            {
              "lineno": 389,
              "line": "        )"
            },
            {
              "lineno": 390,
              "line": "        yield \"status\", status"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.add_label(\n            credentials,\n            input_data.issue_url,\n            input_data.label,\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        yield \"status\", status",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 336,
          "end_line": 345,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 336,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 337,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 338,
              "line": "        issue_url: str = SchemaField("
            },
            {
              "lineno": 339,
              "line": "            description=\"URL of the GitHub issue or pull request\","
            },
            {
              "lineno": 340,
              "line": "            placeholder=\"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 341,
              "line": "        )"
            },
            {
              "lineno": 342,
              "line": "        label: str = SchemaField("
            },
            {
              "lineno": 343,
              "line": "            description=\"Label to add to the issue or pull request\","
            },
            {
              "lineno": 344,
              "line": "            placeholder=\"Enter the label\","
            },
            {
              "lineno": 345,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue or pull request\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        label: str = SchemaField(\n            description=\"Label to add to the issue or pull request\",\n            placeholder=\"Enter the label\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 347,
          "end_line": 351,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 347,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 348,
              "line": "        status: str = SchemaField(description=\"Status of the label addition operation\")"
            },
            {
              "lineno": 349,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 350,
              "line": "            description=\"Error message if the label addition failed\""
            },
            {
              "lineno": 351,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the label addition operation\")\n        error: str = SchemaField(\n            description=\"Error message if the label addition failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 335,
          "line": "class GithubAddLabelBlock(Block):"
        },
        {
          "lineno": 346,
          "line": ""
        },
        {
          "lineno": 352,
          "line": ""
        },
        {
          "lineno": 369,
          "line": ""
        },
        {
          "lineno": 370,
          "line": "    @staticmethod"
        },
        {
          "lineno": 377,
          "line": ""
        },
        {
          "lineno": 391,
          "line": ""
        },
        {
          "lineno": 392,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubAddLabelBlock(Block):",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubRemoveLabelBlock",
      "type": "class",
      "start_line": 393,
      "end_line": 451,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 411,
          "end_line": 428,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 411,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 412,
              "line": "        super().__init__("
            },
            {
              "lineno": 413,
              "line": "            id=\"78f050c5-3e3a-48c0-9e5b-ef1ceca5589c\","
            },
            {
              "lineno": 414,
              "line": "            description=\"This block removes a label from a specified GitHub issue or pull request.\","
            },
            {
              "lineno": 415,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 416,
              "line": "            input_schema=GithubRemoveLabelBlock.Input,"
            },
            {
              "lineno": 417,
              "line": "            output_schema=GithubRemoveLabelBlock.Output,"
            },
            {
              "lineno": 418,
              "line": "            test_input={"
            },
            {
              "lineno": 419,
              "line": "                \"issue_url\": \"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 420,
              "line": "                \"label\": \"bug\","
            },
            {
              "lineno": 421,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 422,
              "line": "            },"
            },
            {
              "lineno": 423,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 424,
              "line": "            test_output=[(\"status\", \"Label removed successfully\")],"
            },
            {
              "lineno": 425,
              "line": "            test_mock={"
            },
            {
              "lineno": 426,
              "line": "                \"remove_label\": lambda *args, **kwargs: \"Label removed successfully\""
            },
            {
              "lineno": 427,
              "line": "            },"
            },
            {
              "lineno": 428,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"78f050c5-3e3a-48c0-9e5b-ef1ceca5589c\",\n            description=\"This block removes a label from a specified GitHub issue or pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubRemoveLabelBlock.Input,\n            output_schema=GithubRemoveLabelBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"label\": \"bug\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Label removed successfully\")],\n            test_mock={\n                \"remove_label\": lambda *args, **kwargs: \"Label removed successfully\"\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "remove_label",
          "type": "function",
          "start_line": 431,
          "end_line": 435,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 431,
              "line": "    def remove_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:"
            },
            {
              "lineno": 432,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 433,
              "line": "        label_url = issue_url + f\"/labels/{label}\""
            },
            {
              "lineno": 434,
              "line": "        api.delete(label_url)"
            },
            {
              "lineno": 435,
              "line": "        return \"Label removed successfully\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def remove_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:\n        api = get_api(credentials)\n        label_url = issue_url + f\"/labels/{label}\"\n        api.delete(label_url)\n        return \"Label removed successfully\"",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 437,
          "end_line": 449,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 437,
              "line": "    def run("
            },
            {
              "lineno": 438,
              "line": "        self,"
            },
            {
              "lineno": 439,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 440,
              "line": "        *,"
            },
            {
              "lineno": 441,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 442,
              "line": "        **kwargs,"
            },
            {
              "lineno": 443,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 444,
              "line": "        status = self.remove_label("
            },
            {
              "lineno": 445,
              "line": "            credentials,"
            },
            {
              "lineno": 446,
              "line": "            input_data.issue_url,"
            },
            {
              "lineno": 447,
              "line": "            input_data.label,"
            },
            {
              "lineno": 448,
              "line": "        )"
            },
            {
              "lineno": 449,
              "line": "        yield \"status\", status"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.remove_label(\n            credentials,\n            input_data.issue_url,\n            input_data.label,\n        )\n        yield \"status\", status",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 394,
          "end_line": 403,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 394,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 395,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 396,
              "line": "        issue_url: str = SchemaField("
            },
            {
              "lineno": 397,
              "line": "            description=\"URL of the GitHub issue or pull request\","
            },
            {
              "lineno": 398,
              "line": "            placeholder=\"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 399,
              "line": "        )"
            },
            {
              "lineno": 400,
              "line": "        label: str = SchemaField("
            },
            {
              "lineno": 401,
              "line": "            description=\"Label to remove from the issue or pull request\","
            },
            {
              "lineno": 402,
              "line": "            placeholder=\"Enter the label\","
            },
            {
              "lineno": 403,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue or pull request\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        label: str = SchemaField(\n            description=\"Label to remove from the issue or pull request\",\n            placeholder=\"Enter the label\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 405,
          "end_line": 409,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 405,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 406,
              "line": "        status: str = SchemaField(description=\"Status of the label removal operation\")"
            },
            {
              "lineno": 407,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 408,
              "line": "            description=\"Error message if the label removal failed\""
            },
            {
              "lineno": 409,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the label removal operation\")\n        error: str = SchemaField(\n            description=\"Error message if the label removal failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 393,
          "line": "class GithubRemoveLabelBlock(Block):"
        },
        {
          "lineno": 404,
          "line": ""
        },
        {
          "lineno": 410,
          "line": ""
        },
        {
          "lineno": 429,
          "line": ""
        },
        {
          "lineno": 430,
          "line": "    @staticmethod"
        },
        {
          "lineno": 436,
          "line": ""
        },
        {
          "lineno": 450,
          "line": ""
        },
        {
          "lineno": 451,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubRemoveLabelBlock(Block):\n@staticmethod",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubAssignIssueBlock",
      "type": "class",
      "start_line": 452,
      "end_line": 517,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 472,
          "end_line": 489,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 472,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 473,
              "line": "        super().__init__("
            },
            {
              "lineno": 474,
              "line": "            id=\"90507c72-b0ff-413a-886a-23bbbd66f542\","
            },
            {
              "lineno": 475,
              "line": "            description=\"This block assigns a user to a specified GitHub issue.\","
            },
            {
              "lineno": 476,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 477,
              "line": "            input_schema=GithubAssignIssueBlock.Input,"
            },
            {
              "lineno": 478,
              "line": "            output_schema=GithubAssignIssueBlock.Output,"
            },
            {
              "lineno": 479,
              "line": "            test_input={"
            },
            {
              "lineno": 480,
              "line": "                \"issue_url\": \"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 481,
              "line": "                \"assignee\": \"username1\","
            },
            {
              "lineno": 482,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 483,
              "line": "            },"
            },
            {
              "lineno": 484,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 485,
              "line": "            test_output=[(\"status\", \"Issue assigned successfully\")],"
            },
            {
              "lineno": 486,
              "line": "            test_mock={"
            },
            {
              "lineno": 487,
              "line": "                \"assign_issue\": lambda *args, **kwargs: \"Issue assigned successfully\""
            },
            {
              "lineno": 488,
              "line": "            },"
            },
            {
              "lineno": 489,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"90507c72-b0ff-413a-886a-23bbbd66f542\",\n            description=\"This block assigns a user to a specified GitHub issue.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubAssignIssueBlock.Input,\n            output_schema=GithubAssignIssueBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"assignee\": \"username1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Issue assigned successfully\")],\n            test_mock={\n                \"assign_issue\": lambda *args, **kwargs: \"Issue assigned successfully\"\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "assign_issue",
          "type": "function",
          "start_line": 492,
          "end_line": 501,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 492,
              "line": "    def assign_issue("
            },
            {
              "lineno": 493,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 494,
              "line": "        issue_url: str,"
            },
            {
              "lineno": 495,
              "line": "        assignee: str,"
            },
            {
              "lineno": 496,
              "line": "    ) -> str:"
            },
            {
              "lineno": 497,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 498,
              "line": "        assignees_url = issue_url + \"/assignees\""
            },
            {
              "lineno": 499,
              "line": "        data = {\"assignees\": [assignee]}"
            },
            {
              "lineno": 500,
              "line": "        api.post(assignees_url, json=data)"
            },
            {
              "lineno": 501,
              "line": "        return \"Issue assigned successfully\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def assign_issue(\n    credentials: GithubCredentials,\n    issue_url: str,\n    assignee: str,\n) -> str:\n    api = get_api(credentials)\n    assignees_url = issue_url + \"/assignees\"\n    data = {\"assignees\": [assignee]}\n    api.post(assignees_url, json=data)\n    return \"Issue assigned successfully\"",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 503,
          "end_line": 515,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 503,
              "line": "    def run("
            },
            {
              "lineno": 504,
              "line": "        self,"
            },
            {
              "lineno": 505,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 506,
              "line": "        *,"
            },
            {
              "lineno": 507,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 508,
              "line": "        **kwargs,"
            },
            {
              "lineno": 509,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 510,
              "line": "        status = self.assign_issue("
            },
            {
              "lineno": 511,
              "line": "            credentials,"
            },
            {
              "lineno": 512,
              "line": "            input_data.issue_url,"
            },
            {
              "lineno": 513,
              "line": "            input_data.assignee,"
            },
            {
              "lineno": 514,
              "line": "        )"
            },
            {
              "lineno": 515,
              "line": "        yield \"status\", status"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.assign_issue(\n            credentials,\n            input_data.issue_url,\n            input_data.assignee,\n        )",
              "successors": [
                {
                  "id": 3,
                  "label": "        yield \"status\", status",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 453,
          "end_line": 462,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 453,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 454,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 455,
              "line": "        issue_url: str = SchemaField("
            },
            {
              "lineno": 456,
              "line": "            description=\"URL of the GitHub issue\","
            },
            {
              "lineno": 457,
              "line": "            placeholder=\"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 458,
              "line": "        )"
            },
            {
              "lineno": 459,
              "line": "        assignee: str = SchemaField("
            },
            {
              "lineno": 460,
              "line": "            description=\"Username to assign to the issue\","
            },
            {
              "lineno": 461,
              "line": "            placeholder=\"Enter the username\","
            },
            {
              "lineno": 462,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        assignee: str = SchemaField(\n            description=\"Username to assign to the issue\",\n            placeholder=\"Enter the username\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 464,
          "end_line": 470,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 464,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 465,
              "line": "        status: str = SchemaField("
            },
            {
              "lineno": 466,
              "line": "            description=\"Status of the issue assignment operation\""
            },
            {
              "lineno": 467,
              "line": "        )"
            },
            {
              "lineno": 468,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 469,
              "line": "            description=\"Error message if the issue assignment failed\""
            },
            {
              "lineno": 470,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the issue assignment operation\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the issue assignment failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 452,
          "line": "class GithubAssignIssueBlock(Block):"
        },
        {
          "lineno": 463,
          "line": ""
        },
        {
          "lineno": 471,
          "line": ""
        },
        {
          "lineno": 490,
          "line": ""
        },
        {
          "lineno": 491,
          "line": "    @staticmethod"
        },
        {
          "lineno": 502,
          "line": ""
        },
        {
          "lineno": 516,
          "line": ""
        },
        {
          "lineno": 517,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubAssignIssueBlock(Block):",
          "successors": []
        }
      ]
    },
    {
      "name": "GithubUnassignIssueBlock",
      "type": "class",
      "start_line": 518,
      "end_line": 581,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 538,
          "end_line": 555,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 538,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 539,
              "line": "        super().__init__("
            },
            {
              "lineno": 540,
              "line": "            id=\"d154002a-38f4-46c2-962d-2488f2b05ece\","
            },
            {
              "lineno": 541,
              "line": "            description=\"This block unassigns a user from a specified GitHub issue.\","
            },
            {
              "lineno": 542,
              "line": "            categories={BlockCategory.DEVELOPER_TOOLS},"
            },
            {
              "lineno": 543,
              "line": "            input_schema=GithubUnassignIssueBlock.Input,"
            },
            {
              "lineno": 544,
              "line": "            output_schema=GithubUnassignIssueBlock.Output,"
            },
            {
              "lineno": 545,
              "line": "            test_input={"
            },
            {
              "lineno": 546,
              "line": "                \"issue_url\": \"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 547,
              "line": "                \"assignee\": \"username1\","
            },
            {
              "lineno": 548,
              "line": "                \"credentials\": TEST_CREDENTIALS_INPUT,"
            },
            {
              "lineno": 549,
              "line": "            },"
            },
            {
              "lineno": 550,
              "line": "            test_credentials=TEST_CREDENTIALS,"
            },
            {
              "lineno": 551,
              "line": "            test_output=[(\"status\", \"Issue unassigned successfully\")],"
            },
            {
              "lineno": 552,
              "line": "            test_mock={"
            },
            {
              "lineno": 553,
              "line": "                \"unassign_issue\": lambda *args, **kwargs: \"Issue unassigned successfully\""
            },
            {
              "lineno": 554,
              "line": "            },"
            },
            {
              "lineno": 555,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"d154002a-38f4-46c2-962d-2488f2b05ece\",\n            description=\"This block unassigns a user from a specified GitHub issue.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubUnassignIssueBlock.Input,\n            output_schema=GithubUnassignIssueBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"assignee\": \"username1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Issue unassigned successfully\")],\n            test_mock={\n                \"unassign_issue\": lambda *args, **kwargs: \"Issue unassigned successfully\"\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "unassign_issue",
          "type": "function",
          "start_line": 558,
          "end_line": 567,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 558,
              "line": "    def unassign_issue("
            },
            {
              "lineno": 559,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 560,
              "line": "        issue_url: str,"
            },
            {
              "lineno": 561,
              "line": "        assignee: str,"
            },
            {
              "lineno": 562,
              "line": "    ) -> str:"
            },
            {
              "lineno": 563,
              "line": "        api = get_api(credentials)"
            },
            {
              "lineno": 564,
              "line": "        assignees_url = issue_url + \"/assignees\""
            },
            {
              "lineno": 565,
              "line": "        data = {\"assignees\": [assignee]}"
            },
            {
              "lineno": 566,
              "line": "        api.delete(assignees_url, json=data)"
            },
            {
              "lineno": 567,
              "line": "        return \"Issue unassigned successfully\""
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def unassign_issue(\n        credentials: GithubCredentials,\n        issue_url: str,\n        assignee: str,\n    ) -> str:\n        api = get_api(credentials)\n        assignees_url = issue_url + \"/assignees\"\n        data = {\"assignees\": [assignee]}\n        api.delete(assignees_url, json=data)",
              "successors": [
                {
                  "id": 3,
                  "label": "        return \"Issue unassigned successfully\"",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 569,
          "end_line": 580,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 569,
              "line": "    def run("
            },
            {
              "lineno": 570,
              "line": "        self,"
            },
            {
              "lineno": 571,
              "line": "        input_data: Input,"
            },
            {
              "lineno": 572,
              "line": "        *,"
            },
            {
              "lineno": 573,
              "line": "        credentials: GithubCredentials,"
            },
            {
              "lineno": 574,
              "line": "        **kwargs,"
            },
            {
              "lineno": 575,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 576,
              "line": "        status = self.unassign_issue("
            },
            {
              "lineno": 577,
              "line": "            credentials,"
            },
            {
              "lineno": 578,
              "line": "            input_data.issue_url,"
            },
            {
              "lineno": 579,
              "line": "            input_data.assignee,"
            },
            {
              "lineno": 580,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.unassign_issue(\n            credentials,\n            input_data.issue_url,\n            input_data.assignee,\n        )",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 519,
          "end_line": 528,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 519,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 520,
              "line": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")"
            },
            {
              "lineno": 521,
              "line": "        issue_url: str = SchemaField("
            },
            {
              "lineno": 522,
              "line": "            description=\"URL of the GitHub issue\","
            },
            {
              "lineno": 523,
              "line": "            placeholder=\"https://github.com/owner/repo/issues/1\","
            },
            {
              "lineno": 524,
              "line": "        )"
            },
            {
              "lineno": 525,
              "line": "        assignee: str = SchemaField("
            },
            {
              "lineno": 526,
              "line": "            description=\"Username to unassign from the issue\","
            },
            {
              "lineno": 527,
              "line": "            placeholder=\"Enter the username\","
            },
            {
              "lineno": 528,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        assignee: str = SchemaField(\n            description=\"Username to unassign from the issue\",\n            placeholder=\"Enter the username\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 530,
          "end_line": 536,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 530,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 531,
              "line": "        status: str = SchemaField("
            },
            {
              "lineno": 532,
              "line": "            description=\"Status of the issue unassignment operation\""
            },
            {
              "lineno": 533,
              "line": "        )"
            },
            {
              "lineno": 534,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 535,
              "line": "            description=\"Error message if the issue unassignment failed\""
            },
            {
              "lineno": 536,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the issue unassignment operation\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the issue unassignment failed\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 518,
          "line": "class GithubUnassignIssueBlock(Block):"
        },
        {
          "lineno": 529,
          "line": ""
        },
        {
          "lineno": 537,
          "line": ""
        },
        {
          "lineno": 556,
          "line": ""
        },
        {
          "lineno": 557,
          "line": "    @staticmethod"
        },
        {
          "lineno": 568,
          "line": ""
        },
        {
          "lineno": 581,
          "line": "        yield \"status\", status"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class GithubUnassignIssueBlock(Block):\n@staticmethod",
          "successors": [
            {
              "id": 3,
              "label": "yield \"status\", status",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from urllib.parse import urlparse"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from typing_extensions import TypedDict"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 6,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": "from ._api import get_api"
    },
    {
      "lineno": 9,
      "line": "from ._auth import ("
    },
    {
      "lineno": 10,
      "line": "    TEST_CREDENTIALS,"
    },
    {
      "lineno": 11,
      "line": "    TEST_CREDENTIALS_INPUT,"
    },
    {
      "lineno": 12,
      "line": "    GithubCredentials,"
    },
    {
      "lineno": 13,
      "line": "    GithubCredentialsField,"
    },
    {
      "lineno": 14,
      "line": "    GithubCredentialsInput,"
    },
    {
      "lineno": 15,
      "line": ")"
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 17,
      "line": ""
    },
    {
      "lineno": 20,
      "line": ""
    },
    {
      "lineno": 21,
      "line": ""
    },
    {
      "lineno": 22,
      "line": "# --8<-- [start:GithubCommentBlockExample]"
    },
    {
      "lineno": 107,
      "line": ""
    },
    {
      "lineno": 108,
      "line": "# --8<-- [end:GithubCommentBlockExample]"
    },
    {
      "lineno": 109,
      "line": ""
    },
    {
      "lineno": 110,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from urllib.parse import urlparse\n\nfrom typing_extensions import TypedDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\nfrom ._api import get_api\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)",
      "successors": []
    }
  ]
}