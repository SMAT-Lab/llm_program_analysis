{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 26,
  "functions": [
    {
      "name": "example_function",
      "type": "function",
      "start_line": 7,
      "end_line": 9,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 7,
          "line": "def example_function(a: int, b: int, c: int) -> int:"
        },
        {
          "lineno": 8,
          "line": "    time.sleep(0.5)"
        },
        {
          "lineno": 9,
          "line": "    return a + b + c"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def example_function(a: int, b: int, c: int) -> int:\n    time.sleep(0.5)",
          "successors": [
            {
              "id": 3,
              "label": "    return a + b + c",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "example_function_with_error",
      "type": "function",
      "start_line": 13,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 13,
          "line": "def example_function_with_error(a: int, b: int, c: int) -> int:"
        },
        {
          "lineno": 14,
          "line": "    raise ValueError(\"This is a test error\")"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def example_function_with_error(a: int, b: int, c: int) -> int:\nraise ValueError(\"This is a test error\")",
          "successors": []
        }
      ]
    },
    {
      "name": "test_timer_decorator",
      "type": "function",
      "start_line": 17,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 17,
          "line": "def test_timer_decorator():"
        },
        {
          "lineno": 18,
          "line": "    info, res = example_function(1, 2, 3)"
        },
        {
          "lineno": 19,
          "line": "    assert info.cpu_time >= 0"
        },
        {
          "lineno": 20,
          "line": "    assert info.wall_time >= 0.4"
        },
        {
          "lineno": 21,
          "line": "    assert res == 6"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_timer_decorator():\n    info, res = example_function(1, 2, 3)\n    assert info.cpu_time >= 0\n    assert info.wall_time >= 0.4\n    assert res == 6",
          "successors": []
        }
      ]
    },
    {
      "name": "test_error_decorator",
      "type": "function",
      "start_line": 24,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 24,
          "line": "def test_error_decorator():"
        },
        {
          "lineno": 25,
          "line": "    res = example_function_with_error(1, 2, 3)"
        },
        {
          "lineno": 26,
          "line": "    assert res is None"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def test_error_decorator():\n    res = example_function_with_error(1, 2, 3)\n    assert res is None",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import time"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from backend.util.decorator import error_logged, time_measured"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "@time_measured"
    },
    {
      "lineno": 10,
      "line": ""
    },
    {
      "lineno": 11,
      "line": ""
    },
    {
      "lineno": 12,
      "line": "@error_logged"
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 22,
      "line": ""
    },
    {
      "lineno": 23,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import time\n\nfrom backend.util.decorator import error_logged, time_measured",
      "successors": []
    }
  ]
}