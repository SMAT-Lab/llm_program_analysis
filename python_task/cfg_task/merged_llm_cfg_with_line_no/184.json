{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 43,
  "functions": [],
  "classes": [
    {
      "name": "ConnectionManager",
      "type": "class",
      "start_line": 9,
      "end_line": 43,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 10,
          "end_line": 12,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 10,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 11,
              "line": "        self.active_connections: Set[WebSocket] = set()"
            },
            {
              "lineno": 12,
              "line": "        self.subscriptions: Dict[str, Set[WebSocket]] = {}"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        self.active_connections: Set[WebSocket] = set()\n        self.subscriptions: Dict[str, Set[WebSocket]] = {}",
              "successors": []
            }
          ]
        },
        {
          "name": "connect",
          "type": "function",
          "start_line": 14,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 14,
              "line": "    async def connect(self, websocket: WebSocket):"
            },
            {
              "lineno": 15,
              "line": "        await websocket.accept()"
            },
            {
              "lineno": 16,
              "line": "        self.active_connections.add(websocket)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.add(websocket)",
              "successors": []
            }
          ]
        },
        {
          "name": "disconnect",
          "type": "function",
          "start_line": 18,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    def disconnect(self, websocket: WebSocket):"
            },
            {
              "lineno": 19,
              "line": "        self.active_connections.remove(websocket)"
            },
            {
              "lineno": 20,
              "line": "        for subscribers in self.subscriptions.values():"
            },
            {
              "lineno": 21,
              "line": "            subscribers.discard(websocket)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)",
              "successors": [
                {
                  "id": 2,
                  "label": "        for subscribers in self.subscriptions.values():\n            subscribers.discard(websocket)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "subscribe",
          "type": "function",
          "start_line": 23,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 23,
              "line": "    async def subscribe(self, graph_id: str, websocket: WebSocket):"
            },
            {
              "lineno": 24,
              "line": "        if graph_id not in self.subscriptions:"
            },
            {
              "lineno": 25,
              "line": "            self.subscriptions[graph_id] = set()"
            },
            {
              "lineno": 26,
              "line": "        self.subscriptions[graph_id].add(websocket)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def subscribe(self, graph_id: str, websocket: WebSocket):",
              "successors": [
                {
                  "id": 2,
                  "label": "        if graph_id not in self.subscriptions:\n            self.subscriptions[graph_id] = set()",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "        self.subscriptions[graph_id].add(websocket)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "unsubscribe",
          "type": "function",
          "start_line": 28,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 28,
              "line": "    async def unsubscribe(self, graph_id: str, websocket: WebSocket):"
            },
            {
              "lineno": 29,
              "line": "        if graph_id in self.subscriptions:"
            },
            {
              "lineno": 30,
              "line": "            self.subscriptions[graph_id].discard(websocket)"
            },
            {
              "lineno": 31,
              "line": "            if not self.subscriptions[graph_id]:"
            },
            {
              "lineno": 32,
              "line": "                del self.subscriptions[graph_id]"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id in self.subscriptions:\n            self.subscriptions[graph_id].discard(websocket)",
              "successors": [
                {
                  "id": 3,
                  "label": "            if not self.subscriptions[graph_id]:\n                del self.subscriptions[graph_id]",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "send_execution_result",
          "type": "function",
          "start_line": 34,
          "end_line": 43,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    async def send_execution_result(self, result: execution.ExecutionResult):"
            },
            {
              "lineno": 35,
              "line": "        graph_id = result.graph_id"
            },
            {
              "lineno": 36,
              "line": "        if graph_id in self.subscriptions:"
            },
            {
              "lineno": 37,
              "line": "            message = WsMessage("
            },
            {
              "lineno": 38,
              "line": "                method=Methods.EXECUTION_EVENT,"
            },
            {
              "lineno": 39,
              "line": "                channel=graph_id,"
            },
            {
              "lineno": 40,
              "line": "                data=result.model_dump(),"
            },
            {
              "lineno": 41,
              "line": "            ).model_dump_json()"
            },
            {
              "lineno": 42,
              "line": "            for connection in self.subscriptions[graph_id]:"
            },
            {
              "lineno": 43,
              "line": "                await connection.send_text(message)"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    async def send_execution_result(self, result: execution.ExecutionResult):\n        graph_id = result.graph_id\n        if graph_id in self.subscriptions:",
              "successors": [
                {
                  "id": 3,
                  "label": "            message = WsMessage(\n                method=Methods.EXECUTION_EVENT,\n                channel=graph_id,\n                data=result.model_dump(),\n            ).model_dump_json()",
                  "successors": [
                    {
                      "id": 4,
                      "label": "            for connection in self.subscriptions[graph_id]:\n                await connection.send_text(message)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 9,
          "line": "class ConnectionManager:"
        },
        {
          "lineno": 13,
          "line": ""
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 27,
          "line": ""
        },
        {
          "lineno": 33,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class ConnectionManager:",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from typing import Dict, Set"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from fastapi import WebSocket"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from backend.data import execution"
    },
    {
      "lineno": 6,
      "line": "from backend.server.model import Methods, WsMessage"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": ""
    }
  ],
  "blocks": []
}