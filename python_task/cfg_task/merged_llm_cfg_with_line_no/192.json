{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 124,
  "functions": [],
  "classes": [
    {
      "name": "Operation",
      "type": "class",
      "start_line": 9,
      "end_line": 14,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 9,
          "line": "class Operation(Enum):"
        },
        {
          "lineno": 10,
          "line": "    ADD = \"Add\""
        },
        {
          "lineno": 11,
          "line": "    SUBTRACT = \"Subtract\""
        },
        {
          "lineno": 12,
          "line": "    MULTIPLY = \"Multiply\""
        },
        {
          "lineno": 13,
          "line": "    DIVIDE = \"Divide\""
        },
        {
          "lineno": 14,
          "line": "    POWER = \"Power\""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class Operation(Enum):\n    ADD = \"Add\"\n    SUBTRACT = \"Subtract\"\n    MULTIPLY = \"Multiply\"\n    DIVIDE = \"Divide\"\n    POWER = \"Power\"",
          "successors": []
        }
      ]
    },
    {
      "name": "CalculatorBlock",
      "type": "class",
      "start_line": 17,
      "end_line": 84,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 37,
          "end_line": 53,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 37,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 38,
              "line": "        super().__init__("
            },
            {
              "lineno": 39,
              "line": "            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\","
            },
            {
              "lineno": 40,
              "line": "            input_schema=CalculatorBlock.Input,"
            },
            {
              "lineno": 41,
              "line": "            output_schema=CalculatorBlock.Output,"
            },
            {
              "lineno": 42,
              "line": "            description=\"Performs a mathematical operation on two numbers.\","
            },
            {
              "lineno": 43,
              "line": "            categories={BlockCategory.LOGIC},"
            },
            {
              "lineno": 44,
              "line": "            test_input={"
            },
            {
              "lineno": 45,
              "line": "                \"operation\": Operation.ADD.value,"
            },
            {
              "lineno": 46,
              "line": "                \"a\": 10.0,"
            },
            {
              "lineno": 47,
              "line": "                \"b\": 5.0,"
            },
            {
              "lineno": 48,
              "line": "                \"round_result\": False,"
            },
            {
              "lineno": 49,
              "line": "            },"
            },
            {
              "lineno": 50,
              "line": "            test_output=["
            },
            {
              "lineno": 51,
              "line": "                (\"result\", 15.0),"
            },
            {
              "lineno": 52,
              "line": "            ],"
            },
            {
              "lineno": 53,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 55,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 55,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 56,
              "line": "        operation = input_data.operation"
            },
            {
              "lineno": 57,
              "line": "        a = input_data.a"
            },
            {
              "lineno": 58,
              "line": "        b = input_data.b"
            },
            {
              "lineno": 59,
              "line": ""
            },
            {
              "lineno": 60,
              "line": "        operations = {"
            },
            {
              "lineno": 61,
              "line": "            Operation.ADD: operator.add,"
            },
            {
              "lineno": 62,
              "line": "            Operation.SUBTRACT: operator.sub,"
            },
            {
              "lineno": 63,
              "line": "            Operation.MULTIPLY: operator.mul,"
            },
            {
              "lineno": 64,
              "line": "            Operation.DIVIDE: operator.truediv,"
            },
            {
              "lineno": 65,
              "line": "            Operation.POWER: operator.pow,"
            },
            {
              "lineno": 66,
              "line": "        }"
            },
            {
              "lineno": 67,
              "line": ""
            },
            {
              "lineno": 68,
              "line": "        op_func = operations[operation]"
            },
            {
              "lineno": 69,
              "line": ""
            },
            {
              "lineno": 70,
              "line": "        try:"
            },
            {
              "lineno": 71,
              "line": "            if operation == Operation.DIVIDE and b == 0:"
            },
            {
              "lineno": 72,
              "line": "                raise ZeroDivisionError(\"Cannot divide by zero\")"
            },
            {
              "lineno": 73,
              "line": ""
            },
            {
              "lineno": 74,
              "line": "            result = op_func(a, b)"
            },
            {
              "lineno": 75,
              "line": ""
            },
            {
              "lineno": 76,
              "line": "            if input_data.round_result:"
            },
            {
              "lineno": 77,
              "line": "                result = round(result)"
            },
            {
              "lineno": 78,
              "line": ""
            },
            {
              "lineno": 79,
              "line": "            yield \"result\", result"
            },
            {
              "lineno": 80,
              "line": ""
            },
            {
              "lineno": 81,
              "line": "        except ZeroDivisionError:"
            },
            {
              "lineno": 82,
              "line": "            yield \"result\", float(\"inf\")  # Return infinity for division by zero"
            },
            {
              "lineno": 83,
              "line": "        except Exception:"
            },
            {
              "lineno": 84,
              "line": "            yield \"result\", float(\"nan\")  # Return NaN for other errors"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    operation = input_data.operation\n    a = input_data.a\n    b = input_data.b\noperations = {\n    Operation.ADD: operator.add,\n    Operation.SUBTRACT: operator.sub,\n    Operation.MULTIPLY: operator.mul,\n    Operation.DIVIDE: operator.truediv,\n    Operation.POWER: operator.pow,\n}",
              "successors": [
                {
                  "id": 3,
                  "label": "op_func = operations[operation]\ntry:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if operation == Operation.DIVIDE and b == 0:\n    raise ZeroDivisionError(\"Cannot divide by zero\")\nresult = op_func(a, b)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "if input_data.round_result:\n    result = round(result)\nyield \"result\", result",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "except ZeroDivisionError:\n    yield \"result\", float(\"inf\")  # Return infinity for division by zero",
                      "successors": []
                    },
                    {
                      "id": 10,
                      "label": "except Exception:\n    yield \"result\", float(\"nan\")  # Return NaN for other errors",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 18,
          "end_line": 32,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 19,
              "line": "        operation: Operation = SchemaField("
            },
            {
              "lineno": 20,
              "line": "            description=\"Choose the math operation you want to perform\","
            },
            {
              "lineno": 21,
              "line": "            placeholder=\"Select an operation\","
            },
            {
              "lineno": 22,
              "line": "        )"
            },
            {
              "lineno": 23,
              "line": "        a: float = SchemaField("
            },
            {
              "lineno": 24,
              "line": "            description=\"Enter the first number (A)\", placeholder=\"For example: 10\""
            },
            {
              "lineno": 25,
              "line": "        )"
            },
            {
              "lineno": 26,
              "line": "        b: float = SchemaField("
            },
            {
              "lineno": 27,
              "line": "            description=\"Enter the second number (B)\", placeholder=\"For example: 5\""
            },
            {
              "lineno": 28,
              "line": "        )"
            },
            {
              "lineno": 29,
              "line": "        round_result: bool = SchemaField("
            },
            {
              "lineno": 30,
              "line": "            description=\"Do you want to round the result to a whole number?\","
            },
            {
              "lineno": 31,
              "line": "            default=False,"
            },
            {
              "lineno": 32,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 34,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 34,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 35,
              "line": "        result: float = SchemaField(description=\"The result of your calculation\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 17,
          "line": "class CalculatorBlock(Block):"
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 36,
          "line": ""
        },
        {
          "lineno": 54,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class CalculatorBlock(Block):\n",
          "successors": [
            {
              "id": 3,
              "label": "\n",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "CountItemsBlock",
      "type": "class",
      "start_line": 87,
      "end_line": 124,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 97,
          "end_line": 108,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 97,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 98,
              "line": "        super().__init__("
            },
            {
              "lineno": 99,
              "line": "            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\","
            },
            {
              "lineno": 100,
              "line": "            input_schema=CountItemsBlock.Input,"
            },
            {
              "lineno": 101,
              "line": "            output_schema=CountItemsBlock.Output,"
            },
            {
              "lineno": 102,
              "line": "            description=\"Counts the number of items in a collection.\","
            },
            {
              "lineno": 103,
              "line": "            categories={BlockCategory.LOGIC},"
            },
            {
              "lineno": 104,
              "line": "            test_input={\"collection\": [1, 2, 3, 4, 5]},"
            },
            {
              "lineno": 105,
              "line": "            test_output=["
            },
            {
              "lineno": 106,
              "line": "                (\"count\", 5),"
            },
            {
              "lineno": 107,
              "line": "            ],"
            },
            {
              "lineno": 108,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 110,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 110,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 111,
              "line": "        collection = input_data.collection"
            },
            {
              "lineno": 112,
              "line": ""
            },
            {
              "lineno": 113,
              "line": "        try:"
            },
            {
              "lineno": 114,
              "line": "            if isinstance(collection, (str, list, tuple, set, dict)):"
            },
            {
              "lineno": 115,
              "line": "                count = len(collection)"
            },
            {
              "lineno": 116,
              "line": "            elif hasattr(collection, \"__iter__\"):"
            },
            {
              "lineno": 117,
              "line": "                count = sum(1 for _ in collection)"
            },
            {
              "lineno": 118,
              "line": "            else:"
            },
            {
              "lineno": 119,
              "line": "                raise ValueError(\"Input is not a countable collection\")"
            },
            {
              "lineno": 120,
              "line": ""
            },
            {
              "lineno": 121,
              "line": "            yield \"count\", count"
            },
            {
              "lineno": 122,
              "line": ""
            },
            {
              "lineno": 123,
              "line": "        except Exception:"
            },
            {
              "lineno": 124,
              "line": "            yield \"count\", -1  # Return -1 to indicate an error"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n\n        try:",
              "successors": [
                {
                  "id": 2,
                  "label": "            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            yield \"count\", count",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            yield \"count\", count",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "            else:\n                raise ValueError(\"Input is not a countable collection\")\n            yield \"count\", count",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 88,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 88,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 89,
              "line": "        collection: Any = SchemaField("
            },
            {
              "lineno": 90,
              "line": "            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\","
            },
            {
              "lineno": 91,
              "line": "            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\","
            },
            {
              "lineno": 92,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 94,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 94,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 95,
              "line": "        count: int = SchemaField(description=\"The number of items in the collection\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 87,
          "line": "class CountItemsBlock(Block):"
        },
        {
          "lineno": 93,
          "line": ""
        },
        {
          "lineno": 96,
          "line": ""
        },
        {
          "lineno": 109,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "import operator"
    },
    {
      "lineno": 2,
      "line": "from enum import Enum"
    },
    {
      "lineno": 3,
      "line": "from typing import Any"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 6,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 7,
      "line": ""
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 15,
      "line": ""
    },
    {
      "lineno": 16,
      "line": ""
    },
    {
      "lineno": 85,
      "line": ""
    },
    {
      "lineno": 86,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "import operator\nfrom enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n",
      "successors": [
        {
          "id": 3,
          "label": "\n",
          "successors": [
            {
              "id": 5,
              "label": "\n",
              "successors": [
                {
                  "id": 7,
                  "label": "",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}