{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 59,
  "functions": [],
  "classes": [
    {
      "name": "FactCheckerBlock",
      "type": "class",
      "start_line": 14,
      "end_line": 59,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 29,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 29,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 30,
              "line": "        super().__init__("
            },
            {
              "lineno": 31,
              "line": "            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\","
            },
            {
              "lineno": 32,
              "line": "            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\","
            },
            {
              "lineno": 33,
              "line": "            categories={BlockCategory.SEARCH},"
            },
            {
              "lineno": 34,
              "line": "            input_schema=FactCheckerBlock.Input,"
            },
            {
              "lineno": 35,
              "line": "            output_schema=FactCheckerBlock.Output,"
            },
            {
              "lineno": 36,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 38,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 38,
              "line": "    def run("
            },
            {
              "lineno": 39,
              "line": "        self, input_data: Input, *, credentials: JinaCredentials, **kwargs"
            },
            {
              "lineno": 40,
              "line": "    ) -> BlockOutput:"
            },
            {
              "lineno": 41,
              "line": "        encoded_statement = quote(input_data.statement)"
            },
            {
              "lineno": 42,
              "line": "        url = f\"https://g.jina.ai/{encoded_statement}\""
            },
            {
              "lineno": 43,
              "line": ""
            },
            {
              "lineno": 44,
              "line": "        headers = {"
            },
            {
              "lineno": 45,
              "line": "            \"Accept\": \"application/json\","
            },
            {
              "lineno": 46,
              "line": "            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\","
            },
            {
              "lineno": 47,
              "line": "        }"
            },
            {
              "lineno": 48,
              "line": ""
            },
            {
              "lineno": 49,
              "line": "        response = requests.get(url, headers=headers)"
            },
            {
              "lineno": 50,
              "line": "        response.raise_for_status()"
            },
            {
              "lineno": 51,
              "line": "        data = response.json()"
            },
            {
              "lineno": 52,
              "line": ""
            },
            {
              "lineno": 53,
              "line": "        if \"data\" in data:"
            },
            {
              "lineno": 54,
              "line": "            data = data[\"data\"]"
            },
            {
              "lineno": 55,
              "line": "            yield \"factuality\", data[\"factuality\"]"
            },
            {
              "lineno": 56,
              "line": "            yield \"result\", data[\"result\"]"
            },
            {
              "lineno": 57,
              "line": "            yield \"reason\", data[\"reason\"]"
            },
            {
              "lineno": 58,
              "line": "        else:"
            },
            {
              "lineno": 59,
              "line": "            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "def run(\n    self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n) -> BlockOutput:\n    encoded_statement = quote(input_data.statement)\n    url = f\"https://g.jina.ai/{encoded_statement}\"\n\n    headers = {\n        \"Accept\": \"application/json\",\n        \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n    }\n\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n    data = response.json()",
              "successors": [
                {
                  "id": 2,
                  "label": "if \"data\" in data:\n    data = data[\"data\"]\n    yield \"factuality\", data[\"factuality\"]\n    yield \"result\", data[\"result\"]\n    yield \"reason\", data[\"reason\"]",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "else:\n    raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 15,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 15,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 16,
              "line": "        statement: str = SchemaField("
            },
            {
              "lineno": 17,
              "line": "            description=\"The statement to check for factuality\""
            },
            {
              "lineno": 18,
              "line": "        )"
            },
            {
              "lineno": 19,
              "line": "        credentials: JinaCredentialsInput = JinaCredentialsField()"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )\n        credentials: JinaCredentialsInput = JinaCredentialsField()",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 21,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 21,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 22,
              "line": "        factuality: float = SchemaField("
            },
            {
              "lineno": 23,
              "line": "            description=\"The factuality score of the statement\""
            },
            {
              "lineno": 24,
              "line": "        )"
            },
            {
              "lineno": 25,
              "line": "        result: bool = SchemaField(description=\"The result of the factuality check\")"
            },
            {
              "lineno": 26,
              "line": "        reason: str = SchemaField(description=\"The reason for the factuality result\")"
            },
            {
              "lineno": 27,
              "line": "        error: str = SchemaField(description=\"Error message if the check fails\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )\n        result: bool = SchemaField(description=\"The result of the factuality check\")\n        reason: str = SchemaField(description=\"The reason for the factuality result\")\n        error: str = SchemaField(description=\"Error message if the check fails\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 14,
          "line": "class FactCheckerBlock(Block):"
        },
        {
          "lineno": 20,
          "line": ""
        },
        {
          "lineno": 28,
          "line": ""
        },
        {
          "lineno": 37,
          "line": ""
        }
      ],
      "blocks": []
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from urllib.parse import quote"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "import requests"
    },
    {
      "lineno": 4,
      "line": ""
    },
    {
      "lineno": 5,
      "line": "from backend.blocks.jina._auth import ("
    },
    {
      "lineno": 6,
      "line": "    JinaCredentials,"
    },
    {
      "lineno": 7,
      "line": "    JinaCredentialsField,"
    },
    {
      "lineno": 8,
      "line": "    JinaCredentialsInput,"
    },
    {
      "lineno": 9,
      "line": ")"
    },
    {
      "lineno": 10,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 11,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 12,
      "line": ""
    },
    {
      "lineno": 13,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from urllib.parse import quote\n\nimport requests\n\nfrom backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n",
      "successors": []
    }
  ]
}