{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 90,
  "functions": [],
  "classes": [
    {
      "name": "TranscribeYoutubeVideoBlock",
      "type": "class",
      "start_line": 10,
      "end_line": 90,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 25,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 25,
              "line": "    def __init__(self):"
            },
            {
              "lineno": 26,
              "line": "        super().__init__("
            },
            {
              "lineno": 27,
              "line": "            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\","
            },
            {
              "lineno": 28,
              "line": "            input_schema=TranscribeYoutubeVideoBlock.Input,"
            },
            {
              "lineno": 29,
              "line": "            output_schema=TranscribeYoutubeVideoBlock.Output,"
            },
            {
              "lineno": 30,
              "line": "            description=\"Transcribes a YouTube video.\","
            },
            {
              "lineno": 31,
              "line": "            categories={BlockCategory.SOCIAL},"
            },
            {
              "lineno": 32,
              "line": "            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},"
            },
            {
              "lineno": 33,
              "line": "            test_output=["
            },
            {
              "lineno": 34,
              "line": "                (\"video_id\", \"dQw4w9WgXcQ\"),"
            },
            {
              "lineno": 35,
              "line": "                ("
            },
            {
              "lineno": 36,
              "line": "                    \"transcript\","
            },
            {
              "lineno": 37,
              "line": "                    \"Never gonna give you up\\nNever gonna let you down\","
            },
            {
              "lineno": 38,
              "line": "                ),"
            },
            {
              "lineno": 39,
              "line": "            ],"
            },
            {
              "lineno": 40,
              "line": "            test_mock={"
            },
            {
              "lineno": 41,
              "line": "                \"get_transcript\": lambda video_id: ["
            },
            {
              "lineno": 42,
              "line": "                    {\"text\": \"Never gonna give you up\"},"
            },
            {
              "lineno": 43,
              "line": "                    {\"text\": \"Never gonna let you down\"},"
            },
            {
              "lineno": 44,
              "line": "                ],"
            },
            {
              "lineno": 45,
              "line": "            },"
            },
            {
              "lineno": 46,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "extract_video_id",
          "type": "function",
          "start_line": 49,
          "end_line": 61,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 49,
              "line": "    def extract_video_id(url: str) -> str:"
            },
            {
              "lineno": 50,
              "line": "        parsed_url = urlparse(url)"
            },
            {
              "lineno": 51,
              "line": "        if parsed_url.netloc == \"youtu.be\":"
            },
            {
              "lineno": 52,
              "line": "            return parsed_url.path[1:]"
            },
            {
              "lineno": 53,
              "line": "        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):"
            },
            {
              "lineno": 54,
              "line": "            if parsed_url.path == \"/watch\":"
            },
            {
              "lineno": 55,
              "line": "                p = parse_qs(parsed_url.query)"
            },
            {
              "lineno": 56,
              "line": "                return p[\"v\"][0]"
            },
            {
              "lineno": 57,
              "line": "            if parsed_url.path[:7] == \"/embed/\":"
            },
            {
              "lineno": 58,
              "line": "                return parsed_url.path.split(\"/\")[2]"
            },
            {
              "lineno": 59,
              "line": "            if parsed_url.path[:3] == \"/v/\":"
            },
            {
              "lineno": 60,
              "line": "                return parsed_url.path.split(\"/\")[2]"
            },
            {
              "lineno": 61,
              "line": "        raise ValueError(f\"Invalid YouTube URL: {url}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def extract_video_id(url: str) -> str:\n        parsed_url = urlparse(url)\n        if parsed_url.netloc == \"youtu.be\":",
              "successors": [
                {
                  "id": 3,
                  "label": "            return parsed_url.path[1:]",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):",
                  "successors": [
                    {
                      "id": 5,
                      "label": "            if parsed_url.path == \"/watch\":\n                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "            if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "            if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 11,
                  "label": "        raise ValueError(f\"Invalid YouTube URL: {url}\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "get_transcript",
          "type": "function",
          "start_line": 64,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 64,
              "line": "    def get_transcript(video_id: str):"
            },
            {
              "lineno": 65,
              "line": "        try:"
            },
            {
              "lineno": 66,
              "line": "            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)"
            },
            {
              "lineno": 67,
              "line": ""
            },
            {
              "lineno": 68,
              "line": "            if not transcript_list:"
            },
            {
              "lineno": 69,
              "line": "                raise ValueError(f\"No transcripts found for the video: {video_id}\")"
            },
            {
              "lineno": 70,
              "line": ""
            },
            {
              "lineno": 71,
              "line": "            for transcript in transcript_list:"
            },
            {
              "lineno": 72,
              "line": "                first_transcript = transcript_list.find_transcript("
            },
            {
              "lineno": 73,
              "line": "                    [transcript.language_code]"
            },
            {
              "lineno": 74,
              "line": "                )"
            },
            {
              "lineno": 75,
              "line": "                return YouTubeTranscriptApi.get_transcript("
            },
            {
              "lineno": 76,
              "line": "                    video_id, languages=[first_transcript.language_code]"
            },
            {
              "lineno": 77,
              "line": "                )"
            },
            {
              "lineno": 78,
              "line": ""
            },
            {
              "lineno": 79,
              "line": "        except Exception:"
            },
            {
              "lineno": 80,
              "line": "            raise ValueError(f\"No transcripts found for the video: {video_id}\")"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def get_transcript(video_id: str):",
              "successors": [
                {
                  "id": 2,
                  "label": "        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n            if not transcript_list:",
                  "successors": [
                    {
                      "id": 4,
                      "label": "                raise ValueError(f\"No transcripts found for the video: {video_id}\")",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "            for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript([\n                    transcript.language_code\n                ])\n                return YouTubeTranscriptApi.get_transcript(\n                    video_id, languages=[first_transcript.language_code]\n                )",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "        except Exception:\n            raise ValueError(f\"No transcripts found for the video: {video_id}\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 82,
          "end_line": 90,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 82,
              "line": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:"
            },
            {
              "lineno": 83,
              "line": "        video_id = self.extract_video_id(input_data.youtube_url)"
            },
            {
              "lineno": 84,
              "line": "        yield \"video_id\", video_id"
            },
            {
              "lineno": 85,
              "line": ""
            },
            {
              "lineno": 86,
              "line": "        transcript = self.get_transcript(video_id)"
            },
            {
              "lineno": 87,
              "line": "        formatter = TextFormatter()"
            },
            {
              "lineno": 88,
              "line": "        transcript_text = formatter.format_transcript(transcript)"
            },
            {
              "lineno": 89,
              "line": ""
            },
            {
              "lineno": 90,
              "line": "        yield \"transcript\", transcript_text"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        video_id = self.extract_video_id(input_data.youtube_url)\n        yield \"video_id\", video_id\n        transcript = self.get_transcript(video_id)\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript)\n\n        yield \"transcript\", transcript_text",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 11,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 11,
              "line": "    class Input(BlockSchema):"
            },
            {
              "lineno": 12,
              "line": "        youtube_url: str = SchemaField("
            },
            {
              "lineno": 13,
              "line": "            title=\"YouTube URL\","
            },
            {
              "lineno": 14,
              "line": "            description=\"The URL of the YouTube video to transcribe\","
            },
            {
              "lineno": 15,
              "line": "            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\","
            },
            {
              "lineno": 16,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 18,
          "end_line": 23,
          "functions": [],
          "classes": [],
          "simplified_code": [
            {
              "lineno": 18,
              "line": "    class Output(BlockSchema):"
            },
            {
              "lineno": 19,
              "line": "        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")"
            },
            {
              "lineno": 20,
              "line": "        transcript: str = SchemaField(description=\"The transcribed text of the video\")"
            },
            {
              "lineno": 21,
              "line": "        error: str = SchemaField("
            },
            {
              "lineno": 22,
              "line": "            description=\"Any error message if the transcription fails\""
            },
            {
              "lineno": 23,
              "line": "        )"
            }
          ],
          "blocks": [
            {
              "id": 1,
              "label": "    class Output(BlockSchema):\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "class TranscribeYoutubeVideoBlock(Block):"
        },
        {
          "lineno": 17,
          "line": ""
        },
        {
          "lineno": 24,
          "line": ""
        },
        {
          "lineno": 47,
          "line": ""
        },
        {
          "lineno": 48,
          "line": "    @staticmethod"
        },
        {
          "lineno": 62,
          "line": ""
        },
        {
          "lineno": 63,
          "line": "    @staticmethod"
        },
        {
          "lineno": 81,
          "line": ""
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "class TranscribeYoutubeVideoBlock(Block):",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "from urllib.parse import parse_qs, urlparse"
    },
    {
      "lineno": 2,
      "line": ""
    },
    {
      "lineno": 3,
      "line": "from youtube_transcript_api import YouTubeTranscriptApi"
    },
    {
      "lineno": 4,
      "line": "from youtube_transcript_api.formatters import TextFormatter"
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema"
    },
    {
      "lineno": 7,
      "line": "from backend.data.model import SchemaField"
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": ""
    }
  ],
  "blocks": [
    {
      "id": 1,
      "label": "from urllib.parse import parse_qs, urlparse\n\nfrom youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.formatters import TextFormatter\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n",
      "successors": []
    }
  ]
}