{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 71,
  "functions": [
    {
      "name": "backtrack",
      "type": "function",
      "start_line": 10,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 10,
          "line": "def backtrack(input_string: str, word_dict: set[str], start: int) -> bool:"
        },
        {
          "lineno": 11,
          "line": "    \"\"\""
        },
        {
          "lineno": 12,
          "line": "    Helper function that uses backtracking to determine if a valid"
        },
        {
          "lineno": 13,
          "line": "    word segmentation is possible starting from index 'start'."
        },
        {
          "lineno": 14,
          "line": ""
        },
        {
          "lineno": 15,
          "line": "    Parameters:"
        },
        {
          "lineno": 16,
          "line": "    input_string (str): The input string to be segmented."
        },
        {
          "lineno": 17,
          "line": "    word_dict (set[str]): A set of valid dictionary words."
        },
        {
          "lineno": 18,
          "line": "    start (int): The starting index of the substring to be checked."
        },
        {
          "lineno": 19,
          "line": ""
        },
        {
          "lineno": 20,
          "line": "    Returns:"
        },
        {
          "lineno": 21,
          "line": "    bool: True if a valid segmentation is possible, otherwise False."
        },
        {
          "lineno": 22,
          "line": ""
        },
        {
          "lineno": 23,
          "line": "    Example:"
        },
        {
          "lineno": 24,
          "line": "    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)"
        },
        {
          "lineno": 25,
          "line": "    True"
        },
        {
          "lineno": 26,
          "line": ""
        },
        {
          "lineno": 27,
          "line": "    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)"
        },
        {
          "lineno": 28,
          "line": "    True"
        },
        {
          "lineno": 29,
          "line": ""
        },
        {
          "lineno": 30,
          "line": "    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)"
        },
        {
          "lineno": 31,
          "line": "    False"
        },
        {
          "lineno": 32,
          "line": "    \"\"\""
        },
        {
          "lineno": 33,
          "line": ""
        },
        {
          "lineno": 34,
          "line": "    # Base case: if the starting index has reached the end of the string"
        },
        {
          "lineno": 35,
          "line": "    if start == len(input_string):"
        },
        {
          "lineno": 36,
          "line": "        return True"
        },
        {
          "lineno": 37,
          "line": ""
        },
        {
          "lineno": 38,
          "line": "    # Try every possible substring from 'start' to 'end'"
        },
        {
          "lineno": 39,
          "line": "    for end in range(start + 1, len(input_string) + 1):"
        },
        {
          "lineno": 40,
          "line": "        if input_string[start:end] in word_dict and backtrack("
        },
        {
          "lineno": 41,
          "line": "            input_string, word_dict, end"
        },
        {
          "lineno": 42,
          "line": "        ):"
        },
        {
          "lineno": 43,
          "line": "            return True"
        },
        {
          "lineno": 44,
          "line": ""
        },
        {
          "lineno": 45,
          "line": "    return False"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def backtrack(input_string: str, word_dict: set[str], start: int) -> bool:\n    \"\"\"\n    Helper function that uses backtracking to determine if a valid\n    word segmentation is possible starting from index 'start'.\n\n    Parameters:\n    input_string (str): The input string to be segmented.\n    word_dict (set[str]): A set of valid dictionary words.\n    start (int): The starting index of the substring to be checked.\n\n    Returns:\n    bool: True if a valid segmentation is possible, otherwise False.\n\n    Example:\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\n    True\n\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\n    True\n\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\n    False\n    \"\"\"\n\n    # Base case: if the starting index has reached the end of the string\nif start == len(input_string):\n    return True",
          "successors": [
            {
              "id": 3,
              "label": "for end in range(start + 1, len(input_string) + 1):\n    if input_string[start:end] in word_dict and backtrack(\n        input_string, word_dict, end\n    ):\n        return True\n\nreturn False",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "word_break",
      "type": "function",
      "start_line": 48,
      "end_line": 71,
      "functions": [],
      "classes": [],
      "simplified_code": [
        {
          "lineno": 48,
          "line": "def word_break(input_string: str, word_dict: set[str]) -> bool:"
        },
        {
          "lineno": 49,
          "line": "    \"\"\""
        },
        {
          "lineno": 50,
          "line": "    Determines if the input string can be segmented into a sequence of"
        },
        {
          "lineno": 51,
          "line": "    valid dictionary words using backtracking."
        },
        {
          "lineno": 52,
          "line": ""
        },
        {
          "lineno": 53,
          "line": "    Parameters:"
        },
        {
          "lineno": 54,
          "line": "    input_string (str): The input string to segment."
        },
        {
          "lineno": 55,
          "line": "    word_dict (set[str]): The set of valid words."
        },
        {
          "lineno": 56,
          "line": ""
        },
        {
          "lineno": 57,
          "line": "    Returns:"
        },
        {
          "lineno": 58,
          "line": "    bool: True if the string can be segmented into valid words, otherwise False."
        },
        {
          "lineno": 59,
          "line": ""
        },
        {
          "lineno": 60,
          "line": "    Example:"
        },
        {
          "lineno": 61,
          "line": "    >>> word_break(\"leetcode\", {\"leet\", \"code\"})"
        },
        {
          "lineno": 62,
          "line": "    True"
        },
        {
          "lineno": 63,
          "line": ""
        },
        {
          "lineno": 64,
          "line": "    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})"
        },
        {
          "lineno": 65,
          "line": "    True"
        },
        {
          "lineno": 66,
          "line": ""
        },
        {
          "lineno": 67,
          "line": "    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})"
        },
        {
          "lineno": 68,
          "line": "    False"
        },
        {
          "lineno": 69,
          "line": "    \"\"\""
        },
        {
          "lineno": 70,
          "line": ""
        },
        {
          "lineno": 71,
          "line": "    return backtrack(input_string, word_dict, 0)"
        }
      ],
      "blocks": [
        {
          "id": 1,
          "label": "def word_break(input_string: str, word_dict: set[str]) -> bool:\n    \"\"\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \"\"\"\nreturn backtrack(input_string, word_dict, 0)",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": [
    {
      "lineno": 1,
      "line": "\"\"\""
    },
    {
      "lineno": 2,
      "line": "Word Break Problem is a well-known problem in computer science."
    },
    {
      "lineno": 3,
      "line": "Given a string and a dictionary of words, the task is to determine if"
    },
    {
      "lineno": 4,
      "line": "the string can be segmented into a sequence of one or more dictionary words."
    },
    {
      "lineno": 5,
      "line": ""
    },
    {
      "lineno": 6,
      "line": "Wikipedia: https://en.wikipedia.org/wiki/Word_break_problem"
    },
    {
      "lineno": 7,
      "line": "\"\"\""
    },
    {
      "lineno": 8,
      "line": ""
    },
    {
      "lineno": 9,
      "line": ""
    },
    {
      "lineno": 46,
      "line": ""
    },
    {
      "lineno": 47,
      "line": ""
    }
  ],
  "blocks": []
}