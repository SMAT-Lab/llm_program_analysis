{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 14,
      "label": "from datetime import datetime\nimport pytest\nfrom prisma.models import CreditTransaction\nfrom backend.blocks.llm import AITextGeneratorBlock\nfrom backend.data.credit import UserCredit\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.integrations.credentials_store import openai_credentials\nfrom backend.util.test import SpinTestServer\nREFILL_VALUE = 1000\nuser_credit = UserCredit(REFILL_VALUE)\n@pytest.mark.asyncio(scope=\"session\")\n@pytest.mark.asyncio(scope=\"session\")\n@pytest.mark.asyncio(scope=\"session\")\n@pytest.mark.asyncio(scope=\"session\")",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "test_block_credit_usage",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def test_block_credit_usage(server: SpinTestServer):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 18,
                  "label": "spending_amount_1 = await user_credit.spend_credits(\n        DEFAULT_USER_ID,\n        current_credit,\n        AITextGeneratorBlock().id,\n        {\n            \"model\": \"gpt-4-turbo\",\n            \"credentials\": {\n                \"id\": openai_credentials.id,\n                \"provider\": openai_credentials.provider,\n                \"type\": openai_credentials.type,\n            },\n        },\n        0.0,\n        0.0,\n        validate_balance=False,\n    )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 19,
                      "end_line": 19,
                      "label": "assert spending_amount_1 > 0",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 20,
                          "end_line": 28,
                          "label": "spending_amount_2 = await user_credit.spend_credits(\n        DEFAULT_USER_ID,\n        current_credit,\n        AITextGeneratorBlock().id,\n        {\"model\": \"gpt-4-turbo\", \"api_key\": \"owned_api_key\"},\n        0.0,\n        0.0,\n        validate_balance=False,\n    )",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 29,
                              "end_line": 29,
                              "label": "assert spending_amount_2 == 0",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 30,
                                  "end_line": 30,
                                  "label": "new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 31,
                                      "end_line": 31,
                                      "label": "assert new_credit == current_credit - spending_amount_1 - spending_amount_2",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_block_credit_top_up",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def test_block_credit_top_up(server: SpinTestServer):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "await user_credit.top_up_credits(DEFAULT_USER_ID, 100)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 5,
                          "end_line": 5,
                          "label": "assert new_credit == current_credit + 100",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_block_credit_reset",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def test_block_credit_reset(server: SpinTestServer):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 4,
              "label": "month1 = datetime(2022, 1, 15)\n    month2 = datetime(2022, 2, 15)\n    user_credit.time_now = lambda: month2",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "month2credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 6,
                      "end_line": 7,
                      "label": "# Month 1 result should only affect month 1\n    user_credit.time_now = lambda: month1",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 8,
                          "end_line": 8,
                          "label": "month1credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 9,
                              "end_line": 9,
                              "label": "await user_credit.top_up_credits(DEFAULT_USER_ID, 100)",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 10,
                                  "end_line": 10,
                                  "label": "assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month1credit + 100",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 11,
                                      "end_line": 12,
                                      "label": "# Month 2 balance is unaffected\n    user_credit.time_now = lambda: month2",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 13,
                                          "end_line": 13,
                                          "label": "assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_credit_refill",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def test_credit_refill(server: SpinTestServer):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 12,
              "label": "# Clear all transactions within the month\n    await CreditTransaction.prisma().update_many(\n        where={\n            \"userId\": DEFAULT_USER_ID,\n            \"createdAt\": {\n                \"gte\": datetime(2022, 2, 1),\n                \"lt\": datetime(2022, 3, 1),\n            },\n        },\n        data={\"isActive\": False},\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 13,
                  "end_line": 13,
                  "label": "user_credit.time_now = lambda: datetime(2022, 2, 15)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "balance = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "assert balance == REFILL_VALUE",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}