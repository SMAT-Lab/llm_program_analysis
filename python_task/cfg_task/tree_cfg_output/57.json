{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 12,
      "label": "import logging\nfrom contextlib import contextmanager\nfrom datetime import datetime\nfrom typing import TYPE_CHECKING\nfrom autogpt_libs.utils.synchronize import RedisKeyedMutex\nfrom redis.lock import Lock as RedisLock\nfrom backend.data import redis\nfrom backend.data.model import Credentials\nfrom backend.integrations.credentials_store import IntegrationCredentialsStore\nfrom backend.integrations.oauth import HANDLERS_BY_NAME\nfrom backend.util.exceptions import MissingConfigError\nfrom backend.util.settings import Settings",
      "successors": [
        {
          "id": 2,
          "start_line": 13,
          "end_line": 14,
          "label": "if TYPE_CHECKING:\n    from backend.integrations.oauth import BaseOAuthHandler",
          "successors": [
            {
              "id": 3,
              "start_line": 15,
              "end_line": 16,
              "label": "logger = logging.getLogger(__name__)\nsettings = Settings()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "_get_provider_oauth_handler",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def _get_provider_oauth_handler(provider_name: str) -> \"BaseOAuthHandler\":",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if provider_name not in HANDLERS_BY_NAME:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "raise KeyError(f\"Unknown provider '{provider_name}'\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 5,
                  "label": "client_id = getattr(settings.secrets, f\"{provider_name}_client_id\")\n    client_secret = getattr(settings.secrets, f\"{provider_name}_client_secret\")",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "if not (client_id and client_secret):",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 7,
                          "end_line": 9,
                          "label": "raise MissingConfigError(\n            f\"Integration with provider '{provider_name}' is not configured\",\n        )",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "handler_class = HANDLERS_BY_NAME[provider_name]",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 11,
                              "end_line": 13,
                              "label": "frontend_base_url = (\n        settings.config.frontend_base_url or settings.config.platform_base_url\n    )",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 14,
                                  "end_line": 18,
                                  "label": "return handler_class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "IntegrationCredentialsManager",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 28,
          "label": "class IntegrationCredentialsManager:\n    \"\"\"\n    Handles the lifecycle of integration credentials.\n    - Automatically refreshes requested credentials if needed.\n    - Uses locking mechanisms to ensure system-wide consistency and\n      prevent invalidation of in-use tokens.\n    ### \u26a0\ufe0f Gotcha\n    With `acquire(..)`, credentials can only be in use in one place at a time (e.g. one\n    block execution).\n    ### Locking mechanism\n    - Because *getting* credentials can result in a refresh (= *invalidation* +\n      *replacement*) of the stored credentials, *getting* is an operation that\n      potentially requires read/write access.\n    - Checking whether a token has to be refreshed is subject to an additional `refresh`\n      scoped lock to prevent unnecessary sequential refreshes when multiple executions\n      try to access the same credentials simultaneously.\n    - We MUST lock credentials while in use to prevent them from being invalidated while\n      they are in use, e.g. because they are being refreshed by a different part\n      of the system.\n    - The `!time_sensitive` lock in `acquire(..)` is part of a two-tier locking\n      mechanism in which *updating* gets priority over *getting* credentials.\n      This is to prevent a long queue of waiting *get* requests from blocking essential\n      credential refreshes or user-initiated updates.\n    It is possible to implement a reader/writer locking system where either multiple\n    readers or a single writer can have simultaneous access, but this would add a lot of\n    complexity to the mechanism. I don't expect the current (\"simple\") mechanism to\n    cause so much latency that it's worth implementing.\n    \"\"\"",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 4,
                  "label": "redis_conn = redis.get_redis()\n        self._locks = RedisKeyedMutex(redis_conn)\n        self.store = IntegrationCredentialsStore()",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "create",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def create(self, user_id: str, credentials: Credentials) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return self.store.add_creds(user_id, credentials)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "exists",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def exists(self, user_id: str, credentials_id: str) -> bool:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return self.store.get_creds_by_id(user_id, credentials_id) is not None",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def get(\n        self, user_id: str, credentials_id: str, lock: bool = True\n    ) -> Credentials | None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "credentials = self.store.get_creds_by_id(user_id, credentials_id)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "if not credentials:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "return None",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "# Refresh OAuth credentials if needed",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "if credentials.type == \"oauth2\" and credentials.access_token_expires_at:",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 9,
                                  "end_line": 13,
                                  "label": "logger.debug(\n                f\"Credentials #{credentials.id} expire at \"\n                f\"{datetime.fromtimestamp(credentials.access_token_expires_at)}; \"\n                f\"current time is {datetime.now()}\"\n            )",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 14,
                                      "end_line": 14,
                                      "label": "with self._locked(user_id, credentials_id, \"refresh\"):",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 15,
                                          "end_line": 15,
                                          "label": "oauth_handler = _get_provider_oauth_handler(credentials.provider)",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 16,
                                              "end_line": 16,
                                              "label": "if oauth_handler.needs_refresh(credentials):",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 17,
                                                  "end_line": 20,
                                                  "label": "logger.debug(\n                        f\"Refreshing '{credentials.provider}' \"\n                        f\"credentials #{credentials.id}\"\n                    )",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "start_line": 21,
                                                      "end_line": 21,
                                                      "label": "_lock = None",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "start_line": 22,
                                                          "end_line": 22,
                                                          "label": "if lock:",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "start_line": 23,
                                                              "end_line": 24,
                                                              "label": "# Wait until the credentials are no longer in use anywhere\n                        _lock = self._acquire_lock(user_id, credentials_id)",
                                                              "successors": []
                                                            },
                                                            {
                                                              "id": 15,
                                                              "start_line": 25,
                                                              "end_line": 25,
                                                              "label": "fresh_credentials = oauth_handler.refresh_tokens(credentials)",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 16,
                                                  "start_line": 26,
                                                  "end_line": 26,
                                                  "label": "self.store.update_creds(user_id, fresh_credentials)",
                                                  "successors": [
                                                    {
                                                      "id": 17,
                                                      "start_line": 27,
                                                      "end_line": 27,
                                                      "label": "if _lock and _lock.locked():",
                                                      "successors": [
                                                        {
                                                          "id": 18,
                                                          "start_line": 28,
                                                          "end_line": 28,
                                                          "label": "_lock.release()",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 19,
                              "start_line": 30,
                              "end_line": 30,
                              "label": "else:",
                              "successors": [
                                {
                                  "id": 20,
                                  "start_line": 31,
                                  "end_line": 31,
                                  "label": "logger.debug(f\"Credentials #{credentials.id} never expire\")",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 21,
              "start_line": 32,
              "end_line": 32,
              "label": "return credentials",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "acquire",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def acquire(\n        self, user_id: str, credentials_id: str\n    ) -> tuple[Credentials, RedisLock]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 8,
                  "label": "\"\"\"\n        \u26a0\ufe0f WARNING: this locks credentials system-wide and blocks both acquiring\n        and updating them elsewhere until the lock is released.\n        See the class docstring for more info.\n        \"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 9,
                      "end_line": 10,
                      "label": "# Use a low-priority (!time_sensitive) locking queue on top of the general lock\n        # to allow priority access for refreshing/updating the tokens.",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 11,
                          "end_line": 11,
                          "label": "with self._locked(user_id, credentials_id, \"!time_sensitive\"):",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 12,
                              "end_line": 12,
                              "label": "lock = self._acquire_lock(user_id, credentials_id)",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 13,
                                  "end_line": 13,
                                  "label": "credentials = self.get(user_id, credentials_id, lock=False)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 14,
                                      "end_line": 14,
                                      "label": "if not credentials:",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 15,
                                          "end_line": 17,
                                          "label": "raise ValueError(\n                f\"Credentials #{credentials_id} for user #{user_id} not found\"\n            )",
                                          "successors": []
                                        },
                                        {
                                          "id": 9,
                                          "start_line": 18,
                                          "end_line": 18,
                                          "label": "return credentials, lock",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "update",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def update(self, user_id: str, updated: Credentials) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "with self._locked(user_id, updated.id):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "self.store.update_creds(user_id, updated)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "delete",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def delete(self, user_id: str, credentials_id: str) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "with self._locked(user_id, credentials_id):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "self.store.delete_creds_by_id(user_id, credentials_id)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_acquire_lock",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def _acquire_lock(self, user_id: str, credentials_id: str, *args: str) -> RedisLock:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 6,
                  "label": "key = (\n            f\"user:{user_id}\",\n            f\"credentials:{credentials_id}\",\n            *args,\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 7,
                      "end_line": 7,
                      "label": "return self._locks.acquire(key)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_locked",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "@contextmanager\n    def _locked(self, user_id: str, credentials_id: str, *args: str):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "lock = self._acquire_lock(user_id, credentials_id, *args)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 5,
                      "label": "try:\n            yield",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "finally:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 7,
                              "end_line": 8,
                              "label": "if lock.locked():\n                lock.release()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "release_all_locks",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def release_all_locks(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "\"\"\"Call this on process termination to ensure all locks are released\"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "self._locks.release_all_locks()",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "self.store.locks.release_all_locks()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}