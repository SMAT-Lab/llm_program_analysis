{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 16,
      "label": "import asyncio\nimport contextlib\nimport logging\nfrom functools import wraps\nfrom typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast\nimport ldclient\nfrom fastapi import HTTPException\nfrom ldclient import Context, LDClient\nfrom ldclient.config import Config\nfrom typing_extensions import ParamSpec\nfrom .config import SETTINGS\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.DEBUG)\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n@contextlib.contextmanager",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "get_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def get_client() -> LDClient:\n    \"\"\"Get the LaunchDarkly client singleton.\"\"\"\n    return ldclient.get()",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "initialize_launchdarkly",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "def initialize_launchdarkly() -> None:\n    sdk_key = SETTINGS.launch_darkly_sdk_key\n    logger.debug(\n        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "if not sdk_key:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 8,
                  "label": "logger.warning(\"LaunchDarkly SDK key not configured\")\n        return",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 9,
                  "end_line": 10,
                  "label": "config = Config(sdk_key)\n    ldclient.set_config(config)",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 11,
                      "end_line": 11,
                      "label": "if ldclient.get().is_initialized():",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 12,
                          "end_line": 12,
                          "label": "logger.info(\"LaunchDarkly client initialized successfully\")",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 14,
                          "end_line": 14,
                          "label": "logger.error(\"LaunchDarkly client failed to initialize\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "shutdown_launchdarkly",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def shutdown_launchdarkly() -> None:\n    \"\"\"Shutdown the LaunchDarkly client.\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "if ldclient.get().is_initialized():",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 5,
                  "label": "ldclient.get().close()\n        logger.info(\"LaunchDarkly client closed successfully\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_context",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "def create_context(\n    user_id: str, additional_attributes: Optional[Dict[str, Any]] = None\n) -> Context:\n    \"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\n    builder = Context.builder(str(user_id)).kind(\"user\")",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "if additional_attributes:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 8,
                  "label": "for key, value in additional_attributes.items():\n            builder.set(key, value)",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 9,
              "end_line": 9,
              "label": "return builder.build()",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "feature_flag",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 9,
          "label": "def feature_flag(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "decorator",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def decorator(\n        func: Callable[P, Union[T, Awaitable[T]]],\n    ) -> Callable[P, Union[T, Awaitable[T]]]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 5,
                  "label": "@wraps(func)\n        @wraps(func)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 6,
                      "end_line": 9,
                      "label": "return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 4,
              "start_line": 10,
              "end_line": 10,
              "label": "return decorator",
              "successors": []
            }
          ],
          "functions": [
            {
              "name": "async_wrapper",
              "type": "CFG",
              "blocks": [
                {
                  "id": 1,
                  "start_line": 1,
                  "end_line": 1,
                  "label": "async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:",
                  "successors": [
                    {
                      "id": 2,
                      "start_line": 2,
                      "end_line": 2,
                      "label": "try:",
                      "successors": [
                        {
                          "id": 3,
                          "start_line": 3,
                          "end_line": 3,
                          "label": "user_id = kwargs.get(\"user_id\")",
                          "successors": [
                            {
                              "id": 4,
                              "start_line": 4,
                              "end_line": 4,
                              "label": "if not user_id:",
                              "successors": [
                                {
                                  "id": 5,
                                  "start_line": 5,
                                  "end_line": 5,
                                  "label": "raise ValueError(\"user_id is required\")",
                                  "successors": []
                                },
                                {
                                  "id": 6,
                                  "start_line": 6,
                                  "end_line": 6,
                                  "label": "if not get_client().is_initialized():",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 7,
                                      "end_line": 10,
                                      "label": "logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default",
                                      "successors": []
                                    },
                                    {
                                      "id": 8,
                                      "start_line": 11,
                                      "end_line": 13,
                                      "label": "else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "start_line": 14,
                  "end_line": 14,
                  "label": "if not is_enabled:",
                  "successors": [
                    {
                      "id": 10,
                      "start_line": 15,
                      "end_line": 15,
                      "label": "raise HTTPException(status_code=404, detail=\"Feature not available\")",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "start_line": 16,
                      "end_line": 16,
                      "label": "result = func(*args, **kwargs)",
                      "successors": [
                        {
                          "id": 12,
                          "start_line": 17,
                          "end_line": 17,
                          "label": "if asyncio.iscoroutine(result):",
                          "successors": [
                            {
                              "id": 13,
                              "start_line": 18,
                              "end_line": 18,
                              "label": "return await result",
                              "successors": []
                            },
                            {
                              "id": 14,
                              "start_line": 19,
                              "end_line": 19,
                              "label": "return cast(T, result)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 15,
                  "start_line": 20,
                  "end_line": 20,
                  "label": "except Exception as e:",
                  "successors": [
                    {
                      "id": 16,
                      "start_line": 21,
                      "end_line": 21,
                      "label": "logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")",
                      "successors": [
                        {
                          "id": 17,
                          "start_line": 22,
                          "end_line": 22,
                          "label": "raise",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            },
            {
              "name": "sync_wrapper",
              "type": "CFG",
              "blocks": [
                {
                  "id": 1,
                  "start_line": 1,
                  "end_line": 1,
                  "label": "def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:",
                  "successors": [
                    {
                      "id": 2,
                      "start_line": 2,
                      "end_line": 2,
                      "label": "try:",
                      "successors": [
                        {
                          "id": 3,
                          "start_line": 3,
                          "end_line": 3,
                          "label": "user_id = kwargs.get(\"user_id\")",
                          "successors": [
                            {
                              "id": 4,
                              "start_line": 4,
                              "end_line": 4,
                              "label": "if not user_id:",
                              "successors": [
                                {
                                  "id": 5,
                                  "start_line": 5,
                                  "end_line": 5,
                                  "label": "raise ValueError(\"user_id is required\")",
                                  "successors": []
                                },
                                {
                                  "id": 6,
                                  "start_line": 6,
                                  "end_line": 6,
                                  "label": "if not get_client().is_initialized():",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 7,
                                      "end_line": 10,
                                      "label": "logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "start_line": 14,
                                          "end_line": 14,
                                          "label": "if not is_enabled:",
                                          "successors": [
                                            {
                                              "id": 12,
                                              "start_line": 15,
                                              "end_line": 15,
                                              "label": "raise HTTPException(status_code=404, detail=\"Feature not available\")",
                                              "successors": []
                                            },
                                            {
                                              "id": 13,
                                              "start_line": 16,
                                              "end_line": 16,
                                              "label": "return cast(T, func(*args, **kwargs))",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 8,
                                      "start_line": 11,
                                      "end_line": 11,
                                      "label": "else:",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 12,
                                          "end_line": 13,
                                          "label": "context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 14,
                                              "end_line": 14,
                                              "label": "if not is_enabled:",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "start_line": 15,
                                                  "end_line": 15,
                                                  "label": "raise HTTPException(status_code=404, detail=\"Feature not available\")",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 13,
                                                  "start_line": 16,
                                                  "end_line": 16,
                                                  "label": "return cast(T, func(*args, **kwargs))",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 14,
                  "start_line": 17,
                  "end_line": 17,
                  "label": "except Exception as e:",
                  "successors": [
                    {
                      "id": 15,
                      "start_line": 18,
                      "end_line": 19,
                      "label": "logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise",
                      "successors": []
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            }
          ],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "percentage_rollout",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "def percentage_rollout(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 8,
              "label": "\"\"\"Decorator for percentage-based rollouts.\"\"\"\n    return feature_flag(flag_key, default)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "beta_feature",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "def beta_feature(\n    flag_key: Optional[str] = None,\n    unauthorized_response: Any = {\"message\": \"Not available in beta\"},\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 9,
              "label": "\"\"\"Decorator for beta features.\"\"\"\n    actual_key = f\"beta-{flag_key}\" if flag_key else \"beta\"\n    return feature_flag(actual_key, False)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "mock_flag_variation",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "def mock_flag_variation(flag_key: str, return_value: Any):\n    \"\"\"Context manager for testing feature flags.\"\"\"\n    original_variation = get_client().variation\n    get_client().variation = lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 10,
              "label": "try:\n        yield\n    finally:\n        get_client().variation = original_variation",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}