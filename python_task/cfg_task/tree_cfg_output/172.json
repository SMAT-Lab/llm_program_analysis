{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 28,
      "label": "\"\"\"\nThe command line interface for the agent server\n\"\"\"\nimport os\nimport pathlib\nimport click\nimport psutil\nfrom backend import app\nfrom backend.util.process import AppProcess\n@click.group()\n@main.command()\n@main.command()\n@main.command()\n@click.group()\n@test.command()\n@click.argument(\"server_address\")\n@test.command()\n@click.argument(\"server_address\")\n@test.command()\n@click.argument(\"server_address\")\n@test.command()\n@click.argument(\"graph_id\")\n@click.argument(\"content\")\n@test.command()\n@test.command()\n@click.argument(\"server_address\")\n@click.argument(\"graph_id\")\nmain.add_command(test)",
      "successors": [
        {
          "id": 2,
          "start_line": 29,
          "end_line": 30,
          "label": "if __name__ == \"__main__\":\n    main()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_pid_path",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def get_pid_path() -> pathlib.Path:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "home_dir = pathlib.Path.home()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "new_dir = home_dir / \".config\" / \"agpt\"",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "file_path = new_dir / \"running.tmp\"",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 5,
                          "end_line": 5,
                          "label": "return file_path",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_pid",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def get_pid() -> int | None:\n    file_path = get_pid_path()",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "if not file_path.exists():",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "return None",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "os.makedirs(file_path.parent, exist_ok=True)",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "with open(file_path, \"r\", encoding=\"utf-8\") as file:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "pid = file.read()",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "try:",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 9,
                                  "end_line": 9,
                                  "label": "return int(pid)",
                                  "successors": []
                                },
                                {
                                  "id": 9,
                                  "start_line": 10,
                                  "end_line": 10,
                                  "label": "except ValueError:",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "start_line": 11,
                                      "end_line": 11,
                                      "label": "return None",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "write_pid",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def write_pid(pid: int):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 3,
              "label": "file_path = get_pid_path()\n    os.makedirs(file_path.parent, exist_ok=True)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "with open(file_path, \"w\", encoding=\"utf-8\") as file:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "file.write(str(pid))",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "start",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "def start():\n    \"\"\"\n    Starts the server in the background and saves the PID\n    \"\"\"\n    # Define the path for the new directory and file\n    pid = get_pid()",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 7,
              "label": "if pid and psutil.pid_exists(pid):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 8,
                  "end_line": 9,
                  "label": "print(\"Server is already running\")\n        exit(1)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "elif pid:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 11,
                      "end_line": 12,
                      "label": "print(\"PID does not exist deleting file\")\n        os.remove(get_pid_path())",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 6,
          "start_line": 13,
          "end_line": 18,
          "label": "print(\"Starting server\")\n    pid = MainApp().start(background=True, silent=True)\n    print(f\"Server running in process: {pid}\")\n    write_pid(pid)\n    print(\"done\")\n    os._exit(status=0)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "stop",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "gen_encrypt_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def gen_encrypt_key():\n    \"\"\"\n    Generate a new encryption key\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 6,
              "label": "from cryptography.fernet import Fernet\n    print(Fernet.generate_key().decode())",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "reddit",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def reddit(server_address: str):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 4,
              "label": "\"\"\"\n    Create an event graph\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "import requests",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "from backend.usecases.reddit_marketing import create_test_graph",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "test_graph = create_test_graph()",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "url = f\"{server_address}/graphs\"",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 9,
                                  "end_line": 9,
                                  "label": "headers = {\"Content-Type\": \"application/json\"}",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 10,
                                      "end_line": 10,
                                      "label": "data = test_graph.model_dump_json()",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 11,
                                          "end_line": 11,
                                          "label": "response = requests.post(url, headers=headers, data=data)",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 12,
                                              "end_line": 12,
                                              "label": "graph_id = response.json()[\"id\"]",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 13,
                                                  "end_line": 13,
                                                  "label": "print(f\"Graph created with ID: {graph_id}\")",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "populate_db",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 12,
          "label": "def populate_db(server_address: str):\n    \"\"\"\n    Create an event graph\n    \"\"\"\n    import requests\n    from backend.usecases.sample import create_test_graph\n    test_graph = create_test_graph()\n    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = test_graph.model_dump_json()\n    response = requests.post(url, headers=headers, data=data)\n    graph_id = response.json()[\"id\"]",
          "successors": [
            {
              "id": 2,
              "start_line": 13,
              "end_line": 24,
              "label": "if response.status_code == 200:\n        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\n        text = \"Hello, World!\"\n        input_data = {\"input\": text}\n        response = requests.post(execute_url, headers=headers, json=input_data)\n        schedule_url = f\"{server_address}/graphs/{graph_id}/schedules\"\n        data = {\n            \"graph_id\": graph_id,\n            \"cron\": \"*/5 * * * *\",\n            \"input_data\": {\"input\": \"Hello, World!\"},\n        }\n        response = requests.post(schedule_url, headers=headers, json=data)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 25,
                  "end_line": 25,
                  "label": "print(\"Database populated with: \\n- graph\\n- execution\\n- schedule\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 3,
              "start_line": 25,
              "end_line": 25,
              "label": "print(\"Database populated with: \\n- graph\\n- execution\\n- schedule\")",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "def graph(server_address: str):\n    \"\"\"\n    Create an event graph\n    \"\"\"\n    import requests\n    from backend.usecases.sample import create_test_graph\n    url = f\"{server_address}/graphs\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = create_test_graph().model_dump_json()\n    response = requests.post(url, headers=headers, data=data)",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 11,
              "label": "if response.status_code == 200:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 12,
                  "end_line": 16,
                  "label": "print(response.json()[\"id\"])\n        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\n        text = \"Hello, World!\"\n        input_data = {\"input\": text}\n        response = requests.post(execute_url, headers=headers, json=input_data)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 17,
                  "end_line": 19,
                  "label": "else:\n        print(\"Failed to send graph\")\n        print(f\"Response: {response.text}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "execute",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def execute(graph_id: str, content: dict):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 4,
              "label": "\"\"\"\n    Create an event graph\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "import requests",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "headers = {\"Content-Type\": \"application/json\"}",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "execute_url = f\"http://0.0.0.0:8000/graphs/{graph_id}/execute\"",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "requests.post(execute_url, headers=headers, json=content)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "event",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def event():\n    \"\"\"\n    Send an event to the running server\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 5,
              "label": "print(\"Event sent\")",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "websocket",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def websocket(server_address: str, graph_id: str):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 4,
              "label": "\"\"\"\n    Tests the websocket connection.\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 7,
                  "label": "import asyncio\n    import websockets.asyncio.client\n    from backend.server.ws_api import ExecutionSubscription, Methods, WsMessage",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 8,
                      "end_line": 8,
                      "label": "asyncio.run(send_message(server_address))",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 9,
                          "end_line": 9,
                          "label": "print(\"Testing WS\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "send_message",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "async def send_message(server_address: str):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "uri = f\"ws://{server_address}\"",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "async with websockets.asyncio.client.connect(uri) as websocket:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "try:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 5,
                              "end_line": 8,
                              "label": "msg = WsMessage(\n                    method=Methods.SUBSCRIBE,\n                    data=ExecutionSubscription(graph_id=graph_id).model_dump(),\n                ).model_dump_json()",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 9,
                                  "end_line": 9,
                                  "label": "await websocket.send(msg)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 10,
                                      "end_line": 10,
                                      "label": "print(f\"Sending: {msg}\")",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 11,
                                          "end_line": 11,
                                          "label": "",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "start_line": 12,
                                              "end_line": 13,
                                              "label": "response = await websocket.recv()\n                    print(f\"Response from server: {response}\")",
                                              "successors": [
                                                {
                                                  "id": 8,
                                                  "start_line": 11,
                                                  "end_line": 11,
                                                  "label": "while True:",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 10,
                          "start_line": 14,
                          "end_line": 14,
                          "label": "except InterruptedError:",
                          "successors": [
                            {
                              "id": 11,
                              "start_line": 15,
                              "end_line": 15,
                              "label": "exit(0)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "MainApp",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def run(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "app.main(silent=True)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}