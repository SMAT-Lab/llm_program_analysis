{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 4,
      "label": "import secrets\nfrom datetime import datetime, timedelta, timezone\nfrom typing import TYPE_CHECKING\nfrom pydantic import SecretStr",
      "successors": [
        {
          "id": 2,
          "start_line": 5,
          "end_line": 5,
          "label": "if TYPE_CHECKING:",
          "successors": [
            {
              "id": 3,
              "start_line": 6,
              "end_line": 6,
              "label": "from backend.executor.database import DatabaseManager",
              "successors": []
            }
          ]
        },
        {
          "id": 4,
          "start_line": 7,
          "end_line": 8,
          "label": "from autogpt_libs.utils.cache import thread_cached\nfrom autogpt_libs.utils.synchronize import RedisKeyedMutex",
          "successors": [
            {
              "id": 5,
              "start_line": 9,
              "end_line": 15,
              "label": "from backend.data.model import (\n    APIKeyCredentials,\n    Credentials,\n    OAuth2Credentials,\n    OAuthState,\n    UserIntegrations,\n)",
              "successors": [
                {
                  "id": 6,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "from backend.util.settings import Settings",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 17,
                      "end_line": 17,
                      "label": "settings = Settings()",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 18,
                          "end_line": 24,
                          "label": "revid_credentials = APIKeyCredentials(\n    id=\"fdb7f412-f519-48d1-9b5f-d2f73d0e01fe\",\n    provider=\"revid\",\n    api_key=SecretStr(settings.secrets.revid_api_key),\n    title=\"Use Credits for Revid\",\n    expires_at=None,\n)",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 25,
                              "end_line": 31,
                              "label": "ideogram_credentials = APIKeyCredentials(\n    id=\"760f84fc-b270-42de-91f6-08efe1b512d0\",\n    provider=\"ideogram\",\n    api_key=SecretStr(settings.secrets.ideogram_api_key),\n    title=\"Use Credits for Ideogram\",\n    expires_at=None,\n)",
                              "successors": [
                                {
                                  "id": 10,
                                  "start_line": 32,
                                  "end_line": 38,
                                  "label": "replicate_credentials = APIKeyCredentials(\n    id=\"6b9fc200-4726-4973-86c9-cd526f5ce5db\",\n    provider=\"replicate\",\n    api_key=SecretStr(settings.secrets.replicate_api_key),\n    title=\"Use Credits for Replicate\",\n    expires_at=None,\n)",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "start_line": 39,
                                      "end_line": 45,
                                      "label": "openai_credentials = APIKeyCredentials(\n    id=\"53c25cb8-e3ee-465c-a4d1-e75a4c899c2a\",\n    provider=\"openai\",\n    api_key=SecretStr(settings.secrets.openai_api_key),\n    title=\"Use Credits for OpenAI\",\n    expires_at=None,\n)",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "start_line": 46,
                                          "end_line": 52,
                                          "label": "anthropic_credentials = APIKeyCredentials(\n    id=\"24e5d942-d9e3-4798-8151-90143ee55629\",\n    provider=\"anthropic\",\n    api_key=SecretStr(settings.secrets.anthropic_api_key),\n    title=\"Use Credits for Anthropic\",\n    expires_at=None,\n)",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "start_line": 53,
                                              "end_line": 59,
                                              "label": "groq_credentials = APIKeyCredentials(\n    id=\"4ec22295-8f97-4dd1-b42b-2c6957a02545\",\n    provider=\"groq\",\n    api_key=SecretStr(settings.secrets.groq_api_key),\n    title=\"Use Credits for Groq\",\n    expires_at=None,\n)",
                                              "successors": [
                                                {
                                                  "id": 14,
                                                  "start_line": 60,
                                                  "end_line": 66,
                                                  "label": "did_credentials = APIKeyCredentials(\n    id=\"7f7b0654-c36b-4565-8fa7-9a52575dfae2\",\n    provider=\"d_id\",\n    api_key=SecretStr(settings.secrets.did_api_key),\n    title=\"Use Credits for D-ID\",\n    expires_at=None,\n)",
                                                  "successors": [
                                                    {
                                                      "id": 15,
                                                      "start_line": 67,
                                                      "end_line": 73,
                                                      "label": "jina_credentials = APIKeyCredentials(\n    id=\"7f26de70-ba0d-494e-ba76-238e65e7b45f\",\n    provider=\"jina\",\n    api_key=SecretStr(settings.secrets.jina_api_key),\n    title=\"Use Credits for Jina\",\n    expires_at=None,\n)",
                                                      "successors": [
                                                        {
                                                          "id": 16,
                                                          "start_line": 74,
                                                          "end_line": 80,
                                                          "label": "unreal_credentials = APIKeyCredentials(\n    id=\"66f20754-1b81-48e4-91d0-f4f0dd82145f\",\n    provider=\"unreal\",\n    api_key=SecretStr(settings.secrets.unreal_speech_api_key),\n    title=\"Use Credits for Unreal\",\n    expires_at=None,\n)",
                                                          "successors": [
                                                            {
                                                              "id": 17,
                                                              "start_line": 81,
                                                              "end_line": 87,
                                                              "label": "open_router_credentials = APIKeyCredentials(\n    id=\"b5a0e27d-0c98-4df3-a4b9-10193e1f3c40\",\n    provider=\"open_router\",\n    api_key=SecretStr(settings.secrets.open_router_api_key),\n    title=\"Use Credits for Open Router\",\n    expires_at=None,\n)",
                                                              "successors": [
                                                                {
                                                                  "id": 18,
                                                                  "start_line": 88,
                                                                  "end_line": 99,
                                                                  "label": "DEFAULT_CREDENTIALS = [\n    revid_credentials,\n    ideogram_credentials,\n    replicate_credentials,\n    openai_credentials,\n    anthropic_credentials,\n    groq_credentials,\n    did_credentials,\n    jina_credentials,\n    unreal_credentials,\n    open_router_credentials,\n]",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "IntegrationCredentialsStore",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 3,
                  "label": "from backend.data.redis import get_redis\n        self.locks = RedisKeyedMutex(get_redis())",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "db_manager",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "@property\n    @thread_cached\n    def db_manager(self) -> \"DatabaseManager\":",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 6,
                  "label": "from backend.executor.database import DatabaseManager\n        from backend.util.service import get_service_client\n        return get_service_client(DatabaseManager)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "add_creds",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def add_creds(self, user_id: str, credentials: Credentials) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "with self.locked_user_integrations(user_id):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "if self.get_creds_by_id(user_id, credentials.id):",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 7,
                          "label": "raise ValueError(\n                    f\"Can not re-create existing credentials #{credentials.id} \"\n                    f\"for user #{user_id}\"\n                )",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "start_line": 8,
                          "end_line": 10,
                          "label": "self._set_user_integration_creds(\n                user_id, [*self.get_all_creds(user_id), credentials]\n            )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_all_creds",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def get_all_creds(self, user_id: str) -> list[Credentials]:\n        users_credentials = self._get_user_integrations(user_id).credentials\n        all_credentials = users_credentials",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "if settings.secrets.revid_api_key:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "all_credentials.append(revid_credentials)",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "if settings.secrets.ideogram_api_key:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "all_credentials.append(ideogram_credentials)",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 8,
                          "end_line": 8,
                          "label": "if settings.secrets.groq_api_key:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 9,
                              "end_line": 9,
                              "label": "all_credentials.append(groq_credentials)",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "start_line": 10,
                              "end_line": 10,
                              "label": "if settings.secrets.replicate_api_key:",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 11,
                                  "end_line": 11,
                                  "label": "all_credentials.append(replicate_credentials)",
                                  "successors": []
                                },
                                {
                                  "id": 10,
                                  "start_line": 12,
                                  "end_line": 12,
                                  "label": "if settings.secrets.openai_api_key:",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "start_line": 13,
                                      "end_line": 13,
                                      "label": "all_credentials.append(openai_credentials)",
                                      "successors": []
                                    },
                                    {
                                      "id": 12,
                                      "start_line": 14,
                                      "end_line": 14,
                                      "label": "if settings.secrets.anthropic_api_key:",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "start_line": 15,
                                          "end_line": 15,
                                          "label": "all_credentials.append(anthropic_credentials)",
                                          "successors": []
                                        },
                                        {
                                          "id": 14,
                                          "start_line": 16,
                                          "end_line": 16,
                                          "label": "if settings.secrets.did_api_key:",
                                          "successors": [
                                            {
                                              "id": 15,
                                              "start_line": 17,
                                              "end_line": 17,
                                              "label": "all_credentials.append(did_credentials)",
                                              "successors": []
                                            },
                                            {
                                              "id": 16,
                                              "start_line": 18,
                                              "end_line": 18,
                                              "label": "if settings.secrets.jina_api_key:",
                                              "successors": [
                                                {
                                                  "id": 17,
                                                  "start_line": 19,
                                                  "end_line": 19,
                                                  "label": "all_credentials.append(jina_credentials)",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 18,
                                                  "start_line": 20,
                                                  "end_line": 20,
                                                  "label": "if settings.secrets.unreal_speech_api_key:",
                                                  "successors": [
                                                    {
                                                      "id": 19,
                                                      "start_line": 21,
                                                      "end_line": 21,
                                                      "label": "all_credentials.append(unreal_credentials)",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 20,
                                                      "start_line": 22,
                                                      "end_line": 22,
                                                      "label": "if settings.secrets.open_router_api_key:",
                                                      "successors": [
                                                        {
                                                          "id": 21,
                                                          "start_line": 23,
                                                          "end_line": 23,
                                                          "label": "all_credentials.append(open_router_credentials)",
                                                          "successors": []
                                                        },
                                                        {
                                                          "id": 22,
                                                          "start_line": 24,
                                                          "end_line": 24,
                                                          "label": "return all_credentials",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_creds_by_id",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def get_creds_by_id(self, user_id: str, credentials_id: str) -> Credentials | None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "all_credentials = self.get_all_creds(user_id)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "return next((c for c in all_credentials if c.id == credentials_id), None)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_creds_by_provider",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def get_creds_by_provider(self, user_id: str, provider: str) -> list[Credentials]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "credentials = self.get_all_creds(user_id)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "return [c for c in credentials if c.provider == provider]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_authorized_providers",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def get_authorized_providers(self, user_id: str) -> list[str]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "credentials = self.get_all_creds(user_id)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "return list(set(c.provider for c in credentials))",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "update_creds",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def update_creds(self, user_id: str, updated: Credentials) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "with self.locked_user_integrations(user_id):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "current = self.get_creds_by_id(user_id, updated.id)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "if not current:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 5,
                              "end_line": 8,
                              "label": "raise ValueError(\n                    f\"Credentials with ID {updated.id} \"\n                    f\"for user with ID {user_id} not found\"\n                )",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "start_line": 9,
                              "end_line": 9,
                              "label": "if type(current) is not type(updated):",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 10,
                                  "end_line": 14,
                                  "label": "raise TypeError(\n                    f\"Can not update credentials with ID {updated.id} \"\n                    f\"from type {type(current)} \"\n                    f\"to type {type(updated)}\"\n                )",
                                  "successors": []
                                },
                                {
                                  "id": 8,
                                  "start_line": 15,
                                  "end_line": 15,
                                  "label": "# Ensure no scopes are removed when updating credentials",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 16,
                                      "end_line": 20,
                                      "label": "if (\n                isinstance(updated, OAuth2Credentials)\n                and isinstance(current, OAuth2Credentials)\n                and not set(updated.scopes).issuperset(current.scopes)\n            ):",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "start_line": 21,
                                          "end_line": 25,
                                          "label": "raise ValueError(\n                    f\"Can not update credentials with ID {updated.id} \"\n                    f\"and scopes {current.scopes} \"\n                    f\"to more restrictive set of scopes {updated.scopes}\"\n                )",
                                          "successors": []
                                        },
                                        {
                                          "id": 11,
                                          "start_line": 26,
                                          "end_line": 26,
                                          "label": "# Update the credentials",
                                          "successors": [
                                            {
                                              "id": 12,
                                              "start_line": 27,
                                              "end_line": 30,
                                              "label": "updated_credentials_list = [\n                updated if c.id == updated.id else c\n                for c in self.get_all_creds(user_id)\n            ]",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "start_line": 31,
                                                  "end_line": 31,
                                                  "label": "self._set_user_integration_creds(user_id, updated_credentials_list)",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "delete_creds_by_id",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def delete_creds_by_id(self, user_id: str, credentials_id: str) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "with self.locked_user_integrations(user_id):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 5,
                      "label": "filtered_credentials = [\n                c for c in self.get_all_creds(user_id) if c.id != credentials_id\n            ]",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "self._set_user_integration_creds(user_id, filtered_credentials)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "store_state_token",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 9,
              "label": "def store_state_token(self, user_id: str, provider: str, scopes: list[str]) -> str:\n        token = secrets.token_urlsafe(32)\n        expires_at = datetime.now(timezone.utc) + timedelta(minutes=10)\n        state = OAuthState(\n            token=token,\n            provider=provider,\n            expires_at=int(expires_at.timestamp()),\n            scopes=scopes,\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 10,
                  "end_line": 17,
                  "label": "with self.locked_user_integrations(user_id):\n            user_integrations = self._get_user_integrations(user_id)\n            oauth_states = user_integrations.oauth_states\n            oauth_states.append(state)\n            user_integrations.oauth_states = oauth_states\n            self.db_manager.update_user_integrations(\n                user_id=user_id, data=user_integrations\n            )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 18,
                      "end_line": 18,
                      "label": "return token",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_any_valid_scopes_from_state_token",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 10,
              "label": "def get_any_valid_scopes_from_state_token(\n        self, user_id: str, token: str, provider: str\n    ) -> list[str]:\n        \"\"\"\n        Get the valid scopes from the OAuth state token. This will return any valid scopes\n        from any OAuth state token for the given provider. If no valid scopes are found,\n        an empty list is returned. DO NOT RELY ON THIS TOKEN TO AUTHENTICATE A USER, AS IT\n        IS TO CHECK IF THE USER HAS GIVEN PERMISSIONS TO THE APPLICATION BEFORE EXCHANGING\n        THE CODE FOR TOKENS.\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 11,
                  "end_line": 23,
                  "label": "user_integrations = self._get_user_integrations(user_id)\n        oauth_states = user_integrations.oauth_states\n        now = datetime.now(timezone.utc)\n        valid_state = next(\n            (\n                state\n                for state in oauth_states\n                if state.token == token\n                and state.provider == provider\n                and state.expires_at > now.timestamp()\n            ),\n            None,\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 24,
                      "end_line": 24,
                      "label": "if valid_state:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 25,
                          "end_line": 25,
                          "label": "return valid_state.scopes",
                          "successors": []
                        },
                        {
                          "id": 5,
                          "start_line": 26,
                          "end_line": 26,
                          "label": "return []",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "verify_state_token",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def verify_state_token(self, user_id: str, token: str, provider: str) -> bool:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "with self.locked_user_integrations(user_id):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 15,
                      "label": "user_integrations = self._get_user_integrations(user_id)\n            oauth_states = user_integrations.oauth_states\n            now = datetime.now(timezone.utc)\n            valid_state = next(\n                (\n                    state\n                    for state in oauth_states\n                    if state.token == token\n                    and state.provider == provider\n                    and state.expires_at > now.timestamp()\n                ),\n                None,\n            )",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 16,
                          "end_line": 16,
                          "label": "if valid_state:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 17,
                              "end_line": 21,
                              "label": "# Remove the used state\n                oauth_states.remove(valid_state)\n                user_integrations.oauth_states = oauth_states\n                self.db_manager.update_user_integrations(user_id, user_integrations)\n                return True",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "start_line": 22,
                              "end_line": 22,
                              "label": "return False",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_set_user_integration_creds",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def _set_user_integration_creds(\n        self, user_id: str, credentials: list[Credentials]\n    ) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "integrations = self._get_user_integrations(user_id)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 6,
                      "label": "# Remove default credentials from the list\n        credentials = [c for c in credentials if c not in DEFAULT_CREDENTIALS]",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "integrations.credentials = credentials",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "self.db_manager.update_user_integrations(user_id, integrations)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_get_user_integrations",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def _get_user_integrations(self, user_id: str) -> UserIntegrations:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 4,
                  "label": "integrations: UserIntegrations = self.db_manager.get_user_integrations(\n            user_id=user_id\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "return integrations",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "locked_user_integrations",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def locked_user_integrations(self, user_id: str):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "key = (f\"user:{user_id}\", \"integrations\")",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "return self.locks.locked(key)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}