{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 4,
      "label": "from contextlib import contextmanager\nfrom threading import Lock\nfrom typing import TYPE_CHECKING, Any\nfrom expiringdict import ExpiringDict",
      "successors": [
        {
          "id": 2,
          "start_line": 5,
          "end_line": 5,
          "label": "if TYPE_CHECKING:",
          "successors": [
            {
              "id": 3,
              "start_line": 6,
              "end_line": 7,
              "label": "from redis import Redis\n    from redis.lock import Lock as RedisLock",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "RedisKeyedMutex",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 8,
          "label": "class RedisKeyedMutex:\n    \"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"\n    @contextmanager",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self, redis: \"Redis\", timeout: int | None = 60):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 7,
                  "label": "self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "locked",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def locked(self, key: Any):\n        lock = self.acquire(key)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 4,
                  "label": "try:\n            yield",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 6,
                      "label": "finally:\n            if lock.locked():",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "lock.release()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "acquire",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def acquire(self, key: Any) -> \"RedisLock\":\n        \"\"\"Acquires and returns a lock with the given key\"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "with self.locks_lock:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "if key not in self.locks:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 5,
                          "end_line": 7,
                          "label": "self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "lock = self.locks[key]",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 9,
                                  "end_line": 9,
                                  "label": "lock.acquire()",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 10,
                                      "end_line": 10,
                                      "label": "return lock",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "release",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def release(self, key: Any):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "if (lock := self.locks.get(key)) and lock.locked() and lock.owned():",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "lock.release()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "release_all_locks",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "self.locks_lock.acquire(blocking=False)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "for lock in self.locks.values():",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 5,
                          "end_line": 5,
                          "label": "if lock.locked() and lock.owned():",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 6,
                              "end_line": 6,
                              "label": "lock.release()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}