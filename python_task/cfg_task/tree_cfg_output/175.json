{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 19,
      "label": "import logging\nimport os\nfrom urllib.parse import parse_qs, urlencode, urlparse, urlunparse\nfrom apscheduler.events import EVENT_JOB_ERROR, EVENT_JOB_EXECUTED\nfrom apscheduler.job import Job as JobObj\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.schedulers.blocking import BlockingScheduler\nfrom apscheduler.triggers.cron import CronTrigger\nfrom autogpt_libs.utils.cache import thread_cached\nfrom dotenv import load_dotenv\nfrom pydantic import BaseModel\nfrom sqlalchemy import MetaData, create_engine\nfrom backend.data.block import BlockInput\nfrom backend.executor.manager import ExecutionManager\nfrom backend.util.service import AppService, expose, get_service_client\nfrom backend.util.settings import Config\nlogger = logging.getLogger(__name__)\nconfig = Config()\n@thread_cached",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "_extract_schema_from_url",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def _extract_schema_from_url(database_url) -> tuple[str, str]:\n    \"\"\"\n    Extracts the schema from the DATABASE_URL and returns the schema and cleaned URL.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 5,
              "label": "parsed_url = urlparse(database_url)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "query_params = parse_qs(parsed_url.query)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 7,
                      "end_line": 8,
                      "label": "# Extract the 'schema' parameter\n    schema_list = query_params.pop(\"schema\", None)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 9,
                          "end_line": 9,
                          "label": "schema = schema_list[0] if schema_list else \"public\"",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 10,
                              "end_line": 11,
                              "label": "# Reconstruct the query string without the 'schema' parameter\n    new_query = urlencode(query_params, doseq=True)",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 12,
                                  "end_line": 12,
                                  "label": "new_parsed_url = parsed_url._replace(query=new_query)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 13,
                                      "end_line": 13,
                                      "label": "database_url_clean = str(urlunparse(new_parsed_url))",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 14,
                                          "end_line": 14,
                                          "label": "return schema, database_url_clean",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "log",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "job_listener",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def job_listener(event):\n    \"\"\"Logs job execution outcomes for better monitoring.\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "if event.exception:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "log(f\"Job {event.job_id} failed.\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "else:\n        log(f\"Job {event.job_id} completed successfully.\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_execution_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def get_execution_client() -> ExecutionManager:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "return get_service_client(ExecutionManager)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "execute_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def execute_graph(**kwargs):\n    args = JobArgs(**kwargs)",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 7,
              "label": "try:\n        log(f\"Executing recurring job for graph #{args.graph_id}\")\n        get_execution_client().add_execution(\n            args.graph_id, args.input_data, args.user_id\n        )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 8,
                  "end_line": 9,
                  "label": "except Exception as e:\n        logger.exception(f\"Error executing graph {args.graph_id}: {e}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "JobArgs",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "class JobArgs(BaseModel):\n    graph_id: str\n    input_data: BlockInput\n    user_id: str\n    graph_version: int\n    cron: str",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "JobInfo",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class JobInfo(JobArgs):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 4,
              "label": "id: str\n    name: str\n    next_run_time: str",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "@staticmethod",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "from_db",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def from_db(job_args: JobArgs, job_obj: JobObj) -> \"JobInfo\":",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 7,
                  "label": "return JobInfo(\n            id=job_obj.id,\n            name=job_obj.name,\n            next_run_time=job_obj.next_run_time.isoformat(),\n            **job_args.model_dump(),\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "ExecutionScheduler",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class ExecutionScheduler(AppService):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "scheduler: BlockingScheduler",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "@classmethod",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "@property",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 5,
                          "end_line": 5,
                          "label": "@thread_cached",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 6,
                              "end_line": 6,
                              "label": "@expose",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 7,
                                  "end_line": 7,
                                  "label": "@expose",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 8,
                                      "end_line": 8,
                                      "label": "@expose",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "get_port",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def get_port(cls) -> int:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return config.execution_scheduler_port",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "execution_client",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def execution_client(self) -> ExecutionManager:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return get_service_client(ExecutionManager)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run_service",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def run_service(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "load_dotenv()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "db_schema, db_url = _extract_schema_from_url(os.getenv(\"DATABASE_URL\"))",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 11,
                          "label": "self.scheduler = BlockingScheduler(\n            jobstores={\n                \"default\": SQLAlchemyJobStore(\n                    engine=create_engine(db_url),\n                    metadata=MetaData(schema=db_schema),\n                )\n            }\n        )",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 12,
                              "end_line": 12,
                              "label": "self.scheduler.add_listener(job_listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 13,
                                  "end_line": 13,
                                  "label": "self.scheduler.start()",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "add_execution_schedule",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 8,
              "label": "def add_execution_schedule(\n        self,\n        graph_id: str,\n        graph_version: int,\n        cron: str,\n        input_data: BlockInput,\n        user_id: str,\n    ) -> JobInfo:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 9,
                  "end_line": 15,
                  "label": "job_args = JobArgs(\n            graph_id=graph_id,\n            input_data=input_data,\n            user_id=user_id,\n            graph_version=graph_version,\n            cron=cron,\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 16,
                      "end_line": 21,
                      "label": "job = self.scheduler.add_job(\n            execute_graph,\n            CronTrigger.from_crontab(cron),\n            kwargs=job_args.model_dump(),\n            replace_existing=True,\n        )",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 22,
                          "end_line": 22,
                          "label": "log(f\"Added job {job.id} with cron schedule '{cron}' input data: {input_data}\")",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 23,
                              "end_line": 23,
                              "label": "return JobInfo.from_db(job_args, job)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "delete_schedule",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def delete_schedule(self, schedule_id: str, user_id: str) -> JobInfo:\n        job = self.scheduler.get_job(schedule_id)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 5,
                  "label": "if not job:\n            log(f\"Job {schedule_id} not found.\")\n            raise ValueError(f\"Job #{schedule_id} not found.\")",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "job_args = JobArgs(**job.kwargs)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 7,
                          "end_line": 8,
                          "label": "if job_args.user_id != user_id:\n            raise ValueError(\"User ID does not match the job's user ID.\")",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 9,
                              "end_line": 10,
                              "label": "log(f\"Deleting job {schedule_id}\")\n        job.remove()",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 11,
                                  "end_line": 11,
                                  "label": "return JobInfo.from_db(job_args, job)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_execution_schedules",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def get_execution_schedules(\n        self, graph_id: str | None = None, user_id: str | None = None\n    ) -> list[JobInfo]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "schedules = []",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "for job in self.scheduler.get_jobs():",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "job_args = JobArgs(**job.kwargs)",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 7,
                              "end_line": 11,
                              "label": "if (\n                job.next_run_time is not None\n                and (graph_id is None or job_args.graph_id == graph_id)\n                and (user_id is None or job_args.user_id == user_id)\n            ):",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 12,
                                  "end_line": 12,
                                  "label": "schedules.append(JobInfo.from_db(job_args, job))",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}