{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "\"\"\"\nIn this problem, we want to determine all possible subsequences\nof the given sequence. We use backtracking to solve this problem.\nTime complexity: O(2^n),\nwhere n denotes the length of the given sequence.\n\"\"\"",
      "successors": [
        {
          "id": 2,
          "start_line": 7,
          "end_line": 8,
          "label": "from __future__ import annotations\nfrom typing import Any",
          "successors": [
            {
              "id": 3,
              "start_line": 9,
              "end_line": 9,
              "label": "if __name__ == \"__main__\":",
              "successors": [
                {
                  "id": 4,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "seq: list[Any] = [1, 2, 3]",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 11,
                      "end_line": 11,
                      "label": "generate_all_subsequences(seq)",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 12,
                          "end_line": 12,
                          "label": "seq.clear()",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 13,
                              "end_line": 13,
                              "label": "seq.extend([\"A\", \"B\", \"C\"])",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 14,
                                  "end_line": 14,
                                  "label": "generate_all_subsequences(seq)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "generate_all_subsequences",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def generate_all_subsequences(sequence: list[Any]) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "create_state_space_tree(sequence, [], 0)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_state_space_tree",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 53,
          "label": "def create_state_space_tree(\n    sequence: list[Any], current_subsequence: list[Any], index: int\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 54,
              "end_line": 54,
              "label": "if index == len(sequence):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 55,
                  "end_line": 56,
                  "label": "print(current_subsequence)\n        return",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 57,
                  "end_line": 57,
                  "label": "create_state_space_tree(sequence, current_subsequence, index + 1)",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 58,
                      "end_line": 58,
                      "label": "current_subsequence.append(sequence[index])",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 59,
                          "end_line": 59,
                          "label": "create_state_space_tree(sequence, current_subsequence, index + 1)",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 60,
                              "end_line": 60,
                              "label": "current_subsequence.pop()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}