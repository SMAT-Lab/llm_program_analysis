{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 13,
      "label": "import json\nimport os\nfrom enum import Enum\nfrom typing import Any, Dict, Generic, List, Set, Tuple, Type, TypeVar\nfrom pydantic import BaseModel, Field, PrivateAttr, ValidationInfo, field_validator\nfrom pydantic_settings import (\n    BaseSettings,\n    JsonConfigSettingsSource,\n    PydanticBaseSettingsSource,\n    SettingsConfigDict,\n)\nfrom backend.util.data import get_data_path\nT = TypeVar(\"T\", bound=BaseSettings)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "__setattr__",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def __setattr__(self, name: str, value) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if name in self.model_fields:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "self._updated_fields.add(name)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "super().__setattr__(name, value)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "super().__setattr__(name, value)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "mark_updated",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def mark_updated(self, field_name: str) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if field_name in self.model_fields:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "self._updated_fields.add(field_name)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "clear_updates",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def clear_updates(self) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "self._updated_fields.clear()",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_updates",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def get_updates(self) -> Dict[str, Any]:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "return {field: getattr(self, field) for field in self._updated_fields}",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "updated_fields",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "@property\n    def updated_fields(self):",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "return self._updated_fields",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "validate_platform_base_url",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def validate_platform_base_url(cls, v: str, info: ValidationInfo) -> str:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if not v:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return v",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "if not v.startswith((\"http://\", \"https://\")):",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 8,
                      "label": "raise ValueError(\n                f\"{info.field_name} must be a full URL \"\n                \"including a http:// or https:// schema\"\n            )",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 9,
                      "end_line": 9,
                      "label": "if v.endswith(\"/\"):",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "return v.rstrip(\"/\")  # Remove trailing slash",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "start_line": 11,
                          "end_line": 11,
                          "label": "return v",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "validate_cors_allow_origins",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "def validate_cors_allow_origins(cls, v: List[str]) -> List[str]:\n        out = []\n        port = None\n        has_localhost = False\n        has_127_0_0_1 = False",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "for url in v:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 8,
                  "label": "url = url.strip()\n            if url.startswith((\"http://\", \"https://\")):",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 9,
                      "end_line": 9,
                      "label": "if \"localhost\" in url:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 10,
                          "end_line": 11,
                          "label": "port = url.split(\":\")[2]\n                    has_localhost = True",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 12,
                          "end_line": 12,
                          "label": "if \"127.0.0.1\" in url:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 13,
                              "end_line": 14,
                              "label": "port = url.split(\":\")[2]\n                    has_127_0_0_1 = True",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "start_line": 15,
                      "end_line": 15,
                      "label": "out.append(url)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 9,
                  "start_line": 16,
                  "end_line": 17,
                  "label": "else:\n                raise ValueError(f\"Invalid URL: {url}\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 10,
              "start_line": 18,
              "end_line": 18,
              "label": "if has_127_0_0_1 and not has_localhost:",
              "successors": [
                {
                  "id": 11,
                  "start_line": 19,
                  "end_line": 19,
                  "label": "out.append(f\"http://localhost:{port}\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 12,
              "start_line": 20,
              "end_line": 20,
              "label": "if has_localhost and not has_127_0_0_1:",
              "successors": [
                {
                  "id": 13,
                  "start_line": 21,
                  "end_line": 21,
                  "label": "out.append(f\"http://127.0.0.1:{port}\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 14,
              "start_line": 22,
              "end_line": 22,
              "label": "return out",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "settings_customise_sources",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 8,
          "label": "def settings_customise_sources(\n        cls,\n        settings_cls: Type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:",
          "successors": [
            {
              "id": 2,
              "start_line": 9,
              "end_line": 15,
              "label": "return (\n            env_settings,\n            file_secret_settings,\n            dotenv_settings,\n            JsonConfigSettingsSource(settings_cls),\n            init_settings,\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "save",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def save(self) -> None:\n        # Save updated config to JSON file",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "if self.config.updated_fields:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 5,
                  "label": "config_to_save = self.config.get_updates()\n            config_path = os.path.join(get_data_path(), \"config.json\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "if os.path.exists(config_path):",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 7,
                          "end_line": 12,
                          "label": "with open(config_path, \"r+\") as f:\n                    existing_config: Dict[str, Any] = json.load(f)\n                    existing_config.update(config_to_save)\n                    f.seek(0)\n                    json.dump(existing_config, f, indent=2)\n                    f.truncate()",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 13,
                          "end_line": 15,
                          "label": "else:\n                with open(config_path, \"w\") as f:\n                    json.dump(config_to_save, f, indent=2)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 7,
          "start_line": 16,
          "end_line": 16,
          "label": "self.config.clear_updates()",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "AppEnvironment",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class AppEnvironment(str, Enum):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "LOCAL = \"local\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "DEVELOPMENT = \"dev\"",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "PRODUCTION = \"prod\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "BehaveAs",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class BehaveAs(str, Enum):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "LOCAL = \"local\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "CLOUD = \"cloud\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "UpdateTrackingModel",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "class UpdateTrackingModel(BaseModel, Generic[T]):\n    _updated_fields: Set[str] = PrivateAttr(default_factory=set)",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__setattr__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __setattr__(self, name: str, value) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "if name in self.model_fields:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "self._updated_fields.add(name)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "super().__setattr__(name, value)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "super().__setattr__(name, value)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "mark_updated",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def mark_updated(self, field_name: str) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "if field_name in self.model_fields:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "self._updated_fields.add(field_name)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "clear_updates",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def clear_updates(self) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "self._updated_fields.clear()",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_updates",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def get_updates(self) -> Dict[str, Any]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return {field: getattr(self, field) for field in self._updated_fields}",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "updated_fields",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "@property\n    def updated_fields(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return self._updated_fields",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Config",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 111,
          "label": "class Config(UpdateTrackingModel[\"Config\"], BaseSettings):\n    \"\"\"Config for the server.\"\"\"\n    num_graph_workers: int = Field(\n        default=10,\n        ge=1,\n        le=1000,\n        description=\"Maximum number of workers to use for graph execution.\",\n    )\n    num_node_workers: int = Field(\n        default=5,\n        ge=1,\n        le=1000,\n        description=\"Maximum number of workers to use for node execution within a single graph.\",\n    )\n    pyro_host: str = Field(\n        default=\"localhost\",\n        description=\"The default hostname of the Pyro server.\",\n    )\n    pyro_client_comm_timeout: float = Field(\n        default=15,\n        description=\"The default timeout in seconds, for Pyro client connections.\",\n    )\n    pyro_client_comm_retry: int = Field(\n        default=3,\n        description=\"The default number of retries for Pyro client connections.\",\n    )\n    enable_auth: bool = Field(\n        default=True,\n        description=\"If authentication is enabled or not\",\n    )\n    enable_credit: str = Field(\n        default=\"false\",\n        description=\"If user credit system is enabled or not\",\n    )\n    num_user_credits_refill: int = Field(\n        default=1500,\n        description=\"Number of credits to refill for each user\",\n    )\n    # Add more configuration fields as needed\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        extra=\"allow\",\n    )\n    websocket_server_host: str = Field(\n        default=\"0.0.0.0\",\n        description=\"The host for the websocket server to run on\",\n    )\n    websocket_server_port: int = Field(\n        default=8001,\n        description=\"The port for the websocket server to run on\",\n    )\n    execution_manager_port: int = Field(\n        default=8002,\n        description=\"The port for execution manager daemon to run on\",\n    )\n    execution_scheduler_port: int = Field(\n        default=8003,\n        description=\"The port for execution scheduler daemon to run on\",\n    )\n    agent_server_port: int = Field(\n        default=8004,\n        description=\"The port for agent server daemon to run on\",\n    )\n    database_api_port: int = Field(\n        default=8005,\n        description=\"The port for database server API to run on\",\n    )\n    agent_api_host: str = Field(\n        default=\"0.0.0.0\",\n        description=\"The host for agent server API to run on\",\n    )\n    agent_api_port: int = Field(\n        default=8006,\n        description=\"The port for agent server API to run on\",\n    )\n    platform_base_url: str = Field(\n        default=\"\",\n        description=\"Must be set so the application knows where it's hosted at. \"\n        \"This is necessary to make sure webhooks find their way.\",\n    )\n    frontend_base_url: str = Field(\n        default=\"\",\n        description=\"Can be used to explicitly set the base URL for the frontend. \"\n        \"This value is then used to generate redirect URLs for OAuth flows.\",\n    )\n    media_gcs_bucket_name: str = Field(\n        default=\"\",\n        description=\"The name of the Google Cloud Storage bucket for media files\",\n    )\n    @field_validator(\"platform_base_url\", \"frontend_base_url\")\n    @classmethod\n    app_env: AppEnvironment = Field(\n        default=AppEnvironment.LOCAL,\n        description=\"The name of the app environment: local or dev or prod\",\n    )\n    behave_as: BehaveAs = Field(\n        default=BehaveAs.LOCAL,\n        description=\"What environment to behave as: local or cloud\",\n    )\n    execution_event_bus_name: str = Field(\n        default=\"execution_event\",\n        description=\"Name of the event bus\",\n    )\n    trust_endpoints_for_requests: List[str] = Field(\n        default_factory=list,\n        description=\"A whitelist of trusted internal endpoints for the backend to make requests to.\",\n    )\n    backend_cors_allow_origins: List[str] = Field(default_factory=list)\n    @field_validator(\"backend_cors_allow_origins\")\n    @classmethod\n    @classmethod",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "validate_platform_base_url",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def validate_platform_base_url(cls, v: str, info: ValidationInfo) -> str:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "if not v:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "return v",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "if not v.startswith((\"http://\", \"https://\")):",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 5,
                          "end_line": 8,
                          "label": "raise ValueError(\n                f\"{info.field_name} must be a full URL \"\n                \"including a http:// or https:// schema\"\n            )",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 9,
                          "end_line": 9,
                          "label": "if v.endswith(\"/\"):",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 10,
                              "end_line": 10,
                              "label": "return v.rstrip(\"/\")  # Remove trailing slash",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "start_line": 11,
                              "end_line": 11,
                              "label": "return v",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "validate_cors_allow_origins",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def validate_cors_allow_origins(cls, v: List[str]) -> List[str]:\n        out = []\n        port = None\n        has_localhost = False\n        has_127_0_0_1 = False",
              "successors": [
                {
                  "id": 2,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "for url in v:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 7,
                      "end_line": 8,
                      "label": "url = url.strip()\n            if url.startswith((\"http://\", \"https://\")):",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 9,
                          "end_line": 9,
                          "label": "if \"localhost\" in url:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 10,
                              "end_line": 11,
                              "label": "port = url.split(\":\")[2]\n                    has_localhost = True",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "start_line": 12,
                              "end_line": 12,
                              "label": "if \"127.0.0.1\" in url:",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 13,
                                  "end_line": 14,
                                  "label": "port = url.split(\":\")[2]\n                    has_127_0_0_1 = True",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "out.append(url)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "start_line": 16,
                      "end_line": 17,
                      "label": "else:\n                raise ValueError(f\"Invalid URL: {url}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 10,
                  "start_line": 18,
                  "end_line": 18,
                  "label": "if has_127_0_0_1 and not has_localhost:",
                  "successors": [
                    {
                      "id": 11,
                      "start_line": 19,
                      "end_line": 19,
                      "label": "out.append(f\"http://localhost:{port}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 12,
                  "start_line": 20,
                  "end_line": 20,
                  "label": "if has_localhost and not has_127_0_0_1:",
                  "successors": [
                    {
                      "id": 13,
                      "start_line": 21,
                      "end_line": 21,
                      "label": "out.append(f\"http://127.0.0.1:{port}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 14,
                  "start_line": 22,
                  "end_line": 22,
                  "label": "return out",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "settings_customise_sources",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 8,
              "label": "def settings_customise_sources(\n        cls,\n        settings_cls: Type[BaseSettings],\n        init_settings: PydanticBaseSettingsSource,\n        env_settings: PydanticBaseSettingsSource,\n        dotenv_settings: PydanticBaseSettingsSource,\n        file_secret_settings: PydanticBaseSettingsSource,\n    ) -> Tuple[PydanticBaseSettingsSource, ...]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 9,
                  "end_line": 15,
                  "label": "return (\n            env_settings,\n            file_secret_settings,\n            dotenv_settings,\n            JsonConfigSettingsSource(settings_cls),\n            init_settings,\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Secrets",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class Secrets(UpdateTrackingModel[\"Secrets\"], BaseSettings):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 56,
              "label": "\"\"\"Secrets for the server.\"\"\"\n    supabase_url: str = Field(default=\"\", description=\"Supabase URL\")\n    supabase_service_role_key: str = Field(\n        default=\"\", description=\"Supabase service role key\"\n    )\n    encryption_key: str = Field(default=\"\", description=\"Encryption key\")\n    # OAuth server credentials for integrations\n    # --8<-- [start:OAuthServerCredentialsExample]\n    github_client_id: str = Field(default=\"\", description=\"GitHub OAuth client ID\")\n    github_client_secret: str = Field(\n        default=\"\", description=\"GitHub OAuth client secret\"\n    )\n    # --8<-- [end:OAuthServerCredentialsExample]\n    google_client_id: str = Field(default=\"\", description=\"Google OAuth client ID\")\n    google_client_secret: str = Field(\n        default=\"\", description=\"Google OAuth client secret\"\n    )\n    notion_client_id: str = Field(default=\"\", description=\"Notion OAuth client ID\")\n    notion_client_secret: str = Field(\n        default=\"\", description=\"Notion OAuth client secret\"\n    )\n    openai_api_key: str = Field(default=\"\", description=\"OpenAI API key\")\n    anthropic_api_key: str = Field(default=\"\", description=\"Anthropic API key\")\n    groq_api_key: str = Field(default=\"\", description=\"Groq API key\")\n    open_router_api_key: str = Field(default=\"\", description=\"Open Router API Key\")\n    reddit_client_id: str = Field(default=\"\", description=\"Reddit client ID\")\n    reddit_client_secret: str = Field(default=\"\", description=\"Reddit client secret\")\n    reddit_username: str = Field(default=\"\", description=\"Reddit username\")\n    reddit_password: str = Field(default=\"\", description=\"Reddit password\")\n    openweathermap_api_key: str = Field(\n        default=\"\", description=\"OpenWeatherMap API key\"\n    )\n    medium_api_key: str = Field(default=\"\", description=\"Medium API key\")\n    medium_author_id: str = Field(default=\"\", description=\"Medium author ID\")\n    did_api_key: str = Field(default=\"\", description=\"D-ID API Key\")\n    revid_api_key: str = Field(default=\"\", description=\"revid.ai API key\")\n    discord_bot_token: str = Field(default=\"\", description=\"Discord bot token\")\n    smtp_server: str = Field(default=\"\", description=\"SMTP server IP\")\n    smtp_port: str = Field(default=\"\", description=\"SMTP server port\")\n    smtp_username: str = Field(default=\"\", description=\"SMTP username\")\n    smtp_password: str = Field(default=\"\", description=\"SMTP password\")\n    sentry_dsn: str = Field(default=\"\", description=\"Sentry DSN\")\n    google_maps_api_key: str = Field(default=\"\", description=\"Google Maps API Key\")\n    replicate_api_key: str = Field(default=\"\", description=\"Replicate API Key\")\n    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")\n    ideogram_api_key: str = Field(default=\"\", description=\"Ideogram API Key\")\n    jina_api_key: str = Field(default=\"\", description=\"Jina API Key\")\n    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")\n    fal_key: str = Field(default=\"\", description=\"FAL API key\")\n    # Add more secret fields as needed\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"allow\",\n    )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "Settings",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "class Settings(BaseModel):\n    config: Config = Config()\n    secrets: Secrets = Secrets()",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "save",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def save(self) -> None:\n        # Save updated config to JSON file",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "if self.config.updated_fields:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 5,
                      "label": "config_to_save = self.config.get_updates()\n            config_path = os.path.join(get_data_path(), \"config.json\")",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "if os.path.exists(config_path):",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 7,
                              "end_line": 12,
                              "label": "with open(config_path, \"r+\") as f:\n                    existing_config: Dict[str, Any] = json.load(f)\n                    existing_config.update(config_to_save)\n                    f.seek(0)\n                    json.dump(existing_config, f, indent=2)\n                    f.truncate()",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "start_line": 13,
                              "end_line": 15,
                              "label": "else:\n                with open(config_path, \"w\") as f:\n                    json.dump(config_to_save, f, indent=2)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "start_line": 16,
              "end_line": 16,
              "label": "self.config.clear_updates()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}