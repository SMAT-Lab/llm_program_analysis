{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 3,
          "label": "import doctest\n    doctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "gray_code",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 28,
          "label": "def gray_code(bit_count: int) -> list:\n    \"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n    >>> gray_code(1)\n    [0, 1]\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The given input must be positive\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 29,
              "end_line": 29,
              "label": "# bit count represents no. of bits in the gray code",
              "successors": [
                {
                  "id": 3,
                  "start_line": 30,
                  "end_line": 31,
                  "label": "if bit_count < 0:\n        raise ValueError(\"The given input must be positive\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 32,
                      "end_line": 33,
                      "label": "# get the generated string sequence\n    sequence = gray_code_sequence_string(bit_count)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 34,
                          "end_line": 35,
                          "label": "#\n    # convert them to integers",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 36,
                              "end_line": 37,
                              "label": "for i in range(len(sequence)):\n        sequence[i] = int(sequence[i], 2)",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 38,
                                  "end_line": 38,
                                  "label": "return sequence",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "gray_code_sequence_string",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 11,
          "label": "def gray_code_sequence_string(bit_count: int) -> list:\n    \"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \"\"\"\n    # The approach is a recursive one\n    # Base case achieved when either n = 0 or n=1",
          "successors": [
            {
              "id": 2,
              "start_line": 12,
              "end_line": 13,
              "label": "if bit_count == 0:\n        return [\"0\"]",
              "successors": []
            },
            {
              "id": 3,
              "start_line": 14,
              "end_line": 15,
              "label": "if bit_count == 1:\n        return [\"0\", \"1\"]",
              "successors": []
            }
          ]
        },
        {
          "id": 2,
          "start_line": 12,
          "end_line": 13,
          "label": "if bit_count == 0:\n        return [\"0\"]",
          "successors": []
        },
        {
          "id": 3,
          "start_line": 14,
          "end_line": 15,
          "label": "if bit_count == 1:\n        return [\"0\", \"1\"]",
          "successors": []
        },
        {
          "id": 4,
          "start_line": 16,
          "end_line": 19,
          "label": "seq_len = 1 << bit_count  # defines the length of the sequence\n    # 1<< n is equivalent to 2^n\n    # recursive answer will generate answer for n-1 bits\n    smaller_sequence = gray_code_sequence_string(bit_count - 1)",
          "successors": [
            {
              "id": 5,
              "start_line": 20,
              "end_line": 24,
              "label": "sequence = []\n    # append 0 to first half of the smaller sequence generated\n    for i in range(seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)",
              "successors": [
                {
                  "id": 6,
                  "start_line": 25,
                  "end_line": 28,
                  "label": "# append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "id": 5,
          "start_line": 20,
          "end_line": 24,
          "label": "sequence = []\n    # append 0 to first half of the smaller sequence generated\n    for i in range(seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)",
          "successors": [
            {
              "id": 6,
              "start_line": 25,
              "end_line": 28,
              "label": "# append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)",
              "successors": []
            }
          ]
        },
        {
          "id": 6,
          "start_line": 25,
          "end_line": 28,
          "label": "# append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}