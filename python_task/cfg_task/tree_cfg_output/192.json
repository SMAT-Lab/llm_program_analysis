{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 5,
      "label": "import operator\nfrom enum import Enum\nfrom typing import Any\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "Operation",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "class Operation(Enum):\n    ADD = \"Add\"\n    SUBTRACT = \"Subtract\"\n    MULTIPLY = \"Multiply\"\n    DIVIDE = \"Divide\"\n    POWER = \"Power\"",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "CalculatorBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class CalculatorBlock(Block):",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 17,
                  "label": "super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 12,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n        op_func = operations[operation]",
              "successors": [
                {
                  "id": 2,
                  "start_line": 13,
                  "end_line": 19,
                  "label": "try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n            result = op_func(a, b)\n            if input_data.round_result:\n                result = round(result)\n            yield \"result\", result",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 20,
                      "end_line": 21,
                      "label": "except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 22,
                      "end_line": 23,
                      "label": "except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 15,
              "label": "class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "CountItemsBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class CountItemsBlock(Block):",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 12,
              "label": "def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "if isinstance(collection, (str, list, tuple, set, dict)):",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 5,
                          "end_line": 5,
                          "label": "count = len(collection)",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 10,
                              "end_line": 10,
                              "label": "yield \"count\", count",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "elif hasattr(collection, \"__iter__\"):",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 7,
                              "end_line": 7,
                              "label": "count = sum(1 for _ in collection)",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 10,
                                  "end_line": 10,
                                  "label": "yield \"count\", count",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "start_line": 8,
                          "end_line": 8,
                          "label": "else:",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 9,
                              "end_line": 9,
                              "label": "raise ValueError(\"Input is not a countable collection\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "except Exception:",
                  "successors": [
                    {
                      "id": 11,
                      "start_line": 12,
                      "end_line": 12,
                      "label": "yield \"count\", -1  # Return -1 to indicate an error",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}