{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 56,
      "label": "from enum import Enum\nfrom typing import Literal\nimport replicate\nfrom pydantic import SecretStr\nfrom replicate.helpers import FileOutput\nfrom backend.data.block import Block, BlockCategory, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n# Mapping semantic sizes to model-specific formats\nSIZE_TO_SD_RATIO = {\n    ImageSize.SQUARE: \"1:1\",\n    ImageSize.LANDSCAPE: \"4:3\",\n    ImageSize.PORTRAIT: \"3:4\",\n    ImageSize.WIDE: \"16:9\",\n    ImageSize.TALL: \"9:16\",\n}\nSIZE_TO_FLUX_RATIO = {\n    ImageSize.SQUARE: \"1:1\",\n    ImageSize.LANDSCAPE: \"4:3\",\n    ImageSize.PORTRAIT: \"3:4\",\n    ImageSize.WIDE: \"16:9\",\n    ImageSize.TALL: \"9:16\",\n}\nSIZE_TO_FLUX_DIMENSIONS = {\n    ImageSize.SQUARE: (1024, 1024),\n    ImageSize.LANDSCAPE: (1365, 1024),\n    ImageSize.PORTRAIT: (1024, 1365),\n    ImageSize.WIDE: (1440, 810),  # Adjusted to maintain 16:9 within 1440 limit\n    ImageSize.TALL: (810, 1440),  # Adjusted to maintain 9:16 within 1440 limit\n}\nSIZE_TO_RECRAFT_DIMENSIONS = {\n    ImageSize.SQUARE: \"1024x1024\",\n    ImageSize.LANDSCAPE: \"1365x1024\",\n    ImageSize.PORTRAIT: \"1024x1365\",\n    ImageSize.WIDE: \"1536x1024\",\n    ImageSize.TALL: \"1024x1536\",\n}\n# Test credentials stay the same\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "_run_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def _run_client(\n        self, credentials: APIKeyCredentials, model_name: str, input_params: dict\n    ):",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 8,
                  "label": "# Initialize Replicate client\n            client = replicate.Client(api_token=credentials.api_key.get_secret_value())\n            # Run the model with input parameters\n            output = client.run(model_name, input=input_params, wait=False)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 9,
                      "end_line": 10,
                      "label": "# Process output\n            if isinstance(output, list) and len(output) > 0:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 11,
                          "end_line": 11,
                          "label": "if isinstance(output[0], FileOutput):",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 12,
                              "end_line": 12,
                              "label": "result_url = output[0].url",
                              "successors": []
                            },
                            {
                              "id": 7,
                              "start_line": 14,
                              "end_line": 14,
                              "label": "result_url = output[0]",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "elif isinstance(output, FileOutput):",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 16,
                              "end_line": 16,
                              "label": "result_url = output.url",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 10,
                          "start_line": 17,
                          "end_line": 17,
                          "label": "elif isinstance(output, str):",
                          "successors": [
                            {
                              "id": 11,
                              "start_line": 18,
                              "end_line": 18,
                              "label": "result_url = output",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 12,
                          "start_line": 19,
                          "end_line": 19,
                          "label": "else:",
                          "successors": [
                            {
                              "id": 13,
                              "start_line": 20,
                              "end_line": 20,
                              "label": "result_url = None",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 14,
              "start_line": 22,
              "end_line": 22,
              "label": "except TypeError as e:",
              "successors": [
                {
                  "id": 15,
                  "start_line": 23,
                  "end_line": 23,
                  "label": "raise TypeError(f\"Error during model execution: {e}\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 16,
              "start_line": 24,
              "end_line": 24,
              "label": "except Exception as e:",
              "successors": [
                {
                  "id": 17,
                  "start_line": 25,
                  "end_line": 25,
                  "label": "raise RuntimeError(f\"Unexpected error during model execution: {e}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "generate_image",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def generate_image(self, input_data: Input, credentials: APIKeyCredentials):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 4,
                  "label": "# Handle style-based prompt modification for models without native style support\n            modified_prompt = input_data.prompt",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "if input_data.model not in [ImageGenModel.RECRAFT]:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 6,
                          "end_line": 7,
                          "label": "style_prefix = self._style_to_prompt_prefix(input_data.style)\n                modified_prompt = f\"{style_prefix} {modified_prompt}\".strip()",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "if input_data.model == ImageGenModel.SD3_5:",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 9,
                                  "end_line": 23,
                                  "label": "# Use Stable Diffusion 3.5 with aspect ratio\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"aspect_ratio\": SIZE_TO_SD_RATIO[input_data.size],\n                    \"output_format\": \"webp\",\n                    \"output_quality\": 90,\n                    \"steps\": 40,\n                    \"cfg_scale\": 7.0,\n                }\n                output = self._run_client(\n                    credentials,\n                    \"stability-ai/stable-diffusion-3.5-medium\",\n                    input_params,\n                )\n                return output",
                                  "successors": []
                                },
                                {
                                  "id": 8,
                                  "start_line": 24,
                                  "end_line": 24,
                                  "label": "elif input_data.model == ImageGenModel.FLUX:",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 25,
                                      "end_line": 38,
                                      "label": "# Use Flux-specific dimensions with 'jpg' format to avoid ReplicateError\n                width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"width\": width,\n                    \"height\": height,\n                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],\n                    \"output_format\": \"jpg\",  # Set to jpg for Flux models\n                    \"output_quality\": 90,\n                }\n                output = self._run_client(\n                    credentials, \"black-forest-labs/flux-1.1-pro\", input_params\n                )\n                return output",
                                      "successors": []
                                    },
                                    {
                                      "id": 10,
                                      "start_line": 39,
                                      "end_line": 39,
                                      "label": "elif input_data.model == ImageGenModel.FLUX_ULTRA:",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "start_line": 40,
                                          "end_line": 52,
                                          "label": "width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"width\": width,\n                    \"height\": height,\n                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],\n                    \"output_format\": \"jpg\",\n                    \"output_quality\": 90,\n                }\n                output = self._run_client(\n                    credentials, \"black-forest-labs/flux-1.1-pro-ultra\", input_params\n                )\n                return output",
                                          "successors": []
                                        },
                                        {
                                          "id": 12,
                                          "start_line": 53,
                                          "end_line": 53,
                                          "label": "elif input_data.model == ImageGenModel.RECRAFT:",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "start_line": 54,
                                              "end_line": 62,
                                              "label": "input_params = {\n                    \"prompt\": input_data.prompt,\n                    \"size\": SIZE_TO_RECRAFT_DIMENSIONS[input_data.size],\n                    \"style\": input_data.style.value,\n                }\n                output = self._run_client(\n                    credentials, \"recraft-ai/recraft-v3\", input_params\n                )\n                return output",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 14,
          "start_line": 63,
          "end_line": 64,
          "label": "except Exception as e:\n            raise RuntimeError(f\"Failed to generate image: {str(e)}\")",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "_style_to_prompt_prefix",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def _style_to_prompt_prefix(self, style: ImageStyle) -> str:\n        \"\"\"\n        Convert a style enum to a prompt prefix for models without native style support.\n        \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 5,
              "label": "if style == ImageStyle.ANY:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "return \"\"",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 7,
                  "end_line": 26,
                  "label": "style_map = {\n            ImageStyle.REALISTIC: \"photorealistic\",\n            ImageStyle.REALISTIC_BW: \"black and white photograph\",\n            ImageStyle.REALISTIC_HDR: \"HDR photograph\",\n            ImageStyle.REALISTIC_NATURAL: \"natural light photograph\",\n            ImageStyle.REALISTIC_STUDIO: \"studio portrait photograph\",\n            ImageStyle.REALISTIC_ENTERPRISE: \"enterprise photograph\",\n            ImageStyle.REALISTIC_HARD_FLASH: \"hard flash photograph\",\n            ImageStyle.REALISTIC_MOTION_BLUR: \"motion blur photograph\",\n            ImageStyle.DIGITAL_ART: \"digital art\",\n            ImageStyle.PIXEL_ART: \"pixel art\",\n            ImageStyle.HAND_DRAWN: \"hand drawn illustration\",\n            ImageStyle.GRAIN: \"grainy digital illustration\",\n            ImageStyle.SKETCH: \"sketchy illustration\",\n            ImageStyle.POSTER: \"2D art poster\",\n            ImageStyle.POSTER_2: \"alternate 2D art poster\",\n            ImageStyle.HANDMADE_3D: \"handmade 3D illustration\",\n            ImageStyle.HAND_DRAWN_OUTLINE: \"hand drawn outline illustration\",\n            ImageStyle.ENGRAVING_COLOR: \"color engraving illustration\",\n        }",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 27,
                      "end_line": 27,
                      "label": "style_text = style_map.get(style, \"\")",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 28,
                          "end_line": 28,
                          "label": "return f\"{style_text} of\" if style_text else \"\"",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "run",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "url = self.generate_image(input_data, credentials)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "if url:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 5,
                          "end_line": 5,
                          "label": "yield \"image_url\", url",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "else:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 7,
                              "end_line": 7,
                              "label": "yield \"error\", \"Image generation returned an empty result.\"",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "except Exception as e:",
                  "successors": [
                    {
                      "id": 9,
                      "start_line": 9,
                      "end_line": 9,
                      "label": "# Capture and return only the message of the exception, avoiding serialization of non-serializable objects",
                      "successors": [
                        {
                          "id": 10,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "yield \"error\", str(e)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "ImageSize",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "ImageStyle",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class ImageStyle(str, Enum):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 4,
              "label": "\"\"\"\n    Complete set of supported styles\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "ANY = \"any\"",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "# Realistic image styles",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "REALISTIC = \"realistic_image\"",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "REALISTIC_BW = \"realistic_image/b_and_w\"",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 9,
                                  "end_line": 9,
                                  "label": "REALISTIC_HDR = \"realistic_image/hdr\"",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 10,
                                      "end_line": 10,
                                      "label": "REALISTIC_NATURAL = \"realistic_image/natural_light\"",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 11,
                                          "end_line": 11,
                                          "label": "REALISTIC_STUDIO = \"realistic_image/studio_portrait\"",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 12,
                                              "end_line": 12,
                                              "label": "REALISTIC_ENTERPRISE = \"realistic_image/enterprise\"",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 13,
                                                  "end_line": 13,
                                                  "label": "REALISTIC_HARD_FLASH = \"realistic_image/hard_flash\"",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "start_line": 14,
                                                      "end_line": 14,
                                                      "label": "REALISTIC_MOTION_BLUR = \"realistic_image/motion_blur\"",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "start_line": 15,
                                                          "end_line": 15,
                                                          "label": "# Digital illustration styles",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "start_line": 16,
                                                              "end_line": 16,
                                                              "label": "DIGITAL_ART = \"digital_illustration\"",
                                                              "successors": [
                                                                {
                                                                  "id": 15,
                                                                  "start_line": 17,
                                                                  "end_line": 17,
                                                                  "label": "PIXEL_ART = \"digital_illustration/pixel_art\"",
                                                                  "successors": [
                                                                    {
                                                                      "id": 16,
                                                                      "start_line": 18,
                                                                      "end_line": 18,
                                                                      "label": "HAND_DRAWN = \"digital_illustration/hand_drawn\"",
                                                                      "successors": [
                                                                        {
                                                                          "id": 17,
                                                                          "start_line": 19,
                                                                          "end_line": 19,
                                                                          "label": "GRAIN = \"digital_illustration/grain\"",
                                                                          "successors": [
                                                                            {
                                                                              "id": 18,
                                                                              "start_line": 20,
                                                                              "end_line": 20,
                                                                              "label": "SKETCH = \"digital_illustration/infantile_sketch\"",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 19,
                                                                                  "start_line": 21,
                                                                                  "end_line": 21,
                                                                                  "label": "POSTER = \"digital_illustration/2d_art_poster\"",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 20,
                                                                                      "start_line": 22,
                                                                                      "end_line": 22,
                                                                                      "label": "POSTER_2 = \"digital_illustration/2d_art_poster_2\"",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 21,
                                                                                          "start_line": 23,
                                                                                          "end_line": 23,
                                                                                          "label": "HANDMADE_3D = \"digital_illustration/handmade_3d\"",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 22,
                                                                                              "start_line": 24,
                                                                                              "end_line": 24,
                                                                                              "label": "HAND_DRAWN_OUTLINE = \"digital_illustration/hand_drawn_outline\"",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 23,
                                                                                                  "start_line": 25,
                                                                                                  "end_line": 25,
                                                                                                  "label": "ENGRAVING_COLOR = \"digital_illustration/engraving_color\"",
                                                                                                  "successors": []
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ImageGenModel",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 8,
          "label": "class ImageGenModel(str, Enum):\n    \"\"\"\n    Available model providers\n    \"\"\"\n    FLUX = \"Flux 1.1 Pro\"\n    FLUX_ULTRA = \"Flux 1.1 Pro Ultra\"\n    RECRAFT = \"Recraft v3\"\n    SD3_5 = \"Stable Diffusion 3.5 Medium\"",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AIImageGeneratorBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class AIImageGeneratorBlock(Block):",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 25,
                  "label": "super().__init__(\n            id=\"ed1ae7a0-b770-4089-b520-1f0005fad19a\",\n            description=\"Generate images using various AI models through a unified interface\",\n            categories={BlockCategory.AI},\n            input_schema=AIImageGeneratorBlock.Input,\n            output_schema=AIImageGeneratorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"prompt\": \"An octopus using a laptop in a snowy forest with 'AutoGPT' clearly visible on the screen\",\n                \"model\": ImageGenModel.RECRAFT,\n                \"size\": ImageSize.SQUARE,\n                \"style\": ImageStyle.REALISTIC,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"image_url\",\n                    \"https://replicate.delivery/generated-image.webp\",\n                ),\n            ],\n            test_mock={\n                \"_run_client\": lambda *args, **kwargs: \"https://replicate.delivery/generated-image.webp\"\n            },\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_run_client",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def _run_client(\n        self, credentials: APIKeyCredentials, model_name: str, input_params: dict\n    ):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 8,
                      "label": "# Initialize Replicate client\n            client = replicate.Client(api_token=credentials.api_key.get_secret_value())\n            # Run the model with input parameters\n            output = client.run(model_name, input=input_params, wait=False)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 9,
                          "end_line": 10,
                          "label": "# Process output\n            if isinstance(output, list) and len(output) > 0:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 11,
                              "end_line": 11,
                              "label": "if isinstance(output[0], FileOutput):",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 12,
                                  "end_line": 12,
                                  "label": "result_url = output[0].url",
                                  "successors": []
                                },
                                {
                                  "id": 7,
                                  "start_line": 14,
                                  "end_line": 14,
                                  "label": "result_url = output[0]",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "start_line": 15,
                              "end_line": 15,
                              "label": "elif isinstance(output, FileOutput):",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 16,
                                  "end_line": 16,
                                  "label": "result_url = output.url",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 10,
                              "start_line": 17,
                              "end_line": 17,
                              "label": "elif isinstance(output, str):",
                              "successors": [
                                {
                                  "id": 11,
                                  "start_line": 18,
                                  "end_line": 18,
                                  "label": "result_url = output",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 12,
                              "start_line": 19,
                              "end_line": 19,
                              "label": "else:",
                              "successors": [
                                {
                                  "id": 13,
                                  "start_line": 20,
                                  "end_line": 20,
                                  "label": "result_url = None",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 14,
              "start_line": 22,
              "end_line": 22,
              "label": "except TypeError as e:",
              "successors": [
                {
                  "id": 15,
                  "start_line": 23,
                  "end_line": 23,
                  "label": "raise TypeError(f\"Error during model execution: {e}\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 16,
              "start_line": 24,
              "end_line": 24,
              "label": "except Exception as e:",
              "successors": [
                {
                  "id": 17,
                  "start_line": 25,
                  "end_line": 25,
                  "label": "raise RuntimeError(f\"Unexpected error during model execution: {e}\")",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "generate_image",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def generate_image(self, input_data: Input, credentials: APIKeyCredentials):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 4,
                      "label": "# Handle style-based prompt modification for models without native style support\n            modified_prompt = input_data.prompt",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 5,
                          "end_line": 5,
                          "label": "if input_data.model not in [ImageGenModel.RECRAFT]:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 6,
                              "end_line": 7,
                              "label": "style_prefix = self._style_to_prompt_prefix(input_data.style)\n                modified_prompt = f\"{style_prefix} {modified_prompt}\".strip()",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "if input_data.model == ImageGenModel.SD3_5:",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 9,
                                  "end_line": 23,
                                  "label": "# Use Stable Diffusion 3.5 with aspect ratio\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"aspect_ratio\": SIZE_TO_SD_RATIO[input_data.size],\n                    \"output_format\": \"webp\",\n                    \"output_quality\": 90,\n                    \"steps\": 40,\n                    \"cfg_scale\": 7.0,\n                }\n                output = self._run_client(\n                    credentials,\n                    \"stability-ai/stable-diffusion-3.5-medium\",\n                    input_params,\n                )\n                return output",
                                  "successors": []
                                },
                                {
                                  "id": 8,
                                  "start_line": 24,
                                  "end_line": 24,
                                  "label": "elif input_data.model == ImageGenModel.FLUX:",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 25,
                                      "end_line": 38,
                                      "label": "# Use Flux-specific dimensions with 'jpg' format to avoid ReplicateError\n                width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"width\": width,\n                    \"height\": height,\n                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],\n                    \"output_format\": \"jpg\",  # Set to jpg for Flux models\n                    \"output_quality\": 90,\n                }\n                output = self._run_client(\n                    credentials, \"black-forest-labs/flux-1.1-pro\", input_params\n                )\n                return output",
                                      "successors": []
                                    },
                                    {
                                      "id": 10,
                                      "start_line": 39,
                                      "end_line": 39,
                                      "label": "elif input_data.model == ImageGenModel.FLUX_ULTRA:",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "start_line": 40,
                                          "end_line": 52,
                                          "label": "width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"width\": width,\n                    \"height\": height,\n                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],\n                    \"output_format\": \"jpg\",\n                    \"output_quality\": 90,\n                }\n                output = self._run_client(\n                    credentials, \"black-forest-labs/flux-1.1-pro-ultra\", input_params\n                )\n                return output",
                                          "successors": []
                                        },
                                        {
                                          "id": 12,
                                          "start_line": 53,
                                          "end_line": 53,
                                          "label": "elif input_data.model == ImageGenModel.RECRAFT:",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "start_line": 54,
                                              "end_line": 62,
                                              "label": "input_params = {\n                    \"prompt\": input_data.prompt,\n                    \"size\": SIZE_TO_RECRAFT_DIMENSIONS[input_data.size],\n                    \"style\": input_data.style.value,\n                }\n                output = self._run_client(\n                    credentials, \"recraft-ai/recraft-v3\", input_params\n                )\n                return output",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 14,
                  "start_line": 63,
                  "end_line": 64,
                  "label": "except Exception as e:\n            raise RuntimeError(f\"Failed to generate image: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_style_to_prompt_prefix",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "def _style_to_prompt_prefix(self, style: ImageStyle) -> str:\n        \"\"\"\n        Convert a style enum to a prompt prefix for models without native style support.\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "if style == ImageStyle.ANY:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "return \"\"",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 7,
                      "end_line": 26,
                      "label": "style_map = {\n            ImageStyle.REALISTIC: \"photorealistic\",\n            ImageStyle.REALISTIC_BW: \"black and white photograph\",\n            ImageStyle.REALISTIC_HDR: \"HDR photograph\",\n            ImageStyle.REALISTIC_NATURAL: \"natural light photograph\",\n            ImageStyle.REALISTIC_STUDIO: \"studio portrait photograph\",\n            ImageStyle.REALISTIC_ENTERPRISE: \"enterprise photograph\",\n            ImageStyle.REALISTIC_HARD_FLASH: \"hard flash photograph\",\n            ImageStyle.REALISTIC_MOTION_BLUR: \"motion blur photograph\",\n            ImageStyle.DIGITAL_ART: \"digital art\",\n            ImageStyle.PIXEL_ART: \"pixel art\",\n            ImageStyle.HAND_DRAWN: \"hand drawn illustration\",\n            ImageStyle.GRAIN: \"grainy digital illustration\",\n            ImageStyle.SKETCH: \"sketchy illustration\",\n            ImageStyle.POSTER: \"2D art poster\",\n            ImageStyle.POSTER_2: \"alternate 2D art poster\",\n            ImageStyle.HANDMADE_3D: \"handmade 3D illustration\",\n            ImageStyle.HAND_DRAWN_OUTLINE: \"hand drawn outline illustration\",\n            ImageStyle.ENGRAVING_COLOR: \"color engraving illustration\",\n        }",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 27,
                          "end_line": 27,
                          "label": "style_text = style_map.get(style, \"\")",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 28,
                              "end_line": 28,
                              "label": "return f\"{style_text} of\" if style_text else \"\"",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "url = self.generate_image(input_data, credentials)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "if url:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 5,
                              "end_line": 5,
                              "label": "yield \"image_url\", url",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "start_line": 6,
                              "end_line": 6,
                              "label": "else:",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 7,
                                  "end_line": 7,
                                  "label": "yield \"error\", \"Image generation returned an empty result.\"",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "start_line": 8,
                      "end_line": 8,
                      "label": "except Exception as e:",
                      "successors": [
                        {
                          "id": 9,
                          "start_line": 9,
                          "end_line": 9,
                          "label": "# Capture and return only the message of the exception, avoiding serialization of non-serializable objects",
                          "successors": [
                            {
                              "id": 10,
                              "start_line": 10,
                              "end_line": 10,
                              "label": "yield \"error\", str(e)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 33,
              "label": "class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"Enter your Replicate API key to access the image generation API. You can obtain an API key from https://replicate.com/account/api-tokens.\",\n        )\n        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A red panda using a laptop in a snowy forest'\",\n            title=\"Prompt\",\n        )\n        model: ImageGenModel = SchemaField(\n            description=\"The AI model to use for image generation\",\n            default=ImageGenModel.SD3_5,\n            title=\"Model\",\n        )\n        size: ImageSize = SchemaField(\n            description=(\n                \"Format of the generated image:\\n\"\n                \"- Square: Perfect for profile pictures, icons\\n\"\n                \"- Landscape: Traditional photo format\\n\"\n                \"- Portrait: Vertical photos, portraits\\n\"\n                \"- Wide: Cinematic format, desktop wallpapers\\n\"\n                \"- Tall: Mobile wallpapers, social media stories\"\n            ),\n            default=ImageSize.SQUARE,\n            title=\"Image Format\",\n        )\n        style: ImageStyle = SchemaField(\n            description=\"Visual style for the generated image\",\n            default=ImageStyle.ANY,\n            title=\"Image Style\",\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "class Output(BlockSchema):\n        image_url: str = SchemaField(description=\"URL of the generated image\")\n        error: str = SchemaField(description=\"Error message if generation failed\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}