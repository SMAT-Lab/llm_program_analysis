{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 8,
      "label": "import pytest\nfrom backend.data import db\nfrom backend.executor import ExecutionScheduler\nfrom backend.server.model import CreateGraph\nfrom backend.usecases.sample import create_test_graph, create_test_user\nfrom backend.util.service import get_service_client\nfrom backend.util.test import SpinTestServer\n@pytest.mark.asyncio(scope=\"session\")",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "test_agent_schedule",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def test_agent_schedule(server: SpinTestServer):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "await db.connect()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "test_user = await create_test_user()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 7,
                      "label": "test_graph = await server.agent_server.test_create_graph(\n        create_graph=CreateGraph(graph=create_test_graph()),\n        user_id=test_user.id,\n    )",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 8,
                          "end_line": 8,
                          "label": "scheduler = get_service_client(ExecutionScheduler)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 9,
                              "end_line": 9,
                              "label": "schedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 10,
                                  "end_line": 10,
                                  "label": "assert len(schedules) == 0",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 11,
                                      "end_line": 17,
                                      "label": "schedule = scheduler.add_execution_schedule(\n        graph_id=test_graph.id,\n        user_id=test_user.id,\n        graph_version=1,\n        cron=\"0 0 * * *\",\n        input_data={\"input\": \"data\"},\n    )",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 18,
                                          "end_line": 18,
                                          "label": "assert schedule",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 19,
                                              "end_line": 19,
                                              "label": "schedules = scheduler.get_execution_schedules(test_graph.id, test_user.id)",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 20,
                                                  "end_line": 20,
                                                  "label": "assert len(schedules) == 1",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "start_line": 21,
                                                      "end_line": 21,
                                                      "label": "assert schedules[0].cron == \"0 0 * * *\"",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "start_line": 22,
                                                          "end_line": 22,
                                                          "label": "scheduler.delete_schedule(schedule.id, user_id=test_user.id)",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "start_line": 23,
                                                              "end_line": 23,
                                                              "label": "schedules = scheduler.get_execution_schedules(test_graph.id, user_id=test_user.id)",
                                                              "successors": [
                                                                {
                                                                  "id": 15,
                                                                  "start_line": 24,
                                                                  "end_line": 24,
                                                                  "label": "assert len(schedules) == 0",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}