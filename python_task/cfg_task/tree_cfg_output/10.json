{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "import json\nimport os\nimport requests\nimport sys\nimport time\nfrom typing import Dict, List, Tuple\nCHECK_INTERVAL = 30",
      "successors": [
        {
          "id": 2,
          "start_line": 8,
          "end_line": 9,
          "label": "if __name__ == \"__main__\":\n    main()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_environment_variables",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def get_environment_variables() -> Tuple[str, str, str, str, str]:\n    \"\"\"Retrieve and return necessary environment variables.\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "with open(os.environ[\"GITHUB_EVENT_PATH\"]) as f:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "event = json.load(f)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "# Handle both PR and merge group events",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 7,
                              "end_line": 7,
                              "label": "if \"pull_request\" in event:",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 8,
                                  "end_line": 8,
                                  "label": "sha = event[\"pull_request\"][\"head\"][\"sha\"]",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 11,
                                      "end_line": 17,
                                      "label": "return (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 9,
                                  "start_line": 9,
                                  "end_line": 9,
                                  "label": "else:",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "start_line": 10,
                                      "end_line": 10,
                                      "label": "sha = os.environ[\"GITHUB_SHA\"]",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 11,
                                          "end_line": 17,
                                          "label": "return (\n            os.environ[\"GITHUB_API_URL\"],\n            os.environ[\"GITHUB_REPOSITORY\"],\n            sha,\n            os.environ[\"GITHUB_TOKEN\"],\n            os.environ[\"GITHUB_RUN_ID\"],\n        )",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 11,
              "start_line": 18,
              "end_line": 18,
              "label": "except KeyError as e:",
              "successors": [
                {
                  "id": 12,
                  "start_line": 19,
                  "end_line": 19,
                  "label": "print(f\"Error: Missing required environment variable or event data: {e}\")",
                  "successors": [
                    {
                      "id": 13,
                      "start_line": 20,
                      "end_line": 20,
                      "label": "sys.exit(1)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "make_api_request",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def make_api_request(url: str, headers: Dict[str, str]) -> Dict:\n    \"\"\"Make an API request and return the JSON response.\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 7,
                  "label": "print(\"Making API request to:\", url)\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        return response.json()",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 8,
                  "end_line": 10,
                  "label": "except requests.RequestException as e:\n        print(f\"Error: API request failed. {e}\")\n        sys.exit(1)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "process_check_runs",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:\n    \"\"\"Process check runs and return their status.\"\"\"\n    runs_in_progress = False\n    all_others_passed = True",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 5,
              "label": "for run in check_runs:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "if str(run[\"name\"]) != \"Check PR Status\":",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 7,
                      "end_line": 8,
                      "label": "status = run[\"status\"]\n            conclusion = run[\"conclusion\"]",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 9,
                          "end_line": 9,
                          "label": "if status == \"completed\":",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 10,
                              "end_line": 10,
                              "label": "if conclusion not in [\"success\", \"skipped\", \"neutral\"]:",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 11,
                                  "end_line": 14,
                                  "label": "all_others_passed = False\n                    print(\n                        f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\"\n                    )",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "start_line": 15,
                              "end_line": 17,
                              "label": "else:\n                runs_in_progress = True\n                print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "start_line": 19,
                      "end_line": 22,
                      "label": "else:\n            print(\n                f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\"\n            )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 10,
          "start_line": 23,
          "end_line": 23,
          "label": "return runs_in_progress, all_others_passed",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "def main():\n    api_url, repo, sha, github_token, current_run_id = get_environment_variables()\n    endpoint = f\"{api_url}/repos/{repo}/commits/{sha}/check-runs\"\n    headers = {\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 7,
              "label": "if github_token:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "headers[\"Authorization\"] = f\"token {github_token}\"",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 9,
              "end_line": 9,
              "label": "print(f\"Current run ID: {current_run_id}\")",
              "successors": [
                {
                  "id": 5,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 11,
                      "end_line": 14,
                      "label": "data = make_api_request(endpoint, headers)\n        check_runs = data[\"check_runs\"]\n        print(\"Processing check runs...\")\n        print(check_runs)",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "runs_in_progress, all_others_passed = process_check_runs(check_runs)",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 16,
                              "end_line": 16,
                              "label": "if not runs_in_progress:",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 17,
                                  "end_line": 17,
                                  "label": "break",
                                  "successors": []
                                },
                                {
                                  "id": 10,
                                  "start_line": 18,
                                  "end_line": 22,
                                  "label": "print(\n            \"Some check runs are still in progress. \"\n            f\"Waiting {CHECK_INTERVAL} seconds before checking again...\"\n        )\n        time.sleep(CHECK_INTERVAL)",
                                  "successors": [
                                    {
                                      "id": 5,
                                      "start_line": 10,
                                      "end_line": 10,
                                      "label": "while True:",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 11,
                  "start_line": 23,
                  "end_line": 23,
                  "label": "if all_others_passed:",
                  "successors": [
                    {
                      "id": 12,
                      "start_line": 24,
                      "end_line": 25,
                      "label": "print(\"All other completed check runs have passed. This check passes.\")\n        sys.exit(0)",
                      "successors": []
                    },
                    {
                      "id": 13,
                      "start_line": 26,
                      "end_line": 28,
                      "label": "else:\n        print(\"Some check runs have failed or have not completed. This check fails.\")\n        sys.exit(1)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}