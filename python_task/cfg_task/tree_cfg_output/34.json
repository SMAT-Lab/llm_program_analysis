{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 28,
      "label": "from functools import wraps\nfrom typing import Any, Callable, Concatenate, Coroutine, ParamSpec, TypeVar, cast\nfrom backend.data.credit import get_user_credit_model\nfrom backend.data.execution import (\n    ExecutionResult,\n    RedisExecutionEventBus,\n    create_graph_execution,\n    get_execution_results,\n    get_incomplete_executions,\n    get_latest_execution,\n    update_execution_status,\n    update_graph_execution_stats,\n    update_node_execution_stats,\n    upsert_execution_input,\n    upsert_execution_output,\n)\nfrom backend.data.graph import get_graph, get_node\nfrom backend.data.user import (\n    get_user_integrations,\n    get_user_metadata,\n    update_user_integrations,\n    update_user_metadata,\n)\nfrom backend.util.service import AppService, expose, register_pydantic_serializers\nfrom backend.util.settings import Config\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\nconfig = Config()",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "DatabaseManager",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class DatabaseManager(AppService):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 4,
              "label": "@classmethod\n    @expose\n    @staticmethod",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 14,
                  "label": "# Executions\n    create_graph_execution = exposed_run_and_wait(create_graph_execution)\n    get_execution_results = exposed_run_and_wait(get_execution_results)\n    get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\n    get_latest_execution = exposed_run_and_wait(get_latest_execution)\n    update_execution_status = exposed_run_and_wait(update_execution_status)\n    update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)\n    update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\n    upsert_execution_input = exposed_run_and_wait(upsert_execution_input)\n    upsert_execution_output = exposed_run_and_wait(upsert_execution_output)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 15,
                      "end_line": 17,
                      "label": "# Graphs\n    get_node = exposed_run_and_wait(get_node)\n    get_graph = exposed_run_and_wait(get_graph)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 18,
                          "end_line": 27,
                          "label": "# Credits\n    user_credit_model = get_user_credit_model()\n    get_or_refill_credit = cast(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )\n    spend_credits = cast(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 28,
                              "end_line": 32,
                              "label": "# User + User Metadata + User Integrations\n    get_user_metadata = exposed_run_and_wait(get_user_metadata)\n    update_user_metadata = exposed_run_and_wait(update_user_metadata)\n    get_user_integrations = exposed_run_and_wait(get_user_integrations)\n    update_user_integrations = exposed_run_and_wait(update_user_integrations)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "super().__init__()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "self.use_db = True",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "self.use_redis = True",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 5,
                              "end_line": 5,
                              "label": "self.event_queue = RedisExecutionEventBus()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_port",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def get_port(cls) -> int:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return config.database_api_port",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "send_execution_update",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def send_execution_update(self, execution_result: ExecutionResult):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "self.event_queue.publish(execution_result)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "exposed_run_and_wait",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 7,
                  "label": "@expose\n        @wraps(f)\n        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 8,
                      "end_line": 8,
                      "label": "return wrapper",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "wrapper",
              "type": "CFG",
              "blocks": [
                {
                  "id": 1,
                  "start_line": 1,
                  "end_line": 1,
                  "label": "def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:",
                  "successors": [
                    {
                      "id": 2,
                      "start_line": 2,
                      "end_line": 4,
                      "label": "coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res",
                      "successors": []
                    }
                  ]
                }
              ],
              "functions": [],
              "classes": []
            }
          ],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}