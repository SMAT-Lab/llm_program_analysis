{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 16,
      "label": "import asyncio\nimport logging\nfrom contextlib import asynccontextmanager\nimport uvicorn\nfrom autogpt_libs.auth import parse_jwt_token\nfrom fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect\nfrom starlette.middleware.cors import CORSMiddleware\nfrom backend.data import redis\nfrom backend.data.execution import AsyncRedisExecutionEventBus\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import ExecutionSubscription, Methods, WsMessage\nfrom backend.util.service import AppProcess\nfrom backend.util.settings import AppEnvironment, Config, Settings\nlogger = logging.getLogger(__name__)\nsettings = Settings()",
      "successors": [
        {
          "id": 2,
          "start_line": 17,
          "end_line": 19,
          "label": "@asynccontextmanager\ndocs_url = \"/docs\" if settings.config.app_env == AppEnvironment.LOCAL else None\napp = FastAPI(lifespan=lifespan, docs_url=docs_url)",
          "successors": [
            {
              "id": 3,
              "start_line": 20,
              "end_line": 20,
              "label": "_connection_manager = None",
              "successors": [
                {
                  "id": 4,
                  "start_line": 21,
                  "end_line": 21,
                  "label": "@app.get(\"/\")",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 22,
                      "end_line": 22,
                      "label": "@app.websocket(\"/ws\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "lifespan",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def lifespan(app: FastAPI):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "manager = get_connection_manager()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "fut = asyncio.create_task(event_broadcaster(manager))",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 5,
                          "end_line": 5,
                          "label": "yield",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_connection_manager",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def get_connection_manager():\n    global _connection_manager",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "if _connection_manager is None:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "_connection_manager = ConnectionManager()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "return _connection_manager",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "return _connection_manager",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "event_broadcaster",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def event_broadcaster(manager: ConnectionManager):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 4,
                  "label": "redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "await manager.send_execution_result(event)",
                          "successors": [
                            {
                              "id": 4,
                              "start_line": 5,
                              "end_line": 5,
                              "label": "async for event in event_queue.listen():",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "except Exception as e:",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 8,
                      "end_line": 9,
                      "label": "logger.exception(f\"Event broadcaster error: {e}\")\n        raise",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 8,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "finally:",
                  "successors": [
                    {
                      "id": 9,
                      "start_line": 11,
                      "end_line": 11,
                      "label": "redis.disconnect()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "authenticate_websocket",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def authenticate_websocket(websocket: WebSocket) -> str:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if not settings.config.enable_auth:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return DEFAULT_USER_ID",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "token = websocket.query_params.get(\"token\")",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "if not token:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 6,
                          "end_line": 7,
                          "label": "await websocket.close(code=4001, reason=\"Missing authentication token\")\n        return \"\"",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 8,
                          "end_line": 8,
                          "label": "try:",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 9,
                              "end_line": 10,
                              "label": "payload = parse_jwt_token(token)\n        user_id = payload.get(\"sub\")",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 11,
                                  "end_line": 11,
                                  "label": "if not user_id:",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "start_line": 12,
                                      "end_line": 13,
                                      "label": "await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"",
                                      "successors": []
                                    },
                                    {
                                      "id": 11,
                                      "start_line": 14,
                                      "end_line": 14,
                                      "label": "return user_id",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 12,
                              "start_line": 15,
                              "end_line": 15,
                              "label": "except ValueError:",
                              "successors": [
                                {
                                  "id": 13,
                                  "start_line": 16,
                                  "end_line": 17,
                                  "label": "await websocket.close(code=4003, reason=\"Invalid token\")\n        return \"\"",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "handle_subscribe",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "async def handle_subscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "if not message.data:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 11,
                  "label": "await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 12,
                  "end_line": 22,
                  "label": "else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "handle_unsubscribe",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "async def handle_unsubscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "if not message.data:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 11,
                  "label": "await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 12,
                  "end_line": 22,
                  "label": "else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "health",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def health():",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "return {\"status\": \"healthy\"}",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "websocket_router",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "async def websocket_router(\n    websocket: WebSocket, manager: ConnectionManager = Depends(get_connection_manager)\n):",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "user_id = await authenticate_websocket(websocket)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "if not user_id:\n        return",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "await manager.connect(websocket)",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 8,
                      "end_line": 8,
                      "label": "try:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 9,
                          "end_line": 10,
                          "label": "while True:\n            data = await websocket.receive_text()",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 11,
                              "end_line": 11,
                              "label": "message = WsMessage.model_validate_json(data)",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 12,
                                  "end_line": 16,
                                  "label": "if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 17,
                                      "end_line": 18,
                                      "label": "if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)",
                                      "successors": []
                                    },
                                    {
                                      "id": 10,
                                      "start_line": 19,
                                      "end_line": 20,
                                      "label": "elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)",
                                      "successors": []
                                    },
                                    {
                                      "id": 11,
                                      "start_line": 21,
                                      "end_line": 22,
                                      "label": "elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")",
                                      "successors": []
                                    },
                                    {
                                      "id": 12,
                                      "start_line": 23,
                                      "end_line": 27,
                                      "label": "else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )",
                                      "successors": [
                                        {
                                          "id": 13,
                                          "start_line": 28,
                                          "end_line": 34,
                                          "label": "await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 14,
                      "start_line": 35,
                      "end_line": 37,
                      "label": "except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug(\"WebSocket client disconnected\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "WebsocketServer",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def run(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 9,
                  "label": "logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")\n        server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 10,
                      "end_line": 14,
                      "label": "uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}