{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 17,
      "label": "import logging\nimport os\nfrom dotenv import load_dotenv\nfrom redis import Redis\nfrom redis.asyncio import Redis as AsyncRedis\nfrom backend.util.retry import conn_retry\nload_dotenv()\nHOST = os.getenv(\"REDIS_HOST\", \"localhost\")\nPORT = int(os.getenv(\"REDIS_PORT\", \"6379\"))\nPASSWORD = os.getenv(\"REDIS_PASSWORD\", \"password\")\nlogger = logging.getLogger(__name__)\nconnection: Redis | None = None\nconnection_async: AsyncRedis | None = None\n@conn_retry(\"Redis\", \"Acquiring connection\")\n@conn_retry(\"Redis\", \"Releasing connection\")\n@conn_retry(\"AsyncRedis\", \"Acquiring connection\")\n@conn_retry(\"AsyncRedis\", \"Releasing connection\")",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "connect",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def connect() -> Redis:\n    global connection",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "if connection:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "return connection",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 5,
                  "end_line": 10,
                  "label": "c = Redis(\n        host=HOST,\n        port=PORT,\n        password=PASSWORD,\n        decode_responses=True,\n    )",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 11,
                      "end_line": 11,
                      "label": "c.ping()",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 12,
                          "end_line": 12,
                          "label": "connection = c",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 13,
                              "end_line": 13,
                              "label": "return connection",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "disconnect",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def disconnect():\n    global connection",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "if connection:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "connection.close()",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 5,
              "end_line": 5,
              "label": "connection = None",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_redis",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def get_redis(auto_connect: bool = True) -> Redis:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if connection:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return connection",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "if auto_connect:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "return connect()",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "raise RuntimeError(\"Redis connection is not established\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "connect_async",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "async def connect_async() -> AsyncRedis:\n    global connection_async",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "if connection_async:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "return connection_async",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 5,
                  "end_line": 10,
                  "label": "c = AsyncRedis(\n        host=HOST,\n        port=PORT,\n        password=PASSWORD,\n        decode_responses=True,\n    )",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 11,
                      "end_line": 11,
                      "label": "await c.ping()",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 12,
                          "end_line": 13,
                          "label": "connection_async = c\n    return connection_async",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "disconnect_async",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "async def disconnect_async():\n    global connection_async",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "if connection_async:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "await connection_async.close()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "connection_async = None",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "connection_async = None",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_redis_async",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def get_redis_async(auto_connect: bool = True) -> AsyncRedis:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if connection_async:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return connection_async",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "if auto_connect:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "return await connect_async()",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "raise RuntimeError(\"AsyncRedis connection is not established\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}