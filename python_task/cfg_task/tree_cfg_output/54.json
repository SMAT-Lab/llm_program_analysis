{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 27,
      "label": "# -*- coding: utf-8 -*-\nimport re\nimport sys\nfrom string import punctuation\nfrom typing import List, Tuple, Dict\n# Temporary replacement\n# The descriptions that contain () at the end must adapt to the new policy later\npunctuation = punctuation.replace('()', '')\nanchor = '###'\nauth_keys = ['apiKey', 'OAuth', 'X-Mashape-Key', 'User-Agent', 'No']\nhttps_keys = ['Yes', 'No']\ncors_keys = ['Yes', 'No', 'Unknown']\nindex_title = 0\nindex_desc = 1\nindex_auth = 2\nindex_https = 3\nindex_cors = 4\nnum_segments = 5\nmin_entries_per_category = 3\nmax_description_length = 100\nanchor_re = re.compile(anchor + '\\s(.+)')\ncategory_title_in_index_re = re.compile('\\*\\s\\[(.*)\\]')\nlink_re = re.compile('\\[(.+)\\]\\((http.*)\\)')\n# Type aliases\nAPIList = List[str]\nCategories = Dict[str, APIList]\nCategoriesLineNumber = Dict[str, int]",
      "successors": [
        {
          "id": 2,
          "start_line": 28,
          "end_line": 34,
          "label": "if __name__ == '__main__':\n    num_args = len(sys.argv)",
          "successors": [
            {
              "id": 3,
              "start_line": 30,
              "end_line": 32,
              "label": "if num_args < 2:\n        print('No .md file passed (file should contain Markdown table syntax)')\n        sys.exit(1)",
              "successors": []
            },
            {
              "id": 4,
              "start_line": 33,
              "end_line": 34,
              "label": "filename = sys.argv[1]\n    main(filename)",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "error_message",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def error_message(line_number: int, message: str) -> str:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "line = line_number + 1",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return f'(L{line:03d}) {message}'",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_categories_content",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def get_categories_content(contents: List[str]) -> Tuple[Categories, CategoriesLineNumber]:\n    categories = {}\n    category_line_num = {}",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "for line_num, line_content in enumerate(contents):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "if line_content.startswith(anchor):",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 6,
                      "end_line": 9,
                      "label": "category = line_content.split(anchor)[1].strip()\n            categories[category] = []\n            category_line_num[category] = line_num\n            continue",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "if not line_content.startswith('|') or line_content.startswith('|---'):",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 11,
                              "end_line": 11,
                              "label": "continue",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 12,
                                  "end_line": 14,
                                  "label": "raw_title = [\n            raw_content.strip() for raw_content in line_content.split('|')[1:-1]\n        ][0]",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 15,
                                      "end_line": 15,
                                      "label": "title_match = link_re.match(raw_title)",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 16,
                                          "end_line": 16,
                                          "label": "if title_match:",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 17,
                                              "end_line": 18,
                                              "label": "title = title_match.group(1).upper()\n                categories[category].append(title)",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 11,
          "start_line": 19,
          "end_line": 19,
          "label": "return (categories, category_line_num)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_alphabetical_order",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def check_alphabetical_order(lines: List[str]) -> List[str]:\n    err_msgs = []\n    categories, category_line_num = get_categories_content(contents=lines)",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "for category, api_list in categories.items():",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "if sorted(api_list) != api_list:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 6,
                      "end_line": 9,
                      "label": "err_msg = error_message(\n                category_line_num[category], \n                f'{category} category is not alphabetical order'\n            )",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "err_msgs.append(err_msg)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "start_line": 12,
              "end_line": 12,
              "label": "return err_msgs",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_title",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def check_title(line_num: int, raw_title: str) -> List[str]:\n    err_msgs = []\n    title_match = link_re.match(raw_title)\n    # url should be wrapped in \"[TITLE](LINK)\" Markdown syntax",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 5,
              "label": "if not title_match:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 6,
                  "end_line": 7,
                  "label": "err_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')\n        err_msgs.append(err_msg)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 8,
                  "end_line": 14,
                  "label": "else:\n    return err_msgs",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 9,
                      "end_line": 10,
                      "label": "# do not allow \"... API\" in the entry title\n        title = title_match.group(1)",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 11,
                          "end_line": 11,
                          "label": "if title.upper().endswith(' API'):",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 12,
                              "end_line": 13,
                              "label": "err_msg = error_message(line_num, 'Title should not end with \"... API\". Every entry is an API here!')\n            err_msgs.append(err_msg)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_description",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def check_description(line_num: int, description: str) -> List[str]:\n    err_msgs = []\n    first_char = description[0]",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "if first_char.upper() != first_char:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "err_msg = error_message(line_num, 'first character of description is not capitalized')\n        err_msgs.append(err_msg)",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 7,
              "end_line": 7,
              "label": "last_char = description[-1]",
              "successors": [
                {
                  "id": 5,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "if last_char in punctuation:",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 9,
                      "end_line": 10,
                      "label": "err_msg = error_message(line_num, f'description should not end with {last_char}')\n        err_msgs.append(err_msg)",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "start_line": 11,
              "end_line": 11,
              "label": "desc_length = len(description)",
              "successors": [
                {
                  "id": 8,
                  "start_line": 12,
                  "end_line": 12,
                  "label": "if desc_length > max_description_length:",
                  "successors": [
                    {
                      "id": 9,
                      "start_line": 13,
                      "end_line": 14,
                      "label": "err_msg = error_message(line_num, f'description should not exceed {max_description_length} characters (currently {desc_length})')\n        err_msgs.append(err_msg)",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 10,
              "start_line": 16,
              "end_line": 16,
              "label": "return err_msgs",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_auth",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def check_auth(line_num: int, auth: str) -> List[str]:\n    err_msgs = []\n    backtick = '`'",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "if auth != 'No' and (not auth.startswith(backtick) or not auth.endswith(backtick)):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "err_msg = error_message(line_num, 'auth value is not enclosed with `backticks`')\n        err_msgs.append(err_msg)",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 7,
              "end_line": 7,
              "label": "if auth.replace(backtick, '') not in auth_keys:",
              "successors": [
                {
                  "id": 5,
                  "start_line": 8,
                  "end_line": 9,
                  "label": "err_msg = error_message(line_num, f'{auth} is not a valid Auth option')\n        err_msgs.append(err_msg)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "id": 6,
          "start_line": 11,
          "end_line": 11,
          "label": "return err_msgs",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_https",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def check_https(line_num: int, https: str) -> List[str]:\n    err_msgs = []",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "if https not in https_keys:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 5,
                  "label": "err_msg = error_message(line_num, f'{https} is not a valid HTTPS option')\n        err_msgs.append(err_msg)",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 6,
              "end_line": 6,
              "label": "return err_msgs",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_cors",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def check_cors(line_num: int, cors: str) -> List[str]:\n    err_msgs = []",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "if cors not in cors_keys:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 5,
                  "label": "err_msg = error_message(line_num, f'{cors} is not a valid CORS option')\n        err_msgs.append(err_msg)",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 7,
              "end_line": 7,
              "label": "return err_msgs",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_entry",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def check_entry(line_num: int, segments: List[str]) -> List[str]:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 6,
              "label": "raw_title = segments[index_title]\n    description = segments[index_desc]\n    auth = segments[index_auth]\n    https = segments[index_https]\n    cors = segments[index_cors]",
              "successors": [
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 11,
                  "label": "title_err_msgs = check_title(line_num, raw_title)\n    desc_err_msgs = check_description(line_num, description)\n    auth_err_msgs = check_auth(line_num, auth)\n    https_err_msgs = check_https(line_num, https)\n    cors_err_msgs = check_cors(line_num, cors)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 12,
                      "end_line": 18,
                      "label": "err_msgs = [\n        *title_err_msgs,\n        *desc_err_msgs,\n        *auth_err_msgs,\n        *https_err_msgs,\n        *cors_err_msgs\n    ]",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 19,
                          "end_line": 19,
                          "label": "return err_msgs",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_file_format",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 8,
          "label": "def check_file_format(lines: List[str]) -> List[str]:\n    err_msgs = []\n    category_title_in_index = []\n    alphabetical_err_msgs = check_alphabetical_order(lines)\n    err_msgs.extend(alphabetical_err_msgs)\n    num_in_category = min_entries_per_category + 1\n    category = ''\n    category_line = 0",
          "successors": [
            {
              "id": 2,
              "start_line": 9,
              "end_line": 9,
              "label": "for line_num, line_content in enumerate(lines):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "category_title_match = category_title_in_index_re.match(line_content)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 11,
                      "end_line": 11,
                      "label": "if category_title_match:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 12,
                          "end_line": 12,
                          "label": "category_title_in_index.append(category_title_match.group(1))",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 13,
                              "end_line": 13,
                              "label": "# check each category for the minimum number of entries",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 14,
                                  "end_line": 14,
                                  "label": "if line_content.startswith(anchor):",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 15,
                                      "end_line": 15,
                                      "label": "category_match = anchor_re.match(line_content)",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 16,
                                          "end_line": 16,
                                          "label": "if category_match:",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 17,
                                              "end_line": 17,
                                              "label": "if category_match.group(1) not in category_title_in_index:",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 18,
                                                  "end_line": 19,
                                                  "label": "err_msg = error_message(line_num, f'category header ({category_match.group(1)}) not added to Index section')\n                    err_msgs.append(err_msg)",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 12,
                                              "start_line": 20,
                                              "end_line": 20,
                                              "label": "else:",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "start_line": 21,
                                                  "end_line": 22,
                                                  "label": "err_msg = error_message(line_num, 'category header is not formatted correctly')\n                err_msgs.append(err_msg)",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 14,
                                  "start_line": 23,
                                  "end_line": 23,
                                  "label": "if num_in_category < min_entries_per_category:",
                                  "successors": [
                                    {
                                      "id": 15,
                                      "start_line": 24,
                                      "end_line": 25,
                                      "label": "err_msg = error_message(category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\n                err_msgs.append(err_msg)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 16,
                  "start_line": 26,
                  "end_line": 29,
                  "label": "category = line_content.split(' ')[1]\n            category_line = line_num\n            num_in_category = 0\n            continue",
                  "successors": []
                },
                {
                  "id": 17,
                  "start_line": 30,
                  "end_line": 30,
                  "label": "# skips lines that we do not care about",
                  "successors": [
                    {
                      "id": 18,
                      "start_line": 31,
                      "end_line": 31,
                      "label": "if not line_content.startswith('|') or line_content.startswith('|---'):",
                      "successors": [
                        {
                          "id": 19,
                          "start_line": 32,
                          "end_line": 32,
                          "label": "continue",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 20,
                  "start_line": 33,
                  "end_line": 33,
                  "label": "num_in_category += 1",
                  "successors": [
                    {
                      "id": 21,
                      "start_line": 34,
                      "end_line": 34,
                      "label": "segments = line_content.split('|')[1:-1]",
                      "successors": [
                        {
                          "id": 22,
                          "start_line": 35,
                          "end_line": 35,
                          "label": "if len(segments) < num_segments:",
                          "successors": [
                            {
                              "id": 23,
                              "start_line": 36,
                              "end_line": 37,
                              "label": "err_msg = error_message(line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\n            err_msgs.append(err_msg)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 24,
                  "start_line": 38,
                  "end_line": 38,
                  "label": "continue",
                  "successors": []
                },
                {
                  "id": 25,
                  "start_line": 39,
                  "end_line": 39,
                  "label": "",
                  "successors": [
                    {
                      "id": 26,
                      "start_line": 40,
                      "end_line": 40,
                      "label": "for segment in segments:",
                      "successors": [
                        {
                          "id": 27,
                          "start_line": 41,
                          "end_line": 41,
                          "label": "# every line segment should start and end with exactly 1 space",
                          "successors": [
                            {
                              "id": 28,
                              "start_line": 42,
                              "end_line": 42,
                              "label": "if len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1:",
                              "successors": [
                                {
                                  "id": 29,
                                  "start_line": 43,
                                  "end_line": 44,
                                  "label": "err_msg = error_message(line_num, 'each segment must start and end with exactly 1 space')\n                err_msgs.append(err_msg)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 30,
                  "start_line": 45,
                  "end_line": 45,
                  "label": "",
                  "successors": [
                    {
                      "id": 31,
                      "start_line": 46,
                      "end_line": 46,
                      "label": "segments = [segment.strip() for segment in segments]",
                      "successors": [
                        {
                          "id": 32,
                          "start_line": 47,
                          "end_line": 48,
                          "label": "entry_err_msgs = check_entry(line_num, segments)\n        err_msgs.extend(entry_err_msgs)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 33,
          "start_line": 50,
          "end_line": 50,
          "label": "return err_msgs",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def main(filename: str) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 3,
              "label": "with open(filename, mode='r', encoding='utf-8') as file:\n        lines = list(line.rstrip() for line in file)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "file_format_err_msgs = check_file_format(lines)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "if file_format_err_msgs:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 6,
                          "end_line": 7,
                          "label": "for err_msg in file_format_err_msgs:\n            print(err_msg)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "sys.exit(1)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}