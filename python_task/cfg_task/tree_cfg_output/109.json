{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "# Information on binary shifts:\n# https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types\n# https://www.interviewcake.com/concept/java/bit-shift",
      "successors": [
        {
          "id": 2,
          "start_line": 4,
          "end_line": 4,
          "label": "if __name__ == \"__main__\":",
          "successors": [
            {
              "id": 3,
              "start_line": 5,
              "end_line": 6,
              "label": "import doctest\n    doctest.testmod()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "logical_left_shift",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 21,
          "label": "def logical_left_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 22,
              "end_line": 23,
              "label": "if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 24,
                  "end_line": 26,
                  "label": "binary_number = str(bin(number))\n    binary_number += \"0\" * shift_amount\n    return binary_number",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "logical_right_shift",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 21,
          "label": "def logical_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 22,
              "end_line": 23,
              "label": "if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 24,
                  "end_line": 24,
                  "label": "binary_number = str(bin(number))[2:]",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 25,
                      "end_line": 26,
                      "label": "if shift_amount >= len(binary_number):\n        return \"0b0\"",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 27,
                          "end_line": 28,
                          "label": "shifted_binary_number = binary_number[: len(binary_number) - shift_amount]\n    return \"0b\" + shifted_binary_number",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "arithmetic_right_shift",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 19,
          "label": "def arithmetic_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 20,
              "end_line": 20,
              "label": "if number >= 0:  # Get binary representation of positive number",
              "successors": [
                {
                  "id": 3,
                  "start_line": 21,
                  "end_line": 21,
                  "label": "binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 28,
                      "end_line": 28,
                      "label": "if shift_amount >= len(binary_number):",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 29,
                          "end_line": 29,
                          "label": "return \"0b\" + binary_number[0] * len(binary_number)",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 30,
                          "end_line": 34,
                          "label": "return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 22,
                  "end_line": 27,
                  "label": "else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 28,
                      "end_line": 28,
                      "label": "if shift_amount >= len(binary_number):",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 29,
                          "end_line": 29,
                          "label": "return \"0b\" + binary_number[0] * len(binary_number)",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 30,
                          "end_line": 34,
                          "label": "return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}