{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 11,
      "label": "from typing import List\nfrom backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField\nfrom ._api import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    Filament,\n    Slant3DCredentialsField,\n    Slant3DCredentialsInput,\n)\nfrom .base import Slant3DBlockBase",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "__init__",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def __init__(self):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 46,
              "label": "super().__init__(\n            id=\"7cc416f4-f305-4606-9b3b-452b8a81031c\",\n            description=\"Get list of available filaments\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\"credentials\": TEST_CREDENTIALS_INPUT},\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"filaments\",\n                    [\n                        {\n                            \"filament\": \"PLA BLACK\",\n                            \"hexColor\": \"000000\",\n                            \"colorTag\": \"black\",\n                            \"profile\": \"PLA\",\n                        },\n                        {\n                            \"filament\": \"PLA WHITE\",\n                            \"hexColor\": \"ffffff\",\n                            \"colorTag\": \"white\",\n                            \"profile\": \"PLA\",\n                        },\n                    ],\n                )\n            ],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"filaments\": [\n                        {\n                            \"filament\": \"PLA BLACK\",\n                            \"hexColor\": \"000000\",\n                            \"colorTag\": \"black\",\n                            \"profile\": \"PLA\",\n                        },\n                        {\n                            \"filament\": \"PLA WHITE\",\n                            \"hexColor\": \"ffffff\",\n                            \"colorTag\": \"white\",\n                            \"profile\": \"PLA\",\n                        },\n                    ]\n                }\n            },\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "run",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 7,
                  "label": "result = self._make_request(\n                \"GET\", \"filament\", credentials.api_key.get_secret_value()\n            )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 8,
                      "end_line": 8,
                      "label": "yield \"filaments\", result[\"filaments\"]",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 9,
                  "end_line": 10,
                  "label": "except Exception as e:\n            yield \"error\", str(e)",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 11,
                      "end_line": 11,
                      "label": "raise",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "Slant3DFilamentBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "class Slant3DFilamentBlock(Slant3DBlockBase):\n    \"\"\"Block for retrieving available filaments\"\"\"",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 46,
                  "label": "super().__init__(\n            id=\"7cc416f4-f305-4606-9b3b-452b8a81031c\",\n            description=\"Get list of available filaments\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\"credentials\": TEST_CREDENTIALS_INPUT},\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"filaments\",\n                    [\n                        {\n                            \"filament\": \"PLA BLACK\",\n                            \"hexColor\": \"000000\",\n                            \"colorTag\": \"black\",\n                            \"profile\": \"PLA\",\n                        },\n                        {\n                            \"filament\": \"PLA WHITE\",\n                            \"hexColor\": \"ffffff\",\n                            \"colorTag\": \"white\",\n                            \"profile\": \"PLA\",\n                        },\n                    ],\n                )\n            ],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"filaments\": [\n                        {\n                            \"filament\": \"PLA BLACK\",\n                            \"hexColor\": \"000000\",\n                            \"colorTag\": \"black\",\n                            \"profile\": \"PLA\",\n                        },\n                        {\n                            \"filament\": \"PLA WHITE\",\n                            \"hexColor\": \"ffffff\",\n                            \"colorTag\": \"white\",\n                            \"profile\": \"PLA\",\n                        },\n                    ]\n                }\n            },\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 7,
                      "label": "result = self._make_request(\n                \"GET\", \"filament\", credentials.api_key.get_secret_value()\n            )",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 8,
                          "end_line": 8,
                          "label": "yield \"filaments\", result[\"filaments\"]",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 9,
                      "end_line": 10,
                      "label": "except Exception as e:\n            yield \"error\", str(e)",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 11,
                          "end_line": 11,
                          "label": "raise",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "class Output(BlockSchema):\n        filaments: List[Filament] = SchemaField(\n            description=\"List of available filaments\"\n        )\n        error: str = SchemaField(description=\"Error message if request failed\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}