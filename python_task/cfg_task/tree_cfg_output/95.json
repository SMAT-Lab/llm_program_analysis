{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 12,
      "label": "from typing import Any\nfrom uuid import UUID\nimport pytest\nfrom backend.blocks.basic import AgentInputBlock, AgentOutputBlock, StoreValueBlock\nfrom backend.data.block import BlockSchema\nfrom backend.data.graph import Graph, Link, Node\nfrom backend.data.model import SchemaField\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.model import CreateGraph\nfrom backend.util.test import SpinTestServer\n@pytest.mark.asyncio(scope=\"session\")\n@pytest.mark.asyncio(scope=\"session\")",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "test_graph_creation",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 9,
          "label": "async def test_graph_creation(server: SpinTestServer):\n    \"\"\"\n    Test the creation of a graph with nodes and links.\n    This test ensures that:\n    1. A graph can be successfully created with valid connections.\n    2. The created graph has the correct structure and properties.\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 10,
              "end_line": 10,
              "label": "value_block = StoreValueBlock().id",
              "successors": [
                {
                  "id": 3,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "input_block = AgentInputBlock().id",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 12,
                      "end_line": 29,
                      "label": "graph = Graph(\n        id=\"test_graph\",\n        name=\"TestGraph\",\n        description=\"Test graph\",\n        nodes=[\n            Node(id=\"node_1\", block_id=value_block),\n            Node(id=\"node_2\", block_id=input_block, input_default={\"name\": \"input\"}),\n            Node(id=\"node_3\", block_id=value_block),\n        ],\n        links=[\n            Link(\n                source_id=\"node_1\",\n                sink_id=\"node_2\",\n                source_name=\"output\",\n                sink_name=\"name\",\n            ),\n        ],\n    )",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 30,
                          "end_line": 30,
                          "label": "create_graph = CreateGraph(graph=graph)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 31,
                              "end_line": 33,
                              "label": "created_graph = await server.agent_server.test_create_graph(\n        create_graph, DEFAULT_USER_ID\n    )",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 34,
                                  "end_line": 34,
                                  "label": "assert UUID(created_graph.id)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 35,
                                      "end_line": 35,
                                      "label": "assert created_graph.name == \"TestGraph\"",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 36,
                                          "end_line": 36,
                                          "label": "assert len(created_graph.nodes) == 3",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 37,
                                              "end_line": 37,
                                              "label": "assert UUID(created_graph.nodes[0].id)",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 38,
                                                  "end_line": 38,
                                                  "label": "assert UUID(created_graph.nodes[1].id)",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "start_line": 39,
                                                      "end_line": 39,
                                                      "label": "assert UUID(created_graph.nodes[2].id)",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "start_line": 40,
                                                          "end_line": 40,
                                                          "label": "nodes = created_graph.nodes",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "start_line": 41,
                                                              "end_line": 41,
                                                              "label": "links = created_graph.links",
                                                              "successors": [
                                                                {
                                                                  "id": 15,
                                                                  "start_line": 42,
                                                                  "end_line": 42,
                                                                  "label": "assert len(links) == 1",
                                                                  "successors": [
                                                                    {
                                                                      "id": 16,
                                                                      "start_line": 43,
                                                                      "end_line": 43,
                                                                      "label": "assert links[0].source_id != links[0].sink_id",
                                                                      "successors": [
                                                                        {
                                                                          "id": 17,
                                                                          "start_line": 44,
                                                                          "end_line": 44,
                                                                          "label": "assert links[0].source_id in {nodes[0].id, nodes[1].id, nodes[2].id}",
                                                                          "successors": [
                                                                            {
                                                                              "id": 18,
                                                                              "start_line": 45,
                                                                              "end_line": 45,
                                                                              "label": "assert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test_get_input_schema",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "async def test_get_input_schema(server: SpinTestServer):\n    \"\"\"\n    Test the get_input_schema method of a created graph.\n    This test ensures that:\n    1. A graph can be created with a single node.\n    2. The input schema of the created graph is correctly generated.\n    3. The input schema contains the expected input name and node id.\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 61,
              "label": "value_block = StoreValueBlock().id\n    input_block = AgentInputBlock().id\n    output_block = AgentOutputBlock().id\n    graph = Graph(\n        name=\"TestInputSchema\",\n        description=\"Test input schema\",\n        nodes=[\n            Node(\n                id=\"node_0_a\",\n                block_id=input_block,\n                input_default={\"name\": \"in_key_a\", \"title\": \"Key A\", \"value\": \"A\"},\n                metadata={\"id\": \"node_0_a\"},\n            ),\n            Node(\n                id=\"node_0_b\",\n                block_id=input_block,\n                input_default={\"name\": \"in_key_b\", \"advanced\": True},\n                metadata={\"id\": \"node_0_b\"},\n            ),\n            Node(id=\"node_1\", block_id=value_block, metadata={\"id\": \"node_1\"}),\n            Node(\n                id=\"node_2\",\n                block_id=output_block,\n                input_default={\n                    \"name\": \"out_key\",\n                    \"description\": \"This is an output key\",\n                },\n                metadata={\"id\": \"node_2\"},\n            ),\n        ],\n        links=[\n            Link(\n                source_id=\"node_0_a\",\n                sink_id=\"node_1\",\n                source_name=\"result\",\n                sink_name=\"input\",\n            ),\n            Link(\n                source_id=\"node_0_b\",\n                sink_id=\"node_1\",\n                source_name=\"result\",\n                sink_name=\"input\",\n            ),\n            Link(\n                source_id=\"node_1\",\n                sink_id=\"node_2\",\n                source_name=\"output\",\n                sink_name=\"value\",\n            ),\n        ],\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 62,
                  "end_line": 65,
                  "label": "create_graph = CreateGraph(graph=graph)\n    created_graph = await server.agent_server.test_create_graph(\n        create_graph, DEFAULT_USER_ID\n    )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 66,
                      "end_line": 68,
                      "label": "input_schema = created_graph.input_schema\n    input_schema[\"title\"] = \"ExpectedInputSchema\"\n    assert input_schema == ExpectedInputSchema.jsonschema()",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 69,
                          "end_line": 71,
                          "label": "output_schema = created_graph.output_schema\n    output_schema[\"title\"] = \"ExpectedOutputSchema\"\n    assert output_schema == ExpectedOutputSchema.jsonschema()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "ExpectedInputSchema",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "ExpectedOutputSchema",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 6,
              "label": "class ExpectedOutputSchema(BlockSchema):\n        out_key: Any = SchemaField(\n            description=\"This is an output key\",\n            title=\"out_key\",\n            advanced=False,\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ],
  "classes": []
}