{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "import subprocess\nimport sys\nimport time",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "wait_for_postgres",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def wait_for_postgres(max_retries=5, delay=5):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "for _ in range(max_retries):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 21,
                      "label": "result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 22,
                          "end_line": 22,
                          "label": "if \"accepting connections\" in result.stdout:",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 23,
                              "end_line": 24,
                              "label": "print(\"PostgreSQL is ready.\")\n                return True",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 25,
                      "end_line": 25,
                      "label": "except subprocess.CalledProcessError:",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 26,
                          "end_line": 27,
                          "label": "print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n            time.sleep(delay)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 9,
              "start_line": 28,
              "end_line": 29,
              "label": "print(\"Failed to connect to PostgreSQL.\")\n    return False",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "run_command",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def run_command(command, check=True):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "subprocess.run(command, check=check)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "except subprocess.CalledProcessError as e:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "print(f\"Command failed: {e}\")",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "sys.exit(1)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 13,
          "label": "def test():\n    # Start PostgreSQL with Docker Compose\n    run_command(\n        [\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]\n    )",
          "successors": [
            {
              "id": 2,
              "start_line": 14,
              "end_line": 14,
              "label": "if not wait_for_postgres():",
              "successors": [
                {
                  "id": 3,
                  "start_line": 15,
                  "end_line": 16,
                  "label": "run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n        sys.exit(1)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 17,
                  "end_line": 22,
                  "label": "# Run Prisma migrations\n    run_command([\"prisma\", \"migrate\", \"dev\"])\n    # Run the tests\n    result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)\n    run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n    sys.exit(result.returncode)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}