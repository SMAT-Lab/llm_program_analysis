{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "from __future__ import annotations",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "IIRFilter",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 17,
          "label": "class IIRFilter:\n    r\"\"\"\n    N-Order IIR filter\n    Assumes working with float samples normalized on [-1, 1]\n    ---\n    Implementation details:\n    Based on the 2nd-order function from\n    https://en.wikipedia.org/wiki/Digital_biquad_filter,\n    this generalized N-order function was made.\n    Using the following transfer function\n        .. math:: H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}}\n                  {a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}}\n    we can rewrite this to\n        .. math:: y[n]={\\frac{1}{a_{0}}}\n                  \\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)-\n                  \\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right)\n    \"\"\"",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self, order: int) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 10,
                  "label": "self.order = order\n        # a_{0} ... a_{k}\n        self.a_coeffs = [1.0] + [0.0] * order\n        # b_{0} ... b_{k}\n        self.b_coeffs = [1.0] + [0.0] * order\n        # x[n-1] ... x[n-k]\n        self.input_history = [0.0] * self.order\n        # y[n-1] ... y[n-k]\n        self.output_history = [0.0] * self.order",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "set_coefficients",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 14,
              "label": "def set_coefficients(self, a_coeffs: list[float], b_coeffs: list[float]) -> None:\n        \"\"\"\n        Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n        This method works well with scipy's filter design functions\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        ...                                          btype='lowpass',\n        ...                                          fs=48000)\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 15,
                  "end_line": 16,
                  "label": "if len(a_coeffs) < self.order:\n            a_coeffs = [1.0, *a_coeffs]",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 17,
                      "end_line": 22,
                      "label": "if len(a_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected a_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 23,
                          "end_line": 28,
                          "label": "if len(b_coeffs) != self.order + 1:\n            msg = (\n                f\"Expected b_coeffs to have {self.order + 1} elements \"\n                f\"for {self.order}-order filter, got {len(a_coeffs)}\"\n            )\n            raise ValueError(msg)",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 29,
                              "end_line": 30,
                              "label": "self.a_coeffs = a_coeffs\n        self.b_coeffs = b_coeffs",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "process",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 7,
              "label": "def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate :math:`y[n]`\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "result = 0.0",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 9,
                      "end_line": 10,
                      "label": "# Start at index 1 and do index 0 at the end.\n        for i in range(1, self.order + 1):",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 11,
                          "end_line": 14,
                          "label": "result += (\n                self.b_coeffs[i] * self.input_history[i - 1]\n                - self.a_coeffs[i] * self.output_history[i - 1]\n            )",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 15,
                              "end_line": 15,
                              "label": "result = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 16,
                                  "end_line": 17,
                                  "label": "self.input_history[1:] = self.input_history[:-1]\n        self.output_history[1:] = self.output_history[:-1]",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 18,
                                      "end_line": 19,
                                      "label": "self.input_history[0] = sample\n        self.output_history[0] = result",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 20,
                                          "end_line": 20,
                                          "label": "return result",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}