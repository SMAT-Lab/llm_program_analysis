{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 5,
      "label": "import json\nfrom typing import Optional\nfrom cryptography.fernet import Fernet\nfrom backend.util.settings import Settings\nENCRYPTION_KEY = Settings().secrets.encryption_key",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "JSONCryptor",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "if not self.key:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 7,
                      "label": "raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 8,
                      "end_line": 10,
                      "label": "self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "encrypt",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def encrypt(self, data: dict) -> str:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "\"\"\"Encrypt dictionary data to string\"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "json_str = json.dumps(data)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "encrypted = self.fernet.encrypt(json_str.encode())",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 5,
                              "end_line": 5,
                              "label": "return encrypted.decode()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "decrypt",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "if not encrypted_str:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "return {}",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 6,
                      "label": "decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}