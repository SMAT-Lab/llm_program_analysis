{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 12,
      "label": "from enum import Enum\nfrom typing import Literal\nfrom e2b_code_interpreter import Sandbox\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName",
      "successors": [
        {
          "id": 2,
          "start_line": 13,
          "end_line": 19,
          "label": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"e2b\",\n    api_key=SecretStr(\"mock-e2b-api-key\"),\n    title=\"Mock E2B API key\",\n    expires_at=None,\n)",
          "successors": [
            {
              "id": 3,
              "start_line": 20,
              "end_line": 25,
              "label": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "ProgrammingLanguage",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "class ProgrammingLanguage(Enum):\n    PYTHON = \"python\"\n    JAVASCRIPT = \"js\"\n    BASH = \"bash\"\n    R = \"r\"\n    JAVA = \"java\"",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "CodeExecutionBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "class CodeExecutionBlock(Block):\n    # TODO : Add support to upload and download files\n    # Currently, You can customized the CPU and Memory, only by creating a pre customized sandbox template",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 28,
                  "label": "super().__init__(\n            id=\"0b02b072-abe7-11ef-8372-fb5d162dd712\",\n            description=\"Executes code in an isolated sandbox environment with internet access.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=CodeExecutionBlock.Input,\n            output_schema=CodeExecutionBlock.Output,\n            test_credentials=TEST_CREDENTIALS,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"code\": \"print('Hello World')\",\n                \"language\": ProgrammingLanguage.PYTHON.value,\n                \"setup_commands\": [],\n                \"timeout\": 300,\n                \"template_id\": \"\",\n            },\n            test_output=[\n                (\"response\", \"Hello World\"),\n                (\"stdout_logs\", \"Hello World\\n\"),\n            ],\n            test_mock={\n                \"execute_code\": lambda code, language, setup_commands, timeout, api_key, template_id: (\n                    \"Hello World\",\n                    \"Hello World\\n\",\n                    \"\",\n                ),\n            },\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "execute_code",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 9,
              "label": "def execute_code(\n        self,\n        code: str,\n        language: ProgrammingLanguage,\n        setup_commands: list[str],\n        timeout: int,\n        api_key: str,\n        template_id: str,\n    ):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 11,
                      "end_line": 11,
                      "label": "sandbox = None",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 12,
                          "end_line": 12,
                          "label": "if template_id:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 13,
                              "end_line": 15,
                              "label": "sandbox = Sandbox(\n                    template=template_id, api_key=api_key, timeout=timeout\n                )",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 18,
                                  "end_line": 18,
                                  "label": "if not sandbox:",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 19,
                                      "end_line": 19,
                                      "label": "raise Exception(\"Sandbox not created\")",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 6,
                              "start_line": 16,
                              "end_line": 17,
                              "label": "else:\n                sandbox = Sandbox(api_key=api_key, timeout=timeout)",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 18,
                                  "end_line": 18,
                                  "label": "if not sandbox:",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 19,
                                      "end_line": 19,
                                      "label": "raise Exception(\"Sandbox not created\")",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 9,
              "start_line": 20,
              "end_line": 20,
              "label": "# Running setup commands",
              "successors": [
                {
                  "id": 10,
                  "start_line": 21,
                  "end_line": 21,
                  "label": "for cmd in setup_commands:",
                  "successors": [
                    {
                      "id": 11,
                      "start_line": 22,
                      "end_line": 22,
                      "label": "sandbox.commands.run(cmd)",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 12,
              "start_line": 23,
              "end_line": 23,
              "label": "# Executing the code",
              "successors": [
                {
                  "id": 13,
                  "start_line": 24,
                  "end_line": 28,
                  "label": "execution = sandbox.run_code(\n                code,\n                language=language.value,\n                on_error=lambda e: sandbox.kill(),  # Kill the sandbox if there is an error\n            )",
                  "successors": [
                    {
                      "id": 14,
                      "start_line": 29,
                      "end_line": 29,
                      "label": "if execution.error:",
                      "successors": [
                        {
                          "id": 15,
                          "start_line": 30,
                          "end_line": 30,
                          "label": "raise Exception(execution.error)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 16,
              "start_line": 31,
              "end_line": 34,
              "label": "response = execution.text\n            stdout_logs = \"\".join(execution.logs.stdout)\n            stderr_logs = \"\".join(execution.logs.stderr)\n            return response, stdout_logs, stderr_logs",
              "successors": []
            },
            {
              "id": 17,
              "start_line": 35,
              "end_line": 35,
              "label": "except Exception as e:",
              "successors": [
                {
                  "id": 18,
                  "start_line": 36,
                  "end_line": 36,
                  "label": "raise e",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 12,
                      "label": "response, stdout_logs, stderr_logs = self.execute_code(\n                input_data.code,\n                input_data.language,\n                input_data.setup_commands,\n                input_data.timeout,\n                credentials.api_key.get_secret_value(),\n                input_data.template_id,\n            )",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 13,
                          "end_line": 13,
                          "label": "if response:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 14,
                              "end_line": 14,
                              "label": "yield \"response\", response",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "if stdout_logs:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 16,
                              "end_line": 16,
                              "label": "yield \"stdout_logs\", stdout_logs",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "start_line": 17,
                          "end_line": 17,
                          "label": "if stderr_logs:",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 18,
                              "end_line": 18,
                              "label": "yield \"stderr_logs\", stderr_logs",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "start_line": 19,
                  "end_line": 19,
                  "label": "except Exception as e:",
                  "successors": [
                    {
                      "id": 11,
                      "start_line": 20,
                      "end_line": 20,
                      "label": "yield \"error\", str(e)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 41,
                  "label": "credentials: CredentialsMetaInput[\n            Literal[ProviderName.E2B], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs\",\n        )\n        # Todo : Option to run commond in background\n        setup_commands: list[str] = SchemaField(\n            description=(\n                \"Shell commands to set up the sandbox before running the code. \"\n                \"You can use `curl` or `git` to install your desired Debian based \"\n                \"package manager. `pip` and `npm` are pre-installed.\\n\\n\"\n                \"These commands are executed with `sh`, in the foreground.\"\n            ),\n            placeholder=\"pip install cowsay\",\n            default=[],\n            advanced=False,\n        )\n        code: str = SchemaField(\n            description=\"Code to execute in the sandbox\",\n            placeholder=\"print('Hello, World!')\",\n            default=\"\",\n            advanced=False,\n        )\n        language: ProgrammingLanguage = SchemaField(\n            description=\"Programming language to execute\",\n            default=ProgrammingLanguage.PYTHON,\n            advanced=False,\n        )\n        timeout: int = SchemaField(\n            description=\"Execution timeout in seconds\", default=300\n        )\n        template_id: str = SchemaField(\n            description=(\n                \"You can use an E2B sandbox template by entering its ID here. \"\n                \"Check out the E2B docs for more details: \"\n                \"[E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)\"\n            ),\n            default=\"\",\n            advanced=True,\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 7,
              "label": "class Output(BlockSchema):\n        response: str = SchemaField(description=\"Response from code execution\")\n        stdout_logs: str = SchemaField(\n            description=\"Standard output logs from execution\"\n        )\n        stderr_logs: str = SchemaField(description=\"Standard error logs from execution\")\n        error: str = SchemaField(description=\"Error message if execution failed\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}