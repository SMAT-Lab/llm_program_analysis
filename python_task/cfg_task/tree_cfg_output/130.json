{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 10,
      "label": "from typing import List, Optional\nfrom pydantic import BaseModel\nfrom backend.blocks.exa._auth import (\n    ExaCredentials,\n    ExaCredentialsField,\n    ExaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "__init__",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def __init__(self):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 8,
              "label": "super().__init__(\n            id=\"c52be83f-f8cd-4180-b243-af35f986b461\",\n            description=\"Retrieves document contents using Exa's contents API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaContentsBlock.Input,\n            output_schema=ExaContentsBlock.Output,\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "run",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 14,
          "label": "def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.exa.ai/contents\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n        payload = {\n            \"ids\": input_data.ids,\n            \"text\": input_data.contents.text,\n            \"highlights\": input_data.contents.highlights,\n            \"summary\": input_data.contents.summary,\n        }",
          "successors": [
            {
              "id": 2,
              "start_line": 15,
              "end_line": 19,
              "label": "try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])",
              "successors": [
                {
                  "id": 3,
                  "start_line": 20,
                  "end_line": 22,
                  "label": "except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "ContentRetrievalSettings",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class ContentRetrievalSettings(BaseModel):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 6,
              "label": "text: Optional[dict] = SchemaField(\n        description=\"Text content settings\",\n        default={\"maxCharacters\": 1000, \"includeHtmlTags\": False},\n        advanced=True,\n    )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 15,
                  "label": "highlights: Optional[dict] = SchemaField(\n        description=\"Highlight settings\",\n        default={\n            \"numSentences\": 3,\n            \"highlightsPerUrl\": 3,\n            \"query\": \"\",\n        },\n        advanced=True,\n    )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 16,
                      "end_line": 20,
                      "label": "summary: Optional[dict] = SchemaField(\n        description=\"Summary settings\",\n        default={\"query\": \"\"},\n        advanced=True,\n    )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ExaContentsBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class ExaContentsBlock(Block):",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 8,
                  "label": "super().__init__(\n            id=\"c52be83f-f8cd-4180-b243-af35f986b461\",\n            description=\"Retrieves document contents using Exa's contents API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaContentsBlock.Input,\n            output_schema=ExaContentsBlock.Output,\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 14,
              "label": "def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.exa.ai/contents\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n        payload = {\n            \"ids\": input_data.ids,\n            \"text\": input_data.contents.text,\n            \"highlights\": input_data.contents.highlights,\n            \"summary\": input_data.contents.summary,\n        }",
              "successors": [
                {
                  "id": 2,
                  "start_line": 15,
                  "end_line": 19,
                  "label": "try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 20,
                      "end_line": 22,
                      "label": "except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "class Output(BlockSchema):\n        results: list = SchemaField(\n            description=\"List of document contents\",\n            default=[],\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}