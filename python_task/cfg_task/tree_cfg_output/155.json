{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "VehicleSize",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "Vehicle",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class Vehicle(metaclass=ABCMeta):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "@abstractmethod",
              "successors": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self, vehicle_size, license_plate, spot_size):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 5,
                  "label": "self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "clear_spots",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def clear_spots(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "for spot in self.spots_taken:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "spot.remove_vehicle(self)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "self.spots_taken = []",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "take_spot",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def take_spot(self, spot):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "self.spots_taken.append(spot)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "can_fit_in_spot",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def can_fit_in_spot(self, spot):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Motorcycle",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "can_fit_in_spot",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def can_fit_in_spot(self, spot):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return True",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Car",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "can_fit_in_spot",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def can_fit_in_spot(self, spot):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Bus",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "can_fit_in_spot",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def can_fit_in_spot(self, spot):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return spot.size == VehicleSize.LARGE",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "ParkingLot",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self, num_levels):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 3,
                  "label": "self.num_levels = num_levels\n        self.levels = []  # List of Levels",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "park_vehicle",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def park_vehicle(self, vehicle):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "for level in self.levels:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "if level.park_vehicle(vehicle):",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "return True",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "return False",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Level",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "class Level(object):\n    SPOTS_PER_ROW = 10",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self, floor, total_spots):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 5,
                  "label": "self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []  # List of ParkingSpots",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "spot_freed",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def spot_freed(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "self.available_spots += 1",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "park_vehicle",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "if spot is None:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "return None",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 7,
                      "label": "else:\n            spot.park_vehicle(vehicle)\n            return spot",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_find_available_spot",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_park_starting_at_spot",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "ParkingSpot",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class ParkingSpot(object):",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self, level, row, spot_number, spot_size, vehicle_size):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 7,
                  "label": "self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "is_available",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def is_available(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return True if self.vehicle is None else False",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "can_fit_vehicle",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def can_fit_vehicle(self, vehicle):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "if self.vehicle is not None:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "return False",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "return vehicle.can_fit_in_spot(self)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "park_vehicle",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def park_vehicle(self, vehicle):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "remove_vehicle",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def remove_vehicle(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}