{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 13,
      "label": "#!/usr/bin/env python\n# coding: utf-8\n\"\"\"\n    The approach taken is explained below. I decided to do it simply.\n    Initially I was considering parsing the data into some sort of\n    structure and then generating an appropriate README. I am still\n    considering doing it - but for now this should work. The only issue\n    I see is that it only sorts the entries at the lowest level, and that\n    the order of the top-level contents do not match the order of the actual\n    entries.\n    This could be extended by having nested blocks, sorting them recursively\n    and flattening the end structure into a list of lines. Revision 2 maybe ^.^.\n\"\"\"",
      "successors": [
        {
          "id": 2,
          "start_line": 14,
          "end_line": 15,
          "label": "if __name__ == \"__main__\":\n    main()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "sort_blocks",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def sort_blocks():\n    # First, we load the current README into memory",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 4,
              "label": "with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.read()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 7,
                  "label": "# Separating the 'table of contents' from the contents (blocks)\n    table_of_contents = ''.join(read_me.split('- - -')[0])\n    blocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 8,
                      "end_line": 8,
                      "label": "for i in range(len(blocks)):",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 9,
                          "end_line": 10,
                          "label": "if i == 0:\n            blocks[i] = blocks[i] + '\\n'",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 11,
                          "end_line": 12,
                          "label": "else:\n            blocks[i] = '# ' + blocks[i] + '\\n'",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 7,
          "start_line": 13,
          "end_line": 14,
          "label": "# Sorting the libraries\n    inner_blocks = sorted(blocks[0].split('##'))",
          "successors": [
            {
              "id": 8,
              "start_line": 15,
              "end_line": 15,
              "label": "for i in range(1, len(inner_blocks)):",
              "successors": [
                {
                  "id": 9,
                  "start_line": 16,
                  "end_line": 17,
                  "label": "if inner_blocks[i][0] != '#':\n            inner_blocks[i] = '##' + inner_blocks[i]",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "id": 10,
          "start_line": 18,
          "end_line": 19,
          "label": "inner_blocks = ''.join(inner_blocks)\n    # Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file",
          "successors": [
            {
              "id": 11,
              "start_line": 20,
              "end_line": 21,
              "label": "blocks[0] = inner_blocks\n    final_README = table_of_contents + '- - -' + ''.join(blocks)",
              "successors": [
                {
                  "id": 12,
                  "start_line": 22,
                  "end_line": 23,
                  "label": "with open('README.md', 'w+') as sorted_file:\n        sorted_file.write(final_README)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def main():\n    # First, we load the current README into memory as an array of lines",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 4,
              "label": "with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.readlines()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 10,
                  "label": "# Then we cluster the lines together as blocks\n    # Each block represents a collection of lines that should be sorted\n    # This was done by assuming only links ([...](...)) are meant to be sorted\n    # Clustering is done by indentation\n    blocks = []\n    last_indent = None",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 11,
                      "end_line": 12,
                      "label": "for line in read_me:\n        s_line = line.lstrip()",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 13,
                          "end_line": 13,
                          "label": "indent = len(line) - len(s_line)",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 14,
                              "end_line": 14,
                              "label": "if any([s_line.startswith(s) for s in ['* [', '- [']]):",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 15,
                                  "end_line": 15,
                                  "label": "if indent == last_indent:",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 16,
                                      "end_line": 16,
                                      "label": "blocks[-1].append(line)",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 19,
                                          "end_line": 19,
                                          "label": "last_indent = indent",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 20,
                                              "end_line": 20,
                                              "label": "else:",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 21,
                                                  "end_line": 21,
                                                  "label": "blocks.append([line])",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "start_line": 22,
                                                      "end_line": 22,
                                                      "label": "last_indent = None",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "start_line": 23,
                                                          "end_line": 24,
                                                          "label": "with open('README.md', 'w+') as sorted_file:\n        # Then all of the blocks are sorted individually",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "start_line": 25,
                                                              "end_line": 27,
                                                              "label": "blocks = [\n            ''.join(sorted(block, key=str.lower)) for block in blocks\n        ]",
                                                              "successors": [
                                                                {
                                                                  "id": 15,
                                                                  "start_line": 28,
                                                                  "end_line": 29,
                                                                  "label": "# And the result is written back to README.md\n        sorted_file.write(''.join(blocks))",
                                                                  "successors": [
                                                                    {
                                                                      "id": 16,
                                                                      "start_line": 30,
                                                                      "end_line": 31,
                                                                      "label": "# Then we call the sorting method\n    sort_blocks()",
                                                                      "successors": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 17,
                                      "start_line": 17,
                                      "end_line": 17,
                                      "label": "else:",
                                      "successors": [
                                        {
                                          "id": 18,
                                          "start_line": 18,
                                          "end_line": 18,
                                          "label": "blocks.append([line])",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "start_line": 19,
                                              "end_line": 19,
                                              "label": "last_indent = indent",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}