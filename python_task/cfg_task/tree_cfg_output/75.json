{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "import pytest\nfrom .utils import remove_color_codes",
      "successors": [
        {
          "id": 2,
          "start_line": 3,
          "end_line": 31,
          "label": "@pytest.mark.parametrize(\n    \"raw_text, clean_text\",\n    [\n        (\n            \"COMMAND = \\x1b[36mbrowse_website\\x1b[0m  \"\n            \"ARGUMENTS = \\x1b[36m{'url': 'https://www.google.com',\"\n            \" 'question': 'What is the capital of France?'}\\x1b[0m\",\n            \"COMMAND = browse_website  \"\n            \"ARGUMENTS = {'url': 'https://www.google.com',\"\n            \" 'question': 'What is the capital of France?'}\",\n        ),\n        (\n            \"{'Schaue dir meine Projekte auf github () an, als auch meine Webseiten': \"\n            \"'https://github.com/Significant-Gravitas/AutoGPT,\"\n            \" https://discord.gg/autogpt und https://twitter.com/Auto_GPT'}\",\n            \"{'Schaue dir meine Projekte auf github () an, als auch meine Webseiten': \"\n            \"'https://github.com/Significant-Gravitas/AutoGPT,\"\n            \" https://discord.gg/autogpt und https://twitter.com/Auto_GPT'}\",\n        ),\n        (\"\", \"\"),\n        (\"hello\", \"hello\"),\n        (\"hello\\x1b[31m world\", \"hello world\"),\n        (\"\\x1b[36mHello,\\x1b[32m World!\", \"Hello, World!\"),\n        (\n            \"\\x1b[1m\\x1b[31mError:\\x1b[0m\\x1b[31m file not found\",\n            \"Error: file not found\",\n        ),\n    ],\n)",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "test_remove_color_codes",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def test_remove_color_codes(raw_text, clean_text):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "assert remove_color_codes(raw_text) == clean_text",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}