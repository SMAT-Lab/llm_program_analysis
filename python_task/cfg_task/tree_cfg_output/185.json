{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 5,
      "label": "\"\"\"\nIn this problem, we want to determine all possible combinations of k\nnumbers out of 1 ... n. We use backtracking to solve this problem.\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),\n\"\"\"",
      "successors": [
        {
          "id": 2,
          "start_line": 6,
          "end_line": 7,
          "label": "from __future__ import annotations\nfrom itertools import combinations",
          "successors": [
            {
              "id": 3,
              "start_line": 8,
              "end_line": 8,
              "label": "if __name__ == \"__main__\":",
              "successors": [
                {
                  "id": 4,
                  "start_line": 9,
                  "end_line": 10,
                  "label": "from doctest import testmod\n    testmod()",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 11,
                      "end_line": 11,
                      "label": "print(generate_all_combinations(n=4, k=2))",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 12,
                          "end_line": 12,
                          "label": "tests = ((n, k) for n in range(1, 5) for k in range(1, 5))",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 13,
                              "end_line": 14,
                              "label": "for n, k in tests:\n        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 15,
                                  "end_line": 15,
                                  "label": "print(\"Benchmark:\")",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 16,
                                      "end_line": 16,
                                      "label": "from timeit import timeit",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "start_line": 17,
                                          "end_line": 18,
                                          "label": "for func in (\"combination_lists\", \"generate_all_combinations\"):\n        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "combination_lists",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "def combination_lists(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "return [list(x) for x in combinations(range(1, n + 1), k)]",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "generate_all_combinations",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 21,
          "label": "def generate_all_combinations(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 22,
              "end_line": 23,
              "label": "if k < 0:\n        raise ValueError(\"k must not be negative\")",
              "successors": [
                {
                  "id": 3,
                  "start_line": 24,
                  "end_line": 25,
                  "label": "if n < 0:\n        raise ValueError(\"n must not be negative\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 26,
                      "end_line": 28,
                      "label": "result: list[list[int]] = []\n    create_all_state(1, n, k, [], result)\n    return result",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_all_state",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 7,
          "label": "def create_all_state(\n    increment: int,\n    total_number: int,\n    level: int,\n    current_list: list[int],\n    total_list: list[list[int]],\n) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 8,
              "label": "if level == 0:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 9,
                  "end_line": 10,
                  "label": "total_list.append(current_list[:])\n        return",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 12,
                      "end_line": 14,
                      "label": "current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 11,
                          "end_line": 11,
                          "label": "for i in range(increment, total_number - level + 2):",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}