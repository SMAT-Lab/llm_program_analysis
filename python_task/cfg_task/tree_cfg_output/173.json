{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "# -*- coding: utf-8 -*-\nfrom mrjob.job import MRJob",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "SalesRanker",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class SalesRanker(MRJob):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if __name__ == '__main__':",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "SalesRanker.run()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "within_past_week",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "mapper",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 10,
              "label": "def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n        Emit key value pairs of the form:\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "timestamp, product_id, category, quantity = line.split('\\t')",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 12,
                      "end_line": 12,
                      "label": "if self.within_past_week(timestamp):",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 13,
                          "end_line": 13,
                          "label": "yield (category, product_id), quantity",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "reducer",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 8,
              "label": "def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 9,
                  "end_line": 9,
                  "label": "yield key, sum(values)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "mapper_sort",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 16,
              "label": "def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n        Transform key and value to the form:\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 17,
                  "end_line": 19,
                  "label": "category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "reducer_identity",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def reducer_identity(self, key, value):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "yield key, value",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "steps",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def steps(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "\"\"\"Run the map and reduce steps.\"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 8,
                      "label": "return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}