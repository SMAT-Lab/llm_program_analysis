{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 13,
      "label": "from enum import Enum\nfrom typing import Any, Dict, Literal, Optional\nfrom pydantic import SecretStr\nfrom requests.exceptions import RequestException\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests",
      "successors": [
        {
          "id": 2,
          "start_line": 14,
          "end_line": 20,
          "label": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"ideogram\",\n    api_key=SecretStr(\"mock-ideogram-api-key\"),\n    title=\"Mock Ideogram API key\",\n    expires_at=None,\n)",
          "successors": [
            {
              "id": 3,
              "start_line": 21,
              "end_line": 26,
              "label": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "run",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "seed = input_data.seed",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 16,
                  "label": "# Step 1: Generate the image\n        result = self.run_model(\n            api_key=credentials.api_key,\n            model_name=input_data.ideogram_model_name.value,\n            prompt=input_data.prompt,\n            seed=seed,\n            aspect_ratio=input_data.aspect_ratio.value,\n            magic_prompt_option=input_data.magic_prompt_option.value,\n            style_type=input_data.style_type.value,\n            negative_prompt=input_data.negative_prompt,\n            color_palette_name=input_data.color_palette_name.value,\n        )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 17,
                      "end_line": 17,
                      "label": "# Step 2: Upscale the image if requested",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 18,
                          "end_line": 18,
                          "label": "if input_data.upscale == UpscaleOption.AI_UPSCALE:",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 19,
                              "end_line": 22,
                              "label": "result = self.upscale_image(\n                api_key=credentials.api_key,\n                image_url=result,\n            )",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 23,
                                  "end_line": 23,
                                  "label": "yield \"result\", result",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "start_line": 23,
                              "end_line": 23,
                              "label": "yield \"result\", result",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "run_model",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 12,
          "label": "def run_model(\n        self,\n        api_key: SecretStr,\n        model_name: str,\n        prompt: str,\n        seed: Optional[int],\n        aspect_ratio: str,\n        magic_prompt_option: str,\n        style_type: str,\n        negative_prompt: Optional[str],\n        color_palette_name: str,\n    ):",
          "successors": [
            {
              "id": 2,
              "start_line": 13,
              "end_line": 26,
              "label": "url = \"https://api.ideogram.ai/generate\"\n        headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }\n        data: Dict[str, Any] = {\n            \"image_request\": {\n                \"prompt\": prompt,\n                \"model\": model_name,\n                \"aspect_ratio\": aspect_ratio,\n                \"magic_prompt_option\": magic_prompt_option,\n                \"style_type\": style_type,\n            }\n        }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 27,
                  "end_line": 27,
                  "label": "if seed is not None:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 28,
                      "end_line": 28,
                      "label": "data[\"image_request\"][\"seed\"] = seed",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 29,
                  "end_line": 29,
                  "label": "if negative_prompt:",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 30,
                      "end_line": 30,
                      "label": "data[\"image_request\"][\"negative_prompt\"] = negative_prompt",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "start_line": 31,
                  "end_line": 31,
                  "label": "if color_palette_name != \"NONE\":",
                  "successors": [
                    {
                      "id": 8,
                      "start_line": 32,
                      "end_line": 32,
                      "label": "data[\"image_request\"][\"color_palette\"] = {\"name\": color_palette_name}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 9,
                  "start_line": 33,
                  "end_line": 33,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 10,
                      "start_line": 34,
                      "end_line": 35,
                      "label": "response = requests.post(url, json=data, headers=headers)\n            return response.json()[\"data\"][0][\"url\"]",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "start_line": 36,
                      "end_line": 37,
                      "label": "except RequestException as e:\n            raise Exception(f\"Failed to fetch image: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "upscale_image",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "def upscale_image(self, api_key: SecretStr, image_url: str):\n        url = \"https://api.ideogram.ai/upscale\"\n        headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n        }",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 21,
              "label": "try:\n            # Step 1: Download the image from the provided URL\n            image_response = requests.get(image_url)\n            # Step 2: Send the downloaded image to the upscale API\n            files = {\n                \"image_file\": (\"image.png\", image_response.content, \"image/png\"),\n            }\n            response = requests.post(\n                url,\n                headers=headers,\n                data={\n                    \"image_request\": \"{}\",  # Empty JSON object\n                },\n                files=files,\n            )\n            return response.json()[\"data\"][0][\"url\"]",
              "successors": [
                {
                  "id": 3,
                  "start_line": 22,
                  "end_line": 23,
                  "label": "except RequestException as e:\n            raise Exception(f\"Failed to upscale image: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "IdeogramModelName",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "MagicPromptOption",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class MagicPromptOption(str, Enum):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "AUTO = \"AUTO\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "ON = \"ON\"",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "OFF = \"OFF\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "StyleType",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 7,
          "label": "class StyleType(str, Enum):\n    AUTO = \"AUTO\"\n    GENERAL = \"GENERAL\"\n    REALISTIC = \"REALISTIC\"\n    DESIGN = \"DESIGN\"\n    RENDER_3D = \"RENDER_3D\"\n    ANIME = \"ANIME\"",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ColorPalettePreset",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "class ColorPalettePreset(str, Enum):\n    NONE = \"NONE\"\n    EMBER = \"EMBER\"\n    FRESH = \"FRESH\"\n    JUNGLE = \"JUNGLE\"\n    MAGIC = \"MAGIC\"\n    MELON = \"MELON\"\n    MOSAIC = \"MOSAIC\"\n    PASTEL = \"PASTEL\"\n    ULTRAMARINE = \"ULTRAMARINE\"",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AspectRatio",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "UpscaleOption",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class UpscaleOption(str, Enum):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 3,
              "label": "AI_UPSCALE = \"AI Upscale\"\n    NO_UPSCALE = \"No Upscale\"",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "IdeogramModelBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class IdeogramModelBlock(Block):",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 31,
                  "label": "super().__init__(\n            id=\"6ab085e2-20b3-4055-bc3e-08036e01eca6\",\n            description=\"This block runs Ideogram models with both simple and advanced settings.\",\n            categories={BlockCategory.AI},\n            input_schema=IdeogramModelBlock.Input,\n            output_schema=IdeogramModelBlock.Output,\n            test_input={\n                \"ideogram_model_name\": IdeogramModelName.V2,\n                \"prompt\": \"A futuristic cityscape at sunset\",\n                \"aspect_ratio\": AspectRatio.ASPECT_1_1,\n                \"upscale\": UpscaleOption.NO_UPSCALE,\n                \"magic_prompt_option\": MagicPromptOption.AUTO,\n                \"seed\": None,\n                \"style_type\": StyleType.AUTO,\n                \"negative_prompt\": None,\n                \"color_palette_name\": ColorPalettePreset.NONE,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, model_name, prompt, seed, aspect_ratio, magic_prompt_option, style_type, negative_prompt, color_palette_name: \"https://ideogram.ai/api/images/test-generated-image-url.png\",\n                \"upscale_image\": lambda api_key, image_url: \"https://ideogram.ai/api/images/test-upscaled-image-url.png\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 16,
                  "label": "seed = input_data.seed\n        # Step 1: Generate the image\n        result = self.run_model(\n            api_key=credentials.api_key,\n            model_name=input_data.ideogram_model_name.value,\n            prompt=input_data.prompt,\n            seed=seed,\n            aspect_ratio=input_data.aspect_ratio.value,\n            magic_prompt_option=input_data.magic_prompt_option.value,\n            style_type=input_data.style_type.value,\n            negative_prompt=input_data.negative_prompt,\n            color_palette_name=input_data.color_palette_name.value,\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 17,
                      "end_line": 17,
                      "label": "# Step 2: Upscale the image if requested",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 18,
                          "end_line": 18,
                          "label": "if input_data.upscale == UpscaleOption.AI_UPSCALE:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 19,
                              "end_line": 22,
                              "label": "result = self.upscale_image(\n                api_key=credentials.api_key,\n                image_url=result,\n            )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 6,
              "start_line": 23,
              "end_line": 23,
              "label": "yield \"result\", result",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run_model",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 12,
              "label": "def run_model(\n        self,\n        api_key: SecretStr,\n        model_name: str,\n        prompt: str,\n        seed: Optional[int],\n        aspect_ratio: str,\n        magic_prompt_option: str,\n        style_type: str,\n        negative_prompt: Optional[str],\n        color_palette_name: str,\n    ):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 13,
                  "end_line": 26,
                  "label": "url = \"https://api.ideogram.ai/generate\"\n        headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }\n        data: Dict[str, Any] = {\n            \"image_request\": {\n                \"prompt\": prompt,\n                \"model\": model_name,\n                \"aspect_ratio\": aspect_ratio,\n                \"magic_prompt_option\": magic_prompt_option,\n                \"style_type\": style_type,\n            }\n        }",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 27,
                      "end_line": 27,
                      "label": "if seed is not None:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 28,
                          "end_line": 28,
                          "label": "data[\"image_request\"][\"seed\"] = seed",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "start_line": 29,
                      "end_line": 29,
                      "label": "if negative_prompt:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 30,
                          "end_line": 30,
                          "label": "data[\"image_request\"][\"negative_prompt\"] = negative_prompt",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 31,
                      "end_line": 31,
                      "label": "if color_palette_name != \"NONE\":",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 32,
                          "end_line": 32,
                          "label": "data[\"image_request\"][\"color_palette\"] = {\"name\": color_palette_name}",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "start_line": 33,
                      "end_line": 33,
                      "label": "try:",
                      "successors": [
                        {
                          "id": 10,
                          "start_line": 34,
                          "end_line": 35,
                          "label": "response = requests.post(url, json=data, headers=headers)\n            return response.json()[\"data\"][0][\"url\"]",
                          "successors": []
                        },
                        {
                          "id": 11,
                          "start_line": 36,
                          "end_line": 37,
                          "label": "except RequestException as e:\n            raise Exception(f\"Failed to fetch image: {str(e)}\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "upscale_image",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def upscale_image(self, api_key: SecretStr, image_url: str):\n        url = \"https://api.ideogram.ai/upscale\"\n        headers = {\n            \"Api-Key\": api_key.get_secret_value(),\n        }",
              "successors": [
                {
                  "id": 2,
                  "start_line": 6,
                  "end_line": 21,
                  "label": "try:\n            # Step 1: Download the image from the provided URL\n            image_response = requests.get(image_url)\n            # Step 2: Send the downloaded image to the upscale API\n            files = {\n                \"image_file\": (\"image.png\", image_response.content, \"image/png\"),\n            }\n            response = requests.post(\n                url,\n                headers=headers,\n                data={\n                    \"image_request\": \"{}\",  # Empty JSON object\n                },\n                files=files,\n            )\n            return response.json()[\"data\"][0][\"url\"]",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 22,
                      "end_line": 23,
                      "label": "except RequestException as e:\n            raise Exception(f\"Failed to upscale image: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 59,
              "label": "class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.IDEOGRAM], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A futuristic cityscape at sunset'\",\n            title=\"Prompt\",\n        )\n        ideogram_model_name: IdeogramModelName = SchemaField(\n            description=\"The name of the Image Generation Model, e.g., V_2\",\n            default=IdeogramModelName.V2,\n            title=\"Image Generation Model\",\n            advanced=False,\n        )\n        aspect_ratio: AspectRatio = SchemaField(\n            description=\"Aspect ratio for the generated image\",\n            default=AspectRatio.ASPECT_1_1,\n            title=\"Aspect Ratio\",\n            advanced=False,\n        )\n        upscale: UpscaleOption = SchemaField(\n            description=\"Upscale the generated image\",\n            default=UpscaleOption.NO_UPSCALE,\n            title=\"Upscale Image\",\n            advanced=False,\n        )\n        magic_prompt_option: MagicPromptOption = SchemaField(\n            description=\"Whether to use MagicPrompt for enhancing the request\",\n            default=MagicPromptOption.AUTO,\n            title=\"Magic Prompt Option\",\n            advanced=True,\n        )\n        seed: Optional[int] = SchemaField(\n            description=\"Random seed. Set for reproducible generation\",\n            default=None,\n            title=\"Seed\",\n            advanced=True,\n        )\n        style_type: StyleType = SchemaField(\n            description=\"Style type to apply, applicable for V_2 and above\",\n            default=StyleType.AUTO,\n            title=\"Style Type\",\n            advanced=True,\n        )\n        negative_prompt: Optional[str] = SchemaField(\n            description=\"Description of what to exclude from the image\",\n            default=None,\n            title=\"Negative Prompt\",\n            advanced=True,\n        )\n        color_palette_name: ColorPalettePreset = SchemaField(\n            description=\"Color palette preset name, choose 'None' to skip\",\n            default=ColorPalettePreset.NONE,\n            title=\"Color Palette Preset\",\n            advanced=True,\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "class Output(BlockSchema):\n        result: str = SchemaField(description=\"Generated image URL\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}