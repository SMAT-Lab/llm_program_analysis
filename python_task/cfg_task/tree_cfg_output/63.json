{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 10,
      "label": "from pathlib import Path\nfrom prisma.models import User\nfrom backend.blocks.basic import StoreValueBlock\nfrom backend.blocks.block import BlockInstallationBlock\nfrom backend.blocks.http import SendWebRequestBlock\nfrom backend.blocks.llm import AITextGeneratorBlock\nfrom backend.blocks.text import ExtractTextInformationBlock, FillTextTemplateBlock\nfrom backend.data.graph import Graph, Link, Node, create_graph\nfrom backend.data.user import get_or_create_user\nfrom backend.util.test import SpinTestServer, wait_execution",
      "successors": [
        {
          "id": 2,
          "start_line": 11,
          "end_line": 16,
          "label": "sample_block_modules = {\n    \"llm\": \"Block that calls the AI model to generate text.\",\n    \"basic\": \"Block that does basic operations.\",\n    \"text\": \"Blocks that do text operations.\",\n    \"reddit\": \"Blocks that interacts with Reddit.\",\n}",
          "successors": [
            {
              "id": 3,
              "start_line": 17,
              "end_line": 23,
              "label": "sample_block_codes = {}\nfor module, description in sample_block_modules.items():\n    current_dir = Path(__file__).parent\n    file_path = current_dir.parent / \"blocks\" / f\"{module}.py\"\n    with open(file_path, \"r\") as f:\n        code = \"\\n\".join([\"```python\", f.read(), \"```\"])\n        sample_block_codes[module] = f\"[Example: {description}]\\n{code}\"",
              "successors": [
                {
                  "id": 4,
                  "start_line": 24,
                  "end_line": 26,
                  "label": "if __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(block_autogen_agent())",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "create_test_user",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def create_test_user() -> User:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 6,
              "label": "test_user_data = {\n        \"sub\": \"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n        \"email\": \"testuser@example.com\",\n        \"name\": \"Test User\",\n    }",
              "successors": [
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "user = await get_or_create_user(test_user_data)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 8,
                      "end_line": 8,
                      "label": "return user",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_test_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def create_test_graph() -> Graph:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 25,
              "label": "\"\"\"\n            StoreValueBlock (input)\n                 ||\n                 v\n        FillTextTemplateBlock (input query)\n                 ||\n                 v\n         SendWebRequestBlock (browse)\n                 ||\n                 v\n     ------> StoreValueBlock===============\n    |           |  |                    ||\n    |            --                     ||\n    |                                   ||\n    |                                   ||\n    |                                    v\n    |        AITextGeneratorBlock  <===== FillTextTemplateBlock (query)\n    |            ||                      ^\n    |            v                      ||\n    |       ExtractTextInformationBlock             ||\n    |            ||                     ||\n    |            v                      ||\n    ------ BlockInstallationBlock  ======\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 26,
                  "end_line": 108,
                  "label": "# ======= Nodes ========= #\n    input_data = Node(block_id=StoreValueBlock().id)\n    input_query_constant = Node(\n        block_id=StoreValueBlock().id,\n        input_default={\"data\": None},\n    )\n    input_text_formatter = Node(\n        block_id=FillTextTemplateBlock().id,\n        input_default={\n            \"format\": \"Show me how to make a python code for this query: `{query}`\",\n        },\n    )\n    search_http_request = Node(\n        block_id=SendWebRequestBlock().id,\n        input_default={\n            \"url\": \"https://osit-v2.bentlybro.com/search\",\n        },\n    )\n    search_result_constant = Node(\n        block_id=StoreValueBlock().id,\n        input_default={\n            \"data\": None,\n        },\n    )\n    prompt_text_formatter = Node(\n        block_id=FillTextTemplateBlock().id,\n        input_default={\n            \"format\": \"\"\"\nWrite me a full Block implementation for this query: `{query}`\nHere is the information I get to write a Python code for that:\n{search_result}\nHere is your previous attempt:\n{previous_attempt}\n\"\"\",\n            \"values_#_previous_attempt\": \"No previous attempt found.\",\n        },\n    )\n    code_gen_llm_call = Node(\n        block_id=AITextGeneratorBlock().id,\n        input_default={\n            \"sys_prompt\": f\"\"\"\nYou are a software engineer and you are asked to write the full class implementation.\nThe class that you are implementing is extending a class called `Block`.\nThis class will be used as a node in a graph of other blocks to build a complex system.\nThis class has a method called `run` that takes an input and returns an output.\nIt also has an `id` attribute that is a UUID, input_schema, and output_schema.\nFor UUID, you have to hardcode it, like `d2e2ecd2-9ae6-422d-8dfe-ceca500ce6a6`,\ndon't use any automatic UUID generation, because it needs to be consistent.\nTo validate the correctness of your implementation, you can also define a test.\nThere is `test_input` and `test_output` you can use to validate your implementation.\nThere is also `test_mock` to mock a helper function on your block class for testing.\nFeel free to start your answer by explaining your plan what's required how to test, etc.\nBut make sure to produce the fully working implementation at the end,\nand it should be enclosed within this block format:\n```python\n<Your implementation here>\n```\nHere are a couple of sample of the Block class implementation:\n{\"--------------\".join([sample_block_codes[v] for v in sample_block_modules])}\n\"\"\",\n        },\n    )\n    code_text_parser = Node(\n        block_id=ExtractTextInformationBlock().id,\n        input_default={\n            \"pattern\": \"```python\\n(.+?)\\n```\",\n            \"group\": 1,\n        },\n    )\n    block_installation = Node(\n        block_id=BlockInstallationBlock().id,\n    )\n    nodes = [\n        input_data,\n        input_query_constant,\n        input_text_formatter,\n        search_http_request,\n        search_result_constant,\n        prompt_text_formatter,\n        code_gen_llm_call,\n        code_text_parser,\n        block_installation,\n    ]",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 109,
                      "end_line": 195,
                      "label": "# ======= Links ========= #\n    links = [\n        Link(\n            source_id=input_data.id,\n            sink_id=input_query_constant.id,\n            source_name=\"output\",\n            sink_name=\"input\",\n        ),\n        Link(\n            source_id=input_data.id,\n            sink_id=input_text_formatter.id,\n            source_name=\"output\",\n            sink_name=\"values_#_query\",\n        ),\n        Link(\n            source_id=input_query_constant.id,\n            sink_id=input_query_constant.id,\n            source_name=\"output\",\n            sink_name=\"data\",\n        ),\n        Link(\n            source_id=input_text_formatter.id,\n            sink_id=search_http_request.id,\n            source_name=\"output\",\n            sink_name=\"body_#_query\",\n        ),\n        Link(\n            source_id=search_http_request.id,\n            sink_id=search_result_constant.id,\n            source_name=\"response_#_reply\",\n            sink_name=\"input\",\n        ),\n        Link(  # Loopback for constant block\n            source_id=search_result_constant.id,\n            sink_id=search_result_constant.id,\n            source_name=\"output\",\n            sink_name=\"data\",\n        ),\n        Link(\n            source_id=search_result_constant.id,\n            sink_id=prompt_text_formatter.id,\n            source_name=\"output\",\n            sink_name=\"values_#_search_result\",\n        ),\n        Link(\n            source_id=input_query_constant.id,\n            sink_id=prompt_text_formatter.id,\n            source_name=\"output\",\n            sink_name=\"values_#_query\",\n        ),\n        Link(\n            source_id=prompt_text_formatter.id,\n            sink_id=code_gen_llm_call.id,\n            source_name=\"output\",\n            sink_name=\"prompt\",\n        ),\n        Link(\n            source_id=code_gen_llm_call.id,\n            sink_id=code_text_parser.id,\n            source_name=\"response\",\n            sink_name=\"text\",\n        ),\n        Link(\n            source_id=code_text_parser.id,\n            sink_id=block_installation.id,\n            source_name=\"positive\",\n            sink_name=\"code\",\n        ),\n        Link(\n            source_id=block_installation.id,\n            sink_id=prompt_text_formatter.id,\n            source_name=\"error\",\n            sink_name=\"values_#_previous_attempt\",\n        ),\n        Link(  # Re-trigger search result.\n            source_id=block_installation.id,\n            sink_id=search_result_constant.id,\n            source_name=\"error\",\n            sink_name=\"input\",\n        ),\n        Link(  # Re-trigger search result.\n            source_id=block_installation.id,\n            sink_id=input_query_constant.id,\n            source_name=\"error\",\n            sink_name=\"input\",\n        ),\n    ]",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 196,
                          "end_line": 202,
                          "label": "# ======= Graph ========= #\n    return Graph(\n        name=\"BlockAutoGen\",\n        description=\"Block auto generation agent\",\n        nodes=nodes,\n        links=links,\n    )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "block_autogen_agent",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "async def block_autogen_agent():",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "async with SpinTestServer() as server:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "test_user = await create_test_user()",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "test_graph = await create_graph(create_test_graph(), user_id=test_user.id)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 5,
                          "end_line": 5,
                          "label": "input_data = {\"input\": \"Write me a block that writes a string into a file.\"}",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 6,
                              "end_line": 8,
                              "label": "response = await server.agent_server.test_execute_graph(\n            test_graph.id, input_data, test_user.id\n        )",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 9,
                                  "end_line": 9,
                                  "label": "print(response)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 10,
                                      "end_line": 15,
                                      "label": "result = await wait_execution(\n            graph_id=test_graph.id,\n            graph_exec_id=response[\"id\"],\n            timeout=1200,\n            user_id=test_user.id,\n        )",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 16,
                                          "end_line": 16,
                                          "label": "print(result)",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}