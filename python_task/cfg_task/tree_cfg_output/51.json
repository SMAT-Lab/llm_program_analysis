{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 11,
      "label": "\"\"\"\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\nWe need to find all the combinations whose sum equals to target given.\nWe can use an element more than one.\nTime complexity(Average Case): O(n!)\nConstraints:\n1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 40\n\"\"\"",
      "successors": [
        {
          "id": 2,
          "start_line": 12,
          "end_line": 15,
          "label": "if __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    main()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "backtrack",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 14,
          "label": "def backtrack(\n    candidates: list, path: list, answer: list, target: int, previous_index: int\n) -> None:\n    \"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 15,
              "end_line": 15,
              "label": "if target == 0:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "answer.append(path.copy())",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 17,
                  "end_line": 17,
                  "label": "else:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 18,
                      "end_line": 18,
                      "label": "for index in range(previous_index, len(candidates)):",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 19,
                          "end_line": 19,
                          "label": "if target >= candidates[index]:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 20,
                              "end_line": 21,
                              "label": "path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 22,
                                  "end_line": 22,
                                  "label": "path.pop(len(path) - 1)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "combination_sum",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 11,
          "label": "def combination_sum(candidates: list, target: int) -> list:\n    \"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 12,
              "end_line": 15,
              "label": "path = []  # type: list[int]\n    answer = []  # type: list[int]\n    backtrack(candidates, path, answer, target, 0)\n    return answer",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def main() -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "print(combination_sum([-8, 2.3, 0], 1))",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}