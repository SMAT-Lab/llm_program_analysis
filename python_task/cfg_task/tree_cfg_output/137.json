{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 11,
      "label": "import logging\nimport os\nimport uuid\nimport fastapi\nfrom google.cloud import storage\nimport backend.server.v2.store.exceptions\nfrom backend.util.settings import Settings\nlogger = logging.getLogger(__name__)\nALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}\nALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\"}\nMAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "check_media_exists",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "async def check_media_exists(user_id: str, filename: str) -> str | None:\n    \"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 14,
              "label": "try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 15,
                  "end_line": 17,
                  "label": "# Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 18,
                      "end_line": 19,
                      "label": "if image_blob.exists():\n            return image_blob.public_url",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 20,
                      "end_line": 22,
                      "label": "# Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n        video_blob = bucket.blob(video_path)",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 23,
                          "end_line": 24,
                          "label": "if video_blob.exists():\n            return video_blob.public_url",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 25,
                          "end_line": 25,
                          "label": "return None",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 8,
              "start_line": 26,
              "end_line": 28,
              "label": "except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "upload_media",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "async def upload_media(\n    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False\n) -> str:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "# Get file content for deeper validation",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 7,
                  "label": "try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 8,
                      "end_line": 12,
                      "label": "except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 5,
          "start_line": 13,
          "end_line": 13,
          "label": "# Validate file signature/magic bytes",
          "successors": [
            {
              "id": 6,
              "start_line": 14,
              "end_line": 14,
              "label": "if file.content_type in ALLOWED_IMAGE_TYPES:",
              "successors": [
                {
                  "id": 7,
                  "start_line": 15,
                  "end_line": 16,
                  "label": "# Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG",
                  "successors": [
                    {
                      "id": 8,
                      "start_line": 17,
                      "end_line": 20,
                      "label": "if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "start_line": 21,
                      "end_line": 21,
                      "label": "elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG",
                      "successors": [
                        {
                          "id": 10,
                          "start_line": 22,
                          "end_line": 25,
                          "label": "if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 11,
                      "start_line": 26,
                      "end_line": 26,
                      "label": "elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF",
                      "successors": [
                        {
                          "id": 12,
                          "start_line": 27,
                          "end_line": 30,
                          "label": "if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 13,
                      "start_line": 31,
                      "end_line": 31,
                      "label": "elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP",
                      "successors": [
                        {
                          "id": 14,
                          "start_line": 32,
                          "end_line": 35,
                          "label": "if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 15,
                      "start_line": 36,
                      "end_line": 39,
                      "label": "else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 16,
              "start_line": 40,
              "end_line": 40,
              "label": "elif file.content_type in ALLOWED_VIDEO_TYPES:",
              "successors": [
                {
                  "id": 17,
                  "start_line": 41,
                  "end_line": 42,
                  "label": "# Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4",
                  "successors": [
                    {
                      "id": 18,
                      "start_line": 43,
                      "end_line": 46,
                      "label": "if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                      "successors": []
                    },
                    {
                      "id": 19,
                      "start_line": 47,
                      "end_line": 47,
                      "label": "elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM",
                      "successors": [
                        {
                          "id": 20,
                          "start_line": 48,
                          "end_line": 51,
                          "label": "if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 21,
                      "start_line": 52,
                      "end_line": 55,
                      "label": "else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 22,
          "start_line": 56,
          "end_line": 56,
          "label": "settings = Settings()",
          "successors": [
            {
              "id": 23,
              "start_line": 57,
              "end_line": 57,
              "label": "# Check required settings first before doing any file processing",
              "successors": [
                {
                  "id": 24,
                  "start_line": 58,
                  "end_line": 62,
                  "label": "if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "id": 25,
          "start_line": 63,
          "end_line": 63,
          "label": "try:",
          "successors": [
            {
              "id": 26,
              "start_line": 64,
              "end_line": 65,
              "label": "# Validate file type\n        content_type = file.content_type",
              "successors": [
                {
                  "id": 27,
                  "start_line": 66,
                  "end_line": 67,
                  "label": "if content_type is None:\n            content_type = \"image/jpeg\"",
                  "successors": []
                }
              ]
            },
            {
              "id": 28,
              "start_line": 68,
              "end_line": 71,
              "label": "if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):",
              "successors": [
                {
                  "id": 29,
                  "start_line": 72,
                  "end_line": 75,
                  "label": "logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )",
                  "successors": []
                }
              ]
            },
            {
              "id": 30,
              "start_line": 76,
              "end_line": 76,
              "label": "# Validate file size",
              "successors": [
                {
                  "id": 31,
                  "start_line": 77,
                  "end_line": 78,
                  "label": "file_size = 0\n        chunk_size = 8192  # 8KB chunks",
                  "successors": [
                    {
                      "id": 32,
                      "start_line": 79,
                      "end_line": 80,
                      "label": "try:\n            while chunk := await file.read(chunk_size):",
                      "successors": [
                        {
                          "id": 33,
                          "start_line": 81,
                          "end_line": 86,
                          "label": "file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 34,
                      "start_line": 87,
                      "end_line": 88,
                      "label": "except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise",
                      "successors": []
                    },
                    {
                      "id": 35,
                      "start_line": 89,
                      "end_line": 93,
                      "label": "except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 36,
              "start_line": 94,
              "end_line": 95,
              "label": "# Reset file pointer\n        await file.seek(0)",
              "successors": [
                {
                  "id": 37,
                  "start_line": 96,
                  "end_line": 97,
                  "label": "# Generate unique filename\n        filename = file.filename or \"\"",
                  "successors": [
                    {
                      "id": 38,
                      "start_line": 98,
                      "end_line": 98,
                      "label": "file_ext = os.path.splitext(filename)[1].lower()",
                      "successors": [
                        {
                          "id": 39,
                          "start_line": 99,
                          "end_line": 100,
                          "label": "if use_file_name:\n            unique_filename = filename",
                          "successors": []
                        },
                        {
                          "id": 40,
                          "start_line": 101,
                          "end_line": 102,
                          "label": "else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 41,
              "start_line": 103,
              "end_line": 104,
              "label": "# Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"",
              "successors": [
                {
                  "id": 42,
                  "start_line": 105,
                  "end_line": 105,
                  "label": "storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"",
                  "successors": [
                    {
                      "id": 43,
                      "start_line": 106,
                      "end_line": 106,
                      "label": "try:",
                      "successors": [
                        {
                          "id": 44,
                          "start_line": 107,
                          "end_line": 108,
                          "label": "storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)",
                          "successors": [
                            {
                              "id": 45,
                              "start_line": 109,
                              "end_line": 110,
                              "label": "blob = bucket.blob(storage_path)\n            blob.content_type = content_type",
                              "successors": [
                                {
                                  "id": 46,
                                  "start_line": 111,
                                  "end_line": 112,
                                  "label": "file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)",
                                  "successors": [
                                    {
                                      "id": 47,
                                      "start_line": 113,
                                      "end_line": 115,
                                      "label": "public_url = blob.public_url\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 48,
                          "start_line": 116,
                          "end_line": 120,
                          "label": "except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 49,
          "start_line": 121,
          "end_line": 122,
          "label": "except backend.server.v2.store.exceptions.MediaUploadError:\n        raise",
          "successors": [],
          "functions": [],
          "classes": []
        },
        {
          "id": 50,
          "start_line": 123,
          "end_line": 127,
          "label": "except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e",
          "successors": [],
          "functions": [],
          "classes": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}