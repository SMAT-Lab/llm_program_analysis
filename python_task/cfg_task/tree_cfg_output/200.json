{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 8,
      "label": "import ipaddress\nimport re\nimport socket\nfrom typing import Callable\nfrom urllib.parse import urlparse, urlunparse\nimport idna\nimport requests as req\nfrom backend.util.settings import Config",
      "successors": [
        {
          "id": 2,
          "start_line": 9,
          "end_line": 21,
          "label": "# List of IP networks to block\nBLOCKED_IP_NETWORKS = [\n    # --8<-- [start:BLOCKED_IP_NETWORKS]\n    ipaddress.ip_network(\"0.0.0.0/8\"),  # \"This\" Network\n    ipaddress.ip_network(\"10.0.0.0/8\"),  # Private-Use\n    ipaddress.ip_network(\"127.0.0.0/8\"),  # Loopback\n    ipaddress.ip_network(\"169.254.0.0/16\"),  # Link Local\n    ipaddress.ip_network(\"172.16.0.0/12\"),  # Private-Use\n    ipaddress.ip_network(\"192.168.0.0/16\"),  # Private-Use\n    ipaddress.ip_network(\"224.0.0.0/4\"),  # Multicast\n    ipaddress.ip_network(\"240.0.0.0/4\"),  # Reserved for Future Use\n    # --8<-- [end:BLOCKED_IP_NETWORKS]\n]",
          "successors": [
            {
              "id": 3,
              "start_line": 22,
              "end_line": 24,
              "label": "ALLOWED_SCHEMES = [\"http\", \"https\"]\nHOSTNAME_REGEX = re.compile(r\"^[A-Za-z0-9.-]+$\")  # Basic DNS-safe hostname pattern\nrequests = Requests(trusted_origins=Config().trust_endpoints_for_requests)",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "_canonicalize_url",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def _canonicalize_url(url: str) -> str:\n    # Strip spaces and trailing slashes\n    url = url.strip().strip(\"/\")\n    # Ensure the URL starts with http:// or https://",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 5,
              "label": "if not url.startswith((\"http://\", \"https://\")):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "url = \"http://\" + url",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 7,
                      "end_line": 9,
                      "label": "# Replace backslashes with forward slashes to avoid parsing ambiguities\n    url = url.replace(\"\\\\\", \"/\")\n    return url",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 7,
                  "end_line": 9,
                  "label": "# Replace backslashes with forward slashes to avoid parsing ambiguities\n    url = url.replace(\"\\\\\", \"/\")\n    return url",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "_is_ip_blocked",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def _is_ip_blocked(ip: str) -> bool:\n    \"\"\"\n    Checks if the IP address is in a blocked network.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 5,
              "label": "ip_addr = ipaddress.ip_address(ip)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "return any(ip_addr in network for network in BLOCKED_IP_NETWORKS)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "validate_url",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "def validate_url(url: str, trusted_origins: list[str]) -> str:\n    \"\"\"\n    Validates the URL to prevent SSRF attacks by ensuring it does not point to a private\n    or untrusted IP address, unless whitelisted.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 6,
              "end_line": 6,
              "label": "url = _canonicalize_url(url)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "parsed = urlparse(url)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 8,
                      "end_line": 9,
                      "label": "# Check scheme\n    if parsed.scheme not in ALLOWED_SCHEMES:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 10,
                          "end_line": 12,
                          "label": "raise ValueError(\n            f\"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\"\n        )",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 13,
                          "end_line": 14,
                          "label": "# Validate and IDNA encode the hostname\n    if not parsed.hostname:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 15,
                              "end_line": 15,
                              "label": "raise ValueError(\"Invalid URL: No hostname found.\")",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "start_line": 16,
                              "end_line": 17,
                              "label": "# IDNA encode to prevent Unicode domain attacks\n    try:",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 18,
                                  "end_line": 18,
                                  "label": "ascii_hostname = idna.encode(parsed.hostname).decode(\"ascii\")",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "start_line": 19,
                                      "end_line": 20,
                                      "label": "except idna.IDNAError:\n        raise ValueError(\"Invalid hostname with unsupported characters.\")",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 11,
          "start_line": 21,
          "end_line": 22,
          "label": "# Check hostname characters\n    if not HOSTNAME_REGEX.match(ascii_hostname):",
          "successors": [
            {
              "id": 12,
              "start_line": 23,
              "end_line": 23,
              "label": "raise ValueError(\"Hostname contains invalid characters.\")",
              "successors": []
            },
            {
              "id": 13,
              "start_line": 24,
              "end_line": 25,
              "label": "# Rebuild the URL with the normalized, IDNA-encoded hostname\n    parsed = parsed._replace(netloc=ascii_hostname)",
              "successors": [
                {
                  "id": 14,
                  "start_line": 26,
                  "end_line": 26,
                  "label": "url = str(urlunparse(parsed))",
                  "successors": [
                    {
                      "id": 15,
                      "start_line": 27,
                      "end_line": 28,
                      "label": "# Check if hostname is a trusted origin (exact match)\n    if ascii_hostname in trusted_origins:",
                      "successors": [
                        {
                          "id": 16,
                          "start_line": 29,
                          "end_line": 29,
                          "label": "return url",
                          "successors": []
                        },
                        {
                          "id": 17,
                          "start_line": 30,
                          "end_line": 31,
                          "label": "# Resolve all IP addresses for the hostname\n    try:",
                          "successors": [
                            {
                              "id": 18,
                              "start_line": 32,
                              "end_line": 32,
                              "label": "ip_addresses = {res[4][0] for res in socket.getaddrinfo(ascii_hostname, None)}",
                              "successors": [
                                {
                                  "id": 19,
                                  "start_line": 33,
                                  "end_line": 34,
                                  "label": "except socket.gaierror:\n        raise ValueError(f\"Unable to resolve IP address for hostname {ascii_hostname}\")",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 20,
          "start_line": 35,
          "end_line": 35,
          "label": "if not ip_addresses:",
          "successors": [
            {
              "id": 21,
              "start_line": 36,
              "end_line": 36,
              "label": "raise ValueError(f\"No IP addresses found for {ascii_hostname}\")",
              "successors": []
            },
            {
              "id": 22,
              "start_line": 37,
              "end_line": 38,
              "label": "# Check if any resolved IP address falls into blocked ranges\n    for ip in ip_addresses:",
              "successors": [
                {
                  "id": 23,
                  "start_line": 39,
                  "end_line": 39,
                  "label": "if _is_ip_blocked(ip):",
                  "successors": [
                    {
                      "id": 24,
                      "start_line": 40,
                      "end_line": 42,
                      "label": "raise ValueError(\n                f\"Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.\"\n            )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 25,
          "start_line": 43,
          "end_line": 43,
          "label": "return url",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "Requests",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "class Requests:\n    \"\"\"\n    A wrapper around the requests library that validates URLs before making requests.\n    \"\"\"",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 7,
              "label": "def __init__(\n        self,\n        trusted_origins: list[str] | None = None,\n        raise_for_status: bool = True,\n        extra_url_validator: Callable[[str], str] | None = None,\n        extra_headers: dict[str, str] | None = None,\n    ):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "self.trusted_origins = []",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 9,
                      "end_line": 9,
                      "label": "for url in trusted_origins or []:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "hostname = urlparse(url).hostname",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 11,
                              "end_line": 11,
                              "label": "if not hostname:",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 12,
                                  "end_line": 12,
                                  "label": "raise ValueError(f\"Invalid URL: Unable to determine hostname of {url}\")",
                                  "successors": []
                                },
                                {
                                  "id": 7,
                                  "start_line": 13,
                                  "end_line": 13,
                                  "label": "self.trusted_origins.append(hostname)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "start_line": 14,
                  "end_line": 14,
                  "label": "self.raise_for_status = raise_for_status",
                  "successors": []
                },
                {
                  "id": 9,
                  "start_line": 15,
                  "end_line": 15,
                  "label": "self.extra_url_validator = extra_url_validator",
                  "successors": []
                },
                {
                  "id": 10,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "self.extra_headers = extra_headers",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "request",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def request(\n        self, method, url, headers=None, allow_redirects=False, *args, **kwargs\n    ) -> req.Response:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "if self.extra_headers is not None:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "headers = {**(headers or {}), **self.extra_headers}",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "url = validate_url(url, self.trusted_origins)",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 7,
                      "end_line": 7,
                      "label": "if self.extra_url_validator is not None:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 8,
                          "end_line": 8,
                          "label": "url = self.extra_url_validator(url)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 9,
                      "end_line": 16,
                      "label": "response = req.request(\n            method,\n            url,\n            headers=headers,\n            allow_redirects=allow_redirects,\n            *args,\n            **kwargs,\n        )",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 17,
                          "end_line": 17,
                          "label": "if self.raise_for_status:",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 18,
                              "end_line": 18,
                              "label": "response.raise_for_status()",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 10,
                          "start_line": 19,
                          "end_line": 19,
                          "label": "return response",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def get(self, url, *args, **kwargs) -> req.Response:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return self.request(\"GET\", url, *args, **kwargs)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "post",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def post(self, url, *args, **kwargs) -> req.Response:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return self.request(\"POST\", url, *args, **kwargs)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "put",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def put(self, url, *args, **kwargs) -> req.Response:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return self.request(\"PUT\", url, *args, **kwargs)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "delete",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def delete(self, url, *args, **kwargs) -> req.Response:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return self.request(\"DELETE\", url, *args, **kwargs)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "head",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        },
        {
          "name": "options",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def options(self, url, *args, **kwargs) -> req.Response:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return self.request(\"OPTIONS\", url, *args, **kwargs)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "patch",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def patch(self, url, *args, **kwargs) -> req.Response:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "return self.request(\"PATCH\", url, *args, **kwargs)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}