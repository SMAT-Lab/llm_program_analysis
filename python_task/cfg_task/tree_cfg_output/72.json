{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "import json\nfrom enum import Enum\nfrom typing import Any\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "HttpMethod",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "SendWebRequestBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class SendWebRequestBlock(Block):",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 8,
                  "label": "super().__init__(\n            id=\"6595ae1f-b924-42cb-9a41-551a0611c4b4\",\n            description=\"This block makes an HTTP request to the given URL.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendWebRequestBlock.Input,\n            output_schema=SendWebRequestBlock.Output,\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "if isinstance(input_data.body, str):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "input_data.body = json.loads(input_data.body)",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 4,
              "start_line": 4,
              "end_line": 10,
              "label": "response = requests.request(\n            input_data.method.value,\n            input_data.url,\n            headers=input_data.headers,\n            json=input_data.body if input_data.json_format else None,\n            data=input_data.body if not input_data.json_format else None,\n        )",
              "successors": [
                {
                  "id": 5,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "result = response.json() if input_data.json_format else response.text",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 12,
                      "end_line": 12,
                      "label": "if response.status_code // 100 == 2:",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 13,
                          "end_line": 13,
                          "label": "yield \"response\", result",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "start_line": 14,
                          "end_line": 14,
                          "label": "elif response.status_code // 100 == 4:",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 15,
                              "end_line": 15,
                              "label": "yield \"client_error\", result",
                              "successors": []
                            },
                            {
                              "id": 10,
                              "start_line": 16,
                              "end_line": 16,
                              "label": "elif response.status_code // 100 == 5:",
                              "successors": [
                                {
                                  "id": 11,
                                  "start_line": 17,
                                  "end_line": 17,
                                  "label": "yield \"server_error\", result",
                                  "successors": []
                                },
                                {
                                  "id": 12,
                                  "start_line": 18,
                                  "end_line": 19,
                                  "label": "else:\n            raise ValueError(f\"Unexpected status code: {response.status_code}\")",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 22,
              "label": "class Input(BlockSchema):\n        url: str = SchemaField(\n            description=\"The URL to send the request to\",\n            placeholder=\"https://api.example.com\",\n        )\n        method: HttpMethod = SchemaField(\n            description=\"The HTTP method to use for the request\",\n            default=HttpMethod.POST,\n        )\n        headers: dict[str, str] = SchemaField(\n            description=\"The headers to include in the request\",\n            default={},\n        )\n        json_format: bool = SchemaField(\n            title=\"JSON format\",\n            description=\"Whether to send and receive body as JSON\",\n            default=True,\n        )\n        body: Any = SchemaField(\n            description=\"The body of the request\",\n            default=None,\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "class Output(BlockSchema):\n        response: object = SchemaField(description=\"The response from the server\")\n        client_error: object = SchemaField(description=\"The error on 4xx status codes\")\n        server_error: object = SchemaField(description=\"The error on 5xx status codes\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}