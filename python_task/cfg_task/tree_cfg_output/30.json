{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 7,
      "label": "# -*- coding: utf-8 -*-\nimport re\nimport sys\nimport random\nfrom typing import List, Tuple\nimport requests\nfrom requests.models import Response",
      "successors": [
        {
          "id": 2,
          "start_line": 8,
          "end_line": 8,
          "label": "if __name__ == '__main__':",
          "successors": [
            {
              "id": 3,
              "start_line": 9,
              "end_line": 10,
              "label": "num_args = len(sys.argv)\n    only_duplicate_links_checker = False",
              "successors": [
                {
                  "id": 4,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "if num_args < 2:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 12,
                      "end_line": 13,
                      "label": "print('No .md file passed')\n        sys.exit(1)",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "elif num_args == 3:",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "third_arg = sys.argv[2].lower()",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 16,
                              "end_line": 16,
                              "label": "if third_arg == '-odlc' or third_arg == '--only_duplicate_links_checker':",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 17,
                                  "end_line": 17,
                                  "label": "only_duplicate_links_checker = True",
                                  "successors": []
                                },
                                {
                                  "id": 10,
                                  "start_line": 18,
                                  "end_line": 19,
                                  "label": "else:\n            print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "start_line": 20,
                                      "end_line": 20,
                                      "label": "sys.exit(1)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 12,
              "start_line": 21,
              "end_line": 21,
              "label": "filename = sys.argv[1]",
              "successors": [
                {
                  "id": 13,
                  "start_line": 22,
                  "end_line": 22,
                  "label": "main(filename, only_duplicate_links_checker)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "find_links_in_text",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def find_links_in_text(text: str) -> List[str]:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "\"\"\"Find links in a text and return a list of URLs.\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "link_pattern = re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))')",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "raw_links = re.findall(link_pattern, text)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 5,
                          "end_line": 7,
                          "label": "links = [\n        str(raw_link[0]) for raw_link in raw_links\n    ]",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "return links",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "find_links_in_file",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def find_links_in_file(filename: str) -> List[str]:\n    \"\"\"Find links in a file and return a list of URLs from text file.\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 4,
              "label": "with open(filename, mode='r', encoding='utf-8') as file:\n        readme = file.read()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "index_section = readme.find('## Index')",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "if index_section == -1:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "index_section = 0",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "start_line": 8,
                      "end_line": 8,
                      "label": "content = readme[index_section:]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 7,
          "start_line": 9,
          "end_line": 10,
          "label": "links = find_links_in_text(content)\n    return links",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_duplicate_links",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def check_duplicate_links(links: List[str]) -> Tuple[bool, List]:\n    \"\"\"Check for duplicated links.\n    Returns a tuple with True or False and duplicate list.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 7,
              "label": "seen = {}\n    duplicates = []\n    has_duplicate = False",
              "successors": [
                {
                  "id": 3,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "for link in links:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 9,
                      "end_line": 10,
                      "label": "link = link.rstrip('/')\n        if link not in seen:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 11,
                          "end_line": 11,
                          "label": "seen[link] = 1",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 12,
                              "end_line": 13,
                              "label": "else:\n            if seen[link] == 1:",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 14,
                                  "end_line": 14,
                                  "label": "duplicates.append(link)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "start_line": 15,
                  "end_line": 15,
                  "label": "if duplicates:",
                  "successors": [
                    {
                      "id": 9,
                      "start_line": 16,
                      "end_line": 16,
                      "label": "has_duplicate = True",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "fake_user_agent",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def fake_user_agent() -> str:\n    \"\"\"Faking user agent as some hosting services block not-whitelisted UA.\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 8,
              "label": "user_agents = [\n        'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]",
              "successors": [
                {
                  "id": 3,
                  "start_line": 9,
                  "end_line": 9,
                  "label": "return random.choice(user_agents)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_host_from_link",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def get_host_from_link(link: str) -> str:\n    host = link.split('://', 1)[1] if '://' in link else link",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "if '/' in host:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "host = host.split('/', 1)[0]",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 10,
                      "end_line": 10,
                      "label": "return host",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "elif '?' in host:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 7,
                      "end_line": 7,
                      "label": "host = host.split('?', 1)[0]",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "return host",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "elif '#' in host:",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 10,
                      "end_line": 10,
                      "label": "return host",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "has_cloudflare_protection",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 16,
          "label": "def has_cloudflare_protection(resp: Response) -> bool:\n    \"\"\"Checks if there is any cloudflare protection in the response.\n    Cloudflare implements multiple network protections on a given link,\n    this script tries to detect if any of them exist in the response from request.\n    Common protections have the following HTTP code as a response:\n        - 403: When host header is missing or incorrect (and more)\n        - 503: When DDOS protection exists\n    See more about it at:\n        - https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\n        - https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n        - https://www.cloudflare.com/ddos/\n        - https://superuser.com/a/888526\n    Discussions in issues and pull requests:\n        - https://github.com/public-apis/public-apis/pull/2409\n        - https://github.com/public-apis/public-apis/issues/2960 \n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 17,
              "end_line": 39,
              "label": "code = resp.status_code\n    server = resp.headers.get('Server') or resp.headers.get('server')\n    cloudflare_flags = [\n        '403 Forbidden',\n        'cloudflare',\n        'Cloudflare',\n        'Security check',\n        'Please Wait... | Cloudflare',\n        'We are checking your browser...',\n        'Please stand by, while we are checking your browser...',\n        'Checking your browser before accessing',\n        'This process is automatic.',\n        'Your browser will redirect to your requested content shortly.',\n        'Please allow up to 5 seconds',\n        'DDoS protection by',\n        'Ray ID:',\n        'Cloudflare Ray ID:',\n        '_cf_chl',\n        '_cf_chl_opt',\n        '__cf_chl_rt_tk',\n        'cf-spinner-please-wait',\n        'cf-spinner-redirecting'\n    ]",
              "successors": [
                {
                  "id": 3,
                  "start_line": 40,
                  "end_line": 40,
                  "label": "if code in [403, 503] and server == 'cloudflare':",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 41,
                      "end_line": 43,
                      "label": "html = resp.text\n        flags_found = [flag in html for flag in cloudflare_flags]\n        any_flag_found = any(flags_found)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 44,
                          "end_line": 44,
                          "label": "if any_flag_found:",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 45,
                              "end_line": 45,
                              "label": "return True",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "start_line": 46,
                  "end_line": 46,
                  "label": "return False",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_if_link_is_working",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "def check_if_link_is_working(link: str) -> Tuple[bool, str]:\n    \"\"\"Checks if a link is working.\n    If an error is identified when the request for the link occurs,\n    the return will be a tuple with the first value True and the second\n    value a string containing the error message.\n    If no errors are identified, the return will be a tuple with the\n    first value False and the second an empty string.\n    \"\"\"\n    has_error = False\n    error_message = ''",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 15,
              "label": "try:\n        resp = requests.get(link, timeout=25, headers={\n            'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })",
              "successors": [
                {
                  "id": 3,
                  "start_line": 16,
                  "end_line": 19,
                  "label": "code = resp.status_code\n        if code >= 400 and not has_cloudflare_protection(resp):\n            has_error = True\n            error_message = f'ERR:CLT: {code} : {link}'",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 20,
                      "end_line": 22,
                      "label": "except requests.exceptions.SSLError as error:\n        has_error = True\n        error_message = f'ERR:SSL: {error} : {link}'",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 23,
                          "end_line": 25,
                          "label": "except requests.exceptions.ConnectionError as error:\n        has_error = True\n        error_message = f'ERR:CNT: {error} : {link}'",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 26,
                              "end_line": 28,
                              "label": "except (TimeoutError, requests.exceptions.ConnectTimeout):\n        has_error = True\n        error_message = f'ERR:TMO: {link}'",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 29,
                                  "end_line": 31,
                                  "label": "except requests.exceptions.TooManyRedirects as error:\n        has_error = True\n        error_message = f'ERR:TMR: {error} : {link}'",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 32,
                                      "end_line": 34,
                                      "label": "except (Exception, requests.exceptions.RequestException) as error:\n        has_error = True\n        error_message = f'ERR:UKN: {error} : {link}'",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 35,
                                          "end_line": 35,
                                          "label": "return (has_error, error_message)",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "check_if_list_of_links_are_working",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def check_if_list_of_links_are_working(list_of_links: List[str]) -> List[str]:\n    error_messages = []",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 3,
              "label": "for link in list_of_links:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "has_error, error_message = check_if_link_is_working(link)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "if has_error:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "error_messages.append(error_message)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 6,
          "start_line": 7,
          "end_line": 7,
          "label": "return error_messages",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "start_duplicate_links_checker",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def start_duplicate_links_checker(links: List[str]) -> None:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 3,
              "label": "print('Checking for duplicate links...')\n    has_duplicate_link, duplicates_links = check_duplicate_links(links)",
              "successors": [
                {
                  "id": 3,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "if has_duplicate_link:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 8,
                      "label": "print(f'Found duplicate links:')\n        for duplicate_link in duplicates_links:\n            print(duplicate_link)\n        sys.exit(1)",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 9,
                      "end_line": 10,
                      "label": "else:\n        print('No duplicate links.')",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "start_links_working_checker",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def start_links_working_checker(links: List[str]) -> None:\n    print(f'Checking if {len(links)} links are working...')\n    errors = check_if_list_of_links_are_working(links)",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "if errors:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "num_errors = len(errors)\n        print(f'Apparently {num_errors} links are not working properly. See in:')",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 7,
                      "end_line": 8,
                      "label": "for error_message in errors:\n            print(error_message)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 9,
                          "end_line": 9,
                          "label": "sys.exit(1)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def main(filename: str, only_duplicate_links_checker: bool) -> None:\n    links = find_links_in_file(filename)\n    start_duplicate_links_checker(links)",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "if not only_duplicate_links_checker:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "start_links_working_checker(links)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}