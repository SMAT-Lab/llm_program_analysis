{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 4,
      "label": "import json\nfrom typing import Any, Type, TypeVar, cast, get_args, get_origin\nNUM = TypeVar(\"NUM\", int, float)\nT = TypeVar(\"T\")",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "__convert_list",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def __convert_list(value: Any) -> list:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if isinstance(value, (list, tuple, set)):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return list(value)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "elif isinstance(value, dict):",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "return list(value.items())",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "elif isinstance(value, str):",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "value = value.strip()",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "if value.startswith(\"[\") and value.endswith(\"]\"):",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 9,
                                  "end_line": 9,
                                  "label": "try:",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "start_line": 10,
                                      "end_line": 10,
                                      "label": "return json.loads(value)",
                                      "successors": []
                                    },
                                    {
                                      "id": 11,
                                      "start_line": 11,
                                      "end_line": 11,
                                      "label": "except json.JSONDecodeError:",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "start_line": 12,
                                          "end_line": 12,
                                          "label": "return [value]",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 13,
                                  "start_line": 13,
                                  "end_line": 13,
                                  "label": "else:",
                                  "successors": [
                                    {
                                      "id": 14,
                                      "start_line": 14,
                                      "end_line": 14,
                                      "label": "return [value]",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 15,
                      "start_line": 15,
                      "end_line": 15,
                      "label": "else:",
                      "successors": [
                        {
                          "id": 16,
                          "start_line": 16,
                          "end_line": 16,
                          "label": "return [value]",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "__convert_dict",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def __convert_dict(value: Any) -> dict:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if isinstance(value, str):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "result = json.loads(value)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 5,
                          "end_line": 5,
                          "label": "if isinstance(result, dict):",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 6,
                              "end_line": 6,
                              "label": "return result",
                              "successors": []
                            },
                            {
                              "id": 7,
                              "start_line": 7,
                              "end_line": 7,
                              "label": "else:",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 8,
                                  "end_line": 8,
                                  "label": "return {\"value\": result}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "start_line": 9,
                      "end_line": 9,
                      "label": "except json.JSONDecodeError:",
                      "successors": [
                        {
                          "id": 10,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "return {\"value\": value}  # Fallback conversion",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 11,
              "start_line": 11,
              "end_line": 11,
              "label": "elif isinstance(value, list):",
              "successors": [
                {
                  "id": 12,
                  "start_line": 12,
                  "end_line": 12,
                  "label": "return {i: value[i] for i in range(len(value))}",
                  "successors": []
                }
              ]
            },
            {
              "id": 13,
              "start_line": 13,
              "end_line": 13,
              "label": "elif isinstance(value, tuple):",
              "successors": [
                {
                  "id": 14,
                  "start_line": 14,
                  "end_line": 14,
                  "label": "return {i: value[i] for i in range(len(value))}",
                  "successors": []
                }
              ]
            },
            {
              "id": 15,
              "start_line": 15,
              "end_line": 15,
              "label": "elif isinstance(value, dict):",
              "successors": [
                {
                  "id": 16,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "return value",
                  "successors": []
                }
              ]
            },
            {
              "id": 17,
              "start_line": 17,
              "end_line": 17,
              "label": "else:",
              "successors": [
                {
                  "id": 18,
                  "start_line": 18,
                  "end_line": 18,
                  "label": "return {\"value\": value}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "__convert_tuple",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def __convert_tuple(value: Any) -> tuple:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if isinstance(value, (str, list, set)):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return tuple(value)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "elif isinstance(value, dict):",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "return tuple(value.items())",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "elif isinstance(value, (int, float, bool)):",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "return (value,)",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "start_line": 8,
                          "end_line": 8,
                          "label": "elif isinstance(value, tuple):",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 9,
                              "end_line": 9,
                              "label": "return value",
                              "successors": []
                            },
                            {
                              "id": 10,
                              "start_line": 10,
                              "end_line": 10,
                              "label": "else:",
                              "successors": [
                                {
                                  "id": 11,
                                  "start_line": 11,
                                  "end_line": 11,
                                  "label": "return (value,)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "__convert_set",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def __convert_set(value: Any) -> set:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if isinstance(value, (str, list, tuple)):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return set(value)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "elif isinstance(value, dict):",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "return set(value.items())",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "elif isinstance(value, set):",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "return value",
                          "successors": []
                        },
                        {
                          "id": 8,
                          "start_line": 8,
                          "end_line": 8,
                          "label": "else:",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 9,
                              "end_line": 9,
                              "label": "return {value}",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "__convert_str",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def __convert_str(value: Any) -> str:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if isinstance(value, str):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return value",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 5,
                  "label": "else:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "return json.dumps(value)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "__convert_num",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def __convert_num(value: Any, num_type: Type[NUM]) -> NUM:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if isinstance(value, (list, dict, tuple, set)):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return num_type(len(value))",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "elif isinstance(value, num_type):",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "return value",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "else:",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "try:",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "return num_type(float(value))",
                              "successors": []
                            },
                            {
                              "id": 9,
                              "start_line": 9,
                              "end_line": 9,
                              "label": "except (ValueError, TypeError):",
                              "successors": [
                                {
                                  "id": 10,
                                  "start_line": 10,
                                  "end_line": 10,
                                  "label": "return num_type(0)  # Fallback conversion",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "__convert_bool",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def __convert_bool(value: Any) -> bool:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if isinstance(value, bool):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return value",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "elif isinstance(value, str):",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "if value.lower() in [\"true\", \"1\"]:",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 6,
                          "end_line": 6,
                          "label": "return True",
                          "successors": []
                        },
                        {
                          "id": 7,
                          "start_line": 7,
                          "end_line": 8,
                          "label": "else:",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "return False",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "start_line": 9,
                  "end_line": 10,
                  "label": "else:",
                  "successors": [
                    {
                      "id": 10,
                      "start_line": 10,
                      "end_line": 10,
                      "label": "return bool(value)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "_try_convert",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "if origin is None:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "origin = target_type",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 6,
                      "end_line": 6,
                      "label": "if origin not in [list, dict, tuple, str, set, int, float, bool]:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 7,
                          "end_line": 7,
                          "label": "return value",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 8,
                          "end_line": 9,
                          "label": "# Handle the case when value is already of the target type\n    if isinstance(value, origin):",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 10,
                              "end_line": 10,
                              "label": "if not args:",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 11,
                                  "end_line": 11,
                                  "label": "return value",
                                  "successors": []
                                },
                                {
                                  "id": 9,
                                  "start_line": 12,
                                  "end_line": 30,
                                  "label": "else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 10,
          "start_line": 31,
          "end_line": 31,
          "label": "elif raise_on_mismatch:",
          "successors": [
            {
              "id": 11,
              "start_line": 32,
              "end_line": 32,
              "label": "raise TypeError(f\"Value {value} is not of expected type {target_type}\")",
              "successors": []
            },
            {
              "id": 12,
              "start_line": 33,
              "end_line": 74,
              "label": "else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "type_match",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "convert",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def convert(value: Any, target_type: Type[T]) -> T:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "except Exception as e:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "ConversionError",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "class ConversionError(ValueError):\n    pass",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ]
}