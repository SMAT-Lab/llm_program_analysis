{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 3,
      "label": "from typing import Any, Dict\nimport jwt\nfrom .config import settings",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "parse_jwt_token",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 7,
          "label": "def parse_jwt_token(token: str) -> Dict[str, Any]:\n    \"\"\"\n    Parse and validate a JWT token.\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 14,
              "label": "try:\n        payload = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 15,
                  "end_line": 15,
                  "label": "return payload",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "start_line": 16,
              "end_line": 17,
              "label": "except jwt.ExpiredSignatureError:\n        raise ValueError(\"Token has expired\")",
              "successors": []
            },
            {
              "id": 5,
              "start_line": 18,
              "end_line": 19,
              "label": "except jwt.InvalidTokenError as e:\n        raise ValueError(f\"Invalid token: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}