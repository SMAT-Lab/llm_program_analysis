{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "\"\"\"\nWord Break Problem is a well-known problem in computer science.\nGiven a string and a dictionary of words, the task is to determine if\nthe string can be segmented into a sequence of one or more dictionary words.\nWikipedia: https://en.wikipedia.org/wiki/Word_break_problem\n\"\"\"",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "backtrack",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 18,
          "label": "def backtrack(input_string: str, word_dict: set[str], start: int) -> bool:\n    \"\"\"\n    Helper function that uses backtracking to determine if a valid\n    word segmentation is possible starting from index 'start'.\n    Parameters:\n    input_string (str): The input string to be segmented.\n    word_dict (set[str]): A set of valid dictionary words.\n    start (int): The starting index of the substring to be checked.\n    Returns:\n    bool: True if a valid segmentation is possible, otherwise False.\n    Example:\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\n    True\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\n    True\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\n    False\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 19,
              "end_line": 20,
              "label": "# Base case: if the starting index has reached the end of the string\n    if start == len(input_string):",
              "successors": [
                {
                  "id": 3,
                  "start_line": 21,
                  "end_line": 21,
                  "label": "return True",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 22,
                  "end_line": 23,
                  "label": "# Try every possible substring from 'start' to 'end'\n    for end in range(start + 1, len(input_string) + 1):",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 24,
                      "end_line": 26,
                      "label": "if input_string[start:end] in word_dict and backtrack(\n            input_string, word_dict, end\n        ):",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 27,
                          "end_line": 27,
                          "label": "return True",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 28,
                      "end_line": 28,
                      "label": "return False",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "word_break",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 17,
          "label": "def word_break(input_string: str, word_dict: set[str]) -> bool:\n    \"\"\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 18,
              "end_line": 18,
              "label": "return backtrack(input_string, word_dict, 0)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}