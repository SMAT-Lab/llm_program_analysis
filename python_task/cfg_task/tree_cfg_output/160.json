{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 10,
      "label": "import datetime\nimport typing\nfrom enum import Enum\nfrom typing import Generic, Literal, TypeVar, Union\nimport prisma.enums\nimport pydantic\nAnalyticsEvent = Union[\n    AgentInstalledFromMarketplaceEvent, AgentInstalledFromTemplateEvent\n]\nT = TypeVar(\"T\")",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "InstallationLocation",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class InstallationLocation(str, Enum):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 3,
              "label": "LOCAL = \"local\"\n    CLOUD = \"cloud\"",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AgentInstalledFromMarketplaceEventData",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "class AgentInstalledFromMarketplaceEventData(pydantic.BaseModel):\n    marketplace_agent_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AgentInstalledFromTemplateEventData",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "class AgentInstalledFromTemplateEventData(pydantic.BaseModel):\n    template_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AgentInstalledFromMarketplaceEvent",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "class AgentInstalledFromMarketplaceEvent(pydantic.BaseModel):\n    event_name: Literal[\"agent_installed_from_marketplace\"]\n    event_data: AgentInstalledFromMarketplaceEventData",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AgentInstalledFromTemplateEvent",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "class AgentInstalledFromTemplateEvent(pydantic.BaseModel):\n    event_name: Literal[\"agent_installed_from_template\"]\n    event_data: AgentInstalledFromTemplateEventData",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AnalyticsRequest",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "AddAgentRequest",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "class AddAgentRequest(pydantic.BaseModel):\n    graph: dict[str, typing.Any]\n    author: str\n    keywords: list[str]\n    categories: list[str]",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "SubmissionReviewRequest",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "AgentResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 14,
          "label": "class AgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response from an agent.\n    Attributes:\n        id (str): The ID of the agent.\n        name (str, optional): The name of the agent.\n        description (str, optional): The description of the agent.\n        author (str, optional): The author of the agent.\n        keywords (list[str]): The keywords associated with the agent.\n        categories (list[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 15,
              "end_line": 26,
              "label": "id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    submissionStatus: str\n    views: int = 0\n    downloads: int = 0",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AgentDetailResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 25,
          "label": "class AgentDetailResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for an agent detail.\n    Attributes:\n        id (str): The ID of the agent.\n        name (Optional[str]): The name of the agent.\n        description (Optional[str]): The description of the agent.\n        author (Optional[str]): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n        graph (Dict[str, Any]): The graph data of the agent.\n    \"\"\"\n    id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    graph: dict[str, typing.Any]",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "FeaturedAgentResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 9,
          "label": "class FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for an agent detail.\n    \"\"\"\n    agentId: str\n    featuredCategories: list[str]\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    isActive: bool",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "CategoriesResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 7,
          "label": "class CategoriesResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for a list of categories.\n    Attributes:\n        unique_categories (list[str]): The list of unique categories.\n    \"\"\"\n    unique_categories: list[str]",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ListResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 15,
          "label": "class ListResponse(pydantic.BaseModel, Generic[T]):\n    \"\"\"\n    Represents a list response.\n    Attributes:\n        items (list[T]): The list of items.\n        total_count (int): The total count of items.\n        page (int): The current page number.\n        page_size (int): The number of items per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n    items: list[T]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ]
}