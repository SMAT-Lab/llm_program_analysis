{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "# -*- coding: utf-8 -*-\nfrom mrjob.job import MRJob",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "SpendingByCategory",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class SpendingByCategory(MRJob):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "if __name__ == '__main__':",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "SpendingByCategory.run()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self, categorizer):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "self.categorizer = categorizer",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "...",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "current_year_month",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "extract_year_month",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def extract_year_month(self, timestamp):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "\"\"\"Return the year and month portions of the timestamp.\"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "...",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "handle_budget_notifications",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def handle_budget_notifications(self, key, total):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "\"\"\"Call notification API if nearing or exceeded budget.\"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "...",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "mapper",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 7,
              "label": "def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n        Emit key value pairs of the form:\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 8,
                  "end_line": 9,
                  "label": "timestamp, category, amount = line.split('\\t')\n        period = self. extract_year_month(timestamp)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 10,
                      "end_line": 10,
                      "label": "if period == self.current_year_month():",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 11,
                          "end_line": 11,
                          "label": "yield (period, category), amount",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "reducer",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "total = sum(values)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 7,
                      "end_line": 7,
                      "label": "self.handle_budget_notifications(key, total)",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 8,
                          "end_line": 8,
                          "label": "yield key, sum(values)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "steps",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 6,
              "label": "def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}