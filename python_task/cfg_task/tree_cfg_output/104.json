{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 10,
      "label": "import datetime\nimport typing\nimport fuzzywuzzy.fuzz\nimport prisma.enums\nimport prisma.errors\nimport prisma.models\nimport prisma.types\nimport pydantic\nimport market.model\nimport market.utils.extension_types",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "delete_agent",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "async def delete_agent(agent_id: str) -> prisma.models.Agents | None:\n    \"\"\"\n    Delete an agent from the database.\n    Args:\n        agent_id (str): The ID of the agent to delete.\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 11,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 12,
                  "end_line": 15,
                  "label": "deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 16,
                  "end_line": 17,
                  "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 18,
                  "end_line": 19,
                  "label": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_agent_entry",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 23,
          "label": "async def create_agent_entry(\n    name: str,\n    description: str,\n    author: str,\n    keywords: typing.List[str],\n    categories: typing.List[str],\n    graph: prisma.Json,\n    submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING,\n):\n    \"\"\"\n    Create a new agent entry in the database.\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n    Returns:\n        dict: The newly created agent entry.\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 24,
              "end_line": 24,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 25,
                  "end_line": 37,
                  "label": "agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n        return agent",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 38,
                  "end_line": 39,
                  "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 40,
                  "end_line": 41,
                  "label": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "update_agent_entry",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 13,
          "label": "async def update_agent_entry(\n    agent_id: str,\n    version: int,\n    submission_state: prisma.enums.SubmissionStatus,\n    comments: str | None = None,\n) -> prisma.models.Agents | None:\n    \"\"\"\n    Update an existing agent entry in the database.\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int): The version of the agent.\n        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 14,
              "end_line": 14,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 15,
                  "end_line": 23,
                  "label": "agent = await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 24,
                      "end_line": 24,
                      "label": "return agent",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "start_line": 25,
                  "end_line": 25,
                  "label": "except prisma.errors.PrismaError as e:",
                  "successors": [
                    {
                      "id": 6,
                      "start_line": 26,
                      "end_line": 26,
                      "label": "raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 7,
                  "start_line": 27,
                  "end_line": 27,
                  "label": "except Exception as e:",
                  "successors": [
                    {
                      "id": 8,
                      "start_line": 28,
                      "end_line": 28,
                      "label": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_agents",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 12,
          "label": "async def get_agents(\n    page: int = 1,\n    page_size: int = 10,\n    name: str | None = None,\n    keyword: str | None = None,\n    category: str | None = None,\n    description: str | None = None,\n    description_threshold: int = 60,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n    sort_by: str = \"createdAt\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n):",
          "successors": [
            {
              "id": 2,
              "start_line": 13,
              "end_line": 27,
              "label": "\"\"\"\n    Retrieve a list of agents from the database based on the provided filters and pagination parameters.\n    Args:\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n        name (str, optional): Filter agents by name. Defaults to None.\n        keyword (str, optional): Filter agents by keyword. Defaults to None.\n        category (str, optional): Filter agents by category. Defaults to None.\n        description (str, optional): Filter agents by description. Defaults to None.\n        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60.\n        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\".\n        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\".\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 28,
                  "end_line": 28,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 29,
                      "end_line": 30,
                      "label": "# Define the base query\n        query = {}",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 31,
                          "end_line": 31,
                          "label": "# Add optional filters",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 32,
                              "end_line": 32,
                              "label": "if name:",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 33,
                                  "end_line": 33,
                                  "label": "query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "start_line": 34,
                              "end_line": 34,
                              "label": "if keyword:",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 35,
                                  "end_line": 35,
                                  "label": "query[\"keywords\"] = {\"has\": keyword}",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 10,
                              "start_line": 36,
                              "end_line": 36,
                              "label": "if category:",
                              "successors": [
                                {
                                  "id": 11,
                                  "start_line": 37,
                                  "end_line": 37,
                                  "label": "query[\"categories\"] = {\"has\": category}",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 12,
                          "start_line": 38,
                          "end_line": 38,
                          "label": "query[\"submissionStatus\"] = submission_status",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 13,
                      "start_line": 39,
                      "end_line": 40,
                      "label": "# Define sorting\n        order = {sort_by: sort_order}",
                      "successors": []
                    },
                    {
                      "id": 14,
                      "start_line": 41,
                      "end_line": 42,
                      "label": "# Calculate pagination\n        skip = (page - 1) * page_size",
                      "successors": []
                    },
                    {
                      "id": 15,
                      "start_line": 43,
                      "end_line": 43,
                      "label": "# Execute the query",
                      "successors": [
                        {
                          "id": 16,
                          "start_line": 44,
                          "end_line": 44,
                          "label": "try:",
                          "successors": [
                            {
                              "id": 17,
                              "start_line": 45,
                              "end_line": 50,
                              "label": "agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 18,
                          "start_line": 51,
                          "end_line": 51,
                          "label": "except prisma.errors.PrismaError as e:",
                          "successors": [
                            {
                              "id": 19,
                              "start_line": 52,
                              "end_line": 52,
                              "label": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 20,
                      "start_line": 53,
                      "end_line": 53,
                      "label": "# Apply fuzzy search on description if provided",
                      "successors": [
                        {
                          "id": 21,
                          "start_line": 54,
                          "end_line": 54,
                          "label": "if description:",
                          "successors": [
                            {
                              "id": 22,
                              "start_line": 55,
                              "end_line": 55,
                              "label": "try:",
                              "successors": [
                                {
                                  "id": 23,
                                  "start_line": 56,
                                  "end_line": 56,
                                  "label": "filtered_agents = []",
                                  "successors": [
                                    {
                                      "id": 24,
                                      "start_line": 57,
                                      "end_line": 57,
                                      "label": "for agent in agents:",
                                      "successors": [
                                        {
                                          "id": 25,
                                          "start_line": 58,
                                          "end_line": 64,
                                          "label": "if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):",
                                          "successors": [
                                            {
                                              "id": 26,
                                              "start_line": 65,
                                              "end_line": 65,
                                              "label": "filtered_agents.append(agent)",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 27,
                              "start_line": 66,
                              "end_line": 66,
                              "label": "agents = filtered_agents",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 28,
                          "start_line": 67,
                          "end_line": 67,
                          "label": "except AttributeError as e:",
                          "successors": [
                            {
                              "id": 29,
                              "start_line": 68,
                              "end_line": 68,
                              "label": "raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 30,
                      "start_line": 69,
                      "end_line": 70,
                      "label": "# Get total count for pagination info\n        total_count = len(agents)",
                      "successors": []
                    },
                    {
                      "id": 31,
                      "start_line": 71,
                      "end_line": 77,
                      "label": "return {\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total_count + page_size - 1) // page_size,\n        }",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 32,
                  "start_line": 78,
                  "end_line": 78,
                  "label": "except AgentQueryError as e:",
                  "successors": [
                    {
                      "id": 33,
                      "start_line": 79,
                      "end_line": 80,
                      "label": "# Log the error or handle it as needed\n        raise e",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 34,
                  "start_line": 81,
                  "end_line": 81,
                  "label": "except ValueError as e:",
                  "successors": [
                    {
                      "id": 35,
                      "start_line": 82,
                      "end_line": 82,
                      "label": "raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 36,
                  "start_line": 83,
                  "end_line": 83,
                  "label": "except Exception as e:",
                  "successors": [
                    {
                      "id": 37,
                      "start_line": 84,
                      "end_line": 85,
                      "label": "# Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_agent_details",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 11,
          "label": "async def get_agent_details(agent_id: str, version: int | None = None):\n    \"\"\"\n    Retrieve agent details from the database.\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n    Returns:\n        dict: The agent details.\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 12,
              "end_line": 12,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 13,
                  "end_line": 13,
                  "label": "query = {\"id\": agent_id}",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "if version is not None:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "query[\"version\"] = version  # type: ignore",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "start_line": 16,
                      "end_line": 16,
                      "label": "agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 17,
                          "end_line": 17,
                          "label": "if not agent:",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 18,
                              "end_line": 18,
                              "label": "raise AgentQueryError(\"Agent not found\")",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "start_line": 19,
                          "end_line": 19,
                          "label": "return agent",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 10,
              "start_line": 20,
              "end_line": 20,
              "label": "except prisma.errors.PrismaError as e:",
              "successors": [
                {
                  "id": 11,
                  "start_line": 21,
                  "end_line": 21,
                  "label": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 12,
              "start_line": 22,
              "end_line": 22,
              "label": "except Exception as e:",
              "successors": [
                {
                  "id": 13,
                  "start_line": 23,
                  "end_line": 23,
                  "label": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "search_db",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 25,
          "label": "async def search_db(\n    query: str,\n    page: int = 1,\n    page_size: int = 10,\n    categories: typing.List[str] | None = None,\n    description_threshold: int = 60,\n    sort_by: str = \"rank\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n    \"\"\"Perform a search for agents based on the provided query string.\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 26,
              "end_line": 26,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 27,
                  "end_line": 29,
                  "label": "offset = (page - 1) * page_size\n        category_filter = \"1=1\"\n        if categories:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 30,
                      "end_line": 31,
                      "label": "category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "start_line": 32,
                      "end_line": 32,
                      "label": "# Construct the ORDER BY clause based on the sort_by parameter",
                      "successors": [
                        {
                          "id": 6,
                          "start_line": 33,
                          "end_line": 33,
                          "label": "if sort_by in [\"createdAt\", \"updatedAt\"]:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 34,
                              "end_line": 34,
                              "label": "order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "start_line": 35,
                          "end_line": 35,
                          "label": "elif sort_by == \"name\":",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 36,
                              "end_line": 36,
                              "label": "order_by_clause = f\"name {sort_order.upper()}, rank DESC\"",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 10,
                          "start_line": 37,
                          "end_line": 37,
                          "label": "else:",
                          "successors": [
                            {
                              "id": 11,
                              "start_line": 38,
                              "end_line": 38,
                              "label": "order_by_clause = 'rank DESC, \"createdAt\" DESC'",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 12,
          "start_line": 39,
          "end_line": 39,
          "label": "submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"",
          "successors": [
            {
              "id": 13,
              "start_line": 40,
              "end_line": 70,
              "label": "sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"",
              "successors": [
                {
                  "id": 14,
                  "start_line": 71,
                  "end_line": 74,
                  "label": "results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )",
                  "successors": [
                    {
                      "id": 15,
                      "start_line": 75,
                      "end_line": 76,
                      "label": "class CountResponse(pydantic.BaseModel):\n            count: int",
                      "successors": [
                        {
                          "id": 16,
                          "start_line": 77,
                          "end_line": 85,
                          "label": "count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"",
                          "successors": [
                            {
                              "id": 17,
                              "start_line": 86,
                              "end_line": 89,
                              "label": "total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )",
                              "successors": [
                                {
                                  "id": 18,
                                  "start_line": 90,
                                  "end_line": 90,
                                  "label": "total_count = total_count.count if total_count else 0",
                                  "successors": [
                                    {
                                      "id": 19,
                                      "start_line": 91,
                                      "end_line": 97,
                                      "label": "return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 20,
          "start_line": 98,
          "end_line": 98,
          "label": "except prisma.errors.PrismaError as e:",
          "successors": [
            {
              "id": 21,
              "start_line": 99,
              "end_line": 99,
              "label": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
              "successors": []
            }
          ]
        },
        {
          "id": 22,
          "start_line": 100,
          "end_line": 100,
          "label": "except Exception as e:",
          "successors": [
            {
              "id": 23,
              "start_line": 101,
              "end_line": 101,
              "label": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_top_agents_by_downloads",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 12,
          "label": "async def get_top_agents_by_downloads(\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[prisma.models.AnalyticsTracker]:\n    \"\"\"Retrieve the top agents by download count.\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 13,
              "end_line": 13,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 14,
                  "end_line": 16,
                  "label": "# Calculate pagination\n        skip = (page - 1) * page_size\n        # Execute the query",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 17,
                      "end_line": 17,
                      "label": "try:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 18,
                          "end_line": 25,
                          "label": "# Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 26,
                              "end_line": 27,
                              "label": "except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 28,
                      "end_line": 28,
                      "label": "try:",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 29,
                          "end_line": 31,
                          "label": "total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )",
                          "successors": [
                            {
                              "id": 9,
                              "start_line": 32,
                              "end_line": 33,
                              "label": "except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 10,
                      "start_line": 34,
                      "end_line": 40,
                      "label": "return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 11,
                  "start_line": 41,
                  "end_line": 43,
                  "label": "except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e",
                  "successors": []
                },
                {
                  "id": 12,
                  "start_line": 44,
                  "end_line": 45,
                  "label": "except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e",
                  "successors": []
                },
                {
                  "id": 13,
                  "start_line": 46,
                  "end_line": 48,
                  "label": "except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "set_agent_featured",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "async def set_agent_featured(\n    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]\n) -> prisma.models.FeaturedAgent:\n    \"\"\"Set an agent as featured in the database.\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 11,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 12,
                  "end_line": 12,
                  "label": "agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 13,
                      "end_line": 13,
                      "label": "if not agent:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 14,
                          "end_line": 14,
                          "label": "raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 15,
                          "end_line": 28,
                          "label": "featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 29,
                              "end_line": 29,
                              "label": "return featured",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 8,
              "start_line": 30,
              "end_line": 30,
              "label": "except prisma.errors.PrismaError as e:",
              "successors": [
                {
                  "id": 9,
                  "start_line": 31,
                  "end_line": 31,
                  "label": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 10,
              "start_line": 32,
              "end_line": 32,
              "label": "except Exception as e:",
              "successors": [
                {
                  "id": 11,
                  "start_line": 33,
                  "end_line": 33,
                  "label": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_featured_agents",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 14,
          "label": "async def get_featured_agents(\n    category: str = \"featured\",\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> FeaturedAgentResponse:\n    \"\"\"Retrieve a list of featured agents from the database based on the provided category.\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 15,
              "end_line": 15,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 16,
                  "end_line": 17,
                  "label": "# Calculate pagination\n        skip = (page - 1) * page_size",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 18,
                      "end_line": 19,
                      "label": "# Execute the query\n        try:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 20,
                          "end_line": 29,
                          "label": "featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 30,
                              "end_line": 31,
                              "label": "except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 7,
                  "start_line": 32,
                  "end_line": 33,
                  "label": "# Get total count for pagination info\n        total_count = len(featured_agents)",
                  "successors": [
                    {
                      "id": 8,
                      "start_line": 34,
                      "end_line": 40,
                      "label": "return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 9,
              "start_line": 41,
              "end_line": 43,
              "label": "except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e",
              "successors": []
            },
            {
              "id": 10,
              "start_line": 44,
              "end_line": 45,
              "label": "except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e",
              "successors": []
            },
            {
              "id": 11,
              "start_line": 46,
              "end_line": 48,
              "label": "except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "remove_featured_category",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "async def remove_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Adds a featured category to an agent.\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 16,
              "label": "try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )",
              "successors": [
                {
                  "id": 3,
                  "start_line": 17,
                  "end_line": 18,
                  "label": "if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 19,
                      "end_line": 20,
                      "label": "# remove the category from the list\n        featured_agent.featuredCategories.remove(category)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 21,
                          "end_line": 24,
                          "label": "featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 25,
                              "end_line": 25,
                              "label": "return featured_agent",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "start_line": 26,
              "end_line": 27,
              "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
              "successors": []
            },
            {
              "id": 8,
              "start_line": 28,
              "end_line": 29,
              "label": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "add_featured_category",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "async def add_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Removes a featured category from an agent.\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 11,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 12,
                  "end_line": 16,
                  "label": "featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n        return featured_agent",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 17,
                  "end_line": 18,
                  "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 19,
                  "end_line": 20,
                  "label": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_agent_featured",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 7,
          "label": "async def get_agent_featured(agent_id: str) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Retrieve an agent's featured categories from the database.\n    Args:\n        agent_id (str): The ID of the agent.\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 8,
              "end_line": 8,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 9,
                  "end_line": 12,
                  "label": "featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 13,
                  "end_line": 14,
                  "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 15,
                  "end_line": 16,
                  "label": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_not_featured_agents",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "async def get_not_featured_agents(\n    page: int = 1, page_size: int = 10\n) -> typing.List[prisma.models.Agents]:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 6,
              "label": "\"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 7,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 8,
                      "end_line": 32,
                      "label": "agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 33,
                          "end_line": 33,
                          "label": "return agents",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "start_line": 34,
                  "end_line": 34,
                  "label": "except prisma.errors.PrismaError as e:",
                  "successors": [
                    {
                      "id": 7,
                      "start_line": 35,
                      "end_line": 35,
                      "label": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 8,
                  "start_line": 36,
                  "end_line": 36,
                  "label": "except Exception as e:",
                  "successors": [
                    {
                      "id": 9,
                      "start_line": 37,
                      "end_line": 37,
                      "label": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_all_categories",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "async def get_all_categories() -> market.model.CategoriesResponse:\n    \"\"\"\n    Retrieve all unique categories from the database.\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 7,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 8,
                  "end_line": 14,
                  "label": "agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n        unique_categories = sorted(list(all_categories))\n        return market.model.CategoriesResponse(unique_categories=unique_categories)",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 15,
                  "end_line": 16,
                  "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 17,
                  "end_line": 19,
                  "label": "except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_agent_installed_event",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "async def create_agent_installed_event(\n    event_data: market.model.AgentInstalledFromMarketplaceEventData,\n):",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 13,
                  "label": "await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 14,
                  "end_line": 15,
                  "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                  "successors": []
                },
                {
                  "id": 5,
                  "start_line": 16,
                  "end_line": 17,
                  "label": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "AgentQueryError",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "class AgentQueryError(Exception):\n    \"\"\"Custom exception for agent query errors\"\"\"\n    pass",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "TopAgentsDBResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 15,
          "label": "class TopAgentsDBResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of top agents.\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n    analytics: list[prisma.models.AnalyticsTracker]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "FeaturedAgentResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 15,
          "label": "class FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of featured agents.\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n    featured_agents: list[prisma.models.FeaturedAgent]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ]
}