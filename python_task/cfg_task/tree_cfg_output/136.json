{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 8,
      "label": "import logging\nimport requests\nfrom fastapi import Request\nfrom backend.data import integrations\nfrom backend.data.model import APIKeyCredentials, Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks._base import BaseWebhooksManager\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "Slant3DWebhooksManager",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 5,
          "label": "class Slant3DWebhooksManager(BaseWebhooksManager):\n    \"\"\"Manager for Slant3D webhooks\"\"\"\n    PROVIDER_NAME = ProviderName.SLANT3D\n    BASE_URL = \"https://www.slant3dapi.com/api\"\n    @classmethod",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "_register_webhook",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 10,
              "label": "async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: str,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        \"\"\"Register a new webhook with Slant3D\"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 11,
                  "end_line": 12,
                  "label": "if not isinstance(credentials, APIKeyCredentials):\n            raise ValueError(\"API key is required to register a webhook\")",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 13,
                      "end_line": 16,
                      "label": "headers = {\n            \"api-key\": credentials.api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 17,
                          "end_line": 18,
                          "label": "# Slant3D's API doesn't use events list, just register for all order updates\n        payload = {\"endPoint\": ingress_url}",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 19,
                              "end_line": 21,
                              "label": "response = requests.post(\n            f\"{self.BASE_URL}/customer/webhookSubscribe\", headers=headers, json=payload\n        )",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 22,
                                  "end_line": 24,
                                  "label": "if not response.ok:\n            error = response.json().get(\"error\", \"Unknown error\")\n            raise RuntimeError(f\"Failed to register webhook: {error}\")",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 25,
                                      "end_line": 30,
                                      "label": "webhook_config = {\n            \"endpoint\": ingress_url,\n            \"provider\": self.PROVIDER_NAME,\n            \"events\": [\"order.shipped\"],  # Currently the only supported event\n            \"type\": webhook_type,\n        }",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 31,
                                          "end_line": 31,
                                          "label": "return \"\", webhook_config",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "validate_payload",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "\"\"\"Validate incoming webhook payload from Slant3D\"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "payload = await request.json()",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 6,
                          "end_line": 7,
                          "label": "# Validate required fields from Slant3D API spec\n        required_fields = [\"orderId\", \"status\", \"trackingNumber\", \"carrierCode\"]",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 8,
                              "end_line": 8,
                              "label": "missing_fields = [field for field in required_fields if field not in payload]",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 9,
                                  "end_line": 9,
                                  "label": "if missing_fields:",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 10,
                                      "end_line": 10,
                                      "label": "raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 8,
              "start_line": 11,
              "end_line": 11,
              "label": "# Normalize payload structure",
              "successors": [
                {
                  "id": 9,
                  "start_line": 12,
                  "end_line": 17,
                  "label": "normalized_payload = {\n            \"orderId\": payload[\"orderId\"],\n            \"status\": payload[\"status\"],\n            \"trackingNumber\": payload[\"trackingNumber\"],\n            \"carrierCode\": payload[\"carrierCode\"],\n        }",
                  "successors": [
                    {
                      "id": 10,
                      "start_line": 18,
                      "end_line": 18,
                      "label": "# Currently Slant3D only sends shipping notifications",
                      "successors": [
                        {
                          "id": 11,
                          "start_line": 19,
                          "end_line": 19,
                          "label": "# Convert status to lowercase for event format compatibility",
                          "successors": [
                            {
                              "id": 12,
                              "start_line": 20,
                              "end_line": 20,
                              "label": "event_type = f\"order.{payload['status'].lower()}\"",
                              "successors": [
                                {
                                  "id": 13,
                                  "start_line": 21,
                                  "end_line": 21,
                                  "label": "return normalized_payload, event_type",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_deregister_webhook",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 7,
                  "label": "\"\"\"\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\n        This would need to be handled through support.\n        \"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 8,
                      "end_line": 11,
                      "label": "# Log warning since we can't properly deregister\n        logger.warning(\n            f\"Warning: Manual deregistration required for webhook {webhook.id}\"\n        )",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 12,
                          "end_line": 12,
                          "label": "pass",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}