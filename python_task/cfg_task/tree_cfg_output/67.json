{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 6,
      "label": "import logging\nfrom typing import TYPE_CHECKING, Callable, Optional, cast\nfrom backend.data.block import BlockWebhookConfig, get_block\nfrom backend.data.graph import set_node_webhook\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME",
      "successors": [
        {
          "id": 2,
          "start_line": 7,
          "end_line": 10,
          "label": "if TYPE_CHECKING:\n    from backend.data.graph import GraphModel, NodeModel\n    from backend.data.model import Credentials\n    from ._base import BaseWebhooksManager",
          "successors": [
            {
              "id": 3,
              "start_line": 11,
              "end_line": 11,
              "label": "logger = logging.getLogger(__name__)",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "on_graph_activate",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "async def on_graph_activate(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n    \"\"\"\n    Hook to be called when a graph is activated/created.\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_activate` on all nodes in this graph.\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 12,
              "label": "# Compare nodes in new_graph_version with previous_graph_version\n    updated_nodes = []",
              "successors": [
                {
                  "id": 3,
                  "start_line": 13,
                  "end_line": 13,
                  "label": "for new_node in graph.nodes:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 14,
                      "end_line": 14,
                      "label": "node_credentials = None",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 15,
                          "end_line": 15,
                          "label": "if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 16,
                              "end_line": 16,
                              "label": "node_credentials = get_credentials(creds_meta[\"id\"])",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 17,
                                  "end_line": 17,
                                  "label": "if not node_credentials:",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 18,
                                      "end_line": 21,
                                      "label": "raise ValueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "start_line": 22,
                          "end_line": 24,
                          "label": "updated_node = await on_node_activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )",
                          "successors": [
                            {
                              "id": 10,
                              "start_line": 25,
                              "end_line": 25,
                              "label": "updated_nodes.append(updated_node)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 11,
              "start_line": 26,
              "end_line": 26,
              "label": "graph.nodes = updated_nodes",
              "successors": [
                {
                  "id": 12,
                  "start_line": 27,
                  "end_line": 27,
                  "label": "return graph",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "on_graph_deactivate",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "async def on_graph_deactivate(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n    \"\"\"\n    Hook to be called when a graph is deactivated/deleted.\n    \u26a0\ufe0f Assuming node entities are not re-used between graph versions, \u26a0\ufe0f\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 11,
              "label": "updated_nodes = []",
              "successors": [
                {
                  "id": 3,
                  "start_line": 12,
                  "end_line": 12,
                  "label": "for node in graph.nodes:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 13,
                      "end_line": 13,
                      "label": "node_credentials = None",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 14,
                          "end_line": 14,
                          "label": "if creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME):",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 15,
                              "end_line": 15,
                              "label": "node_credentials = get_credentials(creds_meta[\"id\"])",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 16,
                                  "end_line": 16,
                                  "label": "if not node_credentials:",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 17,
                                      "end_line": 20,
                                      "label": "logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 9,
                          "start_line": 21,
                          "end_line": 21,
                          "label": "updated_node = await on_node_deactivate(node, credentials=node_credentials)",
                          "successors": [
                            {
                              "id": 10,
                              "start_line": 22,
                              "end_line": 22,
                              "label": "updated_nodes.append(updated_node)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 11,
              "start_line": 23,
              "end_line": 23,
              "label": "graph.nodes = updated_nodes",
              "successors": [
                {
                  "id": 12,
                  "start_line": 24,
                  "end_line": 24,
                  "label": "return graph",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "on_node_activate",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 6,
          "label": "async def on_node_activate(\n    user_id: str,\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n) -> \"NodeModel\":",
          "successors": [
            {
              "id": 2,
              "start_line": 7,
              "end_line": 7,
              "label": "\"\"\"Hook to be called when the node is activated/created\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 8,
                  "end_line": 8,
                  "label": "block = get_block(node.block_id)",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 9,
                      "end_line": 9,
                      "label": "if not block:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 10,
                          "end_line": 12,
                          "label": "raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 13,
                          "end_line": 13,
                          "label": "if not block.webhook_config:",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 14,
                              "end_line": 14,
                              "label": "return node",
                              "successors": []
                            },
                            {
                              "id": 8,
                              "start_line": 15,
                              "end_line": 15,
                              "label": "provider = block.webhook_config.provider",
                              "successors": [
                                {
                                  "id": 9,
                                  "start_line": 16,
                                  "end_line": 16,
                                  "label": "if provider not in WEBHOOK_MANAGERS_BY_NAME:",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "start_line": 17,
                                      "end_line": 20,
                                      "label": "raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )",
                                      "successors": []
                                    },
                                    {
                                      "id": 11,
                                      "start_line": 21,
                                      "end_line": 23,
                                      "label": "logger.debug(\n        f\"Activating webhook node #{node.id} with config {block.webhook_config}\"\n    )",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "start_line": 24,
                                          "end_line": 24,
                                          "label": "webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "start_line": 25,
                                              "end_line": 25,
                                              "label": "if auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig):",
                                              "successors": [
                                                {
                                                  "id": 14,
                                                  "start_line": 26,
                                                  "end_line": 26,
                                                  "label": "try:",
                                                  "successors": [
                                                    {
                                                      "id": 15,
                                                      "start_line": 27,
                                                      "end_line": 27,
                                                      "label": "resource = block.webhook_config.resource_format.format(**node.input_default)",
                                                      "successors": [
                                                        {
                                                          "id": 16,
                                                          "start_line": 28,
                                                          "end_line": 28,
                                                          "label": "except KeyError:",
                                                          "successors": [
                                                            {
                                                              "id": 17,
                                                              "start_line": 29,
                                                              "end_line": 29,
                                                              "label": "resource = None",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 18,
                                                  "start_line": 30,
                                                  "end_line": 32,
                                                  "label": "logger.debug(\n            f\"Constructed resource string {resource} from input {node.input_default}\"\n        )",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 19,
                                              "start_line": 33,
                                              "end_line": 33,
                                              "label": "else:",
                                              "successors": [
                                                {
                                                  "id": 20,
                                                  "start_line": 34,
                                                  "end_line": 34,
                                                  "label": "resource = \"\"  # not relevant for manual webhooks",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "on_node_deactivate",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 9,
          "label": "async def on_node_deactivate(\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n    webhooks_manager: Optional[\"BaseWebhooksManager\"] = None,\n) -> \"NodeModel\":\n    \"\"\"Hook to be called when node is deactivated/deleted\"\"\"\n    logger.debug(f\"Deactivating node #{node.id}\")\n    block = get_block(node.block_id)",
          "successors": [
            {
              "id": 2,
              "start_line": 10,
              "end_line": 10,
              "label": "if not block:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 11,
                  "end_line": 13,
                  "label": "raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 14,
                  "end_line": 14,
                  "label": "if not block.webhook_config:",
                  "successors": [
                    {
                      "id": 5,
                      "start_line": 15,
                      "end_line": 15,
                      "label": "return node",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "start_line": 16,
                      "end_line": 16,
                      "label": "provider = block.webhook_config.provider",
                      "successors": [
                        {
                          "id": 7,
                          "start_line": 17,
                          "end_line": 17,
                          "label": "if provider not in WEBHOOK_MANAGERS_BY_NAME:",
                          "successors": [
                            {
                              "id": 8,
                              "start_line": 18,
                              "end_line": 21,
                              "label": "raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )",
                              "successors": []
                            },
                            {
                              "id": 9,
                              "start_line": 22,
                              "end_line": 22,
                              "label": "webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()",
                              "successors": [
                                {
                                  "id": 10,
                                  "start_line": 23,
                                  "end_line": 23,
                                  "label": "if node.webhook_id:",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "start_line": 24,
                                      "end_line": 24,
                                      "label": "logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\")",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "start_line": 25,
                                          "end_line": 25,
                                          "label": "if not node.webhook:",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "start_line": 26,
                                              "end_line": 27,
                                              "label": "logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")\n            raise ValueError(\"node.webhook not included\")",
                                              "successors": []
                                            },
                                            {
                                              "id": 14,
                                              "start_line": 28,
                                              "end_line": 30,
                                              "label": "# Detach webhook from node\n        logger.debug(f\"Detaching webhook from node #{node.id}\")\n        updated_node = await set_node_webhook(node.id, None)",
                                              "successors": [
                                                {
                                                  "id": 15,
                                                  "start_line": 31,
                                                  "end_line": 37,
                                                  "label": "# Prune and deregister the webhook if it is no longer used anywhere\n        webhook = node.webhook\n        logger.debug(\n            f\"Pruning{' and deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )\n        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)",
                                                  "successors": [
                                                    {
                                                      "id": 16,
                                                      "start_line": 38,
                                                      "end_line": 41,
                                                      "label": "if (\n            CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n            and not credentials\n        ):",
                                                      "successors": [
                                                        {
                                                          "id": 17,
                                                          "start_line": 42,
                                                          "end_line": 46,
                                                          "label": "logger.warning(\n                f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )",
                                                          "successors": []
                                                        },
                                                        {
                                                          "id": 18,
                                                          "start_line": 47,
                                                          "end_line": 47,
                                                          "label": "return updated_node",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 19,
                                  "start_line": 48,
                                  "end_line": 49,
                                  "label": "logger.debug(f\"Node #{node.id} has no webhook_id, returning\")\n    return node",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}