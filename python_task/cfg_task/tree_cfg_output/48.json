{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 1,
      "label": "if __name__ == \"__main__\":",
      "successors": [
        {
          "id": 2,
          "start_line": 2,
          "end_line": 3,
          "label": "import doctest\n    doctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "match_word_pattern",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 13,
          "label": "def match_word_pattern(pattern: str, input_string: str) -> bool:\n    \"\"\"\n    Determine if a given pattern matches a string using backtracking.\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False\n    \"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 14,
              "end_line": 15,
              "label": "pattern_map: dict[str, str] = {}\n    str_map: dict[str, str] = {}",
              "successors": [
                {
                  "id": 3,
                  "start_line": 16,
                  "end_line": 16,
                  "label": "return backtrack(0, 0)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "backtrack",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 9,
              "label": "def backtrack(pattern_index: int, str_index: int) -> bool:\n        \"\"\"\n        >>> backtrack(0, 0)\n        True\n        >>> backtrack(0, 1)\n        True\n        >>> backtrack(0, 4)\n        False\n        \"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "if pattern_index == len(pattern) and str_index == len(input_string):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 11,
                      "end_line": 11,
                      "label": "return True",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 12,
                      "end_line": 12,
                      "label": "if pattern_index == len(pattern) or str_index == len(input_string):",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 13,
                          "end_line": 13,
                          "label": "return False",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 14,
                          "end_line": 14,
                          "label": "char = pattern[pattern_index]",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 15,
                              "end_line": 15,
                              "label": "if char in pattern_map:",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 16,
                                  "end_line": 16,
                                  "label": "mapped_str = pattern_map[char]",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 17,
                                      "end_line": 17,
                                      "label": "if input_string.startswith(mapped_str, str_index):",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "start_line": 18,
                                          "end_line": 18,
                                          "label": "return backtrack(pattern_index + 1, str_index + len(mapped_str))",
                                          "successors": []
                                        },
                                        {
                                          "id": 11,
                                          "start_line": 19,
                                          "end_line": 20,
                                          "label": "else:\n                return False",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 12,
                              "start_line": 21,
                              "end_line": 21,
                              "label": "for end in range(str_index + 1, len(input_string) + 1):",
                              "successors": [
                                {
                                  "id": 13,
                                  "start_line": 22,
                                  "end_line": 22,
                                  "label": "substr = input_string[str_index:end]",
                                  "successors": [
                                    {
                                      "id": 14,
                                      "start_line": 23,
                                      "end_line": 23,
                                      "label": "if substr in str_map:",
                                      "successors": [
                                        {
                                          "id": 15,
                                          "start_line": 24,
                                          "end_line": 24,
                                          "label": "continue",
                                          "successors": []
                                        },
                                        {
                                          "id": 16,
                                          "start_line": 25,
                                          "end_line": 26,
                                          "label": "pattern_map[char] = substr\n            str_map[substr] = char",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "start_line": 27,
                                              "end_line": 27,
                                              "label": "if backtrack(pattern_index + 1, end):",
                                              "successors": [
                                                {
                                                  "id": 18,
                                                  "start_line": 28,
                                                  "end_line": 28,
                                                  "label": "return True",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 19,
                                                  "start_line": 29,
                                                  "end_line": 30,
                                                  "label": "del pattern_map[char]\n            del str_map[substr]",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": []
}