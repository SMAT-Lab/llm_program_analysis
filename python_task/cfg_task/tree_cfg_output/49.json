{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 2,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import ContributorDetails, SchemaField",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "__init__",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def __init__(self):",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 23,
              "label": "super().__init__(\n            id=\"acf7625e-d2cb-4941-bfeb-2819fc6fc015\",\n            input_schema=ReadCsvBlock.Input,\n            output_schema=ReadCsvBlock.Output,\n            description=\"Reads a CSV file and outputs the data as a list of dictionaries and individual rows via rows.\",\n            contributors=[ContributorDetails(name=\"Nicholas Tindle\")],\n            categories={BlockCategory.TEXT, BlockCategory.DATA},\n            test_input={\n                \"contents\": \"a, b, c\\n1,2,3\\n4,5,6\",\n            },\n            test_output=[\n                (\"row\", {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}),\n                (\"row\", {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"}),\n                (\n                    \"all_data\",\n                    [\n                        {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"},\n                        {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"},\n                    ],\n                ),\n            ],\n        )",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "run",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 10,
          "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        import csv\n        from io import StringIO\n        csv_file = StringIO(input_data.contents)\n        reader = csv.reader(\n            csv_file,\n            delimiter=input_data.delimiter,\n            quotechar=input_data.quotechar,\n            escapechar=input_data.escapechar,\n        )",
          "successors": [
            {
              "id": 2,
              "start_line": 11,
              "end_line": 11,
              "label": "header = None",
              "successors": [
                {
                  "id": 3,
                  "start_line": 12,
                  "end_line": 12,
                  "label": "if input_data.has_header:",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 13,
                      "end_line": 13,
                      "label": "header = next(reader)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 14,
                          "end_line": 14,
                          "label": "if input_data.strip:",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 15,
                              "end_line": 15,
                              "label": "header = [h.strip() for h in header]",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 7,
              "start_line": 16,
              "end_line": 16,
              "label": "for _ in range(input_data.skip_rows):",
              "successors": [
                {
                  "id": 8,
                  "start_line": 17,
                  "end_line": 17,
                  "label": "next(reader)",
                  "successors": []
                }
              ]
            },
            {
              "id": 9,
              "start_line": 18,
              "end_line": 18,
              "label": "all_data = []",
              "successors": [
                {
                  "id": 10,
                  "start_line": 19,
                  "end_line": 19,
                  "label": "for row in reader:",
                  "successors": [
                    {
                      "id": 11,
                      "start_line": 20,
                      "end_line": 20,
                      "label": "processed_row = process_row(row)",
                      "successors": [
                        {
                          "id": 12,
                          "start_line": 21,
                          "end_line": 21,
                          "label": "all_data.append(processed_row)",
                          "successors": [
                            {
                              "id": 13,
                              "start_line": 22,
                              "end_line": 22,
                              "label": "yield \"row\", processed_row",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 14,
              "start_line": 23,
              "end_line": 23,
              "label": "yield \"all_data\", all_data",
              "successors": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "process_row",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def process_row(row):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "data = {}",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "for i, value in enumerate(row):",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "if i not in input_data.skip_columns:",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 5,
                              "end_line": 5,
                              "label": "if input_data.has_header and header:",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 6,
                                  "end_line": 6,
                                  "label": "data[header[i]] = value.strip() if input_data.strip else value",
                                  "successors": []
                                },
                                {
                                  "id": 7,
                                  "start_line": 7,
                                  "end_line": 7,
                                  "label": "else:",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 8,
                                      "end_line": 8,
                                      "label": "data[str(i)] = value.strip() if input_data.strip else value",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 9,
              "start_line": 9,
              "end_line": 9,
              "label": "return data",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "ReadCsvBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class ReadCsvBlock(Block):",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 23,
                  "label": "super().__init__(\n            id=\"acf7625e-d2cb-4941-bfeb-2819fc6fc015\",\n            input_schema=ReadCsvBlock.Input,\n            output_schema=ReadCsvBlock.Output,\n            description=\"Reads a CSV file and outputs the data as a list of dictionaries and individual rows via rows.\",\n            contributors=[ContributorDetails(name=\"Nicholas Tindle\")],\n            categories={BlockCategory.TEXT, BlockCategory.DATA},\n            test_input={\n                \"contents\": \"a, b, c\\n1,2,3\\n4,5,6\",\n            },\n            test_output=[\n                (\"row\", {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}),\n                (\"row\", {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"}),\n                (\n                    \"all_data\",\n                    [\n                        {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"},\n                        {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"},\n                    ],\n                ),\n            ],\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 10,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        import csv\n        from io import StringIO\n        csv_file = StringIO(input_data.contents)\n        reader = csv.reader(\n            csv_file,\n            delimiter=input_data.delimiter,\n            quotechar=input_data.quotechar,\n            escapechar=input_data.escapechar,\n        )",
              "successors": [
                {
                  "id": 2,
                  "start_line": 11,
                  "end_line": 11,
                  "label": "header = None",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 12,
                      "end_line": 12,
                      "label": "if input_data.has_header:",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 13,
                          "end_line": 13,
                          "label": "header = next(reader)",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 14,
                              "end_line": 14,
                              "label": "if input_data.strip:",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 15,
                                  "end_line": 15,
                                  "label": "header = [h.strip() for h in header]",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "start_line": 16,
                      "end_line": 16,
                      "label": "for _ in range(input_data.skip_rows):",
                      "successors": [
                        {
                          "id": 8,
                          "start_line": 17,
                          "end_line": 17,
                          "label": "next(reader)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "start_line": 18,
                      "end_line": 18,
                      "label": "all_data = []",
                      "successors": [
                        {
                          "id": 10,
                          "start_line": 19,
                          "end_line": 19,
                          "label": "for row in reader:",
                          "successors": [
                            {
                              "id": 11,
                              "start_line": 20,
                              "end_line": 20,
                              "label": "processed_row = process_row(row)",
                              "successors": [
                                {
                                  "id": 12,
                                  "start_line": 21,
                                  "end_line": 21,
                                  "label": "all_data.append(processed_row)",
                                  "successors": [
                                    {
                                      "id": 13,
                                      "start_line": 22,
                                      "end_line": 22,
                                      "label": "yield \"row\", processed_row",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 14,
                          "start_line": 23,
                          "end_line": 23,
                          "label": "yield \"all_data\", all_data",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "process_row",
              "type": "CFG",
              "blocks": [
                {
                  "id": 1,
                  "start_line": 1,
                  "end_line": 1,
                  "label": "def process_row(row):",
                  "successors": [
                    {
                      "id": 2,
                      "start_line": 2,
                      "end_line": 2,
                      "label": "data = {}",
                      "successors": [
                        {
                          "id": 3,
                          "start_line": 3,
                          "end_line": 3,
                          "label": "for i, value in enumerate(row):",
                          "successors": [
                            {
                              "id": 4,
                              "start_line": 4,
                              "end_line": 4,
                              "label": "if i not in input_data.skip_columns:",
                              "successors": [
                                {
                                  "id": 5,
                                  "start_line": 5,
                                  "end_line": 5,
                                  "label": "if input_data.has_header and header:",
                                  "successors": [
                                    {
                                      "id": 6,
                                      "start_line": 6,
                                      "end_line": 6,
                                      "label": "data[header[i]] = value.strip() if input_data.strip else value",
                                      "successors": []
                                    },
                                    {
                                      "id": 7,
                                      "start_line": 7,
                                      "end_line": 7,
                                      "label": "else:",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 8,
                                          "end_line": 8,
                                          "label": "data[str(i)] = value.strip() if input_data.strip else value",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "start_line": 9,
                  "end_line": 9,
                  "label": "return data",
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            }
          ],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 33,
                  "label": "contents: str = SchemaField(\n            description=\"The contents of the CSV file to read\",\n            placeholder=\"a, b, c\\n1,2,3\\n4,5,6\",\n        )\n        delimiter: str = SchemaField(\n            description=\"The delimiter used in the CSV file\",\n            default=\",\",\n        )\n        quotechar: str = SchemaField(\n            description=\"The character used to quote fields\",\n            default='\"',\n        )\n        escapechar: str = SchemaField(\n            description=\"The character used to escape the delimiter\",\n            default=\"\\\\\",\n        )\n        has_header: bool = SchemaField(\n            description=\"Whether the CSV file has a header row\",\n            default=True,\n        )\n        skip_rows: int = SchemaField(\n            description=\"The number of rows to skip from the start of the file\",\n            default=0,\n        )\n        strip: bool = SchemaField(\n            description=\"Whether to strip whitespace from the values\",\n            default=True,\n        )\n        skip_columns: list[str] = SchemaField(\n            description=\"The columns to skip from the start of the row\",\n            default=[],\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 7,
              "label": "class Output(BlockSchema):\n        row: dict[str, str] = SchemaField(\n            description=\"The data produced from each row in the CSV file\"\n        )\n        all_data: list[dict[str, str]] = SchemaField(\n            description=\"All the data in the CSV file as a list of rows\"\n        )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}