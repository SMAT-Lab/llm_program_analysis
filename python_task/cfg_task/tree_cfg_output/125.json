{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 15,
      "label": "import logging\nimport time\nfrom enum import Enum\nfrom typing import Any\nimport httpx\nfrom backend.blocks.fal._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    FalCredentials,\n    FalCredentialsField,\n    FalCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "_get_headers",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def _get_headers(self, api_key: str) -> dict[str, str]:",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "\"\"\"Get headers for FAL API requests.\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 6,
                  "label": "return {\n            \"Authorization\": f\"Key {api_key}\",\n            \"Content-Type\": \"application/json\",\n        }",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "_submit_request",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 4,
          "label": "def _submit_request(\n        self, url: str, headers: dict[str, str], data: dict[str, Any]\n    ) -> dict[str, Any]:\n        \"\"\"Submit a request to the FAL API.\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 5,
              "end_line": 5,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 6,
                  "end_line": 8,
                  "label": "response = httpx.post(url, headers=headers, json=data)\n            response.raise_for_status()\n            return response.json()",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 9,
                  "end_line": 11,
                  "label": "except httpx.HTTPError as e:\n            logger.error(f\"FAL API request failed: {str(e)}\")\n            raise RuntimeError(f\"Failed to submit request: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "_poll_status",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "def _poll_status(self, status_url: str, headers: dict[str, str]) -> dict[str, Any]:\n        \"\"\"Poll the status endpoint until completion or failure.\"\"\"",
          "successors": [
            {
              "id": 2,
              "start_line": 3,
              "end_line": 6,
              "label": "try:\n            response = httpx.get(status_url, headers=headers)\n            response.raise_for_status()\n            return response.json()",
              "successors": [
                {
                  "id": 3,
                  "start_line": 7,
                  "end_line": 9,
                  "label": "except httpx.HTTPError as e:\n            logger.error(f\"Failed to get status: {str(e)}\")\n            raise RuntimeError(f\"Failed to get status: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "generate_video",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 9,
          "label": "def generate_video(self, input_data: Input, credentials: FalCredentials) -> str:\n        \"\"\"Generate video using the specified FAL model.\"\"\"\n        base_url = \"https://queue.fal.run\"\n        api_key = credentials.api_key.get_secret_value()\n        headers = self._get_headers(api_key)\n        # Submit generation request\n        submit_url = f\"{base_url}/{input_data.model.value}\"\n        submit_data = {\"prompt\": input_data.prompt}\n        seen_logs = set()",
          "successors": [
            {
              "id": 2,
              "start_line": 10,
              "end_line": 10,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 11,
                  "end_line": 18,
                  "label": "# Submit request to queue\n            submit_response = httpx.post(submit_url, headers=headers, json=submit_data)\n            submit_response.raise_for_status()\n            request_data = submit_response.json()\n            # Get request_id and urls from initial response\n            request_id = request_data.get(\"request_id\")\n            status_url = request_data.get(\"status_url\")\n            result_url = request_data.get(\"response_url\")",
                  "successors": [
                    {
                      "id": 4,
                      "start_line": 19,
                      "end_line": 19,
                      "label": "if not all([request_id, status_url, result_url]):",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 20,
                          "end_line": 20,
                          "label": "raise ValueError(\"Missing required data in submission response\")",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 21,
                          "end_line": 24,
                          "label": "# Poll for status with exponential backoff\n            max_attempts = 30\n            attempt = 0\n            base_wait_time = 5",
                          "successors": [
                            {
                              "id": 7,
                              "start_line": 25,
                              "end_line": 25,
                              "label": "",
                              "successors": [
                                {
                                  "id": 8,
                                  "start_line": 26,
                                  "end_line": 28,
                                  "label": "status_response = httpx.get(f\"{status_url}?logs=1\", headers=headers)\n                status_response.raise_for_status()\n                status_data = status_response.json()",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "start_line": 29,
                                      "end_line": 31,
                                      "label": "# Process new logs only\n                logs = status_data.get(\"logs\", [])\n                if logs and isinstance(logs, list):",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "start_line": 32,
                                          "end_line": 32,
                                          "label": "for log in logs:",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "start_line": 33,
                                              "end_line": 33,
                                              "label": "if isinstance(log, dict):",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "start_line": 34,
                                                  "end_line": 38,
                                                  "label": "# Create a unique key for this log entry\n                            log_key = (\n                                f\"{log.get('timestamp', '')}-{log.get('message', '')}\"\n                            )\n                            if log_key not in seen_logs:",
                                                  "successors": [
                                                    {
                                                      "id": 13,
                                                      "start_line": 39,
                                                      "end_line": 39,
                                                      "label": "seen_logs.add(log_key)",
                                                      "successors": [
                                                        {
                                                          "id": 14,
                                                          "start_line": 40,
                                                          "end_line": 41,
                                                          "label": "message = log.get(\"message\", \"\")\n                                if message:",
                                                          "successors": [
                                                            {
                                                              "id": 15,
                                                              "start_line": 42,
                                                              "end_line": 44,
                                                              "label": "logger.debug(\n                                        f\"[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}\"\n                                    )",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 16,
                                      "start_line": 45,
                                      "end_line": 45,
                                      "label": "status = status_data.get(\"status\")",
                                      "successors": [
                                        {
                                          "id": 17,
                                          "start_line": 46,
                                          "end_line": 46,
                                          "label": "if status == \"COMPLETED\":",
                                          "successors": [
                                            {
                                              "id": 18,
                                              "start_line": 47,
                                              "end_line": 50,
                                              "label": "# Get the final result\n                    result_response = httpx.get(result_url, headers=headers)\n                    result_response.raise_for_status()\n                    result_data = result_response.json()",
                                              "successors": [
                                                {
                                                  "id": 19,
                                                  "start_line": 51,
                                                  "end_line": 53,
                                                  "label": "if \"video\" not in result_data or not isinstance(\n                        result_data[\"video\"], dict\n                    ):",
                                                  "successors": [
                                                    {
                                                      "id": 20,
                                                      "start_line": 54,
                                                      "end_line": 54,
                                                      "label": "raise ValueError(\"Invalid response format - missing video data\")",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 21,
                                                      "start_line": 55,
                                                      "end_line": 56,
                                                      "label": "video_url = result_data[\"video\"].get(\"url\")\n                    if not video_url:",
                                                      "successors": [
                                                        {
                                                          "id": 22,
                                                          "start_line": 57,
                                                          "end_line": 57,
                                                          "label": "raise ValueError(\"No video URL in response\")",
                                                          "successors": []
                                                        },
                                                        {
                                                          "id": 23,
                                                          "start_line": 58,
                                                          "end_line": 58,
                                                          "label": "return video_url",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 24,
                                          "start_line": 59,
                                          "end_line": 59,
                                          "label": "elif status == \"FAILED\":",
                                          "successors": [
                                            {
                                              "id": 25,
                                              "start_line": 60,
                                              "end_line": 61,
                                              "label": "error_msg = status_data.get(\"error\", \"No error details provided\")\n                    raise RuntimeError(f\"Video generation failed: {error_msg}\")",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 26,
                                          "start_line": 62,
                                          "end_line": 62,
                                          "label": "elif status == \"IN_QUEUE\":",
                                          "successors": [
                                            {
                                              "id": 27,
                                              "start_line": 63,
                                              "end_line": 66,
                                              "label": "position = status_data.get(\"queue_position\", \"unknown\")\n                    logger.debug(\n                        f\"[FAL Generation] Status: In queue, position: {position}\"\n                    )",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 28,
                                          "start_line": 67,
                                          "end_line": 67,
                                          "label": "elif status == \"IN_PROGRESS\":",
                                          "successors": [
                                            {
                                              "id": 29,
                                              "start_line": 68,
                                              "end_line": 70,
                                              "label": "logger.debug(\n                        \"[FAL Generation] Status: Request is being processed...\"\n                    )",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 30,
                                          "start_line": 71,
                                          "end_line": 71,
                                          "label": "else:",
                                          "successors": [
                                            {
                                              "id": 31,
                                              "start_line": 72,
                                              "end_line": 72,
                                              "label": "logger.info(f\"[FAL Generation] Status: Unknown status: {status}\")",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 32,
                                      "start_line": 73,
                                      "end_line": 74,
                                      "label": "wait_time = min(base_wait_time * (2**attempt), 60)  # Cap at 60 seconds\n                time.sleep(wait_time)",
                                      "successors": [
                                        {
                                          "id": 33,
                                          "start_line": 75,
                                          "end_line": 75,
                                          "label": "attempt += 1",
                                          "successors": [
                                            {
                                              "id": 7,
                                              "start_line": 25,
                                              "end_line": 25,
                                              "label": "while attempt < max_attempts:",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 34,
                              "start_line": 76,
                              "end_line": 76,
                              "label": "raise RuntimeError(\"Maximum polling attempts reached\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 35,
              "start_line": 77,
              "end_line": 77,
              "label": "except httpx.HTTPError as e:",
              "successors": [
                {
                  "id": 36,
                  "start_line": 78,
                  "end_line": 78,
                  "label": "raise RuntimeError(f\"API request failed: {str(e)}\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "run",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 3,
          "label": "def run(\n        self, input_data: Input, *, credentials: FalCredentials, **kwargs\n    ) -> BlockOutput:",
          "successors": [
            {
              "id": 2,
              "start_line": 4,
              "end_line": 4,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "start_line": 5,
                  "end_line": 6,
                  "label": "video_url = self.generate_video(input_data, credentials)\n            yield \"video_url\", video_url",
                  "successors": []
                },
                {
                  "id": 4,
                  "start_line": 7,
                  "end_line": 9,
                  "label": "except Exception as e:\n            error_message = str(e)\n            yield \"error\", error_message",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "FalModel",
      "type": "CFG",
      "blocks": [],
      "functions": [],
      "classes": []
    },
    {
      "name": "AIVideoGeneratorBlock",
      "type": "CFG",
      "blocks": [],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 18,
                  "label": "super().__init__(\n            id=\"530cf046-2ce0-4854-ae2c-659db17c7a46\",\n            description=\"Generate videos using FAL AI models.\",\n            categories={BlockCategory.AI},\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"prompt\": \"A dog running in a field.\",\n                \"model\": FalModel.MOCHI,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"video_url\", \"https://fal.media/files/example/video.mp4\")],\n            test_mock={\n                \"generate_video\": lambda *args, **kwargs: \"https://fal.media/files/example/video.mp4\"\n            },\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_get_headers",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def _get_headers(self, api_key: str) -> dict[str, str]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "\"\"\"Get headers for FAL API requests.\"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 6,
                      "label": "return {\n            \"Authorization\": f\"Key {api_key}\",\n            \"Content-Type\": \"application/json\",\n        }",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_submit_request",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 4,
              "label": "def _submit_request(\n        self, url: str, headers: dict[str, str], data: dict[str, Any]\n    ) -> dict[str, Any]:\n        \"\"\"Submit a request to the FAL API.\"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 5,
                  "end_line": 5,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 6,
                      "end_line": 8,
                      "label": "response = httpx.post(url, headers=headers, json=data)\n            response.raise_for_status()\n            return response.json()",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 9,
                      "end_line": 11,
                      "label": "except httpx.HTTPError as e:\n            logger.error(f\"FAL API request failed: {str(e)}\")\n            raise RuntimeError(f\"Failed to submit request: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_poll_status",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def _poll_status(self, status_url: str, headers: dict[str, str]) -> dict[str, Any]:\n        \"\"\"Poll the status endpoint until completion or failure.\"\"\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 6,
                  "label": "try:\n            response = httpx.get(status_url, headers=headers)\n            response.raise_for_status()\n            return response.json()",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 7,
                      "end_line": 9,
                      "label": "except httpx.HTTPError as e:\n            logger.error(f\"Failed to get status: {str(e)}\")\n            raise RuntimeError(f\"Failed to get status: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "generate_video",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 9,
              "label": "def generate_video(self, input_data: Input, credentials: FalCredentials) -> str:\n        \"\"\"Generate video using the specified FAL model.\"\"\"\n        base_url = \"https://queue.fal.run\"\n        api_key = credentials.api_key.get_secret_value()\n        headers = self._get_headers(api_key)\n        # Submit generation request\n        submit_url = f\"{base_url}/{input_data.model.value}\"\n        submit_data = {\"prompt\": input_data.prompt}\n        seen_logs = set()",
              "successors": [
                {
                  "id": 2,
                  "start_line": 10,
                  "end_line": 10,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 11,
                      "end_line": 18,
                      "label": "# Submit request to queue\n            submit_response = httpx.post(submit_url, headers=headers, json=submit_data)\n            submit_response.raise_for_status()\n            request_data = submit_response.json()\n            # Get request_id and urls from initial response\n            request_id = request_data.get(\"request_id\")\n            status_url = request_data.get(\"status_url\")\n            result_url = request_data.get(\"response_url\")",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 19,
                          "end_line": 19,
                          "label": "if not all([request_id, status_url, result_url]):",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 20,
                              "end_line": 20,
                              "label": "raise ValueError(\"Missing required data in submission response\")",
                              "successors": []
                            },
                            {
                              "id": 6,
                              "start_line": 21,
                              "end_line": 24,
                              "label": "# Poll for status with exponential backoff\n            max_attempts = 30\n            attempt = 0\n            base_wait_time = 5",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 25,
                                  "end_line": 25,
                                  "label": "",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "start_line": 26,
                                      "end_line": 28,
                                      "label": "status_response = httpx.get(f\"{status_url}?logs=1\", headers=headers)\n                status_response.raise_for_status()\n                status_data = status_response.json()",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "start_line": 29,
                                          "end_line": 31,
                                          "label": "# Process new logs only\n                logs = status_data.get(\"logs\", [])\n                if logs and isinstance(logs, list):",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "start_line": 32,
                                              "end_line": 32,
                                              "label": "for log in logs:",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "start_line": 33,
                                                  "end_line": 33,
                                                  "label": "if isinstance(log, dict):",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "start_line": 34,
                                                      "end_line": 38,
                                                      "label": "# Create a unique key for this log entry\n                            log_key = (\n                                f\"{log.get('timestamp', '')}-{log.get('message', '')}\"\n                            )\n                            if log_key not in seen_logs:",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "start_line": 39,
                                                          "end_line": 39,
                                                          "label": "seen_logs.add(log_key)",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "start_line": 40,
                                                              "end_line": 41,
                                                              "label": "message = log.get(\"message\", \"\")\n                                if message:",
                                                              "successors": [
                                                                {
                                                                  "id": 15,
                                                                  "start_line": 42,
                                                                  "end_line": 44,
                                                                  "label": "logger.debug(\n                                        f\"[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}\"\n                                    )",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 16,
                                          "start_line": 45,
                                          "end_line": 45,
                                          "label": "status = status_data.get(\"status\")",
                                          "successors": [
                                            {
                                              "id": 17,
                                              "start_line": 46,
                                              "end_line": 46,
                                              "label": "if status == \"COMPLETED\":",
                                              "successors": [
                                                {
                                                  "id": 18,
                                                  "start_line": 47,
                                                  "end_line": 50,
                                                  "label": "# Get the final result\n                    result_response = httpx.get(result_url, headers=headers)\n                    result_response.raise_for_status()\n                    result_data = result_response.json()",
                                                  "successors": [
                                                    {
                                                      "id": 19,
                                                      "start_line": 51,
                                                      "end_line": 53,
                                                      "label": "if \"video\" not in result_data or not isinstance(\n                        result_data[\"video\"], dict\n                    ):",
                                                      "successors": [
                                                        {
                                                          "id": 20,
                                                          "start_line": 54,
                                                          "end_line": 54,
                                                          "label": "raise ValueError(\"Invalid response format - missing video data\")",
                                                          "successors": []
                                                        },
                                                        {
                                                          "id": 21,
                                                          "start_line": 55,
                                                          "end_line": 56,
                                                          "label": "video_url = result_data[\"video\"].get(\"url\")\n                    if not video_url:",
                                                          "successors": [
                                                            {
                                                              "id": 22,
                                                              "start_line": 57,
                                                              "end_line": 57,
                                                              "label": "raise ValueError(\"No video URL in response\")",
                                                              "successors": []
                                                            },
                                                            {
                                                              "id": 23,
                                                              "start_line": 58,
                                                              "end_line": 58,
                                                              "label": "return video_url",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "id": 24,
                                              "start_line": 59,
                                              "end_line": 59,
                                              "label": "elif status == \"FAILED\":",
                                              "successors": [
                                                {
                                                  "id": 25,
                                                  "start_line": 60,
                                                  "end_line": 61,
                                                  "label": "error_msg = status_data.get(\"error\", \"No error details provided\")\n                    raise RuntimeError(f\"Video generation failed: {error_msg}\")",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 26,
                                              "start_line": 62,
                                              "end_line": 62,
                                              "label": "elif status == \"IN_QUEUE\":",
                                              "successors": [
                                                {
                                                  "id": 27,
                                                  "start_line": 63,
                                                  "end_line": 66,
                                                  "label": "position = status_data.get(\"queue_position\", \"unknown\")\n                    logger.debug(\n                        f\"[FAL Generation] Status: In queue, position: {position}\"\n                    )",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 28,
                                              "start_line": 67,
                                              "end_line": 67,
                                              "label": "elif status == \"IN_PROGRESS\":",
                                              "successors": [
                                                {
                                                  "id": 29,
                                                  "start_line": 68,
                                                  "end_line": 70,
                                                  "label": "logger.debug(\n                        \"[FAL Generation] Status: Request is being processed...\"\n                    )",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 30,
                                              "start_line": 71,
                                              "end_line": 71,
                                              "label": "else:",
                                              "successors": [
                                                {
                                                  "id": 31,
                                                  "start_line": 72,
                                                  "end_line": 72,
                                                  "label": "logger.info(f\"[FAL Generation] Status: Unknown status: {status}\")",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 32,
                                      "start_line": 73,
                                      "end_line": 74,
                                      "label": "wait_time = min(base_wait_time * (2**attempt), 60)  # Cap at 60 seconds\n                time.sleep(wait_time)",
                                      "successors": [
                                        {
                                          "id": 33,
                                          "start_line": 75,
                                          "end_line": 75,
                                          "label": "attempt += 1",
                                          "successors": [
                                            {
                                              "id": 7,
                                              "start_line": 25,
                                              "end_line": 25,
                                              "label": "while attempt < max_attempts:",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 34,
                                  "start_line": 76,
                                  "end_line": 76,
                                  "label": "raise RuntimeError(\"Maximum polling attempts reached\")",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 35,
                  "start_line": 77,
                  "end_line": 77,
                  "label": "except httpx.HTTPError as e:",
                  "successors": [
                    {
                      "id": 36,
                      "start_line": 78,
                      "end_line": 78,
                      "label": "raise RuntimeError(f\"API request failed: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def run(\n        self, input_data: Input, *, credentials: FalCredentials, **kwargs\n    ) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 5,
                      "end_line": 6,
                      "label": "video_url = self.generate_video(input_data, credentials)\n            yield \"video_url\", video_url",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 7,
                      "end_line": 9,
                      "label": "except Exception as e:\n            error_message = str(e)\n            yield \"error\", error_message",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 11,
              "label": "class Input(BlockSchema):\n        prompt: str = SchemaField(\n            description=\"Description of the video to generate.\",\n            placeholder=\"A dog running in a field.\",\n        )\n        model: FalModel = SchemaField(\n            title=\"FAL Model\",\n            default=FalModel.MOCHI,\n            description=\"The FAL model to use for video generation.\",\n        )\n        credentials: FalCredentialsInput = FalCredentialsField()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "video_url: str = SchemaField(description=\"The URL of the generated video.\")",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 5,
                      "label": "error: str = SchemaField(\n            description=\"Error message if video generation failed.\"\n        )",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 6,
                          "end_line": 8,
                          "label": "logs: list[str] = SchemaField(\n            description=\"Generation progress logs.\", optional=True\n        )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}