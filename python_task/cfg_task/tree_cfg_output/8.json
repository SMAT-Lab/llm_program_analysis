{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 16,
      "label": "import logging\nfrom autogpt_libs.utils.cache import thread_cached\nfrom backend.data.block import (\n    Block,\n    BlockCategory,\n    BlockInput,\n    BlockOutput,\n    BlockSchema,\n    BlockType,\n    get_block,\n)\nfrom backend.data.execution import ExecutionStatus\nfrom backend.data.model import SchemaField\nlogger = logging.getLogger(__name__)\n@thread_cached\n@thread_cached",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "get_executor_manager_client",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def get_executor_manager_client():",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 4,
              "label": "from backend.executor import ExecutionManager\n    from backend.util.service import get_service_client\n    return get_service_client(ExecutionManager)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_event_bus",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "def get_event_bus():",
          "successors": [
            {
              "id": 2,
              "start_line": 2,
              "end_line": 2,
              "label": "from backend.data.execution import RedisExecutionEventBus",
              "successors": [
                {
                  "id": 3,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "return RedisExecutionEventBus()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "AgentExecutorBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class AgentExecutorBlock(Block):",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 9,
                  "label": "super().__init__(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 9,
                  "label": "executor_manager = get_executor_manager_client()\n        event_bus = get_event_bus()\n        graph_exec = executor_manager.add_execution(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 10,
                      "end_line": 11,
                      "label": "log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\n        logger.info(f\"Starting execution of {log_id}\")",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 12,
                          "end_line": 14,
                          "label": "for event in event_bus.listen(\n            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n        ):",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 15,
                              "end_line": 17,
                              "label": "logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )",
                              "successors": [
                                {
                                  "id": 6,
                                  "start_line": 18,
                                  "end_line": 18,
                                  "label": "if not event.node_id:",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "start_line": 19,
                                      "end_line": 19,
                                      "label": "if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "start_line": 20,
                                          "end_line": 20,
                                          "label": "logger.info(f\"Execution {log_id} ended with status {event.status}\")",
                                          "successors": []
                                        },
                                        {
                                          "id": 9,
                                          "start_line": 22,
                                          "end_line": 23,
                                          "label": "else:\n                    continue",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 10,
                                  "start_line": 24,
                                  "end_line": 24,
                                  "label": "if not event.block_id:",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "start_line": 25,
                                      "end_line": 26,
                                      "label": "logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 12,
              "start_line": 27,
              "end_line": 27,
              "label": "block = get_block(event.block_id)",
              "successors": [
                {
                  "id": 13,
                  "start_line": 28,
                  "end_line": 28,
                  "label": "if not block or block.block_type != BlockType.OUTPUT:",
                  "successors": [
                    {
                      "id": 14,
                      "start_line": 29,
                      "end_line": 29,
                      "label": "continue",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 15,
              "start_line": 30,
              "end_line": 30,
              "label": "output_name = event.input_data.get(\"name\")",
              "successors": [
                {
                  "id": 16,
                  "start_line": 31,
                  "end_line": 31,
                  "label": "if not output_name:",
                  "successors": [
                    {
                      "id": 17,
                      "start_line": 32,
                      "end_line": 33,
                      "label": "logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 18,
              "start_line": 34,
              "end_line": 34,
              "label": "for output_data in event.output_data.get(\"output\", []):",
              "successors": [
                {
                  "id": 19,
                  "start_line": 35,
                  "end_line": 35,
                  "label": "logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")",
                  "successors": [
                    {
                      "id": 20,
                      "start_line": 36,
                      "end_line": 36,
                      "label": "yield output_name, output_data",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 7,
              "label": "class Input(BlockSchema):\n        user_id: str = SchemaField(description=\"User ID\")\n        graph_id: str = SchemaField(description=\"Graph ID\")\n        graph_version: int = SchemaField(description=\"Graph Version\")\n        data: BlockInput = SchemaField(description=\"Input data for the graph\")\n        input_schema: dict = SchemaField(description=\"Input schema for the graph\")\n        output_schema: dict = SchemaField(description=\"Output schema for the graph\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}