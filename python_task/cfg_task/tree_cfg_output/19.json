{
  "name": "example_script",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "start_line": 1,
      "end_line": 12,
      "label": "import asyncio\nimport json\nimport logging\nfrom abc import ABC, abstractmethod\nfrom datetime import datetime\nfrom typing import Any, AsyncGenerator, Generator, Generic, Optional, TypeVar\nfrom pydantic import BaseModel\nfrom redis.asyncio.client import PubSub as AsyncPubSub\nfrom redis.client import PubSub\nfrom backend.data import redis\nlogger = logging.getLogger(__name__)\nM = TypeVar(\"M\", bound=BaseModel)",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "DateTimeEncoder",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 1,
          "label": "class DateTimeEncoder(json.JSONEncoder):",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "default",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def default(self, o):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "if isinstance(o, datetime):",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "return o.isoformat()",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "return super().default(o)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "BaseRedisEventBus",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "class BaseRedisEventBus(Generic[M], ABC):\n    Model: type[M]",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "event_bus_name",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "@property\n    @abstractmethod\n    def event_bus_name(self) -> str:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 4,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_serialize_message",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def _serialize_message(self, item: M, channel_key: str) -> tuple[str, str]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "message = json.dumps(item.model_dump(), cls=DateTimeEncoder)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "channel_name = f\"{self.event_bus_name}/{channel_key}\"",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "logger.info(f\"[{channel_name}] Publishing an event to Redis {message}\")",
                          "successors": [
                            {
                              "id": 5,
                              "start_line": 5,
                              "end_line": 5,
                              "label": "return message, channel_name",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_deserialize_message",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 2,
              "label": "def _deserialize_message(self, msg: Any, channel_key: str) -> M | None:\n        message_type = \"pmessage\" if \"*\" in channel_key else \"message\"",
              "successors": [
                {
                  "id": 2,
                  "start_line": 3,
                  "end_line": 3,
                  "label": "if msg[\"type\"] != message_type:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 4,
                      "end_line": 4,
                      "label": "return None",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "start_line": 5,
                      "end_line": 5,
                      "label": "try:",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 6,
                          "end_line": 8,
                          "label": "data = json.loads(msg[\"data\"])\n            logger.info(f\"Consuming an event from Redis {data}\")\n            return self.Model(**data)",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "start_line": 9,
                          "end_line": 10,
                          "label": "except Exception as e:\n            logger.error(f\"Failed to parse event result from Redis {msg} {e}\")",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_get_pubsub_channel",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "def _get_pubsub_channel(\n        self, connection: redis.Redis | redis.AsyncRedis, channel_key: str\n    ) -> tuple[PubSub | AsyncPubSub, str]:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 6,
                  "label": "full_channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        pubsub = connection.pubsub()\n        return pubsub, full_channel_name",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "RedisEventBus",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "class RedisEventBus(BaseRedisEventBus[M], ABC):\n    Model: type[M]",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "connection",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "@property",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "def connection(self) -> redis.Redis:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "return redis.get_redis()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "publish_event",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "def publish_event(self, event: M, channel_key: str):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "message, full_channel_name = self._serialize_message(event, channel_key)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "self.connection.publish(full_channel_name, message)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "listen_events",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "def listen_events(self, channel_key: str) -> Generator[M, None, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            self.connection, channel_key\n        )\n        assert isinstance(pubsub, PubSub)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "if \"*\" in channel_key:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 7,
                      "end_line": 7,
                      "label": "pubsub.psubscribe(full_channel_name)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "for message in pubsub.listen():",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 11,
                              "end_line": 11,
                              "label": "if event := self._deserialize_message(message, channel_key):",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 12,
                                  "end_line": 12,
                                  "label": "yield event",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "start_line": 9,
                      "end_line": 9,
                      "label": "pubsub.subscribe(full_channel_name)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "for message in pubsub.listen():",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 11,
                              "end_line": 11,
                              "label": "if event := self._deserialize_message(message, channel_key):",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 12,
                                  "end_line": 12,
                                  "label": "yield event",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "AsyncRedisEventBus",
      "type": "CFG",
      "blocks": [
        {
          "id": 1,
          "start_line": 1,
          "end_line": 2,
          "label": "class AsyncRedisEventBus(BaseRedisEventBus[M], ABC):\n    Model: type[M]",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "connection",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "@property",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "async def connection(self) -> redis.AsyncRedis:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "return await redis.get_redis_async()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "publish_event",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 1,
              "label": "async def publish_event(self, event: M, channel_key: str):",
              "successors": [
                {
                  "id": 2,
                  "start_line": 2,
                  "end_line": 2,
                  "label": "message, full_channel_name = self._serialize_message(event, channel_key)",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 3,
                      "end_line": 3,
                      "label": "connection = await self.connection",
                      "successors": [
                        {
                          "id": 4,
                          "start_line": 4,
                          "end_line": 4,
                          "label": "await connection.publish(full_channel_name, message)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "listen_events",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 5,
              "label": "async def listen_events(self, channel_key: str) -> AsyncGenerator[M, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            await self.connection, channel_key\n        )\n        assert isinstance(pubsub, AsyncPubSub)",
              "successors": [
                {
                  "id": 2,
                  "start_line": 6,
                  "end_line": 6,
                  "label": "if \"*\" in channel_key:",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 7,
                      "end_line": 7,
                      "label": "await pubsub.psubscribe(full_channel_name)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "async for message in pubsub.listen():",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 11,
                              "end_line": 11,
                              "label": "if event := self._deserialize_message(message, channel_key):",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 12,
                                  "end_line": 12,
                                  "label": "yield event",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "start_line": 9,
                      "end_line": 9,
                      "label": "await pubsub.subscribe(full_channel_name)",
                      "successors": [
                        {
                          "id": 5,
                          "start_line": 10,
                          "end_line": 10,
                          "label": "async for message in pubsub.listen():",
                          "successors": [
                            {
                              "id": 6,
                              "start_line": 11,
                              "end_line": 11,
                              "label": "if event := self._deserialize_message(message, channel_key):",
                              "successors": [
                                {
                                  "id": 7,
                                  "start_line": 12,
                                  "end_line": 12,
                                  "label": "yield event",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "wait_for_event",
          "type": "CFG",
          "blocks": [
            {
              "id": 1,
              "start_line": 1,
              "end_line": 3,
              "label": "async def wait_for_event(\n        self, channel_key: str, timeout: Optional[float] = None\n    ) -> M | None:",
              "successors": [
                {
                  "id": 2,
                  "start_line": 4,
                  "end_line": 7,
                  "label": "try:\n            return await asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )",
                  "successors": [
                    {
                      "id": 3,
                      "start_line": 8,
                      "end_line": 9,
                      "label": "except TimeoutError:\n            return None",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}