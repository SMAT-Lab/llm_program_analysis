{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 116,
  "functions": [],
  "classes": [
    {
      "name": "RSSEntry",
      "type": "class",
      "start_line": 12,
      "end_line": 18,
      "functions": [],
      "classes": [],
      "simplified_code": "class RSSEntry(pydantic.BaseModel):\n    title: str\n    link: str\n    description: str\n    pub_date: datetime\n    author: str\n    categories: list[str]",
      "blocks": [
        {
          "id": 1,
          "label": "class RSSEntry(pydantic.BaseModel):\n    title: str\n    link: str\n    description: str\n    pub_date: datetime\n    author: str\n    categories: list[str]",
          "successors": []
        }
      ]
    },
    {
      "name": "ReadRSSFeedBlock",
      "type": "class",
      "start_line": 21,
      "end_line": 116,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 44,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\",\n            input_schema=ReadRSSFeedBlock.Input,\n            output_schema=ReadRSSFeedBlock.Output,\n            description=\"Reads RSS feed entries from a given URL.\",\n            categories={BlockCategory.INPUT},\n            test_input={\n                \"rss_url\": \"https://example.com/rss\",\n                \"time_period\": 10_000_000,\n                \"polling_rate\": 1,\n                \"run_continuously\": False,\n            },\n            test_output=[\n                (\n                    \"entry\",\n                    RSSEntry(\n                        title=\"Example RSS Item\",\n                        link=\"https://example.com/article\",\n                        description=\"This is an example RSS item description.\",\n                        pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),\n                        author=\"John Doe\",\n                        categories=[\"Technology\", \"News\"],\n                    ),\n                ),\n            ],\n            test_mock={\n                \"parse_feed\": lambda *args, **kwargs: {\n                    \"entries\": [\n                        {\n                            \"title\": \"Example RSS Item\",\n                            \"link\": \"https://example.com/article\",\n                            \"summary\": \"This is an example RSS item description.\",\n                            \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),\n                            \"author\": \"John Doe\",\n                            \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],\n                        }\n                    ]\n                }\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\",\n    input_schema=ReadRSSFeedBlock.Input,\n    output_schema=ReadRSSFeedBlock.Output,\n    description=\"Reads RSS feed entries from a given URL.\",\n    categories={BlockCategory.INPUT},\n    test_input={\n        \"rss_url\": \"https://example.com/rss\",\n        \"time_period\": 10_000_000,\n        \"polling_rate\": 1,\n        \"run_continuously\": False,\n    },\n    test_output=[\n        (\n            \"entry\",\n            RSSEntry(\n                title=\"Example RSS Item\",\n                link=\"https://example.com/article\",\n                description=\"This is an example RSS item description.\",\n                pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),\n                author=\"John Doe\",\n                categories=[\"Technology\", \"News\"],\n            ),\n        ),\n    ],\n    test_mock={\n        \"parse_feed\": lambda *args, **kwargs: {\n            \"entries\": [\n                {\n                    \"title\": \"Example RSS Item\",\n                    \"link\": \"https://example.com/article\",\n                    \"summary\": \"This is an example RSS item description.\",\n                    \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),\n                    \"author\": \"John Doe\",\n                    \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],\n                }\n            ]\n        }\n    },\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "parse_feed",
          "type": "function",
          "start_line": 87,
          "end_line": 88,
          "functions": [],
          "classes": [],
          "simplified_code": "    def parse_feed(url: str) -> dict[str, Any]:\n        return feedparser.parse(url)  # type: ignore",
          "blocks": [
            {
              "id": 1,
              "label": "def parse_feed(url: str) -> dict[str, Any]:\nreturn feedparser.parse(url)  # type: ignore",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 90,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        keep_going = True\n        start_time = datetime.now(timezone.utc) - timedelta(\n            minutes=input_data.time_period\n        )\n        while keep_going:\n            keep_going = input_data.run_continuously\n\n            feed = self.parse_feed(input_data.rss_url)\n\n            for entry in feed[\"entries\"]:\n                pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)\n\n                if pub_date > start_time:\n                    yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )\n\n            time.sleep(input_data.polling_rate)",
          "blocks": [
            {
              "id": 1,
              "label": "keep_going = True\nstart_time = datetime.now(timezone.utc) - timedelta(minutes=input_data.time_period)",
              "successors": [
                2
              ]
            },
            {
              "id": 2,
              "label": "while keep_going:\nkeep_going = input_data.run_continuously\nfeed = self.parse_feed(input_data.rss_url)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "for entry in feed['entries']:\npub_date = datetime(*entry['published_parsed'][:6], tzinfo=timezone.utc)\n\nif pub_date > start_time: \n    yield (\n        'entry',\n        RSSEntry(\n            title=entry['title'],\n            link=entry['link'],\n            description=entry.get('summary', ''),\n            pub_date=pub_date,\n            author=entry.get('author', ''),\n            categories=[tag['term'] for tag in entry.get('tags', [])],\n        ),\n    )",
              "successors": [
                4
              ]
            },
            {
              "id": 6,
              "label": "# End of for loop",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "time.sleep(input_data.polling_rate)",
              "successors": [
                2
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 22,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        rss_url: str = SchemaField(\n            description=\"The URL of the RSS feed to read\",\n            placeholder=\"https://example.com/rss\",\n        )\n        time_period: int = SchemaField(\n            description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\",\n            placeholder=\"1440\",\n            default=1440,\n        )\n        polling_rate: int = SchemaField(\n            description=\"The number of seconds to wait between polling attempts.\",\n            placeholder=\"300\",\n        )\n        run_continuously: bool = SchemaField(\n            description=\"Whether to run the block continuously or just once.\",\n            default=True,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\nrss_url: str = SchemaField(description=\"The URL of the RSS feed to read\", placeholder=\"https://example.com/rss\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "time_period: int = SchemaField(description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\", placeholder=\"1440\", default=1440)",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "polling_rate: int = SchemaField(description=\"The number of seconds to wait between polling attempts.\", placeholder=\"300\")",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "run_continuously: bool = SchemaField(description=\"Whether to run the block continuously or just once.\", default=True)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 41,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        entry: RSSEntry = SchemaField(description=\"The RSS item\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\n    entry: RSSEntry = SchemaField(description=\"The RSS item\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class ReadRSSFeedBlock(Block):\n        )\n\n        entry: RSSEntry = SchemaField(description=\"The RSS item\")\n\n        )\n\n    @staticmethod\n        return feedparser.parse(url)  # type: ignore\n\n            time.sleep(input_data.polling_rate)",
      "blocks": [
        {
          "id": 1,
          "label": "class ReadRSSFeedBlock(Block):\nentry: RSSEntry = SchemaField(description=\"The RSS item\")\n@staticmethod\nreturn feedparser.parse(url)  # type: ignore\ntime.sleep(input_data.polling_rate)",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import time\nfrom datetime import datetime, timedelta, timezone\nfrom typing import Any\n\nimport feedparser\nimport pydantic\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n    categories: list[str]\n\n\n            time.sleep(input_data.polling_rate)",
  "blocks": [
    {
      "id": 1,
      "label": "import time\nfrom datetime import datetime, timedelta, timezone\nfrom typing import Any\n\nimport feedparser\nimport pydantic\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n    categories: list[str]\ntime.sleep(input_data.polling_rate)",
      "successors": []
    }
  ]
}