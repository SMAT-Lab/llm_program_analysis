{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 33,
  "functions": [],
  "classes": [
    {
      "name": "BlockCostType",
      "type": "class",
      "start_line": 9,
      "end_line": 13,
      "functions": [],
      "classes": [],
      "simplified_code": "class BlockCostType(str, Enum):\n    RUN = \"run\"  # cost X credits per run\n    BYTE = \"byte\"  # cost X credits per byte\n    SECOND = \"second\"  # cost X credits per second\n    DOLLAR = \"dollar\"  # cost X dollars per run",
      "blocks": [
        {
          "id": 1,
          "label": "class BlockCostType(str, Enum):\nRUN = \"run\"  # cost X credits per run",
          "successors": []
        },
        {
          "id": 3,
          "label": "BYTE = \"byte\"  # cost X credits per byte",
          "successors": []
        },
        {
          "id": 4,
          "label": "SECOND = \"second\"  # cost X credits per second",
          "successors": []
        },
        {
          "id": 5,
          "label": "DOLLAR = \"dollar\"  # cost X dollars per run",
          "successors": []
        }
      ]
    },
    {
      "name": "BlockCost",
      "type": "class",
      "start_line": 16,
      "end_line": 33,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 21,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(\n        self,\n        cost_amount: int,\n        cost_type: BlockCostType = BlockCostType.RUN,\n        cost_filter: Optional[BlockInput] = None,\n        **data: Any,\n    ) -> None:\n        super().__init__(\n            cost_amount=cost_amount,\n            cost_filter=cost_filter or {},\n            cost_type=cost_type,\n            **data,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(\n    self,\n    cost_amount: int,\n    cost_type: BlockCostType = BlockCostType.RUN,\n    cost_filter: Optional[BlockInput] = None,\n    **data: Any,\n) -> None:\nsuper().__init__(\n    cost_amount=cost_amount,\n    cost_filter=cost_filter or {},\n    cost_type=cost_type,\n    **data,\n)",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class BlockCost(BaseModel):\n    cost_amount: int\n    cost_filter: BlockInput\n    cost_type: BlockCostType\n\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "class BlockCost(BaseModel):\n    cost_amount: int\n    cost_filter: BlockInput\n    cost_type: BlockCostType",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from enum import Enum\nfrom typing import Any, Optional\n\nfrom pydantic import BaseModel\n\nfrom backend.data.block import BlockInput\n\n\n    DOLLAR = \"dollar\"  # cost X dollars per run\n\n\n        )",
  "blocks": [
    {
      "id": 1,
      "label": "from enum import Enum\nfrom typing import Any, Optional\n\nfrom pydantic import BaseModel\n\nfrom backend.data.block import BlockInput",
      "successors": []
    }
  ]
}