{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 228,
  "functions": [
    {
      "name": "PineconeCredentialsField",
      "type": "function",
      "start_line": 22,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "simplified_code": "def PineconeCredentialsField() -> PineconeCredentialsInput:\n    \"\"\"Creates a Pinecone credentials input on a block.\"\"\"\n    return CredentialsField(\n        description=\"The Pinecone integration can be used with an API Key.\",\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "def PineconeCredentialsField() -> PineconeCredentialsInput:\n    \"\"\"Creates a Pinecone credentials input on a block.\"\"\"\n    return CredentialsField(\n        description=\"The Pinecone integration can be used with an API Key.\",\n    )",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "PineconeInitBlock",
      "type": "class",
      "start_line": 29,
      "end_line": 84,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 50,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\n            description=\"Initializes a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInitBlock.Input,\n            output_schema=PineconeInitBlock.Output,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\n    description=\"Initializes a Pinecone index\",\n    categories={BlockCategory.LOGIC},\n    input_schema=PineconeInitBlock.Input,\n    output_schema=PineconeInitBlock.Output,\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 59,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n        try:\n            existing_indexes = pc.list_indexes()\n            if input_data.index_name not in [index.name for index in existing_indexes]:\n                pc.create_index(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )\n                message = f\"Created new index: {input_data.index_name}\"\n            else:\n                message = f\"Using existing index: {input_data.index_name}\"\n\n            yield \"index\", input_data.index_name\n            yield \"message\", message\n        except Exception as e:\n            yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"",
          "blocks": [
            {
              "id": 1,
              "label": "def run(\n    self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n) -> BlockOutput:\n    pc = Pinecone(api_key=credentials.api_key.get_secret_value())\ntry:\nexisting_indexes = pc.list_indexes()\nif input_data.index_name not in [index.name for index in existing_indexes]:\npc.create_index(\n    name=input_data.index_name,\n    dimension=input_data.dimension,\n    metric=input_data.metric,\n    spec=ServerlessSpec(\n        cloud=input_data.cloud, region=input_data.region\n    ),\n)\nmessage = f\"Created new index: {input_data.index_name}\"",
              "successors": [
                6
              ]
            },
            {
              "id": 6,
              "label": "else:\n    message = f\"Using existing index: {input_data.index_name}\"\nyield \"index\", input_data.index_name\nyield \"message\", message",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 30,
          "end_line": 44,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index_name: str = SchemaField(description=\"Name of the Pinecone index\")\n        dimension: int = SchemaField(\n            description=\"Dimension of the vectors\", default=768\n        )\n        metric: str = SchemaField(\n            description=\"Distance metric for the index\", default=\"cosine\"\n        )\n        cloud: str = SchemaField(\n            description=\"Cloud provider for serverless\", default=\"aws\"\n        )\n        region: str = SchemaField(\n            description=\"Region for serverless\", default=\"us-east-1\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: PineconeCredentialsInput = PineconeCredentialsField()\nindex_name: str = SchemaField(description=\"Name of the Pinecone index\")\ndimension: int = SchemaField(\n    description=\"Dimension of the vectors\", default=768\n)\nmetric: str = SchemaField(\n    description=\"Distance metric for the index\", default=\"cosine\"\n)\ncloud: str = SchemaField(\n    description=\"Cloud provider for serverless\", default=\"aws\"\n)\nregion: str = SchemaField(\n    description=\"Region for serverless\", default=\"us-east-1\"\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 46,
          "end_line": 48,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        index: str = SchemaField(description=\"Name of the initialized Pinecone index\")\n        message: str = SchemaField(description=\"Status message\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\n    index: str = SchemaField(description=\"Name of the initialized Pinecone index\")\n    message: str = SchemaField(description=\"Status message\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class PineconeInitBlock(Block):\n        )\n\n        message: str = SchemaField(description=\"Status message\")\n\n        )\n\n            yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class PineconeInitBlock(Block):\nmessage: str = SchemaField(description=\"Status message\")\ntry:\nyield \"message\", f\"Error initializing Pinecone index: {str(e)}\"",
          "successors": []
        }
      ]
    },
    {
      "name": "PineconeQueryBlock",
      "type": "class",
      "start_line": 85,
      "end_line": 167,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 111,
          "end_line": 118,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\n            description=\"Queries a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeQueryBlock.Input,\n            output_schema=PineconeQueryBlock.Output,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n    id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\n    description=\"Queries a Pinecone index\",\n    categories={BlockCategory.LOGIC},\n    input_schema=PineconeQueryBlock.Input,\n    output_schema=PineconeQueryBlock.Output,\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 120,
          "end_line": 165,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.idx_name)\n\n            # Ensure query_vector is in correct format\n            query_vector = input_data.query_vector\n            if isinstance(query_vector, list) and len(query_vector) > 0:\n                if isinstance(query_vector[0], list):\n                    query_vector = query_vector[0]\n\n            results = idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict()  # type: ignore\n            combined_text = \"\"\n            if results[\"matches\"]:\n                texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]\n                combined_text = \"\\n\\n\".join(texts)\n\n            # Return both the raw matches and combined text\n            yield \"results\", {\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }\n            yield \"combined_results\", combined_text\n\n        except Exception as e:\n            error_msg = f\"Error querying Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
          "blocks": [
            {
              "id": 1,
              "label": "try:\npc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\nidx = pc.Index(input_data.idx_name)\n\nquery_vector = input_data.query_vector\nif isinstance(query_vector, list) and len(query_vector) > 0:\nif isinstance(query_vector[0], list):\n    query_vector = query_vector[0]",
              "successors": [
                5
              ]
            },
            {
              "id": 5,
              "label": "results = idx.query(\n    namespace=input_data.namespace,\n    vector=query_vector,\n    top_k=input_data.top_k,\n    include_values=input_data.include_values,\n    include_metadata=input_data.include_metadata,\n).to_dict()\ncombined_text = \"\"\nif results[\"matches\"]:\ntexts = [\n    match[\"metadata\"][\"text\"]\n    for match in results[\"matches\"]\n    if match.get(\"metadata\", {}).get(\"text\")\n]\ncombined_text = \"\\n\\n\".join(texts)",
              "successors": [
                9
              ]
            },
            {
              "id": 9,
              "label": "yield \"results\", {\n    \"matches\": results[\"matches\"],\n    \"combined_text\": combined_text,\n}\nyield \"combined_results\", combined_text",
              "successors": []
            },
            {
              "id": 13,
              "label": "except Exception as e:\n    error_msg = f\"Error querying Pinecone: {str(e)}\"\n    raise RuntimeError(error_msg) from e",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 86,
          "end_line": 103,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        query_vector: list = SchemaField(description=\"Query vector\")\n        namespace: str = SchemaField(\n            description=\"Namespace to query in Pinecone\", default=\"\"\n        )\n        top_k: int = SchemaField(\n            description=\"Number of top results to return\", default=3\n        )\n        include_values: bool = SchemaField(\n            description=\"Whether to include vector values in the response\",\n            default=False,\n        )\n        include_metadata: bool = SchemaField(\n            description=\"Whether to include metadata in the response\", default=True\n        )\n        host: str = SchemaField(description=\"Host for pinecone\", default=\"\")\n        idx_name: str = SchemaField(description=\"Index name for pinecone\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: PineconeCredentialsInput = PineconeCredentialsField()\nquery_vector: list = SchemaField(description=\"Query vector\")\nnamespace: str = SchemaField(description=\"Namespace to query in Pinecone\", default=\"\")\ntop_k: int = SchemaField(description=\"Number of top results to return\", default=3)\ninclude_values: bool = SchemaField(description=\"Whether to include vector values in the response\", default=False)\ninclude_metadata: bool = SchemaField(description=\"Whether to include metadata in the response\", default=True)\nhost: str = SchemaField(description=\"Host for pinecone\", default=\"\")\nidx_name: str = SchemaField(description=\"Index name for pinecone\")",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 105,
          "end_line": 109,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        results: Any = SchemaField(description=\"Query results from Pinecone\")\n        combined_results: Any = SchemaField(\n            description=\"Combined results from Pinecone\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nresults: Any = SchemaField(description=\"Query results from Pinecone\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "combined_results: Any = SchemaField(\n    description=\"Combined results from Pinecone\"\n)",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class PineconeQueryBlock(Block):\n        idx_name: str = SchemaField(description=\"Index name for pinecone\")\n\n        )\n\n        )\n\n            raise RuntimeError(error_msg) from e\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class PineconeQueryBlock(Block):\nidx_name: str = SchemaField(description=\"Index name for pinecone\")\n)\n)\nraise RuntimeError(error_msg) from e",
          "successors": []
        }
      ]
    },
    {
      "name": "PineconeInsertBlock",
      "type": "class",
      "start_line": 168,
      "end_line": 228,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 188,
          "end_line": 195,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"477f2168-cd91-475a-8146-9499a5982434\",\n            description=\"Upload data to a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInsertBlock.Input,\n            output_schema=PineconeInsertBlock.Output,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\n    super().__init__(\n        id=\"477f2168-cd91-475a-8146-9499a5982434\",\n        description=\"Upload data to a Pinecone index\",\n        categories={BlockCategory.LOGIC},\n        input_schema=PineconeInsertBlock.Input,\n        output_schema=PineconeInsertBlock.Output,\n    )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 197,
          "end_line": 228,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.index)\n\n            vectors = []\n            for chunk, embedding in zip(input_data.chunks, input_data.embeddings):\n                vector_metadata = input_data.metadata.copy()\n                vector_metadata[\"text\"] = chunk\n                vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )\n            idx.upsert(vectors=vectors, namespace=input_data.namespace)\n\n            yield \"upsert_response\", \"successfully upserted\"\n\n        except Exception as e:\n            error_msg = f\"Error uploading to Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
          "blocks": [
            {
              "id": 1,
              "label": "try:\npc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n# Get the index\nidx = pc.Index(input_data.index)\n\nvectors = []",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "for chunk, embedding in zip(input_data.chunks, input_data.embeddings):\nvector_metadata = input_data.metadata.copy()\nvector_metadata[\"text\"] = chunk\nvectors.append(\n    {\n        \"id\": str(uuid.uuid4()),\n        \"values\": embedding,\n        \"metadata\": vector_metadata,\n    }\n)",
              "successors": [
                3
              ]
            },
            {
              "id": 5,
              "label": "idx.upsert(vectors=vectors, namespace=input_data.namespace)\n\nyield \"upsert_response\", \"successfully upserted\"",
              "successors": []
            },
            {
              "id": 6,
              "label": "except Exception as e:\nerror_msg = f\"Error uploading to Pinecone: {str(e)}\"\nraise RuntimeError(error_msg) from e",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 169,
          "end_line": 181,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index: str = SchemaField(description=\"Initialized Pinecone index\")\n        chunks: list = SchemaField(description=\"List of text chunks to ingest\")\n        embeddings: list = SchemaField(\n            description=\"List of embeddings corresponding to the chunks\"\n        )\n        namespace: str = SchemaField(\n            description=\"Namespace to use in Pinecone\", default=\"\"\n        )\n        metadata: dict = SchemaField(\n            description=\"Additional metadata to store with each vector\", default={}\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\ncredentials: PineconeCredentialsInput = PineconeCredentialsField()\nindex: str = SchemaField(description=\"Initialized Pinecone index\")\nchunks: list = SchemaField(description=\"List of text chunks to ingest\")\nembeddings: list = SchemaField(description=\"List of embeddings corresponding to the chunks\")\nnamespace: str = SchemaField(description=\"Namespace to use in Pinecone\", default=\"\")\nmetadata: dict = SchemaField(description=\"Additional metadata to store with each vector\", default={})",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 183,
          "end_line": 186,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        upsert_response: str = SchemaField(\n            description=\"Response from Pinecone upsert operation\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nupsert_response: str = SchemaField(description=\"Response from Pinecone upsert operation\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class PineconeInsertBlock(Block):\n        )\n\n        )\n\n        )\n\n            raise RuntimeError(error_msg) from e",
      "blocks": [
        {
          "id": 1,
          "label": "class PineconeInsertBlock(Block):\n    def __init__(self, dim: int, batch_size: Optional[int] = None, project_columns: bool = False):\n        super().__init__(type_=BlockType.PINECONE_INSERT, requirements=TransformConfigRequirements(dimension=dim))\n        column_type = ColumnType.FLOAT\n        self._project_embeddings = project_columns\ntry:\n    if project_columns:\n        columns = []\n        append_column(columns, (\"document_id\", ColumnType.STRING))\n        append_column(columns, (\"text\", ColumnType.STRING))\n    else:\n        columns = [\"metadata\", column_type, \"embeddings\", column_type]\n    self._batch_size = batch_size if batch_size is not None else 512\nexcept SomeSpecificException as e:\n    error_msg = f\"An error occurred with the following details: {str(e)}\"\n    raise RuntimeError(error_msg) from e",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import uuid\nfrom typing import Any, Literal\n\nfrom pinecone import Pinecone, ServerlessSpec\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nPineconeCredentials = APIKeyCredentials\nPineconeCredentialsInput = CredentialsMetaInput[\n    Literal[ProviderName.PINECONE],\n    Literal[\"api_key\"],\n]\n\n\n    )\n\n\n\n\n            raise RuntimeError(error_msg) from e",
  "blocks": [
    {
      "id": 1,
      "label": "import uuid\nfrom typing import Any, Literal\n\nfrom pinecone import Pinecone, ServerlessSpec\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nPineconeCredentials = APIKeyCredentials\nPineconeCredentialsInput = CredentialsMetaInput[\n    Literal[ProviderName.PINECONE],\n    Literal[\"api_key\"],\n]",
      "successors": []
    }
  ]
}