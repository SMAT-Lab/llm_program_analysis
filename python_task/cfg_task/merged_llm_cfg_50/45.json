{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 325,
  "functions": [
    {
      "name": "generate_api_key",
      "type": "function",
      "start_line": 117,
      "end_line": 151,
      "functions": [],
      "classes": [],
      "simplified_code": "async def generate_api_key(\n    name: str,\n    user_id: str,\n    permissions: List[APIKeyPermission],\n    description: Optional[str] = None,\n) -> tuple[APIKeyWithoutHash, str]:\n    \"\"\"\n    Generate a new API key and store it in the database.\n    Returns the API key object (without hash) and the plain text key.\n    \"\"\"\n    try:\n        api_manager = APIKeyManager()\n        key = api_manager.generate_api_key()\n\n        api_key = await PrismaAPIKey.prisma().create(\n            data=APIKeyCreateInput(\n                id=str(uuid.uuid4()),\n                name=name,\n                prefix=key.prefix,\n                postfix=key.postfix,\n                key=key.hash,\n                permissions=[p for p in permissions],\n                description=description,\n                userId=user_id,\n            )\n        )\n\n        api_key_without_hash = APIKeyWithoutHash.from_db(api_key)\n        return api_key_without_hash, key.raw\n    except PrismaError as e:\n        logger.error(f\"Database error while generating API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error while generating API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "api_manager = APIKeyManager()\nkey = api_manager.generate_api_key()\n\napi_key = await PrismaAPIKey.prisma().create(\n    data=APIKeyCreateInput(\n        id=str(uuid.uuid4()),\n        name=name,\n        prefix=key.prefix,\n        postfix=key.postfix,\n        key=key.hash,\n        permissions=[p for p in permissions],\n        description=description,\n        userId=user_id,\n    )\n)\n\napi_key_without_hash = APIKeyWithoutHash.from_db(api_key)\nreturn api_key_without_hash, key.raw\n",
          "successors": []
        }
      ]
    },
    {
      "name": "validate_api_key",
      "type": "function",
      "start_line": 154,
      "end_line": 182,
      "functions": [],
      "classes": [],
      "simplified_code": "async def validate_api_key(plain_text_key: str) -> Optional[APIKey]:\n    \"\"\"\n    Validate an API key and return the API key object if valid.\n    \"\"\"\n    try:\n        if not plain_text_key.startswith(APIKeyManager.PREFIX):\n            logger.warning(\"Invalid API key format\")\n            return None\n\n        prefix = plain_text_key[: APIKeyManager.PREFIX_LENGTH]\n        api_manager = APIKeyManager()\n\n        api_key = await PrismaAPIKey.prisma().find_first(\n            where=APIKeyWhereInput(prefix=prefix, status=(APIKeyStatus.ACTIVE))\n        )\n\n        if not api_key:\n            logger.warning(f\"No active API key found with prefix {prefix}\")\n            return None\n\n        is_valid = api_manager.verify_api_key(plain_text_key, api_key.key)\n        if not is_valid:\n            logger.warning(\"API key verification failed\")\n            return None\n\n        return APIKey.from_db(api_key)\n    except Exception as e:\n        logger.error(f\"Error validating API key: {str(e)}\")\n        raise APIKeyValidationError(f\"Failed to validate API key: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "async def validate_api_key(plain_text_key: str) -> Optional[APIKey]:\n\"\"\"\nValidate an API key and return the API key object if valid.\n\"\"\"\ntry:\nif not plain_text_key.startswith(APIKeyManager.PREFIX):\nlogger.warning(\"Invalid API key format\")\nreturn None",
          "successors": [
            13
          ]
        },
        {
          "id": 6,
          "label": "prefix = plain_text_key[: APIKeyManager.PREFIX_LENGTH]\napi_manager = APIKeyManager()\n\napi_key = await PrismaAPIKey.prisma().find_first(\n    where=APIKeyWhereInput(prefix=prefix, status=(APIKeyStatus.ACTIVE))\n)\nif not api_key:\nlogger.warning(f\"No active API key found with prefix {prefix}\")\nreturn None",
          "successors": [
            13
          ]
        },
        {
          "id": 9,
          "label": "is_valid = api_manager.verify_api_key(plain_text_key, api_key.key)\nif not is_valid:\nlogger.warning(\"API key verification failed\")\nreturn None",
          "successors": [
            13
          ]
        },
        {
          "id": 11,
          "label": "return APIKey.from_db(api_key)",
          "successors": [
            13
          ]
        },
        {
          "id": 13,
          "label": "logger.error(f\"Error validating API key: {str(e)}\")\nraise APIKeyValidationError(f\"Failed to validate API key: {str(e)}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "revoke_api_key",
      "type": "function",
      "start_line": 185,
      "end_line": 215,
      "functions": [],
      "classes": [],
      "simplified_code": "async def revoke_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n\n        if not api_key:\n            raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")\n\n        if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to revoke this API key.\"\n            )\n\n        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(\n                status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)\n            ),\n        )\n\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n    except PrismaError as e:\n        logger.error(f\"Database error while revoking API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error while revoking API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "try:\napi_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\nif not api_key:\nraise APIKeyNotFoundError(f\"API key with id {key_id} not found\")",
          "successors": [
            11
          ]
        },
        {
          "id": 5,
          "label": "if api_key.userId != user_id:\nraise APIKeyPermissionError(\n\"You do not have permission to revoke this API key.\"\n)",
          "successors": [
            11
          ]
        },
        {
          "id": 7,
          "label": "where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\nupdated_api_key = await PrismaAPIKey.prisma().update(\nwhere=where_clause,\ndata=APIKeyUpdateInput(\nstatus=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)\n),\n)\nif updated_api_key:\nreturn APIKeyWithoutHash.from_db(updated_api_key)",
          "successors": []
        },
        {
          "id": 10,
          "label": "return None",
          "successors": []
        },
        {
          "id": 11,
          "label": "except (APIKeyNotFoundError, APIKeyPermissionError) as e:",
          "successors": []
        },
        {
          "id": 12,
          "label": "except PrismaError as e:\nlogger.error(f\"Database error while revoking API key: {str(e)}\")\nraise APIKeyError(f\"Failed to revoke API key: {str(e)}\")",
          "successors": []
        },
        {
          "id": 13,
          "label": "except Exception as e:\nlogger.error(f\"Unexpected error while revoking API key: {str(e)}\")\nraise APIKeyError(f\"Failed to revoke API key: {str(e)}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "list_user_api_keys",
      "type": "function",
      "start_line": 218,
      "end_line": 232,
      "functions": [],
      "classes": [],
      "simplified_code": "async def list_user_api_keys(user_id: str) -> List[APIKeyWithoutHash]:\n    try:\n        where_clause: APIKeyWhereInput = {\"userId\": user_id}\n\n        api_keys = await PrismaAPIKey.prisma().find_many(\n            where=where_clause, order={\"createdAt\": \"desc\"}\n        )\n\n        return [APIKeyWithoutHash.from_db(key) for key in api_keys]\n    except PrismaError as e:\n        logger.error(f\"Database error while listing API keys: {str(e)}\")\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error while listing API keys: {str(e)}\")\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "where_clause: APIKeyWhereInput = {\"userId\": user_id}\n\n        api_keys = await PrismaAPIKey.prisma().find_many(\n            where=where_clause, order={\"createdAt\": \"desc\"}\n        )\n\n        return [APIKeyWithoutHash.from_db(key) for key in api_keys]\nraise APIKeyError(f\"Failed to list API keys: {str(e)}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "suspend_api_key",
      "type": "function",
      "start_line": 235,
      "end_line": 263,
      "functions": [],
      "classes": [],
      "simplified_code": "async def suspend_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n\n        if not api_key:\n            raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")\n\n        if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to suspend this API key.\"\n            )\n\n        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED),\n        )\n\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n    except PrismaError as e:\n        logger.error(f\"Database error while suspending API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error while suspending API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "try:\napi_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\nif not api_key:\nraise APIKeyNotFoundError(f\"API key with id {key_id} not found\")",
          "successors": []
        },
        {
          "id": 5,
          "label": "if api_key.userId != user_id:\nraise APIKeyPermissionError(\"You do not have permission to suspend this API key.\")",
          "successors": []
        },
        {
          "id": 7,
          "label": "where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\nupdated_api_key = await PrismaAPIKey.prisma().update(\n where=where_clause,\n data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED),\n)\nif updated_api_key:\n return APIKeyWithoutHash.from_db(updated_api_key)\nreturn None",
          "successors": []
        },
        {
          "id": 9,
          "label": "except (APIKeyNotFoundError, APIKeyPermissionError) as e:\nraise e",
          "successors": []
        },
        {
          "id": 11,
          "label": "except PrismaError as e:\nlogger.error(f\"Database error while suspending API key: {str(e)}\")\nraise APIKeyError(f\"Failed to suspend API key: {str(e)}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "has_permission",
      "type": "function",
      "start_line": 266,
      "end_line": 271,
      "functions": [],
      "classes": [],
      "simplified_code": "def has_permission(api_key: APIKey, required_permission: APIKeyPermission) -> bool:\n    try:\n        return required_permission in api_key.permissions\n    except Exception as e:\n        logger.error(f\"Error checking API key permissions: {str(e)}\")\n        return False",
      "blocks": [
        {
          "id": 1,
          "label": "try:\n    return required_permission in api_key.permissions\ntry:\n    return required_permission in api_key.permissions\nexcept Exception as e:\n    logger.error(f\"Error checking API key permissions: {str(e)}\")\n    return False",
          "successors": []
        }
      ]
    },
    {
      "name": "get_api_key_by_id",
      "type": "function",
      "start_line": 274,
      "end_line": 289,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_api_key_by_id(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n        api_key = await PrismaAPIKey.prisma().find_first(\n            where=APIKeyWhereInput(id=key_id, userId=user_id)\n        )\n\n        if not api_key:\n            return None\n\n        return APIKeyWithoutHash.from_db(api_key)\n    except PrismaError as e:\n        logger.error(f\"Database error while getting API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to get API key: {str(e)}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error while getting API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to get API key: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_api_key_by_id(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\ntry:\napi_key = await PrismaAPIKey.prisma().find_first(where=APIKeyWhereInput(id=key_id, userId=user_id))\nif not api_key:\nreturn None",
          "successors": []
        },
        {
          "id": 6,
          "label": "return APIKeyWithoutHash.from_db(api_key)",
          "successors": []
        },
        {
          "id": 8,
          "label": "logger.error(f\"Database error while getting API key: {str(e)}\")\nraise APIKeyError(f\"Failed to get API key: {str(e)}\")",
          "successors": []
        },
        {
          "id": 10,
          "label": "except Exception as e:\nlogger.error(f\"Unexpected error while getting API key: {str(e)}\")\nraise APIKeyError(f\"Failed to get API key: {str(e)}\")",
          "successors": []
        }
      ]
    },
    {
      "name": "update_api_key_permissions",
      "type": "function",
      "start_line": 292,
      "end_line": 325,
      "functions": [],
      "classes": [],
      "simplified_code": "async def update_api_key_permissions(\n    key_id: str, user_id: str, permissions: List[APIKeyPermission]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"\n    Update the permissions of an API key.\n    \"\"\"\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n\n        if api_key is None:\n            raise APIKeyNotFoundError(\"No such API key found.\")\n\n        if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to update this API key.\"\n            )\n\n        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(permissions=permissions),\n        )\n\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n    except PrismaError as e:\n        logger.error(f\"Database error while updating API key permissions: {str(e)}\")\n        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error while updating API key permissions: {str(e)}\")\n        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\nif api_key is None:\n    raise APIKeyNotFoundError(\"No such API key found.\")",
          "successors": [
            3
          ]
        },
        {
          "id": 3,
          "label": "if api_key.userId != user_id:\n    raise APIKeyPermissionError(\n        \"You do not have permission to update this API key.\"\n    )\nwhere_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\nupdated_api_key = await PrismaAPIKey.prisma().update(\n    where=where_clause,\n    data=APIKeyUpdateInput(permissions=permissions),\n)\nif updated_api_key:\n    return APIKeyWithoutHash.from_db(updated_api_key)",
          "successors": [
            6
          ]
        },
        {
          "id": 6,
          "label": "return None",
          "successors": []
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "APIKeyError",
      "type": "class",
      "start_line": 24,
      "end_line": 27,
      "functions": [],
      "classes": [],
      "simplified_code": "class APIKeyError(Exception):\n    \"\"\"Base exception for API key operations\"\"\"\n\n    pass",
      "blocks": [
        {
          "id": 1,
          "label": "class APIKeyError(Exception):\n    \"\"\"Base exception for API key operations\"\"\"\n\n    pass",
          "successors": []
        }
      ]
    },
    {
      "name": "APIKeyNotFoundError",
      "type": "class",
      "start_line": 30,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": "class APIKeyNotFoundError(APIKeyError):\n    \"\"\"Raised when an API key is not found\"\"\"\n\n    pass",
      "blocks": [
        {
          "id": 1,
          "label": "class APIKeyNotFoundError(APIKeyError):\n    \"\"\"Raised when an API key is not found\"\"\"\n\n    pass",
          "successors": []
        }
      ]
    },
    {
      "name": "APIKeyPermissionError",
      "type": "class",
      "start_line": 36,
      "end_line": 39,
      "functions": [],
      "classes": [],
      "simplified_code": "class APIKeyPermissionError(APIKeyError):\n    \"\"\"Raised when there are permission issues with API key operations\"\"\"\n\n    pass",
      "blocks": [
        {
          "id": 1,
          "label": "class APIKeyPermissionError(APIKeyError):\n    \"\"\"Raised when there are permission issues with API key operations\"\"\"\n\n    pass",
          "successors": []
        }
      ]
    },
    {
      "name": "APIKeyValidationError",
      "type": "class",
      "start_line": 42,
      "end_line": 45,
      "functions": [],
      "classes": [],
      "simplified_code": "class APIKeyValidationError(APIKeyError):\n    \"\"\"Raised when API key validation fails\"\"\"\n\n    pass",
      "blocks": [
        {
          "id": 1,
          "label": "class APIKeyValidationError(APIKeyError):\n    \"\"\"Raised when API key validation fails\"\"\"\n\n    pass",
          "successors": []
        }
      ]
    },
    {
      "name": "APIKey",
      "type": "class",
      "start_line": 48,
      "end_line": 80,
      "functions": [
        {
          "name": "from_db",
          "type": "function",
          "start_line": 62,
          "end_line": 80,
          "functions": [],
          "classes": [],
          "simplified_code": "    def from_db(api_key: PrismaAPIKey):\n        try:\n            return APIKey(\n                id=api_key.id,\n                name=api_key.name,\n                prefix=api_key.prefix,\n                postfix=api_key.postfix,\n                key=api_key.key,\n                status=APIKeyStatus(api_key.status),\n                permissions=[APIKeyPermission(p) for p in api_key.permissions],\n                created_at=api_key.createdAt,\n                last_used_at=api_key.lastUsedAt,\n                revoked_at=api_key.revokedAt,\n                description=api_key.description,\n                user_id=api_key.userId,\n            )\n        except Exception as e:\n            logger.error(f\"Error creating APIKey from db: {str(e)}\")\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")",
          "blocks": [
            {
              "id": 1,
              "label": "try:\nreturn APIKey(\n    id=api_key.id,\n    name=api_key.name,\n    prefix=api_key.prefix,\n    postfix=api_key.postfix,\n    key=api_key.key,\n    status=APIKeyStatus(api_key.status),\n    permissions=[APIKeyPermission(p) for p in api_key.permissions],\n    created_at=api_key.createdAt,\n    last_used_at=api_key.lastUsedAt,\n    revoked_at=api_key.revokedAt,\n    description=api_key.description,\n    user_id=api_key.userId,\n)",
              "successors": []
            },
            {
              "id": 3,
              "label": "except Exception as e:\n    logger.error(f\"Error creating APIKey from db: {str(e)}\")\n    raise APIKeyError(f\"Failed to create API key object: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class APIKey(BaseDbModel):\n    name: str\n    prefix: str\n    key: str\n    status: APIKeyStatus = APIKeyStatus.ACTIVE\n    permissions: List[APIKeyPermission]\n    postfix: str\n    created_at: datetime\n    last_used_at: Optional[datetime] = None\n    revoked_at: Optional[datetime] = None\n    description: Optional[str] = None\n    user_id: str\n\n    @staticmethod\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "class APIKey(BaseDbModel):\n    name: str\n    prefix: str\n    key: str\n    status: APIKeyStatus = APIKeyStatus.ACTIVE\n    permissions: List[APIKeyPermission]\n    postfix: str\n    created_at: datetime\n    last_used_at: Optional[datetime] = None\n    revoked_at: Optional[datetime] = None\n    description: Optional[str] = None\n    user_id: str\n\n    @staticmethod\ndef create_key(name: str, permissions: List[str], user_id: Optional[str] = None, description: Optional[str] = None) -> 'APIKey':\n        try:\n            prefix, key, postfix = generate_key_parts()\n            created_at = datetime.utcnow()\n            status = APIKeyStatus.ACTIVE\n            new_key = APIKey(\n                name=name,\n                prefix=prefix,\n                key=key,\n                postfix=postfix,\n                permissions=[APIKeyPermission(p) for p in permissions],\n                created_at=created_at,\n                status=status,\n                user_id=user_id,\n                description=description\n            )\n            return new_key\nexcept Exception as e:\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")",
          "successors": [
            4
          ]
        },
        {
          "id": 4,
          "label": "finally:\n            log_key_creation_attempt(name, user_id)",
          "successors": []
        },
        {
          "id": 5,
          "label": "return new_key",
          "successors": [
            4
          ]
        }
      ]
    },
    {
      "name": "APIKeyWithoutHash",
      "type": "class",
      "start_line": 83,
      "end_line": 114,
      "functions": [
        {
          "name": "from_db",
          "type": "function",
          "start_line": 97,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": "    def from_db(api_key: PrismaAPIKey):\n        try:\n            return APIKeyWithoutHash(\n                id=api_key.id,\n                name=api_key.name,\n                prefix=api_key.prefix,\n                postfix=api_key.postfix,\n                status=APIKeyStatus(api_key.status),\n                permissions=[APIKeyPermission(p) for p in api_key.permissions],\n                created_at=api_key.createdAt,\n                last_used_at=api_key.lastUsedAt,\n                revoked_at=api_key.revokedAt,\n                description=api_key.description,\n                user_id=api_key.userId,\n            )\n        except Exception as e:\n            logger.error(f\"Error creating APIKeyWithoutHash from db: {str(e)}\")\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")",
          "blocks": [
            {
              "id": 1,
              "label": "try:\nreturn APIKeyWithoutHash(\n    id=api_key.id,\n    name=api_key.name,\n    prefix=api_key.prefix,\n    postfix=api_key.postfix,\n    status=APIKeyStatus(api_key.status),\n    permissions=[APIKeyPermission(p) for p in api_key.permissions],\n    created_at=api_key.createdAt,\n    last_used_at=api_key.lastUsedAt,\n    revoked_at=api_key.revokedAt,\n    description=api_key.description,\n    user_id=api_key.userId,\n)",
              "successors": []
            },
            {
              "id": 3,
              "label": "except Exception as e:\n    logger.error(f\"Error creating APIKeyWithoutHash from db: {str(e)}\")\n    raise APIKeyError(f\"Failed to create API key object: {str(e)}\")",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "class APIKeyWithoutHash(BaseModel):\n    id: str\n    name: str\n    prefix: str\n    postfix: str\n    status: APIKeyStatus\n    permissions: List[APIKeyPermission]\n    created_at: datetime\n    last_used_at: Optional[datetime]\n    revoked_at: Optional[datetime]\n    description: Optional[str]\n    user_id: str\n\n    @staticmethod\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "class APIKeyWithoutHash(BaseModel):\n    id: str\n    name: str\n    prefix: str\n    postfix: str\n    status: APIKeyStatus\n    permissions: List[APIKeyPermission]\n    created_at: datetime\n    last_used_at: Optional[datetime]\n    revoked_at: Optional[datetime]\n    description: Optional[str]\n    user_id: str\n@staticmethod\n    def from_dict(id: str, key_dict: dict) -> 'APIKeyWithoutHash':\n        try:\n            return APIKeyWithoutHash(\n                id=id,\n                name=key_dict['name'],\n                prefix=key_dict['prefix'],\n                postfix=key_dict['postfix'],\n                status=APIKeyStatus[key_dict['status']],\n                permissions=[APIKeyPermission[p] for p in key_dict['permissions']],\n                created_at=datetime.fromisoformat(key_dict['created_at']),\n                last_used_at=datetime.fromisoformat(key_dict['last_used_at']) if key_dict['last_used_at'] else None,\n                revoked_at=datetime.fromisoformat(key_dict['revoked_at']) if key_dict['revoked_at'] else None,\n                description=key_dict.get('description', None),\n                user_id=key_dict['user_id']\n            )\nexcept Exception as e:\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import logging\nimport uuid\nfrom datetime import datetime, timezone\nfrom typing import List, Optional\n\nfrom autogpt_libs.api_key.key_manager import APIKeyManager\nfrom prisma.enums import APIKeyPermission, APIKeyStatus\nfrom prisma.errors import PrismaError\nfrom prisma.models import APIKey as PrismaAPIKey\nfrom prisma.types import (\n    APIKeyCreateInput,\n    APIKeyUpdateInput,\n    APIKeyWhereInput,\n    APIKeyWhereUniqueInput,\n)\nfrom pydantic import BaseModel\n\nfrom backend.data.db import BaseDbModel\n\nlogger = logging.getLogger(__name__)\n\n\n# Some basic exceptions\n    pass\n\n\n    pass\n\n\n    pass\n\n\n    pass\n\n\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")\n\n\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")\n\n\n        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")\n\n\n        raise APIKeyValidationError(f\"Failed to validate API key: {str(e)}\")\n\n\n        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")\n\n\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")\n\n\n        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")\n\n\n        return False\n\n\n        raise APIKeyError(f\"Failed to get API key: {str(e)}\")\n\n\n        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nimport uuid\nfrom datetime import datetime, timezone\nfrom typing import List, Optional\n\nfrom autogpt_libs.api_key.key_manager import APIKeyManager\nfrom prisma.enums import APIKeyPermission, APIKeyStatus\nfrom prisma.errors import PrismaError\nfrom prisma.models import APIKey as PrismaAPIKey\nfrom prisma.types import (\n    APIKeyCreateInput,\n    APIKeyUpdateInput,\n    APIKeyWhereInput,\n    APIKeyWhereUniqueInput,\n)\nfrom pydantic import BaseModel\n\nfrom backend.data.db import BaseDbModel\n\nlogger = logging.getLogger(__name__)\n# Some basic exceptions\n    pass\n\n    pass\n\n    pass\n\n    pass\n\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")\n\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")\n\n        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")\n\n        raise APIKeyValidationError(f\"Failed to validate API key: {str(e)}\")\n\n        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")\n\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")\n\n        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")\n\n        return False\n\n        raise APIKeyError(f\"Failed to get API key: {str(e)}\")\n\n        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")",
      "successors": []
    }
  ]
}