{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 20,
  "functions": [
    {
      "name": "thread_cached",
      "type": "function",
      "start_line": 8,
      "end_line": 20,
      "functions": [
        {
          "name": "wrapper",
          "type": "function",
          "start_line": 11,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, \"cache\", None)\n        if cache is None:\n            cache = thread_local.cache = {}\n        key = (args, tuple(sorted(kwargs.items())))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]",
          "blocks": [
            {
              "id": 1,
              "label": "cache = getattr(thread_local, \"cache\", None)\nif cache is None:\ncache = thread_local.cache = {}",
              "successors": [
                4
              ]
            },
            {
              "id": 4,
              "label": "key = (args, tuple(sorted(kwargs.items())))\nif key not in cache:\ncache[key] = func(*args, **kwargs)",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "return cache[key]",
              "successors": []
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:\n    thread_local = threading.local()\n\n        return cache[key]\n\n    return wrapper",
      "blocks": [
        {
          "id": 1,
          "label": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:\nthread_local = threading.local()\ndef wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\nkey = (args, frozenset(kwargs.items()))\nif not hasattr(thread_local, 'cache'):\nthread_local.cache = {}\ncache = thread_local.cache\nif key not in cache:",
          "successors": [
            9,
            10
          ]
        },
        {
          "id": 9,
          "label": "cache[key] = func(*args, **kwargs)",
          "successors": [
            10
          ]
        },
        {
          "id": 10,
          "label": "return cache[key]\nreturn wrapper",
          "successors": []
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import threading\nfrom typing import Callable, ParamSpec, TypeVar\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\n\n\n    return wrapper",
  "blocks": [
    {
      "id": 1,
      "label": "import threading\nfrom typing import Callable, ParamSpec, TypeVar\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\ndef threaded(func: Callable[P, R]) -> Callable[P, R]:\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        result = None\n\n        def task():\n            nonlocal result\n            result = func(*args, **kwargs)\n\n        thread = threading.Thread(target=task)\n        thread.start()\n        thread.join()\n        return result\n    return wrapper",
      "successors": []
    }
  ]
}