{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 73,
  "functions": [],
  "classes": [
    {
      "name": "StepThroughItemsBlock",
      "type": "class",
      "start_line": 8,
      "end_line": 73,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 35,
          "end_line": 54,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"f66a3543-28d3-4ab5-8945-9b336371e2ce\",\n            input_schema=StepThroughItemsBlock.Input,\n            output_schema=StepThroughItemsBlock.Output,\n            categories={BlockCategory.LOGIC},\n            description=\"Iterates over a list or dictionary and outputs each item.\",\n            test_input={\"items\": [1, 2, 3, {\"key1\": \"value1\", \"key2\": \"value2\"}]},\n            test_output=[\n                (\"item\", 1),\n                (\"key\", 0),\n                (\"item\", 2),\n                (\"key\", 1),\n                (\"item\", 3),\n                (\"key\", 2),\n                (\"item\", {\"key1\": \"value1\", \"key2\": \"value2\"}),\n                (\"key\", 3),\n            ],\n            test_mock={},\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):\nsuper().__init__(\n            id=\"f66a3543-28d3-4ab5-8945-9b336371e2ce\",\n            input_schema=StepThroughItemsBlock.Input,\n            output_schema=StepThroughItemsBlock.Output,\n            categories={BlockCategory.LOGIC},\n            description=\"Iterates over a list or dictionary and outputs each item.\",\n            test_input={\"items\": [1, 2, 3, {\"key1\": \"value1\", \"key2\": \"value2\"}]},\n            test_output=[\n                (\"item\", 1),\n                (\"key\", 0),\n                (\"item\", 2),\n                (\"key\", 1),\n                (\"item\", 3),\n                (\"key\", 2),\n                (\"item\", {\"key1\": \"value1\", \"key2\": \"value2\"}),\n                (\"key\", 3),\n            ],\n            test_mock={},\n        )",
              "successors": []
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 56,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        for data in [input_data.items, input_data.items_object, input_data.items_str]:\n            if not data:\n                continue\n            if isinstance(data, str):\n                items = json.loads(data)\n            else:\n                items = data\n            if isinstance(items, dict):\n                # If items is a dictionary, iterate over its values\n                for item in items.values():\n                    yield \"item\", item\n                    yield \"key\", item\n            else:\n                # If items is a list, iterate over the list\n                for index, item in enumerate(items):\n                    yield \"item\", item\n                    yield \"key\", index",
          "blocks": [
            {
              "id": 1,
              "label": "for data in [input_data.items, input_data.items_object, input_data.items_str]:\nif not data:\ncontinue",
              "successors": [
                1
              ]
            },
            {
              "id": 4,
              "label": "if isinstance(data, str):\nitems = json.loads(data)",
              "successors": [
                7
              ]
            },
            {
              "id": 6,
              "label": "items = data",
              "successors": [
                7
              ]
            },
            {
              "id": 7,
              "label": "if isinstance(items, dict):",
              "successors": [
                8,
                10
              ]
            },
            {
              "id": 8,
              "label": "for item in items.values():\nyield \"item\", item\nyield \"key\", item",
              "successors": [
                8
              ]
            },
            {
              "id": 10,
              "label": "for index, item in enumerate(items):\nyield \"item\", item\nyield \"key\", index",
              "successors": [
                10
              ]
            },
            {
              "id": 12,
              "label": "return BlockOutput()",
              "successors": []
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 9,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        items: list = SchemaField(\n            advanced=False,\n            description=\"The list or dictionary of items to iterate over\",\n            placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\",\n            default=[],\n        )\n        items_object: dict = SchemaField(\n            advanced=False,\n            description=\"The list or dictionary of items to iterate over\",\n            placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\",\n            default={},\n        )\n        items_str: str = SchemaField(\n            advanced=False,\n            description=\"The list or dictionary of items to iterate over\",\n            placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\",\n            default=\"\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):\nitems: list = SchemaField(\n    advanced=False,\n    description=\"The list or dictionary of items to iterate over\",\n    placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\",\n    default=[],\n)\nitems_object: dict = SchemaField(\n    advanced=False,\n    description=\"The list or dictionary of items to iterate over\",\n    placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\",\n    default={},\n)\nitems_str: str = SchemaField(\n    advanced=False,\n    description=\"The list or dictionary of items to iterate over\",\n    placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\",\n    default=\"\",\n)",
              "successors": []
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 29,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        item: Any = SchemaField(description=\"The current item in the iteration\")\n        key: Any = SchemaField(\n            description=\"The key or index of the current item in the iteration\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):\nitem: Any = SchemaField(description=\"The current item in the iteration\")",
              "successors": [
                3
              ]
            },
            {
              "id": 3,
              "label": "key: Any = SchemaField(description=\"The key or index of the current item in the iteration\")",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class StepThroughItemsBlock(Block):\n        )\n\n        )\n\n        )\n\n                    yield \"key\", index",
      "blocks": [
        {
          "id": 1,
          "label": "class StepThroughItemsBlock(Block):\nyield \"key\", index",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.json import json\n\n\n                    yield \"key\", index",
  "blocks": [
    {
      "id": 1,
      "label": "from typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.json import json\n\n\n                    yield \"key\", index",
      "successors": []
    }
  ]
}