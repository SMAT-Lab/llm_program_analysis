[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 21,
    "children": [
      {
        "decl_name": "is_github_url",
        "start_line": 17,
        "end_line": 18,
        "children": [],
        "code": "def is_github_url(url: str) -> bool:\n    return urlparse(url).netloc == \"github.com\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "is_github_url_1",
              "code": "def is_github_url(url: str) -> bool:\n    return urlparse(url).netloc == \"github.com\"\n"
            }
          ],
          "edges": []
        }
      }
    ],
    "code": "from urllib.parse import urlparse\n\nfrom typing_extensions import TypedDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\nfrom ._api import get_api\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n\n\n\n\n# --8<-- [start:GithubCommentBlockExample]\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from urllib.parse import urlparse\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from typing_extensions import TypedDict\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "from ._api import get_api\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "from ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n"
        },
        {
          "id": "GlobalBlock_6",
          "code": "# --8<-- [start:GithubCommentBlockExample]\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        },
        {
          "from": "GlobalBlock_5",
          "to": "GlobalBlock_6"
        }
      ]
    }
  },
  {
    "decl_name": "GithubCommentBlock",
    "start_line": 22,
    "end_line": 107,
    "children": [
      {
        "decl_name": "GithubCommentBlock.Input",
        "start_line": 23,
        "end_line": 32,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue or pull request\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        comment: str = SchemaField(\n            description=\"Comment to post on the issue or pull request\",\n            placeholder=\"Enter your comment\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubCommentBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubCommentBlock.Input_2",
              "code": "        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue or pull request\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n"
            },
            {
              "id": "GithubCommentBlock.Input_3",
              "code": "        comment: str = SchemaField(\n            description=\"Comment to post on the issue or pull request\",\n            placeholder=\"Enter your comment\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubCommentBlock.Input_1",
              "to": "GithubCommentBlock.Input_2"
            },
            {
              "from": "GithubCommentBlock.Input_2",
              "to": "GithubCommentBlock.Input_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubCommentBlock.Output",
        "start_line": 34,
        "end_line": 39,
        "children": [],
        "code": "    class Output(BlockSchema):\n        id: int = SchemaField(description=\"ID of the created comment\")\n        url: str = SchemaField(description=\"URL to the comment on GitHub\")\n        error: str = SchemaField(\n            description=\"Error message if the comment posting failed\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubCommentBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "GithubCommentBlock.Output_2",
              "code": "        id: int = SchemaField(description=\"ID of the created comment\")\n"
            },
            {
              "id": "GithubCommentBlock.Output_3",
              "code": "        url: str = SchemaField(description=\"URL to the comment on GitHub\")\n"
            },
            {
              "id": "GithubCommentBlock.Output_4",
              "code": "        error: str = SchemaField(\n            description=\"Error message if the comment posting failed\"\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubCommentBlock.Output_1",
              "to": "GithubCommentBlock.Output_2"
            },
            {
              "from": "GithubCommentBlock.Output_2",
              "to": "GithubCommentBlock.Output_3"
            },
            {
              "from": "GithubCommentBlock.Output_3",
              "to": "GithubCommentBlock.Output_4"
            }
          ]
        }
      },
      {
        "decl_name": "GithubCommentBlock.__init__",
        "start_line": 41,
        "end_line": 76,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"a8db4d8d-db1c-4a25-a1b0-416a8c33602b\",\n            description=\"This block posts a comment on a specified GitHub issue or pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubCommentBlock.Input,\n            output_schema=GithubCommentBlock.Output,\n            test_input=[\n                {\n                    \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                    \"comment\": \"This is a test comment.\",\n                    \"credentials\": TEST_CREDENTIALS_INPUT,\n                },\n                {\n                    \"issue_url\": \"https://github.com/owner/repo/pull/1\",\n                    \"comment\": \"This is a test comment.\",\n                    \"credentials\": TEST_CREDENTIALS_INPUT,\n                },\n            ],\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"id\", 1337),\n                (\"url\", \"https://github.com/owner/repo/issues/1#issuecomment-1337\"),\n                (\"id\", 1337),\n                (\n                    \"url\",\n                    \"https://github.com/owner/repo/issues/1#issuecomment-1337\",\n                ),\n            ],\n            test_mock={\n                \"post_comment\": lambda *args, **kwargs: (\n                    1337,\n                    \"https://github.com/owner/repo/issues/1#issuecomment-1337\",\n                )\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubCommentBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"a8db4d8d-db1c-4a25-a1b0-416a8c33602b\",\n            description=\"This block posts a comment on a specified GitHub issue or pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubCommentBlock.Input,\n            output_schema=GithubCommentBlock.Output,\n            test_input=[\n                {\n                    \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                    \"comment\": \"This is a test comment.\",\n                    \"credentials\": TEST_CREDENTIALS_INPUT,\n                },\n                {\n                    \"issue_url\": \"https://github.com/owner/repo/pull/1\",\n                    \"comment\": \"This is a test comment.\",\n                    \"credentials\": TEST_CREDENTIALS_INPUT,\n                },\n            ],\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"id\", 1337),\n                (\"url\", \"https://github.com/owner/repo/issues/1#issuecomment-1337\"),\n                (\"id\", 1337),\n                (\n                    \"url\",\n                    \"https://github.com/owner/repo/issues/1#issuecomment-1337\",\n                ),\n            ],\n            test_mock={\n                \"post_comment\": lambda *args, **kwargs: (\n                    1337,\n                    \"https://github.com/owner/repo/issues/1#issuecomment-1337\",\n                )\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubCommentBlock.post_comment",
        "start_line": 78,
        "end_line": 89,
        "children": [],
        "code": "    @staticmethod\n    def post_comment(\n        credentials: GithubCredentials, issue_url: str, body_text: str\n    ) -> tuple[int, str]:\n        api = get_api(credentials)\n        data = {\"body\": body_text}\n        if \"pull\" in issue_url:\n            issue_url = issue_url.replace(\"pull\", \"issues\")\n        comments_url = issue_url + \"/comments\"\n        response = api.post(comments_url, json=data)\n        comment = response.json()\n        return comment[\"id\"], comment[\"html_url\"]\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubCommentBlock.post_comment_1",
              "code": "@staticmethod\n    def post_comment(\n        credentials: GithubCredentials, issue_url: str, body_text: str\n    ) -> tuple[int, str]:\n"
            },
            {
              "id": "GithubCommentBlock.post_comment_2",
              "code": "        api = get_api(credentials)\n        data = {\"body\": body_text}\n"
            },
            {
              "id": "GithubCommentBlock.post_comment_3",
              "code": "        if \"pull\" in issue_url:\n            issue_url = issue_url.replace(\"pull\", \"issues\")\n"
            },
            {
              "id": "GithubCommentBlock.post_comment_4",
              "code": "        comments_url = issue_url + \"/comments\"\n        response = api.post(comments_url, json=data)\n"
            },
            {
              "id": "GithubCommentBlock.post_comment_5",
              "code": "        comment = response.json()\n        return comment[\"id\"], comment[\"html_url\"]\n"
            }
          ],
          "edges": [
            {
              "from": "GithubCommentBlock.post_comment_1",
              "to": "GithubCommentBlock.post_comment_2"
            },
            {
              "from": "GithubCommentBlock.post_comment_2",
              "to": "GithubCommentBlock.post_comment_3"
            },
            {
              "from": "GithubCommentBlock.post_comment_3",
              "to": "GithubCommentBlock.post_comment_4"
            },
            {
              "from": "GithubCommentBlock.post_comment_4",
              "to": "GithubCommentBlock.post_comment_5"
            }
          ]
        }
      },
      {
        "decl_name": "GithubCommentBlock.run",
        "start_line": 91,
        "end_line": 104,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        id, url = self.post_comment(\n            credentials,\n            input_data.issue_url,\n            input_data.comment,\n        )\n        yield \"id\", id\n        yield \"url\", url\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubCommentBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubCommentBlock.run_2",
              "code": "        id, url = self.post_comment(\n            credentials,\n            input_data.issue_url,\n            input_data.comment,\n        )\n"
            },
            {
              "id": "GithubCommentBlock.run_3",
              "code": "        yield \"id\", id\n        yield \"url\", url\n"
            }
          ],
          "edges": [
            {
              "from": "GithubCommentBlock.run_1",
              "to": "GithubCommentBlock.run_2"
            },
            {
              "from": "GithubCommentBlock.run_2",
              "to": "GithubCommentBlock.run_3"
            }
          ]
        }
      }
    ],
    "code": "class GithubCommentBlock(Block):\n\n\n\n\n\n\n# --8<-- [end:GithubCommentBlockExample]\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubCommentBlock_1",
          "code": "class GithubCommentBlock(Block):\n\n\n\n\n\n\n# --8<-- [end:GithubCommentBlockExample]\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubMakeIssueBlock",
    "start_line": 110,
    "end_line": 183,
    "children": [
      {
        "decl_name": "GithubMakeIssueBlock.Input",
        "start_line": 111,
        "end_line": 122,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        title: str = SchemaField(\n            description=\"Title of the issue\", placeholder=\"Enter the issue title\"\n        )\n        body: str = SchemaField(\n            description=\"Body of the issue\", placeholder=\"Enter the issue body\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubMakeIssueBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "GithubMakeIssueBlock.Input_2",
              "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubMakeIssueBlock.Input_3",
              "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
            },
            {
              "id": "GithubMakeIssueBlock.Input_4",
              "code": "        title: str = SchemaField(\n            description=\"Title of the issue\", placeholder=\"Enter the issue title\"\n        )\n"
            },
            {
              "id": "GithubMakeIssueBlock.Input_5",
              "code": "        body: str = SchemaField(\n            description=\"Body of the issue\", placeholder=\"Enter the issue body\"\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubMakeIssueBlock.Input_1",
              "to": "GithubMakeIssueBlock.Input_2"
            },
            {
              "from": "GithubMakeIssueBlock.Input_2",
              "to": "GithubMakeIssueBlock.Input_3"
            },
            {
              "from": "GithubMakeIssueBlock.Input_3",
              "to": "GithubMakeIssueBlock.Input_4"
            },
            {
              "from": "GithubMakeIssueBlock.Input_4",
              "to": "GithubMakeIssueBlock.Input_5"
            }
          ]
        }
      },
      {
        "decl_name": "GithubMakeIssueBlock.Output",
        "start_line": 124,
        "end_line": 129,
        "children": [],
        "code": "    class Output(BlockSchema):\n        number: int = SchemaField(description=\"Number of the created issue\")\n        url: str = SchemaField(description=\"URL of the created issue\")\n        error: str = SchemaField(\n            description=\"Error message if the issue creation failed\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubMakeIssueBlock.Output_1",
              "code": "class Output(BlockSchema):\n        number: int = SchemaField(description=\"Number of the created issue\")\n        url: str = SchemaField(description=\"URL of the created issue\")\n        error: str = SchemaField(\n            description=\"Error message if the issue creation failed\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubMakeIssueBlock.__init__",
        "start_line": 131,
        "end_line": 155,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"691dad47-f494-44c3-a1e8-05b7990f2dab\",\n            description=\"This block creates a new issue on a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakeIssueBlock.Input,\n            output_schema=GithubMakeIssueBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"title\": \"Test Issue\",\n                \"body\": \"This is a test issue.\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"number\", 1),\n                (\"url\", \"https://github.com/owner/repo/issues/1\"),\n            ],\n            test_mock={\n                \"create_issue\": lambda *args, **kwargs: (\n                    1,\n                    \"https://github.com/owner/repo/issues/1\",\n                )\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubMakeIssueBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"691dad47-f494-44c3-a1e8-05b7990f2dab\",\n            description=\"This block creates a new issue on a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakeIssueBlock.Input,\n            output_schema=GithubMakeIssueBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"title\": \"Test Issue\",\n                \"body\": \"This is a test issue.\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"number\", 1),\n                (\"url\", \"https://github.com/owner/repo/issues/1\"),\n            ],\n            test_mock={\n                \"create_issue\": lambda *args, **kwargs: (\n                    1,\n                    \"https://github.com/owner/repo/issues/1\",\n                )\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubMakeIssueBlock.create_issue",
        "start_line": 157,
        "end_line": 166,
        "children": [],
        "code": "    @staticmethod\n    def create_issue(\n        credentials: GithubCredentials, repo_url: str, title: str, body: str\n    ) -> tuple[int, str]:\n        api = get_api(credentials)\n        data = {\"title\": title, \"body\": body}\n        issues_url = repo_url + \"/issues\"\n        response = api.post(issues_url, json=data)\n        issue = response.json()\n        return issue[\"number\"], issue[\"html_url\"]\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubMakeIssueBlock.create_issue_1",
              "code": "@staticmethod\n    def create_issue(\n        credentials: GithubCredentials, repo_url: str, title: str, body: str\n    ) -> tuple[int, str]:\n"
            },
            {
              "id": "GithubMakeIssueBlock.create_issue_2",
              "code": "        api = get_api(credentials)\n        data = {\"title\": title, \"body\": body}\n        issues_url = repo_url + \"/issues\"\n        response = api.post(issues_url, json=data)\n        issue = response.json()\n        return issue[\"number\"], issue[\"html_url\"]\n"
            }
          ],
          "edges": [
            {
              "from": "GithubMakeIssueBlock.create_issue_1",
              "to": "GithubMakeIssueBlock.create_issue_2"
            }
          ]
        }
      },
      {
        "decl_name": "GithubMakeIssueBlock.run",
        "start_line": 168,
        "end_line": 182,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        number, url = self.create_issue(\n            credentials,\n            input_data.repo_url,\n            input_data.title,\n            input_data.body,\n        )\n        yield \"number\", number\n        yield \"url\", url\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubMakeIssueBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubMakeIssueBlock.run_2",
              "code": "        number, url = self.create_issue(\n            credentials,\n            input_data.repo_url,\n            input_data.title,\n            input_data.body,\n        )\n"
            },
            {
              "id": "GithubMakeIssueBlock.run_3",
              "code": "        yield \"number\", number\n        yield \"url\", url\n"
            }
          ],
          "edges": [
            {
              "from": "GithubMakeIssueBlock.run_1",
              "to": "GithubMakeIssueBlock.run_2"
            },
            {
              "from": "GithubMakeIssueBlock.run_2",
              "to": "GithubMakeIssueBlock.run_3"
            }
          ]
        }
      }
    ],
    "code": "class GithubMakeIssueBlock(Block):\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubMakeIssueBlock_1",
          "code": "class GithubMakeIssueBlock(Block):\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubReadIssueBlock",
    "start_line": 185,
    "end_line": 257,
    "children": [
      {
        "decl_name": "GithubReadIssueBlock.Input",
        "start_line": 186,
        "end_line": 191,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadIssueBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubReadIssueBlock.Input_2",
              "code": "        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubReadIssueBlock.Input_1",
              "to": "GithubReadIssueBlock.Input_2"
            }
          ]
        }
      },
      {
        "decl_name": "GithubReadIssueBlock.Output",
        "start_line": 193,
        "end_line": 199,
        "children": [],
        "code": "    class Output(BlockSchema):\n        title: str = SchemaField(description=\"Title of the issue\")\n        body: str = SchemaField(description=\"Body of the issue\")\n        user: str = SchemaField(description=\"User who created the issue\")\n        error: str = SchemaField(\n            description=\"Error message if reading the issue failed\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadIssueBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "GithubReadIssueBlock.Output_2",
              "code": "        title: str = SchemaField(description=\"Title of the issue\")\n        body: str = SchemaField(description=\"Body of the issue\")\n        user: str = SchemaField(description=\"User who created the issue\")\n"
            },
            {
              "id": "GithubReadIssueBlock.Output_3",
              "code": "        error: str = SchemaField(\n            description=\"Error message if reading the issue failed\"\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubReadIssueBlock.Output_1",
              "to": "GithubReadIssueBlock.Output_2"
            },
            {
              "from": "GithubReadIssueBlock.Output_2",
              "to": "GithubReadIssueBlock.Output_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubReadIssueBlock.__init__",
        "start_line": 201,
        "end_line": 225,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"6443c75d-032a-4772-9c08-230c707c8acc\",\n            description=\"This block reads the body, title, and user of a specified GitHub issue.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadIssueBlock.Input,\n            output_schema=GithubReadIssueBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"title\", \"Title of the issue\"),\n                (\"body\", \"This is the body of the issue.\"),\n                (\"user\", \"username\"),\n            ],\n            test_mock={\n                \"read_issue\": lambda *args, **kwargs: (\n                    \"Title of the issue\",\n                    \"This is the body of the issue.\",\n                    \"username\",\n                )\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadIssueBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"6443c75d-032a-4772-9c08-230c707c8acc\",\n            description=\"This block reads the body, title, and user of a specified GitHub issue.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadIssueBlock.Input,\n            output_schema=GithubReadIssueBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"title\", \"Title of the issue\"),\n                (\"body\", \"This is the body of the issue.\"),\n                (\"user\", \"username\"),\n            ],\n            test_mock={\n                \"read_issue\": lambda *args, **kwargs: (\n                    \"Title of the issue\",\n                    \"This is the body of the issue.\",\n                    \"username\",\n                )\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubReadIssueBlock.read_issue",
        "start_line": 227,
        "end_line": 237,
        "children": [],
        "code": "    @staticmethod\n    def read_issue(\n        credentials: GithubCredentials, issue_url: str\n    ) -> tuple[str, str, str]:\n        api = get_api(credentials)\n        response = api.get(issue_url)\n        data = response.json()\n        title = data.get(\"title\", \"No title found\")\n        body = data.get(\"body\", \"No body content found\")\n        user = data.get(\"user\", {}).get(\"login\", \"No user found\")\n        return title, body, user\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadIssueBlock.read_issue_1",
              "code": "@staticmethod\n    def read_issue(\n        credentials: GithubCredentials, issue_url: str\n    ) -> tuple[str, str, str]:\n"
            },
            {
              "id": "GithubReadIssueBlock.read_issue_2",
              "code": "        api = get_api(credentials)\n        response = api.get(issue_url)\n        data = response.json()\n"
            },
            {
              "id": "GithubReadIssueBlock.read_issue_3",
              "code": "        title = data.get(\"title\", \"No title found\")\n        body = data.get(\"body\", \"No body content found\")\n        user = data.get(\"user\", {}).get(\"login\", \"No user found\")\n"
            },
            {
              "id": "GithubReadIssueBlock.read_issue_4",
              "code": "        return title, body, user\n"
            }
          ],
          "edges": [
            {
              "from": "GithubReadIssueBlock.read_issue_1",
              "to": "GithubReadIssueBlock.read_issue_2"
            },
            {
              "from": "GithubReadIssueBlock.read_issue_2",
              "to": "GithubReadIssueBlock.read_issue_3"
            },
            {
              "from": "GithubReadIssueBlock.read_issue_3",
              "to": "GithubReadIssueBlock.read_issue_4"
            }
          ]
        }
      },
      {
        "decl_name": "GithubReadIssueBlock.run",
        "start_line": 239,
        "end_line": 255,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        title, body, user = self.read_issue(\n            credentials,\n            input_data.issue_url,\n        )\n        if title:\n            yield \"title\", title\n        if body:\n            yield \"body\", body\n        if user:\n            yield \"user\", user\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadIssueBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubReadIssueBlock.run_2",
              "code": "        title, body, user = self.read_issue(\n            credentials,\n            input_data.issue_url,\n        )\n"
            },
            {
              "id": "GithubReadIssueBlock.run_3",
              "code": "        if title:\n            yield \"title\", title\n"
            },
            {
              "id": "GithubReadIssueBlock.run_4",
              "code": "        if body:\n            yield \"body\", body\n"
            },
            {
              "id": "GithubReadIssueBlock.run_5",
              "code": "        if user:\n            yield \"user\", user\n"
            }
          ],
          "edges": [
            {
              "from": "GithubReadIssueBlock.run_1",
              "to": "GithubReadIssueBlock.run_2"
            },
            {
              "from": "GithubReadIssueBlock.run_2",
              "to": "GithubReadIssueBlock.run_3"
            },
            {
              "from": "GithubReadIssueBlock.run_2",
              "to": "GithubReadIssueBlock.run_4"
            },
            {
              "from": "GithubReadIssueBlock.run_2",
              "to": "GithubReadIssueBlock.run_5"
            },
            {
              "from": "GithubReadIssueBlock.run_3",
              "to": "GithubReadIssueBlock.run_4"
            },
            {
              "from": "GithubReadIssueBlock.run_3",
              "to": "GithubReadIssueBlock.run_5"
            },
            {
              "from": "GithubReadIssueBlock.run_4",
              "to": "GithubReadIssueBlock.run_5"
            }
          ]
        }
      }
    ],
    "code": "class GithubReadIssueBlock(Block):\n\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubReadIssueBlock_1",
          "code": "class GithubReadIssueBlock(Block):\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubListIssuesBlock",
    "start_line": 258,
    "end_line": 333,
    "children": [
      {
        "decl_name": "GithubListIssuesBlock.Input",
        "start_line": 259,
        "end_line": 264,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListIssuesBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubListIssuesBlock.Output",
        "start_line": 266,
        "end_line": 274,
        "children": [
          {
            "decl_name": "GithubListIssuesBlock.Output.IssueItem",
            "start_line": 267,
            "end_line": 269,
            "children": [],
            "code": "        class IssueItem(TypedDict):\n            title: str\n            url: str\n",
            "cfg": {
              "nodes": [
                {
                  "id": "GithubListIssuesBlock.Output.IssueItem_1",
                  "code": "class IssueItem(TypedDict):\n            title: str\n            url: str\n"
                }
              ],
              "edges": []
            }
          }
        ],
        "code": "    class Output(BlockSchema):\n\n        issue: IssueItem = SchemaField(\n            title=\"Issue\", description=\"Issues with their title and URL\"\n        )\n        error: str = SchemaField(description=\"Error message if listing issues failed\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListIssuesBlock.Output_1",
              "code": "class Output(BlockSchema):\n\n"
            },
            {
              "id": "GithubListIssuesBlock.Output_2",
              "code": "        issue: IssueItem = SchemaField(\n            title=\"Issue\", description=\"Issues with their title and URL\"\n        )\n"
            },
            {
              "id": "GithubListIssuesBlock.Output_3",
              "code": "        error: str = SchemaField(description=\"Error message if listing issues failed\")\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListIssuesBlock.Output_1",
              "to": "GithubListIssuesBlock.Output_2"
            },
            {
              "from": "GithubListIssuesBlock.Output_2",
              "to": "GithubListIssuesBlock.Output_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListIssuesBlock.__init__",
        "start_line": 276,
        "end_line": 305,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"c215bfd7-0e57-4573-8f8c-f7d4963dcd74\",\n            description=\"This block lists all issues for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListIssuesBlock.Input,\n            output_schema=GithubListIssuesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"issue\",\n                    {\n                        \"title\": \"Issue 1\",\n                        \"url\": \"https://github.com/owner/repo/issues/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_issues\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Issue 1\",\n                        \"url\": \"https://github.com/owner/repo/issues/1\",\n                    }\n                ]\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListIssuesBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"c215bfd7-0e57-4573-8f8c-f7d4963dcd74\",\n            description=\"This block lists all issues for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListIssuesBlock.Input,\n            output_schema=GithubListIssuesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"issue\",\n                    {\n                        \"title\": \"Issue 1\",\n                        \"url\": \"https://github.com/owner/repo/issues/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_issues\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Issue 1\",\n                        \"url\": \"https://github.com/owner/repo/issues/1\",\n                    }\n                ]\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubListIssuesBlock.list_issues",
        "start_line": 308,
        "end_line": 318,
        "children": [],
        "code": "    def list_issues(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.IssueItem]:\n        api = get_api(credentials)\n        issues_url = repo_url + \"/issues\"\n        response = api.get(issues_url)\n        data = response.json()\n        issues: list[GithubListIssuesBlock.Output.IssueItem] = [\n            {\"title\": issue[\"title\"], \"url\": issue[\"html_url\"]} for issue in data\n        ]\n        return issues\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListIssuesBlock.list_issues_1",
              "code": "def list_issues(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.IssueItem]:\n"
            },
            {
              "id": "GithubListIssuesBlock.list_issues_2",
              "code": "        api = get_api(credentials)\n        issues_url = repo_url + \"/issues\"\n        response = api.get(issues_url)\n        data = response.json()\n"
            },
            {
              "id": "GithubListIssuesBlock.list_issues_3",
              "code": "        issues: list[GithubListIssuesBlock.Output.IssueItem] = [\n            {\"title\": issue[\"title\"], \"url\": issue[\"html_url\"]} for issue in data\n        ]\n"
            },
            {
              "id": "GithubListIssuesBlock.list_issues_4",
              "code": "        return issues\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListIssuesBlock.list_issues_1",
              "to": "GithubListIssuesBlock.list_issues_2"
            },
            {
              "from": "GithubListIssuesBlock.list_issues_2",
              "to": "GithubListIssuesBlock.list_issues_3"
            },
            {
              "from": "GithubListIssuesBlock.list_issues_3",
              "to": "GithubListIssuesBlock.list_issues_4"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListIssuesBlock.run",
        "start_line": 320,
        "end_line": 331,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        issues = self.list_issues(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"issue\", issue) for issue in issues)\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListIssuesBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubListIssuesBlock.run_2",
              "code": "        issues = self.list_issues(\n            credentials,\n            input_data.repo_url,\n        )\n"
            },
            {
              "id": "GithubListIssuesBlock.run_3",
              "code": "        yield from ((\"issue\", issue) for issue in issues)\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListIssuesBlock.run_1",
              "to": "GithubListIssuesBlock.run_2"
            },
            {
              "from": "GithubListIssuesBlock.run_2",
              "to": "GithubListIssuesBlock.run_3"
            }
          ]
        }
      }
    ],
    "code": "class GithubListIssuesBlock(Block):\n\n\n\n    @staticmethod\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubListIssuesBlock_1",
          "code": "class GithubListIssuesBlock(Block):\n"
        },
        {
          "id": "GithubListIssuesBlock_2",
          "code": "    @staticmethod\n"
        }
      ],
      "edges": [
        {
          "from": "GithubListIssuesBlock_1",
          "to": "GithubListIssuesBlock_2"
        }
      ]
    }
  },
  {
    "decl_name": "GithubAddLabelBlock",
    "start_line": 334,
    "end_line": 391,
    "children": [
      {
        "decl_name": "GithubAddLabelBlock.Input",
        "start_line": 335,
        "end_line": 344,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue or pull request\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        label: str = SchemaField(\n            description=\"Label to add to the issue or pull request\",\n            placeholder=\"Enter the label\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubAddLabelBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubAddLabelBlock.Input_2",
              "code": "        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue or pull request\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n"
            },
            {
              "id": "GithubAddLabelBlock.Input_3",
              "code": "        label: str = SchemaField(\n            description=\"Label to add to the issue or pull request\",\n            placeholder=\"Enter the label\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubAddLabelBlock.Input_1",
              "to": "GithubAddLabelBlock.Input_2"
            },
            {
              "from": "GithubAddLabelBlock.Input_2",
              "to": "GithubAddLabelBlock.Input_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubAddLabelBlock.Output",
        "start_line": 346,
        "end_line": 350,
        "children": [],
        "code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the label addition operation\")\n        error: str = SchemaField(\n            description=\"Error message if the label addition failed\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubAddLabelBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "GithubAddLabelBlock.Output_2",
              "code": "        status: str = SchemaField(description=\"Status of the label addition operation\")\n        error: str = SchemaField(\n            description=\"Error message if the label addition failed\"\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubAddLabelBlock.Output_1",
              "to": "GithubAddLabelBlock.Output_2"
            }
          ]
        }
      },
      {
        "decl_name": "GithubAddLabelBlock.__init__",
        "start_line": 352,
        "end_line": 367,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"98bd6b77-9506-43d5-b669-6b9733c4b1f1\",\n            description=\"This block adds a label to a specified GitHub issue or pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubAddLabelBlock.Input,\n            output_schema=GithubAddLabelBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"label\": \"bug\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Label added successfully\")],\n            test_mock={\"add_label\": lambda *args, **kwargs: \"Label added successfully\"},\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubAddLabelBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"98bd6b77-9506-43d5-b669-6b9733c4b1f1\",\n            description=\"This block adds a label to a specified GitHub issue or pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubAddLabelBlock.Input,\n            output_schema=GithubAddLabelBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"label\": \"bug\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Label added successfully\")],\n            test_mock={\"add_label\": lambda *args, **kwargs: \"Label added successfully\"},\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubAddLabelBlock.add_label",
        "start_line": 370,
        "end_line": 375,
        "children": [],
        "code": "    def add_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:\n        api = get_api(credentials)\n        data = {\"labels\": [label]}\n        labels_url = issue_url + \"/labels\"\n        api.post(labels_url, json=data)\n        return \"Label added successfully\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubAddLabelBlock.add_label_1",
              "code": "def add_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:\n        api = get_api(credentials)\n        data = {\"labels\": [label]}\n        labels_url = issue_url + \"/labels\"\n        api.post(labels_url, json=data)\n        return \"Label added successfully\"\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubAddLabelBlock.run",
        "start_line": 377,
        "end_line": 389,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.add_label(\n            credentials,\n            input_data.issue_url,\n            input_data.label,\n        )\n        yield \"status\", status\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubAddLabelBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubAddLabelBlock.run_2",
              "code": "        status = self.add_label(\n            credentials,\n            input_data.issue_url,\n            input_data.label,\n        )\n"
            },
            {
              "id": "GithubAddLabelBlock.run_3",
              "code": "        yield \"status\", status\n"
            }
          ],
          "edges": [
            {
              "from": "GithubAddLabelBlock.run_1",
              "to": "GithubAddLabelBlock.run_2"
            },
            {
              "from": "GithubAddLabelBlock.run_2",
              "to": "GithubAddLabelBlock.run_3"
            }
          ]
        }
      }
    ],
    "code": "class GithubAddLabelBlock(Block):\n\n\n\n    @staticmethod\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubAddLabelBlock_1",
          "code": "class GithubAddLabelBlock(Block):\n"
        },
        {
          "id": "GithubAddLabelBlock_2",
          "code": "    @staticmethod\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubRemoveLabelBlock",
    "start_line": 392,
    "end_line": 450,
    "children": [
      {
        "decl_name": "GithubRemoveLabelBlock.Input",
        "start_line": 393,
        "end_line": 402,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue or pull request\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        label: str = SchemaField(\n            description=\"Label to remove from the issue or pull request\",\n            placeholder=\"Enter the label\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubRemoveLabelBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubRemoveLabelBlock.Input_2",
              "code": "        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue or pull request\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n"
            },
            {
              "id": "GithubRemoveLabelBlock.Input_3",
              "code": "        label: str = SchemaField(\n            description=\"Label to remove from the issue or pull request\",\n            placeholder=\"Enter the label\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubRemoveLabelBlock.Input_1",
              "to": "GithubRemoveLabelBlock.Input_2"
            },
            {
              "from": "GithubRemoveLabelBlock.Input_2",
              "to": "GithubRemoveLabelBlock.Input_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubRemoveLabelBlock.Output",
        "start_line": 404,
        "end_line": 408,
        "children": [],
        "code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the label removal operation\")\n        error: str = SchemaField(\n            description=\"Error message if the label removal failed\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubRemoveLabelBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "GithubRemoveLabelBlock.Output_2",
              "code": "        status: str = SchemaField(description=\"Status of the label removal operation\")\n        error: str = SchemaField(\n            description=\"Error message if the label removal failed\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubRemoveLabelBlock.__init__",
        "start_line": 410,
        "end_line": 427,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"78f050c5-3e3a-48c0-9e5b-ef1ceca5589c\",\n            description=\"This block removes a label from a specified GitHub issue or pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubRemoveLabelBlock.Input,\n            output_schema=GithubRemoveLabelBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"label\": \"bug\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Label removed successfully\")],\n            test_mock={\n                \"remove_label\": lambda *args, **kwargs: \"Label removed successfully\"\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubRemoveLabelBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"78f050c5-3e3a-48c0-9e5b-ef1ceca5589c\",\n            description=\"This block removes a label from a specified GitHub issue or pull request.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubRemoveLabelBlock.Input,\n            output_schema=GithubRemoveLabelBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"label\": \"bug\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Label removed successfully\")],\n            test_mock={\n                \"remove_label\": lambda *args, **kwargs: \"Label removed successfully\"\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubRemoveLabelBlock.remove_label",
        "start_line": 430,
        "end_line": 434,
        "children": [],
        "code": "    def remove_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:\n        api = get_api(credentials)\n        label_url = issue_url + f\"/labels/{label}\"\n        api.delete(label_url)\n        return \"Label removed successfully\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubRemoveLabelBlock.remove_label_1",
              "code": "def remove_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:\n"
            },
            {
              "id": "GithubRemoveLabelBlock.remove_label_2",
              "code": "        api = get_api(credentials)\n        label_url = issue_url + f\"/labels/{label}\"\n        api.delete(label_url)\n        return \"Label removed successfully\"\n"
            }
          ],
          "edges": [
            {
              "from": "GithubRemoveLabelBlock.remove_label_1",
              "to": "GithubRemoveLabelBlock.remove_label_2"
            }
          ]
        }
      },
      {
        "decl_name": "GithubRemoveLabelBlock.run",
        "start_line": 436,
        "end_line": 448,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.remove_label(\n            credentials,\n            input_data.issue_url,\n            input_data.label,\n        )\n        yield \"status\", status\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubRemoveLabelBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubRemoveLabelBlock.run_2",
              "code": "        status = self.remove_label(\n            credentials,\n            input_data.issue_url,\n            input_data.label,\n        )\n"
            },
            {
              "id": "GithubRemoveLabelBlock.run_3",
              "code": "        yield \"status\", status\n"
            }
          ],
          "edges": [
            {
              "from": "GithubRemoveLabelBlock.run_1",
              "to": "GithubRemoveLabelBlock.run_2"
            },
            {
              "from": "GithubRemoveLabelBlock.run_2",
              "to": "GithubRemoveLabelBlock.run_3"
            }
          ]
        }
      }
    ],
    "code": "class GithubRemoveLabelBlock(Block):\n\n\n\n    @staticmethod\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubRemoveLabelBlock_1",
          "code": "class GithubRemoveLabelBlock(Block):\n"
        },
        {
          "id": "GithubRemoveLabelBlock_2",
          "code": "    @staticmethod\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubAssignIssueBlock",
    "start_line": 451,
    "end_line": 516,
    "children": [
      {
        "decl_name": "GithubAssignIssueBlock.Input",
        "start_line": 452,
        "end_line": 461,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        assignee: str = SchemaField(\n            description=\"Username to assign to the issue\",\n            placeholder=\"Enter the username\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubAssignIssueBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubAssignIssueBlock.Input_2",
              "code": "        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n"
            },
            {
              "id": "GithubAssignIssueBlock.Input_3",
              "code": "        assignee: str = SchemaField(\n            description=\"Username to assign to the issue\",\n            placeholder=\"Enter the username\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubAssignIssueBlock.Input_1",
              "to": "GithubAssignIssueBlock.Input_2"
            },
            {
              "from": "GithubAssignIssueBlock.Input_2",
              "to": "GithubAssignIssueBlock.Input_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubAssignIssueBlock.Output",
        "start_line": 463,
        "end_line": 469,
        "children": [],
        "code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the issue assignment operation\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the issue assignment failed\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubAssignIssueBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "GithubAssignIssueBlock.Output_2",
              "code": "        status: str = SchemaField(\n            description=\"Status of the issue assignment operation\"\n        )\n"
            },
            {
              "id": "GithubAssignIssueBlock.Output_3",
              "code": "        error: str = SchemaField(\n            description=\"Error message if the issue assignment failed\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubAssignIssueBlock.__init__",
        "start_line": 471,
        "end_line": 488,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"90507c72-b0ff-413a-886a-23bbbd66f542\",\n            description=\"This block assigns a user to a specified GitHub issue.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubAssignIssueBlock.Input,\n            output_schema=GithubAssignIssueBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"assignee\": \"username1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Issue assigned successfully\")],\n            test_mock={\n                \"assign_issue\": lambda *args, **kwargs: \"Issue assigned successfully\"\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubAssignIssueBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"90507c72-b0ff-413a-886a-23bbbd66f542\",\n            description=\"This block assigns a user to a specified GitHub issue.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubAssignIssueBlock.Input,\n            output_schema=GithubAssignIssueBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"assignee\": \"username1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Issue assigned successfully\")],\n            test_mock={\n                \"assign_issue\": lambda *args, **kwargs: \"Issue assigned successfully\"\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubAssignIssueBlock.assign_issue",
        "start_line": 491,
        "end_line": 500,
        "children": [],
        "code": "    def assign_issue(\n        credentials: GithubCredentials,\n        issue_url: str,\n        assignee: str,\n    ) -> str:\n        api = get_api(credentials)\n        assignees_url = issue_url + \"/assignees\"\n        data = {\"assignees\": [assignee]}\n        api.post(assignees_url, json=data)\n        return \"Issue assigned successfully\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubAssignIssueBlock.assign_issue_1",
              "code": "def assign_issue(\n        credentials: GithubCredentials,\n        issue_url: str,\n        assignee: str,\n    ) -> str:\n"
            },
            {
              "id": "GithubAssignIssueBlock.assign_issue_2",
              "code": "        api = get_api(credentials)\n"
            },
            {
              "id": "GithubAssignIssueBlock.assign_issue_3",
              "code": "        assignees_url = issue_url + \"/assignees\"\n"
            },
            {
              "id": "GithubAssignIssueBlock.assign_issue_4",
              "code": "        data = {\"assignees\": [assignee]}\n"
            },
            {
              "id": "GithubAssignIssueBlock.assign_issue_5",
              "code": "        api.post(assignees_url, json=data)\n"
            },
            {
              "id": "GithubAssignIssueBlock.assign_issue_6",
              "code": "        return \"Issue assigned successfully\"\n"
            }
          ],
          "edges": [
            {
              "from": "GithubAssignIssueBlock.assign_issue_1",
              "to": "GithubAssignIssueBlock.assign_issue_2"
            },
            {
              "from": "GithubAssignIssueBlock.assign_issue_2",
              "to": "GithubAssignIssueBlock.assign_issue_3"
            },
            {
              "from": "GithubAssignIssueBlock.assign_issue_3",
              "to": "GithubAssignIssueBlock.assign_issue_4"
            },
            {
              "from": "GithubAssignIssueBlock.assign_issue_4",
              "to": "GithubAssignIssueBlock.assign_issue_5"
            },
            {
              "from": "GithubAssignIssueBlock.assign_issue_5",
              "to": "GithubAssignIssueBlock.assign_issue_6"
            }
          ]
        }
      },
      {
        "decl_name": "GithubAssignIssueBlock.run",
        "start_line": 502,
        "end_line": 514,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.assign_issue(\n            credentials,\n            input_data.issue_url,\n            input_data.assignee,\n        )\n        yield \"status\", status\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubAssignIssueBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubAssignIssueBlock.run_2",
              "code": "        status = self.assign_issue(\n            credentials,\n            input_data.issue_url,\n            input_data.assignee,\n        )\n"
            },
            {
              "id": "GithubAssignIssueBlock.run_3",
              "code": "        yield \"status\", status\n"
            }
          ],
          "edges": [
            {
              "from": "GithubAssignIssueBlock.run_1",
              "to": "GithubAssignIssueBlock.run_2"
            },
            {
              "from": "GithubAssignIssueBlock.run_2",
              "to": "GithubAssignIssueBlock.run_3"
            }
          ]
        }
      }
    ],
    "code": "class GithubAssignIssueBlock(Block):\n\n\n\n    @staticmethod\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubAssignIssueBlock_1",
          "code": "class GithubAssignIssueBlock(Block):\n"
        },
        {
          "id": "GithubAssignIssueBlock_2",
          "code": "    @staticmethod\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubUnassignIssueBlock",
    "start_line": 517,
    "end_line": 581,
    "children": [
      {
        "decl_name": "GithubUnassignIssueBlock.Input",
        "start_line": 518,
        "end_line": 527,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n        assignee: str = SchemaField(\n            description=\"Username to unassign from the issue\",\n            placeholder=\"Enter the username\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubUnassignIssueBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubUnassignIssueBlock.Input_2",
              "code": "        issue_url: str = SchemaField(\n            description=\"URL of the GitHub issue\",\n            placeholder=\"https://github.com/owner/repo/issues/1\",\n        )\n"
            },
            {
              "id": "GithubUnassignIssueBlock.Input_3",
              "code": "        assignee: str = SchemaField(\n            description=\"Username to unassign from the issue\",\n            placeholder=\"Enter the username\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubUnassignIssueBlock.Input_1",
              "to": "GithubUnassignIssueBlock.Input_2"
            },
            {
              "from": "GithubUnassignIssueBlock.Input_2",
              "to": "GithubUnassignIssueBlock.Input_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubUnassignIssueBlock.Output",
        "start_line": 529,
        "end_line": 535,
        "children": [],
        "code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"Status of the issue unassignment operation\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the issue unassignment failed\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubUnassignIssueBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "GithubUnassignIssueBlock.Output_2",
              "code": "        status: str = SchemaField(\n            description=\"Status of the issue unassignment operation\"\n        )\n"
            },
            {
              "id": "GithubUnassignIssueBlock.Output_3",
              "code": "        error: str = SchemaField(\n            description=\"Error message if the issue unassignment failed\"\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubUnassignIssueBlock.Output_1",
              "to": "GithubUnassignIssueBlock.Output_2"
            },
            {
              "from": "GithubUnassignIssueBlock.Output_1",
              "to": "GithubUnassignIssueBlock.Output_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubUnassignIssueBlock.__init__",
        "start_line": 537,
        "end_line": 554,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"d154002a-38f4-46c2-962d-2488f2b05ece\",\n            description=\"This block unassigns a user from a specified GitHub issue.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubUnassignIssueBlock.Input,\n            output_schema=GithubUnassignIssueBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"assignee\": \"username1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Issue unassigned successfully\")],\n            test_mock={\n                \"unassign_issue\": lambda *args, **kwargs: \"Issue unassigned successfully\"\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubUnassignIssueBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"d154002a-38f4-46c2-962d-2488f2b05ece\",\n            description=\"This block unassigns a user from a specified GitHub issue.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubUnassignIssueBlock.Input,\n            output_schema=GithubUnassignIssueBlock.Output,\n            test_input={\n                \"issue_url\": \"https://github.com/owner/repo/issues/1\",\n                \"assignee\": \"username1\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Issue unassigned successfully\")],\n            test_mock={\n                \"unassign_issue\": lambda *args, **kwargs: \"Issue unassigned successfully\"\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubUnassignIssueBlock.unassign_issue",
        "start_line": 557,
        "end_line": 566,
        "children": [],
        "code": "    def unassign_issue(\n        credentials: GithubCredentials,\n        issue_url: str,\n        assignee: str,\n    ) -> str:\n        api = get_api(credentials)\n        assignees_url = issue_url + \"/assignees\"\n        data = {\"assignees\": [assignee]}\n        api.delete(assignees_url, json=data)\n        return \"Issue unassigned successfully\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubUnassignIssueBlock.unassign_issue_1",
              "code": "def unassign_issue(\n        credentials: GithubCredentials,\n        issue_url: str,\n        assignee: str,\n    ) -> str:\n"
            },
            {
              "id": "GithubUnassignIssueBlock.unassign_issue_2",
              "code": "        api = get_api(credentials)\n        assignees_url = issue_url + \"/assignees\"\n        data = {\"assignees\": [assignee]}\n        api.delete(assignees_url, json=data)\n        return \"Issue unassigned successfully\"\n"
            }
          ],
          "edges": [
            {
              "from": "GithubUnassignIssueBlock.unassign_issue_1",
              "to": "GithubUnassignIssueBlock.unassign_issue_2"
            }
          ]
        }
      },
      {
        "decl_name": "GithubUnassignIssueBlock.run",
        "start_line": 568,
        "end_line": 580,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.unassign_issue(\n            credentials,\n            input_data.issue_url,\n            input_data.assignee,\n        )\n        yield \"status\", status\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubUnassignIssueBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubUnassignIssueBlock.run_2",
              "code": "        status = self.unassign_issue(\n            credentials,\n            input_data.issue_url,\n            input_data.assignee,\n        )\n"
            },
            {
              "id": "GithubUnassignIssueBlock.run_3",
              "code": "        yield \"status\", status\n"
            }
          ],
          "edges": [
            {
              "from": "GithubUnassignIssueBlock.run_1",
              "to": "GithubUnassignIssueBlock.run_2"
            },
            {
              "from": "GithubUnassignIssueBlock.run_2",
              "to": "GithubUnassignIssueBlock.run_3"
            }
          ]
        }
      }
    ],
    "code": "class GithubUnassignIssueBlock(Block):\n\n\n\n    @staticmethod\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubUnassignIssueBlock_1",
          "code": "class GithubUnassignIssueBlock(Block):\n"
        },
        {
          "id": "GithubUnassignIssueBlock_2",
          "code": "    @staticmethod\n"
        }
      ],
      "edges": []
    }
  }
]