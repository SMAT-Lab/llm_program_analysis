{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 95,
  "functions": [],
  "classes": [
    {
      "name": "EmailCredentials",
      "type": "class",
      "start_line": 11,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": "class EmailCredentials(BaseModel):\n    smtp_server: str = SchemaField(\n        default=\"smtp.gmail.com\", description=\"SMTP server address\"\n    )\n    smtp_port: int = SchemaField(default=25, description=\"SMTP port number\")\n    smtp_username: BlockSecret = SecretField(key=\"smtp_username\")\n    smtp_password: BlockSecret = SecretField(key=\"smtp_password\")\n\n    model_config = ConfigDict(title=\"Email Credentials\")",
      "blocks": [
        {
          "id": 1,
          "label": "class EmailCredentials(BaseModel):",
          "successors": [
            {
              "id": 2,
              "label": "smtp_server: str = SchemaField(\n        default=\"smtp.gmail.com\", description=\"SMTP server address\"\n    )",
              "successors": [
                {
                  "id": 3,
                  "label": "smtp_port: int = SchemaField(default=25, description=\"SMTP port number\")",
                  "successors": [
                    {
                      "id": 4,
                      "label": "smtp_username: BlockSecret = SecretField(key=\"smtp_username\")",
                      "successors": [
                        {
                          "id": 5,
                          "label": "smtp_password: BlockSecret = SecretField(key=\"smtp_password\")",
                          "successors": [
                            {
                              "id": 6,
                              "label": "model_config = ConfigDict(title=\"Email Credentials\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "SendEmailBlock",
      "type": "class",
      "start_line": 22,
      "end_line": 95,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 44,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            disabled=True,\n            id=\"4335878a-394e-4e67-adf2-919877ff49ae\",\n            description=\"This block sends an email using the provided SMTP credentials.\",\n            categories={BlockCategory.OUTPUT},\n            input_schema=SendEmailBlock.Input,\n            output_schema=SendEmailBlock.Output,\n            test_input={\n                \"to_email\": \"recipient@example.com\",\n                \"subject\": \"Test Email\",\n                \"body\": \"This is a test email.\",\n                \"creds\": {\n                    \"smtp_server\": \"smtp.gmail.com\",\n                    \"smtp_port\": 25,\n                    \"smtp_username\": \"your-email@gmail.com\",\n                    \"smtp_password\": \"your-gmail-password\",\n                },\n            },\n            test_output=[(\"status\", \"Email sent successfully\")],\n            test_mock={\"send_email\": lambda *args, **kwargs: \"Email sent successfully\"},\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "super().__init__(\n    disabled=True,\n    id=\"4335878a-394e-4e67-adf2-919877ff49ae\",\n    description=\"This block sends an email using the provided SMTP credentials.\",\n    categories={BlockCategory.OUTPUT},\n    input_schema=SendEmailBlock.Input,\n    output_schema=SendEmailBlock.Output,\n    test_input={\n        \"to_email\": \"recipient@example.com\",\n        \"subject\": \"Test Email\",\n        \"body\": \"This is a test email.\",\n        \"creds\": {\n            \"smtp_server\": \"smtp.gmail.com\",\n            \"smtp_port\": 25,\n            \"smtp_username\": \"your-email@gmail.com\",\n            \"smtp_password\": \"your-gmail-password\",\n        },\n    },\n    test_output=[(\"status\", \"Email sent successfully\")],\n    test_mock={\"send_email\": lambda *args, **kwargs: \"Email sent successfully\"},\n)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "send_email",
          "type": "function",
          "start_line": 68,
          "end_line": 87,
          "functions": [],
          "classes": [],
          "simplified_code": "    def send_email(\n        creds: EmailCredentials, to_email: str, subject: str, body: str\n    ) -> str:\n        smtp_server = creds.smtp_server\n        smtp_port = creds.smtp_port\n        smtp_username = creds.smtp_username.get_secret_value()\n        smtp_password = creds.smtp_password.get_secret_value()\n\n        msg = MIMEMultipart()\n        msg[\"From\"] = smtp_username\n        msg[\"To\"] = to_email\n        msg[\"Subject\"] = subject\n        msg.attach(MIMEText(body, \"plain\"))\n\n        with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(smtp_username, smtp_password)\n            server.sendmail(smtp_username, to_email, msg.as_string())\n\n        return \"Email sent successfully\"",
          "blocks": [
            {
              "id": 1,
              "label": "def send_email(\n        creds: EmailCredentials, to_email: str, subject: str, body: str\n    ) -> str:",
              "successors": [
                {
                  "id": 2,
                  "label": "smtp_server = creds.smtp_server\nsmtp_port = creds.smtp_port\nsmtp_username = creds.smtp_username.get_secret_value()\nsmtp_password = creds.smtp_password.get_secret_value()\n\nmsg = MIMEMultipart()\nmsg[\"From\"] = smtp_username\nmsg[\"To\"] = to_email\nmsg[\"Subject\"] = subject\nmsg.attach(MIMEText(body, \"plain\"))",
                  "successors": [
                    {
                      "id": 3,
                      "label": "with smtplib.SMTP(smtp_server, smtp_port) as server:",
                      "successors": [
                        {
                          "id": 4,
                          "label": "server.starttls()\nserver.login(smtp_username, smtp_password)\nserver.sendmail(smtp_username, to_email, msg.as_string())",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "return \"Email sent successfully\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 89,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"status\", self.send_email(\n            input_data.creds,\n            input_data.to_email,\n            input_data.subject,\n            input_data.body,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "label": "yield \"status\", self.send_email(input_data.creds, input_data.to_email, input_data.subject, input_data.body)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 23,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        to_email: str = SchemaField(\n            description=\"Recipient email address\", placeholder=\"recipient@example.com\"\n        )\n        subject: str = SchemaField(\n            description=\"Subject of the email\", placeholder=\"Enter the email subject\"\n        )\n        body: str = SchemaField(\n            description=\"Body of the email\", placeholder=\"Enter the email body\"\n        )\n        creds: EmailCredentials = SchemaField(\n            description=\"SMTP credentials\",\n            default=EmailCredentials(),\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    to_email: str = SchemaField(description=\"Recipient email address\", placeholder=\"recipient@example.com\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    subject: str = SchemaField(description=\"Subject of the email\", placeholder=\"Enter the email subject\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "    body: str = SchemaField(description=\"Body of the email\", placeholder=\"Enter the email body\")",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "    creds: EmailCredentials = SchemaField(description=\"SMTP credentials\", default=EmailCredentials())",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 38,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the email sending operation\")\n        error: str = SchemaField(\n            description=\"Error message if the email sending failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    status: str = SchemaField(description=\"Status of the email sending operation\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    error: str = SchemaField(description=\"Error message if the email sending failed\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class SendEmailBlock(Block):\n        )\n\n        )\n\n        )\n\n    @staticmethod\n        return \"Email sent successfully\"\n\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "class SendEmailBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "@staticmethod",
              "successors": [
                {
                  "id": 3,
                  "label": "return \"Email sent successfully\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nfrom pydantic import BaseModel, ConfigDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import BlockSecret, SchemaField, SecretField\n\n\n    model_config = ConfigDict(title=\"Email Credentials\")\n\n\n        )",
  "blocks": [
    {
      "id": 1,
      "label": "import smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nfrom pydantic import BaseModel, ConfigDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import BlockSecret, SchemaField, SecretField\n\n",
      "successors": [
        {
          "id": 2,
          "label": "model_config = ConfigDict(title=\"Email Credentials\")\n\n",
          "successors": []
        }
      ]
    }
  ]
}