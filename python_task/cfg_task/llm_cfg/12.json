[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 16,
    "children": [],
    "code": "import base64\n\nfrom typing_extensions import TypedDict\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\nfrom ._api import get_api\nfrom ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import base64\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from typing_extensions import TypedDict\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "from ._api import get_api\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "from ._auth import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GithubCredentials,\n    GithubCredentialsField,\n    GithubCredentialsInput,\n)\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        }
      ]
    }
  },
  {
    "decl_name": "GithubListTagsBlock",
    "start_line": 17,
    "end_line": 96,
    "children": [
      {
        "decl_name": "GithubListTagsBlock.Input",
        "start_line": 18,
        "end_line": 23,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListTagsBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "GithubListTagsBlock.Input_2",
              "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubListTagsBlock.Input_3",
              "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListTagsBlock.Input_1",
              "to": "GithubListTagsBlock.Input_2"
            },
            {
              "from": "GithubListTagsBlock.Input_2",
              "to": "GithubListTagsBlock.Input_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListTagsBlock.Output",
        "start_line": 25,
        "end_line": 33,
        "children": [
          {
            "decl_name": "GithubListTagsBlock.Output.TagItem",
            "start_line": 26,
            "end_line": 28,
            "children": [],
            "code": "        class TagItem(TypedDict):\n            name: str\n            url: str\n",
            "cfg": {
              "nodes": [
                {
                  "id": "GithubListTagsBlock.Output.TagItem_1",
                  "code": "class TagItem(TypedDict):\n            name: str\n            url: str\n"
                }
              ],
              "edges": []
            }
          }
        ],
        "code": "    class Output(BlockSchema):\n\n        tag: TagItem = SchemaField(\n            title=\"Tag\", description=\"Tags with their name and file tree browser URL\"\n        )\n        error: str = SchemaField(description=\"Error message if listing tags failed\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListTagsBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "GithubListTagsBlock.Output_2",
              "code": "        tag: TagItem = SchemaField(\n            title=\"Tag\", description=\"Tags with their name and file tree browser URL\"\n        )\n"
            },
            {
              "id": "GithubListTagsBlock.Output_3",
              "code": "        error: str = SchemaField(description=\"Error message if listing tags failed\")\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListTagsBlock.Output_1",
              "to": "GithubListTagsBlock.Output_2"
            },
            {
              "from": "GithubListTagsBlock.Output_2",
              "to": "GithubListTagsBlock.Output_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListTagsBlock.__init__",
        "start_line": 35,
        "end_line": 64,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"358924e7-9a11-4d1a-a0f2-13c67fe59e2e\",\n            description=\"This block lists all tags for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListTagsBlock.Input,\n            output_schema=GithubListTagsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"tag\",\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/tree/v1.0.0\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_tags\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/tree/v1.0.0\",\n                    }\n                ]\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListTagsBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"358924e7-9a11-4d1a-a0f2-13c67fe59e2e\",\n            description=\"This block lists all tags for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListTagsBlock.Input,\n            output_schema=GithubListTagsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"tag\",\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/tree/v1.0.0\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_tags\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/tree/v1.0.0\",\n                    }\n                ]\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubListTagsBlock.list_tags",
        "start_line": 66,
        "end_line": 82,
        "children": [],
        "code": "    @staticmethod\n    def list_tags(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.TagItem]:\n        api = get_api(credentials)\n        tags_url = repo_url + \"/tags\"\n        response = api.get(tags_url)\n        data = response.json()\n        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        tags: list[GithubListTagsBlock.Output.TagItem] = [\n            {\n                \"name\": tag[\"name\"],\n                \"url\": f\"https://github.com/{repo_path}/tree/{tag['name']}\",\n            }\n            for tag in data\n        ]\n        return tags\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListTagsBlock.list_tags_1",
              "code": "@staticmethod\n    def list_tags(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.TagItem]:\n"
            },
            {
              "id": "GithubListTagsBlock.list_tags_2",
              "code": "        api = get_api(credentials)\n        tags_url = repo_url + \"/tags\"\n        response = api.get(tags_url)\n        data = response.json()\n"
            },
            {
              "id": "GithubListTagsBlock.list_tags_3",
              "code": "        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n"
            },
            {
              "id": "GithubListTagsBlock.list_tags_4",
              "code": "        tags: list[GithubListTagsBlock.Output.TagItem] = [\n            {\n                \"name\": tag[\"name\"],\n                \"url\": f\"https://github.com/{repo_path}/tree/{tag['name']}\",\n            }\n            for tag in data\n        ]\n"
            },
            {
              "id": "GithubListTagsBlock.list_tags_5",
              "code": "        return tags\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListTagsBlock.list_tags_1",
              "to": "GithubListTagsBlock.list_tags_2"
            },
            {
              "from": "GithubListTagsBlock.list_tags_2",
              "to": "GithubListTagsBlock.list_tags_3"
            },
            {
              "from": "GithubListTagsBlock.list_tags_3",
              "to": "GithubListTagsBlock.list_tags_4"
            },
            {
              "from": "GithubListTagsBlock.list_tags_4",
              "to": "GithubListTagsBlock.list_tags_5"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListTagsBlock.run",
        "start_line": 84,
        "end_line": 95,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        tags = self.list_tags(\n            credentials,\n            input_data.repo_url,\n        )\n        yield from ((\"tag\", tag) for tag in tags)\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListTagsBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubListTagsBlock.run_2",
              "code": "        tags = self.list_tags(\n            credentials,\n            input_data.repo_url,\n        )\n"
            },
            {
              "id": "GithubListTagsBlock.run_3",
              "code": "        yield from ((\"tag\", tag) for tag in tags)\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListTagsBlock.run_1",
              "to": "GithubListTagsBlock.run_2"
            },
            {
              "from": "GithubListTagsBlock.run_2",
              "to": "GithubListTagsBlock.run_3"
            }
          ]
        }
      }
    ],
    "code": "class GithubListTagsBlock(Block):\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubListTagsBlock_1",
          "code": "class GithubListTagsBlock(Block):\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubListBranchesBlock",
    "start_line": 98,
    "end_line": 177,
    "children": [
      {
        "decl_name": "GithubListBranchesBlock.Input",
        "start_line": 99,
        "end_line": 104,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListBranchesBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "GithubListBranchesBlock.Input_2",
              "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubListBranchesBlock.Input_3",
              "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListBranchesBlock.Input_1",
              "to": "GithubListBranchesBlock.Input_2"
            },
            {
              "from": "GithubListBranchesBlock.Input_2",
              "to": "GithubListBranchesBlock.Input_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListBranchesBlock.Output",
        "start_line": 106,
        "end_line": 115,
        "children": [
          {
            "decl_name": "GithubListBranchesBlock.Output.BranchItem",
            "start_line": 107,
            "end_line": 109,
            "children": [],
            "code": "        class BranchItem(TypedDict):\n            name: str\n            url: str\n",
            "cfg": {
              "nodes": [
                {
                  "id": "GithubListBranchesBlock.Output.BranchItem_1",
                  "code": "class BranchItem(TypedDict):\n            name: str\n            url: str\n"
                }
              ],
              "edges": []
            }
          }
        ],
        "code": "    class Output(BlockSchema):\n\n        branch: BranchItem = SchemaField(\n            title=\"Branch\",\n            description=\"Branches with their name and file tree browser URL\",\n        )\n        error: str = SchemaField(description=\"Error message if listing branches failed\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListBranchesBlock.Output_1",
              "code": "class Output(BlockSchema):\n\n"
            },
            {
              "id": "GithubListBranchesBlock.Output_2",
              "code": "        branch: BranchItem = SchemaField(\n            title=\"Branch\",\n            description=\"Branches with their name and file tree browser URL\",\n        )\n"
            },
            {
              "id": "GithubListBranchesBlock.Output_3",
              "code": "        error: str = SchemaField(description=\"Error message if listing branches failed\")\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListBranchesBlock.Output_1",
              "to": "GithubListBranchesBlock.Output_2"
            },
            {
              "from": "GithubListBranchesBlock.Output_2",
              "to": "GithubListBranchesBlock.Output_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListBranchesBlock.__init__",
        "start_line": 117,
        "end_line": 146,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"74243e49-2bec-4916-8bf4-db43d44aead5\",\n            description=\"This block lists all branches for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListBranchesBlock.Input,\n            output_schema=GithubListBranchesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"branch\",\n                    {\n                        \"name\": \"main\",\n                        \"url\": \"https://github.com/owner/repo/tree/main\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_branches\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"main\",\n                        \"url\": \"https://github.com/owner/repo/tree/main\",\n                    }\n                ]\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListBranchesBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"74243e49-2bec-4916-8bf4-db43d44aead5\",\n            description=\"This block lists all branches for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListBranchesBlock.Input,\n            output_schema=GithubListBranchesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"branch\",\n                    {\n                        \"name\": \"main\",\n                        \"url\": \"https://github.com/owner/repo/tree/main\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_branches\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"main\",\n                        \"url\": \"https://github.com/owner/repo/tree/main\",\n                    }\n                ]\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubListBranchesBlock.list_branches",
        "start_line": 148,
        "end_line": 164,
        "children": [],
        "code": "    @staticmethod\n    def list_branches(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.BranchItem]:\n        api = get_api(credentials)\n        branches_url = repo_url + \"/branches\"\n        response = api.get(branches_url)\n        data = response.json()\n        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        branches: list[GithubListBranchesBlock.Output.BranchItem] = [\n            {\n                \"name\": branch[\"name\"],\n                \"url\": f\"https://github.com/{repo_path}/tree/{branch['name']}\",\n            }\n            for branch in data\n        ]\n        return branches\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListBranchesBlock.list_branches_1",
              "code": "@staticmethod\n    def list_branches(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.BranchItem]:\n"
            },
            {
              "id": "GithubListBranchesBlock.list_branches_2",
              "code": "        api = get_api(credentials)\n        branches_url = repo_url + \"/branches\"\n        response = api.get(branches_url)\n        data = response.json()\n"
            },
            {
              "id": "GithubListBranchesBlock.list_branches_3",
              "code": "        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n"
            },
            {
              "id": "GithubListBranchesBlock.list_branches_4",
              "code": "        branches: list[GithubListBranchesBlock.Output.BranchItem] = [\n            {\n                \"name\": branch[\"name\"],\n                \"url\": f\"https://github.com/{repo_path}/tree/{branch['name']}\",\n            }\n            for branch in data\n        ]\n"
            },
            {
              "id": "GithubListBranchesBlock.list_branches_5",
              "code": "        return branches\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListBranchesBlock.list_branches_1",
              "to": "GithubListBranchesBlock.list_branches_2"
            },
            {
              "from": "GithubListBranchesBlock.list_branches_2",
              "to": "GithubListBranchesBlock.list_branches_3"
            },
            {
              "from": "GithubListBranchesBlock.list_branches_3",
              "to": "GithubListBranchesBlock.list_branches_4"
            },
            {
              "from": "GithubListBranchesBlock.list_branches_4",
              "to": "GithubListBranchesBlock.list_branches_5"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListBranchesBlock.run",
        "start_line": 166,
        "end_line": 176,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        branches = self.list_branches(\n            credentials,\n            input_data.repo_url,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListBranchesBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubListBranchesBlock.run_2",
              "code": "        branches = self.list_branches(\n            credentials,\n            input_data.repo_url,\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListBranchesBlock.run_1",
              "to": "GithubListBranchesBlock.run_2"
            }
          ]
        }
      }
    ],
    "code": "class GithubListBranchesBlock(Block):\n\n\n\n\n        yield from ((\"branch\", branch) for branch in branches)\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubListBranchesBlock_1",
          "code": "class GithubListBranchesBlock(Block):\n"
        },
        {
          "id": "GithubListBranchesBlock_2",
          "code": "        yield from ((\"branch\", branch) for branch in branches)\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubListDiscussionsBlock",
    "start_line": 180,
    "end_line": 277,
    "children": [
      {
        "decl_name": "GithubListDiscussionsBlock.Input",
        "start_line": 181,
        "end_line": 189,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        num_discussions: int = SchemaField(\n            description=\"Number of discussions to fetch\", default=5\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListDiscussionsBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubListDiscussionsBlock.Input_2",
              "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
            },
            {
              "id": "GithubListDiscussionsBlock.Input_3",
              "code": "        num_discussions: int = SchemaField(\n            description=\"Number of discussions to fetch\", default=5\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListDiscussionsBlock.Input_1",
              "to": "GithubListDiscussionsBlock.Input_2"
            },
            {
              "from": "GithubListDiscussionsBlock.Input_2",
              "to": "GithubListDiscussionsBlock.Input_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListDiscussionsBlock.Output",
        "start_line": 191,
        "end_line": 201,
        "children": [
          {
            "decl_name": "GithubListDiscussionsBlock.Output.DiscussionItem",
            "start_line": 192,
            "end_line": 194,
            "children": [],
            "code": "        class DiscussionItem(TypedDict):\n            title: str\n            url: str\n",
            "cfg": {
              "nodes": [
                {
                  "id": "GithubListDiscussionsBlock.Output.DiscussionItem_1",
                  "code": "class DiscussionItem(TypedDict):\n            title: str\n            url: str\n"
                }
              ],
              "edges": []
            }
          }
        ],
        "code": "    class Output(BlockSchema):\n\n        discussion: DiscussionItem = SchemaField(\n            title=\"Discussion\", description=\"Discussions with their title and URL\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if listing discussions failed\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListDiscussionsBlock.Output_1",
              "code": "class Output(BlockSchema):\n\n"
            },
            {
              "id": "GithubListDiscussionsBlock.Output_2",
              "code": "        discussion: DiscussionItem = SchemaField(\n            title=\"Discussion\", description=\"Discussions with their title and URL\"\n        )\n"
            },
            {
              "id": "GithubListDiscussionsBlock.Output_3",
              "code": "        error: str = SchemaField(\n            description=\"Error message if listing discussions failed\"\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListDiscussionsBlock.Output_1",
              "to": "GithubListDiscussionsBlock.Output_2"
            },
            {
              "from": "GithubListDiscussionsBlock.Output_2",
              "to": "GithubListDiscussionsBlock.Output_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListDiscussionsBlock.__init__",
        "start_line": 203,
        "end_line": 233,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"3ef1a419-3d76-4e07-b761-de9dad4d51d7\",\n            description=\"This block lists recent discussions for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListDiscussionsBlock.Input,\n            output_schema=GithubListDiscussionsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"num_discussions\": 3,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"discussion\",\n                    {\n                        \"title\": \"Discussion 1\",\n                        \"url\": \"https://github.com/owner/repo/discussions/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_discussions\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Discussion 1\",\n                        \"url\": \"https://github.com/owner/repo/discussions/1\",\n                    }\n                ]\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListDiscussionsBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"3ef1a419-3d76-4e07-b761-de9dad4d51d7\",\n            description=\"This block lists recent discussions for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListDiscussionsBlock.Input,\n            output_schema=GithubListDiscussionsBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"num_discussions\": 3,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"discussion\",\n                    {\n                        \"title\": \"Discussion 1\",\n                        \"url\": \"https://github.com/owner/repo/discussions/1\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_discussions\": lambda *args, **kwargs: [\n                    {\n                        \"title\": \"Discussion 1\",\n                        \"url\": \"https://github.com/owner/repo/discussions/1\",\n                    }\n                ]\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubListDiscussionsBlock.list_discussions",
        "start_line": 235,
        "end_line": 265,
        "children": [],
        "code": "    @staticmethod\n    def list_discussions(\n        credentials: GithubCredentials, repo_url: str, num_discussions: int\n    ) -> list[Output.DiscussionItem]:\n        api = get_api(credentials)\n        # GitHub GraphQL API endpoint is different; we'll use api.post with custom URL\n        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        owner, repo = repo_path.split(\"/\")\n        query = \"\"\"\n        query($owner: String!, $repo: String!, $num: Int!) {\n            repository(owner: $owner, name: $repo) {\n                discussions(first: $num) {\n                    nodes {\n                        title\n                        url\n                    }\n                }\n            }\n        }\n        \"\"\"\n        variables = {\"owner\": owner, \"repo\": repo, \"num\": num_discussions}\n        response = api.post(\n            \"https://api.github.com/graphql\",\n            json={\"query\": query, \"variables\": variables},\n        )\n        data = response.json()\n        discussions: list[GithubListDiscussionsBlock.Output.DiscussionItem] = [\n            {\"title\": discussion[\"title\"], \"url\": discussion[\"url\"]}\n            for discussion in data[\"data\"][\"repository\"][\"discussions\"][\"nodes\"]\n        ]\n        return discussions\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListDiscussionsBlock.list_discussions_1",
              "code": "@staticmethod\n    def list_discussions(\n        credentials: GithubCredentials, repo_url: str, num_discussions: int\n    ) -> list[Output.DiscussionItem]:\n"
            },
            {
              "id": "GithubListDiscussionsBlock.list_discussions_2",
              "code": "        api = get_api(credentials)\n"
            },
            {
              "id": "GithubListDiscussionsBlock.list_discussions_3",
              "code": "        # GitHub GraphQL API endpoint is different; we'll use api.post with custom URL\n"
            },
            {
              "id": "GithubListDiscussionsBlock.list_discussions_4",
              "code": "        repo_path = repo_url.replace(\"https://github.com/\", \"\")\n        owner, repo = repo_path.split(\"/\")\n"
            },
            {
              "id": "GithubListDiscussionsBlock.list_discussions_5",
              "code": "        query = \"\"\"\n        query($owner: String!, $repo: String!, $num: Int!) {\n            repository(owner: $owner, name: $repo) {\n                discussions(first: $num) {\n                    nodes {\n                        title\n                        url\n                    }\n                }\n            }\n        }\n        \"\"\"\n"
            },
            {
              "id": "GithubListDiscussionsBlock.list_discussions_6",
              "code": "        variables = {\"owner\": owner, \"repo\": repo, \"num\": num_discussions}\n"
            },
            {
              "id": "GithubListDiscussionsBlock.list_discussions_7",
              "code": "        response = api.post(\n            \"https://api.github.com/graphql\",\n            json={\"query\": query, \"variables\": variables},\n        )\n"
            },
            {
              "id": "GithubListDiscussionsBlock.list_discussions_8",
              "code": "        data = response.json()\n"
            },
            {
              "id": "GithubListDiscussionsBlock.list_discussions_9",
              "code": "        discussions: list[GithubListDiscussionsBlock.Output.DiscussionItem] = [\n            {\"title\": discussion[\"title\"], \"url\": discussion[\"url\"]}\n            for discussion in data[\"data\"][\"repository\"][\"discussions\"][\"nodes\"]\n        ]\n"
            },
            {
              "id": "GithubListDiscussionsBlock.list_discussions_10",
              "code": "        return discussions\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListDiscussionsBlock.list_discussions_1",
              "to": "GithubListDiscussionsBlock.list_discussions_2"
            },
            {
              "from": "GithubListDiscussionsBlock.list_discussions_2",
              "to": "GithubListDiscussionsBlock.list_discussions_3"
            },
            {
              "from": "GithubListDiscussionsBlock.list_discussions_3",
              "to": "GithubListDiscussionsBlock.list_discussions_4"
            },
            {
              "from": "GithubListDiscussionsBlock.list_discussions_4",
              "to": "GithubListDiscussionsBlock.list_discussions_5"
            },
            {
              "from": "GithubListDiscussionsBlock.list_discussions_5",
              "to": "GithubListDiscussionsBlock.list_discussions_6"
            },
            {
              "from": "GithubListDiscussionsBlock.list_discussions_6",
              "to": "GithubListDiscussionsBlock.list_discussions_7"
            },
            {
              "from": "GithubListDiscussionsBlock.list_discussions_7",
              "to": "GithubListDiscussionsBlock.list_discussions_8"
            },
            {
              "from": "GithubListDiscussionsBlock.list_discussions_8",
              "to": "GithubListDiscussionsBlock.list_discussions_9"
            },
            {
              "from": "GithubListDiscussionsBlock.list_discussions_9",
              "to": "GithubListDiscussionsBlock.list_discussions_10"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListDiscussionsBlock.run",
        "start_line": 267,
        "end_line": 276,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        discussions = self.list_discussions(\n            credentials, input_data.repo_url, input_data.num_discussions\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListDiscussionsBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubListDiscussionsBlock.run_2",
              "code": "        discussions = self.list_discussions(\n            credentials, input_data.repo_url, input_data.num_discussions\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListDiscussionsBlock.run_1",
              "to": "GithubListDiscussionsBlock.run_2"
            }
          ]
        }
      }
    ],
    "code": "class GithubListDiscussionsBlock(Block):\n\n\n\n\n        yield from ((\"discussion\", discussion) for discussion in discussions)\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubListDiscussionsBlock_1",
          "code": "class GithubListDiscussionsBlock(Block):\n"
        },
        {
          "id": "GithubListDiscussionsBlock_2",
          "code": "        yield from ((\"discussion\", discussion) for discussion in discussions)\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubListReleasesBlock",
    "start_line": 280,
    "end_line": 354,
    "children": [
      {
        "decl_name": "GithubListReleasesBlock.Input",
        "start_line": 281,
        "end_line": 286,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListReleasesBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "GithubListReleasesBlock.Input_2",
              "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubListReleasesBlock.Input_3",
              "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListReleasesBlock.Input_1",
              "to": "GithubListReleasesBlock.Input_2"
            },
            {
              "from": "GithubListReleasesBlock.Input_2",
              "to": "GithubListReleasesBlock.Input_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListReleasesBlock.Output",
        "start_line": 288,
        "end_line": 297,
        "children": [
          {
            "decl_name": "GithubListReleasesBlock.Output.ReleaseItem",
            "start_line": 289,
            "end_line": 291,
            "children": [],
            "code": "        class ReleaseItem(TypedDict):\n            name: str\n            url: str\n",
            "cfg": {
              "nodes": [
                {
                  "id": "GithubListReleasesBlock.Output.ReleaseItem_1",
                  "code": "class ReleaseItem(TypedDict):\n            name: str\n            url: str\n"
                }
              ],
              "edges": []
            }
          }
        ],
        "code": "    class Output(BlockSchema):\n\n        release: ReleaseItem = SchemaField(\n            title=\"Release\",\n            description=\"Releases with their name and file tree browser URL\",\n        )\n        error: str = SchemaField(description=\"Error message if listing releases failed\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListReleasesBlock.Output_1",
              "code": "class Output(BlockSchema):\n\n"
            },
            {
              "id": "GithubListReleasesBlock.Output_2",
              "code": "        release: ReleaseItem = SchemaField(\n            title=\"Release\",\n            description=\"Releases with their name and file tree browser URL\",\n        )\n"
            },
            {
              "id": "GithubListReleasesBlock.Output_3",
              "code": "        error: str = SchemaField(description=\"Error message if listing releases failed\")\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListReleasesBlock.Output_1",
              "to": "GithubListReleasesBlock.Output_2"
            },
            {
              "from": "GithubListReleasesBlock.Output_2",
              "to": "GithubListReleasesBlock.Output_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListReleasesBlock.__init__",
        "start_line": 299,
        "end_line": 328,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"3460367a-6ba7-4645-8ce6-47b05d040b92\",\n            description=\"This block lists all releases for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListReleasesBlock.Input,\n            output_schema=GithubListReleasesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"release\",\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_releases\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n                    }\n                ]\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListReleasesBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"3460367a-6ba7-4645-8ce6-47b05d040b92\",\n            description=\"This block lists all releases for a specified GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubListReleasesBlock.Input,\n            output_schema=GithubListReleasesBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"release\",\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n                    },\n                )\n            ],\n            test_mock={\n                \"list_releases\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"v1.0.0\",\n                        \"url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n                    }\n                ]\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubListReleasesBlock.list_releases",
        "start_line": 330,
        "end_line": 341,
        "children": [],
        "code": "    @staticmethod\n    def list_releases(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.ReleaseItem]:\n        api = get_api(credentials)\n        releases_url = repo_url + \"/releases\"\n        response = api.get(releases_url)\n        data = response.json()\n        releases: list[GithubListReleasesBlock.Output.ReleaseItem] = [\n            {\"name\": release[\"name\"], \"url\": release[\"html_url\"]} for release in data\n        ]\n        return releases\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListReleasesBlock.list_releases_1",
              "code": "@staticmethod\n    def list_releases(\n        credentials: GithubCredentials, repo_url: str\n    ) -> list[Output.ReleaseItem]:\n"
            },
            {
              "id": "GithubListReleasesBlock.list_releases_2",
              "code": "        api = get_api(credentials)\n        releases_url = repo_url + \"/releases\"\n        response = api.get(releases_url)\n        data = response.json()\n"
            },
            {
              "id": "GithubListReleasesBlock.list_releases_3",
              "code": "        releases: list[GithubListReleasesBlock.Output.ReleaseItem] = [\n            {\"name\": release[\"name\"], \"url\": release[\"html_url\"]} for release in data\n        ]\n"
            },
            {
              "id": "GithubListReleasesBlock.list_releases_4",
              "code": "        return releases\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListReleasesBlock.list_releases_1",
              "to": "GithubListReleasesBlock.list_releases_2"
            },
            {
              "from": "GithubListReleasesBlock.list_releases_2",
              "to": "GithubListReleasesBlock.list_releases_3"
            },
            {
              "from": "GithubListReleasesBlock.list_releases_3",
              "to": "GithubListReleasesBlock.list_releases_4"
            }
          ]
        }
      },
      {
        "decl_name": "GithubListReleasesBlock.run",
        "start_line": 343,
        "end_line": 353,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        releases = self.list_releases(\n            credentials,\n            input_data.repo_url,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubListReleasesBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubListReleasesBlock.run_2",
              "code": "        releases = self.list_releases(\n            credentials,\n            input_data.repo_url,\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubListReleasesBlock.run_1",
              "to": "GithubListReleasesBlock.run_2"
            }
          ]
        }
      }
    ],
    "code": "class GithubListReleasesBlock(Block):\n\n\n\n\n        yield from ((\"release\", release) for release in releases)\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubListReleasesBlock_1",
          "code": "class GithubListReleasesBlock(Block):\n"
        },
        {
          "id": "GithubListReleasesBlock_2",
          "code": "        yield from ((\"release\", release) for release in releases)\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubReadFileBlock",
    "start_line": 357,
    "end_line": 441,
    "children": [
      {
        "decl_name": "GithubReadFileBlock.Input",
        "start_line": 358,
        "end_line": 372,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        file_path: str = SchemaField(\n            description=\"Path to the file in the repository\",\n            placeholder=\"path/to/file\",\n        )\n        branch: str = SchemaField(\n            description=\"Branch to read from\",\n            placeholder=\"branch_name\",\n            default=\"master\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadFileBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "GithubReadFileBlock.Input_2",
              "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubReadFileBlock.Input_3",
              "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
            },
            {
              "id": "GithubReadFileBlock.Input_4",
              "code": "        file_path: str = SchemaField(\n            description=\"Path to the file in the repository\",\n            placeholder=\"path/to/file\",\n        )\n"
            },
            {
              "id": "GithubReadFileBlock.Input_5",
              "code": "        branch: str = SchemaField(\n            description=\"Branch to read from\",\n            placeholder=\"branch_name\",\n            default=\"master\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubReadFileBlock.Input_1",
              "to": "GithubReadFileBlock.Input_2"
            },
            {
              "from": "GithubReadFileBlock.Input_2",
              "to": "GithubReadFileBlock.Input_3"
            },
            {
              "from": "GithubReadFileBlock.Input_3",
              "to": "GithubReadFileBlock.Input_4"
            },
            {
              "from": "GithubReadFileBlock.Input_4",
              "to": "GithubReadFileBlock.Input_5"
            }
          ]
        }
      },
      {
        "decl_name": "GithubReadFileBlock.Output",
        "start_line": 374,
        "end_line": 382,
        "children": [],
        "code": "    class Output(BlockSchema):\n        text_content: str = SchemaField(\n            description=\"Content of the file (decoded as UTF-8 text)\"\n        )\n        raw_content: str = SchemaField(\n            description=\"Raw base64-encoded content of the file\"\n        )\n        size: int = SchemaField(description=\"The size of the file (in bytes)\")\n        error: str = SchemaField(description=\"Error message if the file reading failed\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadFileBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "GithubReadFileBlock.Output_2",
              "code": "        text_content: str = SchemaField(\n            description=\"Content of the file (decoded as UTF-8 text)\"\n        )\n"
            },
            {
              "id": "GithubReadFileBlock.Output_3",
              "code": "        raw_content: str = SchemaField(\n            description=\"Raw base64-encoded content of the file\"\n        )\n"
            },
            {
              "id": "GithubReadFileBlock.Output_4",
              "code": "        size: int = SchemaField(description=\"The size of the file (in bytes)\")\n"
            },
            {
              "id": "GithubReadFileBlock.Output_5",
              "code": "        error: str = SchemaField(description=\"Error message if the file reading failed\")\n"
            }
          ],
          "edges": [
            {
              "from": "GithubReadFileBlock.Output_1",
              "to": "GithubReadFileBlock.Output_2"
            },
            {
              "from": "GithubReadFileBlock.Output_2",
              "to": "GithubReadFileBlock.Output_3"
            },
            {
              "from": "GithubReadFileBlock.Output_3",
              "to": "GithubReadFileBlock.Output_4"
            },
            {
              "from": "GithubReadFileBlock.Output_4",
              "to": "GithubReadFileBlock.Output_5"
            }
          ]
        }
      },
      {
        "decl_name": "GithubReadFileBlock.__init__",
        "start_line": 384,
        "end_line": 404,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"87ce6c27-5752-4bbc-8e26-6da40a3dcfd3\",\n            description=\"This block reads the content of a specified file from a GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadFileBlock.Input,\n            output_schema=GithubReadFileBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"file_path\": \"path/to/file\",\n                \"branch\": \"master\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"raw_content\", \"RmlsZSBjb250ZW50\"),\n                (\"text_content\", \"File content\"),\n                (\"size\", 13),\n            ],\n            test_mock={\"read_file\": lambda *args, **kwargs: (\"RmlsZSBjb250ZW50\", 13)},\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadFileBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"87ce6c27-5752-4bbc-8e26-6da40a3dcfd3\",\n            description=\"This block reads the content of a specified file from a GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadFileBlock.Input,\n            output_schema=GithubReadFileBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"file_path\": \"path/to/file\",\n                \"branch\": \"master\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\"raw_content\", \"RmlsZSBjb250ZW50\"),\n                (\"text_content\", \"File content\"),\n                (\"size\", 13),\n            ],\n            test_mock={\"read_file\": lambda *args, **kwargs: (\"RmlsZSBjb250ZW50\", 13)},\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubReadFileBlock.read_file",
        "start_line": 406,
        "end_line": 424,
        "children": [],
        "code": "    @staticmethod\n    def read_file(\n        credentials: GithubCredentials, repo_url: str, file_path: str, branch: str\n    ) -> tuple[str, int]:\n        api = get_api(credentials)\n        content_url = repo_url + f\"/contents/{file_path}?ref={branch}\"\n        response = api.get(content_url)\n        content = response.json()\n\n        if isinstance(content, list):\n            # Multiple entries of different types exist at this path\n            if not (file := next((f for f in content if f[\"type\"] == \"file\"), None)):\n                raise TypeError(\"Not a file\")\n            content = file\n\n        if content[\"type\"] != \"file\":\n            raise TypeError(\"Not a file\")\n\n        return content[\"content\"], content[\"size\"]\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadFileBlock.read_file_1",
              "code": "@staticmethod\n    def read_file(\n        credentials: GithubCredentials, repo_url: str, file_path: str, branch: str\n    ) -> tuple[str, int]:\n"
            },
            {
              "id": "GithubReadFileBlock.read_file_2",
              "code": "        api = get_api(credentials)\n        content_url = repo_url + f\"/contents/{file_path}?ref={branch}\"\n        response = api.get(content_url)\n        content = response.json()\n"
            },
            {
              "id": "GithubReadFileBlock.read_file_3",
              "code": "        if isinstance(content, list):\n            # Multiple entries of different types exist at this path\n            if not (file := next((f for f in content if f[\"type\"] == \"file\"), None)):\n                raise TypeError(\"Not a file\")\n            content = file\n"
            },
            {
              "id": "GithubReadFileBlock.read_file_4",
              "code": "        if content[\"type\"] != \"file\":\n            raise TypeError(\"Not a file\")\n"
            },
            {
              "id": "GithubReadFileBlock.read_file_5",
              "code": "        return content[\"content\"], content[\"size\"]\n"
            }
          ],
          "edges": [
            {
              "from": "GithubReadFileBlock.read_file_1",
              "to": "GithubReadFileBlock.read_file_2"
            },
            {
              "from": "GithubReadFileBlock.read_file_2",
              "to": "GithubReadFileBlock.read_file_3"
            },
            {
              "from": "GithubReadFileBlock.read_file_3",
              "to": "GithubReadFileBlock.read_file_4"
            },
            {
              "from": "GithubReadFileBlock.read_file_3",
              "to": "GithubReadFileBlock.read_file_5"
            },
            {
              "from": "GithubReadFileBlock.read_file_4",
              "to": "GithubReadFileBlock.read_file_5"
            }
          ]
        }
      },
      {
        "decl_name": "GithubReadFileBlock.run",
        "start_line": 426,
        "end_line": 440,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        raw_content, size = self.read_file(\n            credentials,\n            input_data.repo_url,\n            input_data.file_path.lstrip(\"/\"),\n            input_data.branch,\n        )\n        yield \"raw_content\", raw_content\n        yield \"text_content\", base64.b64decode(raw_content).decode(\"utf-8\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadFileBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubReadFileBlock.run_2",
              "code": "        raw_content, size = self.read_file(\n            credentials,\n            input_data.repo_url,\n            input_data.file_path.lstrip(\"/\"),\n            input_data.branch,\n        )\n"
            },
            {
              "id": "GithubReadFileBlock.run_3",
              "code": "        yield \"raw_content\", raw_content\n"
            },
            {
              "id": "GithubReadFileBlock.run_4",
              "code": "        yield \"text_content\", base64.b64decode(raw_content).decode(\"utf-8\")\n"
            }
          ],
          "edges": [
            {
              "from": "GithubReadFileBlock.run_1",
              "to": "GithubReadFileBlock.run_2"
            },
            {
              "from": "GithubReadFileBlock.run_2",
              "to": "GithubReadFileBlock.run_3"
            },
            {
              "from": "GithubReadFileBlock.run_3",
              "to": "GithubReadFileBlock.run_4"
            }
          ]
        }
      }
    ],
    "code": "class GithubReadFileBlock(Block):\n\n\n\n\n        yield \"size\", size\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubReadFileBlock_1",
          "code": "class GithubReadFileBlock(Block):\n"
        },
        {
          "id": "GithubReadFileBlock_2",
          "code": "        yield \"size\", size\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubReadFolderBlock",
    "start_line": 444,
    "end_line": 562,
    "children": [
      {
        "decl_name": "GithubReadFolderBlock.Input",
        "start_line": 445,
        "end_line": 459,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        folder_path: str = SchemaField(\n            description=\"Path to the folder in the repository\",\n            placeholder=\"path/to/folder\",\n        )\n        branch: str = SchemaField(\n            description=\"Branch name to read from (defaults to master)\",\n            placeholder=\"branch_name\",\n            default=\"master\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadFolderBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "GithubReadFolderBlock.Input_2",
              "code": "        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubReadFolderBlock.Input_3",
              "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
            },
            {
              "id": "GithubReadFolderBlock.Input_4",
              "code": "        folder_path: str = SchemaField(\n            description=\"Path to the folder in the repository\",\n            placeholder=\"path/to/folder\",\n        )\n"
            },
            {
              "id": "GithubReadFolderBlock.Input_5",
              "code": "        branch: str = SchemaField(\n            description=\"Branch name to read from (defaults to master)\",\n            placeholder=\"branch_name\",\n            default=\"master\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubReadFolderBlock.Input_1",
              "to": "GithubReadFolderBlock.Input_2"
            },
            {
              "from": "GithubReadFolderBlock.Input_2",
              "to": "GithubReadFolderBlock.Input_3"
            },
            {
              "from": "GithubReadFolderBlock.Input_3",
              "to": "GithubReadFolderBlock.Input_4"
            },
            {
              "from": "GithubReadFolderBlock.Input_4",
              "to": "GithubReadFolderBlock.Input_5"
            }
          ]
        }
      },
      {
        "decl_name": "GithubReadFolderBlock.Output",
        "start_line": 461,
        "end_line": 475,
        "children": [
          {
            "decl_name": "GithubReadFolderBlock.Output.DirEntry",
            "start_line": 462,
            "end_line": 464,
            "children": [],
            "code": "        class DirEntry(TypedDict):\n            name: str\n            path: str\n",
            "cfg": {
              "nodes": [
                {
                  "id": "GithubReadFolderBlock.Output.DirEntry_1",
                  "code": "class DirEntry(TypedDict):\n            name: str\n            path: str\n"
                }
              ],
              "edges": []
            }
          },
          {
            "decl_name": "GithubReadFolderBlock.Output.FileEntry",
            "start_line": 466,
            "end_line": 469,
            "children": [],
            "code": "        class FileEntry(TypedDict):\n            name: str\n            path: str\n            size: int\n",
            "cfg": {
              "nodes": [
                {
                  "id": "GithubReadFolderBlock.Output.FileEntry_1",
                  "code": "class FileEntry(TypedDict):\n            name: str\n            path: str\n            size: int\n"
                }
              ],
              "edges": []
            }
          }
        ],
        "code": "    class Output(BlockSchema):\n\n\n        file: FileEntry = SchemaField(description=\"Files in the folder\")\n        dir: DirEntry = SchemaField(description=\"Directories in the folder\")\n        error: str = SchemaField(\n            description=\"Error message if reading the folder failed\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadFolderBlock.Output_1",
              "code": "class Output(BlockSchema):\n\n\n"
            },
            {
              "id": "GithubReadFolderBlock.Output_2",
              "code": "        file: FileEntry = SchemaField(description=\"Files in the folder\")\n        dir: DirEntry = SchemaField(description=\"Directories in the folder\")\n"
            },
            {
              "id": "GithubReadFolderBlock.Output_3",
              "code": "        error: str = SchemaField(\n            description=\"Error message if reading the folder failed\"\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubReadFolderBlock.Output_1",
              "to": "GithubReadFolderBlock.Output_2"
            },
            {
              "from": "GithubReadFolderBlock.Output_2",
              "to": "GithubReadFolderBlock.Output_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubReadFolderBlock.__init__",
        "start_line": 477,
        "end_line": 514,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"1355f863-2db3-4d75-9fba-f91e8a8ca400\",\n            description=\"This block reads the content of a specified folder from a GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadFolderBlock.Input,\n            output_schema=GithubReadFolderBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"folder_path\": \"path/to/folder\",\n                \"branch\": \"master\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"file\",\n                    {\n                        \"name\": \"file1.txt\",\n                        \"path\": \"path/to/folder/file1.txt\",\n                        \"size\": 1337,\n                    },\n                ),\n                (\"dir\", {\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}),\n            ],\n            test_mock={\n                \"read_folder\": lambda *args, **kwargs: (\n                    [\n                        {\n                            \"name\": \"file1.txt\",\n                            \"path\": \"path/to/folder/file1.txt\",\n                            \"size\": 1337,\n                        }\n                    ],\n                    [{\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}],\n                )\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadFolderBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"1355f863-2db3-4d75-9fba-f91e8a8ca400\",\n            description=\"This block reads the content of a specified folder from a GitHub repository.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubReadFolderBlock.Input,\n            output_schema=GithubReadFolderBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"folder_path\": \"path/to/folder\",\n                \"branch\": \"master\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"file\",\n                    {\n                        \"name\": \"file1.txt\",\n                        \"path\": \"path/to/folder/file1.txt\",\n                        \"size\": 1337,\n                    },\n                ),\n                (\"dir\", {\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}),\n            ],\n            test_mock={\n                \"read_folder\": lambda *args, **kwargs: (\n                    [\n                        {\n                            \"name\": \"file1.txt\",\n                            \"path\": \"path/to/folder/file1.txt\",\n                            \"size\": 1337,\n                        }\n                    ],\n                    [{\"name\": \"dir2\", \"path\": \"path/to/folder/dir2\"}],\n                )\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubReadFolderBlock.read_folder",
        "start_line": 516,
        "end_line": 546,
        "children": [],
        "code": "    @staticmethod\n    def read_folder(\n        credentials: GithubCredentials, repo_url: str, folder_path: str, branch: str\n    ) -> tuple[list[Output.FileEntry], list[Output.DirEntry]]:\n        api = get_api(credentials)\n        contents_url = repo_url + f\"/contents/{folder_path}?ref={branch}\"\n        response = api.get(contents_url)\n        content = response.json()\n\n        if not isinstance(content, list):\n            raise TypeError(\"Not a folder\")\n\n        files = [\n            GithubReadFolderBlock.Output.FileEntry(\n                name=entry[\"name\"],\n                path=entry[\"path\"],\n                size=entry[\"size\"],\n            )\n            for entry in content\n            if entry[\"type\"] == \"file\"\n        ]\n        dirs = [\n            GithubReadFolderBlock.Output.DirEntry(\n                name=entry[\"name\"],\n                path=entry[\"path\"],\n            )\n            for entry in content\n            if entry[\"type\"] == \"dir\"\n        ]\n\n        return files, dirs\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadFolderBlock.read_folder_1",
              "code": "@staticmethod\n    def read_folder(\n        credentials: GithubCredentials, repo_url: str, folder_path: str, branch: str\n    ) -> tuple[list[Output.FileEntry], list[Output.DirEntry]]:\n"
            },
            {
              "id": "GithubReadFolderBlock.read_folder_2",
              "code": "        api = get_api(credentials)\n        contents_url = repo_url + f\"/contents/{folder_path}?ref={branch}\"\n        response = api.get(contents_url)\n        content = response.json()\n"
            },
            {
              "id": "GithubReadFolderBlock.read_folder_3",
              "code": "        if not isinstance(content, list):\n            raise TypeError(\"Not a folder\")\n"
            },
            {
              "id": "GithubReadFolderBlock.read_folder_4",
              "code": "        files = [\n            GithubReadFolderBlock.Output.FileEntry(\n                name=entry[\"name\"],\n                path=entry[\"path\"],\n                size=entry[\"size\"],\n            )\n            for entry in content\n            if entry[\"type\"] == \"file\"\n        ]\n"
            },
            {
              "id": "GithubReadFolderBlock.read_folder_5",
              "code": "        dirs = [\n            GithubReadFolderBlock.Output.DirEntry(\n                name=entry[\"name\"],\n                path=entry[\"path\"],\n            )\n            for entry in content\n            if entry[\"type\"] == \"dir\"\n        ]\n"
            },
            {
              "id": "GithubReadFolderBlock.read_folder_6",
              "code": "        return files, dirs\n"
            }
          ],
          "edges": [
            {
              "from": "GithubReadFolderBlock.read_folder_1",
              "to": "GithubReadFolderBlock.read_folder_2"
            },
            {
              "from": "GithubReadFolderBlock.read_folder_2",
              "to": "GithubReadFolderBlock.read_folder_3"
            },
            {
              "from": "GithubReadFolderBlock.read_folder_3",
              "to": "GithubReadFolderBlock.read_folder_4"
            },
            {
              "from": "GithubReadFolderBlock.read_folder_4",
              "to": "GithubReadFolderBlock.read_folder_5"
            },
            {
              "from": "GithubReadFolderBlock.read_folder_5",
              "to": "GithubReadFolderBlock.read_folder_6"
            }
          ]
        }
      },
      {
        "decl_name": "GithubReadFolderBlock.run",
        "start_line": 548,
        "end_line": 561,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        files, dirs = self.read_folder(\n            credentials,\n            input_data.repo_url,\n            input_data.folder_path.lstrip(\"/\"),\n            input_data.branch,\n        )\n        yield from ((\"file\", file) for file in files)\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubReadFolderBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubReadFolderBlock.run_2",
              "code": "        files, dirs = self.read_folder(\n            credentials,\n            input_data.repo_url,\n            input_data.folder_path.lstrip(\"/\"),\n            input_data.branch,\n        )\n"
            },
            {
              "id": "GithubReadFolderBlock.run_3",
              "code": "        yield from ((\"file\", file) for file in files)\n"
            }
          ],
          "edges": [
            {
              "from": "GithubReadFolderBlock.run_1",
              "to": "GithubReadFolderBlock.run_2"
            },
            {
              "from": "GithubReadFolderBlock.run_2",
              "to": "GithubReadFolderBlock.run_3"
            }
          ]
        }
      }
    ],
    "code": "class GithubReadFolderBlock(Block):\n\n\n\n\n        yield from ((\"dir\", dir) for dir in dirs)\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubReadFolderBlock_1",
          "code": "class GithubReadFolderBlock(Block):\n"
        },
        {
          "id": "GithubReadFolderBlock_2",
          "code": "        yield from ((\"dir\", dir) for dir in dirs)\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubMakeBranchBlock",
    "start_line": 565,
    "end_line": 639,
    "children": [
      {
        "decl_name": "GithubMakeBranchBlock.Input",
        "start_line": 566,
        "end_line": 579,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        new_branch: str = SchemaField(\n            description=\"Name of the new branch\",\n            placeholder=\"new_branch_name\",\n        )\n        source_branch: str = SchemaField(\n            description=\"Name of the source branch\",\n            placeholder=\"source_branch_name\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubMakeBranchBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubMakeBranchBlock.Input_2",
              "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
            },
            {
              "id": "GithubMakeBranchBlock.Input_3",
              "code": "        new_branch: str = SchemaField(\n            description=\"Name of the new branch\",\n            placeholder=\"new_branch_name\",\n        )\n"
            },
            {
              "id": "GithubMakeBranchBlock.Input_4",
              "code": "        source_branch: str = SchemaField(\n            description=\"Name of the source branch\",\n            placeholder=\"source_branch_name\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubMakeBranchBlock.Input_1",
              "to": "GithubMakeBranchBlock.Input_2"
            },
            {
              "from": "GithubMakeBranchBlock.Input_2",
              "to": "GithubMakeBranchBlock.Input_3"
            },
            {
              "from": "GithubMakeBranchBlock.Input_3",
              "to": "GithubMakeBranchBlock.Input_4"
            }
          ]
        }
      },
      {
        "decl_name": "GithubMakeBranchBlock.Output",
        "start_line": 581,
        "end_line": 585,
        "children": [],
        "code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the branch creation operation\")\n        error: str = SchemaField(\n            description=\"Error message if the branch creation failed\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubMakeBranchBlock.Output_1",
              "code": "class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the branch creation operation\")\n        error: str = SchemaField(\n            description=\"Error message if the branch creation failed\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubMakeBranchBlock.__init__",
        "start_line": 587,
        "end_line": 605,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"944cc076-95e7-4d1b-b6b6-b15d8ee5448d\",\n            description=\"This block creates a new branch from a specified source branch.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakeBranchBlock.Input,\n            output_schema=GithubMakeBranchBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"new_branch\": \"new_branch_name\",\n                \"source_branch\": \"source_branch_name\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Branch created successfully\")],\n            test_mock={\n                \"create_branch\": lambda *args, **kwargs: \"Branch created successfully\"\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubMakeBranchBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"944cc076-95e7-4d1b-b6b6-b15d8ee5448d\",\n            description=\"This block creates a new branch from a specified source branch.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubMakeBranchBlock.Input,\n            output_schema=GithubMakeBranchBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"new_branch\": \"new_branch_name\",\n                \"source_branch\": \"source_branch_name\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Branch created successfully\")],\n            test_mock={\n                \"create_branch\": lambda *args, **kwargs: \"Branch created successfully\"\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubMakeBranchBlock.create_branch",
        "start_line": 607,
        "end_line": 624,
        "children": [],
        "code": "    @staticmethod\n    def create_branch(\n        credentials: GithubCredentials,\n        repo_url: str,\n        new_branch: str,\n        source_branch: str,\n    ) -> str:\n        api = get_api(credentials)\n        # Get the SHA of the source branch\n        ref_url = repo_url + f\"/git/refs/heads/{source_branch}\"\n        response = api.get(ref_url)\n        sha = response.json()[\"object\"][\"sha\"]\n\n        # Create the new branch\n        create_ref_url = repo_url + \"/git/refs\"\n        data = {\"ref\": f\"refs/heads/{new_branch}\", \"sha\": sha}\n        response = api.post(create_ref_url, json=data)\n        return \"Branch created successfully\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubMakeBranchBlock.create_branch_1",
              "code": "@staticmethod\n    def create_branch(\n        credentials: GithubCredentials,\n        repo_url: str,\n        new_branch: str,\n        source_branch: str,\n    ) -> str:\n"
            },
            {
              "id": "GithubMakeBranchBlock.create_branch_2",
              "code": "        api = get_api(credentials)\n        # Get the SHA of the source branch\n        ref_url = repo_url + f\"/git/refs/heads/{source_branch}\"\n        response = api.get(ref_url)\n        sha = response.json()[\"object\"][\"sha\"]\n"
            },
            {
              "id": "GithubMakeBranchBlock.create_branch_3",
              "code": "        # Create the new branch\n        create_ref_url = repo_url + \"/git/refs\"\n        data = {\"ref\": f\"refs/heads/{new_branch}\", \"sha\": sha}\n        response = api.post(create_ref_url, json=data)\n"
            },
            {
              "id": "GithubMakeBranchBlock.create_branch_4",
              "code": "        return \"Branch created successfully\"\n"
            }
          ],
          "edges": [
            {
              "from": "GithubMakeBranchBlock.create_branch_1",
              "to": "GithubMakeBranchBlock.create_branch_2"
            },
            {
              "from": "GithubMakeBranchBlock.create_branch_2",
              "to": "GithubMakeBranchBlock.create_branch_3"
            },
            {
              "from": "GithubMakeBranchBlock.create_branch_3",
              "to": "GithubMakeBranchBlock.create_branch_4"
            }
          ]
        }
      },
      {
        "decl_name": "GithubMakeBranchBlock.run",
        "start_line": 626,
        "end_line": 638,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.create_branch(\n            credentials,\n            input_data.repo_url,\n            input_data.new_branch,\n            input_data.source_branch,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubMakeBranchBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubMakeBranchBlock.run_2",
              "code": "        status = self.create_branch(\n            credentials,\n            input_data.repo_url,\n            input_data.new_branch,\n            input_data.source_branch,\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubMakeBranchBlock.run_1",
              "to": "GithubMakeBranchBlock.run_2"
            }
          ]
        }
      }
    ],
    "code": "class GithubMakeBranchBlock(Block):\n\n\n\n\n        yield \"status\", status\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubMakeBranchBlock_1",
          "code": "class GithubMakeBranchBlock(Block):\n"
        },
        {
          "id": "GithubMakeBranchBlock_2",
          "code": "        yield \"status\", status\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GithubDeleteBranchBlock",
    "start_line": 642,
    "end_line": 700,
    "children": [
      {
        "decl_name": "GithubDeleteBranchBlock.Input",
        "start_line": 643,
        "end_line": 652,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n        branch: str = SchemaField(\n            description=\"Name of the branch to delete\",\n            placeholder=\"branch_name\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubDeleteBranchBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\n"
            },
            {
              "id": "GithubDeleteBranchBlock.Input_2",
              "code": "        repo_url: str = SchemaField(\n            description=\"URL of the GitHub repository\",\n            placeholder=\"https://github.com/owner/repo\",\n        )\n"
            },
            {
              "id": "GithubDeleteBranchBlock.Input_3",
              "code": "        branch: str = SchemaField(\n            description=\"Name of the branch to delete\",\n            placeholder=\"branch_name\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubDeleteBranchBlock.Input_1",
              "to": "GithubDeleteBranchBlock.Input_2"
            },
            {
              "from": "GithubDeleteBranchBlock.Input_2",
              "to": "GithubDeleteBranchBlock.Input_3"
            }
          ]
        }
      },
      {
        "decl_name": "GithubDeleteBranchBlock.Output",
        "start_line": 654,
        "end_line": 658,
        "children": [],
        "code": "    class Output(BlockSchema):\n        status: str = SchemaField(description=\"Status of the branch deletion operation\")\n        error: str = SchemaField(\n            description=\"Error message if the branch deletion failed\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubDeleteBranchBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "GithubDeleteBranchBlock.Output_2",
              "code": "        status: str = SchemaField(description=\"Status of the branch deletion operation\")\n        error: str = SchemaField(\n            description=\"Error message if the branch deletion failed\"\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubDeleteBranchBlock.Output_1",
              "to": "GithubDeleteBranchBlock.Output_2"
            }
          ]
        }
      },
      {
        "decl_name": "GithubDeleteBranchBlock.__init__",
        "start_line": 660,
        "end_line": 677,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"0d4130f7-e0ab-4d55-adc3-0a40225e80f4\",\n            description=\"This block deletes a specified branch.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubDeleteBranchBlock.Input,\n            output_schema=GithubDeleteBranchBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"branch\": \"branch_name\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Branch deleted successfully\")],\n            test_mock={\n                \"delete_branch\": lambda *args, **kwargs: \"Branch deleted successfully\"\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubDeleteBranchBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"0d4130f7-e0ab-4d55-adc3-0a40225e80f4\",\n            description=\"This block deletes a specified branch.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=GithubDeleteBranchBlock.Input,\n            output_schema=GithubDeleteBranchBlock.Output,\n            test_input={\n                \"repo_url\": \"https://github.com/owner/repo\",\n                \"branch\": \"branch_name\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"status\", \"Branch deleted successfully\")],\n            test_mock={\n                \"delete_branch\": lambda *args, **kwargs: \"Branch deleted successfully\"\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GithubDeleteBranchBlock.delete_branch",
        "start_line": 679,
        "end_line": 686,
        "children": [],
        "code": "    @staticmethod\n    def delete_branch(\n        credentials: GithubCredentials, repo_url: str, branch: str\n    ) -> str:\n        api = get_api(credentials)\n        ref_url = repo_url + f\"/git/refs/heads/{branch}\"\n        api.delete(ref_url)\n        return \"Branch deleted successfully\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubDeleteBranchBlock.delete_branch_1",
              "code": "@staticmethod\n    def delete_branch(\n        credentials: GithubCredentials, repo_url: str, branch: str\n    ) -> str:\n"
            },
            {
              "id": "GithubDeleteBranchBlock.delete_branch_2",
              "code": "        api = get_api(credentials)\n        ref_url = repo_url + f\"/git/refs/heads/{branch}\"\n        api.delete(ref_url)\n        return \"Branch deleted successfully\"\n"
            }
          ],
          "edges": [
            {
              "from": "GithubDeleteBranchBlock.delete_branch_1",
              "to": "GithubDeleteBranchBlock.delete_branch_2"
            }
          ]
        }
      },
      {
        "decl_name": "GithubDeleteBranchBlock.run",
        "start_line": 688,
        "end_line": 699,
        "children": [],
        "code": "    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        status = self.delete_branch(\n            credentials,\n            input_data.repo_url,\n            input_data.branch,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GithubDeleteBranchBlock.run_1",
              "code": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: GithubCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GithubDeleteBranchBlock.run_2",
              "code": "        status = self.delete_branch(\n            credentials,\n            input_data.repo_url,\n            input_data.branch,\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GithubDeleteBranchBlock.run_1",
              "to": "GithubDeleteBranchBlock.run_2"
            }
          ]
        }
      }
    ],
    "code": "class GithubDeleteBranchBlock(Block):\n\n\n\n\n        yield \"status\", status\n",
    "cfg": {
      "nodes": [
        {
          "id": "GithubDeleteBranchBlock_1",
          "code": "class GithubDeleteBranchBlock(Block):\n"
        },
        {
          "id": "GithubDeleteBranchBlock_2",
          "code": "        yield \"status\", status\n"
        }
      ],
      "edges": []
    }
  }
]