{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 93,
  "functions": [
    {
      "name": "get_set_bits_count_using_brian_kernighans_algorithm",
      "type": "function",
      "start_line": 4,
      "end_line": 30,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_set_bits_count_using_brian_kernighans_algorithm(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\n    result = 0\n    while number:\n        number &= number - 1\n        result += 1\n    return result",
      "blocks": [
        {
          "id": 1,
          "label": "def get_set_bits_count_using_brian_kernighans_algorithm(number: int) -> int:",
          "successors": [
            {
              "id": 2,
              "label": "if number < 0:",
              "successors": [
                {
                  "id": 3,
                  "label": "raise ValueError(\"the value of input must not be negative\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "result = 0",
                  "successors": [
                    {
                      "id": 5,
                      "label": "while number:",
                      "successors": [
                        {
                          "id": 6,
                          "label": "number &= number - 1\nresult += 1",
                          "successors": [
                            {
                              "id": 5,
                              "label": "while number:",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "number &= number - 1\nresult += 1",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 7,
                          "label": "return result",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_set_bits_count_using_modulo_operator",
      "type": "function",
      "start_line": 33,
      "end_line": 60,
      "functions": [],
      "classes": [],
      "simplified_code": "def get_set_bits_count_using_modulo_operator(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\n    result = 0\n    while number:\n        if number % 2 == 1:\n            result += 1\n        number >>= 1\n    return result",
      "blocks": [
        {
          "id": 1,
          "label": "def get_set_bits_count_using_modulo_operator(number: int) -> int:",
          "successors": [
            {
              "id": 2,
              "label": "if number < 0:",
              "successors": [
                {
                  "id": 3,
                  "label": "raise ValueError(\"the value of input must not be negative\")",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "result = 0",
              "successors": [
                {
                  "id": 5,
                  "label": "while number:",
                  "successors": [
                    {
                      "id": 6,
                      "label": "if number % 2 == 1:",
                      "successors": [
                        {
                          "id": 7,
                          "label": "result += 1",
                          "successors": [
                            {
                              "id": 8,
                              "label": "number >>= 1",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "while number:",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "number >>= 1",
                      "successors": [
                        {
                          "id": 5,
                          "label": "while number:",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "return result",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "benchmark",
      "type": "function",
      "start_line": 63,
      "end_line": 86,
      "functions": [
        {
          "name": "do_benchmark",
          "type": "function",
          "start_line": 69,
          "end_line": 82,
          "functions": [],
          "classes": [],
          "simplified_code": "    def do_benchmark(number: int) -> None:\n        setup = \"import __main__ as z\"\n        print(f\"Benchmark when {number = }:\")\n        print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n        print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )\n        print(f\"timeit() runs in {timing} seconds\")",
          "blocks": [
            {
              "id": 1,
              "label": "def do_benchmark(number: int) -> None:",
              "successors": [
                {
                  "id": 2,
                  "label": "    setup = \"import __main__ as z\"\n    print(f\"Benchmark when {number = }:\")\n    print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    timing = timeit(\n        f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n    )",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    print(f\"timeit() runs in {timing} seconds\")\n    print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    timing = timeit(\n        f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n        setup=setup,\n    )",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "    print(f\"timeit() runs in {timing} seconds\")",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def benchmark() -> None:\n    \"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"\n\n        print(f\"timeit() runs in {timing} seconds\")\n\n    for number in (25, 37, 58, 0):\n        do_benchmark(number)\n        print()",
      "blocks": [
        {
          "id": 1,
          "label": "def benchmark() -> None:\n    \"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"\n\n    print(f\"timeit() runs in {timing} seconds\")",
          "successors": [
            {
              "id": 2,
              "label": "for number in (25, 37, 58, 0):",
              "successors": [
                {
                  "id": 3,
                  "label": "    do_benchmark(number)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    print()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from timeit import timeit\n\n\n    return result\n\n\n    return result\n\n\n        print()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    benchmark()",
  "blocks": [
    {
      "id": 1,
      "label": "from timeit import timeit",
      "successors": [
        {
          "id": 2,
          "label": "if __name__ == \"__main__\":",
          "successors": [
            {
              "id": 3,
              "label": "    import doctest",
              "successors": [
                {
                  "id": 4,
                  "label": "    doctest.testmod()",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    benchmark()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}