[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 38,
    "children": [
      {
        "decl_name": "ServiceTest",
        "start_line": 7,
        "end_line": 29,
        "children": [
          {
            "decl_name": "ServiceTest.__init__",
            "start_line": 8,
            "end_line": 9,
            "children": [],
            "code": "    def __init__(self):\n        super().__init__()\n",
            "cfg": {
              "nodes": [
                {
                  "id": "ServiceTest.__init___1",
                  "code": "def __init__(self):\n        super().__init__()\n"
                }
              ],
              "edges": []
            }
          },
          {
            "decl_name": "ServiceTest.get_port",
            "start_line": 11,
            "end_line": 13,
            "children": [],
            "code": "    @classmethod\n    def get_port(cls) -> int:\n        return TEST_SERVICE_PORT\n",
            "cfg": {
              "nodes": [
                {
                  "id": "ServiceTest.get_port_1",
                  "code": "@classmethod\n    def get_port(cls) -> int:\n        return TEST_SERVICE_PORT\n"
                }
              ],
              "edges": []
            }
          },
          {
            "decl_name": "ServiceTest.add",
            "start_line": 15,
            "end_line": 17,
            "children": [],
            "code": "    @expose\n    def add(self, a: int, b: int) -> int:\n        return a + b\n",
            "cfg": {
              "nodes": [
                {
                  "id": "ServiceTest.add_1",
                  "code": "@expose\n"
                },
                {
                  "id": "ServiceTest.add_2",
                  "code": "    def add(self, a: int, b: int) -> int:\n        return a + b\n"
                }
              ],
              "edges": [
                {
                  "from": "ServiceTest.add_1",
                  "to": "ServiceTest.add_2"
                }
              ]
            }
          },
          {
            "decl_name": "ServiceTest.subtract",
            "start_line": 19,
            "end_line": 21,
            "children": [],
            "code": "    @expose\n    def subtract(self, a: int, b: int) -> int:\n        return a - b\n",
            "cfg": {
              "nodes": [
                {
                  "id": "ServiceTest.subtract_1",
                  "code": "    def subtract(self, a: int, b: int) -> int:\n        return a - b\n"
                }
              ],
              "edges": []
            }
          },
          {
            "decl_name": "ServiceTest.fun_with_async",
            "start_line": 23,
            "end_line": 28,
            "children": [
              {
                "decl_name": "ServiceTest.fun_with_async.add_async",
                "start_line": 25,
                "end_line": 26,
                "children": [],
                "code": "        async def add_async(a: int, b: int) -> int:\n            return a + b\n",
                "cfg": {
                  "nodes": [
                    {
                      "id": "ServiceTest.fun_with_async.add_async_1",
                      "code": "async def add_async(a: int, b: int) -> int:\n            return a + b\n"
                    }
                  ],
                  "edges": []
                }
              }
            ],
            "code": "    @expose\n    def fun_with_async(self, a: int, b: int) -> int:\n\n        return self.run_and_wait(add_async(a, b))\n",
            "cfg": {
              "nodes": [
                {
                  "id": "ServiceTest.fun_with_async_1",
                  "code": "@expose\n    def fun_with_async(self, a: int, b: int) -> int:\n"
                },
                {
                  "id": "ServiceTest.fun_with_async_2",
                  "code": "        return self.run_and_wait(add_async(a, b))\n"
                }
              ],
              "edges": [
                {
                  "from": "ServiceTest.fun_with_async_1",
                  "to": "ServiceTest.fun_with_async_2"
                }
              ]
            }
          }
        ],
        "code": "class ServiceTest(AppService):\n\n\n\n\n\n",
        "cfg": {
          "nodes": [
            {
              "id": "ServiceTest_1",
              "code": "class ServiceTest(AppService):\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "test_service_creation",
        "start_line": 31,
        "end_line": 37,
        "children": [],
        "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_service_creation(server):\n    with ServiceTest():\n        client = get_service_client(ServiceTest)\n        assert client.add(5, 3) == 8\n        assert client.subtract(10, 4) == 6\n        assert client.fun_with_async(5, 3) == 8\n",
        "cfg": {
          "nodes": [
            {
              "id": "test_service_creation_1",
              "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_service_creation(server):\n"
            },
            {
              "id": "test_service_creation_2",
              "code": "    with ServiceTest():\n        client = get_service_client(ServiceTest)\n        assert client.add(5, 3) == 8\n        assert client.subtract(10, 4) == 6\n        assert client.fun_with_async(5, 3) == 8\n"
            }
          ],
          "edges": [
            {
              "from": "test_service_creation_1",
              "to": "test_service_creation_2"
            }
          ]
        }
      }
    ],
    "code": "import pytest\n\nfrom backend.util.service import AppService, expose, get_service_client\n\nTEST_SERVICE_PORT = 8765\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import pytest\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from backend.util.service import AppService, expose, get_service_client\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "TEST_SERVICE_PORT = 8765\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        }
      ]
    }
  }
]