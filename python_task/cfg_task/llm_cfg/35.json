[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 32,
    "children": [
      {
        "decl_name": "test_type_conversion",
        "start_line": 3,
        "end_line": 31,
        "children": [],
        "code": "def test_type_conversion():\n    assert convert(5.5, int) == 5\n    assert convert(\"5.5\", int) == 5\n    assert convert([1, 2, 3], int) == 3\n\n    assert convert(\"5.5\", float) == 5.5\n    assert convert(5, float) == 5.0\n\n    assert convert(\"True\", bool) is True\n    assert convert(\"False\", bool) is False\n\n    assert convert(5, str) == \"5\"\n    assert convert({\"a\": 1, \"b\": 2}, str) == '{\"a\": 1, \"b\": 2}'\n    assert convert([1, 2, 3], str) == \"[1, 2, 3]\"\n\n    assert convert(\"5\", list) == [\"5\"]\n    assert convert((1, 2, 3), list) == [1, 2, 3]\n    assert convert({1, 2, 3}, list) == [1, 2, 3]\n\n    assert convert(\"5\", dict) == {\"value\": 5}\n    assert convert('{\"a\": 1, \"b\": 2}', dict) == {\"a\": 1, \"b\": 2}\n    assert convert([1, 2, 3], dict) == {0: 1, 1: 2, 2: 3}\n    assert convert((1, 2, 3), dict) == {0: 1, 1: 2, 2: 3}\n\n    from typing import List\n\n    assert convert(\"5\", List[int]) == [5]\n    assert convert(\"[5,4,2]\", List[int]) == [5, 4, 2]\n    assert convert([5, 4, 2], List[str]) == [\"5\", \"4\", \"2\"]\n",
        "cfg": {
          "nodes": [
            {
              "id": "test_type_conversion_1",
              "code": "def test_type_conversion():\n"
            },
            {
              "id": "test_type_conversion_2",
              "code": "    assert convert(5.5, int) == 5\n    assert convert(\"5.5\", int) == 5\n    assert convert([1, 2, 3], int) == 3\n"
            },
            {
              "id": "test_type_conversion_3",
              "code": "    assert convert(\"5.5\", float) == 5.5\n    assert convert(5, float) == 5.0\n"
            },
            {
              "id": "test_type_conversion_4",
              "code": "    assert convert(\"True\", bool) is True\n    assert convert(\"False\", bool) is False\n"
            },
            {
              "id": "test_type_conversion_5",
              "code": "    assert convert(5, str) == \"5\"\n    assert convert({\"a\": 1, \"b\": 2}, str) == '{\"a\": 1, \"b\": 2}'\n    assert convert([1, 2, 3], str) == \"[1, 2, 3]\"\n"
            },
            {
              "id": "test_type_conversion_6",
              "code": "    assert convert(\"5\", list) == [\"5\"]\n    assert convert((1, 2, 3), list) == [1, 2, 3]\n    assert convert({1, 2, 3}, list) == [1, 2, 3]\n"
            },
            {
              "id": "test_type_conversion_7",
              "code": "    assert convert(\"5\", dict) == {\"value\": 5}\n    assert convert('{\"a\": 1, \"b\": 2}', dict) == {\"a\": 1, \"b\": 2}\n    assert convert([1, 2, 3], dict) == {0: 1, 1: 2, 2: 3}\n    assert convert((1, 2, 3), dict) == {0: 1, 1: 2, 2: 3}\n"
            },
            {
              "id": "test_type_conversion_8",
              "code": "    from typing import List\n"
            },
            {
              "id": "test_type_conversion_9",
              "code": "    assert convert(\"5\", List[int]) == [5]\n    assert convert(\"[5,4,2]\", List[int]) == [5, 4, 2]\n    assert convert([5, 4, 2], List[str]) == [\"5\", \"4\", \"2\"]\n"
            }
          ],
          "edges": [
            {
              "from": "test_type_conversion_1",
              "to": "test_type_conversion_2"
            },
            {
              "from": "test_type_conversion_2",
              "to": "test_type_conversion_3"
            },
            {
              "from": "test_type_conversion_3",
              "to": "test_type_conversion_4"
            },
            {
              "from": "test_type_conversion_4",
              "to": "test_type_conversion_5"
            },
            {
              "from": "test_type_conversion_5",
              "to": "test_type_conversion_6"
            },
            {
              "from": "test_type_conversion_6",
              "to": "test_type_conversion_7"
            },
            {
              "from": "test_type_conversion_7",
              "to": "test_type_conversion_8"
            },
            {
              "from": "test_type_conversion_8",
              "to": "test_type_conversion_9"
            }
          ]
        }
      }
    ],
    "code": "from backend.util.type import convert\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from backend.util.type import convert\n"
        }
      ],
      "edges": []
    }
  }
]