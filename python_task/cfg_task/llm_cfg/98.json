[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 15,
    "children": [],
    "code": "# -*- coding: utf-8 -*-\n\nimport unittest\n\nfrom validate.format import error_message\nfrom validate.format import get_categories_content\nfrom validate.format import check_alphabetical_order\nfrom validate.format import check_title\nfrom validate.format import check_description, max_description_length\nfrom validate.format import check_auth, auth_keys\nfrom validate.format import check_https, https_keys\nfrom validate.format import check_cors, cors_keys\nfrom validate.format import check_entry\nfrom validate.format import check_file_format, min_entries_per_category, num_segments\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "# -*- coding: utf-8 -*-\n\nimport unittest\n\nfrom validate.format import error_message\nfrom validate.format import get_categories_content\nfrom validate.format import check_alphabetical_order\nfrom validate.format import check_title\nfrom validate.format import check_description, max_description_length\nfrom validate.format import check_auth, auth_keys\nfrom validate.format import check_https, https_keys\nfrom validate.format import check_cors, cors_keys\nfrom validate.format import check_entry\nfrom validate.format import check_file_format, min_entries_per_category, num_segments\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "TestValidadeFormat",
    "start_line": 16,
    "end_line": 466,
    "children": [
      {
        "decl_name": "TestValidadeFormat.test_error_message_return_and_return_type",
        "start_line": 18,
        "end_line": 39,
        "children": [],
        "code": "    def test_error_message_return_and_return_type(self):\n        line_num_unity = 1\n        line_num_ten = 10\n        line_num_hundred = 100\n        line_num_thousand = 1000\n\n        msg = 'This is a unit test'\n\n        err_msg_unity = error_message(line_num_unity, msg)\n        err_msg_ten = error_message(line_num_ten, msg)\n        err_msg_hundred = error_message(line_num_hundred, msg)\n        err_msg_thousand = error_message(line_num_thousand, msg)\n\n        self.assertIsInstance(err_msg_unity, str)\n        self.assertIsInstance(err_msg_ten, str)\n        self.assertIsInstance(err_msg_hundred, str)\n        self.assertIsInstance(err_msg_thousand, str)\n\n        self.assertEqual(err_msg_unity, '(L002) This is a unit test')\n        self.assertEqual(err_msg_ten, '(L011) This is a unit test')\n        self.assertEqual(err_msg_hundred, '(L101) This is a unit test')\n        self.assertEqual(err_msg_thousand, '(L1001) This is a unit test')\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_error_message_return_and_return_type_1",
              "code": "def test_error_message_return_and_return_type(self):\n"
            },
            {
              "id": "TestValidadeFormat.test_error_message_return_and_return_type_2",
              "code": "        line_num_unity = 1\n        line_num_ten = 10\n        line_num_hundred = 100\n        line_num_thousand = 1000\n\n"
            },
            {
              "id": "TestValidadeFormat.test_error_message_return_and_return_type_3",
              "code": "        msg = 'This is a unit test'\n\n"
            },
            {
              "id": "TestValidadeFormat.test_error_message_return_and_return_type_4",
              "code": "        err_msg_unity = error_message(line_num_unity, msg)\n        err_msg_ten = error_message(line_num_ten, msg)\n        err_msg_hundred = error_message(line_num_hundred, msg)\n        err_msg_thousand = error_message(line_num_thousand, msg)\n"
            },
            {
              "id": "TestValidadeFormat.test_error_message_return_and_return_type_5",
              "code": "\n"
            },
            {
              "id": "TestValidadeFormat.test_error_message_return_and_return_type_6",
              "code": "        self.assertIsInstance(err_msg_unity, str)\n        self.assertIsInstance(err_msg_ten, str)\n        self.assertIsInstance(err_msg_hundred, str)\n        self.assertIsInstance(err_msg_thousand, str)\n"
            },
            {
              "id": "TestValidadeFormat.test_error_message_return_and_return_type_7",
              "code": "\n"
            },
            {
              "id": "TestValidadeFormat.test_error_message_return_and_return_type_8",
              "code": "        self.assertEqual(err_msg_unity, '(L002) This is a unit test')\n        self.assertEqual(err_msg_ten, '(L011) This is a unit test')\n        self.assertEqual(err_msg_hundred, '(L101) This is a unit test')\n        self.assertEqual(err_msg_thousand, '(L1001) This is a unit test')\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_error_message_return_and_return_type_1",
              "to": "TestValidadeFormat.test_error_message_return_and_return_type_2"
            },
            {
              "from": "TestValidadeFormat.test_error_message_return_and_return_type_2",
              "to": "TestValidadeFormat.test_error_message_return_and_return_type_3"
            },
            {
              "from": "TestValidadeFormat.test_error_message_return_and_return_type_3",
              "to": "TestValidadeFormat.test_error_message_return_and_return_type_4"
            },
            {
              "from": "TestValidadeFormat.test_error_message_return_and_return_type_4",
              "to": "TestValidadeFormat.test_error_message_return_and_return_type_5"
            },
            {
              "from": "TestValidadeFormat.test_error_message_return_and_return_type_5",
              "to": "TestValidadeFormat.test_error_message_return_and_return_type_6"
            },
            {
              "from": "TestValidadeFormat.test_error_message_return_and_return_type_6",
              "to": "TestValidadeFormat.test_error_message_return_and_return_type_7"
            },
            {
              "from": "TestValidadeFormat.test_error_message_return_and_return_type_7",
              "to": "TestValidadeFormat.test_error_message_return_and_return_type_8"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories",
        "start_line": 41,
        "end_line": 68,
        "children": [],
        "code": "    def test_if_get_categories_content_return_correct_data_of_categories(self):\n        fake_contents = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        result = get_categories_content(fake_contents)\n        self.assertIsInstance(result, tuple)\n\n        categories, category_line_num = result\n        self.assertIsInstance(categories, dict)\n        self.assertIsInstance(category_line_num, dict)\n\n        expected_result = ({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})\n\n        for res, ex_res in zip(result, expected_result):\n\n            with self.subTest():\n                self.assertEqual(res, ex_res)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_1",
              "code": "def test_if_get_categories_content_return_correct_data_of_categories(self):\n"
            },
            {
              "id": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_2",
              "code": "        fake_contents = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n"
            },
            {
              "id": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_3",
              "code": "        result = get_categories_content(fake_contents)\n        self.assertIsInstance(result, tuple)\n"
            },
            {
              "id": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_4",
              "code": "        categories, category_line_num = result\n        self.assertIsInstance(categories, dict)\n        self.assertIsInstance(category_line_num, dict)\n"
            },
            {
              "id": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_5",
              "code": "        expected_result = ({'A': ['AA', 'AB'], 'B': ['BA', 'BB']}, {'A': 0, 'B': 6})\n"
            },
            {
              "id": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_6",
              "code": "        for res, ex_res in zip(result, expected_result):\n\n            with self.subTest():\n                self.assertEqual(res, ex_res)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_1",
              "to": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_2"
            },
            {
              "from": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_2",
              "to": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_3"
            },
            {
              "from": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_3",
              "to": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_4"
            },
            {
              "from": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_4",
              "to": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_5"
            },
            {
              "from": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_5",
              "to": "TestValidadeFormat.test_if_get_categories_content_return_correct_data_of_categories_6"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error",
        "start_line": 70,
        "end_line": 117,
        "children": [],
        "code": "    def test_if_check_alphabetical_order_return_correct_msg_error(self):\n        correct_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        incorrect_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n\n        err_msgs_1 = check_alphabetical_order(correct_lines)\n        err_msgs_2 = check_alphabetical_order(incorrect_lines)\n\n        self.assertIsInstance(err_msgs_1, list)\n        self.assertIsInstance(err_msgs_2, list)\n\n        self.assertEqual(len(err_msgs_1), 0)\n        self.assertEqual(len(err_msgs_2), 2)\n\n        expected_err_msgs = [\n            '(L001) A category is not alphabetical order',\n            '(L007) B category is not alphabetical order'\n        ]\n\n        for err_msg, ex_err_msg in zip(err_msgs_2, expected_err_msgs):\n\n            with self.subTest():\n                self.assertEqual(err_msg, ex_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_1",
              "code": "def test_if_check_alphabetical_order_return_correct_msg_error(self):\n"
            },
            {
              "id": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_2",
              "code": "        correct_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n"
            },
            {
              "id": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_3",
              "code": "        incorrect_lines = [\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n"
            },
            {
              "id": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_4",
              "code": "        err_msgs_1 = check_alphabetical_order(correct_lines)\n        err_msgs_2 = check_alphabetical_order(incorrect_lines)\n"
            },
            {
              "id": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_5",
              "code": "        self.assertIsInstance(err_msgs_1, list)\n        self.assertIsInstance(err_msgs_2, list)\n"
            },
            {
              "id": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_6",
              "code": "        self.assertEqual(len(err_msgs_1), 0)\n        self.assertEqual(len(err_msgs_2), 2)\n"
            },
            {
              "id": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_7",
              "code": "        expected_err_msgs = [\n            '(L001) A category is not alphabetical order',\n            '(L007) B category is not alphabetical order'\n        ]\n"
            },
            {
              "id": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_8",
              "code": "        for err_msg, ex_err_msg in zip(err_msgs_2, expected_err_msgs):\n\n            with self.subTest():\n                self.assertEqual(err_msg, ex_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_1",
              "to": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_2"
            },
            {
              "from": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_2",
              "to": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_3"
            },
            {
              "from": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_3",
              "to": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_4"
            },
            {
              "from": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_4",
              "to": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_5"
            },
            {
              "from": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_5",
              "to": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_6"
            },
            {
              "from": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_6",
              "to": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_7"
            },
            {
              "from": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_7",
              "to": "TestValidadeFormat.test_if_check_alphabetical_order_return_correct_msg_error_8"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_title_with_correct_title",
        "start_line": 119,
        "end_line": 126,
        "children": [],
        "code": "    def test_check_title_with_correct_title(self):\n        raw_title = '[A](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_title_with_correct_title_1",
              "code": "def test_check_title_with_correct_title(self):\n        raw_title = '[A](https://www.ex.com)'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_title_with_correct_title_2",
              "code": "        err_msgs = check_title(0, raw_title)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_title_with_correct_title_3",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_title_with_correct_title_1",
              "to": "TestValidadeFormat.test_check_title_with_correct_title_2"
            },
            {
              "from": "TestValidadeFormat.test_check_title_with_correct_title_2",
              "to": "TestValidadeFormat.test_check_title_with_correct_title_3"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect",
        "start_line": 128,
        "end_line": 139,
        "children": [],
        "code": "    def test_check_title_with_markdown_syntax_incorrect(self):\n        raw_title = '[A(https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'\n\n        self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_1",
              "code": "def test_check_title_with_markdown_syntax_incorrect(self):\n        raw_title = '[A(https://www.ex.com)'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_2",
              "code": "        err_msgs = check_title(0, raw_title)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_3",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_4",
              "code": "        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title syntax should be \"[TITLE](LINK)\"'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_5",
              "code": "        self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_1",
              "to": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_2"
            },
            {
              "from": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_2",
              "to": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_3"
            },
            {
              "from": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_3",
              "to": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_4"
            },
            {
              "from": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_4",
              "to": "TestValidadeFormat.test_check_title_with_markdown_syntax_incorrect_5"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title",
        "start_line": 141,
        "end_line": 152,
        "children": [],
        "code": "    def test_check_title_with_api_at_the_end_of_the_title(self):\n        raw_title = '[A API](https://www.ex.com)'\n\n        err_msgs = check_title(0, raw_title)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title should not end with \"... API\". Every entry is an API here!'\n\n        self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_1",
              "code": "def test_check_title_with_api_at_the_end_of_the_title(self):\n        raw_title = '[A API](https://www.ex.com)'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_2",
              "code": "        err_msgs = check_title(0, raw_title)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_3",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_4",
              "code": "        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) Title should not end with \"... API\". Every entry is an API here!'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_5",
              "code": "        self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_1",
              "to": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_2"
            },
            {
              "from": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_2",
              "to": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_3"
            },
            {
              "from": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_3",
              "to": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_4"
            },
            {
              "from": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_4",
              "to": "TestValidadeFormat.test_check_title_with_api_at_the_end_of_the_title_5"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_description_with_correct_description",
        "start_line": 154,
        "end_line": 161,
        "children": [],
        "code": "    def test_check_description_with_correct_description(self):\n        desc = 'This is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_description_with_correct_description_1",
              "code": "def test_check_description_with_correct_description(self):\n        desc = 'This is a fake description'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_with_correct_description_2",
              "code": "        err_msgs = check_description(0, desc)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_with_correct_description_3",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_description_with_correct_description_1",
              "to": "TestValidadeFormat.test_check_description_with_correct_description_2"
            },
            {
              "from": "TestValidadeFormat.test_check_description_with_correct_description_2",
              "to": "TestValidadeFormat.test_check_description_with_correct_description_3"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized",
        "start_line": 163,
        "end_line": 175,
        "children": [],
        "code": "    def test_check_description_with_first_char_is_not_capitalized(self):\n        desc = 'this is a fake description'\n\n        err_msgs = check_description(0, desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        \n        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) first character of description is not capitalized'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_1",
              "code": "def test_check_description_with_first_char_is_not_capitalized(self):\n        desc = 'this is a fake description'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_2",
              "code": "        err_msgs = check_description(0, desc)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_3",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_4",
              "code": "        err_msg = err_msgs[0]\n        expected_err_msg = '(L001) first character of description is not capitalized'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_5",
              "code": "        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_1",
              "to": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_2"
            },
            {
              "from": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_2",
              "to": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_3"
            },
            {
              "from": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_3",
              "to": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_4"
            },
            {
              "from": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_4",
              "to": "TestValidadeFormat.test_check_description_with_first_char_is_not_capitalized_5"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end",
        "start_line": 177,
        "end_line": 194,
        "children": [],
        "code": "    def test_check_description_with_punctuation_in_the_end(self):\n        base_desc = 'This is a fake description'\n        punctuation = r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\"\n        desc_with_punc = [base_desc + punc for punc in punctuation]\n        \n        for desc in desc_with_punc:\n\n            with self.subTest():\n                err_msgs = check_description(0, desc)\n\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end_1",
              "code": "def test_check_description_with_punctuation_in_the_end(self):\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end_2",
              "code": "        base_desc = 'This is a fake description'\n        punctuation = r\"\"\"!\"#$%&'*+,-./:;<=>?@[\\]^_`{|}~\"\"\"\n        desc_with_punc = [base_desc + punc for punc in punctuation]\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end_3",
              "code": "        for desc in desc_with_punc:\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end_4",
              "code": "            with self.subTest():\n                err_msgs = check_description(0, desc)\n\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n        \n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) description should not end with {desc[-1]}'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end_1",
              "to": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end_2"
            },
            {
              "from": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end_2",
              "to": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end_3"
            },
            {
              "from": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end_3",
              "to": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end_4"
            },
            {
              "from": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end_4",
              "to": "TestValidadeFormat.test_check_description_with_punctuation_in_the_end_3"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit",
        "start_line": 196,
        "end_line": 209,
        "children": [],
        "code": "    def test_check_description_that_exceeds_the_character_limit(self):\n        long_desc = 'Desc' * max_description_length\n        long_desc_length = len(long_desc)\n\n        err_msgs = check_description(0, long_desc)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n\n        err_msg = err_msgs[0]\n        expected_err_msg = f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'\n\n        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_1",
              "code": "def test_check_description_that_exceeds_the_character_limit(self):\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_2",
              "code": "        long_desc = 'Desc' * max_description_length\n        long_desc_length = len(long_desc)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_3",
              "code": "        err_msgs = check_description(0, long_desc)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_4",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_5",
              "code": "        err_msg = err_msgs[0]\n        expected_err_msg = f'(L001) description should not exceed {max_description_length} characters (currently {long_desc_length})'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_6",
              "code": "        self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_1",
              "to": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_2"
            },
            {
              "from": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_2",
              "to": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_3"
            },
            {
              "from": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_3",
              "to": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_4"
            },
            {
              "from": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_4",
              "to": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_5"
            },
            {
              "from": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_5",
              "to": "TestValidadeFormat.test_check_description_that_exceeds_the_character_limit_6"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_auth_with_valid_auth",
        "start_line": 211,
        "end_line": 220,
        "children": [],
        "code": "    def test_check_auth_with_valid_auth(self):\n        auth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']\n        auth_valid.append('No')\n\n        for auth in auth_valid:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_auth_with_valid_auth_1",
              "code": "def test_check_auth_with_valid_auth(self):\n        auth_valid = [f'`{auth}`' for auth in auth_keys if auth != 'No']\n        auth_valid.append('No')\n\n"
            },
            {
              "id": "TestValidadeFormat.test_check_auth_with_valid_auth_2",
              "code": "        for auth in auth_valid:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_auth_with_valid_auth_1",
              "to": "TestValidadeFormat.test_check_auth_with_valid_auth_2"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_auth_without_backtick",
        "start_line": 222,
        "end_line": 235,
        "children": [],
        "code": "    def test_check_auth_without_backtick(self):\n        auth_without_backtick = [auth for auth in auth_keys if auth != 'No']\n\n        for auth in auth_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_auth_without_backtick_1",
              "code": "def test_check_auth_without_backtick(self):\n        auth_without_backtick = [auth for auth in auth_keys if auth != 'No']\n"
            },
            {
              "id": "TestValidadeFormat.test_check_auth_without_backtick_2",
              "code": "        for auth in auth_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_auth_without_backtick_3",
              "code": "                err_msg = err_msgs[0]\n                expected_err_msg = '(L001) auth value is not enclosed with `backticks`'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_auth_without_backtick_1",
              "to": "TestValidadeFormat.test_check_auth_without_backtick_2"
            },
            {
              "from": "TestValidadeFormat.test_check_auth_without_backtick_2",
              "to": "TestValidadeFormat.test_check_auth_without_backtick_3"
            },
            {
              "from": "TestValidadeFormat.test_check_auth_without_backtick_3",
              "to": "TestValidadeFormat.test_check_auth_without_backtick_2"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_auth_with_invalid_auth",
        "start_line": 237,
        "end_line": 268,
        "children": [],
        "code": "    def test_check_auth_with_invalid_auth(self):\n        auth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']\n        auth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']\n\n        for auth in auth_invalid_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n\n                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n\n                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)\n\n        for auth in auth_invalid_with_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_auth_with_invalid_auth_1",
              "code": "def test_check_auth_with_invalid_auth(self):\n        auth_invalid_without_backtick = ['Yes', 'yes', 'no', 'random', 'Unknown']\n        auth_invalid_with_backtick = ['`Yes`', '`yes`', '`no`', '`random`', '`Unknown`']\n\n"
            },
            {
              "id": "TestValidadeFormat.test_check_auth_with_invalid_auth_2",
              "code": "        for auth in auth_invalid_without_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 2)\n\n"
            },
            {
              "id": "TestValidadeFormat.test_check_auth_with_invalid_auth_3",
              "code": "                err_msg_1 = err_msgs[0]\n                err_msg_2 = err_msgs[1]\n\n"
            },
            {
              "id": "TestValidadeFormat.test_check_auth_with_invalid_auth_4",
              "code": "                expected_err_msg_1 = f'(L001) auth value is not enclosed with `backticks`'\n                expected_err_msg_2 = f'(L001) {auth} is not a valid Auth option'\n\n"
            },
            {
              "id": "TestValidadeFormat.test_check_auth_with_invalid_auth_5",
              "code": "                self.assertIsInstance(err_msg_1, str)\n                self.assertIsInstance(err_msg_2, str)\n                self.assertEqual(err_msg_1, expected_err_msg_1)\n                self.assertEqual(err_msg_2, expected_err_msg_2)\n\n"
            },
            {
              "id": "TestValidadeFormat.test_check_auth_with_invalid_auth_6",
              "code": "        for auth in auth_invalid_with_backtick:\n            with self.subTest():\n                err_msgs = check_auth(0, auth)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n"
            },
            {
              "id": "TestValidadeFormat.test_check_auth_with_invalid_auth_7",
              "code": "                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {auth} is not a valid Auth option'\n\n"
            },
            {
              "id": "TestValidadeFormat.test_check_auth_with_invalid_auth_8",
              "code": "                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_auth_with_invalid_auth_1",
              "to": "TestValidadeFormat.test_check_auth_with_invalid_auth_2"
            },
            {
              "from": "TestValidadeFormat.test_check_auth_with_invalid_auth_2",
              "to": "TestValidadeFormat.test_check_auth_with_invalid_auth_3"
            },
            {
              "from": "TestValidadeFormat.test_check_auth_with_invalid_auth_3",
              "to": "TestValidadeFormat.test_check_auth_with_invalid_auth_4"
            },
            {
              "from": "TestValidadeFormat.test_check_auth_with_invalid_auth_4",
              "to": "TestValidadeFormat.test_check_auth_with_invalid_auth_5"
            },
            {
              "from": "TestValidadeFormat.test_check_auth_with_invalid_auth_5",
              "to": "TestValidadeFormat.test_check_auth_with_invalid_auth_2"
            },
            {
              "from": "TestValidadeFormat.test_check_auth_with_invalid_auth_5",
              "to": "TestValidadeFormat.test_check_auth_with_invalid_auth_6"
            },
            {
              "from": "TestValidadeFormat.test_check_auth_with_invalid_auth_6",
              "to": "TestValidadeFormat.test_check_auth_with_invalid_auth_7"
            },
            {
              "from": "TestValidadeFormat.test_check_auth_with_invalid_auth_7",
              "to": "TestValidadeFormat.test_check_auth_with_invalid_auth_8"
            },
            {
              "from": "TestValidadeFormat.test_check_auth_with_invalid_auth_8",
              "to": "TestValidadeFormat.test_check_auth_with_invalid_auth_6"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_https_with_valid_https",
        "start_line": 270,
        "end_line": 276,
        "children": [],
        "code": "    def test_check_https_with_valid_https(self):\n        for https in https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_https_with_valid_https_1",
              "code": "def test_check_https_with_valid_https(self):\n"
            },
            {
              "id": "TestValidadeFormat.test_check_https_with_valid_https_2",
              "code": "        for https in https_keys:\n"
            },
            {
              "id": "TestValidadeFormat.test_check_https_with_valid_https_3",
              "code": "            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_https_with_valid_https_1",
              "to": "TestValidadeFormat.test_check_https_with_valid_https_2"
            },
            {
              "from": "TestValidadeFormat.test_check_https_with_valid_https_2",
              "to": "TestValidadeFormat.test_check_https_with_valid_https_3"
            },
            {
              "from": "TestValidadeFormat.test_check_https_with_valid_https_3",
              "to": "TestValidadeFormat.test_check_https_with_valid_https_2"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_https_with_invalid_https",
        "start_line": 278,
        "end_line": 291,
        "children": [],
        "code": "    def test_check_https_with_invalid_https(self):\n        invalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']\n\n        for https in invalid_https_keys:\n            with self.subTest():\n                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_https_with_invalid_https_1",
              "code": "def test_check_https_with_invalid_https(self):\n        invalid_https_keys = ['yes', 'no', 'Unknown', 'https', 'http']\n"
            },
            {
              "id": "TestValidadeFormat.test_check_https_with_invalid_https_2",
              "code": "        for https in invalid_https_keys:\n            with self.subTest():\n"
            },
            {
              "id": "TestValidadeFormat.test_check_https_with_invalid_https_3",
              "code": "                err_msgs = check_https(0, https)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_https_with_invalid_https_4",
              "code": "                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {https} is not a valid HTTPS option'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_https_with_invalid_https_5",
              "code": "                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_https_with_invalid_https_1",
              "to": "TestValidadeFormat.test_check_https_with_invalid_https_2"
            },
            {
              "from": "TestValidadeFormat.test_check_https_with_invalid_https_2",
              "to": "TestValidadeFormat.test_check_https_with_invalid_https_3"
            },
            {
              "from": "TestValidadeFormat.test_check_https_with_invalid_https_3",
              "to": "TestValidadeFormat.test_check_https_with_invalid_https_4"
            },
            {
              "from": "TestValidadeFormat.test_check_https_with_invalid_https_4",
              "to": "TestValidadeFormat.test_check_https_with_invalid_https_5"
            },
            {
              "from": "TestValidadeFormat.test_check_https_with_invalid_https_5",
              "to": "TestValidadeFormat.test_check_https_with_invalid_https_2"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_cors_with_valid_cors",
        "start_line": 293,
        "end_line": 299,
        "children": [],
        "code": "    def test_check_cors_with_valid_cors(self):\n        for cors in cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_cors_with_valid_cors_1",
              "code": "def test_check_cors_with_valid_cors(self):\n"
            },
            {
              "id": "TestValidadeFormat.test_check_cors_with_valid_cors_2",
              "code": "        for cors in cors_keys:\n"
            },
            {
              "id": "TestValidadeFormat.test_check_cors_with_valid_cors_3",
              "code": "            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 0)\n                self.assertEqual(err_msgs, [])\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_cors_with_valid_cors_1",
              "to": "TestValidadeFormat.test_check_cors_with_valid_cors_2"
            },
            {
              "from": "TestValidadeFormat.test_check_cors_with_valid_cors_2",
              "to": "TestValidadeFormat.test_check_cors_with_valid_cors_3"
            },
            {
              "from": "TestValidadeFormat.test_check_cors_with_valid_cors_3",
              "to": "TestValidadeFormat.test_check_cors_with_valid_cors_2"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_cors_with_invalid_cors",
        "start_line": 301,
        "end_line": 314,
        "children": [],
        "code": "    def test_check_cors_with_invalid_cors(self):\n        invalid_cors_keys = ['yes', 'no', 'unknown', 'cors']\n\n        for cors in invalid_cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {cors} is not a valid CORS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_cors_with_invalid_cors_1",
              "code": "def test_check_cors_with_invalid_cors(self):\n        invalid_cors_keys = ['yes', 'no', 'unknown', 'cors']\n"
            },
            {
              "id": "TestValidadeFormat.test_check_cors_with_invalid_cors_2",
              "code": "        for cors in invalid_cors_keys:\n            with self.subTest():\n                err_msgs = check_cors(0, cors)\n                self.assertIsInstance(err_msgs, list)\n                self.assertEqual(len(err_msgs), 1)\n\n                err_msg = err_msgs[0]\n                expected_err_msg = f'(L001) {cors} is not a valid CORS option'\n\n                self.assertIsInstance(err_msg, str)\n                self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_cors_with_invalid_cors_1",
              "to": "TestValidadeFormat.test_check_cors_with_invalid_cors_2"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_entry_with_correct_segments",
        "start_line": 316,
        "end_line": 323,
        "children": [],
        "code": "    def test_check_entry_with_correct_segments(self):\n        correct_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']\n\n        err_msgs = check_entry(0, correct_segments)\n        \n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_entry_with_correct_segments_1",
              "code": "def test_check_entry_with_correct_segments(self):\n        correct_segments = ['[A](https://www.ex.com)', 'Desc', '`apiKey`', 'Yes', 'Yes']\n"
            },
            {
              "id": "TestValidadeFormat.test_check_entry_with_correct_segments_2",
              "code": "        err_msgs = check_entry(0, correct_segments)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_entry_with_correct_segments_3",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_entry_with_correct_segments_1",
              "to": "TestValidadeFormat.test_check_entry_with_correct_segments_2"
            },
            {
              "from": "TestValidadeFormat.test_check_entry_with_correct_segments_2",
              "to": "TestValidadeFormat.test_check_entry_with_correct_segments_3"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_entry_with_incorrect_segments",
        "start_line": 325,
        "end_line": 344,
        "children": [],
        "code": "    def test_check_entry_with_incorrect_segments(self):\n        incorrect_segments = ['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes', 'yes']\n\n        err_msgs = check_entry(0, incorrect_segments)\n        expected_err_msgs = [\n            '(L001) Title should not end with \"... API\". Every entry is an API here!',\n            '(L001) first character of description is not capitalized',\n            '(L001) description should not end with .',\n            '(L001) auth value is not enclosed with `backticks`',\n            '(L001) yes is not a valid Auth option',\n            '(L001) yes is not a valid HTTPS option',\n            '(L001) yes is not a valid CORS option'\n        ]\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 7)\n        for err_msg in err_msgs:\n            with self.subTest():\n                self.assertIsInstance(err_msg, str)\n        self.assertEqual(err_msgs, expected_err_msgs)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_entry_with_incorrect_segments_1",
              "code": "def test_check_entry_with_incorrect_segments(self):\n        incorrect_segments = ['[A API](https://www.ex.com)', 'desc.', 'yes', 'yes', 'yes']\n"
            },
            {
              "id": "TestValidadeFormat.test_check_entry_with_incorrect_segments_2",
              "code": "        err_msgs = check_entry(0, incorrect_segments)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_entry_with_incorrect_segments_3",
              "code": "        expected_err_msgs = [\n            '(L001) Title should not end with \"... API\". Every entry is an API here!',\n            '(L001) first character of description is not capitalized',\n            '(L001) description should not end with .',\n            '(L001) auth value is not enclosed with `backticks`',\n            '(L001) yes is not a valid Auth option',\n            '(L001) yes is not a valid HTTPS option',\n            '(L001) yes is not a valid CORS option'\n        ]\n"
            },
            {
              "id": "TestValidadeFormat.test_check_entry_with_incorrect_segments_4",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 7)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_entry_with_incorrect_segments_5",
              "code": "        for err_msg in err_msgs:\n            with self.subTest():\n                self.assertIsInstance(err_msg, str)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_entry_with_incorrect_segments_6",
              "code": "        self.assertEqual(err_msgs, expected_err_msgs)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_entry_with_incorrect_segments_1",
              "to": "TestValidadeFormat.test_check_entry_with_incorrect_segments_2"
            },
            {
              "from": "TestValidadeFormat.test_check_entry_with_incorrect_segments_2",
              "to": "TestValidadeFormat.test_check_entry_with_incorrect_segments_3"
            },
            {
              "from": "TestValidadeFormat.test_check_entry_with_incorrect_segments_3",
              "to": "TestValidadeFormat.test_check_entry_with_incorrect_segments_4"
            },
            {
              "from": "TestValidadeFormat.test_check_entry_with_incorrect_segments_4",
              "to": "TestValidadeFormat.test_check_entry_with_incorrect_segments_5"
            },
            {
              "from": "TestValidadeFormat.test_check_entry_with_incorrect_segments_5",
              "to": "TestValidadeFormat.test_check_entry_with_incorrect_segments_6"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_file_format_with_correct_format",
        "start_line": 346,
        "end_line": 371,
        "children": [],
        "code": "    def test_check_file_format_with_correct_format(self):\n        correct_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        err_msgs = check_file_format(lines=correct_format)\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_file_format_with_correct_format_1",
              "code": "def test_check_file_format_with_correct_format(self):\n        correct_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_with_correct_format_2",
              "code": "        err_msgs = check_file_format(lines=correct_format)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_with_correct_format_3",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 0)\n        self.assertEqual(err_msgs, [])\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_file_format_with_correct_format_1",
              "to": "TestValidadeFormat.test_check_file_format_with_correct_format_2"
            },
            {
              "from": "TestValidadeFormat.test_check_file_format_with_correct_format_2",
              "to": "TestValidadeFormat.test_check_file_format_with_correct_format_3"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index",
        "start_line": 373,
        "end_line": 391,
        "children": [],
        "code": "    def test_check_file_format_with_category_header_not_added_to_index(self):\n        incorrect_format = [\n            '## Index',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = '(L003) category header (A) not added to Index section'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_1",
              "code": "def test_check_file_format_with_category_header_not_added_to_index(self):\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_2",
              "code": "        incorrect_format = [\n            '## Index',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_3",
              "code": "        err_msgs = check_file_format(lines=incorrect_format)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_4",
              "code": "        expected_err_msg = '(L003) category header (A) not added to Index section'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_5",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_1",
              "to": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_2"
            },
            {
              "from": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_2",
              "to": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_3"
            },
            {
              "from": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_3",
              "to": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_4"
            },
            {
              "from": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_4",
              "to": "TestValidadeFormat.test_check_file_format_with_category_header_not_added_to_index_5"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries",
        "start_line": 393,
        "end_line": 421,
        "children": [],
        "code": "    def test_check_file_format_with_category_without_min_entries(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n\n        category_with_err = 'A'\n        num_in_category = 1\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_1",
              "code": "def test_check_file_format_with_category_without_min_entries(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '* [B](#b)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '',\n            '### B',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [BA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [BC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |'\n        ]\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_2",
              "code": "        category_with_err = 'A'\n        num_in_category = 1\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_3",
              "code": "        err_msgs = check_file_format(lines=incorrect_format)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_4",
              "code": "        expected_err_msg = f'(L005) {category_with_err} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_5",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_1",
              "to": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_2"
            },
            {
              "from": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_2",
              "to": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_3"
            },
            {
              "from": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_3",
              "to": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_4"
            },
            {
              "from": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_4",
              "to": "TestValidadeFormat.test_check_file_format_with_category_without_min_entries_5"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_file_format_entry_without_all_necessary_columns",
        "start_line": 423,
        "end_line": 444,
        "children": [],
        "code": "    def test_check_file_format_entry_without_all_necessary_columns(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        current_segments_num = 3\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_file_format_entry_without_all_necessary_columns_1",
              "code": "def test_check_file_format_entry_without_all_necessary_columns(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AB](https://www.ex.com) | Desc | `apiKey` |',  # missing https and cors\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_entry_without_all_necessary_columns_2",
              "code": "        current_segments_num = 3\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_entry_without_all_necessary_columns_3",
              "code": "        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L008) entry does not have all the required columns (have {current_segments_num}, need {num_segments})'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_entry_without_all_necessary_columns_4",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_file_format_entry_without_all_necessary_columns_1",
              "to": "TestValidadeFormat.test_check_file_format_entry_without_all_necessary_columns_2"
            },
            {
              "from": "TestValidadeFormat.test_check_file_format_entry_without_all_necessary_columns_2",
              "to": "TestValidadeFormat.test_check_file_format_entry_without_all_necessary_columns_3"
            },
            {
              "from": "TestValidadeFormat.test_check_file_format_entry_without_all_necessary_columns_3",
              "to": "TestValidadeFormat.test_check_file_format_entry_without_all_necessary_columns_4"
            }
          ]
        }
      },
      {
        "decl_name": "TestValidadeFormat.test_check_file_format_without_1_space_between_the_segments",
        "start_line": 446,
        "end_line": 465,
        "children": [],
        "code": "    def test_check_file_format_without_1_space_between_the_segments(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n\n        err_msgs = check_file_format(lines=incorrect_format)\n        expected_err_msg = f'(L007) each segment must start and end with exactly 1 space'\n\n        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TestValidadeFormat.test_check_file_format_without_1_space_between_the_segments_1",
              "code": "def test_check_file_format_without_1_space_between_the_segments(self):\n        incorrect_format = [\n            '## Index',\n            '* [A](#a)',\n            '',\n            '### A',\n            'API | Description | Auth | HTTPS | CORS |',\n            '|---|---|---|---|---|',\n            '| [AA](https://www.ex.com) | Desc |`apiKey`| Yes | Yes |',  # space between segment of auth column missing\n            '| [AB](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n            '| [AC](https://www.ex.com) | Desc | `apiKey` | Yes | Yes |',\n        ]\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_without_1_space_between_the_segments_2",
              "code": "        err_msgs = check_file_format(lines=incorrect_format)\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_without_1_space_between_the_segments_3",
              "code": "        expected_err_msg = f'(L007) each segment must start and end with exactly 1 space'\n"
            },
            {
              "id": "TestValidadeFormat.test_check_file_format_without_1_space_between_the_segments_4",
              "code": "        self.assertIsInstance(err_msgs, list)\n        self.assertEqual(len(err_msgs), 1)\n        err_msg = err_msgs[0]\n        self.assertEqual(err_msg, expected_err_msg)\n"
            }
          ],
          "edges": [
            {
              "from": "TestValidadeFormat.test_check_file_format_without_1_space_between_the_segments_1",
              "to": "TestValidadeFormat.test_check_file_format_without_1_space_between_the_segments_2"
            },
            {
              "from": "TestValidadeFormat.test_check_file_format_without_1_space_between_the_segments_2",
              "to": "TestValidadeFormat.test_check_file_format_without_1_space_between_the_segments_3"
            },
            {
              "from": "TestValidadeFormat.test_check_file_format_without_1_space_between_the_segments_3",
              "to": "TestValidadeFormat.test_check_file_format_without_1_space_between_the_segments_4"
            }
          ]
        }
      }
    ],
    "code": "class TestValidadeFormat(unittest.TestCase):\n    \n\n\n    \n\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "TestValidadeFormat_1",
          "code": "class TestValidadeFormat(unittest.TestCase):\n"
        }
      ],
      "edges": []
    }
  }
]