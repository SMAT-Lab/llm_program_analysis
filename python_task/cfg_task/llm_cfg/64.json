[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 93,
    "children": [
      {
        "decl_name": "generate_all_subsequences",
        "start_line": 13,
        "end_line": 14,
        "children": [],
        "code": "def generate_all_subsequences(sequence: list[Any]) -> None:\n    create_state_space_tree(sequence, [], 0)\n",
        "cfg": {
          "nodes": [
            {
              "id": "generate_all_subsequences_1",
              "code": "def generate_all_subsequences(sequence: list[Any]) -> None:\n    create_state_space_tree(sequence, [], 0)\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "create_state_space_tree",
        "start_line": 17,
        "end_line": 83,
        "children": [],
        "code": "def create_state_space_tree(\n    sequence: list[Any], current_subsequence: list[Any], index: int\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"\n\n    if index == len(sequence):\n        print(current_subsequence)\n        return\n\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.append(sequence[index])\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.pop()\n",
        "cfg": {
          "nodes": [
            {
              "id": "create_state_space_tree_1",
              "code": "def create_state_space_tree(\n    sequence: list[Any], current_subsequence: list[Any], index: int\n) -> None:\n"
            },
            {
              "id": "create_state_space_tree_2",
              "code": "    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"\n"
            },
            {
              "id": "create_state_space_tree_3",
              "code": "\n    if index == len(sequence):\n"
            },
            {
              "id": "create_state_space_tree_4",
              "code": "        print(current_subsequence)\n        return\n"
            },
            {
              "id": "create_state_space_tree_5",
              "code": "\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n"
            },
            {
              "id": "create_state_space_tree_6",
              "code": "    current_subsequence.append(sequence[index])\n"
            },
            {
              "id": "create_state_space_tree_7",
              "code": "    create_state_space_tree(sequence, current_subsequence, index + 1)\n"
            },
            {
              "id": "create_state_space_tree_8",
              "code": "    current_subsequence.pop()\n"
            }
          ],
          "edges": [
            {
              "from": "create_state_space_tree_1",
              "to": "create_state_space_tree_2"
            },
            {
              "from": "create_state_space_tree_2",
              "to": "create_state_space_tree_3"
            },
            {
              "from": "create_state_space_tree_3",
              "to": "create_state_space_tree_4"
            },
            {
              "from": "create_state_space_tree_3",
              "to": "create_state_space_tree_5"
            },
            {
              "from": "create_state_space_tree_5",
              "to": "create_state_space_tree_6"
            },
            {
              "from": "create_state_space_tree_6",
              "to": "create_state_space_tree_7"
            },
            {
              "from": "create_state_space_tree_7",
              "to": "create_state_space_tree_8"
            }
          ]
        }
      },
      {
        "decl_name": "if __name__ == \"__main__\"",
        "start_line": 86,
        "end_line": 92,
        "children": [],
        "code": "if __name__ == \"__main__\":\n    seq: list[Any] = [1, 2, 3]\n    generate_all_subsequences(seq)\n\n    seq.clear()\n    seq.extend([\"A\", \"B\", \"C\"])\n    generate_all_subsequences(seq)\n",
        "cfg": {
          "nodes": [
            {
              "id": "if __name__ == \"__main__\"_1",
              "code": "if __name__ == \"__main__\":\n    seq: list[Any] = [1, 2, 3]\n    generate_all_subsequences(seq)\n"
            },
            {
              "id": "if __name__ == \"__main__\"_2",
              "code": "    seq.clear()\n    seq.extend([\"A\", \"B\", \"C\"])\n    generate_all_subsequences(seq)\n"
            }
          ],
          "edges": [
            {
              "from": "if __name__ == \"__main__\"_1",
              "to": "if __name__ == \"__main__\"_2"
            }
          ]
        }
      }
    ],
    "code": "\"\"\"\nIn this problem, we want to determine all possible subsequences\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(2^n),\nwhere n denotes the length of the given sequence.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any\n\n\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "\"\"\"\nIn this problem, we want to determine all possible subsequences\nof the given sequence. We use backtracking to solve this problem.\n\nTime complexity: O(2^n),\nwhere n denotes the length of the given sequence.\n\"\"\"\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from __future__ import annotations\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "from typing import Any\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        }
      ]
    }
  }
]