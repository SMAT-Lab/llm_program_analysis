[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 39,
    "children": [
      {
        "decl_name": "DiscordCredentialsField",
        "start_line": 21,
        "end_line": 22,
        "children": [],
        "code": "def DiscordCredentialsField() -> DiscordCredentials:\n    return CredentialsField(description=\"Discord bot token\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "DiscordCredentialsField_1",
              "code": "def DiscordCredentialsField() -> DiscordCredentials:\n    return CredentialsField(description=\"Discord bot token\")\n"
            }
          ],
          "edges": []
        }
      }
    ],
    "code": "import asyncio\nfrom typing import Literal\n\nimport aiohttp\nimport discord\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nDiscordCredentials = CredentialsMetaInput[\n    Literal[ProviderName.DISCORD], Literal[\"api_key\"]\n]\n\n\n\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"discord\",\n    api_key=SecretStr(\"test_api_key\"),\n    title=\"Mock Discord API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import asyncio\nfrom typing import Literal\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "import aiohttp\nimport discord\nfrom pydantic import SecretStr\n\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "DiscordCredentials = CredentialsMetaInput[\n    Literal[ProviderName.DISCORD], Literal[\"api_key\"]\n]\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"discord\",\n    api_key=SecretStr(\"test_api_key\"),\n    title=\"Mock Discord API key\",\n    expires_at=None,\n)\n"
        },
        {
          "id": "GlobalBlock_6",
          "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        },
        {
          "from": "GlobalBlock_5",
          "to": "GlobalBlock_6"
        }
      ]
    }
  },
  {
    "decl_name": "ReadDiscordMessagesBlock",
    "start_line": 40,
    "end_line": 161,
    "children": [
      {
        "decl_name": "ReadDiscordMessagesBlock.Input",
        "start_line": 41,
        "end_line": 42,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n",
        "cfg": {
          "nodes": [
            {
              "id": "ReadDiscordMessagesBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "ReadDiscordMessagesBlock.Output",
        "start_line": 44,
        "end_line": 53,
        "children": [],
        "code": "    class Output(BlockSchema):\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n        username: str = SchemaField(\n            description=\"The username of the user who sent the message\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "ReadDiscordMessagesBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.Output_2",
              "code": "        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.Output_3",
              "code": "        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.Output_4",
              "code": "        username: str = SchemaField(\n            description=\"The username of the user who sent the message\"\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "ReadDiscordMessagesBlock.Output_1",
              "to": "ReadDiscordMessagesBlock.Output_2"
            },
            {
              "from": "ReadDiscordMessagesBlock.Output_2",
              "to": "ReadDiscordMessagesBlock.Output_3"
            },
            {
              "from": "ReadDiscordMessagesBlock.Output_3",
              "to": "ReadDiscordMessagesBlock.Output_4"
            }
          ]
        }
      },
      {
        "decl_name": "ReadDiscordMessagesBlock.__init__",
        "start_line": 55,
        "end_line": 78,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "ReadDiscordMessagesBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"df06086a-d5ac-4abb-9996-2ad0acb2eff7\",\n            input_schema=ReadDiscordMessagesBlock.Input,  # Assign input schema\n            output_schema=ReadDiscordMessagesBlock.Output,  # Assign output schema\n            description=\"Reads messages from a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"continuous_read\": False,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"message_content\",\n                    \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                ),\n                (\"channel_name\", \"general\"),\n                (\"username\", \"test_user\"),\n            ],\n            test_mock={\n                \"run_bot\": lambda token: asyncio.Future()  # Create a Future object for mocking\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "ReadDiscordMessagesBlock.run_bot",
        "start_line": 80,
        "end_line": 113,
        "children": [
          {
            "decl_name": "on_ready",
            "start_line": 91,
            "end_line": 92,
            "children": [],
            "code": "        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n",
            "cfg": {
              "nodes": [
                {
                  "id": "on_ready_1",
                  "code": "async def on_ready():\n            print(f\"Logged in as {client.user}\")\n"
                }
              ],
              "edges": []
            }
          },
          {
            "decl_name": "on_message",
            "start_line": 95,
            "end_line": 111,
            "children": [],
            "code": "        async def on_message(message):\n            if message.author == client.user:\n                return\n\n            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n\n            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n\n            await client.close()\n",
            "cfg": {
              "nodes": [
                {
                  "id": "on_message_1",
                  "code": "async def on_message(message):\n"
                },
                {
                  "id": "on_message_2",
                  "code": "            if message.author == client.user:\n                return\n"
                },
                {
                  "id": "on_message_3",
                  "code": "            self.output_data = message.content\n            self.channel_name = message.channel.name\n            self.username = message.author.name\n"
                },
                {
                  "id": "on_message_4",
                  "code": "            if message.attachments:\n                attachment = message.attachments[0]  # Process the first attachment\n"
                },
                {
                  "id": "on_message_5",
                  "code": "                if attachment.filename.endswith((\".txt\", \".py\")):\n                    async with aiohttp.ClientSession() as session:\n                        async with session.get(attachment.url) as response:\n                            file_content = await response.text()\n                            self.output_data += f\"\\n\\nFile from user: {attachment.filename}\\nContent: {file_content}\"\n"
                },
                {
                  "id": "on_message_6",
                  "code": "            await client.close()\n"
                }
              ],
              "edges": [
                {
                  "from": "on_message_1",
                  "to": "on_message_2"
                },
                {
                  "from": "on_message_2",
                  "to": "on_message_3"
                },
                {
                  "from": "on_message_2",
                  "to": "on_message_6"
                },
                {
                  "from": "on_message_3",
                  "to": "on_message_4"
                },
                {
                  "from": "on_message_4",
                  "to": "on_message_5"
                },
                {
                  "from": "on_message_4",
                  "to": "on_message_6"
                },
                {
                  "from": "on_message_5",
                  "to": "on_message_6"
                }
              ]
            }
          }
        ],
        "code": "    async def run_bot(self, token: SecretStr):\n        intents = discord.Intents.default()\n        intents.message_content = True\n\n        client = discord.Client(intents=intents)\n\n        self.output_data = None\n        self.channel_name = None\n        self.username = None\n\n        @client.event\n\n        @client.event\n\n        await client.start(token.get_secret_value())\n",
        "cfg": {
          "nodes": [
            {
              "id": "ReadDiscordMessagesBlock.run_bot_1",
              "code": "async def run_bot(self, token: SecretStr):\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.run_bot_2",
              "code": "        intents = discord.Intents.default()\n        intents.message_content = True\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.run_bot_3",
              "code": "        client = discord.Client(intents=intents)\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.run_bot_4",
              "code": "        self.output_data = None\n        self.channel_name = None\n        self.username = None\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.run_bot_5",
              "code": "        @client.event\n\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.run_bot_6",
              "code": "        @client.event\n\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.run_bot_7",
              "code": "        await client.start(token.get_secret_value())\n"
            }
          ],
          "edges": [
            {
              "from": "ReadDiscordMessagesBlock.run_bot_1",
              "to": "ReadDiscordMessagesBlock.run_bot_2"
            },
            {
              "from": "ReadDiscordMessagesBlock.run_bot_2",
              "to": "ReadDiscordMessagesBlock.run_bot_3"
            },
            {
              "from": "ReadDiscordMessagesBlock.run_bot_3",
              "to": "ReadDiscordMessagesBlock.run_bot_4"
            },
            {
              "from": "ReadDiscordMessagesBlock.run_bot_4",
              "to": "ReadDiscordMessagesBlock.run_bot_5"
            },
            {
              "from": "ReadDiscordMessagesBlock.run_bot_5",
              "to": "ReadDiscordMessagesBlock.run_bot_6"
            },
            {
              "from": "ReadDiscordMessagesBlock.run_bot_6",
              "to": "ReadDiscordMessagesBlock.run_bot_7"
            }
          ]
        }
      },
      {
        "decl_name": "ReadDiscordMessagesBlock.run",
        "start_line": 115,
        "end_line": 121,
        "children": [],
        "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        while True:\n            for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value\n            break\n",
        "cfg": {
          "nodes": [
            {
              "id": "ReadDiscordMessagesBlock.run_1",
              "code": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.run_2",
              "code": "        while True:\n            for output_name, output_value in self.__run(input_data, credentials):\n                yield output_name, output_value\n            break\n"
            }
          ],
          "edges": [
            {
              "from": "ReadDiscordMessagesBlock.run_1",
              "to": "ReadDiscordMessagesBlock.run_2"
            }
          ]
        }
      },
      {
        "decl_name": "ReadDiscordMessagesBlock.__run",
        "start_line": 123,
        "end_line": 160,
        "children": [],
        "code": "    def __run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")\n\n            if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n                raise ValueError(\"No message, channel name, or username received.\")\n\n            yield \"message_content\", self.output_data\n            yield \"channel_name\", self.channel_name\n            yield \"username\", self.username\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "ReadDiscordMessagesBlock.__run_1",
              "code": "def __run(self, input_data: Input, credentials: APIKeyCredentials) -> BlockOutput:\n        try:\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.__run_2",
              "code": "            loop = asyncio.get_event_loop()\n            future = self.run_bot(credentials.api_key)\n\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.__run_3",
              "code": "            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.__run_4",
              "code": "                future.set_result(\n                    {\n                        \"output_data\": \"Hello!\\n\\nFile from user: example.txt\\nContent: This is the content of the file.\",\n                        \"channel_name\": \"general\",\n                        \"username\": \"test_user\",\n                    }\n                )\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.__run_5",
              "code": "\n            result = loop.run_until_complete(future)\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.__run_6",
              "code": "\n            # For testing purposes, use the mocked result\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.__run_7",
              "code": "            if isinstance(result, dict):\n                self.output_data = result.get(\"output_data\")\n                self.channel_name = result.get(\"channel_name\")\n                self.username = result.get(\"username\")\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.__run_8",
              "code": "\n            if (\n                self.output_data is None\n                or self.channel_name is None\n                or self.username is None\n            ):\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.__run_9",
              "code": "                raise ValueError(\"No message, channel name, or username received.\")\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.__run_10",
              "code": "\n            yield \"message_content\", self.output_data\n            yield \"channel_name\", self.channel_name\n            yield \"username\", self.username\n\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.__run_11",
              "code": "        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n"
            },
            {
              "id": "ReadDiscordMessagesBlock.__run_12",
              "code": "        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")\n"
            }
          ],
          "edges": [
            {
              "from": "ReadDiscordMessagesBlock.__run_1",
              "to": "ReadDiscordMessagesBlock.__run_2"
            },
            {
              "from": "ReadDiscordMessagesBlock.__run_2",
              "to": "ReadDiscordMessagesBlock.__run_3"
            },
            {
              "from": "ReadDiscordMessagesBlock.__run_3",
              "to": "ReadDiscordMessagesBlock.__run_4"
            },
            {
              "from": "ReadDiscordMessagesBlock.__run_3",
              "to": "ReadDiscordMessagesBlock.__run_5"
            },
            {
              "from": "ReadDiscordMessagesBlock.__run_4",
              "to": "ReadDiscordMessagesBlock.__run_5"
            },
            {
              "from": "ReadDiscordMessagesBlock.__run_5",
              "to": "ReadDiscordMessagesBlock.__run_6"
            },
            {
              "from": "ReadDiscordMessagesBlock.__run_6",
              "to": "ReadDiscordMessagesBlock.__run_7"
            },
            {
              "from": "ReadDiscordMessagesBlock.__run_7",
              "to": "ReadDiscordMessagesBlock.__run_8"
            },
            {
              "from": "ReadDiscordMessagesBlock.__run_8",
              "to": "ReadDiscordMessagesBlock.__run_9"
            },
            {
              "from": "ReadDiscordMessagesBlock.__run_8",
              "to": "ReadDiscordMessagesBlock.__run_10"
            }
          ]
        }
      }
    ],
    "code": "class ReadDiscordMessagesBlock(Block):\n\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "ReadDiscordMessagesBlock_1",
          "code": "class ReadDiscordMessagesBlock(Block):\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "SendDiscordMessageBlock",
    "start_line": 163,
    "end_line": 254,
    "children": [
      {
        "decl_name": "SendDiscordMessageBlock.Input",
        "start_line": 164,
        "end_line": 171,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "SendDiscordMessageBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: DiscordCredentials = DiscordCredentialsField()\n        message_content: str = SchemaField(\n            description=\"The content of the message received\"\n        )\n        channel_name: str = SchemaField(\n            description=\"The name of the channel the message was received from\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "SendDiscordMessageBlock.Output",
        "start_line": 173,
        "end_line": 176,
        "children": [],
        "code": "    class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "SendDiscordMessageBlock.Output_1",
              "code": "class Output(BlockSchema):\n        status: str = SchemaField(\n            description=\"The status of the operation (e.g., 'Message sent', 'Error')\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "SendDiscordMessageBlock.__init__",
        "start_line": 178,
        "end_line": 195,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "SendDiscordMessageBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"d0822ab5-9f8a-44a3-8971-531dd0178b6b\",\n            input_schema=SendDiscordMessageBlock.Input,  # Assign input schema\n            output_schema=SendDiscordMessageBlock.Output,  # Assign output schema\n            description=\"Sends a message to a Discord channel using a bot token.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"channel_name\": \"general\",\n                \"message_content\": \"Hello, Discord!\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[(\"status\", \"Message sent\")],\n            test_mock={\n                \"send_message\": lambda token, channel_name, message_content: asyncio.Future()\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "SendDiscordMessageBlock.send_message",
        "start_line": 197,
        "end_line": 218,
        "children": [
          {
            "decl_name": "on_ready",
            "start_line": 203,
            "end_line": 216,
            "children": [],
            "code": "        async def on_ready():\n            print(f\"Logged in as {client.user}\")\n            for guild in client.guilds:\n                for channel in guild.text_channels:\n                    if channel.name == channel_name:\n                        # Split message into chunks if it exceeds 2000 characters\n                        for chunk in self.chunk_message(message_content):\n                            await channel.send(chunk)\n                        self.output_data = \"Message sent\"\n                        await client.close()\n                        return\n\n            self.output_data = \"Channel not found\"\n            await client.close()\n",
            "cfg": {
              "nodes": [
                {
                  "id": "on_ready_1",
                  "code": "async def on_ready():\n            print(f\"Logged in as {client.user}\")\n"
                },
                {
                  "id": "on_ready_2",
                  "code": "            for guild in client.guilds:\n"
                },
                {
                  "id": "on_ready_3",
                  "code": "                for channel in guild.text_channels:\n"
                },
                {
                  "id": "on_ready_4",
                  "code": "                    if channel.name == channel_name:\n"
                },
                {
                  "id": "on_ready_5",
                  "code": "                        # Split message into chunks if it exceeds 2000 characters\n"
                },
                {
                  "id": "on_ready_6",
                  "code": "                        for chunk in self.chunk_message(message_content):\n"
                },
                {
                  "id": "on_ready_7",
                  "code": "                            await channel.send(chunk)\n"
                },
                {
                  "id": "on_ready_8",
                  "code": "                        self.output_data = \"Message sent\"\n"
                },
                {
                  "id": "on_ready_9",
                  "code": "                        await client.close()\n                        return\n"
                },
                {
                  "id": "on_ready_10",
                  "code": "            self.output_data = \"Channel not found\"\n            await client.close()\n"
                }
              ],
              "edges": [
                {
                  "from": "on_ready_1",
                  "to": "on_ready_2"
                },
                {
                  "from": "on_ready_2",
                  "to": "on_ready_3"
                },
                {
                  "from": "on_ready_3",
                  "to": "on_ready_4"
                },
                {
                  "from": "on_ready_4",
                  "to": "on_ready_5"
                },
                {
                  "from": "on_ready_4",
                  "to": "on_ready_10"
                },
                {
                  "from": "on_ready_5",
                  "to": "on_ready_6"
                },
                {
                  "from": "on_ready_6",
                  "to": "on_ready_7"
                },
                {
                  "from": "on_ready_7",
                  "to": "on_ready_6"
                },
                {
                  "from": "on_ready_7",
                  "to": "on_ready_8"
                },
                {
                  "from": "on_ready_8",
                  "to": "on_ready_9"
                }
              ]
            }
          }
        ],
        "code": "    async def send_message(self, token: str, channel_name: str, message_content: str):\n        intents = discord.Intents.default()\n        intents.guilds = True  # Required for fetching guild/channel information\n        client = discord.Client(intents=intents)\n\n        @client.event\n\n        await client.start(token)\n",
        "cfg": {
          "nodes": [
            {
              "id": "SendDiscordMessageBlock.send_message_1",
              "code": "async def send_message(self, token: str, channel_name: str, message_content: str):\n"
            },
            {
              "id": "SendDiscordMessageBlock.send_message_2",
              "code": "        intents = discord.Intents.default()\n        intents.guilds = True  # Required for fetching guild/channel information\n        client = discord.Client(intents=intents)\n"
            },
            {
              "id": "SendDiscordMessageBlock.send_message_3",
              "code": "        @client.event\n"
            },
            {
              "id": "SendDiscordMessageBlock.send_message_4",
              "code": "        await client.start(token)\n"
            }
          ],
          "edges": [
            {
              "from": "SendDiscordMessageBlock.send_message_1",
              "to": "SendDiscordMessageBlock.send_message_2"
            },
            {
              "from": "SendDiscordMessageBlock.send_message_2",
              "to": "SendDiscordMessageBlock.send_message_3"
            },
            {
              "from": "SendDiscordMessageBlock.send_message_3",
              "to": "SendDiscordMessageBlock.send_message_4"
            }
          ]
        }
      },
      {
        "decl_name": "SendDiscordMessageBlock.chunk_message",
        "start_line": 220,
        "end_line": 222,
        "children": [],
        "code": "    def chunk_message(self, message: str, limit: int = 2000) -> list:\n        \"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"\n        return [message[i : i + limit] for i in range(0, len(message), limit)]\n",
        "cfg": {
          "nodes": [
            {
              "id": "SendDiscordMessageBlock.chunk_message_1",
              "code": "def chunk_message(self, message: str, limit: int = 2000) -> list:\n        \"\"\"Splits a message into chunks not exceeding the Discord limit.\"\"\"\n        return [message[i : i + limit] for i in range(0, len(message), limit)]\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "SendDiscordMessageBlock.run",
        "start_line": 224,
        "end_line": 253,
        "children": [],
        "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            loop = asyncio.get_event_loop()\n            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n\n            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n                future.set_result(\"Message sent\")\n\n            result = loop.run_until_complete(future)\n\n            # For testing purposes, use the mocked result\n            if isinstance(result, str):\n                self.output_data = result\n\n            if self.output_data is None:\n                raise ValueError(\"No status message received.\")\n\n            yield \"status\", self.output_data\n\n        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "SendDiscordMessageBlock.run_1",
              "code": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
            },
            {
              "id": "SendDiscordMessageBlock.run_2",
              "code": "        try:\n            loop = asyncio.get_event_loop()\n"
            },
            {
              "id": "SendDiscordMessageBlock.run_3",
              "code": "            future = self.send_message(\n                credentials.api_key.get_secret_value(),\n                input_data.channel_name,\n                input_data.message_content,\n            )\n"
            },
            {
              "id": "SendDiscordMessageBlock.run_4",
              "code": "            # If it's a Future (mock), set the result\n            if isinstance(future, asyncio.Future):\n"
            },
            {
              "id": "SendDiscordMessageBlock.run_5",
              "code": "                future.set_result(\"Message sent\")\n"
            },
            {
              "id": "SendDiscordMessageBlock.run_6",
              "code": "            result = loop.run_until_complete(future)\n"
            },
            {
              "id": "SendDiscordMessageBlock.run_7",
              "code": "            # For testing purposes, use the mocked result\n            if isinstance(result, str):\n"
            },
            {
              "id": "SendDiscordMessageBlock.run_8",
              "code": "                self.output_data = result\n"
            },
            {
              "id": "SendDiscordMessageBlock.run_9",
              "code": "            if self.output_data is None:\n                raise ValueError(\"No status message received.\")\n"
            },
            {
              "id": "SendDiscordMessageBlock.run_10",
              "code": "            yield \"status\", self.output_data\n"
            },
            {
              "id": "SendDiscordMessageBlock.run_11",
              "code": "        except discord.errors.LoginFailure as login_err:\n            raise ValueError(f\"Login error occurred: {login_err}\")\n"
            },
            {
              "id": "SendDiscordMessageBlock.run_12",
              "code": "        except Exception as e:\n            raise ValueError(f\"An error occurred: {e}\")\n"
            }
          ],
          "edges": [
            {
              "from": "SendDiscordMessageBlock.run_1",
              "to": "SendDiscordMessageBlock.run_2"
            },
            {
              "from": "SendDiscordMessageBlock.run_2",
              "to": "SendDiscordMessageBlock.run_3"
            },
            {
              "from": "SendDiscordMessageBlock.run_3",
              "to": "SendDiscordMessageBlock.run_4"
            },
            {
              "from": "SendDiscordMessageBlock.run_4",
              "to": "SendDiscordMessageBlock.run_5"
            },
            {
              "from": "SendDiscordMessageBlock.run_4",
              "to": "SendDiscordMessageBlock.run_6"
            },
            {
              "from": "SendDiscordMessageBlock.run_5",
              "to": "SendDiscordMessageBlock.run_6"
            },
            {
              "from": "SendDiscordMessageBlock.run_6",
              "to": "SendDiscordMessageBlock.run_7"
            },
            {
              "from": "SendDiscordMessageBlock.run_7",
              "to": "SendDiscordMessageBlock.run_8"
            },
            {
              "from": "SendDiscordMessageBlock.run_7",
              "to": "SendDiscordMessageBlock.run_9"
            },
            {
              "from": "SendDiscordMessageBlock.run_8",
              "to": "SendDiscordMessageBlock.run_9"
            },
            {
              "from": "SendDiscordMessageBlock.run_9",
              "to": "SendDiscordMessageBlock.run_10"
            },
            {
              "from": "SendDiscordMessageBlock.run_9",
              "to": "SendDiscordMessageBlock.run_11"
            },
            {
              "from": "SendDiscordMessageBlock.run_9",
              "to": "SendDiscordMessageBlock.run_12"
            }
          ]
        }
      }
    ],
    "code": "class SendDiscordMessageBlock(Block):\n\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "SendDiscordMessageBlock_1",
          "code": "class SendDiscordMessageBlock(Block):\n"
        }
      ],
      "edges": []
    }
  }
]