{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 20,
  "functions": [
    {
      "name": "thread_cached",
      "type": "function",
      "start_line": 8,
      "end_line": 20,
      "functions": [
        {
          "name": "wrapper",
          "type": "function",
          "start_line": 11,
          "end_line": 18,
          "functions": [],
          "classes": [],
          "simplified_code": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, \"cache\", None)\n        if cache is None:\n            cache = thread_local.cache = {}\n        key = (args, tuple(sorted(kwargs.items())))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]",
          "blocks": [
            {
              "id": 1,
              "label": "def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:",
              "successors": [
                {
                  "id": 2,
                  "label": "    cache = getattr(thread_local, \"cache\", None)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if cache is None:",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    cache = thread_local.cache = {}",
                          "successors": [
                            {
                              "id": 5,
                              "label": "key = (args, tuple(sorted(kwargs.items())))",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "if key not in cache:",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "    cache[key] = func(*args, **kwargs)",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "return cache[key]",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 8,
                                  "label": "return cache[key]",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "key = (args, tuple(sorted(kwargs.items())))",
                          "successors": [
                            {
                              "id": 6,
                              "label": "if key not in cache:",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "    cache[key] = func(*args, **kwargs)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "return cache[key]",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "label": "return cache[key]",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [],
      "simplified_code": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:\n    thread_local = threading.local()\n\n        return cache[key]\n\n    return wrapper",
      "blocks": [
        {
          "id": 1,
          "label": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:",
          "successors": [
            {
              "id": 2,
              "label": "thread_local = threading.local()",
              "successors": [
                {
                  "id": 3,
                  "label": "cache = getattr(thread_local, \"cache\", None)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "args_key = (func.__module__, func.__qualname__)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "key = ThreadCacheKey(args_key, args, frozenset(kwargs.items()))",
                          "successors": [
                            {
                              "id": 6,
                              "label": "if cache is None:",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "cache = {}",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "setattr(thread_local, \"cache\", cache)",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "return cache[key]",
                                          "successors": []
                                        },
                                        {
                                          "id": 8,
                                          "label": "if key not in cache:",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "cache[key] = func(*args, **kwargs)",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "return cache[key]",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 8,
                              "label": "if key not in cache:",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "cache[key] = func(*args, **kwargs)",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "return cache[key]",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import threading\nfrom typing import Callable, ParamSpec, TypeVar\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\n\n\n    return wrapper",
  "blocks": [
    {
      "id": 1,
      "label": "import threading\nfrom typing import Callable, ParamSpec, TypeVar\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")",
      "successors": [
        {
          "id": 2,
          "label": "def run_threadsafe_function(func: Callable[P, R]) -> Callable[P, R]:",
          "successors": [
            {
              "id": 3,
              "label": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:",
              "successors": [
                {
                  "id": 4,
                  "label": "        result = None",
                  "successors": [
                    {
                      "id": 5,
                      "label": "        def call_function():",
                      "successors": [
                        {
                          "id": 6,
                          "label": "            nonlocal result\n            result = func(*args, **kwargs)",
                          "successors": [
                            {
                              "id": 7,
                              "label": "        thread = threading.Thread(target=call_function)",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "        thread.start()\n        thread.join()",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "        return result",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 10,
              "label": "    return wrapper",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}