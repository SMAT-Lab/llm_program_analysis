[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 20,
    "children": [
      {
        "decl_name": "thread_cached",
        "start_line": 7,
        "end_line": 19,
        "children": [
          {
            "decl_name": "thread_cached.wrapper",
            "start_line": 10,
            "end_line": 17,
            "children": [],
            "code": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, \"cache\", None)\n        if cache is None:\n            cache = thread_local.cache = {}\n        key = (args, tuple(sorted(kwargs.items())))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]\n",
            "cfg": {
              "nodes": [
                {
                  "id": "thread_cached.wrapper_1",
                  "code": "def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, \"cache\", None)\n"
                },
                {
                  "id": "thread_cached.wrapper_2",
                  "code": "        if cache is None:\n            cache = thread_local.cache = {}\n"
                },
                {
                  "id": "thread_cached.wrapper_3",
                  "code": "        key = (args, tuple(sorted(kwargs.items())))\n"
                },
                {
                  "id": "thread_cached.wrapper_4",
                  "code": "        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n"
                },
                {
                  "id": "thread_cached.wrapper_5",
                  "code": "        return cache[key]\n"
                }
              ],
              "edges": [
                {
                  "from": "thread_cached.wrapper_1",
                  "to": "thread_cached.wrapper_2"
                },
                {
                  "from": "thread_cached.wrapper_2",
                  "to": "thread_cached.wrapper_3"
                },
                {
                  "from": "thread_cached.wrapper_3",
                  "to": "thread_cached.wrapper_4"
                },
                {
                  "from": "thread_cached.wrapper_4",
                  "to": "thread_cached.wrapper_5"
                }
              ]
            }
          }
        ],
        "code": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:\n    thread_local = threading.local()\n\n\n    return wrapper\n",
        "cfg": {
          "nodes": [
            {
              "id": "thread_cached_1",
              "code": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:\n    thread_local = threading.local()\n"
            },
            {
              "id": "thread_cached_2",
              "code": "    return wrapper\n"
            }
          ],
          "edges": [
            {
              "from": "thread_cached_1",
              "to": "thread_cached_2"
            }
          ]
        }
      }
    ],
    "code": "import threading\nfrom typing import Callable, ParamSpec, TypeVar\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import threading\nfrom typing import Callable, ParamSpec, TypeVar\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "P = ParamSpec(\"P\")\nR = TypeVar(\"R\")\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        }
      ]
    }
  }
]