[
  {
    "decl_name": "GlobalBlock",
    "start_line": 37,
    "end_line": 40,
    "children": [],
    "code": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "if __name__ == \"__main__\":\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "    import doctest\n\n    doctest.testmod()\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        }
      ]
    }
  },
  {
    "decl_name": "binary_count_setbits",
    "start_line": 0,
    "end_line": 34,
    "children": [],
    "code": "def binary_count_setbits(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of 1's in binary representation of that number.\n\n    >>> binary_count_setbits(25)\n    3\n    >>> binary_count_setbits(36)\n    2\n    >>> binary_count_setbits(16)\n    1\n    >>> binary_count_setbits(58)\n    4\n    >>> binary_count_setbits(4294967295)\n    32\n    >>> binary_count_setbits(0)\n    0\n    >>> binary_count_setbits(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_setbits(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_setbits(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return bin(a).count(\"1\")\n",
    "cfg": {
      "nodes": [
        {
          "id": "binary_count_setbits_1",
          "code": "def binary_count_setbits(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of 1's in binary representation of that number.\n\n    >>> binary_count_setbits(25)\n    3\n    >>> binary_count_setbits(36)\n    2\n    >>> binary_count_setbits(16)\n    1\n    >>> binary_count_setbits(58)\n    4\n    >>> binary_count_setbits(4294967295)\n    32\n    >>> binary_count_setbits(0)\n    0\n    >>> binary_count_setbits(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_setbits(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_setbits(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n"
        },
        {
          "id": "binary_count_setbits_2",
          "code": "    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n"
        },
        {
          "id": "binary_count_setbits_3",
          "code": "    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n"
        },
        {
          "id": "binary_count_setbits_4",
          "code": "    return bin(a).count(\"1\")\n"
        }
      ],
      "edges": [
        {
          "from": "binary_count_setbits_1",
          "to": "binary_count_setbits_2"
        },
        {
          "from": "binary_count_setbits_2",
          "to": "binary_count_setbits_3"
        },
        {
          "from": "binary_count_setbits_2",
          "to": "binary_count_setbits_4"
        },
        {
          "from": "binary_count_setbits_3",
          "to": "binary_count_setbits_4"
        }
      ]
    }
  }
]