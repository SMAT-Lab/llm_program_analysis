{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 552,
  "functions": [
    {
      "name": "override_auth_middleware",
      "type": "function",
      "start_line": 19,
      "end_line": 21,
      "functions": [],
      "classes": [],
      "simplified_code": "def override_auth_middleware():\n    \"\"\"Override auth middleware for testing\"\"\"\n    return {\"sub\": \"test-user-id\"}",
      "blocks": [
        {
          "id": 1,
          "label": "def override_auth_middleware():",
          "successors": [
            {
              "id": 2,
              "label": "\"\"\"Override auth middleware for testing\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "return {\"sub\": \"test-user-id\"}",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "override_get_user_id",
      "type": "function",
      "start_line": 24,
      "end_line": 26,
      "functions": [],
      "classes": [],
      "simplified_code": "def override_get_user_id():\n    \"\"\"Override get_user_id for testing\"\"\"\n    return \"test-user-id\"",
      "blocks": [
        {
          "id": 1,
          "label": "def override_get_user_id():",
          "successors": [
            {
              "id": 2,
              "label": "\"\"\"Override get_user_id for testing\"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "return \"test-user-id\"",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_defaults",
      "type": "function",
      "start_line": 35,
      "end_line": 63,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_agents_defaults(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=0,\n            total_items=0,\n            total_pages=0,\n            page_size=10,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert data.pagination.total_pages == 0\n    assert data.agents == []\n    mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=None,\n        sorted_by=None,\n        search_query=None,\n        category=None,\n        page=1,\n        page_size=20,\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n    agents=[],\n    pagination=backend.server.v2.store.model.Pagination(\n        current_page=0,\n        total_items=0,\n        total_pages=0,\n        page_size=10,\n    ),\n)",
          "successors": [
            {
              "id": 2,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")",
              "successors": [
                {
                  "id": 3,
                  "label": "mock_db_call.return_value = mocked_value",
                  "successors": [
                    {
                      "id": 4,
                      "label": "response = client.get(\"/agents\")",
                      "successors": [
                        {
                          "id": 5,
                          "label": "assert response.status_code == 200",
                          "successors": [
                            {
                              "id": 6,
                              "label": "data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json()\n)",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "assert data.pagination.total_pages == 0",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "assert data.agents == []",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "mock_db_call.assert_called_once_with(\n    featured=False,\n    creator=None,\n    sorted_by=None,\n    search_query=None,\n    category=None,\n    page=1,\n    page_size=20,\n)",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_featured",
      "type": "function",
      "start_line": 66,
      "end_line": 105,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_agents_featured(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"featured-agent\",\n                agent_name=\"Featured Agent\",\n                agent_image=\"featured.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=\"Featured agent subheading\",\n                description=\"Featured agent description\",\n                runs=100,\n                rating=4.5,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents?featured=true\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1\n    assert data.agents[0].slug == \"featured-agent\"\n    mock_db_call.assert_called_once_with(\n        featured=True,\n        creator=None,\n        sorted_by=None,\n        search_query=None,\n        category=None,\n        page=1,\n        page_size=20,\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n    agents=[\n        backend.server.v2.store.model.StoreAgent(\n            slug=\"featured-agent\",\n            agent_name=\"Featured Agent\",\n            agent_image=\"featured.jpg\",\n            creator=\"creator1\",\n            creator_avatar=\"avatar1.jpg\",\n            sub_heading=\"Featured agent subheading\",\n            description=\"Featured agent description\",\n            runs=100,\n            rating=4.5,\n        )\n    ],\n    pagination=backend.server.v2.store.model.Pagination(\n        current_page=1,\n        total_items=1,\n        total_pages=1,\n        page_size=20,\n    ),\n)",
          "successors": [
            {
              "id": 2,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value = mocked_value\nresponse = client.get(\"/agents?featured=true\")\nassert response.status_code == 200\ndata = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json()\n)\nassert len(data.agents) == 1\nassert data.agents[0].slug == \"featured-agent\"\nmock_db_call.assert_called_once_with(\n    featured=True,\n    creator=None,\n    sorted_by=None,\n    search_query=None,\n    category=None,\n    page=1,\n    page_size=20,\n)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_by_creator",
      "type": "function",
      "start_line": 108,
      "end_line": 147,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_agents_by_creator(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"creator-agent\",\n                agent_name=\"Creator Agent\",\n                agent_image=\"agent.jpg\",\n                creator=\"specific-creator\",\n                creator_avatar=\"avatar.jpg\",\n                sub_heading=\"Creator agent subheading\",\n                description=\"Creator agent description\",\n                runs=50,\n                rating=4.0,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents?creator=specific-creator\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1\n    assert data.agents[0].creator == \"specific-creator\"\n    mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=\"specific-creator\",\n        sorted_by=None,\n        search_query=None,\n        category=None,\n        page=1,\n        page_size=20,\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "mocked_value = backend.server.v2.store.model.StoreAgentsResponse(...",
          "successors": [
            {
              "id": 2,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")",
              "successors": [
                {
                  "id": 3,
                  "label": "mock_db_call.return_value = mocked_value",
                  "successors": [
                    {
                      "id": 4,
                      "label": "response = client.get(\"/agents?creator=specific-creator\")",
                      "successors": [
                        {
                          "id": 5,
                          "label": "assert response.status_code == 200",
                          "successors": [
                            {
                              "id": 6,
                              "label": "data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(response.json())",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "assert len(data.agents) == 1",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "assert data.agents[0].creator == \"specific-creator\"",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "mock_db_call.assert_called_once_with(...)",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_sorted",
      "type": "function",
      "start_line": 150,
      "end_line": 189,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_agents_sorted(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"top-agent\",\n                agent_name=\"Top Agent\",\n                agent_image=\"top.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=\"Top agent subheading\",\n                description=\"Top agent description\",\n                runs=1000,\n                rating=5.0,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents?sorted_by=runs\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1\n    assert data.agents[0].runs == 1000\n    mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=None,\n        sorted_by=\"runs\",\n        search_query=None,\n        category=None,\n        page=1,\n        page_size=20,\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n    agents=[\n        backend.server.v2.store.model.StoreAgent(\n            slug=\"top-agent\",\n            agent_name=\"Top Agent\",\n            agent_image=\"top.jpg\",\n            creator=\"creator1\",\n            creator_avatar=\"avatar1.jpg\",\n            sub_heading=\"Top agent subheading\",\n            description=\"Top agent description\",\n            runs=1000,\n            rating=5.0,\n        )\n    ],\n    pagination=backend.server.v2.store.model.Pagination(\n        current_page=1,\n        total_items=1,\n        total_pages=1,\n        page_size=20,\n    ),\n)",
          "successors": [
            {
              "id": 2,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")",
              "successors": [
                {
                  "id": 3,
                  "label": "mock_db_call.return_value = mocked_value",
                  "successors": [
                    {
                      "id": 4,
                      "label": "response = client.get(\"/agents?sorted_by=runs\")",
                      "successors": [
                        {
                          "id": 5,
                          "label": "assert response.status_code == 200",
                          "successors": [
                            {
                              "id": 6,
                              "label": "data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json()\n)",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "assert len(data.agents) == 1",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "assert data.agents[0].runs == 1000",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "mock_db_call.assert_called_once_with(\n    featured=False,\n    creator=None,\n    sorted_by=\"runs\",\n    search_query=None,\n    category=None,\n    page=1,\n    page_size=20,\n)",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_search",
      "type": "function",
      "start_line": 192,
      "end_line": 231,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_agents_search(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"search-agent\",\n                agent_name=\"Search Agent\",\n                agent_image=\"search.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=\"Search agent subheading\",\n                description=\"Specific search term description\",\n                runs=75,\n                rating=4.2,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents?search_query=specific\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1\n    assert \"specific\" in data.agents[0].description.lower()\n    mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=None,\n        sorted_by=None,\n        search_query=\"specific\",\n        category=None,\n        page=1,\n        page_size=20,\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "def test_get_agents_search(mocker: pytest_mock.MockFixture):",
          "successors": [
            {
              "id": 2,
              "label": "mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n    agents=[\n        backend.server.v2.store.model.StoreAgent(\n            slug=\"search-agent\",\n            agent_name=\"Search Agent\",\n            agent_image=\"search.jpg\",\n            creator=\"creator1\",\n            creator_avatar=\"avatar1.jpg\",\n            sub_heading=\"Search agent subheading\",\n            description=\"Specific search term description\",\n            runs=75,\n            rating=4.2,\n        )\n    ],\n    pagination=backend.server.v2.store.model.Pagination(\n        current_page=1,\n        total_items=1,\n        total_pages=1,\n        page_size=20,\n    ),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")",
                  "successors": [
                    {
                      "id": 4,
                      "label": "mock_db_call.return_value = mocked_value",
                      "successors": [
                        {
                          "id": 5,
                          "label": "response = client.get(\"/agents?search_query=specific\")",
                          "successors": [
                            {
                              "id": 6,
                              "label": "assert response.status_code == 200",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json()\n)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "assert len(data.agents) == 1",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "assert \"specific\" in data.agents[0].description.lower()",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "mock_db_call.assert_called_once_with(\n    featured=False,\n    creator=None,\n    sorted_by=None,\n    search_query=\"specific\",\n    category=None,\n    page=1,\n    page_size=20,\n)",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_category",
      "type": "function",
      "start_line": 234,
      "end_line": 272,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_agents_category(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"category-agent\",\n                agent_name=\"Category Agent\",\n                agent_image=\"category.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=\"Category agent subheading\",\n                description=\"Category agent description\",\n                runs=60,\n                rating=4.1,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents?category=test-category\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1\n    mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=None,\n        sorted_by=None,\n        search_query=None,\n        category=\"test-category\",\n        page=1,\n        page_size=20,\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "def test_get_agents_category(mocker: pytest_mock.MockFixture):",
          "successors": [
            {
              "id": 2,
              "label": "mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n    agents=[\n        backend.server.v2.store.model.StoreAgent(\n            slug=\"category-agent\",\n            agent_name=\"Category Agent\",\n            agent_image=\"category.jpg\",\n            creator=\"creator1\",\n            creator_avatar=\"avatar1.jpg\",\n            sub_heading=\"Category agent subheading\",\n            description=\"Category agent description\",\n            runs=60,\n            rating=4.1,\n        )\n    ],\n    pagination=backend.server.v2.store.model.Pagination(\n        current_page=1,\n        total_items=1,\n        total_pages=1,\n        page_size=20,\n    ),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")",
                  "successors": [
                    {
                      "id": 4,
                      "label": "mock_db_call.return_value = mocked_value",
                      "successors": [
                        {
                          "id": 5,
                          "label": "response = client.get(\"/agents?category=test-category\")",
                          "successors": [
                            {
                              "id": 6,
                              "label": "assert response.status_code == 200",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json()\n)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "assert len(data.agents) == 1",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "mock_db_call.assert_called_once_with(\n    featured=False,\n    creator=None,\n    sorted_by=None,\n    search_query=None,\n    category=\"test-category\",\n    page=1,\n    page_size=20,\n)",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_pagination",
      "type": "function",
      "start_line": 275,
      "end_line": 316,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_agents_pagination(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=f\"agent-{i}\",\n                agent_name=f\"Agent {i}\",\n                agent_image=f\"agent{i}.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=f\"Agent {i} subheading\",\n                description=f\"Agent {i} description\",\n                runs=i * 10,\n                rating=4.0,\n            )\n            for i in range(5)\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=2,\n            total_items=15,\n            total_pages=3,\n            page_size=5,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents?page=2&page_size=5\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 5\n    assert data.pagination.current_page == 2\n    assert data.pagination.page_size == 5\n    mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=None,\n        sorted_by=None,\n        search_query=None,\n        category=None,\n        page=2,\n        page_size=5,\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "def test_get_agents_pagination(mocker: pytest_mock.MockFixture):",
          "successors": [
            {
              "id": 2,
              "label": "mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n    agents=[\n        backend.server.v2.store.model.StoreAgent(\n            slug=f\"agent-{i}\",\n            agent_name=f\"Agent {i}\",\n            agent_image=f\"agent{i}.jpg\",\n            creator=\"creator1\",\n            creator_avatar=\"avatar1.jpg\",\n            sub_heading=f\"Agent {i} subheading\",\n            description=f\"Agent {i} description\",\n            runs=i * 10,\n            rating=4.0,\n        )\n        for i in range(5)\n    ],\n    pagination=backend.server.v2.store.model.Pagination(\n        current_page=2,\n        total_items=15,\n        total_pages=3,\n        page_size=5,\n    ),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\nmock_db_call.return_value = mocked_value\nresponse = client.get(\"/agents?page=2&page_size=5\")\nassert response.status_code == 200\ndata = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n    response.json()\n)\nassert len(data.agents) == 5\nassert data.pagination.current_page == 2\nassert data.pagination.page_size == 5\nmock_db_call.assert_called_once_with(\n    featured=False,\n    creator=None,\n    sorted_by=None,\n    search_query=None,\n    category=None,\n    page=2,\n    page_size=5,\n)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agents_malformed_request",
      "type": "function",
      "start_line": 319,
      "end_line": 334,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_agents_malformed_request(mocker: pytest_mock.MockFixture):\n    # Test with invalid page number\n    response = client.get(\"/agents?page=-1\")\n    assert response.status_code == 422\n\n    # Test with invalid page size\n    response = client.get(\"/agents?page_size=0\")\n    assert response.status_code == 422\n\n    # Test with non-numeric values\n    response = client.get(\"/agents?page=abc&page_size=def\")\n    assert response.status_code == 422\n\n    # Verify no DB calls were made\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.assert_not_called()",
      "blocks": [
        {
          "id": 1,
          "label": "def test_get_agents_malformed_request(mocker: pytest_mock.MockFixture):",
          "successors": [
            {
              "id": 2,
              "label": "    response = client.get(\"/agents?page=-1\")",
              "successors": [
                {
                  "id": 3,
                  "label": "    assert response.status_code == 422",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    response = client.get(\"/agents?page_size=0\")",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    assert response.status_code == 422",
                          "successors": [
                            {
                              "id": 6,
                              "label": "    response = client.get(\"/agents?page=abc&page_size=def\")",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "    assert response.status_code == 422",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "    mock_db_call.assert_not_called()",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_agent_details",
      "type": "function",
      "start_line": 337,
      "end_line": 365,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_agent_details(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentDetails(\n        store_listing_version_id=\"test-version-id\",\n        slug=\"test-agent\",\n        agent_name=\"Test Agent\",\n        agent_video=\"video.mp4\",\n        agent_image=[\"image1.jpg\", \"image2.jpg\"],\n        creator=\"creator1\",\n        creator_avatar=\"avatar1.jpg\",\n        sub_heading=\"Test agent subheading\",\n        description=\"Test agent description\",\n        categories=[\"category1\", \"category2\"],\n        runs=100,\n        rating=4.5,\n        versions=[\"1.0.0\", \"1.1.0\"],\n        last_updated=datetime.datetime.now(),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agent_details\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/agents/creator1/test-agent\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.StoreAgentDetails.model_validate(\n        response.json()\n    )\n    assert data.agent_name == \"Test Agent\"\n    assert data.creator == \"creator1\"\n    mock_db_call.assert_called_once_with(username=\"creator1\", agent_name=\"test-agent\")",
      "blocks": [
        {
          "id": 1,
          "label": "def test_get_agent_details(mocker: pytest_mock.MockFixture):",
          "successors": [
            {
              "id": 2,
              "label": "mocked_value = backend.server.v2.store.model.StoreAgentDetails(\n    store_listing_version_id=\"test-version-id\",\n    slug=\"test-agent\",\n    agent_name=\"Test Agent\",\n    agent_video=\"video.mp4\",\n    agent_image=[\"image1.jpg\", \"image2.jpg\"],\n    creator=\"creator1\",\n    creator_avatar=\"avatar1.jpg\",\n    sub_heading=\"Test agent subheading\",\n    description=\"Test agent description\",\n    categories=[\"category1\", \"category2\"],\n    runs=100,\n    rating=4.5,\n    versions=[\"1.0.0\", \"1.1.0\"],\n    last_updated=datetime.datetime.now(),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agent_details\")",
                  "successors": [
                    {
                      "id": 4,
                      "label": "mock_db_call.return_value = mocked_value",
                      "successors": [
                        {
                          "id": 5,
                          "label": "response = client.get(\"/agents/creator1/test-agent\")",
                          "successors": [
                            {
                              "id": 6,
                              "label": "assert response.status_code == 200",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "data = backend.server.v2.store.model.StoreAgentDetails.model_validate(response.json())",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "assert data.agent_name == \"Test Agent\"",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "assert data.creator == \"creator1\"",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "mock_db_call.assert_called_once_with(username=\"creator1\", agent_name=\"test-agent\")",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_creators_defaults",
      "type": "function",
      "start_line": 368,
      "end_line": 391,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_creators_defaults(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.CreatorsResponse(\n        creators=[],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=0,\n            total_items=0,\n            total_pages=0,\n            page_size=10,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/creators\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.CreatorsResponse.model_validate(\n        response.json()\n    )\n    assert data.pagination.total_pages == 0\n    assert data.creators == []\n    mock_db_call.assert_called_once_with(\n        featured=False, search_query=None, sorted_by=None, page=1, page_size=20\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "mocked_value = backend.server.v2.store.model.CreatorsResponse(\n    creators=[],\n    pagination=backend.server.v2.store.model.Pagination(\n        current_page=0,\n        total_items=0,\n        total_pages=0,\n        page_size=10,\n    ),\n)",
          "successors": [
            {
              "id": 2,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\nmock_db_call.return_value = mocked_value",
              "successors": [
                {
                  "id": 3,
                  "label": "response = client.get(\"/creators\")\nassert response.status_code == 200",
                  "successors": [
                    {
                      "id": 4,
                      "label": "data = backend.server.v2.store.model.CreatorsResponse.model_validate(\n    response.json()\n)\nassert data.pagination.total_pages == 0\nassert data.creators == []",
                      "successors": [
                        {
                          "id": 5,
                          "label": "mock_db_call.assert_called_once_with(\n    featured=False, search_query=None, sorted_by=None, page=1, page_size=20\n)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_creators_pagination",
      "type": "function",
      "start_line": 394,
      "end_line": 430,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_creators_pagination(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.CreatorsResponse(\n        creators=[\n            backend.server.v2.store.model.Creator(\n                name=f\"Creator {i}\",\n                username=f\"creator{i}\",\n                description=f\"Creator {i} description\",\n                avatar_url=f\"avatar{i}.jpg\",\n                num_agents=1,\n                agent_rating=4.5,\n                agent_runs=100,\n                is_featured=False,\n            )\n            for i in range(5)\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=2,\n            total_items=15,\n            total_pages=3,\n            page_size=5,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/creators?page=2&page_size=5\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.CreatorsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.creators) == 5\n    assert data.pagination.current_page == 2\n    assert data.pagination.page_size == 5\n    mock_db_call.assert_called_once_with(\n        featured=False, search_query=None, sorted_by=None, page=2, page_size=5\n    )",
      "blocks": [
        {
          "id": 1,
          "label": "def test_get_creators_pagination(mocker: pytest_mock.MockFixture):",
          "successors": [
            {
              "id": 2,
              "label": "mocked_value = backend.server.v2.store.model.CreatorsResponse(...)",
              "successors": [
                {
                  "id": 3,
                  "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")",
                  "successors": [
                    {
                      "id": 4,
                      "label": "mock_db_call.return_value = mocked_value",
                      "successors": [
                        {
                          "id": 5,
                          "label": "response = client.get(\"/creators?page=2&page_size=5\")",
                          "successors": [
                            {
                              "id": 6,
                              "label": "assert response.status_code == 200",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "data = backend.server.v2.store.model.CreatorsResponse.model_validate(\n response.json()\n)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "assert len(data.creators) == 5",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "assert data.pagination.current_page == 2",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "assert data.pagination.page_size == 5",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "mock_db_call.assert_called_once_with(\n featured=False, search_query=None, sorted_by=None, page=2, page_size=5\n)",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_creators_malformed_request",
      "type": "function",
      "start_line": 433,
      "end_line": 448,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_creators_malformed_request(mocker: pytest_mock.MockFixture):\n    # Test with invalid page number\n    response = client.get(\"/creators?page=-1\")\n    assert response.status_code == 422\n\n    # Test with invalid page size\n    response = client.get(\"/creators?page_size=0\")\n    assert response.status_code == 422\n\n    # Test with non-numeric values\n    response = client.get(\"/creators?page=abc&page_size=def\")\n    assert response.status_code == 422\n\n    # Verify no DB calls were made\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\n    mock_db_call.assert_not_called()",
      "blocks": [
        {
          "id": 1,
          "label": "response = client.get(\"/creators?page=-1\")",
          "successors": [
            {
              "id": 2,
              "label": "assert response.status_code == 422",
              "successors": [
                {
                  "id": 3,
                  "label": "response = client.get(\"/creators?page_size=0\")",
                  "successors": [
                    {
                      "id": 4,
                      "label": "assert response.status_code == 422",
                      "successors": [
                        {
                          "id": 5,
                          "label": "response = client.get(\"/creators?page=abc&page_size=def\")",
                          "successors": [
                            {
                              "id": 6,
                              "label": "assert response.status_code == 422",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "mock_db_call.assert_not_called()",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_creator_details",
      "type": "function",
      "start_line": 451,
      "end_line": 471,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_creator_details(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.CreatorDetails(\n        name=\"Test User\",\n        username=\"creator1\",\n        description=\"Test creator description\",\n        links=[\"link1.com\", \"link2.com\"],\n        avatar_url=\"avatar.jpg\",\n        agent_rating=4.8,\n        agent_runs=1000,\n        top_categories=[\"category1\", \"category2\"],\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creator_details\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/creator/creator1\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.CreatorDetails.model_validate(response.json())\n    assert data.username == \"creator1\"\n    assert data.name == \"Test User\"\n    mock_db_call.assert_called_once_with(username=\"creator1\")",
      "blocks": [
        {
          "id": 1,
          "label": "mocked_value = backend.server.v2.store.model.CreatorDetails(name=\"Test User\", username=\"creator1\", description=\"Test creator description\", links=[\"link1.com\", \"link2.com\"], avatar_url=\"avatar.jpg\", agent_rating=4.8, agent_runs=1000, top_categories=[\"category1\", \"category2\"])",
          "successors": [
            {
              "id": 2,
              "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creator_details\")",
              "successors": [
                {
                  "id": 3,
                  "label": "mock_db_call.return_value = mocked_value",
                  "successors": [
                    {
                      "id": 4,
                      "label": "response = client.get(\"/creator/creator1\")",
                      "successors": [
                        {
                          "id": 5,
                          "label": "assert response.status_code == 200",
                          "successors": [
                            {
                              "id": 6,
                              "label": "data = backend.server.v2.store.model.CreatorDetails.model_validate(response.json())",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "assert data.username == \"creator1\"",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "assert data.name == \"Test User\"",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "mock_db_call.assert_called_once_with(username=\"creator1\")",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_submissions_success",
      "type": "function",
      "start_line": 474,
      "end_line": 510,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_submissions_success(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreSubmissionsResponse(\n        submissions=[\n            backend.server.v2.store.model.StoreSubmission(\n                name=\"Test Agent\",\n                description=\"Test agent description\",\n                image_urls=[\"test.jpg\"],\n                date_submitted=datetime.datetime.now(),\n                status=prisma.enums.SubmissionStatus.APPROVED,\n                runs=50,\n                rating=4.2,\n                agent_id=\"test-agent-id\",\n                agent_version=1,\n                sub_heading=\"Test agent subheading\",\n                slug=\"test-agent\",\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/submissions\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.submissions) == 1\n    assert data.submissions[0].name == \"Test Agent\"\n    assert data.pagination.current_page == 1\n    mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=1, page_size=20)",
      "blocks": [
        {
          "id": 1,
          "label": "def test_get_submissions_success(mocker: pytest_mock.MockFixture):",
          "successors": [
            {
              "id": 2,
              "label": "mocked_value = backend.server.v2.store.model.StoreSubmissionsResponse(\n    submissions=[\n        backend.server.v2.store.model.StoreSubmission(\n            name=\"Test Agent\",\n            description=\"Test agent description\",\n            image_urls=[\"test.jpg\"],\n            date_submitted=datetime.datetime.now(),\n            status=prisma.enums.SubmissionStatus.APPROVED,\n            runs=50,\n            rating=4.2,\n            agent_id=\"test-agent-id\",\n            agent_version=1,\n            sub_heading=\"Test agent subheading\",\n            slug=\"test-agent\",\n        )\n    ],\n    pagination=backend.server.v2.store.model.Pagination(\n        current_page=1,\n        total_items=1,\n        total_pages=1,\n        page_size=20,\n    ),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")",
                  "successors": [
                    {
                      "id": 4,
                      "label": "mock_db_call.return_value = mocked_value",
                      "successors": [
                        {
                          "id": 5,
                          "label": "response = client.get(\"/submissions\")",
                          "successors": [
                            {
                              "id": 6,
                              "label": "assert response.status_code == 200",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "data = backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\n    response.json()\n)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "assert len(data.submissions) == 1",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "assert data.submissions[0].name == \"Test Agent\"",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "assert data.pagination.current_page == 1",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=1, page_size=20)",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_submissions_pagination",
      "type": "function",
      "start_line": 513,
      "end_line": 534,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_submissions_pagination(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreSubmissionsResponse(\n        submissions=[],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=2,\n            total_items=10,\n            total_pages=2,\n            page_size=5,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/submissions?page=2&page_size=5\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\n        response.json()\n    )\n    assert data.pagination.current_page == 2\n    assert data.pagination.page_size == 5\n    mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=2, page_size=5)",
      "blocks": [
        {
          "id": 1,
          "label": "def test_get_submissions_pagination(mocker: pytest_mock.MockFixture):",
          "successors": [
            {
              "id": 2,
              "label": "mocked_value = backend.server.v2.store.model.StoreSubmissionsResponse(\n    submissions=[],\n    pagination=backend.server.v2.store.model.Pagination(\n        current_page=2,\n        total_items=10,\n        total_pages=2,\n        page_size=5,\n    ),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")",
                  "successors": [
                    {
                      "id": 4,
                      "label": "mock_db_call.return_value = mocked_value",
                      "successors": [
                        {
                          "id": 5,
                          "label": "response = client.get(\"/submissions?page=2&page_size=5\")",
                          "successors": [
                            {
                              "id": 6,
                              "label": "assert response.status_code == 200",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "data = backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\n    response.json()\n)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "assert data.pagination.current_page == 2",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "assert data.pagination.page_size == 5",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=2, page_size=5)",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_submissions_malformed_request",
      "type": "function",
      "start_line": 537,
      "end_line": 552,
      "functions": [],
      "classes": [],
      "simplified_code": "def test_get_submissions_malformed_request(mocker: pytest_mock.MockFixture):\n    # Test with invalid page number\n    response = client.get(\"/submissions?page=-1\")\n    assert response.status_code == 422\n\n    # Test with invalid page size\n    response = client.get(\"/submissions?page_size=0\")\n    assert response.status_code == 422\n\n    # Test with non-numeric values\n    response = client.get(\"/submissions?page=abc&page_size=def\")\n    assert response.status_code == 422\n\n    # Verify no DB calls were made\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\n    mock_db_call.assert_not_called()",
      "blocks": [
        {
          "id": 1,
          "label": "response = client.get(\"/submissions?page=-1\")",
          "successors": [
            {
              "id": 2,
              "label": "assert response.status_code == 422",
              "successors": [
                {
                  "id": 3,
                  "label": "response = client.get(\"/submissions?page_size=0\")",
                  "successors": [
                    {
                      "id": 4,
                      "label": "assert response.status_code == 422",
                      "successors": [
                        {
                          "id": 5,
                          "label": "response = client.get(\"/submissions?page=abc&page_size=def\")",
                          "successors": [
                            {
                              "id": 6,
                              "label": "assert response.status_code == 422",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "mock_db_call.assert_not_called()",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import datetime\n\nimport autogpt_libs.auth.depends\nimport autogpt_libs.auth.middleware\nimport fastapi\nimport fastapi.testclient\nimport prisma.enums\nimport pytest_mock\n\nimport backend.server.v2.store.model\nimport backend.server.v2.store.routes\n\napp = fastapi.FastAPI()\napp.include_router(backend.server.v2.store.routes.router)\n\nclient = fastapi.testclient.TestClient(app)\n\n\n    return {\"sub\": \"test-user-id\"}\n\n\n    return \"test-user-id\"\n\n\napp.dependency_overrides[autogpt_libs.auth.middleware.auth_middleware] = (\n    override_auth_middleware\n)\napp.dependency_overrides[autogpt_libs.auth.depends.get_user_id] = override_get_user_id\n\n\n    )\n\n\n    )\n\n\n    )\n\n\n    )\n\n\n    )\n\n\n    )\n\n\n    )\n\n\n    mock_db_call.assert_not_called()\n\n\n    mock_db_call.assert_called_once_with(username=\"creator1\", agent_name=\"test-agent\")\n\n\n    )\n\n\n    )\n\n\n    mock_db_call.assert_not_called()\n\n\n    mock_db_call.assert_called_once_with(username=\"creator1\")\n\n\n    mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=1, page_size=20)\n\n\n    mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=2, page_size=5)\n\n\n    mock_db_call.assert_not_called()",
  "blocks": [
    {
      "id": 1,
      "label": "import datetime\n\nimport autogpt_libs.auth.depends\nimport autogpt_libs.auth.middleware\nimport fastapi\nimport fastapi.testclient\nimport prisma.enums\nimport pytest_mock\n\nimport backend.server.v2.store.model\nimport backend.server.v2.store.routes\n\napp = fastapi.FastAPI()\napp.include_router(backend.server.v2.store.routes.router)\n\nclient = fastapi.testclient.TestClient(app)\n\n\n    return {\"sub\": \"test-user-id\"}\n\n\n    return \"test-user-id\"\n\n\napp.dependency_overrides[autogpt_libs.auth.middleware.auth_middleware] = (\n    override_auth_middleware\n)\napp.dependency_overrides[autogpt_libs.auth.depends.get_user_id] = override_get_user_id\n\n\n    )\n\n\n    )\n\n\n    )\n\n\n    )\n\n\n    )\n\n\n    )\n\n\n    )\n\n\n    mock_db_call.assert_not_called()\n\n\n    mock_db_call.assert_called_once_with(username=\"creator1\", agent_name=\"test-agent\")\n\n\n    )\n\n\n    )\n\n\n    mock_db_call.assert_not_called()\n\n\n    mock_db_call.assert_called_once_with(username=\"creator1\")\n\n\n    mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=1, page_size=20)\n\n\n    mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=2, page_size=5)\n\n\n    mock_db_call.assert_not_called()",
      "successors": []
    }
  ]
}