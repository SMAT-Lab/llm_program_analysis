[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 14,
    "children": [],
    "code": "from datetime import datetime\n\nimport pytest\nfrom prisma.models import CreditTransaction\n\nfrom backend.blocks.llm import AITextGeneratorBlock\nfrom backend.data.credit import UserCredit\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.integrations.credentials_store import openai_credentials\nfrom backend.util.test import SpinTestServer\n\nREFILL_VALUE = 1000\nuser_credit = UserCredit(REFILL_VALUE)\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from datetime import datetime\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "import pytest\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from prisma.models import CreditTransaction\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "from backend.blocks.llm import AITextGeneratorBlock\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "from backend.data.credit import UserCredit\n"
        },
        {
          "id": "GlobalBlock_6",
          "code": "from backend.data.user import DEFAULT_USER_ID\n"
        },
        {
          "id": "GlobalBlock_7",
          "code": "from backend.integrations.credentials_store import openai_credentials\n"
        },
        {
          "id": "GlobalBlock_8",
          "code": "from backend.util.test import SpinTestServer\n"
        },
        {
          "id": "GlobalBlock_9",
          "code": "REFILL_VALUE = 1000\nuser_credit = UserCredit(REFILL_VALUE)\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        },
        {
          "from": "GlobalBlock_5",
          "to": "GlobalBlock_6"
        },
        {
          "from": "GlobalBlock_6",
          "to": "GlobalBlock_7"
        },
        {
          "from": "GlobalBlock_7",
          "to": "GlobalBlock_8"
        },
        {
          "from": "GlobalBlock_8",
          "to": "GlobalBlock_9"
        }
      ]
    }
  },
  {
    "decl_name": "test_block_credit_usage",
    "start_line": 15,
    "end_line": 51,
    "children": [],
    "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_block_credit_usage(server: SpinTestServer):\n    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n\n    spending_amount_1 = await user_credit.spend_credits(\n        DEFAULT_USER_ID,\n        current_credit,\n        AITextGeneratorBlock().id,\n        {\n            \"model\": \"gpt-4-turbo\",\n            \"credentials\": {\n                \"id\": openai_credentials.id,\n                \"provider\": openai_credentials.provider,\n                \"type\": openai_credentials.type,\n            },\n        },\n        0.0,\n        0.0,\n        validate_balance=False,\n    )\n    assert spending_amount_1 > 0\n\n    spending_amount_2 = await user_credit.spend_credits(\n        DEFAULT_USER_ID,\n        current_credit,\n        AITextGeneratorBlock().id,\n        {\"model\": \"gpt-4-turbo\", \"api_key\": \"owned_api_key\"},\n        0.0,\n        0.0,\n        validate_balance=False,\n    )\n    assert spending_amount_2 == 0\n\n    new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert new_credit == current_credit - spending_amount_1 - spending_amount_2\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_block_credit_usage_1",
          "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_block_credit_usage(server: SpinTestServer):\n"
        },
        {
          "id": "test_block_credit_usage_2",
          "code": "    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n"
        },
        {
          "id": "test_block_credit_usage_3",
          "code": "    spending_amount_1 = await user_credit.spend_credits(\n        DEFAULT_USER_ID,\n        current_credit,\n        AITextGeneratorBlock().id,\n        {\n            \"model\": \"gpt-4-turbo\",\n            \"credentials\": {\n                \"id\": openai_credentials.id,\n                \"provider\": openai_credentials.provider,\n                \"type\": openai_credentials.type,\n            },\n        },\n        0.0,\n        0.0,\n        validate_balance=False,\n    )\n"
        },
        {
          "id": "test_block_credit_usage_4",
          "code": "    assert spending_amount_1 > 0\n"
        },
        {
          "id": "test_block_credit_usage_5",
          "code": "    spending_amount_2 = await user_credit.spend_credits(\n        DEFAULT_USER_ID,\n        current_credit,\n        AITextGeneratorBlock().id,\n        {\"model\": \"gpt-4-turbo\", \"api_key\": \"owned_api_key\"},\n        0.0,\n        0.0,\n        validate_balance=False,\n    )\n"
        },
        {
          "id": "test_block_credit_usage_6",
          "code": "    assert spending_amount_2 == 0\n"
        },
        {
          "id": "test_block_credit_usage_7",
          "code": "    new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n"
        },
        {
          "id": "test_block_credit_usage_8",
          "code": "    assert new_credit == current_credit - spending_amount_1 - spending_amount_2\n"
        }
      ],
      "edges": [
        {
          "from": "test_block_credit_usage_1",
          "to": "test_block_credit_usage_2"
        },
        {
          "from": "test_block_credit_usage_2",
          "to": "test_block_credit_usage_3"
        },
        {
          "from": "test_block_credit_usage_3",
          "to": "test_block_credit_usage_4"
        },
        {
          "from": "test_block_credit_usage_4",
          "to": "test_block_credit_usage_5"
        },
        {
          "from": "test_block_credit_usage_5",
          "to": "test_block_credit_usage_6"
        },
        {
          "from": "test_block_credit_usage_6",
          "to": "test_block_credit_usage_7"
        },
        {
          "from": "test_block_credit_usage_7",
          "to": "test_block_credit_usage_8"
        }
      ]
    }
  },
  {
    "decl_name": "test_block_credit_top_up",
    "start_line": 52,
    "end_line": 61,
    "children": [],
    "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_block_credit_top_up(server: SpinTestServer):\n    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n\n    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\n\n    new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert new_credit == current_credit + 100\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_block_credit_top_up_1",
          "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_block_credit_top_up(server: SpinTestServer):\n"
        },
        {
          "id": "test_block_credit_top_up_2",
          "code": "    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n"
        },
        {
          "id": "test_block_credit_top_up_3",
          "code": "    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\n"
        },
        {
          "id": "test_block_credit_top_up_4",
          "code": "    new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert new_credit == current_credit + 100\n"
        }
      ],
      "edges": [
        {
          "from": "test_block_credit_top_up_1",
          "to": "test_block_credit_top_up_2"
        },
        {
          "from": "test_block_credit_top_up_2",
          "to": "test_block_credit_top_up_3"
        },
        {
          "from": "test_block_credit_top_up_3",
          "to": "test_block_credit_top_up_4"
        }
      ]
    }
  },
  {
    "decl_name": "test_block_credit_reset",
    "start_line": 62,
    "end_line": 80,
    "children": [],
    "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_block_credit_reset(server: SpinTestServer):\n    month1 = datetime(2022, 1, 15)\n    month2 = datetime(2022, 2, 15)\n\n    user_credit.time_now = lambda: month2\n    month2credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n\n    # Month 1 result should only affect month 1\n    user_credit.time_now = lambda: month1\n    month1credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month1credit + 100\n\n    # Month 2 balance is unaffected\n    user_credit.time_now = lambda: month2\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_block_credit_reset_1",
          "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_block_credit_reset(server: SpinTestServer):\n"
        },
        {
          "id": "test_block_credit_reset_2",
          "code": "    month1 = datetime(2022, 1, 15)\n    month2 = datetime(2022, 2, 15)\n"
        },
        {
          "id": "test_block_credit_reset_3",
          "code": "    user_credit.time_now = lambda: month2\n    month2credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n"
        },
        {
          "id": "test_block_credit_reset_4",
          "code": "    user_credit.time_now = lambda: month1\n    month1credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month1credit + 100\n"
        },
        {
          "id": "test_block_credit_reset_5",
          "code": "    user_credit.time_now = lambda: month2\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit\n"
        }
      ],
      "edges": [
        {
          "from": "test_block_credit_reset_1",
          "to": "test_block_credit_reset_2"
        },
        {
          "from": "test_block_credit_reset_2",
          "to": "test_block_credit_reset_3"
        },
        {
          "from": "test_block_credit_reset_3",
          "to": "test_block_credit_reset_4"
        },
        {
          "from": "test_block_credit_reset_4",
          "to": "test_block_credit_reset_5"
        }
      ]
    }
  },
  {
    "decl_name": "test_credit_refill",
    "start_line": 81,
    "end_line": 98,
    "children": [],
    "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_credit_refill(server: SpinTestServer):\n    # Clear all transactions within the month\n    await CreditTransaction.prisma().update_many(\n        where={\n            \"userId\": DEFAULT_USER_ID,\n            \"createdAt\": {\n                \"gte\": datetime(2022, 2, 1),\n                \"lt\": datetime(2022, 3, 1),\n            },\n        },\n        data={\"isActive\": False},\n    )\n    user_credit.time_now = lambda: datetime(2022, 2, 15)\n\n    balance = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert balance == REFILL_VALUE\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_credit_refill_1",
          "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_credit_refill(server: SpinTestServer):\n"
        },
        {
          "id": "test_credit_refill_2",
          "code": "    # Clear all transactions within the month\n    await CreditTransaction.prisma().update_many(\n        where={\n            \"userId\": DEFAULT_USER_ID,\n            \"createdAt\": {\n                \"gte\": datetime(2022, 2, 1),\n                \"lt\": datetime(2022, 3, 1),\n            },\n        },\n        data={\"isActive\": False},\n    )\n"
        },
        {
          "id": "test_credit_refill_3",
          "code": "    user_credit.time_now = lambda: datetime(2022, 2, 15)\n"
        },
        {
          "id": "test_credit_refill_4",
          "code": "    balance = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert balance == REFILL_VALUE\n"
        }
      ],
      "edges": [
        {
          "from": "test_credit_refill_1",
          "to": "test_credit_refill_2"
        },
        {
          "from": "test_credit_refill_2",
          "to": "test_credit_refill_3"
        },
        {
          "from": "test_credit_refill_3",
          "to": "test_credit_refill_4"
        }
      ]
    }
  }
]