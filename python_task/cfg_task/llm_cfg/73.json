{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 94,
  "functions": [
    {
      "name": "generate_agent_image",
      "type": "function",
      "start_line": 24,
      "end_line": 94,
      "functions": [],
      "classes": [],
      "simplified_code": "async def generate_agent_image(agent: Graph) -> io.BytesIO:\n    \"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\n    try:\n        settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)\n\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e\n\n    except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
      "blocks": [
        {
          "id": 1,
          "label": "async def generate_agent_image(agent: Graph) -> io.BytesIO:",
          "successors": [
            {
              "id": 2,
              "label": "    try:",
              "successors": [
                {
                  "id": 3,
                  "label": "        settings = Settings()",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if not settings.secrets.replicate_api_key:",
                      "successors": [
                        {
                          "id": 5,
                          "label": "            raise ValueError(\"Missing Replicate API key in settings\")",
                          "successors": [
                            {
                              "id": 6,
                              "label": "# Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "# Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "# Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "try:",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "# Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "if isinstance(output, list) and output:",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "if isinstance(output[0], FileOutput):",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "                image_bytes = output[0].read()",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "label": "return io.BytesIO(image_bytes)",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 15,
                                                      "label": "else:",
                                                      "successors": [
                                                        {
                                                          "id": 16,
                                                          "label": "# If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "label": "return io.BytesIO(image_bytes)",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 17,
                                                  "label": "elif isinstance(output, FileOutput):",
                                                  "successors": [
                                                    {
                                                      "id": 18,
                                                      "label": "                image_bytes = output.read()",
                                                      "successors": [
                                                        {
                                                          "id": 14,
                                                          "label": "return io.BytesIO(image_bytes)",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 19,
                                                  "label": "elif isinstance(output, str):",
                                                  "successors": [
                                                    {
                                                      "id": 20,
                                                      "label": "# Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content",
                                                      "successors": [
                                                        {
                                                          "id": 14,
                                                          "label": "return io.BytesIO(image_bytes)",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 21,
                                                  "label": "else:",
                                                  "successors": [
                                                    {
                                                      "id": 22,
                                                      "label": "                raise RuntimeError(\"Unexpected output format from the model.\")",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "id": 23,
                                              "label": "except replicate.exceptions.ReplicateError as e:",
                                              "successors": [
                                                {
                                                  "id": 24,
                                                  "label": "if e.status == 401:",
                                                  "successors": [
                                                    {
                                                      "id": 25,
                                                      "label": "                raise RuntimeError(\"Invalid Replicate API token\") from e",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 26,
                                                  "label": "raise RuntimeError(f\"Replicate API error: {str(e)}\") from e",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 27,
              "label": "except Exception as e:",
              "successors": [
                {
                  "id": 28,
                  "label": "logger.exception(\"Failed to generate agent image\")",
                  "successors": [
                    {
                      "id": 29,
                      "label": "raise RuntimeError(f\"Image generation failed: {str(e)}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "ImageSize",
      "type": "class",
      "start_line": 16,
      "end_line": 18,
      "functions": [],
      "simplified_code": "class ImageSize(str, Enum):\n    LANDSCAPE = \"1024x768\"\n",
      "blocks": []
    },
    {
      "name": "ImageStyle",
      "type": "class",
      "start_line": 20,
      "end_line": 22,
      "functions": [],
      "simplified_code": "class ImageStyle(str, Enum):\n    DIGITAL_ART = \"digital art\"\n",
      "blocks": [
        {
          "id": 1,
          "label": "class ImageStyle(str, Enum):",
          "successors": [
            {
              "id": 2,
              "label": "    DIGITAL_ART = \"digital art\"",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import io\nimport logging\nfrom enum import Enum\n\nimport replicate\nimport replicate.exceptions\nimport requests\nfrom replicate.helpers import FileOutput\n\nfrom backend.data.graph import Graph\nfrom backend.util.settings import Settings\n\nlogger = logging.getLogger(__name__)\n\n\n\n\n\n\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")",
  "blocks": [
    {
      "id": 1,
      "label": "import io\nimport logging\nfrom enum import Enum\n\nimport replicate\nimport replicate.exceptions\nimport requests\nfrom replicate.helpers import FileOutput\n\nfrom backend.data.graph import Graph\nfrom backend.util.settings import Settings\n\nlogger = logging.getLogger(__name__)\n\n\ne",
      "successors": [
        {
          "id": 2,
          "label": "raise RuntimeError(f\"Image generation failed: {str(e)}\")",
          "successors": []
        }
      ]
    }
  ]
}