[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 14,
    "children": [],
    "code": "import io\nimport logging\nfrom enum import Enum\n\nimport replicate\nimport replicate.exceptions\nimport requests\nfrom replicate.helpers import FileOutput\n\nfrom backend.data.graph import Graph\nfrom backend.util.settings import Settings\n\nlogger = logging.getLogger(__name__)\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import io\nimport logging\nfrom enum import Enum\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "import replicate\nimport replicate.exceptions\nimport requests\nfrom replicate.helpers import FileOutput\n\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.graph import Graph\nfrom backend.util.settings import Settings\n\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "logger = logging.getLogger(__name__)\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        }
      ]
    }
  },
  {
    "decl_name": "ImageSize",
    "start_line": 15,
    "end_line": 17,
    "children": [],
    "code": "class ImageSize(str, Enum):\n    LANDSCAPE = \"1024x768\"\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "ImageSize_1",
          "code": "class ImageSize(str, Enum):\n    LANDSCAPE = \"1024x768\"\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "ImageStyle",
    "start_line": 19,
    "end_line": 21,
    "children": [],
    "code": "class ImageStyle(str, Enum):\n    DIGITAL_ART = \"digital art\"\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "ImageStyle_1",
          "code": "class ImageStyle(str, Enum):\n    DIGITAL_ART = \"digital art\"\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "generate_agent_image",
    "start_line": 23,
    "end_line": 93,
    "children": [],
    "code": "async def generate_agent_image(agent: Graph) -> io.BytesIO:\n    \"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\n    try:\n        settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n\n            return io.BytesIO(image_bytes)\n\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e\n\n    except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n        raise RuntimeError(f\"Image generation failed: {str(e)}\")\n",
    "cfg": {
      "nodes": [
        {
          "id": "generate_agent_image_1",
          "code": "async def generate_agent_image(agent: Graph) -> io.BytesIO:\n    \"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\n"
        },
        {
          "id": "generate_agent_image_2",
          "code": "    try:\n        settings = Settings()\n\n        if not settings.secrets.replicate_api_key:\n            raise ValueError(\"Missing Replicate API key in settings\")\n"
        },
        {
          "id": "generate_agent_image_3",
          "code": "\n        # Construct prompt from agent details\n        prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\n"
        },
        {
          "id": "generate_agent_image_4",
          "code": "\n        # Set up Replicate client\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n"
        },
        {
          "id": "generate_agent_image_5",
          "code": "\n        # Model parameters\n        input_data = {\n            \"prompt\": prompt,\n            \"width\": 1024,\n            \"height\": 768,\n            \"aspect_ratio\": \"4:3\",\n            \"output_format\": \"jpg\",\n            \"output_quality\": 90,\n            \"num_inference_steps\": 30,\n            \"guidance\": 3.5,\n            \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\n            \"disable_safety_checker\": True,\n        }\n"
        },
        {
          "id": "generate_agent_image_6",
          "code": "\n        try:\n            # Run model\n            output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\n"
        },
        {
          "id": "generate_agent_image_7",
          "code": "\n            # Depending on the model output, extract the image URL or bytes\n            # If the output is a list of FileOutput or URLs\n            if isinstance(output, list) and output:\n"
        },
        {
          "id": "generate_agent_image_8",
          "code": "                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n"
        },
        {
          "id": "generate_agent_image_9",
          "code": "                else:\n                    # If it's a URL string, fetch the image bytes\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n"
        },
        {
          "id": "generate_agent_image_10",
          "code": "            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n"
        },
        {
          "id": "generate_agent_image_11",
          "code": "            elif isinstance(output, str):\n                # Output is a URL\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n"
        },
        {
          "id": "generate_agent_image_12",
          "code": "            else:\n                raise RuntimeError(\"Unexpected output format from the model.\")\n"
        },
        {
          "id": "generate_agent_image_13",
          "code": "\n            return io.BytesIO(image_bytes)\n"
        },
        {
          "id": "generate_agent_image_14",
          "code": "\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n"
        },
        {
          "id": "generate_agent_image_15",
          "code": "                raise RuntimeError(\"Invalid Replicate API token\") from e\n            raise RuntimeError(f\"Replicate API error: {str(e)}\") from e\n"
        },
        {
          "id": "generate_agent_image_16",
          "code": "\n    except Exception as e:\n        logger.exception(\"Failed to generate agent image\")\n"
        },
        {
          "id": "generate_agent_image_17",
          "code": "        raise RuntimeError(f\"Image generation failed: {str(e)}\")\n"
        }
      ],
      "edges": [
        {
          "from": "generate_agent_image_1",
          "to": "generate_agent_image_2"
        },
        {
          "from": "generate_agent_image_2",
          "to": "generate_agent_image_3"
        },
        {
          "from": "generate_agent_image_3",
          "to": "generate_agent_image_4"
        },
        {
          "from": "generate_agent_image_4",
          "to": "generate_agent_image_5"
        },
        {
          "from": "generate_agent_image_5",
          "to": "generate_agent_image_6"
        },
        {
          "from": "generate_agent_image_6",
          "to": "generate_agent_image_7"
        },
        {
          "from": "generate_agent_image_7",
          "to": "generate_agent_image_8"
        },
        {
          "from": "generate_agent_image_7",
          "to": "generate_agent_image_10"
        },
        {
          "from": "generate_agent_image_7",
          "to": "generate_agent_image_11"
        },
        {
          "from": "generate_agent_image_7",
          "to": "generate_agent_image_12"
        },
        {
          "from": "generate_agent_image_8",
          "to": "generate_agent_image_9"
        },
        {
          "from": "generate_agent_image_9",
          "to": "generate_agent_image_13"
        },
        {
          "from": "generate_agent_image_10",
          "to": "generate_agent_image_13"
        },
        {
          "from": "generate_agent_image_11",
          "to": "generate_agent_image_13"
        },
        {
          "from": "generate_agent_image_14",
          "to": "generate_agent_image_15"
        },
        {
          "from": "generate_agent_image_16",
          "to": "generate_agent_image_17"
        }
      ]
    }
  }
]