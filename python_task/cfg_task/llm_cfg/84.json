[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 118,
    "children": [
      {
        "decl_name": "connection_manager",
        "start_line": 11,
        "end_line": 13,
        "children": [],
        "code": "@pytest.fixture\ndef connection_manager() -> ConnectionManager:\n    return ConnectionManager()\n",
        "cfg": {
          "nodes": [
            {
              "id": "connection_manager_1",
              "code": "@pytest.fixture\n"
            },
            {
              "id": "connection_manager_2",
              "code": "def connection_manager() -> ConnectionManager:\n    return ConnectionManager()\n"
            }
          ],
          "edges": [
            {
              "from": "connection_manager_1",
              "to": "connection_manager_2"
            }
          ]
        }
      },
      {
        "decl_name": "mock_websocket",
        "start_line": 16,
        "end_line": 20,
        "children": [],
        "code": "@pytest.fixture\ndef mock_websocket() -> AsyncMock:\n    websocket: AsyncMock = AsyncMock(spec=WebSocket)\n    websocket.send_text = AsyncMock()\n    return websocket\n",
        "cfg": {
          "nodes": [
            {
              "id": "mock_websocket_1",
              "code": "@pytest.fixture\n"
            },
            {
              "id": "mock_websocket_2",
              "code": "def mock_websocket() -> AsyncMock:\n    websocket: AsyncMock = AsyncMock(spec=WebSocket)\n    websocket.send_text = AsyncMock()\n    return websocket\n"
            }
          ],
          "edges": [
            {
              "from": "mock_websocket_1",
              "to": "mock_websocket_2"
            }
          ]
        }
      },
      {
        "decl_name": "test_connect",
        "start_line": 23,
        "end_line": 29,
        "children": [],
        "code": "@pytest.mark.asyncio\nasync def test_connect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    await connection_manager.connect(mock_websocket)\n    assert mock_websocket in connection_manager.active_connections\n    mock_websocket.accept.assert_called_once()\n",
        "cfg": {
          "nodes": [
            {
              "id": "test_connect_1",
              "code": "@pytest.mark.asyncio\nasync def test_connect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n"
            },
            {
              "id": "test_connect_2",
              "code": "    await connection_manager.connect(mock_websocket)\n"
            },
            {
              "id": "test_connect_3",
              "code": "    assert mock_websocket in connection_manager.active_connections\n"
            },
            {
              "id": "test_connect_4",
              "code": "    mock_websocket.accept.assert_called_once()\n"
            }
          ],
          "edges": [
            {
              "from": "test_connect_1",
              "to": "test_connect_2"
            },
            {
              "from": "test_connect_2",
              "to": "test_connect_3"
            },
            {
              "from": "test_connect_3",
              "to": "test_connect_4"
            }
          ]
        }
      },
      {
        "decl_name": "test_disconnect",
        "start_line": 32,
        "end_line": 41,
        "children": [],
        "code": "def test_disconnect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.active_connections.add(mock_websocket)\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    connection_manager.disconnect(mock_websocket)\n\n    assert mock_websocket not in connection_manager.active_connections\n    assert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]\n",
        "cfg": {
          "nodes": [
            {
              "id": "test_disconnect_1",
              "code": "def test_disconnect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n"
            },
            {
              "id": "test_disconnect_2",
              "code": "    connection_manager.active_connections.add(mock_websocket)\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n"
            },
            {
              "id": "test_disconnect_3",
              "code": "    connection_manager.disconnect(mock_websocket)\n"
            },
            {
              "id": "test_disconnect_4",
              "code": "    assert mock_websocket not in connection_manager.active_connections\n    assert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]\n"
            }
          ],
          "edges": [
            {
              "from": "test_disconnect_1",
              "to": "test_disconnect_2"
            },
            {
              "from": "test_disconnect_2",
              "to": "test_disconnect_3"
            },
            {
              "from": "test_disconnect_3",
              "to": "test_disconnect_4"
            }
          ]
        }
      },
      {
        "decl_name": "test_subscribe",
        "start_line": 44,
        "end_line": 49,
        "children": [],
        "code": "@pytest.mark.asyncio\nasync def test_subscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    await connection_manager.subscribe(\"test_graph\", mock_websocket)\n    assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]\n",
        "cfg": {
          "nodes": [
            {
              "id": "test_subscribe_1",
              "code": "@pytest.mark.asyncio\nasync def test_subscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n"
            },
            {
              "id": "test_subscribe_2",
              "code": "    await connection_manager.subscribe(\"test_graph\", mock_websocket)\n    assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]\n"
            }
          ],
          "edges": [
            {
              "from": "test_subscribe_1",
              "to": "test_subscribe_2"
            }
          ]
        }
      },
      {
        "decl_name": "test_unsubscribe",
        "start_line": 52,
        "end_line": 60,
        "children": [],
        "code": "@pytest.mark.asyncio\nasync def test_unsubscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    await connection_manager.unsubscribe(\"test_graph\", mock_websocket)\n\n    assert \"test_graph\" not in connection_manager.subscriptions\n",
        "cfg": {
          "nodes": [
            {
              "id": "test_unsubscribe_1",
              "code": "@pytest.mark.asyncio\nasync def test_unsubscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n"
            },
            {
              "id": "test_unsubscribe_2",
              "code": "    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n"
            },
            {
              "id": "test_unsubscribe_3",
              "code": "    await connection_manager.unsubscribe(\"test_graph\", mock_websocket)\n"
            },
            {
              "id": "test_unsubscribe_4",
              "code": "    assert \"test_graph\" not in connection_manager.subscriptions\n"
            }
          ],
          "edges": [
            {
              "from": "test_unsubscribe_1",
              "to": "test_unsubscribe_2"
            },
            {
              "from": "test_unsubscribe_2",
              "to": "test_unsubscribe_3"
            },
            {
              "from": "test_unsubscribe_3",
              "to": "test_unsubscribe_4"
            }
          ]
        }
      },
      {
        "decl_name": "test_send_execution_result",
        "start_line": 63,
        "end_line": 92,
        "children": [],
        "code": "@pytest.mark.asyncio\nasync def test_send_execution_result(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(tz=timezone.utc),\n        queue_time=None,\n        start_time=datetime.now(tz=timezone.utc),\n        end_time=datetime.now(tz=timezone.utc),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_called_once_with(\n        WsMessage(\n            method=Methods.EXECUTION_EVENT,\n            channel=\"test_graph\",\n            data=result.model_dump(),\n        ).model_dump_json()\n    )\n",
        "cfg": {
          "nodes": [
            {
              "id": "test_send_execution_result_1",
              "code": "@pytest.mark.asyncio\nasync def test_send_execution_result(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n"
            },
            {
              "id": "test_send_execution_result_2",
              "code": "    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n"
            },
            {
              "id": "test_send_execution_result_3",
              "code": "    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(tz=timezone.utc),\n        queue_time=None,\n        start_time=datetime.now(tz=timezone.utc),\n        end_time=datetime.now(tz=timezone.utc),\n    )\n"
            },
            {
              "id": "test_send_execution_result_4",
              "code": "    await connection_manager.send_execution_result(result)\n"
            },
            {
              "id": "test_send_execution_result_5",
              "code": "    mock_websocket.send_text.assert_called_once_with(\n        WsMessage(\n            method=Methods.EXECUTION_EVENT,\n            channel=\"test_graph\",\n            data=result.model_dump(),\n        ).model_dump_json()\n    )\n"
            }
          ],
          "edges": [
            {
              "from": "test_send_execution_result_1",
              "to": "test_send_execution_result_2"
            },
            {
              "from": "test_send_execution_result_2",
              "to": "test_send_execution_result_3"
            },
            {
              "from": "test_send_execution_result_3",
              "to": "test_send_execution_result_4"
            },
            {
              "from": "test_send_execution_result_4",
              "to": "test_send_execution_result_5"
            }
          ]
        }
      },
      {
        "decl_name": "test_send_execution_result_no_subscribers",
        "start_line": 95,
        "end_line": 117,
        "children": [],
        "code": "@pytest.mark.asyncio\nasync def test_send_execution_result_no_subscribers(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(),\n        queue_time=None,\n        start_time=datetime.now(),\n        end_time=datetime.now(),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_not_called()\n",
        "cfg": {
          "nodes": [
            {
              "id": "test_send_execution_result_no_subscribers_1",
              "code": "@pytest.mark.asyncio\nasync def test_send_execution_result_no_subscribers(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n"
            },
            {
              "id": "test_send_execution_result_no_subscribers_2",
              "code": "    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(),\n        queue_time=None,\n        start_time=datetime.now(),\n        end_time=datetime.now(),\n    )\n"
            },
            {
              "id": "test_send_execution_result_no_subscribers_3",
              "code": "\n    await connection_manager.send_execution_result(result)\n"
            },
            {
              "id": "test_send_execution_result_no_subscribers_4",
              "code": "\n    mock_websocket.send_text.assert_not_called()\n"
            }
          ],
          "edges": [
            {
              "from": "test_send_execution_result_no_subscribers_1",
              "to": "test_send_execution_result_no_subscribers_2"
            },
            {
              "from": "test_send_execution_result_no_subscribers_2",
              "to": "test_send_execution_result_no_subscribers_3"
            },
            {
              "from": "test_send_execution_result_no_subscribers_3",
              "to": "test_send_execution_result_no_subscribers_4"
            }
          ]
        }
      }
    ],
    "code": "from datetime import datetime, timezone\nfrom unittest.mock import AsyncMock\n\nimport pytest\nfrom fastapi import WebSocket\n\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import Methods, WsMessage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from datetime import datetime, timezone\nfrom unittest.mock import AsyncMock\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "import pytest\nfrom fastapi import WebSocket\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import Methods, WsMessage\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        }
      ]
    }
  }
]