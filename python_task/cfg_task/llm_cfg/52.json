[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 4,
    "children": [],
    "code": "import hashlib\nimport secrets\nfrom typing import NamedTuple\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import hashlib\nimport secrets\nfrom typing import NamedTuple\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "APIKeyContainer",
    "start_line": 5,
    "end_line": 11,
    "children": [],
    "code": "class APIKeyContainer(NamedTuple):\n    \"\"\"Container for API key parts.\"\"\"\n\n    raw: str\n    prefix: str\n    postfix: str\n    hash: str\n",
    "cfg": {
      "nodes": [
        {
          "id": "APIKeyContainer_1",
          "code": "class APIKeyContainer(NamedTuple):\n    \"\"\"Container for API key parts.\"\"\"\n"
        },
        {
          "id": "APIKeyContainer_2",
          "code": "    raw: str\n    prefix: str\n    postfix: str\n    hash: str\n"
        }
      ],
      "edges": [
        {
          "from": "APIKeyContainer_1",
          "to": "APIKeyContainer_2"
        }
      ]
    }
  },
  {
    "decl_name": "APIKeyManager",
    "start_line": 14,
    "end_line": 33,
    "children": [
      {
        "decl_name": "APIKeyManager.generate_api_key",
        "start_line": 19,
        "end_line": 27,
        "children": [],
        "code": "    def generate_api_key(self) -> APIKeyContainer:\n        \"\"\"Generate a new API key with all its parts.\"\"\"\n        raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\"\n        return APIKeyContainer(\n            raw=raw_key,\n            prefix=raw_key[: self.PREFIX_LENGTH],\n            postfix=raw_key[-self.POSTFIX_LENGTH :],\n            hash=hashlib.sha256(raw_key.encode()).hexdigest(),\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "APIKeyManager.generate_api_key_1",
              "code": "def generate_api_key(self) -> APIKeyContainer:\n        \"\"\"Generate a new API key with all its parts.\"\"\"\n"
            },
            {
              "id": "APIKeyManager.generate_api_key_2",
              "code": "        raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\"\n"
            },
            {
              "id": "APIKeyManager.generate_api_key_3",
              "code": "        return APIKeyContainer(\n            raw=raw_key,\n            prefix=raw_key[: self.PREFIX_LENGTH],\n            postfix=raw_key[-self.POSTFIX_LENGTH :],\n            hash=hashlib.sha256(raw_key.encode()).hexdigest(),\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "APIKeyManager.generate_api_key_1",
              "to": "APIKeyManager.generate_api_key_2"
            },
            {
              "from": "APIKeyManager.generate_api_key_2",
              "to": "APIKeyManager.generate_api_key_3"
            }
          ]
        }
      },
      {
        "decl_name": "APIKeyManager.verify_api_key",
        "start_line": 29,
        "end_line": 33,
        "children": [],
        "code": "    def verify_api_key(self, provided_key: str, stored_hash: str) -> bool:\n        \"\"\"Verify if a provided API key matches the stored hash.\"\"\"\n        if not provided_key.startswith(self.PREFIX):\n            return False\n        return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash\n",
        "cfg": {
          "nodes": [
            {
              "id": "APIKeyManager.verify_api_key_1",
              "code": "def verify_api_key(self, provided_key: str, stored_hash: str) -> bool:\n        \"\"\"Verify if a provided API key matches the stored hash.\"\"\"\n"
            },
            {
              "id": "APIKeyManager.verify_api_key_2",
              "code": "        if not provided_key.startswith(self.PREFIX):\n            return False\n"
            },
            {
              "id": "APIKeyManager.verify_api_key_3",
              "code": "        return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash\n"
            }
          ],
          "edges": [
            {
              "from": "APIKeyManager.verify_api_key_1",
              "to": "APIKeyManager.verify_api_key_2"
            },
            {
              "from": "APIKeyManager.verify_api_key_2",
              "to": "APIKeyManager.verify_api_key_3"
            }
          ]
        }
      }
    ],
    "code": "class APIKeyManager:\n    PREFIX: str = \"agpt_\"\n    PREFIX_LENGTH: int = 8\n    POSTFIX_LENGTH: int = 8\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "APIKeyManager_1",
          "code": "class APIKeyManager:\n    PREFIX: str = \"agpt_\"\n    PREFIX_LENGTH: int = 8\n    POSTFIX_LENGTH: int = 8\n"
        }
      ],
      "edges": []
    }
  }
]