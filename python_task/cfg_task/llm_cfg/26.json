[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 16,
    "children": [],
    "code": "from enum import Enum\nfrom typing import Literal\n\nimport replicate\nfrom pydantic import SecretStr\nfrom replicate.helpers import FileOutput\n\nfrom backend.data.block import Block, BlockCategory, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from enum import Enum\nfrom typing import Literal\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "import replicate\nfrom pydantic import SecretStr\nfrom replicate.helpers import FileOutput\n\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.block import Block, BlockCategory, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        }
      ]
    }
  },
  {
    "decl_name": "ImageSize",
    "start_line": 17,
    "end_line": 26,
    "children": [],
    "code": "class ImageSize(str, Enum):\n    \"\"\"\n    Semantic sizes that map reliably across all models\n    \"\"\"\n\n    SQUARE = \"square\"  # For profile pictures, icons, etc.\n    LANDSCAPE = \"landscape\"  # For traditional photos, scenes\n    PORTRAIT = \"portrait\"  # For vertical photos, portraits\n    WIDE = \"wide\"  # For cinematic, desktop wallpapers\n    TALL = \"tall\"  # For mobile wallpapers, stories\n",
    "cfg": {
      "nodes": [
        {
          "id": "ImageSize_1",
          "code": "class ImageSize(str, Enum):\n    \"\"\"\n    Semantic sizes that map reliably across all models\n    \"\"\"\n"
        },
        {
          "id": "ImageSize_2",
          "code": "    SQUARE = \"square\"  # For profile pictures, icons, etc.\n"
        },
        {
          "id": "ImageSize_3",
          "code": "    LANDSCAPE = \"landscape\"  # For traditional photos, scenes\n"
        },
        {
          "id": "ImageSize_4",
          "code": "    PORTRAIT = \"portrait\"  # For vertical photos, portraits\n"
        },
        {
          "id": "ImageSize_5",
          "code": "    WIDE = \"wide\"  # For cinematic, desktop wallpapers\n"
        },
        {
          "id": "ImageSize_6",
          "code": "    TALL = \"tall\"  # For mobile wallpapers, stories\n"
        }
      ],
      "edges": [
        {
          "from": "ImageSize_1",
          "to": "ImageSize_2"
        },
        {
          "from": "ImageSize_2",
          "to": "ImageSize_3"
        },
        {
          "from": "ImageSize_3",
          "to": "ImageSize_4"
        },
        {
          "from": "ImageSize_4",
          "to": "ImageSize_5"
        },
        {
          "from": "ImageSize_5",
          "to": "ImageSize_6"
        }
      ]
    }
  },
  {
    "decl_name": "GlobalBlock",
    "start_line": 27,
    "end_line": 61,
    "children": [],
    "code": "\n\n# Mapping semantic sizes to model-specific formats\nSIZE_TO_SD_RATIO = {\n    ImageSize.SQUARE: \"1:1\",\n    ImageSize.LANDSCAPE: \"4:3\",\n    ImageSize.PORTRAIT: \"3:4\",\n    ImageSize.WIDE: \"16:9\",\n    ImageSize.TALL: \"9:16\",\n}\n\nSIZE_TO_FLUX_RATIO = {\n    ImageSize.SQUARE: \"1:1\",\n    ImageSize.LANDSCAPE: \"4:3\",\n    ImageSize.PORTRAIT: \"3:4\",\n    ImageSize.WIDE: \"16:9\",\n    ImageSize.TALL: \"9:16\",\n}\n\nSIZE_TO_FLUX_DIMENSIONS = {\n    ImageSize.SQUARE: (1024, 1024),\n    ImageSize.LANDSCAPE: (1365, 1024),\n    ImageSize.PORTRAIT: (1024, 1365),\n    ImageSize.WIDE: (1440, 810),  # Adjusted to maintain 16:9 within 1440 limit\n    ImageSize.TALL: (810, 1440),  # Adjusted to maintain 9:16 within 1440 limit\n}\n\nSIZE_TO_RECRAFT_DIMENSIONS = {\n    ImageSize.SQUARE: \"1024x1024\",\n    ImageSize.LANDSCAPE: \"1365x1024\",\n    ImageSize.PORTRAIT: \"1024x1365\",\n    ImageSize.WIDE: \"1536x1024\",\n    ImageSize.TALL: \"1024x1536\",\n}\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "# Mapping semantic sizes to model-specific formats\nSIZE_TO_SD_RATIO = {\n    ImageSize.SQUARE: \"1:1\",\n    ImageSize.LANDSCAPE: \"4:3\",\n    ImageSize.PORTRAIT: \"3:4\",\n    ImageSize.WIDE: \"16:9\",\n    ImageSize.TALL: \"9:16\",\n}\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "SIZE_TO_FLUX_RATIO = {\n    ImageSize.SQUARE: \"1:1\",\n    ImageSize.LANDSCAPE: \"4:3\",\n    ImageSize.PORTRAIT: \"3:4\",\n    ImageSize.WIDE: \"16:9\",\n    ImageSize.TALL: \"9:16\",\n}\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "SIZE_TO_FLUX_DIMENSIONS = {\n    ImageSize.SQUARE: (1024, 1024),\n    ImageSize.LANDSCAPE: (1365, 1024),\n    ImageSize.PORTRAIT: (1024, 1365),\n    ImageSize.WIDE: (1440, 810),  # Adjusted to maintain 16:9 within 1440 limit\n    ImageSize.TALL: (810, 1440),  # Adjusted to maintain 9:16 within 1440 limit\n}\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "SIZE_TO_RECRAFT_DIMENSIONS = {\n    ImageSize.SQUARE: \"1024x1024\",\n    ImageSize.LANDSCAPE: \"1365x1024\",\n    ImageSize.PORTRAIT: \"1024x1365\",\n    ImageSize.WIDE: \"1536x1024\",\n    ImageSize.TALL: \"1024x1536\",\n}\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        }
      ]
    }
  },
  {
    "decl_name": "ImageStyle",
    "start_line": 63,
    "end_line": 88,
    "children": [],
    "code": "class ImageStyle(str, Enum):\n    \"\"\"\n    Complete set of supported styles\n    \"\"\"\n\n    ANY = \"any\"\n    # Realistic image styles\n    REALISTIC = \"realistic_image\"\n    REALISTIC_BW = \"realistic_image/b_and_w\"\n    REALISTIC_HDR = \"realistic_image/hdr\"\n    REALISTIC_NATURAL = \"realistic_image/natural_light\"\n    REALISTIC_STUDIO = \"realistic_image/studio_portrait\"\n    REALISTIC_ENTERPRISE = \"realistic_image/enterprise\"\n    REALISTIC_HARD_FLASH = \"realistic_image/hard_flash\"\n    REALISTIC_MOTION_BLUR = \"realistic_image/motion_blur\"\n    # Digital illustration styles\n    DIGITAL_ART = \"digital_illustration\"\n    PIXEL_ART = \"digital_illustration/pixel_art\"\n    HAND_DRAWN = \"digital_illustration/hand_drawn\"\n    GRAIN = \"digital_illustration/grain\"\n    SKETCH = \"digital_illustration/infantile_sketch\"\n    POSTER = \"digital_illustration/2d_art_poster\"\n    POSTER_2 = \"digital_illustration/2d_art_poster_2\"\n    HANDMADE_3D = \"digital_illustration/handmade_3d\"\n    HAND_DRAWN_OUTLINE = \"digital_illustration/hand_drawn_outline\"\n    ENGRAVING_COLOR = \"digital_illustration/engraving_color\"\n",
    "cfg": {
      "nodes": [
        {
          "id": "ImageStyle_1",
          "code": "class ImageStyle(str, Enum):\n    \"\"\"\n    Complete set of supported styles\n    \"\"\"\n"
        },
        {
          "id": "ImageStyle_2",
          "code": "    ANY = \"any\"\n"
        },
        {
          "id": "ImageStyle_3",
          "code": "    REALISTIC = \"realistic_image\"\n    REALISTIC_BW = \"realistic_image/b_and_w\"\n    REALISTIC_HDR = \"realistic_image/hdr\"\n    REALISTIC_NATURAL = \"realistic_image/natural_light\"\n    REALISTIC_STUDIO = \"realistic_image/studio_portrait\"\n    REALISTIC_ENTERPRISE = \"realistic_image/enterprise\"\n    REALISTIC_HARD_FLASH = \"realistic_image/hard_flash\"\n    REALISTIC_MOTION_BLUR = \"realistic_image/motion_blur\"\n"
        },
        {
          "id": "ImageStyle_4",
          "code": "    DIGITAL_ART = \"digital_illustration\"\n    PIXEL_ART = \"digital_illustration/pixel_art\"\n    HAND_DRAWN = \"digital_illustration/hand_drawn\"\n    GRAIN = \"digital_illustration/grain\"\n    SKETCH = \"digital_illustration/infantile_sketch\"\n    POSTER = \"digital_illustration/2d_art_poster\"\n    POSTER_2 = \"digital_illustration/2d_art_poster_2\"\n    HANDMADE_3D = \"digital_illustration/handmade_3d\"\n    HAND_DRAWN_OUTLINE = \"digital_illustration/hand_drawn_outline\"\n    ENGRAVING_COLOR = \"digital_illustration/engraving_color\"\n"
        }
      ],
      "edges": [
        {
          "from": "ImageStyle_1",
          "to": "ImageStyle_2"
        },
        {
          "from": "ImageStyle_2",
          "to": "ImageStyle_3"
        },
        {
          "from": "ImageStyle_3",
          "to": "ImageStyle_4"
        }
      ]
    }
  },
  {
    "decl_name": "ImageGenModel",
    "start_line": 91,
    "end_line": 99,
    "children": [],
    "code": "class ImageGenModel(str, Enum):\n    \"\"\"\n    Available model providers\n    \"\"\"\n\n    FLUX = \"Flux 1.1 Pro\"\n    FLUX_ULTRA = \"Flux 1.1 Pro Ultra\"\n    RECRAFT = \"Recraft v3\"\n    SD3_5 = \"Stable Diffusion 3.5 Medium\"\n",
    "cfg": {
      "nodes": [
        {
          "id": "ImageGenModel_1",
          "code": "class ImageGenModel(str, Enum):\n"
        },
        {
          "id": "ImageGenModel_2",
          "code": "    \"\"\"\n    Available model providers\n    \"\"\"\n"
        },
        {
          "id": "ImageGenModel_3",
          "code": "\n"
        },
        {
          "id": "ImageGenModel_4",
          "code": "    FLUX = \"Flux 1.1 Pro\"\n"
        },
        {
          "id": "ImageGenModel_5",
          "code": "    FLUX_ULTRA = \"Flux 1.1 Pro Ultra\"\n"
        },
        {
          "id": "ImageGenModel_6",
          "code": "    RECRAFT = \"Recraft v3\"\n"
        },
        {
          "id": "ImageGenModel_7",
          "code": "    SD3_5 = \"Stable Diffusion 3.5 Medium\"\n"
        }
      ],
      "edges": [
        {
          "from": "ImageGenModel_1",
          "to": "ImageGenModel_2"
        },
        {
          "from": "ImageGenModel_2",
          "to": "ImageGenModel_3"
        },
        {
          "from": "ImageGenModel_3",
          "to": "ImageGenModel_4"
        },
        {
          "from": "ImageGenModel_4",
          "to": "ImageGenModel_5"
        },
        {
          "from": "ImageGenModel_5",
          "to": "ImageGenModel_6"
        },
        {
          "from": "ImageGenModel_6",
          "to": "ImageGenModel_7"
        }
      ]
    }
  },
  {
    "decl_name": "AIImageGeneratorBlock",
    "start_line": 102,
    "end_line": 324,
    "children": [
      {
        "decl_name": "AIImageGeneratorBlock.Input",
        "start_line": 103,
        "end_line": 135,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"Enter your Replicate API key to access the image generation API. You can obtain an API key from https://replicate.com/account/api-tokens.\",\n        )\n        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A red panda using a laptop in a snowy forest'\",\n            title=\"Prompt\",\n        )\n        model: ImageGenModel = SchemaField(\n            description=\"The AI model to use for image generation\",\n            default=ImageGenModel.SD3_5,\n            title=\"Model\",\n        )\n        size: ImageSize = SchemaField(\n            description=(\n                \"Format of the generated image:\\n\"\n                \"- Square: Perfect for profile pictures, icons\\n\"\n                \"- Landscape: Traditional photo format\\n\"\n                \"- Portrait: Vertical photos, portraits\\n\"\n                \"- Wide: Cinematic format, desktop wallpapers\\n\"\n                \"- Tall: Mobile wallpapers, social media stories\"\n            ),\n            default=ImageSize.SQUARE,\n            title=\"Image Format\",\n        )\n        style: ImageStyle = SchemaField(\n            description=\"Visual style for the generated image\",\n            default=ImageStyle.ANY,\n            title=\"Image Style\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIImageGeneratorBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "AIImageGeneratorBlock.Input_2",
              "code": "        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"Enter your Replicate API key to access the image generation API. You can obtain an API key from https://replicate.com/account/api-tokens.\",\n        )\n"
            },
            {
              "id": "AIImageGeneratorBlock.Input_3",
              "code": "        prompt: str = SchemaField(\n            description=\"Text prompt for image generation\",\n            placeholder=\"e.g., 'A red panda using a laptop in a snowy forest'\",\n            title=\"Prompt\",\n        )\n"
            },
            {
              "id": "AIImageGeneratorBlock.Input_4",
              "code": "        model: ImageGenModel = SchemaField(\n            description=\"The AI model to use for image generation\",\n            default=ImageGenModel.SD3_5,\n            title=\"Model\",\n        )\n"
            },
            {
              "id": "AIImageGeneratorBlock.Input_5",
              "code": "        size: ImageSize = SchemaField(\n            description=(\n                \"Format of the generated image:\\n\"\n                \"- Square: Perfect for profile pictures, icons\\n\"\n                \"- Landscape: Traditional photo format\\n\"\n                \"- Portrait: Vertical photos, portraits\\n\"\n                \"- Wide: Cinematic format, desktop wallpapers\\n\"\n                \"- Tall: Mobile wallpapers, social media stories\"\n            ),\n            default=ImageSize.SQUARE,\n            title=\"Image Format\",\n        )\n"
            },
            {
              "id": "AIImageGeneratorBlock.Input_6",
              "code": "        style: ImageStyle = SchemaField(\n            description=\"Visual style for the generated image\",\n            default=ImageStyle.ANY,\n            title=\"Image Style\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "AIImageGeneratorBlock.Input_1",
              "to": "AIImageGeneratorBlock.Input_2"
            },
            {
              "from": "AIImageGeneratorBlock.Input_2",
              "to": "AIImageGeneratorBlock.Input_3"
            },
            {
              "from": "AIImageGeneratorBlock.Input_3",
              "to": "AIImageGeneratorBlock.Input_4"
            },
            {
              "from": "AIImageGeneratorBlock.Input_4",
              "to": "AIImageGeneratorBlock.Input_5"
            },
            {
              "from": "AIImageGeneratorBlock.Input_5",
              "to": "AIImageGeneratorBlock.Input_6"
            }
          ]
        }
      },
      {
        "decl_name": "AIImageGeneratorBlock.Output",
        "start_line": 137,
        "end_line": 139,
        "children": [],
        "code": "    class Output(BlockSchema):\n        image_url: str = SchemaField(description=\"URL of the generated image\")\n        error: str = SchemaField(description=\"Error message if generation failed\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIImageGeneratorBlock.Output_1",
              "code": "class Output(BlockSchema):\n        image_url: str = SchemaField(description=\"URL of the generated image\")\n        error: str = SchemaField(description=\"Error message if generation failed\")\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AIImageGeneratorBlock.__init__",
        "start_line": 141,
        "end_line": 165,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"ed1ae7a0-b770-4089-b520-1f0005fad19a\",\n            description=\"Generate images using various AI models through a unified interface\",\n            categories={BlockCategory.AI},\n            input_schema=AIImageGeneratorBlock.Input,\n            output_schema=AIImageGeneratorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"prompt\": \"An octopus using a laptop in a snowy forest with 'AutoGPT' clearly visible on the screen\",\n                \"model\": ImageGenModel.RECRAFT,\n                \"size\": ImageSize.SQUARE,\n                \"style\": ImageStyle.REALISTIC,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"image_url\",\n                    \"https://replicate.delivery/generated-image.webp\",\n                ),\n            ],\n            test_mock={\n                \"_run_client\": lambda *args, **kwargs: \"https://replicate.delivery/generated-image.webp\"\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIImageGeneratorBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"ed1ae7a0-b770-4089-b520-1f0005fad19a\",\n            description=\"Generate images using various AI models through a unified interface\",\n            categories={BlockCategory.AI},\n            input_schema=AIImageGeneratorBlock.Input,\n            output_schema=AIImageGeneratorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"prompt\": \"An octopus using a laptop in a snowy forest with 'AutoGPT' clearly visible on the screen\",\n                \"model\": ImageGenModel.RECRAFT,\n                \"size\": ImageSize.SQUARE,\n                \"style\": ImageStyle.REALISTIC,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"image_url\",\n                    \"https://replicate.delivery/generated-image.webp\",\n                ),\n            ],\n            test_mock={\n                \"_run_client\": lambda *args, **kwargs: \"https://replicate.delivery/generated-image.webp\"\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AIImageGeneratorBlock._run_client",
        "start_line": 167,
        "end_line": 195,
        "children": [],
        "code": "    def _run_client(\n        self, credentials: APIKeyCredentials, model_name: str, input_params: dict\n    ):\n        try:\n            # Initialize Replicate client\n            client = replicate.Client(api_token=credentials.api_key.get_secret_value())\n\n            # Run the model with input parameters\n            output = client.run(model_name, input=input_params, wait=False)\n\n            # Process output\n            if isinstance(output, list) and len(output) > 0:\n                if isinstance(output[0], FileOutput):\n                    result_url = output[0].url\n                else:\n                    result_url = output[0]\n            elif isinstance(output, FileOutput):\n                result_url = output.url\n            elif isinstance(output, str):\n                result_url = output\n            else:\n                result_url = None\n\n            return result_url\n\n        except TypeError as e:\n            raise TypeError(f\"Error during model execution: {e}\")\n        except Exception as e:\n            raise RuntimeError(f\"Unexpected error during model execution: {e}\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIImageGeneratorBlock._run_client_1",
              "code": "def _run_client(\n        self, credentials: APIKeyCredentials, model_name: str, input_params: dict\n    ):\n"
            },
            {
              "id": "AIImageGeneratorBlock._run_client_2",
              "code": "        try:\n            # Initialize Replicate client\n            client = replicate.Client(api_token=credentials.api_key.get_secret_value())\n"
            },
            {
              "id": "AIImageGeneratorBlock._run_client_3",
              "code": "            # Run the model with input parameters\n            output = client.run(model_name, input=input_params, wait=False)\n"
            },
            {
              "id": "AIImageGeneratorBlock._run_client_4",
              "code": "            # Process output\n            if isinstance(output, list) and len(output) > 0:\n                if isinstance(output[0], FileOutput):\n                    result_url = output[0].url\n                else:\n                    result_url = output[0]\n            elif isinstance(output, FileOutput):\n                result_url = output.url\n            elif isinstance(output, str):\n                result_url = output\n            else:\n                result_url = None\n"
            },
            {
              "id": "AIImageGeneratorBlock._run_client_5",
              "code": "            return result_url\n"
            },
            {
              "id": "AIImageGeneratorBlock._run_client_6",
              "code": "        except TypeError as e:\n            raise TypeError(f\"Error during model execution: {e}\")\n"
            },
            {
              "id": "AIImageGeneratorBlock._run_client_7",
              "code": "        except Exception as e:\n            raise RuntimeError(f\"Unexpected error during model execution: {e}\")\n"
            }
          ],
          "edges": [
            {
              "from": "AIImageGeneratorBlock._run_client_1",
              "to": "AIImageGeneratorBlock._run_client_2"
            },
            {
              "from": "AIImageGeneratorBlock._run_client_2",
              "to": "AIImageGeneratorBlock._run_client_3"
            },
            {
              "from": "AIImageGeneratorBlock._run_client_3",
              "to": "AIImageGeneratorBlock._run_client_4"
            },
            {
              "from": "AIImageGeneratorBlock._run_client_4",
              "to": "AIImageGeneratorBlock._run_client_5"
            }
          ]
        }
      },
      {
        "decl_name": "AIImageGeneratorBlock.generate_image",
        "start_line": 197,
        "end_line": 265,
        "children": [],
        "code": "    def generate_image(self, input_data: Input, credentials: APIKeyCredentials):\n        try:\n            # Handle style-based prompt modification for models without native style support\n            modified_prompt = input_data.prompt\n            if input_data.model not in [ImageGenModel.RECRAFT]:\n                style_prefix = self._style_to_prompt_prefix(input_data.style)\n                modified_prompt = f\"{style_prefix} {modified_prompt}\".strip()\n\n            if input_data.model == ImageGenModel.SD3_5:\n                # Use Stable Diffusion 3.5 with aspect ratio\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"aspect_ratio\": SIZE_TO_SD_RATIO[input_data.size],\n                    \"output_format\": \"webp\",\n                    \"output_quality\": 90,\n                    \"steps\": 40,\n                    \"cfg_scale\": 7.0,\n                }\n                output = self._run_client(\n                    credentials,\n                    \"stability-ai/stable-diffusion-3.5-medium\",\n                    input_params,\n                )\n                return output\n\n            elif input_data.model == ImageGenModel.FLUX:\n                # Use Flux-specific dimensions with 'jpg' format to avoid ReplicateError\n                width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"width\": width,\n                    \"height\": height,\n                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],\n                    \"output_format\": \"jpg\",  # Set to jpg for Flux models\n                    \"output_quality\": 90,\n                }\n                output = self._run_client(\n                    credentials, \"black-forest-labs/flux-1.1-pro\", input_params\n                )\n                return output\n\n            elif input_data.model == ImageGenModel.FLUX_ULTRA:\n                width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"width\": width,\n                    \"height\": height,\n                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],\n                    \"output_format\": \"jpg\",\n                    \"output_quality\": 90,\n                }\n                output = self._run_client(\n                    credentials, \"black-forest-labs/flux-1.1-pro-ultra\", input_params\n                )\n                return output\n\n            elif input_data.model == ImageGenModel.RECRAFT:\n                input_params = {\n                    \"prompt\": input_data.prompt,\n                    \"size\": SIZE_TO_RECRAFT_DIMENSIONS[input_data.size],\n                    \"style\": input_data.style.value,\n                }\n                output = self._run_client(\n                    credentials, \"recraft-ai/recraft-v3\", input_params\n                )\n                return output\n\n        except Exception as e:\n            raise RuntimeError(f\"Failed to generate image: {str(e)}\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIImageGeneratorBlock.generate_image_1",
              "code": "def generate_image(self, input_data: Input, credentials: APIKeyCredentials):\n        try:\n"
            },
            {
              "id": "AIImageGeneratorBlock.generate_image_2",
              "code": "            # Handle style-based prompt modification for models without native style support\n            modified_prompt = input_data.prompt\n"
            },
            {
              "id": "AIImageGeneratorBlock.generate_image_3",
              "code": "            if input_data.model not in [ImageGenModel.RECRAFT]:\n                style_prefix = self._style_to_prompt_prefix(input_data.style)\n                modified_prompt = f\"{style_prefix} {modified_prompt}\".strip()\n"
            },
            {
              "id": "AIImageGeneratorBlock.generate_image_4",
              "code": "            if input_data.model == ImageGenModel.SD3_5:\n                # Use Stable Diffusion 3.5 with aspect ratio\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"aspect_ratio\": SIZE_TO_SD_RATIO[input_data.size],\n                    \"output_format\": \"webp\",\n                    \"output_quality\": 90,\n                    \"steps\": 40,\n                    \"cfg_scale\": 7.0,\n                }\n                output = self._run_client(\n                    credentials,\n                    \"stability-ai/stable-diffusion-3.5-medium\",\n                    input_params,\n                )\n                return output\n"
            },
            {
              "id": "AIImageGeneratorBlock.generate_image_5",
              "code": "            elif input_data.model == ImageGenModel.FLUX:\n                # Use Flux-specific dimensions with 'jpg' format to avoid ReplicateError\n                width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"width\": width,\n                    \"height\": height,\n                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],\n                    \"output_format\": \"jpg\",  # Set to jpg for Flux models\n                    \"output_quality\": 90,\n                }\n                output = self._run_client(\n                    credentials, \"black-forest-labs/flux-1.1-pro\", input_params\n                )\n                return output\n"
            },
            {
              "id": "AIImageGeneratorBlock.generate_image_6",
              "code": "            elif input_data.model == ImageGenModel.FLUX_ULTRA:\n                width, height = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {\n                    \"prompt\": modified_prompt,\n                    \"width\": width,\n                    \"height\": height,\n                    \"aspect_ratio\": SIZE_TO_FLUX_RATIO[input_data.size],\n                    \"output_format\": \"jpg\",\n                    \"output_quality\": 90,\n                }\n                output = self._run_client(\n                    credentials, \"black-forest-labs/flux-1.1-pro-ultra\", input_params\n                )\n                return output\n"
            },
            {
              "id": "AIImageGeneratorBlock.generate_image_7",
              "code": "            elif input_data.model == ImageGenModel.RECRAFT:\n                input_params = {\n                    \"prompt\": input_data.prompt,\n                    \"size\": SIZE_TO_RECRAFT_DIMENSIONS[input_data.size],\n                    \"style\": input_data.style.value,\n                }\n                output = self._run_client(\n                    credentials, \"recraft-ai/recraft-v3\", input_params\n                )\n                return output\n"
            },
            {
              "id": "AIImageGeneratorBlock.generate_image_8",
              "code": "        except Exception as e:\n            raise RuntimeError(f\"Failed to generate image: {str(e)}\")\n"
            }
          ],
          "edges": [
            {
              "from": "AIImageGeneratorBlock.generate_image_1",
              "to": "AIImageGeneratorBlock.generate_image_2"
            },
            {
              "from": "AIImageGeneratorBlock.generate_image_2",
              "to": "AIImageGeneratorBlock.generate_image_3"
            },
            {
              "from": "AIImageGeneratorBlock.generate_image_3",
              "to": "AIImageGeneratorBlock.generate_image_4"
            },
            {
              "from": "AIImageGeneratorBlock.generate_image_3",
              "to": "AIImageGeneratorBlock.generate_image_5"
            },
            {
              "from": "AIImageGeneratorBlock.generate_image_3",
              "to": "AIImageGeneratorBlock.generate_image_6"
            },
            {
              "from": "AIImageGeneratorBlock.generate_image_3",
              "to": "AIImageGeneratorBlock.generate_image_7"
            },
            {
              "from": "AIImageGeneratorBlock.generate_image_4",
              "to": "AIImageGeneratorBlock.generate_image_8"
            },
            {
              "from": "AIImageGeneratorBlock.generate_image_5",
              "to": "AIImageGeneratorBlock.generate_image_8"
            },
            {
              "from": "AIImageGeneratorBlock.generate_image_6",
              "to": "AIImageGeneratorBlock.generate_image_8"
            },
            {
              "from": "AIImageGeneratorBlock.generate_image_7",
              "to": "AIImageGeneratorBlock.generate_image_8"
            }
          ]
        }
      },
      {
        "decl_name": "AIImageGeneratorBlock._style_to_prompt_prefix",
        "start_line": 267,
        "end_line": 296,
        "children": [],
        "code": "    def _style_to_prompt_prefix(self, style: ImageStyle) -> str:\n        \"\"\"\n        Convert a style enum to a prompt prefix for models without native style support.\n        \"\"\"\n        if style == ImageStyle.ANY:\n            return \"\"\n\n        style_map = {\n            ImageStyle.REALISTIC: \"photorealistic\",\n            ImageStyle.REALISTIC_BW: \"black and white photograph\",\n            ImageStyle.REALISTIC_HDR: \"HDR photograph\",\n            ImageStyle.REALISTIC_NATURAL: \"natural light photograph\",\n            ImageStyle.REALISTIC_STUDIO: \"studio portrait photograph\",\n            ImageStyle.REALISTIC_ENTERPRISE: \"enterprise photograph\",\n            ImageStyle.REALISTIC_HARD_FLASH: \"hard flash photograph\",\n            ImageStyle.REALISTIC_MOTION_BLUR: \"motion blur photograph\",\n            ImageStyle.DIGITAL_ART: \"digital art\",\n            ImageStyle.PIXEL_ART: \"pixel art\",\n            ImageStyle.HAND_DRAWN: \"hand drawn illustration\",\n            ImageStyle.GRAIN: \"grainy digital illustration\",\n            ImageStyle.SKETCH: \"sketchy illustration\",\n            ImageStyle.POSTER: \"2D art poster\",\n            ImageStyle.POSTER_2: \"alternate 2D art poster\",\n            ImageStyle.HANDMADE_3D: \"handmade 3D illustration\",\n            ImageStyle.HAND_DRAWN_OUTLINE: \"hand drawn outline illustration\",\n            ImageStyle.ENGRAVING_COLOR: \"color engraving illustration\",\n        }\n\n        style_text = style_map.get(style, \"\")\n        return f\"{style_text} of\" if style_text else \"\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIImageGeneratorBlock._style_to_prompt_prefix_1",
              "code": "def _style_to_prompt_prefix(self, style: ImageStyle) -> str:\n        \"\"\"\n        Convert a style enum to a prompt prefix for models without native style support.\n        \"\"\"\n"
            },
            {
              "id": "AIImageGeneratorBlock._style_to_prompt_prefix_2",
              "code": "        if style == ImageStyle.ANY:\n            return \"\"\n"
            },
            {
              "id": "AIImageGeneratorBlock._style_to_prompt_prefix_3",
              "code": "        style_map = {\n            ImageStyle.REALISTIC: \"photorealistic\",\n            ImageStyle.REALISTIC_BW: \"black and white photograph\",\n            ImageStyle.REALISTIC_HDR: \"HDR photograph\",\n            ImageStyle.REALISTIC_NATURAL: \"natural light photograph\",\n            ImageStyle.REALISTIC_STUDIO: \"studio portrait photograph\",\n            ImageStyle.REALISTIC_ENTERPRISE: \"enterprise photograph\",\n            ImageStyle.REALISTIC_HARD_FLASH: \"hard flash photograph\",\n            ImageStyle.REALISTIC_MOTION_BLUR: \"motion blur photograph\",\n            ImageStyle.DIGITAL_ART: \"digital art\",\n            ImageStyle.PIXEL_ART: \"pixel art\",\n            ImageStyle.HAND_DRAWN: \"hand drawn illustration\",\n            ImageStyle.GRAIN: \"grainy digital illustration\",\n            ImageStyle.SKETCH: \"sketchy illustration\",\n            ImageStyle.POSTER: \"2D art poster\",\n            ImageStyle.POSTER_2: \"alternate 2D art poster\",\n            ImageStyle.HANDMADE_3D: \"handmade 3D illustration\",\n            ImageStyle.HAND_DRAWN_OUTLINE: \"hand drawn outline illustration\",\n            ImageStyle.ENGRAVING_COLOR: \"color engraving illustration\",\n        }\n"
            },
            {
              "id": "AIImageGeneratorBlock._style_to_prompt_prefix_4",
              "code": "        style_text = style_map.get(style, \"\")\n        return f\"{style_text} of\" if style_text else \"\"\n"
            }
          ],
          "edges": [
            {
              "from": "AIImageGeneratorBlock._style_to_prompt_prefix_1",
              "to": "AIImageGeneratorBlock._style_to_prompt_prefix_2"
            },
            {
              "from": "AIImageGeneratorBlock._style_to_prompt_prefix_2",
              "to": "AIImageGeneratorBlock._style_to_prompt_prefix_3"
            },
            {
              "from": "AIImageGeneratorBlock._style_to_prompt_prefix_2",
              "to": "AIImageGeneratorBlock._style_to_prompt_prefix_4"
            },
            {
              "from": "AIImageGeneratorBlock._style_to_prompt_prefix_3",
              "to": "AIImageGeneratorBlock._style_to_prompt_prefix_4"
            }
          ]
        }
      },
      {
        "decl_name": "AIImageGeneratorBlock.run",
        "start_line": 298,
        "end_line": 307,
        "children": [],
        "code": "    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs):\n        try:\n            url = self.generate_image(input_data, credentials)\n            if url:\n                yield \"image_url\", url\n            else:\n                yield \"error\", \"Image generation returned an empty result.\"\n        except Exception as e:\n            # Capture and return only the message of the exception, avoiding serialization of non-serializable objects\n            yield \"error\", str(e)\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIImageGeneratorBlock.run_1",
              "code": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs):\n"
            },
            {
              "id": "AIImageGeneratorBlock.run_2",
              "code": "        try:\n            url = self.generate_image(input_data, credentials)\n"
            },
            {
              "id": "AIImageGeneratorBlock.run_3",
              "code": "            if url:\n                yield \"image_url\", url\n"
            },
            {
              "id": "AIImageGeneratorBlock.run_4",
              "code": "            else:\n                yield \"error\", \"Image generation returned an empty result.\"\n"
            },
            {
              "id": "AIImageGeneratorBlock.run_5",
              "code": "        except Exception as e:\n            # Capture and return only the message of the exception, avoiding serialization of non-serializable objects\n            yield \"error\", str(e)\n"
            }
          ],
          "edges": [
            {
              "from": "AIImageGeneratorBlock.run_1",
              "to": "AIImageGeneratorBlock.run_2"
            },
            {
              "from": "AIImageGeneratorBlock.run_2",
              "to": "AIImageGeneratorBlock.run_3"
            },
            {
              "from": "AIImageGeneratorBlock.run_2",
              "to": "AIImageGeneratorBlock.run_5"
            },
            {
              "from": "AIImageGeneratorBlock.run_3",
              "to": "AIImageGeneratorBlock.run_4"
            }
          ]
        }
      }
    ],
    "code": "class AIImageGeneratorBlock(Block):\n\n\n\n\n\n\n\n\n# Test credentials stay the same\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)\n\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}\n",
    "cfg": {
      "nodes": [
        {
          "id": "AIImageGeneratorBlock_1",
          "code": "class AIImageGeneratorBlock(Block):\n"
        },
        {
          "id": "AIImageGeneratorBlock_2",
          "code": "# Test credentials stay the same\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)\n"
        },
        {
          "id": "AIImageGeneratorBlock_3",
          "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}\n"
        }
      ],
      "edges": [
        {
          "from": "AIImageGeneratorBlock_2",
          "to": "AIImageGeneratorBlock_3"
        }
      ]
    }
  },
  {
    "decl_name": "GlobalBlock",
    "start_line": 310,
    "end_line": 325,
    "children": [],
    "code": "# Test credentials stay the same\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)\n\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "# Test credentials stay the same\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        }
      ]
    }
  }
]