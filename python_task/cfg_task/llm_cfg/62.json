[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 8,
    "children": [],
    "code": "from urllib.parse import parse_qs, urlparse\n\nfrom youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.formatters import TextFormatter\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from urllib.parse import parse_qs, urlparse\n\nfrom youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.formatters import TextFormatter\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "TranscribeYoutubeVideoBlock",
    "start_line": 9,
    "end_line": 89,
    "children": [
      {
        "decl_name": "TranscribeYoutubeVideoBlock.Input",
        "start_line": 10,
        "end_line": 15,
        "children": [],
        "code": "    class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "TranscribeYoutubeVideoBlock.Input_1",
              "code": "class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "TranscribeYoutubeVideoBlock.Output",
        "start_line": 17,
        "end_line": 22,
        "children": [],
        "code": "    class Output(BlockSchema):\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "TranscribeYoutubeVideoBlock.Output_1",
              "code": "class Output(BlockSchema):\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "TranscribeYoutubeVideoBlock.__init__",
        "start_line": 24,
        "end_line": 45,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "TranscribeYoutubeVideoBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "TranscribeYoutubeVideoBlock.extract_video_id",
        "start_line": 48,
        "end_line": 60,
        "children": [],
        "code": "    def extract_video_id(url: str) -> str:\n        parsed_url = urlparse(url)\n        if parsed_url.netloc == \"youtu.be\":\n            return parsed_url.path[1:]\n        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):\n            if parsed_url.path == \"/watch\":\n                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]\n            if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]\n            if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]\n        raise ValueError(f\"Invalid YouTube URL: {url}\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "TranscribeYoutubeVideoBlock.extract_video_id_1",
              "code": "def extract_video_id(url: str) -> str:\n        parsed_url = urlparse(url)\n"
            },
            {
              "id": "TranscribeYoutubeVideoBlock.extract_video_id_2",
              "code": "        if parsed_url.netloc == \"youtu.be\":\n            return parsed_url.path[1:]\n"
            },
            {
              "id": "TranscribeYoutubeVideoBlock.extract_video_id_3",
              "code": "        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):\n            if parsed_url.path == \"/watch\":\n"
            },
            {
              "id": "TranscribeYoutubeVideoBlock.extract_video_id_4",
              "code": "                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]\n"
            },
            {
              "id": "TranscribeYoutubeVideoBlock.extract_video_id_5",
              "code": "            if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]\n"
            },
            {
              "id": "TranscribeYoutubeVideoBlock.extract_video_id_6",
              "code": "            if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]\n"
            },
            {
              "id": "TranscribeYoutubeVideoBlock.extract_video_id_7",
              "code": "        raise ValueError(f\"Invalid YouTube URL: {url}\")\n"
            }
          ],
          "edges": [
            {
              "from": "TranscribeYoutubeVideoBlock.extract_video_id_1",
              "to": "TranscribeYoutubeVideoBlock.extract_video_id_2"
            },
            {
              "from": "TranscribeYoutubeVideoBlock.extract_video_id_1",
              "to": "TranscribeYoutubeVideoBlock.extract_video_id_3"
            },
            {
              "from": "TranscribeYoutubeVideoBlock.extract_video_id_3",
              "to": "TranscribeYoutubeVideoBlock.extract_video_id_4"
            },
            {
              "from": "TranscribeYoutubeVideoBlock.extract_video_id_3",
              "to": "TranscribeYoutubeVideoBlock.extract_video_id_5"
            },
            {
              "from": "TranscribeYoutubeVideoBlock.extract_video_id_3",
              "to": "TranscribeYoutubeVideoBlock.extract_video_id_6"
            },
            {
              "from": "TranscribeYoutubeVideoBlock.extract_video_id_3",
              "to": "TranscribeYoutubeVideoBlock.extract_video_id_7"
            }
          ]
        }
      },
      {
        "decl_name": "TranscribeYoutubeVideoBlock.get_transcript",
        "start_line": 63,
        "end_line": 79,
        "children": [],
        "code": "    def get_transcript(video_id: str):\n        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n\n            if not transcript_list:\n                raise ValueError(f\"No transcripts found for the video: {video_id}\")\n\n            for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript(\n                    [transcript.language_code]\n                )\n                return YouTubeTranscriptApi.get_transcript(\n                    video_id, languages=[first_transcript.language_code]\n                )\n\n        except Exception:\n            raise ValueError(f\"No transcripts found for the video: {video_id}\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "TranscribeYoutubeVideoBlock.get_transcript_1",
              "code": "def get_transcript(video_id: str):\n"
            },
            {
              "id": "TranscribeYoutubeVideoBlock.get_transcript_2",
              "code": "        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n"
            },
            {
              "id": "TranscribeYoutubeVideoBlock.get_transcript_3",
              "code": "            if not transcript_list:\n                raise ValueError(f\"No transcripts found for the video: {video_id}\")\n"
            },
            {
              "id": "TranscribeYoutubeVideoBlock.get_transcript_4",
              "code": "            for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript(\n                    [transcript.language_code]\n                )\n                return YouTubeTranscriptApi.get_transcript(\n                    video_id, languages=[first_transcript.language_code]\n                )\n"
            },
            {
              "id": "TranscribeYoutubeVideoBlock.get_transcript_5",
              "code": "        except Exception:\n            raise ValueError(f\"No transcripts found for the video: {video_id}\")\n"
            }
          ],
          "edges": [
            {
              "from": "TranscribeYoutubeVideoBlock.get_transcript_1",
              "to": "TranscribeYoutubeVideoBlock.get_transcript_2"
            },
            {
              "from": "TranscribeYoutubeVideoBlock.get_transcript_2",
              "to": "TranscribeYoutubeVideoBlock.get_transcript_3"
            },
            {
              "from": "TranscribeYoutubeVideoBlock.get_transcript_2",
              "to": "TranscribeYoutubeVideoBlock.get_transcript_5"
            },
            {
              "from": "TranscribeYoutubeVideoBlock.get_transcript_3",
              "to": "TranscribeYoutubeVideoBlock.get_transcript_4"
            }
          ]
        }
      },
      {
        "decl_name": "TranscribeYoutubeVideoBlock.run",
        "start_line": 81,
        "end_line": 89,
        "children": [],
        "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        video_id = self.extract_video_id(input_data.youtube_url)\n        yield \"video_id\", video_id\n\n        transcript = self.get_transcript(video_id)\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript)\n\n        yield \"transcript\", transcript_text\n",
        "cfg": {
          "nodes": [
            {
              "id": "TranscribeYoutubeVideoBlock.run_1",
              "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        video_id = self.extract_video_id(input_data.youtube_url)\n        yield \"video_id\", video_id\n"
            },
            {
              "id": "TranscribeYoutubeVideoBlock.run_2",
              "code": "        transcript = self.get_transcript(video_id)\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript)\n"
            },
            {
              "id": "TranscribeYoutubeVideoBlock.run_3",
              "code": "        yield \"transcript\", transcript_text\n"
            }
          ],
          "edges": [
            {
              "from": "TranscribeYoutubeVideoBlock.run_1",
              "to": "TranscribeYoutubeVideoBlock.run_2"
            },
            {
              "from": "TranscribeYoutubeVideoBlock.run_2",
              "to": "TranscribeYoutubeVideoBlock.run_3"
            }
          ]
        }
      }
    ],
    "code": "class TranscribeYoutubeVideoBlock(Block):\n\n\n\n    @staticmethod\n\n    @staticmethod\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "TranscribeYoutubeVideoBlock_1",
          "code": "class TranscribeYoutubeVideoBlock(Block):\n"
        },
        {
          "id": "TranscribeYoutubeVideoBlock_2",
          "code": "    @staticmethod\n"
        },
        {
          "id": "TranscribeYoutubeVideoBlock_3",
          "code": "    @staticmethod\n"
        }
      ],
      "edges": []
    }
  }
]