{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 122,
  "functions": [],
  "classes": [
    {
      "name": "DateTimeEncoder",
      "type": "class",
      "start_line": 17,
      "end_line": 21,
      "functions": [
        {
          "name": "default",
          "type": "function",
          "start_line": 18,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    def default(self, o):\n        if isinstance(o, datetime):\n            return o.isoformat()\n        return super().default(o)",
          "blocks": [
            {
              "id": 1,
              "label": "def default(self, o):",
              "successors": [
                {
                  "id": 2,
                  "label": "if isinstance(o, datetime):",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return o.isoformat()",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "return super().default(o)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class DateTimeEncoder(json.JSONEncoder):\n        return super().default(o)",
      "blocks": [
        {
          "id": 1,
          "label": "class DateTimeEncoder(json.JSONEncoder):",
          "successors": [
            {
              "id": 2,
              "label": "        return super().default(o)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "BaseRedisEventBus",
      "type": "class",
      "start_line": 27,
      "end_line": 57,
      "functions": [
        {
          "name": "event_bus_name",
          "type": "function",
          "start_line": 32,
          "end_line": 33,
          "functions": [],
          "classes": [],
          "simplified_code": "    def event_bus_name(self) -> str:\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def event_bus_name(self) -> str:",
              "successors": [
                {
                  "id": 2,
                  "label": "    pass",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_serialize_message",
          "type": "function",
          "start_line": 35,
          "end_line": 39,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _serialize_message(self, item: M, channel_key: str) -> tuple[str, str]:\n        message = json.dumps(item.model_dump(), cls=DateTimeEncoder)\n        channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        logger.info(f\"[{channel_name}] Publishing an event to Redis {message}\")\n        return message, channel_name",
          "blocks": [
            {
              "id": 1,
              "label": "def _serialize_message(self, item: M, channel_key: str) -> tuple[str, str]:",
              "successors": [
                {
                  "id": 2,
                  "label": "    message = json.dumps(item.model_dump(), cls=DateTimeEncoder)\n    channel_name = f\"{self.event_bus_name}/{channel_key}\"\n    logger.info(f\"[{channel_name}] Publishing an event to Redis {message}\")\n    return message, channel_name",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_deserialize_message",
          "type": "function",
          "start_line": 41,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _deserialize_message(self, msg: Any, channel_key: str) -> M | None:\n        message_type = \"pmessage\" if \"*\" in channel_key else \"message\"\n        if msg[\"type\"] != message_type:\n            return None\n        try:\n            data = json.loads(msg[\"data\"])\n            logger.info(f\"Consuming an event from Redis {data}\")\n            return self.Model(**data)\n        except Exception as e:\n            logger.error(f\"Failed to parse event result from Redis {msg} {e}\")",
          "blocks": [
            {
              "id": 1,
              "label": "message_type = \"pmessage\" if \"*\" in channel_key else \"message\"",
              "successors": [
                {
                  "id": 2,
                  "label": "if msg[\"type\"] != message_type:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return None",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "try:",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    data = json.loads(msg[\"data\"])",
                          "successors": [
                            {
                              "id": 6,
                              "label": "    logger.info(f\"Consuming an event from Redis {data}\")",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "    return self.Model(**data)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 8,
                          "label": "except Exception as e:",
                          "successors": [
                            {
                              "id": 9,
                              "label": "    logger.error(f\"Failed to parse event result from Redis {msg} {e}\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_get_pubsub_channel",
          "type": "function",
          "start_line": 52,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _get_pubsub_channel(\n        self, connection: redis.Redis | redis.AsyncRedis, channel_key: str\n    ) -> tuple[PubSub | AsyncPubSub, str]:\n        full_channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        pubsub = connection.pubsub()\n        return pubsub, full_channel_name",
          "blocks": [
            {
              "id": 1,
              "label": "def _get_pubsub_channel(\n    self, connection: redis.Redis | redis.AsyncRedis, channel_key: str\n) -> tuple[PubSub | AsyncPubSub, str]:",
              "successors": [
                {
                  "id": 2,
                  "label": "    full_channel_name = f\"{self.event_bus_name}/{channel_key}\"\n    pubsub = connection.pubsub()\n    return pubsub, full_channel_name",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class BaseRedisEventBus(Generic[M], ABC):\n    Model: type[M]\n\n    @property\n    @abstractmethod\n        pass\n\n        return message, channel_name\n\n            logger.error(f\"Failed to parse event result from Redis {msg} {e}\")\n\n        return pubsub, full_channel_name",
      "blocks": [
        {
          "id": 1,
          "label": "class BaseRedisEventBus(Generic[M], ABC):",
          "successors": [
            {
              "id": 2,
              "label": "Model: type[M]",
              "successors": [
                {
                  "id": 3,
                  "label": "@property",
                  "successors": [
                    {
                      "id": 4,
                      "label": "@abstractmethod",
                      "successors": [
                        {
                          "id": 5,
                          "label": "pass",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "RedisEventBus",
      "type": "class",
      "start_line": 60,
      "end_line": 84,
      "functions": [
        {
          "name": "connection",
          "type": "function",
          "start_line": 64,
          "end_line": 65,
          "functions": [],
          "classes": [],
          "simplified_code": "    def connection(self) -> redis.Redis:\n        return redis.get_redis()",
          "blocks": [
            {
              "id": 1,
              "label": "def connection(self) -> redis.Redis:",
              "successors": [
                {
                  "id": 2,
                  "label": "    return redis.get_redis()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "publish_event",
          "type": "function",
          "start_line": 67,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": "    def publish_event(self, event: M, channel_key: str):\n        message, full_channel_name = self._serialize_message(event, channel_key)\n        self.connection.publish(full_channel_name, message)",
          "blocks": [
            {
              "id": 1,
              "label": "def publish_event(self, event: M, channel_key: str):",
              "successors": [
                {
                  "id": 2,
                  "label": "message, full_channel_name = self._serialize_message(event, channel_key)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "self.connection.publish(full_channel_name, message)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "listen_events",
          "type": "function",
          "start_line": 71,
          "end_line": 84,
          "functions": [],
          "classes": [],
          "simplified_code": "    def listen_events(self, channel_key: str) -> Generator[M, None, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            self.connection, channel_key\n        )\n        assert isinstance(pubsub, PubSub)\n\n        if \"*\" in channel_key:\n            pubsub.psubscribe(full_channel_name)\n        else:\n            pubsub.subscribe(full_channel_name)\n\n        for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event",
          "blocks": [
            {
              "id": 1,
              "label": "pubsub, full_channel_name = self._get_pubsub_channel(\n    self.connection, channel_key\n)\nassert isinstance(pubsub, PubSub)",
              "successors": [
                {
                  "id": 2,
                  "label": "if \"*\" in channel_key:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    pubsub.psubscribe(full_channel_name)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "for message in pubsub.listen():",
                          "successors": [
                            {
                              "id": 6,
                              "label": "    if event := self._deserialize_message(message, channel_key):",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "        yield event",
                                  "successors": [
                                    {
                                      "id": 5,
                                      "label": "for message in pubsub.listen():",
                                      "successors": [
                                        {
                                          "id": 6,
                                          "label": "    if event := self._deserialize_message(message, channel_key):",
                                          "successors": [
                                            {
                                              "id": 7,
                                              "label": "        yield event",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "    pubsub.subscribe(full_channel_name)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "for message in pubsub.listen():",
                          "successors": [
                            {
                              "id": 6,
                              "label": "    if event := self._deserialize_message(message, channel_key):",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "        yield event",
                                  "successors": [
                                    {
                                      "id": 5,
                                      "label": "for message in pubsub.listen():",
                                      "successors": [
                                        {
                                          "id": 6,
                                          "label": "    if event := self._deserialize_message(message, channel_key):",
                                          "successors": [
                                            {
                                              "id": 7,
                                              "label": "        yield event",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class RedisEventBus(BaseRedisEventBus[M], ABC):\n    Model: type[M]\n\n    @property\n        return redis.get_redis()\n\n        self.connection.publish(full_channel_name, message)\n\n                yield event",
      "blocks": [
        {
          "id": 1,
          "label": "class RedisEventBus(BaseRedisEventBus[M], ABC):",
          "successors": [
            {
              "id": 2,
              "label": "Model: type[M]",
              "successors": []
            },
            {
              "id": 3,
              "label": "@property",
              "successors": []
            },
            {
              "id": 4,
              "label": "def get_connection(self):",
              "successors": [
                {
                  "id": 5,
                  "label": "return redis.get_redis()",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "def publish(self, full_channel_name, message):",
              "successors": [
                {
                  "id": 7,
                  "label": "self.connection.publish(full_channel_name, message)",
                  "successors": []
                }
              ]
            },
            {
              "id": 8,
              "label": "def listen(self):",
              "successors": [
                {
                  "id": 9,
                  "label": "yield event",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "AsyncRedisEventBus",
      "type": "class",
      "start_line": 87,
      "end_line": 122,
      "functions": [
        {
          "name": "connection",
          "type": "function",
          "start_line": 91,
          "end_line": 92,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def connection(self) -> redis.AsyncRedis:\n        return await redis.get_redis_async()",
          "blocks": [
            {
              "id": 1,
              "label": "async def connection(self) -> redis.AsyncRedis:",
              "successors": [
                {
                  "id": 2,
                  "label": "return await redis.get_redis_async()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "publish_event",
          "type": "function",
          "start_line": 94,
          "end_line": 97,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def publish_event(self, event: M, channel_key: str):\n        message, full_channel_name = self._serialize_message(event, channel_key)\n        connection = await self.connection\n        await connection.publish(full_channel_name, message)",
          "blocks": [
            {
              "id": 1,
              "label": "async def publish_event(self, event: M, channel_key: str):",
              "successors": [
                {
                  "id": 2,
                  "label": "    message, full_channel_name = self._serialize_message(event, channel_key)",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    connection = await self.connection",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "    await connection.publish(full_channel_name, message)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "listen_events",
          "type": "function",
          "start_line": 99,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def listen_events(self, channel_key: str) -> AsyncGenerator[M, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            await self.connection, channel_key\n        )\n        assert isinstance(pubsub, AsyncPubSub)\n\n        if \"*\" in channel_key:\n            await pubsub.psubscribe(full_channel_name)\n        else:\n            await pubsub.subscribe(full_channel_name)\n\n        async for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event",
          "blocks": [
            {
              "id": 1,
              "label": "async def listen_events(self, channel_key: str) -> AsyncGenerator[M, None]:",
              "successors": [
                {
                  "id": 2,
                  "label": "pubsub, full_channel_name = self._get_pubsub_channel( await self.connection, channel_key )",
                  "successors": [
                    {
                      "id": 3,
                      "label": "assert isinstance(pubsub, AsyncPubSub)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "if \"*\" in channel_key:",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    await pubsub.psubscribe(full_channel_name)",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "async for message in pubsub.listen():",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "if event := self._deserialize_message(message, channel_key):",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "    yield event",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "    await pubsub.subscribe(full_channel_name)",
                          "successors": [
                            {
                              "id": 7,
                              "label": "async for message in pubsub.listen():",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "if event := self._deserialize_message(message, channel_key):",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "    yield event",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "wait_for_event",
          "type": "function",
          "start_line": 114,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": "    async def wait_for_event(\n        self, channel_key: str, timeout: Optional[float] = None\n    ) -> M | None:\n        try:\n            return await asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )\n        except TimeoutError:\n            return None",
          "blocks": [
            {
              "id": 1,
              "label": "async def wait_for_event(self, channel_key: str, timeout: Optional[float] = None) -> M | None:",
              "successors": [
                {
                  "id": 2,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return await asyncio.wait_for(anext(aiter(self.listen_events(channel_key))), timeout)",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "except TimeoutError:",
                      "successors": [
                        {
                          "id": 5,
                          "label": "return None",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class AsyncRedisEventBus(BaseRedisEventBus[M], ABC):\n    Model: type[M]\n\n    @property\n        return await redis.get_redis_async()\n\n        await connection.publish(full_channel_name, message)\n\n                yield event\n\n            return None",
      "blocks": [
        {
          "id": 1,
          "label": "class AsyncRedisEventBus(BaseRedisEventBus[M], ABC):",
          "successors": [
            {
              "id": 2,
              "label": "    Model: type[M]",
              "successors": []
            }
          ]
        },
        {
          "id": 3,
          "label": "@property",
          "successors": []
        },
        {
          "id": 4,
          "label": "return await redis.get_redis_async()",
          "successors": []
        },
        {
          "id": 5,
          "label": "await connection.publish(full_channel_name, message)",
          "successors": []
        },
        {
          "id": 6,
          "label": "yield event",
          "successors": []
        },
        {
          "id": 7,
          "label": "return None",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "import asyncio\nimport json\nimport logging\nfrom abc import ABC, abstractmethod\nfrom datetime import datetime\nfrom typing import Any, AsyncGenerator, Generator, Generic, Optional, TypeVar\n\nfrom pydantic import BaseModel\nfrom redis.asyncio.client import PubSub as AsyncPubSub\nfrom redis.client import PubSub\n\nfrom backend.data import redis\n\nlogger = logging.getLogger(__name__)\n\n\n        return super().default(o)\n\n\nM = TypeVar(\"M\", bound=BaseModel)\n\n\n        return pubsub, full_channel_name\n\n\n                yield event\n\n\n            return None",
  "blocks": [
    {
      "id": 1,
      "label": "import asyncio\nimport json\nimport logging\nfrom abc import ABC, abstractmethod\nfrom datetime import datetime\nfrom typing import Any, AsyncGenerator, Generator, Generic, Optional, TypeVar\n\nfrom pydantic import BaseModel\nfrom redis.asyncio.client import PubSub as AsyncPubSub\nfrom redis.client import PubSub\n\nfrom backend.data import redis\n\nlogger = logging.getLogger(__name__)\n\n",
      "successors": [
        {
          "id": 2,
          "label": "return super().default(o)",
          "successors": []
        }
      ]
    },
    {
      "id": 3,
      "label": "M = TypeVar(\"M\", bound=BaseModel)\n\n",
      "successors": [
        {
          "id": 4,
          "label": "return pubsub, full_channel_name",
          "successors": []
        }
      ]
    },
    {
      "id": 5,
      "label": "yield event\n\n",
      "successors": [
        {
          "id": 6,
          "label": "return None",
          "successors": []
        }
      ]
    }
  ]
}