{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 67,
  "functions": [],
  "classes": [
    {
      "name": "JinaChunkingBlock",
      "type": "class",
      "start_line": 11,
      "end_line": 67,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 29,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"806fb15e-830f-4796-8692-557d300ff43c\",\n            description=\"Chunks texts using Jina AI's segmentation service\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=JinaChunkingBlock.Input,\n            output_schema=JinaChunkingBlock.Output,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "super().__init__(\n    id=\"806fb15e-830f-4796-8692-557d300ff43c\",\n    description=\"Chunks texts using Jina AI's segmentation service\",\n    categories={BlockCategory.AI, BlockCategory.TEXT},\n    input_schema=JinaChunkingBlock.Input,\n    output_schema=JinaChunkingBlock.Output,\n)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 38,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://segment.jina.ai/\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n\n        all_chunks = []\n        all_tokens = []\n\n        for text in input_data.texts:\n            data = {\n                \"content\": text,\n                \"return_tokens\": str(input_data.return_tokens).lower(),\n                \"return_chunks\": \"true\",\n                \"max_chunk_length\": str(input_data.max_chunk_length),\n            }\n\n            response = requests.post(url, headers=headers, json=data)\n            result = response.json()\n\n            all_chunks.extend(result.get(\"chunks\", []))\n            if input_data.return_tokens:\n                all_tokens.extend(result.get(\"tokens\", []))\n\n        yield \"chunks\", all_chunks\n        if input_data.return_tokens:\n            yield \"tokens\", all_tokens",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: JinaCredentials, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "label": "url = \"https://segment.jina.ai/\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n}\nall_chunks = []\nall_tokens = []",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for text in input_data.texts:",
                      "successors": [
                        {
                          "id": 4,
                          "label": "data = {\n    \"content\": text,\n    \"return_tokens\": str(input_data.return_tokens).lower(),\n    \"return_chunks\": \"true\",\n    \"max_chunk_length\": str(input_data.max_chunk_length),\n}\nresponse = requests.post(url, headers=headers, json=data)\nresult = response.json()\nall_chunks.extend(result.get(\"chunks\", []))",
                          "successors": [
                            {
                              "id": 5,
                              "label": "if input_data.return_tokens:\n    all_tokens.extend(result.get(\"tokens\", []))",
                              "successors": [
                                {
                                  "id": 3,
                                  "label": "for text in input_data.texts:",
                                  "successors": [
                                    {
                                      "id": 4,
                                      "label": "data = {\n    \"content\": text,\n    \"return_tokens\": str(input_data.return_tokens).lower(),\n    \"return_chunks\": \"true\",\n    \"max_chunk_length\": str(input_data.max_chunk_length),\n}\nresponse = requests.post(url, headers=headers, json=data)\nresult = response.json()\nall_chunks.extend(result.get(\"chunks\", []))",
                                      "successors": [
                                        {
                                          "id": 5,
                                          "label": "if input_data.return_tokens:\n    all_tokens.extend(result.get(\"tokens\", []))",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 6,
                          "label": "yield \"chunks\", all_chunks",
                          "successors": [
                            {
                              "id": 7,
                              "label": "if input_data.return_tokens:\n    yield \"tokens\", all_tokens",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 12,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        texts: list = SchemaField(description=\"List of texts to chunk\")\n\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n        max_chunk_length: int = SchemaField(\n            description=\"Maximum length of each chunk\", default=1000\n        )\n        return_tokens: bool = SchemaField(\n            description=\"Whether to return token information\", default=False\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    texts: list = SchemaField(description=\"List of texts to chunk\")",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    credentials: JinaCredentialsInput = JinaCredentialsField()",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    max_chunk_length: int = SchemaField(\n        description=\"Maximum length of each chunk\", default=1000\n    )",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    return_tokens: bool = SchemaField(\n        description=\"Whether to return token information\", default=False\n    )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 23,
          "end_line": 27,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        chunks: list = SchemaField(description=\"List of chunked texts\")\n        tokens: list = SchemaField(\n            description=\"List of token information for each chunk\", optional=True\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "chunks: list = SchemaField(description=\"List of chunked texts\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "tokens: list = SchemaField(\n    description=\"List of token information for each chunk\", optional=True\n)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class JinaChunkingBlock(Block):\n        )\n\n        )\n\n        )\n\n            yield \"tokens\", all_tokens",
      "blocks": [
        {
          "id": 1,
          "label": "class JinaChunkingBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "",
              "successors": [
                {
                  "id": 3,
                  "label": "",
                  "successors": [
                    {
                      "id": 4,
                      "label": "",
                      "successors": [
                        {
                          "id": 5,
                          "label": "yield \"tokens\", all_tokens",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "from backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\n\n            yield \"tokens\", all_tokens",
  "blocks": [
    {
      "id": 1,
      "label": "from backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)",
      "successors": [
        {
          "id": 2,
          "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
          "successors": [
            {
              "id": 3,
              "label": "from backend.data.model import SchemaField",
              "successors": [
                {
                  "id": 4,
                  "label": "from backend.util.request import requests",
                  "successors": [
                    {
                      "id": 5,
                      "label": "yield \"tokens\", all_tokens",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}