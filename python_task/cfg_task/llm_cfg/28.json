[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 7,
    "children": [],
    "code": "from enum import Enum\nfrom typing import Any, Optional\n\nfrom pydantic import BaseModel\n\nfrom backend.data.block import BlockInput\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from enum import Enum\nfrom typing import Any, Optional\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from pydantic import BaseModel\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.block import BlockInput\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        }
      ]
    }
  },
  {
    "decl_name": "BlockCostType",
    "start_line": 8,
    "end_line": 12,
    "children": [],
    "code": "class BlockCostType(str, Enum):\n    RUN = \"run\"  # cost X credits per run\n    BYTE = \"byte\"  # cost X credits per byte\n    SECOND = \"second\"  # cost X credits per second\n    DOLLAR = \"dollar\"  # cost X dollars per run\n",
    "cfg": {
      "nodes": [
        {
          "id": "BlockCostType_1",
          "code": "class BlockCostType(str, Enum):\n    RUN = \"run\"  # cost X credits per run\n    BYTE = \"byte\"  # cost X credits per byte\n    SECOND = \"second\"  # cost X credits per second\n    DOLLAR = \"dollar\"  # cost X dollars per run\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "BlockCost",
    "start_line": 15,
    "end_line": 32,
    "children": [
      {
        "decl_name": "BlockCost.__init__",
        "start_line": 20,
        "end_line": 32,
        "children": [],
        "code": "    def __init__(\n        self,\n        cost_amount: int,\n        cost_type: BlockCostType = BlockCostType.RUN,\n        cost_filter: Optional[BlockInput] = None,\n        **data: Any,\n    ) -> None:\n        super().__init__(\n            cost_amount=cost_amount,\n            cost_filter=cost_filter or {},\n            cost_type=cost_type,\n            **data,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "BlockCost.__init___1",
              "code": "def __init__(\n        self,\n        cost_amount: int,\n        cost_type: BlockCostType = BlockCostType.RUN,\n        cost_filter: Optional[BlockInput] = None,\n        **data: Any,\n    ) -> None:\n"
            },
            {
              "id": "BlockCost.__init___2",
              "code": "        super().__init__(\n            cost_amount=cost_amount,\n            cost_filter=cost_filter or {},\n            cost_type=cost_type,\n            **data,\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "BlockCost.__init___1",
              "to": "BlockCost.__init___2"
            }
          ]
        }
      }
    ],
    "code": "class BlockCost(BaseModel):\n    cost_amount: int\n    cost_filter: BlockInput\n    cost_type: BlockCostType\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "BlockCost_1",
          "code": "class BlockCost(BaseModel):\n    cost_amount: int\n    cost_filter: BlockInput\n    cost_type: BlockCostType\n"
        }
      ],
      "edges": []
    }
  }
]