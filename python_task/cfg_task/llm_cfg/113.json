{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 148,
  "functions": [],
  "classes": [
    {
      "name": "Place",
      "type": "class",
      "start_line": 30,
      "end_line": 36,
      "functions": [],
      "simplified_code": "class Place(BaseModel):\n    name: str\n    address: str\n    phone: str\n    rating: float\n    reviews: int\n    website: str",
      "blocks": [
        {
          "id": 1,
          "label": "class Place(BaseModel):",
          "successors": [
            {
              "id": 2,
              "label": "    name: str\n    address: str\n    phone: str\n    rating: float\n    reviews: int\n    website: str",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "GoogleMapsSearchBlock",
      "type": "class",
      "start_line": 39,
      "end_line": 148,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 65,
          "end_line": 104,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n            description=\"This block searches for local businesses using Google Maps API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=GoogleMapsSearchBlock.Input,\n            output_schema=GoogleMapsSearchBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"query\": \"restaurants in new york\",\n                \"radius\": 5000,\n                \"max_results\": 5,\n            },\n            test_output=[\n                (\n                    \"place\",\n                    {\n                        \"name\": \"Test Restaurant\",\n                        \"address\": \"123 Test St, New York, NY 10001\",\n                        \"phone\": \"+1 (555) 123-4567\",\n                        \"rating\": 4.5,\n                        \"reviews\": 100,\n                        \"website\": \"https://testrestaurant.com\",\n                    },\n                ),\n            ],\n            test_mock={\n                \"search_places\": lambda *args, **kwargs: [\n                    {\n                        \"name\": \"Test Restaurant\",\n                        \"address\": \"123 Test St, New York, NY 10001\",\n                        \"phone\": \"+1 (555) 123-4567\",\n                        \"rating\": 4.5,\n                        \"reviews\": 100,\n                        \"website\": \"https://testrestaurant.com\",\n                    }\n                ]\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "super().__init__(\n    id=\"f47ac10b-58cc-4372-a567-0e02b2c3d479\",\n    description=\"This block searches for local businesses using Google Maps API.\",\n    categories={BlockCategory.SEARCH},\n    input_schema=GoogleMapsSearchBlock.Input,\n    output_schema=GoogleMapsSearchBlock.Output,\n    test_input={\n        \"credentials\": TEST_CREDENTIALS_INPUT,\n        \"query\": \"restaurants in new york\",\n        \"radius\": 5000,\n        \"max_results\": 5,\n    },\n    test_output=[\n        (\n            \"place\",\n            {\n                \"name\": \"Test Restaurant\",\n                \"address\": \"123 Test St, New York, NY 10001\",\n                \"phone\": \"+1 (555) 123-4567\",\n                \"rating\": 4.5,\n                \"reviews\": 100,\n                \"website\": \"https://testrestaurant.com\",\n            },\n        ),\n    ],\n    test_mock={\n        \"search_places\": lambda *args, **kwargs: [\n            {\n                \"name\": \"Test Restaurant\",\n                \"address\": \"123 Test St, New York, NY 10001\",\n                \"phone\": \"+1 (555) 123-4567\",\n                \"rating\": 4.5,\n                \"reviews\": 100,\n                \"website\": \"https://testrestaurant.com\",\n            }\n        ]\n    },\n    test_credentials=TEST_CREDENTIALS,\n)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 106,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        places = self.search_places(\n            credentials.api_key,\n            input_data.query,\n            input_data.radius,\n            input_data.max_results,\n        )\n        for place in places:\n            yield \"place\", place",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "label": "places = self.search_places(credentials.api_key, input_data.query, input_data.radius, input_data.max_results, )",
                  "successors": [
                    {
                      "id": 3,
                      "label": "for place in places:",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    yield \"place\", place",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "search_places",
          "type": "function",
          "start_line": 118,
          "end_line": 120,
          "functions": [],
          "classes": [],
          "simplified_code": "    def search_places(self, api_key: SecretStr, query, radius, max_results):\n        client = googlemaps.Client(key=api_key.get_secret_value())\n        return self._search_places(client, query, radius, max_results)",
          "blocks": [
            {
              "id": 1,
              "label": "def search_places(self, api_key: SecretStr, query, radius, max_results):",
              "successors": [
                {
                  "id": 2,
                  "label": "    client = googlemaps.Client(key=api_key.get_secret_value())",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    return self._search_places(client, query, radius, max_results)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_search_places",
          "type": "function",
          "start_line": 122,
          "end_line": 148,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _search_places(self, client, query, radius, max_results):\n        results = []\n        next_page_token = None\n        while len(results) < max_results:\n            response = client.places(\n                query=query,\n                radius=radius,\n                page_token=next_page_token,\n            )\n            for place in response[\"results\"]:\n                if len(results) >= max_results:\n                    break\n                place_details = client.place(place[\"place_id\"])[\"result\"]\n                results.append(\n                    Place(\n                        name=place_details.get(\"name\", \"\"),\n                        address=place_details.get(\"formatted_address\", \"\"),\n                        phone=place_details.get(\"formatted_phone_number\", \"\"),\n                        rating=place_details.get(\"rating\", 0),\n                        reviews=place_details.get(\"user_ratings_total\", 0),\n                        website=place_details.get(\"website\", \"\"),\n                    )\n                )\n            next_page_token = response.get(\"next_page_token\")\n            if not next_page_token:\n                break\n        return results",
          "blocks": [
            {
              "id": 1,
              "label": "def _search_places(self, client, query, radius, max_results):\n    results = []\n    next_page_token = None",
              "successors": [
                {
                  "id": 2,
                  "label": "while len(results) < max_results:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    response = client.places(\n        query=query,\n        radius=radius,\n        page_token=next_page_token,\n    )",
                      "successors": [
                        {
                          "id": 4,
                          "label": "for place in response[\"results\"]:",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    if len(results) >= max_results:",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "        break",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "next_page_token = response.get(\"next_page_token\")",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "if not next_page_token:",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "    break",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "label": "return results",
                                                  "successors": []
                                                }
                                              ]
                                            },
                                            {
                                              "id": 12,
                                              "label": "return results",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "    place_details = client.place(place[\"place_id\"])[\"result\"]\n    results.append(\n        Place(\n            name=place_details.get(\"name\", \"\"),\n            address=place_details.get(\"formatted_address\", \"\"),\n            phone=place_details.get(\"formatted_phone_number\", \"\"),\n            rating=place_details.get(\"rating\", 0),\n            reviews=place_details.get(\"user_ratings_total\", 0),\n            website=place_details.get(\"website\", \"\"),\n        )\n    )",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "next_page_token = response.get(\"next_page_token\")",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "if not next_page_token:",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": "    break",
                                          "successors": [
                                            {
                                              "id": 12,
                                              "label": "return results",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 12,
                                          "label": "return results",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 40,
          "end_line": 59,
          "functions": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.GOOGLE_MAPS], Literal[\"api_key\"]\n        ] = CredentialsField(description=\"Google Maps API Key\")\n        query: str = SchemaField(\n            description=\"Search query for local businesses\",\n            placeholder=\"e.g., 'restaurants in New York'\",\n        )\n        radius: int = SchemaField(\n            description=\"Search radius in meters (max 50000)\",\n            default=5000,\n            ge=1,\n            le=50000,\n        )\n        max_results: int = SchemaField(\n            description=\"Maximum number of results to return (max 60)\",\n            default=20,\n            ge=1,\n            le=60,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "credentials: CredentialsMetaInput[\n    Literal[ProviderName.GOOGLE_MAPS], Literal[\"api_key\"]\n] = CredentialsField(description=\"Google Maps API Key\")",
                  "successors": [
                    {
                      "id": 3,
                      "label": "query: str = SchemaField(\n    description=\"Search query for local businesses\",\n    placeholder=\"e.g., 'restaurants in New York'\",\n)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "radius: int = SchemaField(\n    description=\"Search radius in meters (max 50000)\",\n    default=5000,\n    ge=1,\n    le=50000,\n)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "max_results: int = SchemaField(\n    description=\"Maximum number of results to return (max 60)\",\n    default=20,\n    ge=1,\n    le=60,\n)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 61,
          "end_line": 63,
          "functions": [],
          "simplified_code": "    class Output(BlockSchema):\n        place: Place = SchemaField(description=\"Place found\")\n        error: str = SchemaField(description=\"Error message if the search failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    place: Place = SchemaField(description=\"Place found\")\n    error: str = SchemaField(description=\"Error message if the search failed\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class GoogleMapsSearchBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if the search failed\")\n\n        )\n\n            yield \"place\", place\n\n        return self._search_places(client, query, radius, max_results)\n\n        return results",
      "blocks": [
        {
          "id": 1,
          "label": "class GoogleMapsSearchBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "error: str = SchemaField(description=\"Error message if the search failed\")",
              "successors": [
                {
                  "id": 3,
                  "label": "yield \"place\", place",
                  "successors": [
                    {
                      "id": 4,
                      "label": "return self._search_places(client, query, radius, max_results)",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "return results",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "from typing import Literal\n\nimport googlemaps\nfrom pydantic import BaseModel, SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"google_maps\",\n    api_key=SecretStr(\"mock-google-maps-api-key\"),\n    title=\"Mock Google Maps API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n    website: str\n\n\n        return results",
  "blocks": [
    {
      "id": 1,
      "label": "from typing import Literal\n\nimport googlemaps\nfrom pydantic import BaseModel, SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"google_maps\",\n    api_key=SecretStr(\"mock-google-maps-api-key\"),\n    title=\"Mock Google Maps API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n    website: str",
      "successors": []
    }
  ]
}