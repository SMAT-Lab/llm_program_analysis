[
  {
    "decl_name": "GlobalBlock",
    "start_line": 1,
    "end_line": 51,
    "children": [],
    "code": "import logging\nimport multiprocessing\nimport os\nimport signal\nimport sys\nimport threading\nfrom concurrent.futures import Future, ProcessPoolExecutor\nfrom contextlib import contextmanager\nfrom multiprocessing.pool import AsyncResult, Pool\nfrom typing import TYPE_CHECKING, Any, Generator, TypeVar, cast\n\nfrom pydantic import BaseModel\nfrom redis.lock import Lock as RedisLock\n\nif TYPE_CHECKING:\n    from backend.executor import DatabaseManager\n\nfrom autogpt_libs.utils.cache import thread_cached\n\nfrom backend.blocks.agent import AgentExecutorBlock\nfrom backend.data import redis\nfrom backend.data.block import Block, BlockData, BlockInput, BlockType, get_block\nfrom backend.data.execution import (\n    ExecutionQueue,\n    ExecutionResult,\n    ExecutionStatus,\n    GraphExecutionEntry,\n    NodeExecutionEntry,\n    merge_execution_input,\n    parse_execution_output,\n)\nfrom backend.data.graph import GraphModel, Link, Node\nfrom backend.data.model import CREDENTIALS_FIELD_NAME, CredentialsMetaInput\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.util import json\nfrom backend.util.decorator import error_logged, time_measured\nfrom backend.util.logging import configure_logging\nfrom backend.util.process import set_service_name\nfrom backend.util.service import (\n    AppService,\n    close_service_client,\n    expose,\n    get_service_client,\n)\nfrom backend.util.settings import Settings\nfrom backend.util.type import convert\n\nlogger = logging.getLogger(__name__)\nsettings = Settings()\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import logging\nimport multiprocessing\nimport os\nimport signal\nimport sys\nimport threading\nfrom concurrent.futures import Future, ProcessPoolExecutor\nfrom contextlib import contextmanager\nfrom multiprocessing.pool import AsyncResult, Pool\nfrom typing import TYPE_CHECKING, Any, Generator, TypeVar, cast\n\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from pydantic import BaseModel\nfrom redis.lock import Lock as RedisLock\n\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "if TYPE_CHECKING:\n    from backend.executor import DatabaseManager\n\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "from autogpt_libs.utils.cache import thread_cached\n\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "from backend.blocks.agent import AgentExecutorBlock\nfrom backend.data import redis\nfrom backend.data.block import Block, BlockData, BlockInput, BlockType, get_block\nfrom backend.data.execution import (\n    ExecutionQueue,\n    ExecutionResult,\n    ExecutionStatus,\n    GraphExecutionEntry,\n    NodeExecutionEntry,\n    merge_execution_input,\n    parse_execution_output,\n)\nfrom backend.data.graph import GraphModel, Link, Node\nfrom backend.data.model import CREDENTIALS_FIELD_NAME, CredentialsMetaInput\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.util import json\nfrom backend.util.decorator import error_logged, time_measured\nfrom backend.util.logging import configure_logging\nfrom backend.util.process import set_service_name\nfrom backend.util.service import (\n    AppService,\n    close_service_client,\n    expose,\n    get_service_client,\n)\nfrom backend.util.settings import Settings\nfrom backend.util.type import convert\n\n"
        },
        {
          "id": "GlobalBlock_6",
          "code": "logger = logging.getLogger(__name__)\nsettings = Settings()\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        },
        {
          "from": "GlobalBlock_5",
          "to": "GlobalBlock_6"
        }
      ]
    }
  },
  {
    "decl_name": "LogMetadata",
    "start_line": 52,
    "end_line": 94,
    "children": [],
    "code": "class LogMetadata:\n    def __init__(\n        self,\n        user_id: str,\n        graph_eid: str,\n        graph_id: str,\n        node_eid: str,\n        node_id: str,\n        block_name: str,\n    ):\n        self.metadata = {\n            \"component\": \"ExecutionManager\",\n            \"user_id\": user_id,\n            \"graph_eid\": graph_eid,\n            \"graph_id\": graph_id,\n            \"node_eid\": node_eid,\n            \"node_id\": node_id,\n            \"block_name\": block_name,\n        }\n        self.prefix = f\"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"\n\n    def info(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.info(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def warning(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.warning(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def error(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.error(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def debug(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.debug(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def exception(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.exception(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def _wrap(self, msg: str, **extra):\n        return f\"{self.prefix} {msg} {extra}\"\n",
    "cfg": {
      "nodes": [
        {
          "id": "LogMetadata_1",
          "code": "class LogMetadata:\n"
        },
        {
          "id": "LogMetadata_2",
          "code": "    def __init__(\n        self,\n        user_id: str,\n        graph_eid: str,\n        graph_id: str,\n        node_eid: str,\n        node_id: str,\n        block_name: str,\n    ):\n"
        },
        {
          "id": "LogMetadata_3",
          "code": "        self.metadata = {\n            \"component\": \"ExecutionManager\",\n            \"user_id\": user_id,\n            \"graph_eid\": graph_eid,\n            \"graph_id\": graph_id,\n            \"node_eid\": node_eid,\n            \"node_id\": node_id,\n            \"block_name\": block_name,\n        }\n"
        },
        {
          "id": "LogMetadata_4",
          "code": "        self.prefix = f\"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"\n"
        },
        {
          "id": "LogMetadata_5",
          "code": "    def info(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.info(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n"
        },
        {
          "id": "LogMetadata_6",
          "code": "    def warning(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.warning(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n"
        },
        {
          "id": "LogMetadata_7",
          "code": "    def error(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.error(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n"
        },
        {
          "id": "LogMetadata_8",
          "code": "    def debug(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.debug(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n"
        },
        {
          "id": "LogMetadata_9",
          "code": "    def exception(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.exception(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n"
        },
        {
          "id": "LogMetadata_10",
          "code": "    def _wrap(self, msg: str, **extra):\n        return f\"{self.prefix} {msg} {extra}\"\n"
        }
      ],
      "edges": [
        {
          "from": "LogMetadata_1",
          "to": "LogMetadata_2"
        },
        {
          "from": "LogMetadata_2",
          "to": "LogMetadata_3"
        },
        {
          "from": "LogMetadata_3",
          "to": "LogMetadata_4"
        }
      ]
    }
  },
  {
    "decl_name": "execute_node",
    "start_line": 101,
    "end_line": 244,
    "children": [
      {
        "decl_name": "execute_node.update_execution",
        "start_line": 126,
        "end_line": 129,
        "children": [],
        "code": "    def update_execution(status: ExecutionStatus) -> ExecutionResult:\n        exec_update = db_client.update_execution_status(node_exec_id, status)\n        db_client.send_execution_update(exec_update)\n        return exec_update\n",
        "cfg": {
          "nodes": [
            {
              "id": "execute_node.update_execution_1",
              "code": "def update_execution(status: ExecutionStatus) -> ExecutionResult:\n"
            },
            {
              "id": "execute_node.update_execution_2",
              "code": "        exec_update = db_client.update_execution_status(node_exec_id, status)\n        db_client.send_execution_update(exec_update)\n        return exec_update\n"
            }
          ],
          "edges": [
            {
              "from": "execute_node.update_execution_1",
              "to": "execute_node.update_execution_2"
            }
          ]
        }
      }
    ],
    "code": "def execute_node(\n    db_client: \"DatabaseManager\",\n    creds_manager: IntegrationCredentialsManager,\n    data: NodeExecutionEntry,\n    execution_stats: dict[str, Any] | None = None,\n) -> ExecutionStream:\n    \"\"\"\n    Execute a node in the graph. This will trigger a block execution on a node,\n    persist the execution result, and return the subsequent node to be executed.\n\n    Args:\n        db_client: The client to send execution updates to the server.\n        creds_manager: The manager to acquire and release credentials.\n        data: The execution data for executing the current node.\n        execution_stats: The execution statistics to be updated.\n\n    Returns:\n        The subsequent node to be enqueued, or None if there is no subsequent node.\n    \"\"\"\n    user_id = data.user_id\n    graph_exec_id = data.graph_exec_id\n    graph_id = data.graph_id\n    node_exec_id = data.node_exec_id\n    node_id = data.node_id\n\n\n    node = db_client.get_node(node_id)\n\n    node_block = get_block(node.block_id)\n    if not node_block:\n        logger.error(f\"Block {node.block_id} not found.\")\n        return\n\n    log_metadata = LogMetadata(\n        user_id=user_id,\n        graph_eid=graph_exec_id,\n        graph_id=graph_id,\n        node_eid=node_exec_id,\n        node_id=node_id,\n        block_name=node_block.name,\n    )\n\n    # Sanity check: validate the execution input.\n    input_data, error = validate_exec(node, data.data, resolve_input=False)\n    if input_data is None:\n        log_metadata.error(f\"Skip execution, input validation error: {error}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error)\n        update_execution(ExecutionStatus.FAILED)\n        return\n\n    # Re-shape the input data for agent block.\n    # AgentExecutorBlock specially separate the node input_data & its input_default.\n    if isinstance(node_block, AgentExecutorBlock):\n        input_data = {**node.input_default, \"data\": input_data}\n\n    # Execute the node\n    input_data_str = json.dumps(input_data)\n    input_size = len(input_data_str)\n    log_metadata.info(\"Executed node with input\", input=input_data_str)\n    update_execution(ExecutionStatus.RUNNING)\n\n    extra_exec_kwargs = {}\n    # Last-minute fetch credentials + acquire a system-wide read-write lock to prevent\n    # changes during execution. ⚠️ This means a set of credentials can only be used by\n    # one (running) block at a time; simultaneous execution of blocks using same\n    # credentials is not supported.\n    creds_lock = None\n    if CREDENTIALS_FIELD_NAME in input_data:\n        credentials_meta = CredentialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])\n        credentials, creds_lock = creds_manager.acquire(user_id, credentials_meta.id)\n        extra_exec_kwargs[\"credentials\"] = credentials\n\n    output_size = 0\n    end_status = ExecutionStatus.COMPLETED\n    credit = db_client.get_or_refill_credit(user_id)\n    if credit < 0:\n        raise ValueError(f\"Insufficient credit: {credit}\")\n\n    try:\n        for output_name, output_data in node_block.execute(\n            input_data, **extra_exec_kwargs\n        ):\n            output_size += len(json.dumps(output_data))\n            log_metadata.info(\"Node produced output\", **{output_name: output_data})\n            db_client.upsert_execution_output(node_exec_id, output_name, output_data)\n\n            for execution in _enqueue_next_nodes(\n                db_client=db_client,\n                node=node,\n                output=(output_name, output_data),\n                user_id=user_id,\n                graph_exec_id=graph_exec_id,\n                graph_id=graph_id,\n                log_metadata=log_metadata,\n            ):\n                yield execution\n\n    except Exception as e:\n        end_status = ExecutionStatus.FAILED\n        error_msg = str(e)\n        log_metadata.exception(f\"Node execution failed with error {error_msg}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error_msg)\n\n        for execution in _enqueue_next_nodes(\n            db_client=db_client,\n            node=node,\n            output=(\"error\", error_msg),\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            log_metadata=log_metadata,\n        ):\n            yield execution\n\n        raise e\n    finally:\n        # Ensure credentials are released even if execution fails\n        if creds_lock:\n            try:\n                creds_lock.release()\n            except Exception as e:\n                log_metadata.error(f\"Failed to release credentials lock: {e}\")\n\n        # Update execution status and spend credits\n        res = update_execution(end_status)\n        if end_status == ExecutionStatus.COMPLETED:\n            s = input_size + output_size\n            t = (\n                (res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )\n            db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)\n\n        # Update execution stats\n        if execution_stats is not None:\n            execution_stats.update(node_block.execution_stats)\n            execution_stats[\"input_size\"] = input_size\n            execution_stats[\"output_size\"] = output_size\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "execute_node_1",
          "code": "def execute_node(\n    db_client: \"DatabaseManager\",\n    creds_manager: IntegrationCredentialsManager,\n    data: NodeExecutionEntry,\n    execution_stats: dict[str, Any] | None = None,\n) -> ExecutionStream:\n"
        },
        {
          "id": "execute_node_2",
          "code": "    \"\"\"\n    Execute a node in the graph. This will trigger a block execution on a node,\n    persist the execution result, and return the subsequent node to be executed.\n\n    Args:\n        db_client: The client to send execution updates to the server.\n        creds_manager: The manager to acquire and release credentials.\n        data: The execution data for executing the current node.\n        execution_stats: The execution statistics to be updated.\n\n    Returns:\n        The subsequent node to be enqueued, or None if there is no subsequent node.\n    \"\"\"\n"
        },
        {
          "id": "execute_node_3",
          "code": "    user_id = data.user_id\n    graph_exec_id = data.graph_exec_id\n    graph_id = data.graph_id\n    node_exec_id = data.node_exec_id\n    node_id = data.node_id\n\n"
        },
        {
          "id": "execute_node_4",
          "code": "    node = db_client.get_node(node_id)\n"
        },
        {
          "id": "execute_node_5",
          "code": "    node_block = get_block(node.block_id)\n    if not node_block:\n        logger.error(f\"Block {node.block_id} not found.\")\n        return\n"
        },
        {
          "id": "execute_node_6",
          "code": "    log_metadata = LogMetadata(\n        user_id=user_id,\n        graph_eid=graph_exec_id,\n        graph_id=graph_id,\n        node_eid=node_exec_id,\n        node_id=node_id,\n        block_name=node_block.name,\n    )\n"
        },
        {
          "id": "execute_node_7",
          "code": "    input_data, error = validate_exec(node, data.data, resolve_input=False)\n    if input_data is None:\n        log_metadata.error(f\"Skip execution, input validation error: {error}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error)\n        update_execution(ExecutionStatus.FAILED)\n        return\n"
        },
        {
          "id": "execute_node_8",
          "code": "    if isinstance(node_block, AgentExecutorBlock):\n        input_data = {**node.input_default, \"data\": input_data}\n"
        },
        {
          "id": "execute_node_9",
          "code": "    input_data_str = json.dumps(input_data)\n    input_size = len(input_data_str)\n    log_metadata.info(\"Executed node with input\", input=input_data_str)\n    update_execution(ExecutionStatus.RUNNING)\n"
        },
        {
          "id": "execute_node_10",
          "code": "    extra_exec_kwargs = {}\n"
        },
        {
          "id": "execute_node_11",
          "code": "    if CREDENTIALS_FIELD_NAME in input_data:\n        credentials_meta = CredentialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])\n        credentials, creds_lock = creds_manager.acquire(user_id, credentials_meta.id)\n        extra_exec_kwargs[\"credentials\"] = credentials\n"
        },
        {
          "id": "execute_node_12",
          "code": "    output_size = 0\n    end_status = ExecutionStatus.COMPLETED\n    credit = db_client.get_or_refill_credit(user_id)\n    if credit < 0:\n        raise ValueError(f\"Insufficient credit: {credit}\")\n"
        },
        {
          "id": "execute_node_13",
          "code": "    try:\n        for output_name, output_data in node_block.execute(\n            input_data, **extra_exec_kwargs\n        ):\n            output_size += len(json.dumps(output_data))\n            log_metadata.info(\"Node produced output\", **{output_name: output_data})\n            db_client.upsert_execution_output(node_exec_id, output_name, output_data)\n\n            for execution in _enqueue_next_nodes(\n                db_client=db_client,\n                node=node,\n                output=(output_name, output_data),\n                user_id=user_id,\n                graph_exec_id=graph_exec_id,\n                graph_id=graph_id,\n                log_metadata=log_metadata,\n            ):\n                yield execution\n\n"
        },
        {
          "id": "execute_node_14",
          "code": "    except Exception as e:\n        end_status = ExecutionStatus.FAILED\n        error_msg = str(e)\n        log_metadata.exception(f\"Node execution failed with error {error_msg}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error_msg)\n\n        for execution in _enqueue_next_nodes(\n            db_client=db_client,\n            node=node,\n            output=(\"error\", error_msg),\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            log_metadata=log_metadata,\n        ):\n            yield execution\n\n        raise e\n"
        },
        {
          "id": "execute_node_15",
          "code": "    finally:\n        # Ensure credentials are released even if execution fails\n        if creds_lock:\n            try:\n                creds_lock.release()\n            except Exception as e:\n                log_metadata.error(f\"Failed to release credentials lock: {e}\")\n\n"
        },
        {
          "id": "execute_node_16",
          "code": "        # Update execution status and spend credits\n        res = update_execution(end_status)\n        if end_status == ExecutionStatus.COMPLETED:\n            s = input_size + output_size\n            t = (\n                (res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )\n            db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)\n\n        # Update execution stats\n        if execution_stats is not None:\n            execution_stats.update(node_block.execution_stats)\n            execution_stats[\"input_size\"] = input_size\n            execution_stats[\"output_size\"] = output_size\n"
        }
      ],
      "edges": [
        {
          "from": "execute_node_1",
          "to": "execute_node_2"
        },
        {
          "from": "execute_node_2",
          "to": "execute_node_3"
        },
        {
          "from": "execute_node_3",
          "to": "execute_node_4"
        },
        {
          "from": "execute_node_4",
          "to": "execute_node_5"
        },
        {
          "from": "execute_node_5",
          "to": "execute_node_6"
        },
        {
          "from": "execute_node_6",
          "to": "execute_node_7"
        },
        {
          "from": "execute_node_7",
          "to": "execute_node_8"
        },
        {
          "from": "execute_node_8",
          "to": "execute_node_9"
        },
        {
          "from": "execute_node_9",
          "to": "execute_node_10"
        },
        {
          "from": "execute_node_10",
          "to": "execute_node_11"
        },
        {
          "from": "execute_node_11",
          "to": "execute_node_12"
        },
        {
          "from": "execute_node_12",
          "to": "execute_node_13"
        },
        {
          "from": "execute_node_13",
          "to": "execute_node_14"
        },
        {
          "from": "execute_node_13",
          "to": "execute_node_15"
        },
        {
          "from": "execute_node_14",
          "to": "execute_node_15"
        },
        {
          "from": "execute_node_15",
          "to": "execute_node_16"
        }
      ]
    }
  },
  {
    "decl_name": "_enqueue_next_nodes",
    "start_line": 246,
    "end_line": 360,
    "children": [
      {
        "decl_name": "_enqueue_next_nodes.add_enqueued_execution",
        "start_line": 255,
        "end_line": 269,
        "children": [],
        "code": "    def add_enqueued_execution(\n        node_exec_id: str, node_id: str, data: BlockInput\n    ) -> NodeExecutionEntry:\n        exec_update = db_client.update_execution_status(\n            node_exec_id, ExecutionStatus.QUEUED, data\n        )\n        db_client.send_execution_update(exec_update)\n        return NodeExecutionEntry(\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            node_exec_id=node_exec_id,\n            node_id=node_id,\n            data=data,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "_enqueue_next_nodes.add_enqueued_execution_1",
              "code": "def add_enqueued_execution(\n        node_exec_id: str, node_id: str, data: BlockInput\n    ) -> NodeExecutionEntry:\n"
            },
            {
              "id": "_enqueue_next_nodes.add_enqueued_execution_2",
              "code": "        exec_update = db_client.update_execution_status(\n            node_exec_id, ExecutionStatus.QUEUED, data\n        )\n"
            },
            {
              "id": "_enqueue_next_nodes.add_enqueued_execution_3",
              "code": "        db_client.send_execution_update(exec_update)\n"
            },
            {
              "id": "_enqueue_next_nodes.add_enqueued_execution_4",
              "code": "        return NodeExecutionEntry(\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            node_exec_id=node_exec_id,\n            node_id=node_id,\n            data=data,\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "_enqueue_next_nodes.add_enqueued_execution_1",
              "to": "_enqueue_next_nodes.add_enqueued_execution_2"
            },
            {
              "from": "_enqueue_next_nodes.add_enqueued_execution_2",
              "to": "_enqueue_next_nodes.add_enqueued_execution_3"
            },
            {
              "from": "_enqueue_next_nodes.add_enqueued_execution_3",
              "to": "_enqueue_next_nodes.add_enqueued_execution_4"
            }
          ]
        }
      },
      {
        "decl_name": "_enqueue_next_nodes.register_next_executions",
        "start_line": 271,
        "end_line": 353,
        "children": [],
        "code": "    def register_next_executions(node_link: Link) -> list[NodeExecutionEntry]:\n        enqueued_executions = []\n        next_output_name = node_link.source_name\n        next_input_name = node_link.sink_name\n        next_node_id = node_link.sink_id\n\n        next_data = parse_execution_output(output, next_output_name)\n        if next_data is None:\n            return enqueued_executions\n\n        next_node = db_client.get_node(next_node_id)\n\n        # Multiple node can register the same next node, we need this to be atomic\n        # To avoid same execution to be enqueued multiple times,\n        # Or the same input to be consumed multiple times.\n        with synchronized(f\"upsert_input-{next_node_id}-{graph_exec_id}\"):\n            # Add output data to the earliest incomplete execution, or create a new one.\n            next_node_exec_id, next_node_input = db_client.upsert_execution_input(\n                node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )\n\n            # Complete missing static input pins data using the last execution input.\n            static_link_names = {\n                link.sink_name\n                for link in next_node.input_links\n                if link.is_static and link.sink_name not in next_node_input\n            }\n            if static_link_names and (\n                latest_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )\n            ):\n                for name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)\n\n            # Validate the input data for the next node.\n            next_node_input, validation_msg = validate_exec(next_node, next_node_input)\n            suffix = f\"{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"\n\n            # Incomplete input data, skip queueing the execution.\n            if not next_node_input:\n                log_metadata.warning(f\"Skipped queueing {suffix}\")\n                return enqueued_executions\n\n            # Input is complete, enqueue the execution.\n            log_metadata.info(f\"Enqueued {suffix}\")\n            enqueued_executions.append(\n                add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input)\n            )\n\n            # Next execution stops here if the link is not static.\n            if not node_link.is_static:\n                return enqueued_executions\n\n            # If link is static, there could be some incomplete executions waiting for it.\n            # Load and complete the input missing input data, and try to re-enqueue them.\n            for iexec in db_client.get_incomplete_executions(\n                next_node_id, graph_exec_id\n            ):\n                idata = iexec.input_data\n                ineid = iexec.node_exec_id\n\n                static_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }\n                for input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]\n\n                idata, msg = validate_exec(next_node, idata)\n                suffix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"\n                if not idata:\n                    log_metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue\n                log_metadata.info(f\"Enqueueing static-link execution {suffix}\")\n                enqueued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )\n            return enqueued_executions\n",
        "cfg": {
          "nodes": [
            {
              "id": "_enqueue_next_nodes.register_next_executions_1",
              "code": "def register_next_executions(node_link: Link) -> list[NodeExecutionEntry]:\n        enqueued_executions = []\n        next_output_name = node_link.source_name\n        next_input_name = node_link.sink_name\n        next_node_id = node_link.sink_id\n\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_2",
              "code": "        next_data = parse_execution_output(output, next_output_name)\n        if next_data is None:\n            return enqueued_executions\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_3",
              "code": "        next_node = db_client.get_node(next_node_id)\n\n        # Multiple node can register the same next node, we need this to be atomic\n        # To avoid same execution to be enqueued multiple times,\n        # Or the same input to be consumed multiple times.\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_4",
              "code": "        with synchronized(f\"upsert_input-{next_node_id}-{graph_exec_id}\"):\n            # Add output data to the earliest incomplete execution, or create a new one.\n            next_node_exec_id, next_node_input = db_client.upsert_execution_input(\n                node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_5",
              "code": "            # Complete missing static input pins data using the last execution input.\n            static_link_names = {\n                link.sink_name\n                for link in next_node.input_links\n                if link.is_static and link.sink_name not in next_node_input\n            }\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_6",
              "code": "            if static_link_names and (\n                latest_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )\n            ):\n                for name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)\n\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_7",
              "code": "            # Validate the input data for the next node.\n            next_node_input, validation_msg = validate_exec(next_node, next_node_input)\n            suffix = f\"{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"\n\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_8",
              "code": "            # Incomplete input data, skip queueing the execution.\n            if not next_node_input:\n                log_metadata.warning(f\"Skipped queueing {suffix}\")\n                return enqueued_executions\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_9",
              "code": "            # Input is complete, enqueue the execution.\n            log_metadata.info(f\"Enqueued {suffix}\")\n            enqueued_executions.append(\n                add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input)\n            )\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_10",
              "code": "            # Next execution stops here if the link is not static.\n            if not node_link.is_static:\n                return enqueued_executions\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_11",
              "code": "            # If link is static, there could be some incomplete executions waiting for it.\n            # Load and complete the input missing input data, and try to re-enqueue them.\n            for iexec in db_client.get_incomplete_executions(\n                next_node_id, graph_exec_id\n            ):\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_12",
              "code": "                idata = iexec.input_data\n                ineid = iexec.node_exec_id\n\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_13",
              "code": "                static_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_14",
              "code": "                for input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]\n\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_15",
              "code": "                idata, msg = validate_exec(next_node, idata)\n                suffix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"\n                if not idata:\n                    log_metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_16",
              "code": "                log_metadata.info(f\"Enqueueing static-link execution {suffix}\")\n                enqueued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )\n"
            },
            {
              "id": "_enqueue_next_nodes.register_next_executions_17",
              "code": "            return enqueued_executions\n"
            }
          ],
          "edges": [
            {
              "from": "_enqueue_next_nodes.register_next_executions_1",
              "to": "_enqueue_next_nodes.register_next_executions_2"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_2",
              "to": "_enqueue_next_nodes.register_next_executions_3"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_2",
              "to": "_enqueue_next_nodes.register_next_executions_17"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_3",
              "to": "_enqueue_next_nodes.register_next_executions_4"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_4",
              "to": "_enqueue_next_nodes.register_next_executions_5"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_5",
              "to": "_enqueue_next_nodes.register_next_executions_6"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_6",
              "to": "_enqueue_next_nodes.register_next_executions_7"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_7",
              "to": "_enqueue_next_nodes.register_next_executions_8"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_8",
              "to": "_enqueue_next_nodes.register_next_executions_9"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_8",
              "to": "_enqueue_next_nodes.register_next_executions_17"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_9",
              "to": "_enqueue_next_nodes.register_next_executions_10"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_10",
              "to": "_enqueue_next_nodes.register_next_executions_11"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_10",
              "to": "_enqueue_next_nodes.register_next_executions_17"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_11",
              "to": "_enqueue_next_nodes.register_next_executions_12"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_12",
              "to": "_enqueue_next_nodes.register_next_executions_13"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_13",
              "to": "_enqueue_next_nodes.register_next_executions_14"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_14",
              "to": "_enqueue_next_nodes.register_next_executions_15"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_15",
              "to": "_enqueue_next_nodes.register_next_executions_16"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_15",
              "to": "_enqueue_next_nodes.register_next_executions_11"
            },
            {
              "from": "_enqueue_next_nodes.register_next_executions_16",
              "to": "_enqueue_next_nodes.register_next_executions_11"
            }
          ]
        }
      }
    ],
    "code": "def _enqueue_next_nodes(\n    db_client: \"DatabaseManager\",\n    node: Node,\n    output: BlockData,\n    user_id: str,\n    graph_exec_id: str,\n    graph_id: str,\n    log_metadata: LogMetadata,\n) -> list[NodeExecutionEntry]:\n\n\n    return [\n        execution\n        for link in node.output_links\n        for execution in register_next_executions(link)\n    ]\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "_enqueue_next_nodes_1",
          "code": "def _enqueue_next_nodes(\n    db_client: \"DatabaseManager\",\n    node: Node,\n    output: BlockData,\n    user_id: str,\n    graph_exec_id: str,\n    graph_id: str,\n    log_metadata: LogMetadata,\n) -> list[NodeExecutionEntry]:\n"
        },
        {
          "id": "_enqueue_next_nodes_2",
          "code": "    return [\n        execution\n        for link in node.output_links\n        for execution in register_next_executions(link)\n    ]\n"
        }
      ],
      "edges": [
        {
          "from": "_enqueue_next_nodes_1",
          "to": "_enqueue_next_nodes_2"
        }
      ]
    }
  },
  {
    "decl_name": "validate_exec",
    "start_line": 362,
    "end_line": 429,
    "children": [],
    "code": "def validate_exec(\n    node: Node,\n    data: BlockInput,\n    resolve_input: bool = True,\n) -> tuple[BlockInput | None, str]:\n    \"\"\"\n    Validate the input data for a node execution.\n\n    Args:\n        node: The node to execute.\n        data: The input data for the node execution.\n        resolve_input: Whether to resolve dynamic pins into dict/list/object.\n\n    Returns:\n        A tuple of the validated data and the block name.\n        If the data is invalid, the first element will be None, and the second element\n        will be an error message.\n        If the data is valid, the first element will be the resolved input data, and\n        the second element will be the block name.\n    \"\"\"\n    node_block: Block | None = get_block(node.block_id)\n    if not node_block:\n        return None, f\"Block for {node.block_id} not found.\"\n\n    if isinstance(node_block, AgentExecutorBlock):\n        # Validate the execution metadata for the agent executor block.\n        try:\n            exec_data = AgentExecutorBlock.Input(**node.input_default)\n        except Exception as e:\n            return None, f\"Input data doesn't match {node_block.name}: {str(e)}\"\n\n        # Validation input\n        input_schema = exec_data.input_schema\n        required_fields = set(input_schema[\"required\"])\n        input_default = exec_data.data\n    else:\n        # Convert non-matching data types to the expected input schema.\n        for name, data_type in node_block.input_schema.__annotations__.items():\n            if (value := data.get(name)) and (type(value) is not data_type):\n                data[name] = convert(value, data_type)\n\n        # Validation input\n        input_schema = node_block.input_schema.jsonschema()\n        required_fields = node_block.input_schema.get_required_fields()\n        input_default = node.input_default\n\n    # Input data (without default values) should contain all required fields.\n    error_prefix = f\"Input data missing or mismatch for `{node_block.name}`:\"\n    input_fields_from_nodes = {link.sink_name for link in node.input_links}\n    if not input_fields_from_nodes.issubset(data):\n        return None, f\"{error_prefix} {input_fields_from_nodes - set(data)}\"\n\n    # Merge input data with default values and resolve dynamic dict/list/object pins.\n    data = {**input_default, **data}\n    if resolve_input:\n        data = merge_execution_input(data)\n\n    # Input data post-merge should contain all required fields from the schema.\n    if not required_fields.issubset(data):\n        return None, f\"{error_prefix} {required_fields - set(data)}\"\n\n    # Last validation: Validate the input values against the schema.\n    if error := json.validate_with_jsonschema(schema=input_schema, data=data):\n        error_message = f\"{error_prefix} {error}\"\n        logger.error(error_message)\n        return None, error_message\n\n    return data, node_block.name\n",
    "cfg": {
      "nodes": [
        {
          "id": "validate_exec_1",
          "code": "def validate_exec(\n    node: Node,\n    data: BlockInput,\n    resolve_input: bool = True,\n) -> tuple[BlockInput | None, str]:\n    \"\"\"\n    Validate the input data for a node execution.\n\n    Args:\n        node: The node to execute.\n        data: The input data for the node execution.\n        resolve_input: Whether to resolve dynamic pins into dict/list/object.\n\n    Returns:\n        A tuple of the validated data and the block name.\n        If the data is invalid, the first element will be None, and the second element\n        will be an error message.\n        If the data is valid, the first element will be the resolved input data, and\n        the second element will be the block name.\n    \"\"\"\n"
        },
        {
          "id": "validate_exec_2",
          "code": "    node_block: Block | None = get_block(node.block_id)\n    if not node_block:\n        return None, f\"Block for {node.block_id} not found.\"\n"
        },
        {
          "id": "validate_exec_3",
          "code": "\n    if isinstance(node_block, AgentExecutorBlock):\n        # Validate the execution metadata for the agent executor block.\n        try:\n            exec_data = AgentExecutorBlock.Input(**node.input_default)\n        except Exception as e:\n            return None, f\"Input data doesn't match {node_block.name}: {str(e)}\"\n"
        },
        {
          "id": "validate_exec_4",
          "code": "\n        # Validation input\n        input_schema = exec_data.input_schema\n        required_fields = set(input_schema[\"required\"])\n        input_default = exec_data.data\n"
        },
        {
          "id": "validate_exec_5",
          "code": "    else:\n        # Convert non-matching data types to the expected input schema.\n        for name, data_type in node_block.input_schema.__annotations__.items():\n            if (value := data.get(name)) and (type(value) is not data_type):\n                data[name] = convert(value, data_type)\n"
        },
        {
          "id": "validate_exec_6",
          "code": "\n        # Validation input\n        input_schema = node_block.input_schema.jsonschema()\n        required_fields = node_block.input_schema.get_required_fields()\n        input_default = node.input_default\n"
        },
        {
          "id": "validate_exec_7",
          "code": "\n    # Input data (without default values) should contain all required fields.\n    error_prefix = f\"Input data missing or mismatch for `{node_block.name}`:\"\n    input_fields_from_nodes = {link.sink_name for link in node.input_links}\n    if not input_fields_from_nodes.issubset(data):\n        return None, f\"{error_prefix} {input_fields_from_nodes - set(data)}\"\n"
        },
        {
          "id": "validate_exec_8",
          "code": "\n    # Merge input data with default values and resolve dynamic dict/list/object pins.\n    data = {**input_default, **data}\n    if resolve_input:\n        data = merge_execution_input(data)\n"
        },
        {
          "id": "validate_exec_9",
          "code": "\n    # Input data post-merge should contain all required fields from the schema.\n    if not required_fields.issubset(data):\n        return None, f\"{error_prefix} {required_fields - set(data)}\"\n"
        },
        {
          "id": "validate_exec_10",
          "code": "\n    # Last validation: Validate the input values against the schema.\n    if error := json.validate_with_jsonschema(schema=input_schema, data=data):\n        error_message = f\"{error_prefix} {error}\"\n        logger.error(error_message)\n        return None, error_message\n"
        },
        {
          "id": "validate_exec_11",
          "code": "\n    return data, node_block.name\n"
        }
      ],
      "edges": [
        {
          "from": "validate_exec_1",
          "to": "validate_exec_2"
        },
        {
          "from": "validate_exec_2",
          "to": "validate_exec_3"
        },
        {
          "from": "validate_exec_2",
          "to": "validate_exec_5"
        },
        {
          "from": "validate_exec_3",
          "to": "validate_exec_4"
        },
        {
          "from": "validate_exec_4",
          "to": "validate_exec_7"
        },
        {
          "from": "validate_exec_5",
          "to": "validate_exec_6"
        },
        {
          "from": "validate_exec_6",
          "to": "validate_exec_7"
        },
        {
          "from": "validate_exec_7",
          "to": "validate_exec_8"
        },
        {
          "from": "validate_exec_8",
          "to": "validate_exec_9"
        },
        {
          "from": "validate_exec_9",
          "to": "validate_exec_10"
        },
        {
          "from": "validate_exec_10",
          "to": "validate_exec_11"
        }
      ]
    }
  },
  {
    "decl_name": "Executor",
    "start_line": 432,
    "end_line": 712,
    "children": [
      {
        "decl_name": "Executor.on_node_executor_start",
        "start_line": 458,
        "end_line": 472,
        "children": [],
        "code": "    def on_node_executor_start(cls):\n        configure_logging()\n        set_service_name(\"NodeExecutor\")\n        redis.connect()\n        cls.pid = os.getpid()\n        cls.db_client = get_db_client()\n        cls.creds_manager = IntegrationCredentialsManager()\n\n        # Set up shutdown handlers\n        cls.shutdown_lock = threading.Lock()\n        atexit.register(cls.on_node_executor_stop)  # handle regular shutdown\n        signal.signal(  # handle termination\n            signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm()\n        )\n\n",
        "cfg": {
          "nodes": [
            {
              "id": "Executor.on_node_executor_start_1",
              "code": "def on_node_executor_start(cls):\n"
            },
            {
              "id": "Executor.on_node_executor_start_2",
              "code": "        configure_logging()\n        set_service_name(\"NodeExecutor\")\n        redis.connect()\n        cls.pid = os.getpid()\n        cls.db_client = get_db_client()\n        cls.creds_manager = IntegrationCredentialsManager()\n"
            },
            {
              "id": "Executor.on_node_executor_start_3",
              "code": "        # Set up shutdown handlers\n        cls.shutdown_lock = threading.Lock()\n        atexit.register(cls.on_node_executor_stop)  # handle regular shutdown\n"
            },
            {
              "id": "Executor.on_node_executor_start_4",
              "code": "        signal.signal(  # handle termination\n            signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm()\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "Executor.on_node_executor_start_1",
              "to": "Executor.on_node_executor_start_2"
            },
            {
              "from": "Executor.on_node_executor_start_2",
              "to": "Executor.on_node_executor_start_3"
            },
            {
              "from": "Executor.on_node_executor_start_3",
              "to": "Executor.on_node_executor_start_4"
            }
          ]
        }
      },
      {
        "decl_name": "Executor.on_node_executor_stop",
        "start_line": 474,
        "end_line": 484,
        "children": [],
        "code": "    def on_node_executor_stop(cls):\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        logger.info(f\"[on_node_executor_stop {cls.pid}] ⏳ Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] ⏳ Disconnecting Redis...\")\n        redis.disconnect()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] ⏳ Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"[on_node_executor_stop {cls.pid}] ✅ Finished cleanup\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "Executor.on_node_executor_stop_1",
              "code": "def on_node_executor_stop(cls):\n"
            },
            {
              "id": "Executor.on_node_executor_stop_2",
              "code": "        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n"
            },
            {
              "id": "Executor.on_node_executor_stop_3",
              "code": "        logger.info(f\"[on_node_executor_stop {cls.pid}] ⏳ Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n"
            },
            {
              "id": "Executor.on_node_executor_stop_4",
              "code": "        logger.info(f\"[on_node_executor_stop {cls.pid}] ⏳ Disconnecting Redis...\")\n        redis.disconnect()\n"
            },
            {
              "id": "Executor.on_node_executor_stop_5",
              "code": "        logger.info(f\"[on_node_executor_stop {cls.pid}] ⏳ Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n"
            },
            {
              "id": "Executor.on_node_executor_stop_6",
              "code": "        logger.info(f\"[on_node_executor_stop {cls.pid}] ✅ Finished cleanup\")\n"
            }
          ],
          "edges": [
            {
              "from": "Executor.on_node_executor_stop_1",
              "to": "Executor.on_node_executor_stop_2"
            },
            {
              "from": "Executor.on_node_executor_stop_2",
              "to": "Executor.on_node_executor_stop_3"
            },
            {
              "from": "Executor.on_node_executor_stop_2",
              "to": "Executor.on_node_executor_stop_6"
            },
            {
              "from": "Executor.on_node_executor_stop_3",
              "to": "Executor.on_node_executor_stop_4"
            },
            {
              "from": "Executor.on_node_executor_stop_4",
              "to": "Executor.on_node_executor_stop_5"
            },
            {
              "from": "Executor.on_node_executor_stop_5",
              "to": "Executor.on_node_executor_stop_6"
            }
          ]
        }
      },
      {
        "decl_name": "Executor.on_node_executor_sigterm",
        "start_line": 487,
        "end_line": 497,
        "children": [],
        "code": "    def on_node_executor_sigterm(cls):\n        llprint(f\"[on_node_executor_sigterm {cls.pid}] ⚠️ SIGTERM received\")\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        llprint(f\"[on_node_executor_stop {cls.pid}] ⏳ Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        llprint(f\"[on_node_executor_stop {cls.pid}] ⏳ Disconnecting Redis...\")\n        redis.disconnect()\n        llprint(f\"[on_node_executor_stop {cls.pid}] ✅ Finished cleanup\")\n        sys.exit(0)\n",
        "cfg": {
          "nodes": [
            {
              "id": "Executor.on_node_executor_sigterm_1",
              "code": "def on_node_executor_sigterm(cls):\n        llprint(f\"[on_node_executor_sigterm {cls.pid}] ⚠️ SIGTERM received\")\n"
            },
            {
              "id": "Executor.on_node_executor_sigterm_2",
              "code": "        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n"
            },
            {
              "id": "Executor.on_node_executor_sigterm_3",
              "code": "        llprint(f\"[on_node_executor_stop {cls.pid}] ⏳ Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        llprint(f\"[on_node_executor_stop {cls.pid}] ⏳ Disconnecting Redis...\")\n        redis.disconnect()\n        llprint(f\"[on_node_executor_stop {cls.pid}] ✅ Finished cleanup\")\n        sys.exit(0)\n"
            }
          ],
          "edges": [
            {
              "from": "Executor.on_node_executor_sigterm_1",
              "to": "Executor.on_node_executor_sigterm_2"
            },
            {
              "from": "Executor.on_node_executor_sigterm_2",
              "to": "Executor.on_node_executor_sigterm_3"
            }
          ]
        }
      },
      {
        "decl_name": "Executor.on_node_execution",
        "start_line": 501,
        "end_line": 525,
        "children": [],
        "code": "    def on_node_execution(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n    ) -> dict[str, Any]:\n        log_metadata = LogMetadata(\n            user_id=node_exec.user_id,\n            graph_eid=node_exec.graph_exec_id,\n            graph_id=node_exec.graph_id,\n            node_eid=node_exec.node_exec_id,\n            node_id=node_exec.node_id,\n            block_name=\"-\",\n        )\n\n        execution_stats = {}\n        timing_info, _ = cls._on_node_execution(\n            q, node_exec, log_metadata, execution_stats\n        )\n        execution_stats[\"walltime\"] = timing_info.wall_time\n        execution_stats[\"cputime\"] = timing_info.cpu_time\n\n        cls.db_client.update_node_execution_stats(\n            node_exec.node_exec_id, execution_stats\n        )\n        return execution_stats\n",
        "cfg": {
          "nodes": [
            {
              "id": "Executor.on_node_execution_1",
              "code": "def on_node_execution(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n    ) -> dict[str, Any]:\n"
            },
            {
              "id": "Executor.on_node_execution_2",
              "code": "        log_metadata = LogMetadata(\n            user_id=node_exec.user_id,\n            graph_eid=node_exec.graph_exec_id,\n            graph_id=node_exec.graph_id,\n            node_eid=node_exec.node_exec_id,\n            node_id=node_exec.node_id,\n            block_name=\"-\",\n        )\n"
            },
            {
              "id": "Executor.on_node_execution_3",
              "code": "        execution_stats = {}\n"
            },
            {
              "id": "Executor.on_node_execution_4",
              "code": "        timing_info, _ = cls._on_node_execution(\n            q, node_exec, log_metadata, execution_stats\n        )\n"
            },
            {
              "id": "Executor.on_node_execution_5",
              "code": "        execution_stats[\"walltime\"] = timing_info.wall_time\n        execution_stats[\"cputime\"] = timing_info.cpu_time\n"
            },
            {
              "id": "Executor.on_node_execution_6",
              "code": "        cls.db_client.update_node_execution_stats(\n            node_exec.node_exec_id, execution_stats\n        )\n"
            },
            {
              "id": "Executor.on_node_execution_7",
              "code": "        return execution_stats\n"
            }
          ],
          "edges": [
            {
              "from": "Executor.on_node_execution_1",
              "to": "Executor.on_node_execution_2"
            },
            {
              "from": "Executor.on_node_execution_2",
              "to": "Executor.on_node_execution_3"
            },
            {
              "from": "Executor.on_node_execution_3",
              "to": "Executor.on_node_execution_4"
            },
            {
              "from": "Executor.on_node_execution_4",
              "to": "Executor.on_node_execution_5"
            },
            {
              "from": "Executor.on_node_execution_5",
              "to": "Executor.on_node_execution_6"
            },
            {
              "from": "Executor.on_node_execution_6",
              "to": "Executor.on_node_execution_7"
            }
          ]
        }
      },
      {
        "decl_name": "Executor._on_node_execution",
        "start_line": 529,
        "end_line": 546,
        "children": [],
        "code": "    def _on_node_execution(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n        log_metadata: LogMetadata,\n        stats: dict[str, Any] | None = None,\n    ):\n        try:\n            log_metadata.info(f\"Start node execution {node_exec.node_exec_id}\")\n            for execution in execute_node(\n                cls.db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.add(execution)\n            log_metadata.info(f\"Finished node execution {node_exec.node_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n",
        "cfg": {
          "nodes": [
            {
              "id": "Executor._on_node_execution_1",
              "code": "def _on_node_execution(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n        log_metadata: LogMetadata,\n        stats: dict[str, Any] | None = None,\n    ):\n"
            },
            {
              "id": "Executor._on_node_execution_2",
              "code": "        try:\n            log_metadata.info(f\"Start node execution {node_exec.node_exec_id}\")\n"
            },
            {
              "id": "Executor._on_node_execution_3",
              "code": "            for execution in execute_node(\n                cls.db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.add(execution)\n"
            },
            {
              "id": "Executor._on_node_execution_4",
              "code": "            log_metadata.info(f\"Finished node execution {node_exec.node_exec_id}\")\n"
            },
            {
              "id": "Executor._on_node_execution_5",
              "code": "        except Exception as e:\n            log_metadata.exception(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n"
            }
          ],
          "edges": [
            {
              "from": "Executor._on_node_execution_1",
              "to": "Executor._on_node_execution_2"
            },
            {
              "from": "Executor._on_node_execution_2",
              "to": "Executor._on_node_execution_3"
            },
            {
              "from": "Executor._on_node_execution_2",
              "to": "Executor._on_node_execution_5"
            },
            {
              "from": "Executor._on_node_execution_3",
              "to": "Executor._on_node_execution_4"
            }
          ]
        }
      },
      {
        "decl_name": "Executor.on_graph_executor_start",
        "start_line": 549,
        "end_line": 562,
        "children": [],
        "code": "    def on_graph_executor_start(cls):\n        configure_logging()\n        set_service_name(\"GraphExecutor\")\n\n        cls.db_client = get_db_client()\n        cls.pool_size = settings.config.num_node_workers\n        cls.pid = os.getpid()\n        cls._init_node_executor_pool()\n        logger.info(\n            f\"Graph executor {cls.pid} started with {cls.pool_size} node workers\"\n        )\n\n        # Set up shutdown handler\n        atexit.register(cls.on_graph_executor_stop)\n",
        "cfg": {
          "nodes": [
            {
              "id": "Executor.on_graph_executor_start_1",
              "code": "def on_graph_executor_start(cls):\n        configure_logging()\n"
            },
            {
              "id": "Executor.on_graph_executor_start_2",
              "code": "        configure_logging()\n        set_service_name(\"GraphExecutor\")\n"
            },
            {
              "id": "Executor.on_graph_executor_start_3",
              "code": "        cls.db_client = get_db_client()\n        cls.pool_size = settings.config.num_node_workers\n        cls.pid = os.getpid()\n        cls._init_node_executor_pool()\n"
            },
            {
              "id": "Executor.on_graph_executor_start_4",
              "code": "        logger.info(\n            f\"Graph executor {cls.pid} started with {cls.pool_size} node workers\"\n        )\n"
            },
            {
              "id": "Executor.on_graph_executor_start_5",
              "code": "        atexit.register(cls.on_graph_executor_stop)\n"
            }
          ],
          "edges": [
            {
              "from": "Executor.on_graph_executor_start_1",
              "to": "Executor.on_graph_executor_start_2"
            },
            {
              "from": "Executor.on_graph_executor_start_2",
              "to": "Executor.on_graph_executor_start_3"
            },
            {
              "from": "Executor.on_graph_executor_start_3",
              "to": "Executor.on_graph_executor_start_4"
            },
            {
              "from": "Executor.on_graph_executor_start_4",
              "to": "Executor.on_graph_executor_start_5"
            }
          ]
        }
      },
      {
        "decl_name": "Executor.on_graph_executor_stop",
        "start_line": 565,
        "end_line": 571,
        "children": [],
        "code": "    def on_graph_executor_stop(cls):\n        prefix = f\"[on_graph_executor_stop {cls.pid}]\"\n        logger.info(f\"{prefix} ⏳ Terminating node executor pool...\")\n        cls.executor.terminate()\n        logger.info(f\"{prefix} ⏳ Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"{prefix} ✅ Finished cleanup\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "Executor.on_graph_executor_stop_1",
              "code": "def on_graph_executor_stop(cls):\n"
            },
            {
              "id": "Executor.on_graph_executor_stop_2",
              "code": "        prefix = f\"[on_graph_executor_stop {cls.pid}]\"\n        logger.info(f\"{prefix} ⏳ Terminating node executor pool...\")\n        cls.executor.terminate()\n        logger.info(f\"{prefix} ⏳ Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"{prefix} ✅ Finished cleanup\")\n"
            }
          ],
          "edges": [
            {
              "from": "Executor.on_graph_executor_stop_1",
              "to": "Executor.on_graph_executor_stop_2"
            }
          ]
        }
      },
      {
        "decl_name": "Executor._init_node_executor_pool",
        "start_line": 574,
        "end_line": 578,
        "children": [],
        "code": "    def _init_node_executor_pool(cls):\n        cls.executor = Pool(\n            processes=cls.pool_size,\n            initializer=cls.on_node_executor_start,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "Executor._init_node_executor_pool_1",
              "code": "def _init_node_executor_pool(cls):\n        cls.executor = Pool(\n            processes=cls.pool_size,\n            initializer=cls.on_node_executor_start,\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "Executor.on_graph_execution",
        "start_line": 582,
        "end_line": 603,
        "children": [],
        "code": "    def on_graph_execution(\n        cls, graph_exec: GraphExecutionEntry, cancel: threading.Event\n    ):\n        log_metadata = LogMetadata(\n            user_id=graph_exec.user_id,\n            graph_eid=graph_exec.graph_exec_id,\n            graph_id=graph_exec.graph_id,\n            node_id=\"*\",\n            node_eid=\"*\",\n            block_name=\"-\",\n        )\n        timing_info, (exec_stats, error) = cls._on_graph_execution(\n            graph_exec, cancel, log_metadata\n        )\n        exec_stats[\"walltime\"] = timing_info.wall_time\n        exec_stats[\"cputime\"] = timing_info.cpu_time\n        exec_stats[\"error\"] = str(error) if error else None\n        result = cls.db_client.update_graph_execution_stats(\n            graph_exec_id=graph_exec.graph_exec_id,\n            stats=exec_stats,\n        )\n        cls.db_client.send_execution_update(result)\n",
        "cfg": {
          "nodes": [
            {
              "id": "Executor.on_graph_execution_1",
              "code": "def on_graph_execution(\n        cls, graph_exec: GraphExecutionEntry, cancel: threading.Event\n    ):\n"
            },
            {
              "id": "Executor.on_graph_execution_2",
              "code": "        log_metadata = LogMetadata(\n            user_id=graph_exec.user_id,\n            graph_eid=graph_exec.graph_exec_id,\n            graph_id=graph_exec.graph_id,\n            node_id=\"*\",\n            node_eid=\"*\",\n            block_name=\"-\",\n        )\n"
            },
            {
              "id": "Executor.on_graph_execution_3",
              "code": "        timing_info, (exec_stats, error) = cls._on_graph_execution(\n            graph_exec, cancel, log_metadata\n        )\n"
            },
            {
              "id": "Executor.on_graph_execution_4",
              "code": "        exec_stats[\"walltime\"] = timing_info.wall_time\n        exec_stats[\"cputime\"] = timing_info.cpu_time\n        exec_stats[\"error\"] = str(error) if error else None\n"
            },
            {
              "id": "Executor.on_graph_execution_5",
              "code": "        result = cls.db_client.update_graph_execution_stats(\n            graph_exec_id=graph_exec.graph_exec_id,\n            stats=exec_stats,\n        )\n"
            },
            {
              "id": "Executor.on_graph_execution_6",
              "code": "        cls.db_client.send_execution_update(result)\n"
            }
          ],
          "edges": [
            {
              "from": "Executor.on_graph_execution_1",
              "to": "Executor.on_graph_execution_2"
            },
            {
              "from": "Executor.on_graph_execution_2",
              "to": "Executor.on_graph_execution_3"
            },
            {
              "from": "Executor.on_graph_execution_3",
              "to": "Executor.on_graph_execution_4"
            },
            {
              "from": "Executor.on_graph_execution_4",
              "to": "Executor.on_graph_execution_5"
            },
            {
              "from": "Executor.on_graph_execution_5",
              "to": "Executor.on_graph_execution_6"
            }
          ]
        }
      },
      {
        "decl_name": "Executor._on_graph_execution",
        "start_line": 607,
        "end_line": 712,
        "children": [
          {
            "decl_name": "Executor._on_graph_execution.cancel_handler",
            "start_line": 627,
            "end_line": 634,
            "children": [],
            "code": "        def cancel_handler():\n            while not cancel.is_set():\n                cancel.wait(1)\n            if finished:\n                return\n            cls.executor.terminate()\n            log_metadata.info(f\"Terminated graph execution {graph_exec.graph_exec_id}\")\n            cls._init_node_executor_pool()\n",
            "cfg": {
              "nodes": [
                {
                  "id": "Executor._on_graph_execution.cancel_handler_1",
                  "code": "def cancel_handler():\n"
                },
                {
                  "id": "Executor._on_graph_execution.cancel_handler_2",
                  "code": "            while not cancel.is_set():\n                cancel.wait(1)\n"
                },
                {
                  "id": "Executor._on_graph_execution.cancel_handler_3",
                  "code": "            if finished:\n                return\n"
                },
                {
                  "id": "Executor._on_graph_execution.cancel_handler_4",
                  "code": "            cls.executor.terminate()\n            log_metadata.info(f\"Terminated graph execution {graph_exec.graph_exec_id}\")\n            cls._init_node_executor_pool()\n"
                }
              ],
              "edges": [
                {
                  "from": "Executor._on_graph_execution.cancel_handler_1",
                  "to": "Executor._on_graph_execution.cancel_handler_2"
                },
                {
                  "from": "Executor._on_graph_execution.cancel_handler_2",
                  "to": "Executor._on_graph_execution.cancel_handler_3"
                },
                {
                  "from": "Executor._on_graph_execution.cancel_handler_2",
                  "to": "Executor._on_graph_execution.cancel_handler_2"
                },
                {
                  "from": "Executor._on_graph_execution.cancel_handler_3",
                  "to": "Executor._on_graph_execution.cancel_handler_4"
                }
              ]
            }
          },
          {
            "decl_name": "Executor._on_graph_execution.make_exec_callback",
            "start_line": 646,
            "end_line": 657,
            "children": [],
            "code": "            def make_exec_callback(exec_data: NodeExecutionEntry):\n                node_id = exec_data.node_id\n\n                def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return callback\n",
            "cfg": {
              "nodes": [
                {
                  "id": "Executor._on_graph_execution.make_exec_callback_1",
                  "code": "def make_exec_callback(exec_data: NodeExecutionEntry):\n                node_id = exec_data.node_id\n"
                },
                {
                  "id": "Executor._on_graph_execution.make_exec_callback_2",
                  "code": "                def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n"
                },
                {
                  "id": "Executor._on_graph_execution.make_exec_callback_3",
                  "code": "                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n"
                },
                {
                  "id": "Executor._on_graph_execution.make_exec_callback_4",
                  "code": "                return callback\n"
                }
              ],
              "edges": [
                {
                  "from": "Executor._on_graph_execution.make_exec_callback_1",
                  "to": "Executor._on_graph_execution.make_exec_callback_2"
                },
                {
                  "from": "Executor._on_graph_execution.make_exec_callback_2",
                  "to": "Executor._on_graph_execution.make_exec_callback_3"
                },
                {
                  "from": "Executor._on_graph_execution.make_exec_callback_3",
                  "to": "Executor._on_graph_execution.make_exec_callback_4"
                }
              ]
            }
          }
        ],
        "code": "    def _on_graph_execution(\n        cls,\n        graph_exec: GraphExecutionEntry,\n        cancel: threading.Event,\n        log_metadata: LogMetadata,\n    ) -> tuple[dict[str, Any], Exception | None]:\n        \"\"\"\n        Returns:\n            The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n        log_metadata.info(f\"Start graph execution {graph_exec.graph_exec_id}\")\n        exec_stats = {\n            \"nodes_walltime\": 0,\n            \"nodes_cputime\": 0,\n            \"node_count\": 0,\n        }\n        error = None\n        finished = False\n\n\n        cancel_thread = threading.Thread(target=cancel_handler)\n        cancel_thread.start()\n\n        try:\n            queue = ExecutionQueue[NodeExecutionEntry]()\n            for node_exec in graph_exec.start_node_execs:\n                queue.add(node_exec)\n\n            running_executions: dict[str, AsyncResult] = {}\n\n\n            while not queue.empty():\n                if cancel.is_set():\n                    error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n\n                exec_data = queue.get()\n\n                # Avoid parallel execution of the same node.\n                execution = running_executions.get(exec_data.node_id)\n                if execution and not execution.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n\n                log_metadata.debug(\n                    f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_executions[exec_data.node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid terminating graph execution when some nodes are still running.\n                while queue.empty() and running_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.info(f\"Finished graph execution {graph_exec.graph_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e\n        finally:\n            if not cancel.is_set():\n                finished = True\n                cancel.set()\n            cancel_thread.join()\n            return exec_stats, error\n",
        "cfg": {
          "nodes": [
            {
              "id": "Executor._on_graph_execution_1",
              "code": "def _on_graph_execution(\n        cls,\n        graph_exec: GraphExecutionEntry,\n        cancel: threading.Event,\n        log_metadata: LogMetadata,\n    ) -> tuple[dict[str, Any], Exception | None]:\n        \"\"\"\n        Returns:\n            The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n"
            },
            {
              "id": "Executor._on_graph_execution_2",
              "code": "        log_metadata.info(f\"Start graph execution {graph_exec.graph_exec_id}\")\n"
            },
            {
              "id": "Executor._on_graph_execution_3",
              "code": "        exec_stats = {\n            \"nodes_walltime\": 0,\n            \"nodes_cputime\": 0,\n            \"node_count\": 0,\n        }\n        error = None\n"
            },
            {
              "id": "Executor._on_graph_execution_4",
              "code": "        finished = False\n"
            },
            {
              "id": "Executor._on_graph_execution_5",
              "code": "        cancel_thread = threading.Thread(target=cancel_handler)\n        cancel_thread.start()\n"
            },
            {
              "id": "Executor._on_graph_execution_6",
              "code": "        try:\n"
            },
            {
              "id": "Executor._on_graph_execution_7",
              "code": "            queue = ExecutionQueue[NodeExecutionEntry]()\n            for node_exec in graph_exec.start_node_execs:\n                queue.add(node_exec)\n"
            },
            {
              "id": "Executor._on_graph_execution_8",
              "code": "            running_executions: dict[str, AsyncResult] = {}\n"
            },
            {
              "id": "Executor._on_graph_execution_9",
              "code": "            while not queue.empty():\n                if cancel.is_set():\n                    error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n"
            },
            {
              "id": "Executor._on_graph_execution_10",
              "code": "                exec_data = queue.get()\n"
            },
            {
              "id": "Executor._on_graph_execution_11",
              "code": "                execution = running_executions.get(exec_data.node_id)\n                if execution and not execution.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n"
            },
            {
              "id": "Executor._on_graph_execution_12",
              "code": "                log_metadata.debug(\n                    f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n"
            },
            {
              "id": "Executor._on_graph_execution_13",
              "code": "                running_executions[exec_data.node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n"
            },
            {
              "id": "Executor._on_graph_execution_14",
              "code": "                while queue.empty() and running_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n"
            },
            {
              "id": "Executor._on_graph_execution_15",
              "code": "                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n"
            },
            {
              "id": "Executor._on_graph_execution_16",
              "code": "                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n"
            },
            {
              "id": "Executor._on_graph_execution_17",
              "code": "                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n"
            },
            {
              "id": "Executor._on_graph_execution_18",
              "code": "            log_metadata.info(f\"Finished graph execution {graph_exec.graph_exec_id}\")\n"
            },
            {
              "id": "Executor._on_graph_execution_19",
              "code": "        except Exception as e:\n            log_metadata.exception(\n                f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n"
            },
            {
              "id": "Executor._on_graph_execution_20",
              "code": "            error = e\n"
            },
            {
              "id": "Executor._on_graph_execution_21",
              "code": "        finally:\n            if not cancel.is_set():\n                finished = True\n                cancel.set()\n"
            },
            {
              "id": "Executor._on_graph_execution_22",
              "code": "            cancel_thread.join()\n"
            },
            {
              "id": "Executor._on_graph_execution_23",
              "code": "            return exec_stats, error\n"
            }
          ],
          "edges": [
            {
              "from": "Executor._on_graph_execution_1",
              "to": "Executor._on_graph_execution_2"
            },
            {
              "from": "Executor._on_graph_execution_2",
              "to": "Executor._on_graph_execution_3"
            },
            {
              "from": "Executor._on_graph_execution_3",
              "to": "Executor._on_graph_execution_4"
            },
            {
              "from": "Executor._on_graph_execution_4",
              "to": "Executor._on_graph_execution_5"
            },
            {
              "from": "Executor._on_graph_execution_5",
              "to": "Executor._on_graph_execution_6"
            },
            {
              "from": "Executor._on_graph_execution_6",
              "to": "Executor._on_graph_execution_7"
            },
            {
              "from": "Executor._on_graph_execution_7",
              "to": "Executor._on_graph_execution_8"
            },
            {
              "from": "Executor._on_graph_execution_8",
              "to": "Executor._on_graph_execution_9"
            },
            {
              "from": "Executor._on_graph_execution_9",
              "to": "Executor._on_graph_execution_10"
            },
            {
              "from": "Executor._on_graph_execution_9",
              "to": "Executor._on_graph_execution_18"
            },
            {
              "from": "Executor._on_graph_execution_10",
              "to": "Executor._on_graph_execution_11"
            },
            {
              "from": "Executor._on_graph_execution_11",
              "to": "Executor._on_graph_execution_12"
            },
            {
              "from": "Executor._on_graph_execution_12",
              "to": "Executor._on_graph_execution_13"
            },
            {
              "from": "Executor._on_graph_execution_13",
              "to": "Executor._on_graph_execution_14"
            },
            {
              "from": "Executor._on_graph_execution_14",
              "to": "Executor._on_graph_execution_15"
            },
            {
              "from": "Executor._on_graph_execution_14",
              "to": "Executor._on_graph_execution_9"
            },
            {
              "from": "Executor._on_graph_execution_15",
              "to": "Executor._on_graph_execution_16"
            },
            {
              "from": "Executor._on_graph_execution_15",
              "to": "Executor._on_graph_execution_18"
            },
            {
              "from": "Executor._on_graph_execution_16",
              "to": "Executor._on_graph_execution_17"
            },
            {
              "from": "Executor._on_graph_execution_16",
              "to": "Executor._on_graph_execution_9"
            },
            {
              "from": "Executor._on_graph_execution_17",
              "to": "Executor._on_graph_execution_14"
            },
            {
              "from": "Executor._on_graph_execution_18",
              "to": "Executor._on_graph_execution_19"
            },
            {
              "from": "Executor._on_graph_execution_18",
              "to": "Executor._on_graph_execution_21"
            },
            {
              "from": "Executor._on_graph_execution_19",
              "to": "Executor._on_graph_execution_20"
            },
            {
              "from": "Executor._on_graph_execution_20",
              "to": "Executor._on_graph_execution_21"
            },
            {
              "from": "Executor._on_graph_execution_21",
              "to": "Executor._on_graph_execution_22"
            },
            {
              "from": "Executor._on_graph_execution_22",
              "to": "Executor._on_graph_execution_23"
            }
          ]
        }
      }
    ],
    "code": "class Executor:\n    \"\"\"\n    This class contains event handlers for the process pool executor events.\n\n    The main events are:\n        on_node_executor_start: Initialize the process that executes the node.\n        on_node_execution: Execution logic for a node.\n\n        on_graph_executor_start: Initialize the process that executes the graph.\n        on_graph_execution: Execution logic for a graph.\n\n    The execution flow:\n        1. Graph execution request is added to the queue.\n        2. Graph executor loop picks the request from the queue.\n        3. Graph executor loop submits the graph execution request to the executor pool.\n      [on_graph_execution]\n        4. Graph executor initialize the node execution queue.\n        5. Graph executor adds the starting nodes to the node execution queue.\n        6. Graph executor waits for all nodes to be executed.\n      [on_node_execution]\n        7. Node executor picks the node execution request from the queue.\n        8. Node executor executes the node.\n        9. Node executor enqueues the next executed nodes to the node execution queue.\n    \"\"\"\n\n    @classmethod\n    @classmethod\n\n    @classmethod\n\n    @classmethod\n    @error_logged\n\n    @classmethod\n    @time_measured\n\n    @classmethod\n\n    @classmethod\n\n    @classmethod\n\n    @classmethod\n    @error_logged\n\n    @classmethod\n    @time_measured\n",
    "cfg": {
      "nodes": [
        {
          "id": "Executor_1",
          "code": "class Executor:\n    \"\"\"\n    This class contains event handlers for the process pool executor events.\n\n    The main events are:\n        on_node_executor_start: Initialize the process that executes the node.\n        on_node_execution: Execution logic for a node.\n\n        on_graph_executor_start: Initialize the process that executes the graph.\n        on_graph_execution: Execution logic for a graph.\n\n    The execution flow:\n        1. Graph execution request is added to the queue.\n        2. Graph executor loop picks the request from the queue.\n        3. Graph executor loop submits the graph execution request to the executor pool.\n      [on_graph_execution]\n        4. Graph executor initialize the node execution queue.\n        5. Graph executor adds the starting nodes to the node execution queue.\n        6. Graph executor waits for all nodes to be executed.\n      [on_node_execution]\n        7. Node executor picks the node execution request from the queue.\n        8. Node executor executes the node.\n        9. Node executor enqueues the next executed nodes to the node execution queue.\n    \"\"\"\n"
        },
        {
          "id": "Executor_2",
          "code": "    @classmethod\n    @classmethod\n"
        },
        {
          "id": "Executor_3",
          "code": "    @classmethod\n"
        },
        {
          "id": "Executor_4",
          "code": "    @classmethod\n    @error_logged\n"
        },
        {
          "id": "Executor_5",
          "code": "    @classmethod\n    @time_measured\n"
        },
        {
          "id": "Executor_6",
          "code": "    @classmethod\n"
        },
        {
          "id": "Executor_7",
          "code": "    @classmethod\n"
        },
        {
          "id": "Executor_8",
          "code": "    @classmethod\n"
        },
        {
          "id": "Executor_9",
          "code": "    @classmethod\n    @error_logged\n"
        },
        {
          "id": "Executor_10",
          "code": "    @classmethod\n    @time_measured\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "ExecutionManager",
    "start_line": 715,
    "end_line": 930,
    "children": [
      {
        "decl_name": "ExecutionManager.__init__",
        "start_line": 716,
        "end_line": 722,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__()\n        self.use_redis = True\n        self.use_supabase = True\n        self.pool_size = settings.config.num_graph_workers\n        self.queue = ExecutionQueue[GraphExecutionEntry]()\n        self.active_graph_runs: dict[str, tuple[Future, threading.Event]] = {}\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExecutionManager.__init___1",
              "code": "def __init__(self):\n        super().__init__()\n        self.use_redis = True\n        self.use_supabase = True\n        self.pool_size = settings.config.num_graph_workers\n        self.queue = ExecutionQueue[GraphExecutionEntry]()\n        self.active_graph_runs: dict[str, tuple[Future, threading.Event]] = {}\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "ExecutionManager.get_port",
        "start_line": 725,
        "end_line": 726,
        "children": [],
        "code": "    def get_port(cls) -> int:\n        return settings.config.execution_manager_port\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExecutionManager.get_port_1",
              "code": "def get_port(cls) -> int:\n        return settings.config.execution_manager_port\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "ExecutionManager.run_service",
        "start_line": 728,
        "end_line": 754,
        "children": [],
        "code": "    def run_service(self):\n        from backend.integrations.credentials_store import IntegrationCredentialsStore\n\n        self.credentials_store = IntegrationCredentialsStore()\n        self.executor = ProcessPoolExecutor(\n            max_workers=self.pool_size,\n            initializer=Executor.on_graph_executor_start,\n        )\n        sync_manager = multiprocessing.Manager()\n        logger.info(\n            f\"[{self.service_name}] Started with max-{self.pool_size} graph workers\"\n        )\n        while True:\n            graph_exec_data = self.queue.get()\n            graph_exec_id = graph_exec_data.graph_exec_id\n            logger.debug(\n                f\"[ExecutionManager] Dispatching graph execution {graph_exec_id}\"\n            )\n            cancel_event = sync_manager.Event()\n            future = self.executor.submit(\n                Executor.on_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_graph_runs[graph_exec_id] = (future, cancel_event)\n            future.add_done_callback(\n                lambda _: self.active_graph_runs.pop(graph_exec_id, None)\n            )\n\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExecutionManager.run_service_1",
              "code": "def run_service(self):\n        from backend.integrations.credentials_store import IntegrationCredentialsStore\n"
            },
            {
              "id": "ExecutionManager.run_service_2",
              "code": "        self.credentials_store = IntegrationCredentialsStore()\n        self.executor = ProcessPoolExecutor(\n            max_workers=self.pool_size,\n            initializer=Executor.on_graph_executor_start,\n        )\n"
            },
            {
              "id": "ExecutionManager.run_service_3",
              "code": "        sync_manager = multiprocessing.Manager()\n"
            },
            {
              "id": "ExecutionManager.run_service_4",
              "code": "        logger.info(\n            f\"[{self.service_name}] Started with max-{self.pool_size} graph workers\"\n        )\n"
            },
            {
              "id": "ExecutionManager.run_service_5",
              "code": "        while True:\n            graph_exec_data = self.queue.get()\n            graph_exec_id = graph_exec_data.graph_exec_id\n            logger.debug(\n                f\"[ExecutionManager] Dispatching graph execution {graph_exec_id}\"\n            )\n            cancel_event = sync_manager.Event()\n            future = self.executor.submit(\n                Executor.on_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_graph_runs[graph_exec_id] = (future, cancel_event)\n            future.add_done_callback(\n                lambda _: self.active_graph_runs.pop(graph_exec_id, None)\n            )\n"
            }
          ],
          "edges": [
            {
              "from": "ExecutionManager.run_service_1",
              "to": "ExecutionManager.run_service_2"
            },
            {
              "from": "ExecutionManager.run_service_2",
              "to": "ExecutionManager.run_service_3"
            },
            {
              "from": "ExecutionManager.run_service_3",
              "to": "ExecutionManager.run_service_4"
            },
            {
              "from": "ExecutionManager.run_service_4",
              "to": "ExecutionManager.run_service_5"
            },
            {
              "from": "ExecutionManager.run_service_5",
              "to": "ExecutionManager.run_service_5"
            }
          ]
        }
      },
      {
        "decl_name": "ExecutionManager.cleanup",
        "start_line": 755,
        "end_line": 759,
        "children": [],
        "code": "    def cleanup(self):\n        logger.info(f\"[{__class__.__name__}] ⏳ Shutting down graph executor pool...\")\n        self.executor.shutdown(cancel_futures=True)\n\n        super().cleanup()\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExecutionManager.cleanup_1",
              "code": "def cleanup(self):\n        logger.info(f\"[{__class__.__name__}] ⏳ Shutting down graph executor pool...\")\n"
            },
            {
              "id": "ExecutionManager.cleanup_2",
              "code": "        self.executor.shutdown(cancel_futures=True)\n"
            },
            {
              "id": "ExecutionManager.cleanup_3",
              "code": "        super().cleanup()\n"
            }
          ],
          "edges": [
            {
              "from": "ExecutionManager.cleanup_1",
              "to": "ExecutionManager.cleanup_2"
            },
            {
              "from": "ExecutionManager.cleanup_2",
              "to": "ExecutionManager.cleanup_3"
            }
          ]
        }
      },
      {
        "decl_name": "ExecutionManager.db_client",
        "start_line": 762,
        "end_line": 763,
        "children": [],
        "code": "    def db_client(self) -> \"DatabaseManager\":\n        return get_db_client()\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExecutionManager.db_client_1",
              "code": "def db_client(self) -> \"DatabaseManager\":\n        return get_db_client()\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "ExecutionManager.add_execution",
        "start_line": 766,
        "end_line": 847,
        "children": [],
        "code": "    def add_execution(\n        self,\n        graph_id: str,\n        data: BlockInput,\n        user_id: str,\n        graph_version: int | None = None,\n    ) -> GraphExecutionEntry:\n        graph: GraphModel | None = self.db_client.get_graph(\n            graph_id=graph_id, user_id=user_id, version=graph_version\n        )\n        if not graph:\n            raise ValueError(f\"Graph #{graph_id} not found.\")\n\n        graph.validate_graph(for_run=True)\n        self._validate_node_input_credentials(graph, user_id)\n\n        nodes_input = []\n        for node in graph.starting_nodes:\n            input_data = {}\n            block = get_block(node.block_id)\n\n            # Invalid block & Note block should never be executed.\n            if not block or block.block_type == BlockType.NOTE:\n                continue\n\n            # Extract request input data, and assign it to the input pin.\n            if block.block_type == BlockType.INPUT:\n                name = node.input_default.get(\"name\")\n                if name and name in data:\n                    input_data = {\"value\": data[name]}\n\n            # Extract webhook payload, and assign it to the input pin\n            webhook_payload_key = f\"webhook_{node.webhook_id}_payload\"\n            if (\n                block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):\n                if webhook_payload_key not in data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data = {\"payload\": data[webhook_payload_key]}\n\n            input_data, error = validate_exec(node, input_data)\n            if input_data is None:\n                raise ValueError(error)\n            else:\n                nodes_input.append((node.id, input_data))\n\n        graph_exec_id, node_execs = self.db_client.create_graph_execution(\n            graph_id=graph_id,\n            graph_version=graph.version,\n            nodes_input=nodes_input,\n            user_id=user_id,\n        )\n\n        starting_node_execs = []\n        for node_exec in node_execs:\n            starting_node_execs.append(\n                NodeExecutionEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exec_update = self.db_client.update_execution_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.send_execution_update(exec_update)\n\n        graph_exec = GraphExecutionEntry(\n            user_id=user_id,\n            graph_id=graph_id,\n            graph_exec_id=graph_exec_id,\n            start_node_execs=starting_node_execs,\n        )\n        self.queue.add(graph_exec)\n\n        return graph_exec\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExecutionManager.add_execution_1",
              "code": "def add_execution(\n        self,\n        graph_id: str,\n        data: BlockInput,\n        user_id: str,\n        graph_version: int | None = None,\n    ) -> GraphExecutionEntry:\n"
            },
            {
              "id": "ExecutionManager.add_execution_2",
              "code": "        graph: GraphModel | None = self.db_client.get_graph(\n            graph_id=graph_id, user_id=user_id, version=graph_version\n        )\n"
            },
            {
              "id": "ExecutionManager.add_execution_3",
              "code": "        if not graph:\n            raise ValueError(f\"Graph #{graph_id} not found.\")\n"
            },
            {
              "id": "ExecutionManager.add_execution_4",
              "code": "        graph.validate_graph(for_run=True)\n        self._validate_node_input_credentials(graph, user_id)\n"
            },
            {
              "id": "ExecutionManager.add_execution_5",
              "code": "        nodes_input = []\n"
            },
            {
              "id": "ExecutionManager.add_execution_6",
              "code": "        for node in graph.starting_nodes:\n            input_data = {}\n            block = get_block(node.block_id)\n"
            },
            {
              "id": "ExecutionManager.add_execution_7",
              "code": "            if not block or block.block_type == BlockType.NOTE:\n                continue\n"
            },
            {
              "id": "ExecutionManager.add_execution_8",
              "code": "            if block.block_type == BlockType.INPUT:\n                name = node.input_default.get(\"name\")\n                if name and name in data:\n                    input_data = {\"value\": data[name]}\n"
            },
            {
              "id": "ExecutionManager.add_execution_9",
              "code": "            webhook_payload_key = f\"webhook_{node.webhook_id}_payload\"\n            if (\n                block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):\n                if webhook_payload_key not in data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data = {\"payload\": data[webhook_payload_key]}\n"
            },
            {
              "id": "ExecutionManager.add_execution_10",
              "code": "            input_data, error = validate_exec(node, input_data)\n            if input_data is None:\n                raise ValueError(error)\n"
            },
            {
              "id": "ExecutionManager.add_execution_11",
              "code": "                nodes_input.append((node.id, input_data))\n"
            },
            {
              "id": "ExecutionManager.add_execution_12",
              "code": "        graph_exec_id, node_execs = self.db_client.create_graph_execution(\n            graph_id=graph_id,\n            graph_version=graph.version,\n            nodes_input=nodes_input,\n            user_id=user_id,\n        )\n"
            },
            {
              "id": "ExecutionManager.add_execution_13",
              "code": "        starting_node_execs = []\n"
            },
            {
              "id": "ExecutionManager.add_execution_14",
              "code": "        for node_exec in node_execs:\n            starting_node_execs.append(\n                NodeExecutionEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n"
            },
            {
              "id": "ExecutionManager.add_execution_15",
              "code": "            exec_update = self.db_client.update_execution_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.send_execution_update(exec_update)\n"
            },
            {
              "id": "ExecutionManager.add_execution_16",
              "code": "        graph_exec = GraphExecutionEntry(\n            user_id=user_id,\n            graph_id=graph_id,\n            graph_exec_id=graph_exec_id,\n            start_node_execs=starting_node_execs,\n        )\n"
            },
            {
              "id": "ExecutionManager.add_execution_17",
              "code": "        self.queue.add(graph_exec)\n"
            },
            {
              "id": "ExecutionManager.add_execution_18",
              "code": "        return graph_exec\n"
            }
          ],
          "edges": [
            {
              "from": "ExecutionManager.add_execution_1",
              "to": "ExecutionManager.add_execution_2"
            },
            {
              "from": "ExecutionManager.add_execution_2",
              "to": "ExecutionManager.add_execution_3"
            },
            {
              "from": "ExecutionManager.add_execution_3",
              "to": "ExecutionManager.add_execution_4"
            },
            {
              "from": "ExecutionManager.add_execution_4",
              "to": "ExecutionManager.add_execution_5"
            },
            {
              "from": "ExecutionManager.add_execution_5",
              "to": "ExecutionManager.add_execution_6"
            },
            {
              "from": "ExecutionManager.add_execution_6",
              "to": "ExecutionManager.add_execution_7"
            },
            {
              "from": "ExecutionManager.add_execution_7",
              "to": "ExecutionManager.add_execution_8"
            },
            {
              "from": "ExecutionManager.add_execution_7",
              "to": "ExecutionManager.add_execution_9"
            },
            {
              "from": "ExecutionManager.add_execution_8",
              "to": "ExecutionManager.add_execution_9"
            },
            {
              "from": "ExecutionManager.add_execution_9",
              "to": "ExecutionManager.add_execution_10"
            },
            {
              "from": "ExecutionManager.add_execution_10",
              "to": "ExecutionManager.add_execution_11"
            },
            {
              "from": "ExecutionManager.add_execution_11",
              "to": "ExecutionManager.add_execution_6"
            },
            {
              "from": "ExecutionManager.add_execution_12",
              "to": "ExecutionManager.add_execution_13"
            },
            {
              "from": "ExecutionManager.add_execution_13",
              "to": "ExecutionManager.add_execution_14"
            },
            {
              "from": "ExecutionManager.add_execution_14",
              "to": "ExecutionManager.add_execution_15"
            },
            {
              "from": "ExecutionManager.add_execution_15",
              "to": "ExecutionManager.add_execution_14"
            },
            {
              "from": "ExecutionManager.add_execution_16",
              "to": "ExecutionManager.add_execution_17"
            },
            {
              "from": "ExecutionManager.add_execution_17",
              "to": "ExecutionManager.add_execution_18"
            }
          ]
        }
      },
      {
        "decl_name": "ExecutionManager.cancel_execution",
        "start_line": 850,
        "end_line": 885,
        "children": [],
        "code": "    def cancel_execution(self, graph_exec_id: str) -> None:\n        \"\"\"\n        Mechanism:\n        1. Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n        if graph_exec_id not in self.active_graph_runs:\n            raise Exception(\n                f\"Graph execution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future, cancel_event = self.active_graph_runs[graph_exec_id]\n        if cancel_event.is_set():\n            return\n\n        cancel_event.set()\n        future.result()\n\n        # Update the status of the unfinished node executions\n        node_execs = self.db_client.get_execution_results(graph_exec_id)\n        for node_exec in node_execs:\n            if node_exec.status not in (\n                ExecutionStatus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_client.upsert_execution_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update = self.db_client.update_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_client.send_execution_update(exec_update)\n\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExecutionManager.cancel_execution_1",
              "code": "def cancel_execution(self, graph_exec_id: str) -> None:\n        \"\"\"\n        Mechanism:\n        1. Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n"
            },
            {
              "id": "ExecutionManager.cancel_execution_2",
              "code": "        if graph_exec_id not in self.active_graph_runs:\n            raise Exception(\n                f\"Graph execution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n"
            },
            {
              "id": "ExecutionManager.cancel_execution_3",
              "code": "        future, cancel_event = self.active_graph_runs[graph_exec_id]\n        if cancel_event.is_set():\n            return\n"
            },
            {
              "id": "ExecutionManager.cancel_execution_4",
              "code": "        cancel_event.set()\n        future.result()\n"
            },
            {
              "id": "ExecutionManager.cancel_execution_5",
              "code": "        node_execs = self.db_client.get_execution_results(graph_exec_id)\n        for node_exec in node_execs:\n            if node_exec.status not in (\n                ExecutionStatus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_client.upsert_execution_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update = self.db_client.update_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_client.send_execution_update(exec_update)\n"
            }
          ],
          "edges": [
            {
              "from": "ExecutionManager.cancel_execution_1",
              "to": "ExecutionManager.cancel_execution_2"
            },
            {
              "from": "ExecutionManager.cancel_execution_2",
              "to": "ExecutionManager.cancel_execution_3"
            },
            {
              "from": "ExecutionManager.cancel_execution_3",
              "to": "ExecutionManager.cancel_execution_4"
            },
            {
              "from": "ExecutionManager.cancel_execution_4",
              "to": "ExecutionManager.cancel_execution_5"
            }
          ]
        }
      },
      {
        "decl_name": "ExecutionManager._validate_node_input_credentials",
        "start_line": 886,
        "end_line": 929,
        "children": [],
        "code": "    def _validate_node_input_credentials(self, graph: GraphModel, user_id: str):\n        \"\"\"Checks all credentials for all nodes of the graph\"\"\"\n\n        for node in graph.nodes:\n            block = get_block(node.block_id)\n            if not block:\n                raise ValueError(f\"Unknown block {node.block_id} for node #{node.id}\")\n\n            # Find any fields of type CredentialsMetaInput\n            model_fields = cast(type[BaseModel], block.input_schema).model_fields\n            if CREDENTIALS_FIELD_NAME not in model_fields:\n                continue\n\n            field = model_fields[CREDENTIALS_FIELD_NAME]\n\n            # The BlockSchema class enforces that a `credentials` field is always a\n            # `CredentialsMetaInput`, so we can safely assume this here.\n            credentials_meta_type = cast(CredentialsMetaInput, field.annotation)\n            credentials_meta = credentials_meta_type.model_validate(\n                node.input_default[CREDENTIALS_FIELD_NAME]\n            )\n            # Fetch the corresponding Credentials and perform sanity checks\n            credentials = self.credentials_store.get_creds_by_id(\n                user_id, credentials_meta.id\n            )\n            if not credentials:\n                raise ValueError(\n                    f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (\n                credentials.provider != credentials_meta.provider\n                or credentials.type != credentials_meta.type\n            ):\n                logger.warning(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueError(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExecutionManager._validate_node_input_credentials_1",
              "code": "def _validate_node_input_credentials(self, graph: GraphModel, user_id: str):\n        \"\"\"Checks all credentials for all nodes of the graph\"\"\"\n\n"
            },
            {
              "id": "ExecutionManager._validate_node_input_credentials_2",
              "code": "        for node in graph.nodes:\n            block = get_block(node.block_id)\n            if not block:\n                raise ValueError(f\"Unknown block {node.block_id} for node #{node.id}\")\n"
            },
            {
              "id": "ExecutionManager._validate_node_input_credentials_3",
              "code": "            # Find any fields of type CredentialsMetaInput\n            model_fields = cast(type[BaseModel], block.input_schema).model_fields\n            if CREDENTIALS_FIELD_NAME not in model_fields:\n                continue\n"
            },
            {
              "id": "ExecutionManager._validate_node_input_credentials_4",
              "code": "            field = model_fields[CREDENTIALS_FIELD_NAME]\n\n"
            },
            {
              "id": "ExecutionManager._validate_node_input_credentials_5",
              "code": "            # The BlockSchema class enforces that a `credentials` field is always a\n            # `CredentialsMetaInput`, so we can safely assume this here.\n            credentials_meta_type = cast(CredentialsMetaInput, field.annotation)\n            credentials_meta = credentials_meta_type.model_validate(\n                node.input_default[CREDENTIALS_FIELD_NAME]\n            )\n"
            },
            {
              "id": "ExecutionManager._validate_node_input_credentials_6",
              "code": "            # Fetch the corresponding Credentials and perform sanity checks\n            credentials = self.credentials_store.get_creds_by_id(\n                user_id, credentials_meta.id\n            )\n"
            },
            {
              "id": "ExecutionManager._validate_node_input_credentials_7",
              "code": "            if not credentials:\n                raise ValueError(\n                    f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n"
            },
            {
              "id": "ExecutionManager._validate_node_input_credentials_8",
              "code": "            if (\n                credentials.provider != credentials_meta.provider\n                or credentials.type != credentials_meta.type\n            ):\n"
            },
            {
              "id": "ExecutionManager._validate_node_input_credentials_9",
              "code": "                logger.warning(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n"
            },
            {
              "id": "ExecutionManager._validate_node_input_credentials_10",
              "code": "                raise ValueError(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n"
            }
          ],
          "edges": [
            {
              "from": "ExecutionManager._validate_node_input_credentials_1",
              "to": "ExecutionManager._validate_node_input_credentials_2"
            },
            {
              "from": "ExecutionManager._validate_node_input_credentials_2",
              "to": "ExecutionManager._validate_node_input_credentials_3"
            },
            {
              "from": "ExecutionManager._validate_node_input_credentials_3",
              "to": "ExecutionManager._validate_node_input_credentials_4"
            },
            {
              "from": "ExecutionManager._validate_node_input_credentials_3",
              "to": "ExecutionManager._validate_node_input_credentials_2"
            },
            {
              "from": "ExecutionManager._validate_node_input_credentials_4",
              "to": "ExecutionManager._validate_node_input_credentials_5"
            },
            {
              "from": "ExecutionManager._validate_node_input_credentials_5",
              "to": "ExecutionManager._validate_node_input_credentials_6"
            },
            {
              "from": "ExecutionManager._validate_node_input_credentials_6",
              "to": "ExecutionManager._validate_node_input_credentials_7"
            },
            {
              "from": "ExecutionManager._validate_node_input_credentials_7",
              "to": "ExecutionManager._validate_node_input_credentials_8"
            },
            {
              "from": "ExecutionManager._validate_node_input_credentials_8",
              "to": "ExecutionManager._validate_node_input_credentials_9"
            },
            {
              "from": "ExecutionManager._validate_node_input_credentials_8",
              "to": "ExecutionManager._validate_node_input_credentials_2"
            },
            {
              "from": "ExecutionManager._validate_node_input_credentials_9",
              "to": "ExecutionManager._validate_node_input_credentials_10"
            },
            {
              "from": "ExecutionManager._validate_node_input_credentials_10",
              "to": "ExecutionManager._validate_node_input_credentials_2"
            }
          ]
        }
      }
    ],
    "code": "class ExecutionManager(AppService):\n\n    @classmethod\n\n\n    @property\n\n    @expose\n\n    @expose\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "ExecutionManager_1",
          "code": "class ExecutionManager(AppService):\n"
        },
        {
          "id": "ExecutionManager_2",
          "code": "    @classmethod\n"
        },
        {
          "id": "ExecutionManager_3",
          "code": "    @property\n"
        },
        {
          "id": "ExecutionManager_4",
          "code": "    @expose\n"
        },
        {
          "id": "ExecutionManager_5",
          "code": "    @expose\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "get_db_client",
    "start_line": 935,
    "end_line": 939,
    "children": [],
    "code": "@thread_cached\ndef get_db_client() -> \"DatabaseManager\":\n    from backend.executor import DatabaseManager\n\n    return get_service_client(DatabaseManager)\n",
    "cfg": {
      "nodes": [
        {
          "id": "get_db_client_1",
          "code": "@thread_cached\ndef get_db_client() -> \"DatabaseManager\":\n"
        },
        {
          "id": "get_db_client_2",
          "code": "    from backend.executor import DatabaseManager\n\n    return get_service_client(DatabaseManager)\n"
        }
      ],
      "edges": [
        {
          "from": "get_db_client_1",
          "to": "get_db_client_2"
        }
      ]
    }
  },
  {
    "decl_name": "synchronized",
    "start_line": 942,
    "end_line": 950,
    "children": [],
    "code": "@contextmanager\ndef synchronized(key: str, timeout: int = 60):\n    lock: RedisLock = redis.get_redis().lock(f\"lock:{key}\", timeout=timeout)\n    try:\n        lock.acquire()\n        yield\n    finally:\n        if lock.locked():\n            lock.release()\n",
    "cfg": {
      "nodes": [
        {
          "id": "synchronized_1",
          "code": "@contextmanager\ndef synchronized(key: str, timeout: int = 60):\n    lock: RedisLock = redis.get_redis().lock(f\"lock:{key}\", timeout=timeout)\n"
        },
        {
          "id": "synchronized_2",
          "code": "    try:\n        lock.acquire()\n        yield\n"
        },
        {
          "id": "synchronized_3",
          "code": "    finally:\n        if lock.locked():\n            lock.release()\n"
        }
      ],
      "edges": [
        {
          "from": "synchronized_1",
          "to": "synchronized_2"
        },
        {
          "from": "synchronized_2",
          "to": "synchronized_3"
        }
      ]
    }
  },
  {
    "decl_name": "llprint",
    "start_line": 953,
    "end_line": 959,
    "children": [],
    "code": "def llprint(message: str):\n    \"\"\"\n    Low-level print/log helper function for use in signal handlers.\n    Regular log/print statements are not allowed in signal handlers.\n    \"\"\"\n    if logger.getEffectiveLevel() == logging.DEBUG:\n        os.write(sys.stdout.fileno(), (message + \"\\n\").encode())\n",
    "cfg": {
      "nodes": [
        {
          "id": "llprint_1",
          "code": "def llprint(message: str):\n    \"\"\"\n    Low-level print/log helper function for use in signal handlers.\n    Regular log/print statements are not allowed in signal handlers.\n    \"\"\"\n"
        },
        {
          "id": "llprint_2",
          "code": "    if logger.getEffectiveLevel() == logging.DEBUG:\n        os.write(sys.stdout.fileno(), (message + \"\\n\").encode())\n"
        }
      ],
      "edges": [
        {
          "from": "llprint_1",
          "to": "llprint_2"
        }
      ]
    }
  }
]