{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 190,
  "functions": [],
  "classes": [
    {
      "name": "ProgrammingLanguage",
      "type": "class",
      "start_line": 31,
      "end_line": 36,
      "functions": [],
      "classes": [],
      "simplified_code": "class ProgrammingLanguage(Enum):\n    PYTHON = \"python\"\n    JAVASCRIPT = \"js\"\n    BASH = \"bash\"\n    R = \"r\"\n    JAVA = \"java\"",
      "blocks": [
        {
          "id": 1,
          "label": "class ProgrammingLanguage(Enum):",
          "successors": [
            {
              "id": 2,
              "label": "    PYTHON = \"python\"",
              "successors": [
                {
                  "id": 3,
                  "label": "    JAVASCRIPT = \"js\"",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    BASH = \"bash\"",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    R = \"r\"",
                          "successors": [
                            {
                              "id": 6,
                              "label": "    JAVA = \"java\"",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "CodeExecutionBlock",
      "type": "class",
      "start_line": 39,
      "end_line": 190,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 97,
          "end_line": 124,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"0b02b072-abe7-11ef-8372-fb5d162dd712\",\n            description=\"Executes code in an isolated sandbox environment with internet access.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=CodeExecutionBlock.Input,\n            output_schema=CodeExecutionBlock.Output,\n            test_credentials=TEST_CREDENTIALS,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"code\": \"print('Hello World')\",\n                \"language\": ProgrammingLanguage.PYTHON.value,\n                \"setup_commands\": [],\n                \"timeout\": 300,\n                \"template_id\": \"\",\n            },\n            test_output=[\n                (\"response\", \"Hello World\"),\n                (\"stdout_logs\", \"Hello World\\n\"),\n            ],\n            test_mock={\n                \"execute_code\": lambda code, language, setup_commands, timeout, api_key, template_id: (\n                    \"Hello World\",\n                    \"Hello World\\n\",\n                    \"\",\n                ),\n            },\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "    super().__init__(\n        id=\"0b02b072-abe7-11ef-8372-fb5d162dd712\",\n        description=\"Executes code in an isolated sandbox environment with internet access.\",\n        categories={BlockCategory.DEVELOPER_TOOLS},\n        input_schema=CodeExecutionBlock.Input,\n        output_schema=CodeExecutionBlock.Output,\n        test_credentials=TEST_CREDENTIALS,\n        test_input={\n            \"credentials\": TEST_CREDENTIALS_INPUT,\n            \"code\": \"print('Hello World')\",\n            \"language\": ProgrammingLanguage.PYTHON.value,\n            \"setup_commands\": [],\n            \"timeout\": 300,\n            \"template_id\": \"\",\n        },\n        test_output=[\n            (\"response\", \"Hello World\"),\n            (\"stdout_logs\", \"Hello World\\n\"),\n        ],\n        test_mock={\n            \"execute_code\": lambda code, language, setup_commands, timeout, api_key, template_id: (\n                \"Hello World\",\n                \"Hello World\\n\",\n                \"\",\n            ),\n        },\n    )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "execute_code",
          "type": "function",
          "start_line": 126,
          "end_line": 168,
          "functions": [],
          "classes": [],
          "simplified_code": "    def execute_code(\n        self,\n        code: str,\n        language: ProgrammingLanguage,\n        setup_commands: list[str],\n        timeout: int,\n        api_key: str,\n        template_id: str,\n    ):\n        try:\n            sandbox = None\n            if template_id:\n                sandbox = Sandbox(\n                    template=template_id, api_key=api_key, timeout=timeout\n                )\n            else:\n                sandbox = Sandbox(api_key=api_key, timeout=timeout)\n\n            if not sandbox:\n                raise Exception(\"Sandbox not created\")\n\n            # Running setup commands\n            for cmd in setup_commands:\n                sandbox.commands.run(cmd)\n\n            # Executing the code\n            execution = sandbox.run_code(\n                code,\n                language=language.value,\n                on_error=lambda e: sandbox.kill(),  # Kill the sandbox if there is an error\n            )\n\n            if execution.error:\n                raise Exception(execution.error)\n\n            response = execution.text\n            stdout_logs = \"\".join(execution.logs.stdout)\n            stderr_logs = \"\".join(execution.logs.stderr)\n\n            return response, stdout_logs, stderr_logs\n\n        except Exception as e:\n            raise e",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                {
                  "id": 2,
                  "label": "sandbox = None",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if template_id:",
                      "successors": [
                        {
                          "id": 4,
                          "label": "sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)",
                          "successors": [
                            {
                              "id": 7,
                              "label": "if not sandbox:",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "raise Exception(\"Sandbox not created\")",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "for cmd in setup_commands:",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "sandbox.commands.run(cmd)",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "label": "if execution.error:",
                                                  "successors": [
                                                    {
                                                      "id": 13,
                                                      "label": "raise Exception(execution.error)",
                                                      "successors": [
                                                        {
                                                          "id": 14,
                                                          "label": "response = execution.text",
                                                          "successors": [
                                                            {
                                                              "id": 15,
                                                              "label": "stdout_logs = \"\".join(execution.logs.stdout)",
                                                              "successors": [
                                                                {
                                                                  "id": 16,
                                                                  "label": "stderr_logs = \"\".join(execution.logs.stderr)",
                                                                  "successors": [
                                                                    {
                                                                      "id": 17,
                                                                      "label": "return response, stdout_logs, stderr_logs",
                                                                      "successors": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 14,
                                                      "label": "response = execution.text",
                                                      "successors": [
                                                        {
                                                          "id": 15,
                                                          "label": "stdout_logs = \"\".join(execution.logs.stdout)",
                                                          "successors": [
                                                            {
                                                              "id": 16,
                                                              "label": "stderr_logs = \"\".join(execution.logs.stderr)",
                                                              "successors": [
                                                                {
                                                                  "id": 17,
                                                                  "label": "return response, stdout_logs, stderr_logs",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 9,
                                  "label": "for cmd in setup_commands:",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "sandbox.commands.run(cmd)",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": "execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())",
                                          "successors": [
                                            {
                                              "id": 12,
                                              "label": "if execution.error:",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "raise Exception(execution.error)",
                                                  "successors": [
                                                    {
                                                      "id": 14,
                                                      "label": "response = execution.text",
                                                      "successors": [
                                                        {
                                                          "id": 15,
                                                          "label": "stdout_logs = \"\".join(execution.logs.stdout)",
                                                          "successors": [
                                                            {
                                                              "id": 16,
                                                              "label": "stderr_logs = \"\".join(execution.logs.stderr)",
                                                              "successors": [
                                                                {
                                                                  "id": 17,
                                                                  "label": "return response, stdout_logs, stderr_logs",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 14,
                                                  "label": "response = execution.text",
                                                  "successors": [
                                                    {
                                                      "id": 15,
                                                      "label": "stdout_logs = \"\".join(execution.logs.stdout)",
                                                      "successors": [
                                                        {
                                                          "id": 16,
                                                          "label": "stderr_logs = \"\".join(execution.logs.stderr)",
                                                          "successors": [
                                                            {
                                                              "id": 17,
                                                              "label": "return response, stdout_logs, stderr_logs",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "sandbox = Sandbox(api_key=api_key, timeout=timeout)",
                          "successors": [
                            {
                              "id": 7,
                              "label": "if not sandbox:",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "raise Exception(\"Sandbox not created\")",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "for cmd in setup_commands:",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "sandbox.commands.run(cmd)",
                                          "successors": [
                                            {
                                              "id": 11,
                                              "label": "execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())",
                                              "successors": [
                                                {
                                                  "id": 12,
                                                  "label": "if execution.error:",
                                                  "successors": [
                                                    {
                                                      "id": 13,
                                                      "label": "raise Exception(execution.error)",
                                                      "successors": [
                                                        {
                                                          "id": 14,
                                                          "label": "response = execution.text",
                                                          "successors": [
                                                            {
                                                              "id": 15,
                                                              "label": "stdout_logs = \"\".join(execution.logs.stdout)",
                                                              "successors": [
                                                                {
                                                                  "id": 16,
                                                                  "label": "stderr_logs = \"\".join(execution.logs.stderr)",
                                                                  "successors": [
                                                                    {
                                                                      "id": 17,
                                                                      "label": "return response, stdout_logs, stderr_logs",
                                                                      "successors": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 14,
                                                      "label": "response = execution.text",
                                                      "successors": [
                                                        {
                                                          "id": 15,
                                                          "label": "stdout_logs = \"\".join(execution.logs.stdout)",
                                                          "successors": [
                                                            {
                                                              "id": 16,
                                                              "label": "stderr_logs = \"\".join(execution.logs.stderr)",
                                                              "successors": [
                                                                {
                                                                  "id": 17,
                                                                  "label": "return response, stdout_logs, stderr_logs",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 9,
                                  "label": "for cmd in setup_commands:",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "sandbox.commands.run(cmd)",
                                      "successors": [
                                        {
                                          "id": 11,
                                          "label": "execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())",
                                          "successors": [
                                            {
                                              "id": 12,
                                              "label": "if execution.error:",
                                              "successors": [
                                                {
                                                  "id": 13,
                                                  "label": "raise Exception(execution.error)",
                                                  "successors": [
                                                    {
                                                      "id": 14,
                                                      "label": "response = execution.text",
                                                      "successors": [
                                                        {
                                                          "id": 15,
                                                          "label": "stdout_logs = \"\".join(execution.logs.stdout)",
                                                          "successors": [
                                                            {
                                                              "id": 16,
                                                              "label": "stderr_logs = \"\".join(execution.logs.stderr)",
                                                              "successors": [
                                                                {
                                                                  "id": 17,
                                                                  "label": "return response, stdout_logs, stderr_logs",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 14,
                                                  "label": "response = execution.text",
                                                  "successors": [
                                                    {
                                                      "id": 15,
                                                      "label": "stdout_logs = \"\".join(execution.logs.stdout)",
                                                      "successors": [
                                                        {
                                                          "id": 16,
                                                          "label": "stderr_logs = \"\".join(execution.logs.stderr)",
                                                          "successors": [
                                                            {
                                                              "id": 17,
                                                              "label": "return response, stdout_logs, stderr_logs",
                                                              "successors": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 18,
              "label": "except Exception as e:",
              "successors": [
                {
                  "id": 19,
                  "label": "raise e",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 170,
          "end_line": 190,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            response, stdout_logs, stderr_logs = self.execute_code(\n                input_data.code,\n                input_data.language,\n                input_data.setup_commands,\n                input_data.timeout,\n                credentials.api_key.get_secret_value(),\n                input_data.template_id,\n            )\n\n            if response:\n                yield \"response\", response\n            if stdout_logs:\n                yield \"stdout_logs\", stdout_logs\n            if stderr_logs:\n                yield \"stderr_logs\", stderr_logs\n        except Exception as e:\n            yield \"error\", str(e)",
          "blocks": [
            {
              "id": 1,
              "label": "try:",
              "successors": [
                {
                  "id": 2,
                  "label": "response, stdout_logs, stderr_logs = self.execute_code(\n    input_data.code,\n    input_data.language,\n    input_data.setup_commands,\n    input_data.timeout,\n    credentials.api_key.get_secret_value(),\n    input_data.template_id,\n)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if response:",
                      "successors": [
                        {
                          "id": 4,
                          "label": "yield \"response\", response",
                          "successors": [
                            {
                              "id": 8,
                              "label": "except Exception as e:",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "yield \"error\", str(e)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "if stdout_logs:",
                          "successors": [
                            {
                              "id": 6,
                              "label": "yield \"stdout_logs\", stdout_logs",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "except Exception as e:",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "yield \"error\", str(e)",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "if stderr_logs:",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "yield \"stderr_logs\", stderr_logs",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "except Exception as e:",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "yield \"error\", str(e)",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 42,
          "end_line": 87,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.E2B], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs\",\n        )\n\n        # Todo : Option to run commond in background\n        setup_commands: list[str] = SchemaField(\n            description=(\n                \"Shell commands to set up the sandbox before running the code. \"\n                \"You can use `curl` or `git` to install your desired Debian based \"\n                \"package manager. `pip` and `npm` are pre-installed.\\n\\n\"\n                \"These commands are executed with `sh`, in the foreground.\"\n            ),\n            placeholder=\"pip install cowsay\",\n            default=[],\n            advanced=False,\n        )\n\n        code: str = SchemaField(\n            description=\"Code to execute in the sandbox\",\n            placeholder=\"print('Hello, World!')\",\n            default=\"\",\n            advanced=False,\n        )\n\n        language: ProgrammingLanguage = SchemaField(\n            description=\"Programming language to execute\",\n            default=ProgrammingLanguage.PYTHON,\n            advanced=False,\n        )\n\n        timeout: int = SchemaField(\n            description=\"Execution timeout in seconds\", default=300\n        )\n\n        template_id: str = SchemaField(\n            description=(\n                \"You can use an E2B sandbox template by entering its ID here. \"\n                \"Check out the E2B docs for more details: \"\n                \"[E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)\"\n            ),\n            default=\"\",\n            advanced=True,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    credentials: CredentialsMetaInput[\n        Literal[ProviderName.E2B], Literal[\"api_key\"]\n    ] = CredentialsField(\n        description=\"Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs\",\n    )",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    setup_commands: list[str] = SchemaField(\n        description=(\n            \"Shell commands to set up the sandbox before running the code. \"\n            \"You can use `curl` or `git` to install your desired Debian based \"\n            \"package manager. `pip` and `npm` are pre-installed.\\n\\n\"\n            \"These commands are executed with `sh`, in the foreground.\"\n        ),\n        placeholder=\"pip install cowsay\",\n        default=[],\n        advanced=False,\n    )",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "    code: str = SchemaField(\n        description=\"Code to execute in the sandbox\",\n        placeholder=\"print('Hello, World!')\",\n        default=\"\",\n        advanced=False,\n    )",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "    language: ProgrammingLanguage = SchemaField(\n        description=\"Programming language to execute\",\n        default=ProgrammingLanguage.PYTHON,\n        advanced=False,\n    )",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "    timeout: int = SchemaField(\n        description=\"Execution timeout in seconds\", default=300\n    )",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "    template_id: str = SchemaField(\n        description=(\n            \"You can use an E2B sandbox template by entering its ID here. \"\n            \"Check out the E2B docs for more details: \"\n            \"[E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)\"\n        ),\n        default=\"\",\n        advanced=True,\n    )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 89,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        response: str = SchemaField(description=\"Response from code execution\")\n        stdout_logs: str = SchemaField(\n            description=\"Standard output logs from execution\"\n        )\n        stderr_logs: str = SchemaField(description=\"Standard error logs from execution\")\n        error: str = SchemaField(description=\"Error message if execution failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "response: str = SchemaField(description=\"Response from code execution\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "stdout_logs: str = SchemaField(description=\"Standard output logs from execution\")",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "stderr_logs: str = SchemaField(description=\"Standard error logs from execution\")",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "error: str = SchemaField(description=\"Error message if execution failed\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class CodeExecutionBlock(Block):\n    # TODO : Add support to upload and download files\n    # Currently, You can customized the CPU and Memory, only by creating a pre customized sandbox template\n        )\n\n        error: str = SchemaField(description=\"Error message if execution failed\")\n\n        )\n\n            raise e\n\n            yield \"error\", str(e)",
      "blocks": [
        {
          "id": 1,
          "label": "class CodeExecutionBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "# TODO : Add support to upload and download files\n# Currently, You can customized the CPU and Memory, only by creating a pre customized sandbox template\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "error: str = SchemaField(description=\"Error message if execution failed\")",
                  "successors": [
                    {
                      "id": 4,
                      "label": ")",
                      "successors": [
                        {
                          "id": 5,
                          "label": "raise e",
                          "successors": [
                            {
                              "id": 6,
                              "label": "yield \"error\", str(e)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "from enum import Enum\nfrom typing import Literal\n\nfrom e2b_code_interpreter import Sandbox\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"e2b\",\n    api_key=SecretStr(\"mock-e2b-api-key\"),\n    title=\"Mock E2B API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n    JAVA = \"java\"\n\n\n            yield \"error\", str(e)",
  "blocks": [
    {
      "id": 1,
      "label": "from enum import Enum\nfrom typing import Literal\n\nfrom e2b_code_interpreter import Sandbox\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"e2b\",\n    api_key=SecretStr(\"mock-e2b-api-key\"),\n    title=\"Mock E2B API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
      "successors": []
    }
  ]
}