[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 16,
    "children": [],
    "code": "import logging\n\nfrom autogpt_libs.utils.cache import thread_cached\n\nfrom backend.data.block import (\n    Block,\n    BlockCategory,\n    BlockInput,\n    BlockOutput,\n    BlockSchema,\n    BlockType,\n    get_block,\n)\nfrom backend.data.execution import ExecutionStatus\nfrom backend.data.model import SchemaField\n\nlogger = logging.getLogger(__name__)\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import logging\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from autogpt_libs.utils.cache import thread_cached\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.block import (\n    Block,\n    BlockCategory,\n    BlockInput,\n    BlockOutput,\n    BlockSchema,\n    BlockType,\n    get_block,\n)\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "from backend.data.execution import ExecutionStatus\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "from backend.data.model import SchemaField\n"
        },
        {
          "id": "GlobalBlock_6",
          "code": "logger = logging.getLogger(__name__)\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        },
        {
          "from": "GlobalBlock_5",
          "to": "GlobalBlock_6"
        }
      ]
    }
  },
  {
    "decl_name": "get_executor_manager_client",
    "start_line": 19,
    "end_line": 24,
    "children": [],
    "code": "@thread_cached\ndef get_executor_manager_client():\n    from backend.executor import ExecutionManager\n    from backend.util.service import get_service_client\n\n    return get_service_client(ExecutionManager)\n",
    "cfg": {
      "nodes": [
        {
          "id": "get_executor_manager_client_1",
          "code": "@thread_cached\n"
        },
        {
          "id": "get_executor_manager_client_2",
          "code": "def get_executor_manager_client():\n    from backend.executor import ExecutionManager\n    from backend.util.service import get_service_client\n\n    return get_service_client(ExecutionManager)\n"
        }
      ],
      "edges": [
        {
          "from": "get_executor_manager_client_1",
          "to": "get_executor_manager_client_2"
        }
      ]
    }
  },
  {
    "decl_name": "get_event_bus",
    "start_line": 27,
    "end_line": 31,
    "children": [],
    "code": "@thread_cached\ndef get_event_bus():\n    from backend.data.execution import RedisExecutionEventBus\n\n    return RedisExecutionEventBus()\n",
    "cfg": {
      "nodes": [
        {
          "id": "get_event_bus_1",
          "code": "@thread_cached\n"
        },
        {
          "id": "get_event_bus_2",
          "code": "def get_event_bus():\n    from backend.data.execution import RedisExecutionEventBus\n\n    return RedisExecutionEventBus()\n"
        }
      ],
      "edges": [
        {
          "from": "get_event_bus_1",
          "to": "get_event_bus_2"
        }
      ]
    }
  },
  {
    "decl_name": "AgentExecutorBlock",
    "start_line": 34,
    "end_line": 99,
    "children": [
      {
        "decl_name": "AgentExecutorBlock.Input",
        "start_line": 35,
        "end_line": 42,
        "children": [],
        "code": "    class Input(BlockSchema):\n        user_id: str = SchemaField(description=\"User ID\")\n        graph_id: str = SchemaField(description=\"Graph ID\")\n        graph_version: int = SchemaField(description=\"Graph Version\")\n\n        data: BlockInput = SchemaField(description=\"Input data for the graph\")\n        input_schema: dict = SchemaField(description=\"Input schema for the graph\")\n        output_schema: dict = SchemaField(description=\"Output schema for the graph\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "AgentExecutorBlock.Input_1",
              "code": "class Input(BlockSchema):\n        user_id: str = SchemaField(description=\"User ID\")\n        graph_id: str = SchemaField(description=\"Graph ID\")\n        graph_version: int = SchemaField(description=\"Graph Version\")\n\n        data: BlockInput = SchemaField(description=\"Input data for the graph\")\n        input_schema: dict = SchemaField(description=\"Input schema for the graph\")\n        output_schema: dict = SchemaField(description=\"Output schema for the graph\")\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AgentExecutorBlock.Output",
        "start_line": 44,
        "end_line": 45,
        "children": [],
        "code": "    class Output(BlockSchema):\n        pass\n",
        "cfg": {
          "nodes": [
            {
              "id": "AgentExecutorBlock.Output_1",
              "code": "class Output(BlockSchema):\n        pass\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AgentExecutorBlock.__init__",
        "start_line": 47,
        "end_line": 55,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "AgentExecutorBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"e189baac-8c20-45a1-94a7-55177ea42565\",\n            description=\"Executes an existing agent inside your agent\",\n            input_schema=AgentExecutorBlock.Input,\n            output_schema=AgentExecutorBlock.Output,\n            block_type=BlockType.AGENT,\n            categories={BlockCategory.AGENT},\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AgentExecutorBlock.run",
        "start_line": 57,
        "end_line": 99,
        "children": [],
        "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        executor_manager = get_executor_manager_client()\n        event_bus = get_event_bus()\n\n        graph_exec = executor_manager.add_execution(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )\n        log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\n        logger.info(f\"Starting execution of {log_id}\")\n\n        for event in event_bus.listen(\n            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n        ):\n            logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )\n\n            if not event.node_id:\n                if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue\n\n            if not event.block_id:\n                logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue\n\n            block = get_block(event.block_id)\n            if not block or block.block_type != BlockType.OUTPUT:\n                continue\n\n            output_name = event.input_data.get(\"name\")\n            if not output_name:\n                logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue\n\n            for output_data in event.output_data.get(\"output\", []):\n                logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n                yield output_name, output_data\n",
        "cfg": {
          "nodes": [
            {
              "id": "AgentExecutorBlock.run_1",
              "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        executor_manager = get_executor_manager_client()\n        event_bus = get_event_bus()\n"
            },
            {
              "id": "AgentExecutorBlock.run_2",
              "code": "        graph_exec = executor_manager.add_execution(\n            graph_id=input_data.graph_id,\n            graph_version=input_data.graph_version,\n            user_id=input_data.user_id,\n            data=input_data.data,\n        )\n"
            },
            {
              "id": "AgentExecutorBlock.run_3",
              "code": "        log_id = f\"Graph #{input_data.graph_id}-V{input_data.graph_version}, exec-id: {graph_exec.graph_exec_id}\"\n        logger.info(f\"Starting execution of {log_id}\")\n"
            },
            {
              "id": "AgentExecutorBlock.run_4",
              "code": "        for event in event_bus.listen(\n            graph_id=graph_exec.graph_id, graph_exec_id=graph_exec.graph_exec_id\n        ):\n"
            },
            {
              "id": "AgentExecutorBlock.run_5",
              "code": "            logger.info(\n                f\"Execution {log_id} produced input {event.input_data} output {event.output_data}\"\n            )\n"
            },
            {
              "id": "AgentExecutorBlock.run_6",
              "code": "            if not event.node_id:\n                if event.status in [ExecutionStatus.COMPLETED, ExecutionStatus.FAILED]:\n                    logger.info(f\"Execution {log_id} ended with status {event.status}\")\n                    break\n                else:\n                    continue\n"
            },
            {
              "id": "AgentExecutorBlock.run_7",
              "code": "            if not event.block_id:\n                logger.warning(f\"{log_id} received event without block_id {event}\")\n                continue\n"
            },
            {
              "id": "AgentExecutorBlock.run_8",
              "code": "            block = get_block(event.block_id)\n            if not block or block.block_type != BlockType.OUTPUT:\n                continue\n"
            },
            {
              "id": "AgentExecutorBlock.run_9",
              "code": "            output_name = event.input_data.get(\"name\")\n            if not output_name:\n                logger.warning(f\"{log_id} produced an output with no name {event}\")\n                continue\n"
            },
            {
              "id": "AgentExecutorBlock.run_10",
              "code": "            for output_data in event.output_data.get(\"output\", []):\n                logger.info(f\"Execution {log_id} produced {output_name}: {output_data}\")\n                yield output_name, output_data\n"
            }
          ],
          "edges": [
            {
              "from": "AgentExecutorBlock.run_1",
              "to": "AgentExecutorBlock.run_2"
            },
            {
              "from": "AgentExecutorBlock.run_2",
              "to": "AgentExecutorBlock.run_3"
            },
            {
              "from": "AgentExecutorBlock.run_3",
              "to": "AgentExecutorBlock.run_4"
            },
            {
              "from": "AgentExecutorBlock.run_4",
              "to": "AgentExecutorBlock.run_5"
            },
            {
              "from": "AgentExecutorBlock.run_5",
              "to": "AgentExecutorBlock.run_6"
            },
            {
              "from": "AgentExecutorBlock.run_6",
              "to": "AgentExecutorBlock.run_7"
            },
            {
              "from": "AgentExecutorBlock.run_6",
              "to": "AgentExecutorBlock.run_4"
            },
            {
              "from": "AgentExecutorBlock.run_7",
              "to": "AgentExecutorBlock.run_8"
            },
            {
              "from": "AgentExecutorBlock.run_7",
              "to": "AgentExecutorBlock.run_4"
            },
            {
              "from": "AgentExecutorBlock.run_8",
              "to": "AgentExecutorBlock.run_9"
            },
            {
              "from": "AgentExecutorBlock.run_8",
              "to": "AgentExecutorBlock.run_4"
            },
            {
              "from": "AgentExecutorBlock.run_9",
              "to": "AgentExecutorBlock.run_10"
            },
            {
              "from": "AgentExecutorBlock.run_9",
              "to": "AgentExecutorBlock.run_4"
            },
            {
              "from": "AgentExecutorBlock.run_10",
              "to": "AgentExecutorBlock.run_4"
            }
          ]
        }
      }
    ],
    "code": "class AgentExecutorBlock(Block):\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "AgentExecutorBlock_1",
          "code": "class AgentExecutorBlock(Block):\n"
        }
      ],
      "edges": []
    }
  }
]