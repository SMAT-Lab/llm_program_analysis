[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 10,
    "children": [],
    "code": "import time\nfrom datetime import datetime, timedelta, timezone\nfrom typing import Any\n\nimport feedparser\nimport pydantic\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import time\nfrom datetime import datetime, timedelta, timezone\nfrom typing import Any\n\nimport feedparser\nimport pydantic\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "RSSEntry",
    "start_line": 11,
    "end_line": 17,
    "children": [],
    "code": "class RSSEntry(pydantic.BaseModel):\n    title: str\n    link: str\n    description: str\n    pub_date: datetime\n    author: str\n    categories: list[str]\n",
    "cfg": {
      "nodes": [
        {
          "id": "RSSEntry_1",
          "code": "class RSSEntry(pydantic.BaseModel):\n    title: str\n    link: str\n    description: str\n    pub_date: datetime\n    author: str\n    categories: list[str]\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "ReadRSSFeedBlock",
    "start_line": 20,
    "end_line": 115,
    "children": [
      {
        "decl_name": "ReadRSSFeedBlock.Input",
        "start_line": 21,
        "end_line": 38,
        "children": [],
        "code": "    class Input(BlockSchema):\n        rss_url: str = SchemaField(\n            description=\"The URL of the RSS feed to read\",\n            placeholder=\"https://example.com/rss\",\n        )\n        time_period: int = SchemaField(\n            description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\",\n            placeholder=\"1440\",\n            default=1440,\n        )\n        polling_rate: int = SchemaField(\n            description=\"The number of seconds to wait between polling attempts.\",\n            placeholder=\"300\",\n        )\n        run_continuously: bool = SchemaField(\n            description=\"Whether to run the block continuously or just once.\",\n            default=True,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "ReadRSSFeedBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "ReadRSSFeedBlock.Input_2",
              "code": "        rss_url: str = SchemaField(\n            description=\"The URL of the RSS feed to read\",\n            placeholder=\"https://example.com/rss\",\n        )\n"
            },
            {
              "id": "ReadRSSFeedBlock.Input_3",
              "code": "        time_period: int = SchemaField(\n            description=\"The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.\",\n            placeholder=\"1440\",\n            default=1440,\n        )\n"
            },
            {
              "id": "ReadRSSFeedBlock.Input_4",
              "code": "        polling_rate: int = SchemaField(\n            description=\"The number of seconds to wait between polling attempts.\",\n            placeholder=\"300\",\n        )\n"
            },
            {
              "id": "ReadRSSFeedBlock.Input_5",
              "code": "        run_continuously: bool = SchemaField(\n            description=\"Whether to run the block continuously or just once.\",\n            default=True,\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "ReadRSSFeedBlock.Input_1",
              "to": "ReadRSSFeedBlock.Input_2"
            },
            {
              "from": "ReadRSSFeedBlock.Input_2",
              "to": "ReadRSSFeedBlock.Input_3"
            },
            {
              "from": "ReadRSSFeedBlock.Input_3",
              "to": "ReadRSSFeedBlock.Input_4"
            },
            {
              "from": "ReadRSSFeedBlock.Input_4",
              "to": "ReadRSSFeedBlock.Input_5"
            }
          ]
        }
      },
      {
        "decl_name": "ReadRSSFeedBlock.Output",
        "start_line": 40,
        "end_line": 41,
        "children": [],
        "code": "    class Output(BlockSchema):\n        entry: RSSEntry = SchemaField(description=\"The RSS item\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "ReadRSSFeedBlock.Output_1",
              "code": "class Output(BlockSchema):\n        entry: RSSEntry = SchemaField(description=\"The RSS item\")\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "ReadRSSFeedBlock.__init__",
        "start_line": 43,
        "end_line": 83,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\",\n            input_schema=ReadRSSFeedBlock.Input,\n            output_schema=ReadRSSFeedBlock.Output,\n            description=\"Reads RSS feed entries from a given URL.\",\n            categories={BlockCategory.INPUT},\n            test_input={\n                \"rss_url\": \"https://example.com/rss\",\n                \"time_period\": 10_000_000,\n                \"polling_rate\": 1,\n                \"run_continuously\": False,\n            },\n            test_output=[\n                (\n                    \"entry\",\n                    RSSEntry(\n                        title=\"Example RSS Item\",\n                        link=\"https://example.com/article\",\n                        description=\"This is an example RSS item description.\",\n                        pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),\n                        author=\"John Doe\",\n                        categories=[\"Technology\", \"News\"],\n                    ),\n                ),\n            ],\n            test_mock={\n                \"parse_feed\": lambda *args, **kwargs: {\n                    \"entries\": [\n                        {\n                            \"title\": \"Example RSS Item\",\n                            \"link\": \"https://example.com/article\",\n                            \"summary\": \"This is an example RSS item description.\",\n                            \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),\n                            \"author\": \"John Doe\",\n                            \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],\n                        }\n                    ]\n                }\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "ReadRSSFeedBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"5ebe6768-8e5d-41e3-9134-1c7bd89a8d52\",\n            input_schema=ReadRSSFeedBlock.Input,\n            output_schema=ReadRSSFeedBlock.Output,\n            description=\"Reads RSS feed entries from a given URL.\",\n            categories={BlockCategory.INPUT},\n            test_input={\n                \"rss_url\": \"https://example.com/rss\",\n                \"time_period\": 10_000_000,\n                \"polling_rate\": 1,\n                \"run_continuously\": False,\n            },\n            test_output=[\n                (\n                    \"entry\",\n                    RSSEntry(\n                        title=\"Example RSS Item\",\n                        link=\"https://example.com/article\",\n                        description=\"This is an example RSS item description.\",\n                        pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc),\n                        author=\"John Doe\",\n                        categories=[\"Technology\", \"News\"],\n                    ),\n                ),\n            ],\n            test_mock={\n                \"parse_feed\": lambda *args, **kwargs: {\n                    \"entries\": [\n                        {\n                            \"title\": \"Example RSS Item\",\n                            \"link\": \"https://example.com/article\",\n                            \"summary\": \"This is an example RSS item description.\",\n                            \"published_parsed\": (2023, 6, 23, 12, 30, 0, 4, 174, 0),\n                            \"author\": \"John Doe\",\n                            \"tags\": [{\"term\": \"Technology\"}, {\"term\": \"News\"}],\n                        }\n                    ]\n                }\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "ReadRSSFeedBlock.parse_feed",
        "start_line": 86,
        "end_line": 87,
        "children": [],
        "code": "    def parse_feed(url: str) -> dict[str, Any]:\n        return feedparser.parse(url)  # type: ignore\n",
        "cfg": {
          "nodes": [
            {
              "id": "ReadRSSFeedBlock.parse_feed_1",
              "code": "def parse_feed(url: str) -> dict[str, Any]:\n        return feedparser.parse(url)  # type: ignore\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "ReadRSSFeedBlock.run",
        "start_line": 89,
        "end_line": 115,
        "children": [],
        "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        keep_going = True\n        start_time = datetime.now(timezone.utc) - timedelta(\n            minutes=input_data.time_period\n        )\n        while keep_going:\n            keep_going = input_data.run_continuously\n\n            feed = self.parse_feed(input_data.rss_url)\n\n            for entry in feed[\"entries\"]:\n                pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)\n\n                if pub_date > start_time:\n                    yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )\n\n            time.sleep(input_data.polling_rate)\n",
        "cfg": {
          "nodes": [
            {
              "id": "ReadRSSFeedBlock.run_1",
              "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        keep_going = True\n"
            },
            {
              "id": "ReadRSSFeedBlock.run_2",
              "code": "        start_time = datetime.now(timezone.utc) - timedelta(\n            minutes=input_data.time_period\n        )\n"
            },
            {
              "id": "ReadRSSFeedBlock.run_3",
              "code": "        while keep_going:\n            keep_going = input_data.run_continuously\n"
            },
            {
              "id": "ReadRSSFeedBlock.run_4",
              "code": "            feed = self.parse_feed(input_data.rss_url)\n"
            },
            {
              "id": "ReadRSSFeedBlock.run_5",
              "code": "            for entry in feed[\"entries\"]:\n                pub_date = datetime(*entry[\"published_parsed\"][:6], tzinfo=timezone.utc)\n"
            },
            {
              "id": "ReadRSSFeedBlock.run_6",
              "code": "                if pub_date > start_time:\n                    yield (\n                        \"entry\",\n                        RSSEntry(\n                            title=entry[\"title\"],\n                            link=entry[\"link\"],\n                            description=entry.get(\"summary\", \"\"),\n                            pub_date=pub_date,\n                            author=entry.get(\"author\", \"\"),\n                            categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\n                        ),\n                    )\n"
            },
            {
              "id": "ReadRSSFeedBlock.run_7",
              "code": "            time.sleep(input_data.polling_rate)\n"
            }
          ],
          "edges": [
            {
              "from": "ReadRSSFeedBlock.run_1",
              "to": "ReadRSSFeedBlock.run_2"
            },
            {
              "from": "ReadRSSFeedBlock.run_2",
              "to": "ReadRSSFeedBlock.run_3"
            },
            {
              "from": "ReadRSSFeedBlock.run_3",
              "to": "ReadRSSFeedBlock.run_4"
            },
            {
              "from": "ReadRSSFeedBlock.run_3",
              "to": "ReadRSSFeedBlock.run_7"
            },
            {
              "from": "ReadRSSFeedBlock.run_4",
              "to": "ReadRSSFeedBlock.run_5"
            },
            {
              "from": "ReadRSSFeedBlock.run_5",
              "to": "ReadRSSFeedBlock.run_6"
            },
            {
              "from": "ReadRSSFeedBlock.run_6",
              "to": "ReadRSSFeedBlock.run_5"
            },
            {
              "from": "ReadRSSFeedBlock.run_6",
              "to": "ReadRSSFeedBlock.run_7"
            },
            {
              "from": "ReadRSSFeedBlock.run_7",
              "to": "ReadRSSFeedBlock.run_3"
            }
          ]
        }
      }
    ],
    "code": "class ReadRSSFeedBlock(Block):\n\n\n\n    @staticmethod\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "ReadRSSFeedBlock_1",
          "code": "class ReadRSSFeedBlock(Block):\n"
        },
        {
          "id": "ReadRSSFeedBlock_2",
          "code": "    @staticmethod\n"
        }
      ],
      "edges": [
        {
          "from": "ReadRSSFeedBlock_1",
          "to": "ReadRSSFeedBlock_2"
        }
      ]
    }
  }
]