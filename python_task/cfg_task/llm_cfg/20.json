[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 55,
    "children": [
      {
        "decl_name": "bitwise_addition_recursive",
        "start_line": 6,
        "end_line": 48,
        "children": [],
        "code": "def bitwise_addition_recursive(number: int, other_number: int) -> int:\n    \"\"\"\n    >>> bitwise_addition_recursive(4, 5)\n    9\n    >>> bitwise_addition_recursive(8, 9)\n    17\n    >>> bitwise_addition_recursive(0, 4)\n    4\n    >>> bitwise_addition_recursive(4.5, 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4.5', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive(-1, 9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    >>> bitwise_addition_recursive(1, -9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    \"\"\"\n\n    if not isinstance(number, int) or not isinstance(other_number, int):\n        raise TypeError(\"Both arguments MUST be integers!\")\n\n    if number < 0 or other_number < 0:\n        raise ValueError(\"Both arguments MUST be non-negative!\")\n\n    bitwise_sum = number ^ other_number\n    carry = number & other_number\n\n    if carry == 0:\n        return bitwise_sum\n\n    return bitwise_addition_recursive(bitwise_sum, carry << 1)\n",
        "cfg": {
          "nodes": [
            {
              "id": "bitwise_addition_recursive_1",
              "code": "def bitwise_addition_recursive(number: int, other_number: int) -> int:\n    \"\"\"\n    >>> bitwise_addition_recursive(4, 5)\n    9\n    >>> bitwise_addition_recursive(8, 9)\n    17\n    >>> bitwise_addition_recursive(0, 4)\n    4\n    >>> bitwise_addition_recursive(4.5, 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4.5', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive(-1, 9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    >>> bitwise_addition_recursive(1, -9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    \"\"\"\n"
            },
            {
              "id": "bitwise_addition_recursive_2",
              "code": "    if not isinstance(number, int) or not isinstance(other_number, int):\n        raise TypeError(\"Both arguments MUST be integers!\")\n"
            },
            {
              "id": "bitwise_addition_recursive_3",
              "code": "    if number < 0 or other_number < 0:\n        raise ValueError(\"Both arguments MUST be non-negative!\")\n"
            },
            {
              "id": "bitwise_addition_recursive_4",
              "code": "    bitwise_sum = number ^ other_number\n    carry = number & other_number\n"
            },
            {
              "id": "bitwise_addition_recursive_5",
              "code": "    if carry == 0:\n        return bitwise_sum\n"
            },
            {
              "id": "bitwise_addition_recursive_6",
              "code": "    return bitwise_addition_recursive(bitwise_sum, carry << 1)\n"
            }
          ],
          "edges": [
            {
              "from": "bitwise_addition_recursive_1",
              "to": "bitwise_addition_recursive_2"
            },
            {
              "from": "bitwise_addition_recursive_2",
              "to": "bitwise_addition_recursive_3"
            },
            {
              "from": "bitwise_addition_recursive_3",
              "to": "bitwise_addition_recursive_4"
            },
            {
              "from": "bitwise_addition_recursive_4",
              "to": "bitwise_addition_recursive_5"
            },
            {
              "from": "bitwise_addition_recursive_4",
              "to": "bitwise_addition_recursive_6"
            }
          ]
        }
      },
      {
        "decl_name": "__main__",
        "start_line": 51,
        "end_line": 54,
        "children": [],
        "code": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
        "cfg": {
          "nodes": [
            {
              "id": "__main___1",
              "code": "if __name__ == \"__main__\":\n"
            },
            {
              "id": "__main___2",
              "code": "    import doctest\n\n    doctest.testmod()\n"
            }
          ],
          "edges": [
            {
              "from": "__main___1",
              "to": "__main___2"
            }
          ]
        }
      }
    ],
    "code": "\"\"\"\nCalculates the sum of two non-negative integers using bitwise operators\nWikipedia explanation: https://en.wikipedia.org/wiki/Binary_number\n\"\"\"\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "\"\"\"\nCalculates the sum of two non-negative integers using bitwise operators\nWikipedia explanation: https://en.wikipedia.org/wiki/Binary_number\n\"\"\"\n"
        }
      ],
      "edges": []
    }
  }
]