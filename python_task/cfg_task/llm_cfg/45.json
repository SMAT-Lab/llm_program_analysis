[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 22,
    "children": [],
    "code": "import logging\nimport uuid\nfrom datetime import datetime, timezone\nfrom typing import List, Optional\n\nfrom autogpt_libs.api_key.key_manager import APIKeyManager\nfrom prisma.enums import APIKeyPermission, APIKeyStatus\nfrom prisma.errors import PrismaError\nfrom prisma.models import APIKey as PrismaAPIKey\nfrom prisma.types import (\n    APIKeyCreateInput,\n    APIKeyUpdateInput,\n    APIKeyWhereInput,\n    APIKeyWhereUniqueInput,\n)\nfrom pydantic import BaseModel\n\nfrom backend.data.db import BaseDbModel\n\nlogger = logging.getLogger(__name__)\n\n\n# Some basic exceptions\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import logging\nimport uuid\nfrom datetime import datetime, timezone\nfrom typing import List, Optional\n\nfrom autogpt_libs.api_key.key_manager import APIKeyManager\nfrom prisma.enums import APIKeyPermission, APIKeyStatus\nfrom prisma.errors import PrismaError\nfrom prisma.models import APIKey as PrismaAPIKey\nfrom prisma.types import (\n    APIKeyCreateInput,\n    APIKeyUpdateInput,\n    APIKeyWhereInput,\n    APIKeyWhereUniqueInput,\n)\nfrom pydantic import BaseModel\n\nfrom backend.data.db import BaseDbModel\n\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "logger = logging.getLogger(__name__)\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "\n\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "# Some basic exceptions\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        }
      ]
    }
  },
  {
    "decl_name": "APIKeyError",
    "start_line": 23,
    "end_line": 26,
    "children": [],
    "code": "class APIKeyError(Exception):\n    \"\"\"Base exception for API key operations\"\"\"\n\n    pass\n",
    "cfg": {
      "nodes": [
        {
          "id": "APIKeyError_1",
          "code": "class APIKeyError(Exception):\n    \"\"\"Base exception for API key operations\"\"\"\n\n    pass\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "APIKeyNotFoundError",
    "start_line": 29,
    "end_line": 32,
    "children": [],
    "code": "class APIKeyNotFoundError(APIKeyError):\n    \"\"\"Raised when an API key is not found\"\"\"\n\n    pass\n",
    "cfg": {
      "nodes": [
        {
          "id": "APIKeyNotFoundError_1",
          "code": "class APIKeyNotFoundError(APIKeyError):\n    \"\"\"Raised when an API key is not found\"\"\"\n\n    pass\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "APIKeyPermissionError",
    "start_line": 35,
    "end_line": 38,
    "children": [],
    "code": "class APIKeyPermissionError(APIKeyError):\n    \"\"\"Raised when there are permission issues with API key operations\"\"\"\n\n    pass\n",
    "cfg": {
      "nodes": [
        {
          "id": "APIKeyPermissionError_1",
          "code": "class APIKeyPermissionError(APIKeyError):\n    \"\"\"Raised when there are permission issues with API key operations\"\"\"\n"
        },
        {
          "id": "APIKeyPermissionError_2",
          "code": "    pass\n"
        }
      ],
      "edges": [
        {
          "from": "APIKeyPermissionError_1",
          "to": "APIKeyPermissionError_2"
        }
      ]
    }
  },
  {
    "decl_name": "APIKeyValidationError",
    "start_line": 41,
    "end_line": 44,
    "children": [],
    "code": "class APIKeyValidationError(APIKeyError):\n    \"\"\"Raised when API key validation fails\"\"\"\n\n    pass\n",
    "cfg": {
      "nodes": [
        {
          "id": "APIKeyValidationError_1",
          "code": "class APIKeyValidationError(APIKeyError):\n    \"\"\"Raised when API key validation fails\"\"\"\n\n    pass\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "APIKey",
    "start_line": 47,
    "end_line": 80,
    "children": [
      {
        "decl_name": "APIKey.from_db",
        "start_line": 60,
        "end_line": 79,
        "children": [],
        "code": "    @staticmethod\n    def from_db(api_key: PrismaAPIKey):\n        try:\n            return APIKey(\n                id=api_key.id,\n                name=api_key.name,\n                prefix=api_key.prefix,\n                postfix=api_key.postfix,\n                key=api_key.key,\n                status=APIKeyStatus(api_key.status),\n                permissions=[APIKeyPermission(p) for p in api_key.permissions],\n                created_at=api_key.createdAt,\n                last_used_at=api_key.lastUsedAt,\n                revoked_at=api_key.revokedAt,\n                description=api_key.description,\n                user_id=api_key.userId,\n            )\n        except Exception as e:\n            logger.error(f\"Error creating APIKey from db: {str(e)}\")\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "APIKey.from_db_1",
              "code": "@staticmethod\n    def from_db(api_key: PrismaAPIKey):\n"
            },
            {
              "id": "APIKey.from_db_2",
              "code": "        try:\n            return APIKey(\n                id=api_key.id,\n                name=api_key.name,\n                prefix=api_key.prefix,\n                postfix=api_key.postfix,\n                key=api_key.key,\n                status=APIKeyStatus(api_key.status),\n                permissions=[APIKeyPermission(p) for p in api_key.permissions],\n                created_at=api_key.createdAt,\n                last_used_at=api_key.lastUsedAt,\n                revoked_at=api_key.revokedAt,\n                description=api_key.description,\n                user_id=api_key.userId,\n            )\n"
            },
            {
              "id": "APIKey.from_db_3",
              "code": "        except Exception as e:\n            logger.error(f\"Error creating APIKey from db: {str(e)}\")\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")\n"
            }
          ],
          "edges": [
            {
              "from": "APIKey.from_db_1",
              "to": "APIKey.from_db_2"
            },
            {
              "from": "APIKey.from_db_2",
              "to": "APIKey.from_db_3"
            }
          ]
        }
      }
    ],
    "code": "class APIKey(BaseDbModel):\n    name: str\n    prefix: str\n    key: str\n    status: APIKeyStatus = APIKeyStatus.ACTIVE\n    permissions: List[APIKeyPermission]\n    postfix: str\n    created_at: datetime\n    last_used_at: Optional[datetime] = None\n    revoked_at: Optional[datetime] = None\n    description: Optional[str] = None\n    user_id: str\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "APIKey_1",
          "code": "class APIKey(BaseDbModel):\n    name: str\n    prefix: str\n    key: str\n    status: APIKeyStatus = APIKeyStatus.ACTIVE\n    permissions: List[APIKeyPermission]\n    postfix: str\n    created_at: datetime\n    last_used_at: Optional[datetime] = None\n    revoked_at: Optional[datetime] = None\n    description: Optional[str] = None\n    user_id: str\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "APIKeyWithoutHash",
    "start_line": 82,
    "end_line": 114,
    "children": [
      {
        "decl_name": "APIKeyWithoutHash.from_db",
        "start_line": 95,
        "end_line": 113,
        "children": [],
        "code": "    @staticmethod\n    def from_db(api_key: PrismaAPIKey):\n        try:\n            return APIKeyWithoutHash(\n                id=api_key.id,\n                name=api_key.name,\n                prefix=api_key.prefix,\n                postfix=api_key.postfix,\n                status=APIKeyStatus(api_key.status),\n                permissions=[APIKeyPermission(p) for p in api_key.permissions],\n                created_at=api_key.createdAt,\n                last_used_at=api_key.lastUsedAt,\n                revoked_at=api_key.revokedAt,\n                description=api_key.description,\n                user_id=api_key.userId,\n            )\n        except Exception as e:\n            logger.error(f\"Error creating APIKeyWithoutHash from db: {str(e)}\")\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "APIKeyWithoutHash.from_db_1",
              "code": "@staticmethod\n    def from_db(api_key: PrismaAPIKey):\n"
            },
            {
              "id": "APIKeyWithoutHash.from_db_2",
              "code": "        try:\n            return APIKeyWithoutHash(\n                id=api_key.id,\n                name=api_key.name,\n                prefix=api_key.prefix,\n                postfix=api_key.postfix,\n                status=APIKeyStatus(api_key.status),\n                permissions=[APIKeyPermission(p) for p in api_key.permissions],\n                created_at=api_key.createdAt,\n                last_used_at=api_key.lastUsedAt,\n                revoked_at=api_key.revokedAt,\n                description=api_key.description,\n                user_id=api_key.userId,\n            )\n"
            },
            {
              "id": "APIKeyWithoutHash.from_db_3",
              "code": "        except Exception as e:\n            logger.error(f\"Error creating APIKeyWithoutHash from db: {str(e)}\")\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")\n"
            }
          ],
          "edges": [
            {
              "from": "APIKeyWithoutHash.from_db_1",
              "to": "APIKeyWithoutHash.from_db_2"
            },
            {
              "from": "APIKeyWithoutHash.from_db_2",
              "to": "APIKeyWithoutHash.from_db_3"
            }
          ]
        }
      }
    ],
    "code": "class APIKeyWithoutHash(BaseModel):\n    id: str\n    name: str\n    prefix: str\n    postfix: str\n    status: APIKeyStatus\n    permissions: List[APIKeyPermission]\n    created_at: datetime\n    last_used_at: Optional[datetime]\n    revoked_at: Optional[datetime]\n    description: Optional[str]\n    user_id: str\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "APIKeyWithoutHash_1",
          "code": "class APIKeyWithoutHash(BaseModel):\n    id: str\n    name: str\n    prefix: str\n    postfix: str\n    status: APIKeyStatus\n    permissions: List[APIKeyPermission]\n    created_at: datetime\n    last_used_at: Optional[datetime]\n    revoked_at: Optional[datetime]\n    description: Optional[str]\n    user_id: str\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "generate_api_key",
    "start_line": 116,
    "end_line": 151,
    "children": [],
    "code": "async def generate_api_key(\n    name: str,\n    user_id: str,\n    permissions: List[APIKeyPermission],\n    description: Optional[str] = None,\n) -> tuple[APIKeyWithoutHash, str]:\n    \"\"\"\n    Generate a new API key and store it in the database.\n    Returns the API key object (without hash) and the plain text key.\n    \"\"\"\n    try:\n        api_manager = APIKeyManager()\n        key = api_manager.generate_api_key()\n\n        api_key = await PrismaAPIKey.prisma().create(\n            data=APIKeyCreateInput(\n                id=str(uuid.uuid4()),\n                name=name,\n                prefix=key.prefix,\n                postfix=key.postfix,\n                key=key.hash,\n                permissions=[p for p in permissions],\n                description=description,\n                userId=user_id,\n            )\n        )\n\n        api_key_without_hash = APIKeyWithoutHash.from_db(api_key)\n        return api_key_without_hash, key.raw\n    except PrismaError as e:\n        logger.error(f\"Database error while generating API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error while generating API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "generate_api_key_1",
          "code": "async def generate_api_key(\n    name: str,\n    user_id: str,\n    permissions: List[APIKeyPermission],\n    description: Optional[str] = None,\n) -> tuple[APIKeyWithoutHash, str]:\n    \"\"\"\n    Generate a new API key and store it in the database.\n    Returns the API key object (without hash) and the plain text key.\n    \"\"\"\n"
        },
        {
          "id": "generate_api_key_2",
          "code": "    try:\n        api_manager = APIKeyManager()\n        key = api_manager.generate_api_key()\n\n        api_key = await PrismaAPIKey.prisma().create(\n            data=APIKeyCreateInput(\n                id=str(uuid.uuid4()),\n                name=name,\n                prefix=key.prefix,\n                postfix=key.postfix,\n                key=key.hash,\n                permissions=[p for p in permissions],\n                description=description,\n                userId=user_id,\n            )\n        )\n\n        api_key_without_hash = APIKeyWithoutHash.from_db(api_key)\n        return api_key_without_hash, key.raw\n"
        },
        {
          "id": "generate_api_key_3",
          "code": "    except PrismaError as e:\n        logger.error(f\"Database error while generating API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")\n"
        },
        {
          "id": "generate_api_key_4",
          "code": "    except Exception as e:\n        logger.error(f\"Unexpected error while generating API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")\n"
        }
      ],
      "edges": [
        {
          "from": "generate_api_key_1",
          "to": "generate_api_key_2"
        },
        {
          "from": "generate_api_key_2",
          "to": "generate_api_key_3"
        },
        {
          "from": "generate_api_key_2",
          "to": "generate_api_key_4"
        }
      ]
    }
  },
  {
    "decl_name": "validate_api_key",
    "start_line": 153,
    "end_line": 182,
    "children": [],
    "code": "async def validate_api_key(plain_text_key: str) -> Optional[APIKey]:\n    \"\"\"\n    Validate an API key and return the API key object if valid.\n    \"\"\"\n    try:\n        if not plain_text_key.startswith(APIKeyManager.PREFIX):\n            logger.warning(\"Invalid API key format\")\n            return None\n\n        prefix = plain_text_key[: APIKeyManager.PREFIX_LENGTH]\n        api_manager = APIKeyManager()\n\n        api_key = await PrismaAPIKey.prisma().find_first(\n            where=APIKeyWhereInput(prefix=prefix, status=(APIKeyStatus.ACTIVE))\n        )\n\n        if not api_key:\n            logger.warning(f\"No active API key found with prefix {prefix}\")\n            return None\n\n        is_valid = api_manager.verify_api_key(plain_text_key, api_key.key)\n        if not is_valid:\n            logger.warning(\"API key verification failed\")\n            return None\n\n        return APIKey.from_db(api_key)\n    except Exception as e:\n        logger.error(f\"Error validating API key: {str(e)}\")\n        raise APIKeyValidationError(f\"Failed to validate API key: {str(e)}\")\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "validate_api_key_1",
          "code": "async def validate_api_key(plain_text_key: str) -> Optional[APIKey]:\n    \"\"\"\n    Validate an API key and return the API key object if valid.\n    \"\"\"\n"
        },
        {
          "id": "validate_api_key_2",
          "code": "    try:\n        if not plain_text_key.startswith(APIKeyManager.PREFIX):\n            logger.warning(\"Invalid API key format\")\n            return None\n"
        },
        {
          "id": "validate_api_key_3",
          "code": "        prefix = plain_text_key[: APIKeyManager.PREFIX_LENGTH]\n        api_manager = APIKeyManager()\n"
        },
        {
          "id": "validate_api_key_4",
          "code": "        api_key = await PrismaAPIKey.prisma().find_first(\n            where=APIKeyWhereInput(prefix=prefix, status=(APIKeyStatus.ACTIVE))\n        )\n"
        },
        {
          "id": "validate_api_key_5",
          "code": "        if not api_key:\n            logger.warning(f\"No active API key found with prefix {prefix}\")\n            return None\n"
        },
        {
          "id": "validate_api_key_6",
          "code": "        is_valid = api_manager.verify_api_key(plain_text_key, api_key.key)\n        if not is_valid:\n            logger.warning(\"API key verification failed\")\n            return None\n"
        },
        {
          "id": "validate_api_key_7",
          "code": "        return APIKey.from_db(api_key)\n"
        },
        {
          "id": "validate_api_key_8",
          "code": "    except Exception as e:\n        logger.error(f\"Error validating API key: {str(e)}\")\n        raise APIKeyValidationError(f\"Failed to validate API key: {str(e)}\")\n"
        }
      ],
      "edges": [
        {
          "from": "validate_api_key_1",
          "to": "validate_api_key_2"
        },
        {
          "from": "validate_api_key_2",
          "to": "validate_api_key_3"
        },
        {
          "from": "validate_api_key_2",
          "to": "validate_api_key_8"
        },
        {
          "from": "validate_api_key_3",
          "to": "validate_api_key_4"
        },
        {
          "from": "validate_api_key_4",
          "to": "validate_api_key_5"
        },
        {
          "from": "validate_api_key_5",
          "to": "validate_api_key_6"
        },
        {
          "from": "validate_api_key_5",
          "to": "validate_api_key_8"
        },
        {
          "from": "validate_api_key_6",
          "to": "validate_api_key_7"
        },
        {
          "from": "validate_api_key_6",
          "to": "validate_api_key_8"
        }
      ]
    }
  },
  {
    "decl_name": "revoke_api_key",
    "start_line": 184,
    "end_line": 215,
    "children": [],
    "code": "async def revoke_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n\n        if not api_key:\n            raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")\n\n        if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to revoke this API key.\"\n            )\n\n        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(\n                status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)\n            ),\n        )\n\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n    except PrismaError as e:\n        logger.error(f\"Database error while revoking API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error while revoking API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "revoke_api_key_1",
          "code": "async def revoke_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n"
        },
        {
          "id": "revoke_api_key_2",
          "code": "        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n"
        },
        {
          "id": "revoke_api_key_3",
          "code": "        if not api_key:\n            raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")\n"
        },
        {
          "id": "revoke_api_key_4",
          "code": "        if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to revoke this API key.\"\n            )\n"
        },
        {
          "id": "revoke_api_key_5",
          "code": "        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(\n                status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)\n            ),\n        )\n"
        },
        {
          "id": "revoke_api_key_6",
          "code": "        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n"
        },
        {
          "id": "revoke_api_key_7",
          "code": "    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n"
        },
        {
          "id": "revoke_api_key_8",
          "code": "    except PrismaError as e:\n        logger.error(f\"Database error while revoking API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")\n"
        },
        {
          "id": "revoke_api_key_9",
          "code": "    except Exception as e:\n        logger.error(f\"Unexpected error while revoking API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")\n"
        }
      ],
      "edges": [
        {
          "from": "revoke_api_key_1",
          "to": "revoke_api_key_2"
        },
        {
          "from": "revoke_api_key_2",
          "to": "revoke_api_key_3"
        },
        {
          "from": "revoke_api_key_3",
          "to": "revoke_api_key_4"
        },
        {
          "from": "revoke_api_key_4",
          "to": "revoke_api_key_5"
        },
        {
          "from": "revoke_api_key_5",
          "to": "revoke_api_key_6"
        }
      ]
    }
  },
  {
    "decl_name": "list_user_api_keys",
    "start_line": 217,
    "end_line": 232,
    "children": [],
    "code": "async def list_user_api_keys(user_id: str) -> List[APIKeyWithoutHash]:\n    try:\n        where_clause: APIKeyWhereInput = {\"userId\": user_id}\n\n        api_keys = await PrismaAPIKey.prisma().find_many(\n            where=where_clause, order={\"createdAt\": \"desc\"}\n        )\n\n        return [APIKeyWithoutHash.from_db(key) for key in api_keys]\n    except PrismaError as e:\n        logger.error(f\"Database error while listing API keys: {str(e)}\")\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error while listing API keys: {str(e)}\")\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "list_user_api_keys_1",
          "code": "async def list_user_api_keys(user_id: str) -> List[APIKeyWithoutHash]:\n"
        },
        {
          "id": "list_user_api_keys_2",
          "code": "    try:\n        where_clause: APIKeyWhereInput = {\"userId\": user_id}\n\n        api_keys = await PrismaAPIKey.prisma().find_many(\n            where=where_clause, order={\"createdAt\": \"desc\"}\n        )\n\n        return [APIKeyWithoutHash.from_db(key) for key in api_keys]\n"
        },
        {
          "id": "list_user_api_keys_3",
          "code": "    except PrismaError as e:\n        logger.error(f\"Database error while listing API keys: {str(e)}\")\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")\n"
        },
        {
          "id": "list_user_api_keys_4",
          "code": "    except Exception as e:\n        logger.error(f\"Unexpected error while listing API keys: {str(e)}\")\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")\n"
        }
      ],
      "edges": [
        {
          "from": "list_user_api_keys_1",
          "to": "list_user_api_keys_2"
        },
        {
          "from": "list_user_api_keys_2",
          "to": "list_user_api_keys_3"
        },
        {
          "from": "list_user_api_keys_2",
          "to": "list_user_api_keys_4"
        }
      ]
    }
  },
  {
    "decl_name": "suspend_api_key",
    "start_line": 234,
    "end_line": 263,
    "children": [],
    "code": "async def suspend_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n\n        if not api_key:\n            raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")\n\n        if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to suspend this API key.\"\n            )\n\n        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED),\n        )\n\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n    except PrismaError as e:\n        logger.error(f\"Database error while suspending API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error while suspending API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "suspend_api_key_1",
          "code": "async def suspend_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n"
        },
        {
          "id": "suspend_api_key_2",
          "code": "        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n"
        },
        {
          "id": "suspend_api_key_3",
          "code": "        if not api_key:\n            raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")\n"
        },
        {
          "id": "suspend_api_key_4",
          "code": "        if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to suspend this API key.\"\n            )\n"
        },
        {
          "id": "suspend_api_key_5",
          "code": "        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED),\n        )\n"
        },
        {
          "id": "suspend_api_key_6",
          "code": "        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n"
        },
        {
          "id": "suspend_api_key_7",
          "code": "    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n"
        },
        {
          "id": "suspend_api_key_8",
          "code": "    except PrismaError as e:\n        logger.error(f\"Database error while suspending API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")\n"
        },
        {
          "id": "suspend_api_key_9",
          "code": "    except Exception as e:\n        logger.error(f\"Unexpected error while suspending API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")\n"
        }
      ],
      "edges": [
        {
          "from": "suspend_api_key_1",
          "to": "suspend_api_key_2"
        },
        {
          "from": "suspend_api_key_2",
          "to": "suspend_api_key_3"
        },
        {
          "from": "suspend_api_key_3",
          "to": "suspend_api_key_4"
        },
        {
          "from": "suspend_api_key_3",
          "to": "suspend_api_key_7"
        },
        {
          "from": "suspend_api_key_4",
          "to": "suspend_api_key_5"
        },
        {
          "from": "suspend_api_key_4",
          "to": "suspend_api_key_7"
        },
        {
          "from": "suspend_api_key_5",
          "to": "suspend_api_key_6"
        }
      ]
    }
  },
  {
    "decl_name": "has_permission",
    "start_line": 265,
    "end_line": 271,
    "children": [],
    "code": "def has_permission(api_key: APIKey, required_permission: APIKeyPermission) -> bool:\n    try:\n        return required_permission in api_key.permissions\n    except Exception as e:\n        logger.error(f\"Error checking API key permissions: {str(e)}\")\n        return False\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "has_permission_1",
          "code": "def has_permission(api_key: APIKey, required_permission: APIKeyPermission) -> bool:\n"
        },
        {
          "id": "has_permission_2",
          "code": "    try:\n        return required_permission in api_key.permissions\n"
        },
        {
          "id": "has_permission_3",
          "code": "    except Exception as e:\n        logger.error(f\"Error checking API key permissions: {str(e)}\")\n        return False\n"
        }
      ],
      "edges": [
        {
          "from": "has_permission_1",
          "to": "has_permission_2"
        },
        {
          "from": "has_permission_2",
          "to": "has_permission_3"
        }
      ]
    }
  },
  {
    "decl_name": "get_api_key_by_id",
    "start_line": 273,
    "end_line": 290,
    "children": [],
    "code": "async def get_api_key_by_id(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n        api_key = await PrismaAPIKey.prisma().find_first(\n            where=APIKeyWhereInput(id=key_id, userId=user_id)\n        )\n\n        if not api_key:\n            return None\n\n        return APIKeyWithoutHash.from_db(api_key)\n    except PrismaError as e:\n        logger.error(f\"Database error while getting API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to get API key: {str(e)}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error while getting API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to get API key: {str(e)}\")\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "get_api_key_by_id_1",
          "code": "async def get_api_key_by_id(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n"
        },
        {
          "id": "get_api_key_by_id_2",
          "code": "    try:\n        api_key = await PrismaAPIKey.prisma().find_first(\n            where=APIKeyWhereInput(id=key_id, userId=user_id)\n        )\n"
        },
        {
          "id": "get_api_key_by_id_3",
          "code": "        if not api_key:\n            return None\n"
        },
        {
          "id": "get_api_key_by_id_4",
          "code": "        return APIKeyWithoutHash.from_db(api_key)\n"
        },
        {
          "id": "get_api_key_by_id_5",
          "code": "    except PrismaError as e:\n        logger.error(f\"Database error while getting API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to get API key: {str(e)}\")\n"
        },
        {
          "id": "get_api_key_by_id_6",
          "code": "    except Exception as e:\n        logger.error(f\"Unexpected error while getting API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to get API key: {str(e)}\")\n"
        }
      ],
      "edges": [
        {
          "from": "get_api_key_by_id_1",
          "to": "get_api_key_by_id_2"
        },
        {
          "from": "get_api_key_by_id_2",
          "to": "get_api_key_by_id_3"
        },
        {
          "from": "get_api_key_by_id_2",
          "to": "get_api_key_by_id_5"
        },
        {
          "from": "get_api_key_by_id_3",
          "to": "get_api_key_by_id_4"
        },
        {
          "from": "get_api_key_by_id_3",
          "to": "get_api_key_by_id_6"
        }
      ]
    }
  },
  {
    "decl_name": "update_api_key_permissions",
    "start_line": 291,
    "end_line": 325,
    "children": [],
    "code": "async def update_api_key_permissions(\n    key_id: str, user_id: str, permissions: List[APIKeyPermission]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"\n    Update the permissions of an API key.\n    \"\"\"\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n\n        if api_key is None:\n            raise APIKeyNotFoundError(\"No such API key found.\")\n\n        if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to update this API key.\"\n            )\n\n        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(permissions=permissions),\n        )\n\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n    except PrismaError as e:\n        logger.error(f\"Database error while updating API key permissions: {str(e)}\")\n        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")\n    except Exception as e:\n        logger.error(f\"Unexpected error while updating API key permissions: {str(e)}\")\n        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "update_api_key_permissions_1",
          "code": "async def update_api_key_permissions(\n    key_id: str, user_id: str, permissions: List[APIKeyPermission]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"\n    Update the permissions of an API key.\n    \"\"\"\n"
        },
        {
          "id": "update_api_key_permissions_2",
          "code": "    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n"
        },
        {
          "id": "update_api_key_permissions_3",
          "code": "        if api_key is None:\n            raise APIKeyNotFoundError(\"No such API key found.\")\n"
        },
        {
          "id": "update_api_key_permissions_4",
          "code": "        if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to update this API key.\"\n            )\n"
        },
        {
          "id": "update_api_key_permissions_5",
          "code": "        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(permissions=permissions),\n        )\n"
        },
        {
          "id": "update_api_key_permissions_6",
          "code": "        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n"
        },
        {
          "id": "update_api_key_permissions_7",
          "code": "    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n"
        },
        {
          "id": "update_api_key_permissions_8",
          "code": "    except PrismaError as e:\n        logger.error(f\"Database error while updating API key permissions: {str(e)}\")\n        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")\n"
        },
        {
          "id": "update_api_key_permissions_9",
          "code": "    except Exception as e:\n        logger.error(f\"Unexpected error while updating API key permissions: {str(e)}\")\n        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")\n"
        }
      ],
      "edges": [
        {
          "from": "update_api_key_permissions_1",
          "to": "update_api_key_permissions_2"
        },
        {
          "from": "update_api_key_permissions_2",
          "to": "update_api_key_permissions_3"
        },
        {
          "from": "update_api_key_permissions_2",
          "to": "update_api_key_permissions_7"
        },
        {
          "from": "update_api_key_permissions_3",
          "to": "update_api_key_permissions_4"
        },
        {
          "from": "update_api_key_permissions_3",
          "to": "update_api_key_permissions_7"
        },
        {
          "from": "update_api_key_permissions_4",
          "to": "update_api_key_permissions_5"
        },
        {
          "from": "update_api_key_permissions_4",
          "to": "update_api_key_permissions_7"
        },
        {
          "from": "update_api_key_permissions_5",
          "to": "update_api_key_permissions_6"
        },
        {
          "from": "update_api_key_permissions_5",
          "to": "update_api_key_permissions_7"
        },
        {
          "from": "update_api_key_permissions_7",
          "to": "update_api_key_permissions_8"
        },
        {
          "from": "update_api_key_permissions_7",
          "to": "update_api_key_permissions_9"
        }
      ]
    }
  }
]