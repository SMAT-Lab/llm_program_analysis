[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 15,
    "children": [],
    "code": "from abc import ABC, abstractmethod\nfrom datetime import datetime, timezone\n\nfrom prisma import Json\nfrom prisma.enums import CreditTransactionType\nfrom prisma.errors import UniqueViolationError\nfrom prisma.models import CreditTransaction\n\nfrom backend.data.block import Block, BlockInput, get_block\nfrom backend.data.block_cost_config import BLOCK_COSTS\nfrom backend.data.cost import BlockCost, BlockCostType\nfrom backend.util.settings import Config\n\nconfig = Config()\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from abc import ABC, abstractmethod\nfrom datetime import datetime, timezone\n\nfrom prisma import Json\nfrom prisma.enums import CreditTransactionType\nfrom prisma.errors import UniqueViolationError\nfrom prisma.models import CreditTransaction\n\nfrom backend.data.block import Block, BlockInput, get_block\nfrom backend.data.block_cost_config import BLOCK_COSTS\nfrom backend.data.cost import BlockCost, BlockCostType\nfrom backend.util.settings import Config\n\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "config = Config()\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        }
      ]
    }
  },
  {
    "decl_name": "UserCreditBase",
    "start_line": 16,
    "end_line": 66,
    "children": [
      {
        "decl_name": "UserCreditBase.__init__",
        "start_line": 17,
        "end_line": 18,
        "children": [],
        "code": "    def __init__(self, num_user_credits_refill: int):\n        self.num_user_credits_refill = num_user_credits_refill\n",
        "cfg": {
          "nodes": [
            {
              "id": "UserCreditBase.__init___1",
              "code": "def __init__(self, num_user_credits_refill: int):\n        self.num_user_credits_refill = num_user_credits_refill\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "UserCreditBase.get_or_refill_credit",
        "start_line": 21,
        "end_line": 28,
        "children": [],
        "code": "    async def get_or_refill_credit(self, user_id: str) -> int:\n        \"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\n        pass\n",
        "cfg": {
          "nodes": [
            {
              "id": "UserCreditBase.get_or_refill_credit_1",
              "code": "async def get_or_refill_credit(self, user_id: str) -> int:\n        \"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\n        pass\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "UserCreditBase.spend_credits",
        "start_line": 31,
        "end_line": 54,
        "children": [],
        "code": "    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> int:\n        \"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"\n        pass\n",
        "cfg": {
          "nodes": [
            {
              "id": "UserCreditBase.spend_credits_1",
              "code": "async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> int:\n"
            },
            {
              "id": "UserCreditBase.spend_credits_2",
              "code": "        \"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"\n"
            },
            {
              "id": "UserCreditBase.spend_credits_3",
              "code": "        pass\n"
            }
          ],
          "edges": [
            {
              "from": "UserCreditBase.spend_credits_1",
              "to": "UserCreditBase.spend_credits_2"
            },
            {
              "from": "UserCreditBase.spend_credits_2",
              "to": "UserCreditBase.spend_credits_3"
            }
          ]
        }
      },
      {
        "decl_name": "UserCreditBase.top_up_credits",
        "start_line": 57,
        "end_line": 65,
        "children": [],
        "code": "    async def top_up_credits(self, user_id: str, amount: int):\n        \"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass\n",
        "cfg": {
          "nodes": [
            {
              "id": "UserCreditBase.top_up_credits_1",
              "code": "async def top_up_credits(self, user_id: str, amount: int):\n        \"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass\n"
            }
          ],
          "edges": []
        }
      }
    ],
    "code": "class UserCreditBase(ABC):\n\n    @abstractmethod\n\n    @abstractmethod\n\n    @abstractmethod\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "UserCreditBase_1",
          "code": "class UserCreditBase(ABC):\n"
        },
        {
          "id": "UserCreditBase_2",
          "code": "    @abstractmethod\n"
        },
        {
          "id": "UserCreditBase_3",
          "code": "    @abstractmethod\n"
        },
        {
          "id": "UserCreditBase_4",
          "code": "    @abstractmethod\n"
        }
      ],
      "edges": [
        {
          "from": "UserCreditBase_1",
          "to": "UserCreditBase_2"
        },
        {
          "from": "UserCreditBase_2",
          "to": "UserCreditBase_3"
        },
        {
          "from": "UserCreditBase_3",
          "to": "UserCreditBase_4"
        }
      ]
    }
  },
  {
    "decl_name": "UserCredit",
    "start_line": 68,
    "end_line": 212,
    "children": [
      {
        "decl_name": "UserCredit.get_or_refill_credit",
        "start_line": 69,
        "end_line": 107,
        "children": [],
        "code": "    async def get_or_refill_credit(self, user_id: str) -> int:\n        cur_time = self.time_now()\n        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )\n\n        user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )\n\n        if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)\n\n        key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\n        try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )\n        except UniqueViolationError:\n            pass  # Already refilled this month\n\n        return self.num_user_credits_refill\n",
        "cfg": {
          "nodes": [
            {
              "id": "UserCredit.get_or_refill_credit_1",
              "code": "async def get_or_refill_credit(self, user_id: str) -> int:\n        cur_time = self.time_now()\n"
            },
            {
              "id": "UserCredit.get_or_refill_credit_2",
              "code": "        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )\n"
            },
            {
              "id": "UserCredit.get_or_refill_credit_3",
              "code": "        user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )\n"
            },
            {
              "id": "UserCredit.get_or_refill_credit_4",
              "code": "        if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)\n"
            },
            {
              "id": "UserCredit.get_or_refill_credit_5",
              "code": "        key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\n"
            },
            {
              "id": "UserCredit.get_or_refill_credit_6",
              "code": "        try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )\n"
            },
            {
              "id": "UserCredit.get_or_refill_credit_7",
              "code": "        except UniqueViolationError:\n            pass  # Already refilled this month\n"
            },
            {
              "id": "UserCredit.get_or_refill_credit_8",
              "code": "        return self.num_user_credits_refill\n"
            }
          ],
          "edges": [
            {
              "from": "UserCredit.get_or_refill_credit_1",
              "to": "UserCredit.get_or_refill_credit_2"
            },
            {
              "from": "UserCredit.get_or_refill_credit_2",
              "to": "UserCredit.get_or_refill_credit_3"
            },
            {
              "from": "UserCredit.get_or_refill_credit_3",
              "to": "UserCredit.get_or_refill_credit_4"
            },
            {
              "from": "UserCredit.get_or_refill_credit_3",
              "to": "UserCredit.get_or_refill_credit_5"
            },
            {
              "from": "UserCredit.get_or_refill_credit_5",
              "to": "UserCredit.get_or_refill_credit_6"
            },
            {
              "from": "UserCredit.get_or_refill_credit_6",
              "to": "UserCredit.get_or_refill_credit_7"
            },
            {
              "from": "UserCredit.get_or_refill_credit_6",
              "to": "UserCredit.get_or_refill_credit_8"
            },
            {
              "from": "UserCredit.get_or_refill_credit_7",
              "to": "UserCredit.get_or_refill_credit_8"
            }
          ]
        }
      },
      {
        "decl_name": "UserCredit.time_now",
        "start_line": 110,
        "end_line": 111,
        "children": [],
        "code": "    def time_now():\n        return datetime.now(timezone.utc)\n",
        "cfg": {
          "nodes": [
            {
              "id": "UserCredit.time_now_1",
              "code": "def time_now():\n        return datetime.now(timezone.utc)\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "UserCredit._block_usage_cost",
        "start_line": 113,
        "end_line": 143,
        "children": [],
        "code": "    def _block_usage_cost(\n        self,\n        block: Block,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> tuple[int, BlockInput]:\n        block_costs = BLOCK_COSTS.get(type(block))\n        if not block_costs:\n            return 0, {}\n\n        for block_cost in block_costs:\n            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue\n\n            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter\n\n            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n        return 0, {}\n",
        "cfg": {
          "nodes": [
            {
              "id": "UserCredit._block_usage_cost_1",
              "code": "def _block_usage_cost(\n        self,\n        block: Block,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> tuple[int, BlockInput]:\n"
            },
            {
              "id": "UserCredit._block_usage_cost_2",
              "code": "        block_costs = BLOCK_COSTS.get(type(block))\n        if not block_costs:\n            return 0, {}\n"
            },
            {
              "id": "UserCredit._block_usage_cost_3",
              "code": "        for block_cost in block_costs:\n            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue\n"
            },
            {
              "id": "UserCredit._block_usage_cost_4",
              "code": "            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter\n"
            },
            {
              "id": "UserCredit._block_usage_cost_5",
              "code": "            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n"
            },
            {
              "id": "UserCredit._block_usage_cost_6",
              "code": "            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n"
            },
            {
              "id": "UserCredit._block_usage_cost_7",
              "code": "        return 0, {}\n"
            }
          ],
          "edges": [
            {
              "from": "UserCredit._block_usage_cost_1",
              "to": "UserCredit._block_usage_cost_2"
            },
            {
              "from": "UserCredit._block_usage_cost_2",
              "to": "UserCredit._block_usage_cost_3"
            },
            {
              "from": "UserCredit._block_usage_cost_2",
              "to": "UserCredit._block_usage_cost_7"
            },
            {
              "from": "UserCredit._block_usage_cost_3",
              "to": "UserCredit._block_usage_cost_4"
            },
            {
              "from": "UserCredit._block_usage_cost_3",
              "to": "UserCredit._block_usage_cost_5"
            },
            {
              "from": "UserCredit._block_usage_cost_3",
              "to": "UserCredit._block_usage_cost_6"
            },
            {
              "from": "UserCredit._block_usage_cost_3",
              "to": "UserCredit._block_usage_cost_7"
            }
          ]
        }
      },
      {
        "decl_name": "UserCredit._is_cost_filter_match",
        "start_line": 145,
        "end_line": 161,
        "children": [],
        "code": "    def _is_cost_filter_match(\n        self, cost_filter: BlockInput, input_data: BlockInput\n    ) -> bool:\n        \"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"\n        if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):\n            return cost_filter == input_data\n\n        return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "UserCredit._is_cost_filter_match_1",
              "code": "def _is_cost_filter_match(\n        self, cost_filter: BlockInput, input_data: BlockInput\n    ) -> bool:\n        \"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"\n"
            },
            {
              "id": "UserCredit._is_cost_filter_match_2",
              "code": "        if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):\n            return cost_filter == input_data\n"
            },
            {
              "id": "UserCredit._is_cost_filter_match_3",
              "code": "        return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "UserCredit._is_cost_filter_match_1",
              "to": "UserCredit._is_cost_filter_match_2"
            },
            {
              "from": "UserCredit._is_cost_filter_match_2",
              "to": "UserCredit._is_cost_filter_match_3"
            }
          ]
        }
      },
      {
        "decl_name": "UserCredit.spend_credits",
        "start_line": 163,
        "end_line": 201,
        "children": [],
        "code": "    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n        validate_balance: bool = True,\n    ) -> int:\n        block = get_block(block_id)\n        if not block:\n            raise ValueError(f\"Block not found: {block_id}\")\n\n        cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )\n        if cost <= 0:\n            return 0\n\n        if validate_balance and user_credit < cost:\n            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")\n\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )\n        return cost\n",
        "cfg": {
          "nodes": [
            {
              "id": "UserCredit.spend_credits_1",
              "code": "async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n        validate_balance: bool = True,\n    ) -> int:\n"
            },
            {
              "id": "UserCredit.spend_credits_2",
              "code": "        block = get_block(block_id)\n        if not block:\n            raise ValueError(f\"Block not found: {block_id}\")\n"
            },
            {
              "id": "UserCredit.spend_credits_3",
              "code": "        cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )\n"
            },
            {
              "id": "UserCredit.spend_credits_4",
              "code": "        if cost <= 0:\n            return 0\n"
            },
            {
              "id": "UserCredit.spend_credits_5",
              "code": "        if validate_balance and user_credit < cost:\n            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")\n"
            },
            {
              "id": "UserCredit.spend_credits_6",
              "code": "        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )\n"
            },
            {
              "id": "UserCredit.spend_credits_7",
              "code": "        return cost\n"
            }
          ],
          "edges": [
            {
              "from": "UserCredit.spend_credits_1",
              "to": "UserCredit.spend_credits_2"
            },
            {
              "from": "UserCredit.spend_credits_2",
              "to": "UserCredit.spend_credits_3"
            },
            {
              "from": "UserCredit.spend_credits_3",
              "to": "UserCredit.spend_credits_4"
            },
            {
              "from": "UserCredit.spend_credits_4",
              "to": "UserCredit.spend_credits_5"
            },
            {
              "from": "UserCredit.spend_credits_4",
              "to": "UserCredit.spend_credits_7"
            },
            {
              "from": "UserCredit.spend_credits_5",
              "to": "UserCredit.spend_credits_6"
            },
            {
              "from": "UserCredit.spend_credits_5",
              "to": "UserCredit.spend_credits_7"
            },
            {
              "from": "UserCredit.spend_credits_6",
              "to": "UserCredit.spend_credits_7"
            }
          ]
        }
      },
      {
        "decl_name": "UserCredit.top_up_credits",
        "start_line": 203,
        "end_line": 211,
        "children": [],
        "code": "    async def top_up_credits(self, user_id: str, amount: int):\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "UserCredit.top_up_credits_1",
              "code": "async def top_up_credits(self, user_id: str, amount: int):\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )\n"
            }
          ],
          "edges": []
        }
      }
    ],
    "code": "class UserCredit(UserCreditBase):\n\n    @staticmethod\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "UserCredit_1",
          "code": "class UserCredit(UserCreditBase):\n"
        },
        {
          "id": "UserCredit_2",
          "code": "    @staticmethod\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "DisabledUserCredit",
    "start_line": 214,
    "end_line": 223,
    "children": [
      {
        "decl_name": "DisabledUserCredit.get_or_refill_credit",
        "start_line": 215,
        "end_line": 216,
        "children": [],
        "code": "    async def get_or_refill_credit(self, *args, **kwargs) -> int:\n        return 0\n",
        "cfg": {
          "nodes": [
            {
              "id": "DisabledUserCredit.get_or_refill_credit_1",
              "code": "async def get_or_refill_credit(self, *args, **kwargs) -> int:\n        return 0\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "DisabledUserCredit.spend_credits",
        "start_line": 218,
        "end_line": 219,
        "children": [],
        "code": "    async def spend_credits(self, *args, **kwargs) -> int:\n        return 0\n",
        "cfg": {
          "nodes": [
            {
              "id": "DisabledUserCredit.spend_credits_1",
              "code": "async def spend_credits(self, *args, **kwargs) -> int:\n        return 0\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "DisabledUserCredit.top_up_credits",
        "start_line": 221,
        "end_line": 222,
        "children": [],
        "code": "    async def top_up_credits(self, *args, **kwargs):\n        pass\n",
        "cfg": {
          "nodes": [
            {
              "id": "DisabledUserCredit.top_up_credits_1",
              "code": "async def top_up_credits(self, *args, **kwargs):\n        pass\n"
            }
          ],
          "edges": []
        }
      }
    ],
    "code": "class DisabledUserCredit(UserCreditBase):\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "DisabledUserCredit_1",
          "code": "class DisabledUserCredit(UserCreditBase):\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "get_user_credit_model",
    "start_line": 225,
    "end_line": 229,
    "children": [],
    "code": "def get_user_credit_model() -> UserCreditBase:\n    if config.enable_credit.lower() == \"true\":\n        return UserCredit(config.num_user_credits_refill)\n    else:\n        return DisabledUserCredit(0)\n",
    "cfg": {
      "nodes": [
        {
          "id": "get_user_credit_model_1",
          "code": "def get_user_credit_model() -> UserCreditBase:\n"
        },
        {
          "id": "get_user_credit_model_2",
          "code": "    if config.enable_credit.lower() == \"true\":\n"
        },
        {
          "id": "get_user_credit_model_3",
          "code": "        return UserCredit(config.num_user_credits_refill)\n"
        },
        {
          "id": "get_user_credit_model_4",
          "code": "    else:\n        return DisabledUserCredit(0)\n"
        }
      ],
      "edges": [
        {
          "from": "get_user_credit_model_1",
          "to": "get_user_credit_model_2"
        },
        {
          "from": "get_user_credit_model_2",
          "to": "get_user_credit_model_3"
        },
        {
          "from": "get_user_credit_model_2",
          "to": "get_user_credit_model_4"
        }
      ]
    }
  },
  {
    "decl_name": "get_block_costs",
    "start_line": 232,
    "end_line": 233,
    "children": [],
    "code": "def get_block_costs() -> dict[str, list[BlockCost]]:\n    return {block().id: costs for block, costs in BLOCK_COSTS.items()}\n",
    "cfg": {
      "nodes": [
        {
          "id": "get_block_costs_1",
          "code": "def get_block_costs() -> dict[str, list[BlockCost]]:\n    return {block().id: costs for block, costs in BLOCK_COSTS.items()}\n"
        }
      ],
      "edges": []
    }
  }
]