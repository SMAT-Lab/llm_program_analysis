{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 117,
  "functions": [],
  "classes": [
    {
      "name": "Suit",
      "type": "class",
      "start_line": 6,
      "end_line": 11,
      "functions": [],
      "simplified_code": "class Suit(Enum):\n\n    HEART = 0\n    DIAMOND = 1\n    CLUBS = 2\n    SPADE = 3",
      "blocks": [
        {
          "id": 1,
          "label": "class Suit(Enum):",
          "successors": [
            {
              "id": 2,
              "label": "    HEART = 0\n    DIAMOND = 1\n    CLUBS = 2\n    SPADE = 3",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Card",
      "type": "class",
      "start_line": 14,
      "end_line": 29,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 16,
          "end_line": 19,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, value, suit):\n        self.value = value\n        self.suit = suit\n        self.is_available = True",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, value, suit):",
              "successors": [
                {
                  "id": 2,
                  "label": "self.value = value\nself.suit = suit\nself.is_available = True",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "value",
          "type": "function",
          "start_line": 23,
          "end_line": 24,
          "functions": [],
          "classes": [],
          "simplified_code": "    def value(self):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def value(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "value",
          "type": "function",
          "start_line": 28,
          "end_line": 29,
          "functions": [],
          "classes": [],
          "simplified_code": "    def value(self, other):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def value(self, other):",
              "successors": [
                {
                  "id": 2,
                  "label": "    pass",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Card(metaclass=ABCMeta):\n\n        self.is_available = True\n\n    @property\n    @abstractmethod\n        pass\n\n    @value.setter\n    @abstractmethod\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class Card(metaclass=ABCMeta):",
          "successors": [
            {
              "id": 2,
              "label": "self.is_available = True",
              "successors": []
            },
            {
              "id": 3,
              "label": "@property\n@abstractmethod\npass",
              "successors": []
            },
            {
              "id": 4,
              "label": "@value.setter\n@abstractmethod\npass",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "BlackJackCard",
      "type": "class",
      "start_line": 32,
      "end_line": 58,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 34,
          "end_line": 35,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, value, suit):",
              "successors": [
                {
                  "id": 2,
                  "label": "    super(BlackJackCard, self).__init__(value, suit)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "is_ace",
          "type": "function",
          "start_line": 37,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "    def is_ace(self):\n        return True if self._value == 1 else False",
          "blocks": [
            {
              "id": 1,
              "label": "def is_ace(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "return True if self._value == 1 else False",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "is_face_card",
          "type": "function",
          "start_line": 40,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False",
          "blocks": [
            {
              "id": 1,
              "label": "def is_face_card(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "\"\"\"Jack = 11, Queen = 12, King = 13\"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return True if 10 < self._value <= 13 else False",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "value",
          "type": "function",
          "start_line": 45,
          "end_line": 51,
          "functions": [],
          "classes": [],
          "simplified_code": "    def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value",
          "blocks": [
            {
              "id": 1,
              "label": "def value(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "if self.is_ace() == 1:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return 1",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "elif self.is_face_card():",
                      "successors": [
                        {
                          "id": 5,
                          "label": "return 10",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "else:",
                          "successors": [
                            {
                              "id": 7,
                              "label": "return self._value",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "value",
          "type": "function",
          "start_line": 54,
          "end_line": 58,
          "functions": [],
          "classes": [],
          "simplified_code": "    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
          "blocks": [
            {
              "id": 1,
              "label": "def value(self, new_value):",
              "successors": [
                {
                  "id": 2,
                  "label": "if 1 <= new_value <= 13:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "self._value = new_value",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "raise ValueError('Invalid card value: {}'.format(new_value))",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class BlackJackCard(Card):\n\n        super(BlackJackCard, self).__init__(value, suit)\n\n        return True if self._value == 1 else False\n\n        return True if 10 < self._value <= 13 else False\n\n    @property\n            return self._value\n\n    @value.setter\n            raise ValueError('Invalid card value: {}'.format(new_value))",
      "blocks": [
        {
          "id": 1,
          "label": "class BlackJackCard(Card):",
          "successors": [
            {
              "id": 2,
              "label": "super(BlackJackCard, self).__init__(value, suit)",
              "successors": [
                {
                  "id": 3,
                  "label": "return True if self._value == 1 else False",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "return True if 10 < self._value <= 13 else False",
                  "successors": []
                }
              ]
            },
            {
              "id": 5,
              "label": "@property",
              "successors": [
                {
                  "id": 6,
                  "label": "return self._value",
                  "successors": [
                    {
                      "id": 7,
                      "label": "@value.setter",
                      "successors": [
                        {
                          "id": 8,
                          "label": "raise ValueError('Invalid card value: {}'.format(new_value))",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Hand",
      "type": "class",
      "start_line": 61,
      "end_line": 73,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 63,
          "end_line": 64,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, cards):\n        self.cards = cards",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, cards):",
              "successors": [
                {
                  "id": 2,
                  "label": "    self.cards = cards",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "add_card",
          "type": "function",
          "start_line": 66,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "    def add_card(self, card):\n        self.cards.append(card)",
          "blocks": [
            {
              "id": 1,
              "label": "def add_card(self, card):",
              "successors": [
                {
                  "id": 2,
                  "label": "    self.cards.append(card)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "score",
          "type": "function",
          "start_line": 69,
          "end_line": 73,
          "functions": [],
          "classes": [],
          "simplified_code": "    def score(self):\n        total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value",
          "blocks": [
            {
              "id": 1,
              "label": "total_value = 0",
              "successors": [
                {
                  "id": 2,
                  "label": "for card in self.cards:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    total_value += card.value",
                      "successors": [
                        {
                          "id": 4,
                          "label": "return total_value",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "return total_value",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Hand(object):\n\n        self.cards = cards\n\n        self.cards.append(card)\n\n        return total_value",
      "blocks": [
        {
          "id": 1,
          "label": "class Hand(object):",
          "successors": [
            {
              "id": 2,
              "label": "self.cards = cards",
              "successors": [
                {
                  "id": 3,
                  "label": "self.cards.append(card)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "return total_value",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "BlackJackHand",
      "type": "class",
      "start_line": 76,
      "end_line": 95,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 80,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, cards):",
              "successors": [
                {
                  "id": 2,
                  "label": "super(BlackJackHand, self).__init__(cards)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "score",
          "type": "function",
          "start_line": 83,
          "end_line": 91,
          "functions": [],
          "classes": [],
          "simplified_code": "    def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over",
          "blocks": [
            {
              "id": 1,
              "label": "min_over = sys.MAXSIZE\nmax_under = -sys.MAXSIZE",
              "successors": [
                {
                  "id": 2,
                  "label": "for score in self.possible_scores():",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if self.BLACKJACK < score < min_over:",
                      "successors": [
                        {
                          "id": 4,
                          "label": "min_over = score",
                          "successors": [
                            {
                              "id": 6,
                              "label": "return max_under if max_under != -sys.MAXSIZE else min_over",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 5,
                      "label": "elif max_under < score <= self.BLACKJACK:",
                      "successors": [
                        {
                          "id": 6,
                          "label": "max_under = score",
                          "successors": [
                            {
                              "id": 6,
                              "label": "return max_under if max_under != -sys.MAXSIZE else min_over",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "possible_scores",
          "type": "function",
          "start_line": 93,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": "    def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def possible_scores(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "\"\"\"Return a list of possible scores, taking Aces into account.\"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "label": "pass",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class BlackJackHand(Hand):\n\n    BLACKJACK = 21\n\n        super(BlackJackHand, self).__init__(cards)\n\n        return max_under if max_under != -sys.MAXSIZE else min_over\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class BlackJackHand(Hand):",
          "successors": [
            {
              "id": 2,
              "label": "BLACKJACK = 21",
              "successors": []
            },
            {
              "id": 3,
              "label": "super(BlackJackHand, self).__init__(cards)",
              "successors": []
            },
            {
              "id": 4,
              "label": "return max_under if max_under != -sys.MAXSIZE else min_over",
              "successors": []
            },
            {
              "id": 5,
              "label": "pass",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Deck",
      "type": "class",
      "start_line": 98,
      "end_line": 117,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 100,
          "end_line": 102,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, cards):",
              "successors": [
                {
                  "id": 2,
                  "label": "    self.cards = cards",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    self.deal_index = 0",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "remaining_cards",
          "type": "function",
          "start_line": 104,
          "end_line": 105,
          "functions": [],
          "classes": [],
          "simplified_code": "    def remaining_cards(self):\n        return len(self.cards) - self.deal_index",
          "blocks": [
            {
              "id": 1,
              "label": "def remaining_cards(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "return len(self.cards) - self.deal_index",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "deal_card",
          "type": "function",
          "start_line": 107,
          "end_line": 114,
          "functions": [],
          "classes": [],
          "simplified_code": "    def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card",
          "blocks": [
            {
              "id": 1,
              "label": "def deal_card(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "card = self.cards[self.deal_index]\ncard.is_available = False\nself.deal_index += 1",
                      "successors": [
                        {
                          "id": 5,
                          "label": "return card",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "except IndexError:",
                      "successors": [
                        {
                          "id": 6,
                          "label": "return None",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "shuffle",
          "type": "function",
          "start_line": 116,
          "end_line": 117,
          "functions": [],
          "classes": [],
          "simplified_code": "    def shuffle(self):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def shuffle(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Deck(object):\n\n        self.deal_index = 0\n\n        return len(self.cards) - self.deal_index\n\n        return card\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "self.deal_index = 0",
          "successors": [
            {
              "id": 2,
              "label": "return len(self.cards) - self.deal_index",
              "successors": []
            }
          ]
        },
        {
          "id": 3,
          "label": "return card",
          "successors": []
        },
        {
          "id": 4,
          "label": "pass",
          "successors": []
        }
      ]
    }
  ],
  "simplified_code": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\nimport sys\n\n\n    SPADE = 3\n\n\n        pass\n\n\n            raise ValueError('Invalid card value: {}'.format(new_value))\n\n\n        return total_value\n\n\n        pass\n\n\n        pass",
  "blocks": [
    {
      "id": 1,
      "label": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\nimport sys",
      "successors": [
        {
          "id": 2,
          "label": "SPADE = 3",
          "successors": [
            {
              "id": 3,
              "label": "pass",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "id": 4,
      "label": "raise ValueError('Invalid card value: {}'.format(new_value))",
      "successors": []
    },
    {
      "id": 5,
      "label": "return total_value",
      "successors": []
    },
    {
      "id": 6,
      "label": "pass",
      "successors": []
    },
    {
      "id": 7,
      "label": "pass",
      "successors": []
    }
  ]
}