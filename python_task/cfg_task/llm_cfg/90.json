[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 7,
    "children": [],
    "code": "import time\nfrom datetime import datetime, timedelta\nfrom typing import Any, Union\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import time\nfrom datetime import datetime, timedelta\nfrom typing import Any, Union\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GetCurrentTimeBlock",
    "start_line": 8,
    "end_line": 42,
    "children": [
      {
        "decl_name": "GetCurrentTimeBlock.Input",
        "start_line": 9,
        "end_line": 15,
        "children": [],
        "code": "    class Input(BlockSchema):\n        trigger: str = SchemaField(\n            description=\"Trigger any data to output the current time\"\n        )\n        format: str = SchemaField(\n            description=\"Format of the time to output\", default=\"%H:%M:%S\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GetCurrentTimeBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "GetCurrentTimeBlock.Input_2",
              "code": "        trigger: str = SchemaField(\n            description=\"Trigger any data to output the current time\"\n        )\n"
            },
            {
              "id": "GetCurrentTimeBlock.Input_3",
              "code": "        format: str = SchemaField(\n            description=\"Format of the time to output\", default=\"%H:%M:%S\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GetCurrentTimeBlock.Output",
        "start_line": 17,
        "end_line": 20,
        "children": [],
        "code": "    class Output(BlockSchema):\n        time: str = SchemaField(\n            description=\"Current time in the specified format (default: %H:%M:%S)\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GetCurrentTimeBlock.Output_1",
              "code": "class Output(BlockSchema):\n        time: str = SchemaField(\n            description=\"Current time in the specified format (default: %H:%M:%S)\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GetCurrentTimeBlock.__init__",
        "start_line": 22,
        "end_line": 37,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"a892b8d9-3e4e-4e9c-9c1e-75f8efcf1bfa\",\n            description=\"This block outputs the current time.\",\n            categories={BlockCategory.TEXT},\n            input_schema=GetCurrentTimeBlock.Input,\n            output_schema=GetCurrentTimeBlock.Output,\n            test_input=[\n                {\"trigger\": \"Hello\"},\n                {\"trigger\": \"Hello\", \"format\": \"%H:%M\"},\n            ],\n            test_output=[\n                (\"time\", lambda _: time.strftime(\"%H:%M:%S\")),\n                (\"time\", lambda _: time.strftime(\"%H:%M\")),\n            ],\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GetCurrentTimeBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"a892b8d9-3e4e-4e9c-9c1e-75f8efcf1bfa\",\n            description=\"This block outputs the current time.\",\n            categories={BlockCategory.TEXT},\n            input_schema=GetCurrentTimeBlock.Input,\n            output_schema=GetCurrentTimeBlock.Output,\n            test_input=[\n                {\"trigger\": \"Hello\"},\n                {\"trigger\": \"Hello\", \"format\": \"%H:%M\"},\n            ],\n            test_output=[\n                (\"time\", lambda _: time.strftime(\"%H:%M:%S\")),\n                (\"time\", lambda _: time.strftime(\"%H:%M\")),\n            ],\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GetCurrentTimeBlock.run",
        "start_line": 39,
        "end_line": 41,
        "children": [],
        "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_time = time.strftime(input_data.format)\n        yield \"time\", current_time\n",
        "cfg": {
          "nodes": [
            {
              "id": "GetCurrentTimeBlock.run_1",
              "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n"
            },
            {
              "id": "GetCurrentTimeBlock.run_2",
              "code": "        current_time = time.strftime(input_data.format)\n        yield \"time\", current_time\n"
            }
          ],
          "edges": [
            {
              "from": "GetCurrentTimeBlock.run_1",
              "to": "GetCurrentTimeBlock.run_2"
            }
          ]
        }
      }
    ],
    "code": "class GetCurrentTimeBlock(Block):\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GetCurrentTimeBlock_1",
          "code": "class GetCurrentTimeBlock(Block):\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GetCurrentDateBlock",
    "start_line": 44,
    "end_line": 96,
    "children": [
      {
        "decl_name": "GetCurrentDateBlock.Input",
        "start_line": 45,
        "end_line": 56,
        "children": [],
        "code": "    class Input(BlockSchema):\n        trigger: str = SchemaField(\n            description=\"Trigger any data to output the current date\"\n        )\n        offset: Union[int, str] = SchemaField(\n            title=\"Days Offset\",\n            description=\"Offset in days from the current date\",\n            default=0,\n        )\n        format: str = SchemaField(\n            description=\"Format of the date to output\", default=\"%Y-%m-%d\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GetCurrentDateBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "GetCurrentDateBlock.Input_2",
              "code": "        trigger: str = SchemaField(\n            description=\"Trigger any data to output the current date\"\n        )\n"
            },
            {
              "id": "GetCurrentDateBlock.Input_3",
              "code": "        offset: Union[int, str] = SchemaField(\n            title=\"Days Offset\",\n            description=\"Offset in days from the current date\",\n            default=0,\n        )\n"
            },
            {
              "id": "GetCurrentDateBlock.Input_4",
              "code": "        format: str = SchemaField(\n            description=\"Format of the date to output\", default=\"%Y-%m-%d\"\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GetCurrentDateBlock.Input_1",
              "to": "GetCurrentDateBlock.Input_2"
            },
            {
              "from": "GetCurrentDateBlock.Input_2",
              "to": "GetCurrentDateBlock.Input_3"
            },
            {
              "from": "GetCurrentDateBlock.Input_3",
              "to": "GetCurrentDateBlock.Input_4"
            }
          ]
        }
      },
      {
        "decl_name": "GetCurrentDateBlock.Output",
        "start_line": 58,
        "end_line": 61,
        "children": [],
        "code": "    class Output(BlockSchema):\n        date: str = SchemaField(\n            description=\"Current date in the specified format (default: YYYY-MM-DD)\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GetCurrentDateBlock.Output_1",
              "code": "class Output(BlockSchema):\n        date: str = SchemaField(\n            description=\"Current date in the specified format (default: YYYY-MM-DD)\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GetCurrentDateBlock.__init__",
        "start_line": 63,
        "end_line": 87,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"b29c1b50-5d0e-4d9f-8f9d-1b0e6fcbf0b1\",\n            description=\"This block outputs the current date with an optional offset.\",\n            categories={BlockCategory.TEXT},\n            input_schema=GetCurrentDateBlock.Input,\n            output_schema=GetCurrentDateBlock.Output,\n            test_input=[\n                {\"trigger\": \"Hello\", \"offset\": \"7\"},\n                {\"trigger\": \"Hello\", \"offset\": \"7\", \"format\": \"%m/%d/%Y\"},\n            ],\n            test_output=[\n                (\n                    \"date\",\n                    lambda t: abs(datetime.now() - datetime.strptime(t, \"%Y-%m-%d\"))\n                    < timedelta(days=8),  # 7 days difference + 1 day error margin.\n                ),\n                (\n                    \"date\",\n                    lambda t: abs(datetime.now() - datetime.strptime(t, \"%m/%d/%Y\"))\n                    < timedelta(days=8),\n                    # 7 days difference + 1 day error margin.\n                ),\n            ],\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GetCurrentDateBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"b29c1b50-5d0e-4d9f-8f9d-1b0e6fcbf0b1\",\n            description=\"This block outputs the current date with an optional offset.\",\n            categories={BlockCategory.TEXT},\n            input_schema=GetCurrentDateBlock.Input,\n            output_schema=GetCurrentDateBlock.Output,\n            test_input=[\n                {\"trigger\": \"Hello\", \"offset\": \"7\"},\n                {\"trigger\": \"Hello\", \"offset\": \"7\", \"format\": \"%m/%d/%Y\"},\n            ],\n            test_output=[\n                (\n                    \"date\",\n                    lambda t: abs(datetime.now() - datetime.strptime(t, \"%Y-%m-%d\"))\n                    < timedelta(days=8),  # 7 days difference + 1 day error margin.\n                ),\n                (\n                    \"date\",\n                    lambda t: abs(datetime.now() - datetime.strptime(t, \"%m/%d/%Y\"))\n                    < timedelta(days=8),\n                    # 7 days difference + 1 day error margin.\n                ),\n            ],\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GetCurrentDateBlock.run",
        "start_line": 89,
        "end_line": 95,
        "children": [],
        "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            offset = int(input_data.offset)\n        except ValueError:\n            offset = 0\n        current_date = datetime.now() - timedelta(days=offset)\n        yield \"date\", current_date.strftime(input_data.format)\n",
        "cfg": {
          "nodes": [
            {
              "id": "GetCurrentDateBlock.run_1",
              "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n"
            },
            {
              "id": "GetCurrentDateBlock.run_2",
              "code": "        try:\n            offset = int(input_data.offset)\n        except ValueError:\n            offset = 0\n"
            },
            {
              "id": "GetCurrentDateBlock.run_3",
              "code": "        current_date = datetime.now() - timedelta(days=offset)\n        yield \"date\", current_date.strftime(input_data.format)\n"
            }
          ],
          "edges": [
            {
              "from": "GetCurrentDateBlock.run_1",
              "to": "GetCurrentDateBlock.run_2"
            },
            {
              "from": "GetCurrentDateBlock.run_2",
              "to": "GetCurrentDateBlock.run_3"
            }
          ]
        }
      }
    ],
    "code": "class GetCurrentDateBlock(Block):\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GetCurrentDateBlock_1",
          "code": "class GetCurrentDateBlock(Block):\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "GetCurrentDateAndTimeBlock",
    "start_line": 98,
    "end_line": 137,
    "children": [
      {
        "decl_name": "GetCurrentDateAndTimeBlock.Input",
        "start_line": 99,
        "end_line": 106,
        "children": [],
        "code": "    class Input(BlockSchema):\n        trigger: str = SchemaField(\n            description=\"Trigger any data to output the current date and time\"\n        )\n        format: str = SchemaField(\n            description=\"Format of the date and time to output\",\n            default=\"%Y-%m-%d %H:%M:%S\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GetCurrentDateAndTimeBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "GetCurrentDateAndTimeBlock.Input_2",
              "code": "        trigger: str = SchemaField(\n            description=\"Trigger any data to output the current date and time\"\n        )\n"
            },
            {
              "id": "GetCurrentDateAndTimeBlock.Input_3",
              "code": "        format: str = SchemaField(\n            description=\"Format of the date and time to output\",\n            default=\"%Y-%m-%d %H:%M:%S\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GetCurrentDateAndTimeBlock.Input_1",
              "to": "GetCurrentDateAndTimeBlock.Input_2"
            },
            {
              "from": "GetCurrentDateAndTimeBlock.Input_1",
              "to": "GetCurrentDateAndTimeBlock.Input_3"
            }
          ]
        }
      },
      {
        "decl_name": "GetCurrentDateAndTimeBlock.Output",
        "start_line": 108,
        "end_line": 111,
        "children": [],
        "code": "    class Output(BlockSchema):\n        date_time: str = SchemaField(\n            description=\"Current date and time in the specified format (default: YYYY-MM-DD HH:MM:SS)\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GetCurrentDateAndTimeBlock.Output_1",
              "code": "class Output(BlockSchema):\n        date_time: str = SchemaField(\n            description=\"Current date and time in the specified format (default: YYYY-MM-DD HH:MM:SS)\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GetCurrentDateAndTimeBlock.__init__",
        "start_line": 113,
        "end_line": 132,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"716a67b3-6760-42e7-86dc-18645c6e00fc\",\n            description=\"This block outputs the current date and time.\",\n            categories={BlockCategory.TEXT},\n            input_schema=GetCurrentDateAndTimeBlock.Input,\n            output_schema=GetCurrentDateAndTimeBlock.Output,\n            test_input=[\n                {\"trigger\": \"Hello\"},\n            ],\n            test_output=[\n                (\n                    \"date_time\",\n                    lambda t: abs(\n                        datetime.now() - datetime.strptime(t, \"%Y-%m-%d %H:%M:%S\")\n                    )\n                    < timedelta(seconds=10),  # 10 seconds error margin.\n                ),\n            ],\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GetCurrentDateAndTimeBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"716a67b3-6760-42e7-86dc-18645c6e00fc\",\n            description=\"This block outputs the current date and time.\",\n            categories={BlockCategory.TEXT},\n            input_schema=GetCurrentDateAndTimeBlock.Input,\n            output_schema=GetCurrentDateAndTimeBlock.Output,\n            test_input=[\n                {\"trigger\": \"Hello\"},\n            ],\n            test_output=[\n                (\n                    \"date_time\",\n                    lambda t: abs(\n                        datetime.now() - datetime.strptime(t, \"%Y-%m-%d %H:%M:%S\")\n                    )\n                    < timedelta(seconds=10),  # 10 seconds error margin.\n                ),\n            ],\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GetCurrentDateAndTimeBlock.run",
        "start_line": 134,
        "end_line": 136,
        "children": [],
        "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_date_time = time.strftime(input_data.format)\n        yield \"date_time\", current_date_time\n",
        "cfg": {
          "nodes": [
            {
              "id": "GetCurrentDateAndTimeBlock.run_1",
              "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n"
            },
            {
              "id": "GetCurrentDateAndTimeBlock.run_2",
              "code": "        current_date_time = time.strftime(input_data.format)\n        yield \"date_time\", current_date_time\n"
            }
          ],
          "edges": [
            {
              "from": "GetCurrentDateAndTimeBlock.run_1",
              "to": "GetCurrentDateAndTimeBlock.run_2"
            }
          ]
        }
      }
    ],
    "code": "class GetCurrentDateAndTimeBlock(Block):\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GetCurrentDateAndTimeBlock_1",
          "code": "class GetCurrentDateAndTimeBlock(Block):\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "CountdownTimerBlock",
    "start_line": 139,
    "end_line": 191,
    "children": [
      {
        "decl_name": "CountdownTimerBlock.Input",
        "start_line": 140,
        "end_line": 157,
        "children": [],
        "code": "    class Input(BlockSchema):\n        input_message: Any = SchemaField(\n            advanced=False,\n            description=\"Message to output after the timer finishes\",\n            default=\"timer finished\",\n        )\n        seconds: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in seconds\", default=0\n        )\n        minutes: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in minutes\", default=0\n        )\n        hours: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in hours\", default=0\n        )\n        days: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in days\", default=0\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "CountdownTimerBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "CountdownTimerBlock.Input_2",
              "code": "        input_message: Any = SchemaField(\n            advanced=False,\n            description=\"Message to output after the timer finishes\",\n            default=\"timer finished\",\n        )\n"
            },
            {
              "id": "CountdownTimerBlock.Input_3",
              "code": "        seconds: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in seconds\", default=0\n        )\n"
            },
            {
              "id": "CountdownTimerBlock.Input_4",
              "code": "        minutes: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in minutes\", default=0\n        )\n"
            },
            {
              "id": "CountdownTimerBlock.Input_5",
              "code": "        hours: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in hours\", default=0\n        )\n"
            },
            {
              "id": "CountdownTimerBlock.Input_6",
              "code": "        days: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in days\", default=0\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "CountdownTimerBlock.Input_1",
              "to": "CountdownTimerBlock.Input_2"
            },
            {
              "from": "CountdownTimerBlock.Input_2",
              "to": "CountdownTimerBlock.Input_3"
            },
            {
              "from": "CountdownTimerBlock.Input_3",
              "to": "CountdownTimerBlock.Input_4"
            },
            {
              "from": "CountdownTimerBlock.Input_4",
              "to": "CountdownTimerBlock.Input_5"
            },
            {
              "from": "CountdownTimerBlock.Input_5",
              "to": "CountdownTimerBlock.Input_6"
            }
          ]
        }
      },
      {
        "decl_name": "CountdownTimerBlock.Output",
        "start_line": 159,
        "end_line": 162,
        "children": [],
        "code": "    class Output(BlockSchema):\n        output_message: Any = SchemaField(\n            description=\"Message after the timer finishes\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "CountdownTimerBlock.Output_1",
              "code": "class Output(BlockSchema):\n        output_message: Any = SchemaField(\n            description=\"Message after the timer finishes\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "CountdownTimerBlock.__init__",
        "start_line": 164,
        "end_line": 179,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"d67a9c52-5e4e-11e2-bcfd-0800200c9a71\",\n            description=\"This block triggers after a specified duration.\",\n            categories={BlockCategory.TEXT},\n            input_schema=CountdownTimerBlock.Input,\n            output_schema=CountdownTimerBlock.Output,\n            test_input=[\n                {\"seconds\": 1},\n                {\"input_message\": \"Custom message\"},\n            ],\n            test_output=[\n                (\"output_message\", \"timer finished\"),\n                (\"output_message\", \"Custom message\"),\n            ],\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "CountdownTimerBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"d67a9c52-5e4e-11e2-bcfd-0800200c9a71\",\n            description=\"This block triggers after a specified duration.\",\n            categories={BlockCategory.TEXT},\n            input_schema=CountdownTimerBlock.Input,\n            output_schema=CountdownTimerBlock.Output,\n            test_input=[\n                {\"seconds\": 1},\n                {\"input_message\": \"Custom message\"},\n            ],\n            test_output=[\n                (\"output_message\", \"timer finished\"),\n                (\"output_message\", \"Custom message\"),\n            ],\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "CountdownTimerBlock.run",
        "start_line": 181,
        "end_line": 190,
        "children": [],
        "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        seconds = int(input_data.seconds)\n        minutes = int(input_data.minutes)\n        hours = int(input_data.hours)\n        days = int(input_data.days)\n\n        total_seconds = seconds + minutes * 60 + hours * 3600 + days * 86400\n\n        time.sleep(total_seconds)\n        yield \"output_message\", input_data.input_message\n",
        "cfg": {
          "nodes": [
            {
              "id": "CountdownTimerBlock.run_1",
              "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n"
            },
            {
              "id": "CountdownTimerBlock.run_2",
              "code": "        seconds = int(input_data.seconds)\n        minutes = int(input_data.minutes)\n        hours = int(input_data.hours)\n        days = int(input_data.days)\n"
            },
            {
              "id": "CountdownTimerBlock.run_3",
              "code": "        total_seconds = seconds + minutes * 60 + hours * 3600 + days * 86400\n"
            },
            {
              "id": "CountdownTimerBlock.run_4",
              "code": "        time.sleep(total_seconds)\n"
            },
            {
              "id": "CountdownTimerBlock.run_5",
              "code": "        yield \"output_message\", input_data.input_message\n"
            }
          ],
          "edges": [
            {
              "from": "CountdownTimerBlock.run_1",
              "to": "CountdownTimerBlock.run_2"
            },
            {
              "from": "CountdownTimerBlock.run_2",
              "to": "CountdownTimerBlock.run_3"
            },
            {
              "from": "CountdownTimerBlock.run_3",
              "to": "CountdownTimerBlock.run_4"
            },
            {
              "from": "CountdownTimerBlock.run_4",
              "to": "CountdownTimerBlock.run_5"
            }
          ]
        }
      }
    ],
    "code": "class CountdownTimerBlock(Block):\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "CountdownTimerBlock_1",
          "code": "class CountdownTimerBlock(Block):\n"
        }
      ],
      "edges": []
    }
  }
]