{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 191,
  "functions": [],
  "classes": [
    {
      "name": "GetCurrentTimeBlock",
      "type": "class",
      "start_line": 9,
      "end_line": 43,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 23,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"a892b8d9-3e4e-4e9c-9c1e-75f8efcf1bfa\",\n            description=\"This block outputs the current time.\",\n            categories={BlockCategory.TEXT},\n            input_schema=GetCurrentTimeBlock.Input,\n            output_schema=GetCurrentTimeBlock.Output,\n            test_input=[\n                {\"trigger\": \"Hello\"},\n                {\"trigger\": \"Hello\", \"format\": \"%H:%M\"},\n            ],\n            test_output=[\n                (\"time\", lambda _: time.strftime(\"%H:%M:%S\")),\n                (\"time\", lambda _: time.strftime(\"%H:%M\")),\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "super().__init__(\n    id=\"a892b8d9-3e4e-4e9c-9c1e-75f8efcf1bfa\",\n    description=\"This block outputs the current time.\",\n    categories={BlockCategory.TEXT},\n    input_schema=GetCurrentTimeBlock.Input,\n    output_schema=GetCurrentTimeBlock.Output,\n    test_input=[\n        {\"trigger\": \"Hello\"},\n        {\"trigger\": \"Hello\", \"format\": \"%H:%M\"},\n    ],\n    test_output=[\n        (\"time\", lambda _: time.strftime(\"%H:%M:%S\")),\n        (\"time\", lambda _: time.strftime(\"%H:%M\")),\n    ],\n)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 40,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_time = time.strftime(input_data.format)\n        yield \"time\", current_time",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "label": "    current_time = time.strftime(input_data.format)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    yield \"time\", current_time",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 10,
          "end_line": 16,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        trigger: str = SchemaField(\n            description=\"Trigger any data to output the current time\"\n        )\n        format: str = SchemaField(\n            description=\"Format of the time to output\", default=\"%H:%M:%S\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    trigger: str = SchemaField(description=\"Trigger any data to output the current time\")",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    format: str = SchemaField(description=\"Format of the time to output\", default=\"%H:%M:%S\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 18,
          "end_line": 21,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        time: str = SchemaField(\n            description=\"Current time in the specified format (default: %H:%M:%S)\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    time: str = SchemaField(description=\"Current time in the specified format (default: %H:%M:%S)\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class GetCurrentTimeBlock(Block):\n        )\n\n        )\n\n        )\n\n        yield \"time\", current_time\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GetCurrentTimeBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": ")",
              "successors": [
                {
                  "id": 3,
                  "label": ")",
                  "successors": [
                    {
                      "id": 4,
                      "label": ")",
                      "successors": [
                        {
                          "id": 5,
                          "label": "yield \"time\", current_time",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GetCurrentDateBlock",
      "type": "class",
      "start_line": 45,
      "end_line": 98,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 64,
          "end_line": 88,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"b29c1b50-5d0e-4d9f-8f9d-1b0e6fcbf0b1\",\n            description=\"This block outputs the current date with an optional offset.\",\n            categories={BlockCategory.TEXT},\n            input_schema=GetCurrentDateBlock.Input,\n            output_schema=GetCurrentDateBlock.Output,\n            test_input=[\n                {\"trigger\": \"Hello\", \"offset\": \"7\"},\n                {\"trigger\": \"Hello\", \"offset\": \"7\", \"format\": \"%m/%d/%Y\"},\n            ],\n            test_output=[\n                (\n                    \"date\",\n                    lambda t: abs(datetime.now() - datetime.strptime(t, \"%Y-%m-%d\"))\n                    < timedelta(days=8),  # 7 days difference + 1 day error margin.\n                ),\n                (\n                    \"date\",\n                    lambda t: abs(datetime.now() - datetime.strptime(t, \"%m/%d/%Y\"))\n                    < timedelta(days=8),\n                    # 7 days difference + 1 day error margin.\n                ),\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "super().__init__(\n    id=\"b29c1b50-5d0e-4d9f-8f9d-1b0e6fcbf0b1\",\n    description=\"This block outputs the current date with an optional offset.\",\n    categories={BlockCategory.TEXT},\n    input_schema=GetCurrentDateBlock.Input,\n    output_schema=GetCurrentDateBlock.Output,\n    test_input=[\n        {\"trigger\": \"Hello\", \"offset\": \"7\"},\n        {\"trigger\": \"Hello\", \"offset\": \"7\", \"format\": \"%m/%d/%Y\"},\n    ],\n    test_output=[\n        (\n            \"date\",\n            lambda t: abs(datetime.now() - datetime.strptime(t, \"%Y-%m-%d\")) < timedelta(days=8),  # 7 days difference + 1 day error margin.\n        ),\n        (\n            \"date\",\n            lambda t: abs(datetime.now() - datetime.strptime(t, \"%m/%d/%Y\")) < timedelta(days=8),\n            # 7 days difference + 1 day error margin.\n        ),\n    ],\n)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 90,
          "end_line": 96,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            offset = int(input_data.offset)\n        except ValueError:\n            offset = 0\n        current_date = datetime.now() - timedelta(days=offset)\n        yield \"date\", current_date.strftime(input_data.format)",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "offset = int(input_data.offset)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "current_date = datetime.now() - timedelta(days=offset)\nyield \"date\", current_date.strftime(input_data.format)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 4,
                      "label": "except ValueError:\noffset = 0",
                      "successors": [
                        {
                          "id": 5,
                          "label": "current_date = datetime.now() - timedelta(days=offset)\nyield \"date\", current_date.strftime(input_data.format)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 46,
          "end_line": 57,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        trigger: str = SchemaField(\n            description=\"Trigger any data to output the current date\"\n        )\n        offset: Union[int, str] = SchemaField(\n            title=\"Days Offset\",\n            description=\"Offset in days from the current date\",\n            default=0,\n        )\n        format: str = SchemaField(\n            description=\"Format of the date to output\", default=\"%Y-%m-%d\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    trigger: str = SchemaField(description=\"Trigger any data to output the current date\")",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    offset: Union[int, str] = SchemaField(title=\"Days Offset\", description=\"Offset in days from the current date\", default=0)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "    format: str = SchemaField(description=\"Format of the date to output\", default=\"%Y-%m-%d\")",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 59,
          "end_line": 62,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        date: str = SchemaField(\n            description=\"Current date in the specified format (default: YYYY-MM-DD)\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    date: str = SchemaField(\n        description=\"Current date in the specified format (default: YYYY-MM-DD)\"\n    )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class GetCurrentDateBlock(Block):\n        )\n\n        )\n\n        )\n\n        yield \"date\", current_date.strftime(input_data.format)\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GetCurrentDateBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "yield \"date\", current_date.strftime(input_data.format)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "GetCurrentDateAndTimeBlock",
      "type": "class",
      "start_line": 99,
      "end_line": 139,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 114,
          "end_line": 133,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"716a67b3-6760-42e7-86dc-18645c6e00fc\",\n            description=\"This block outputs the current date and time.\",\n            categories={BlockCategory.TEXT},\n            input_schema=GetCurrentDateAndTimeBlock.Input,\n            output_schema=GetCurrentDateAndTimeBlock.Output,\n            test_input=[\n                {\"trigger\": \"Hello\"},\n            ],\n            test_output=[\n                (\n                    \"date_time\",\n                    lambda t: abs(\n                        datetime.now() - datetime.strptime(t, \"%Y-%m-%d %H:%M:%S\")\n                    )\n                    < timedelta(seconds=10),  # 10 seconds error margin.\n                ),\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "super().__init__(\n    id=\"716a67b3-6760-42e7-86dc-18645c6e00fc\",\n    description=\"This block outputs the current date and time.\",\n    categories={BlockCategory.TEXT},\n    input_schema=GetCurrentDateAndTimeBlock.Input,\n    output_schema=GetCurrentDateAndTimeBlock.Output,\n    test_input=[\n        {\"trigger\": \"Hello\"},\n    ],\n    test_output=[\n        (\n            \"date_time\",\n            lambda t: abs(\n                datetime.now() - datetime.strptime(t, \"%Y-%m-%d %H:%M:%S\")\n            )\n            < timedelta(seconds=10),  # 10 seconds error margin.\n        ),\n    ],\n)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 135,
          "end_line": 137,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_date_time = time.strftime(input_data.format)\n        yield \"date_time\", current_date_time",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "label": "current_date_time = time.strftime(input_data.format)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "yield \"date_time\", current_date_time",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 100,
          "end_line": 107,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        trigger: str = SchemaField(\n            description=\"Trigger any data to output the current date and time\"\n        )\n        format: str = SchemaField(\n            description=\"Format of the date and time to output\",\n            default=\"%Y-%m-%d %H:%M:%S\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    trigger: str = SchemaField(\n        description=\"Trigger any data to output the current date and time\"\n    )\n    format: str = SchemaField(\n        description=\"Format of the date and time to output\",\n        default=\"%Y-%m-%d %H:%M:%S\",\n    )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 109,
          "end_line": 112,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        date_time: str = SchemaField(\n            description=\"Current date and time in the specified format (default: YYYY-MM-DD HH:MM:SS)\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    date_time: str = SchemaField(\n        description=\"Current date and time in the specified format (default: YYYY-MM-DD HH:MM:SS)\"\n    )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class GetCurrentDateAndTimeBlock(Block):\n        )\n\n        )\n\n        )\n\n        yield \"date_time\", current_date_time\n\n",
      "blocks": [
        {
          "id": 1,
          "label": "class GetCurrentDateAndTimeBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "pass",
              "successors": [
                {
                  "id": 3,
                  "label": "def execute(self):",
                  "successors": [
                    {
                      "id": 4,
                      "label": "current_date_time = datetime.now()",
                      "successors": [
                        {
                          "id": 5,
                          "label": "yield \"date_time\", current_date_time",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "CountdownTimerBlock",
      "type": "class",
      "start_line": 140,
      "end_line": 191,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 165,
          "end_line": 180,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"d67a9c52-5e4e-11e2-bcfd-0800200c9a71\",\n            description=\"This block triggers after a specified duration.\",\n            categories={BlockCategory.TEXT},\n            input_schema=CountdownTimerBlock.Input,\n            output_schema=CountdownTimerBlock.Output,\n            test_input=[\n                {\"seconds\": 1},\n                {\"input_message\": \"Custom message\"},\n            ],\n            test_output=[\n                (\"output_message\", \"timer finished\"),\n                (\"output_message\", \"Custom message\"),\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "super().__init__(\n    id=\"d67a9c52-5e4e-11e2-bcfd-0800200c9a71\",\n    description=\"This block triggers after a specified duration.\",\n    categories={BlockCategory.TEXT},\n    input_schema=CountdownTimerBlock.Input,\n    output_schema=CountdownTimerBlock.Output,\n    test_input=[\n        {\"seconds\": 1},\n        {\"input_message\": \"Custom message\"},\n    ],\n    test_output=[\n        (\"output_message\", \"timer finished\"),\n        (\"output_message\", \"Custom message\"),\n    ],\n)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 182,
          "end_line": 191,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        seconds = int(input_data.seconds)\n        minutes = int(input_data.minutes)\n        hours = int(input_data.hours)\n        days = int(input_data.days)\n\n        total_seconds = seconds + minutes * 60 + hours * 3600 + days * 86400\n\n        time.sleep(total_seconds)\n        yield \"output_message\", input_data.input_message",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "label": "seconds = int(input_data.seconds)\nminutes = int(input_data.minutes)\nhours = int(input_data.hours)\ndays = int(input_data.days)\n\ntotal_seconds = seconds + minutes * 60 + hours * 3600 + days * 86400",
                  "successors": [
                    {
                      "id": 3,
                      "label": "time.sleep(total_seconds)\nyield \"output_message\", input_data.input_message",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 141,
          "end_line": 158,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        input_message: Any = SchemaField(\n            advanced=False,\n            description=\"Message to output after the timer finishes\",\n            default=\"timer finished\",\n        )\n        seconds: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in seconds\", default=0\n        )\n        minutes: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in minutes\", default=0\n        )\n        hours: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in hours\", default=0\n        )\n        days: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in days\", default=0\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    input_message: Any = SchemaField(advanced=False, description=\"Message to output after the timer finishes\", default=\"timer finished\")",
                  "successors": [
                    {
                      "id": 3,
                      "label": "seconds: Union[int, str] = SchemaField(advanced=False, description=\"Duration in seconds\", default=0)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "minutes: Union[int, str] = SchemaField(advanced=False, description=\"Duration in minutes\", default=0)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "hours: Union[int, str] = SchemaField(advanced=False, description=\"Duration in hours\", default=0)",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "days: Union[int, str] = SchemaField(advanced=False, description=\"Duration in days\", default=0)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 160,
          "end_line": 163,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        output_message: Any = SchemaField(\n            description=\"Message after the timer finishes\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    output_message: Any = SchemaField(description=\"Message after the timer finishes\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class CountdownTimerBlock(Block):\n        )\n\n        )\n\n        )\n\n        yield \"output_message\", input_data.input_message",
      "blocks": [
        {
          "id": 1,
          "label": "class CountdownTimerBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "def __init__(self, input_data):",
              "successors": [
                {
                  "id": 3,
                  "label": "    self.input_data = input_data",
                  "successors": [
                    {
                      "id": 4,
                      "label": "def execute(self):",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    while self.input_data > 0:",
                          "successors": [
                            {
                              "id": 6,
                              "label": "        self.input_data -= 1",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "        print(self.input_data)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "yield \"output_message\", self.input_data",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "# Execution ends",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "# Execution ends",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import time\nfrom datetime import datetime, timedelta\nfrom typing import Any, Union\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n\n\n\n\n        yield \"output_message\", input_data.input_message",
  "blocks": [
    {
      "id": 1,
      "label": "import time\nfrom datetime import datetime, timedelta\nfrom typing import Any, Union\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n\n\n\n        yield \"output_message\", input_data.input_message",
      "successors": []
    }
  ]
}