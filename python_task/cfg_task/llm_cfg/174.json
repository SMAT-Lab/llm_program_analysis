{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 72,
  "functions": [],
  "classes": [
    {
      "name": "State",
      "type": "class",
      "start_line": 6,
      "end_line": 8,
      "functions": [],
      "simplified_code": "class State(Enum):\n    unvisited = 0\n    visited = 1",
      "blocks": [
        {
          "id": 1,
          "label": "class State(Enum):",
          "successors": [
            {
              "id": 2,
              "label": "    unvisited = 0\n    visited = 1",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Graph",
      "type": "class",
      "start_line": 11,
      "end_line": 28,
      "functions": [
        {
          "name": "bfs",
          "type": "function",
          "start_line": 13,
          "end_line": 28,
          "functions": [],
          "classes": [],
          "simplified_code": "    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
          "blocks": [
            {
              "id": 1,
              "label": "def bfs(self, source, dest):",
              "successors": [
                {
                  "id": 2,
                  "label": "if source is None:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return False",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "queue = deque()\nqueue.append(source)\nsource.visit_state = State.visited",
                  "successors": [
                    {
                      "id": 5,
                      "label": "while queue:",
                      "successors": [
                        {
                          "id": 6,
                          "label": "node = queue.popleft()\nprint(node)",
                          "successors": [
                            {
                              "id": 7,
                              "label": "if dest is node:",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "return True",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "for adjacent_node in node.adj_nodes.values():",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "if adjacent_node.visit_state == State.unvisited:",
                                  "successors": [
                                    {
                                      "id": 11,
                                      "label": "queue.append(adjacent_node)\nadjacent_node.visit_state = State.visited",
                                      "successors": [
                                        {
                                          "id": 5,
                                          "label": "while queue:",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 5,
                                  "label": "while queue:",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 12,
                      "label": "return False",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Graph(object):\n\n        return False",
      "blocks": [
        {
          "id": 1,
          "label": "class Graph(object):",
          "successors": [
            {
              "id": 2,
              "label": "return False",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Person",
      "type": "class",
      "start_line": 31,
      "end_line": 36,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 33,
          "end_line": 36,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, id, name):",
              "successors": [
                {
                  "id": 2,
                  "label": "    self.id = id\n    self.name = name\n    self.friend_ids = []",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Person(object):\n\n        self.friend_ids = []",
      "blocks": [
        {
          "id": 1,
          "label": "class Person(object):",
          "successors": [
            {
              "id": 2,
              "label": "    self.friend_ids = []",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "LookupService",
      "type": "class",
      "start_line": 39,
      "end_line": 46,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 41,
          "end_line": 42,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "    self.lookup = {}",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "get_person",
          "type": "function",
          "start_line": 44,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
          "blocks": [
            {
              "id": 1,
              "label": "def get_person(self, person_id):",
              "successors": [
                {
                  "id": 2,
                  "label": "person_server = self.lookup[person_id]",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return person_server.people[person_id]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class LookupService(object):\n\n        self.lookup = {}  # key: person_id, value: person_server\n\n        return person_server.people[person_id]",
      "blocks": [
        {
          "id": 1,
          "label": "class LookupService(object):",
          "successors": [
            {
              "id": 2,
              "label": "self.lookup = {}  # key: person_id, value: person_server",
              "successors": [
                {
                  "id": 3,
                  "label": "return person_server.people[person_id]",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "PersonServer",
      "type": "class",
      "start_line": 49,
      "end_line": 59,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 51,
          "end_line": 52,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        self.people = {}  # key: person_id, value: person",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "    self.people = {}  # key: person_id, value: person",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "get_people",
          "type": "function",
          "start_line": 54,
          "end_line": 59,
          "functions": [],
          "classes": [],
          "simplified_code": "    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results",
          "blocks": [
            {
              "id": 1,
              "label": "results = []",
              "successors": [
                {
                  "id": 2,
                  "label": "for id in ids:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    if id in self.people:",
                      "successors": [
                        {
                          "id": 4,
                          "label": "        results.append(self.people[id])",
                          "successors": [
                            {
                              "id": 2,
                              "label": "for id in ids:",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 5,
                          "label": "        pass",
                          "successors": [
                            {
                              "id": 2,
                              "label": "for id in ids:",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 6,
                  "label": "return results",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class PersonServer(object):\n\n        self.people = {}  # key: person_id, value: person\n\n        return results",
      "blocks": [
        {
          "id": 1,
          "label": "class PersonServer(object):",
          "successors": [
            {
              "id": 2,
              "label": "    self.people = {}  # key: person_id, value: person",
              "successors": []
            },
            {
              "id": 3,
              "label": "    return results",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "UserGraphService",
      "type": "class",
      "start_line": 62,
      "end_line": 72,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 64,
          "end_line": 67,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, person_ids, lookup):",
              "successors": [
                {
                  "id": 2,
                  "label": "    self.lookup = lookup\n    self.person_ids = person_ids\n    self.visited_ids = set()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "bfs",
          "type": "function",
          "start_line": 69,
          "end_line": 72,
          "functions": [],
          "classes": [],
          "simplified_code": "    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def bfs(self, source, dest):",
              "successors": [
                {
                  "id": 2,
                  "label": "# Use self.visited_ids to track visited nodes\n# Use self.lookup to translate a person_id to a Person\npass",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class UserGraphService(object):\n\n        self.visited_ids = set()\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class UserGraphService(object):",
          "successors": [
            {
              "id": 2,
              "label": "    self.visited_ids = set()",
              "successors": [
                {
                  "id": 3,
                  "label": "    pass",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "# -*- coding: utf-8 -*-\nfrom collections import deque\nfrom enum import Enum\n\n\n    visited = 1\n\n\n        return False\n\n\n        self.friend_ids = []\n\n\n        return person_server.people[person_id]\n\n\n        return results\n\n\n        pass",
  "blocks": [
    {
      "id": 1,
      "label": "visited = 1",
      "successors": [
        {
          "id": 2,
          "label": "return False",
          "successors": []
        },
        {
          "id": 3,
          "label": "self.friend_ids = []",
          "successors": [
            {
              "id": 4,
              "label": "return person_server.people[person_id]",
              "successors": []
            }
          ]
        },
        {
          "id": 5,
          "label": "return results",
          "successors": []
        },
        {
          "id": 6,
          "label": "pass",
          "successors": []
        }
      ]
    }
  ]
}