[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 9,
    "children": [],
    "code": "import logging\n\nfrom backend.data import integrations\nfrom backend.data.model import APIKeyCredentials, Credentials, OAuth2Credentials\n\nfrom ._base import WT, BaseWebhooksManager\n\nlogger = logging.getLogger(__name__)\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import logging\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from backend.data import integrations\nfrom backend.data.model import APIKeyCredentials, Credentials, OAuth2Credentials\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from ._base import WT, BaseWebhooksManager\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "logger = logging.getLogger(__name__)\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        }
      ]
    }
  },
  {
    "decl_name": "ManualWebhookManagerBase",
    "start_line": 10,
    "end_line": 29,
    "children": [
      {
        "decl_name": "ManualWebhookManagerBase._register_webhook",
        "start_line": 11,
        "end_line": 22,
        "children": [],
        "code": "    async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: WT,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        print(ingress_url)  # FIXME: pass URL to user in front end\n\n        return \"\", {}\n",
        "cfg": {
          "nodes": [
            {
              "id": "ManualWebhookManagerBase._register_webhook_1",
              "code": "async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: WT,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n"
            },
            {
              "id": "ManualWebhookManagerBase._register_webhook_2",
              "code": "        print(ingress_url)  # FIXME: pass URL to user in front end\n"
            },
            {
              "id": "ManualWebhookManagerBase._register_webhook_3",
              "code": "        return \"\", {}\n"
            }
          ],
          "edges": [
            {
              "from": "ManualWebhookManagerBase._register_webhook_1",
              "to": "ManualWebhookManagerBase._register_webhook_2"
            },
            {
              "from": "ManualWebhookManagerBase._register_webhook_2",
              "to": "ManualWebhookManagerBase._register_webhook_3"
            }
          ]
        }
      },
      {
        "decl_name": "ManualWebhookManagerBase._deregister_webhook",
        "start_line": 24,
        "end_line": 29,
        "children": [],
        "code": "    async def _deregister_webhook(\n        self,\n        webhook: integrations.Webhook,\n        credentials: OAuth2Credentials | APIKeyCredentials,\n    ) -> None:\n        pass\n",
        "cfg": {
          "nodes": [
            {
              "id": "ManualWebhookManagerBase._deregister_webhook_1",
              "code": "async def _deregister_webhook(\n        self,\n        webhook: integrations.Webhook,\n        credentials: OAuth2Credentials | APIKeyCredentials,\n    ) -> None:\n        pass\n"
            }
          ],
          "edges": []
        }
      }
    ],
    "code": "class ManualWebhookManagerBase(BaseWebhooksManager[WT]):\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "ManualWebhookManagerBase_1",
          "code": "class ManualWebhookManagerBase(BaseWebhooksManager[WT]):\n"
        }
      ],
      "edges": []
    }
  }
]