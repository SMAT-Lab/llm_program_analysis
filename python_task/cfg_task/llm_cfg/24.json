[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 11,
    "children": [],
    "code": "from backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField\n\nfrom ._api import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    Slant3DCredentialsField,\n    Slant3DCredentialsInput,\n)\nfrom .base import Slant3DBlockBase\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from backend.data.block import BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, SchemaField\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from ._api import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    Slant3DCredentialsField,\n    Slant3DCredentialsInput,\n)\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from .base import Slant3DBlockBase\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        }
      ]
    }
  },
  {
    "decl_name": "Slant3DSlicerBlock",
    "start_line": 12,
    "end_line": 60,
    "children": [
      {
        "decl_name": "Slant3DSlicerBlock.Input",
        "start_line": 15,
        "end_line": 19,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        file_url: str = SchemaField(\n            description=\"URL of the 3D model file to slice (STL)\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "Slant3DSlicerBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        file_url: str = SchemaField(\n            description=\"URL of the 3D model file to slice (STL)\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "Slant3DSlicerBlock.Output",
        "start_line": 21,
        "end_line": 24,
        "children": [],
        "code": "    class Output(BlockSchema):\n        message: str = SchemaField(description=\"Response message\")\n        price: float = SchemaField(description=\"Calculated price for printing\")\n        error: str = SchemaField(description=\"Error message if slicing failed\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "Slant3DSlicerBlock.Output_1",
              "code": "class Output(BlockSchema):\n        message: str = SchemaField(description=\"Response message\")\n        price: float = SchemaField(description=\"Calculated price for printing\")\n        error: str = SchemaField(description=\"Error message if slicing failed\")\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "Slant3DSlicerBlock.__init__",
        "start_line": 26,
        "end_line": 44,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"f8a12c8d-3e4b-4d5f-b6a7-8c9d0e1f2g3h\",\n            description=\"Slice a 3D model file and get pricing information\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"file_url\": \"https://example.com/model.stl\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"message\", \"Slicing successful\"), (\"price\", 8.23)],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"message\": \"Slicing successful\",\n                    \"data\": {\"price\": 8.23},\n                }\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "Slant3DSlicerBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"f8a12c8d-3e4b-4d5f-b6a7-8c9d0e1f2g3h\",\n            description=\"Slice a 3D model file and get pricing information\",\n            input_schema=self.Input,\n            output_schema=self.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"file_url\": \"https://example.com/model.stl\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[(\"message\", \"Slicing successful\"), (\"price\", 8.23)],\n            test_mock={\n                \"_make_request\": lambda *args, **kwargs: {\n                    \"message\": \"Slicing successful\",\n                    \"data\": {\"price\": 8.23},\n                }\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "Slant3DSlicerBlock.run",
        "start_line": 46,
        "end_line": 60,
        "children": [],
        "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        try:\n            result = self._make_request(\n                \"POST\",\n                \"slicer\",\n                credentials.api_key.get_secret_value(),\n                json={\"fileURL\": input_data.file_url},\n            )\n            yield \"message\", result[\"message\"]\n            yield \"price\", result[\"data\"][\"price\"]\n        except Exception as e:\n            yield \"error\", str(e)\n            raise\n",
        "cfg": {
          "nodes": [
            {
              "id": "Slant3DSlicerBlock.run_1",
              "code": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
            },
            {
              "id": "Slant3DSlicerBlock.run_2",
              "code": "        try:\n            result = self._make_request(\n                \"POST\",\n                \"slicer\",\n                credentials.api_key.get_secret_value(),\n                json={\"fileURL\": input_data.file_url},\n            )\n"
            },
            {
              "id": "Slant3DSlicerBlock.run_3",
              "code": "            yield \"message\", result[\"message\"]\n            yield \"price\", result[\"data\"][\"price\"]\n"
            },
            {
              "id": "Slant3DSlicerBlock.run_4",
              "code": "        except Exception as e:\n            yield \"error\", str(e)\n            raise\n"
            }
          ],
          "edges": [
            {
              "from": "Slant3DSlicerBlock.run_1",
              "to": "Slant3DSlicerBlock.run_2"
            },
            {
              "from": "Slant3DSlicerBlock.run_2",
              "to": "Slant3DSlicerBlock.run_3"
            },
            {
              "from": "Slant3DSlicerBlock.run_2",
              "to": "Slant3DSlicerBlock.run_4"
            }
          ]
        }
      }
    ],
    "code": "class Slant3DSlicerBlock(Slant3DBlockBase):\n    \"\"\"Block for slicing 3D model files\"\"\"\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "Slant3DSlicerBlock_1",
          "code": "class Slant3DSlicerBlock(Slant3DBlockBase):\n    \"\"\"Block for slicing 3D model files\"\"\"\n"
        }
      ],
      "edges": []
    }
  }
]