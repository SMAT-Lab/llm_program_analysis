[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 670,
    "children": [
      {
        "decl_name": "execution_manager_client",
        "start_line": 53,
        "end_line": 55,
        "children": [],
        "code": "@thread_cached\ndef execution_manager_client() -> ExecutionManager:\n    return get_service_client(ExecutionManager)\n",
        "cfg": {
          "nodes": [
            {
              "id": "execution_manager_client_1",
              "code": "@thread_cached\n"
            },
            {
              "id": "execution_manager_client_2",
              "code": "def execution_manager_client() -> ExecutionManager:\n    return get_service_client(ExecutionManager)\n"
            }
          ],
          "edges": [
            {
              "from": "execution_manager_client_1",
              "to": "execution_manager_client_2"
            }
          ]
        }
      },
      {
        "decl_name": "execution_scheduler_client",
        "start_line": 58,
        "end_line": 60,
        "children": [],
        "code": "@thread_cached\ndef execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)\n",
        "cfg": {
          "nodes": [
            {
              "id": "execution_scheduler_client_1",
              "code": "@thread_cached\n"
            },
            {
              "id": "execution_scheduler_client_2",
              "code": "def execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)\n"
            }
          ],
          "edges": [
            {
              "from": "execution_scheduler_client_1",
              "to": "execution_scheduler_client_2"
            }
          ]
        }
      },
      {
        "decl_name": "get_or_create_user_route",
        "start_line": 92,
        "end_line": 95,
        "children": [],
        "code": "@v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])\nasync def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n    user = await get_or_create_user(user_data)\n    return user.model_dump()\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_or_create_user_route_1",
              "code": "@v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])\nasync def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n"
            },
            {
              "id": "get_or_create_user_route_2",
              "code": "    user = await get_or_create_user(user_data)\n    return user.model_dump()\n"
            }
          ],
          "edges": [
            {
              "from": "get_or_create_user_route_1",
              "to": "get_or_create_user_route_2"
            }
          ]
        }
      },
      {
        "decl_name": "get_graph_blocks",
        "start_line": 103,
        "end_line": 107,
        "children": [],
        "code": "@v1_router.get(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])\ndef get_graph_blocks() -> Sequence[dict[Any, Any]]:\n    blocks = [block() for block in backend.data.block.get_blocks().values()]\n    costs = get_block_costs()\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_graph_blocks_1",
              "code": "@v1_router.get(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])\ndef get_graph_blocks() -> Sequence[dict[Any, Any]]:\n"
            },
            {
              "id": "get_graph_blocks_2",
              "code": "    blocks = [block() for block in backend.data.block.get_blocks().values()]\n    costs = get_block_costs()\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]\n"
            }
          ],
          "edges": [
            {
              "from": "get_graph_blocks_1",
              "to": "get_graph_blocks_2"
            }
          ]
        }
      },
      {
        "decl_name": "execute_graph_block",
        "start_line": 115,
        "end_line": 123,
        "children": [],
        "code": "def execute_graph_block(block_id: str, data: BlockInput) -> CompletedBlockOutput:\n    obj = backend.data.block.get_block(block_id)\n    if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")\n\n    output = defaultdict(list)\n    for name, data in obj.execute(data):\n        output[name].append(data)\n    return output\n",
        "cfg": {
          "nodes": [
            {
              "id": "execute_graph_block_1",
              "code": "def execute_graph_block(block_id: str, data: BlockInput) -> CompletedBlockOutput:\n    obj = backend.data.block.get_block(block_id)\n"
            },
            {
              "id": "execute_graph_block_2",
              "code": "    if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")\n"
            },
            {
              "id": "execute_graph_block_3",
              "code": "    output = defaultdict(list)\n"
            },
            {
              "id": "execute_graph_block_4",
              "code": "    for name, data in obj.execute(data):\n        output[name].append(data)\n"
            },
            {
              "id": "execute_graph_block_5",
              "code": "    return output\n"
            }
          ],
          "edges": [
            {
              "from": "execute_graph_block_1",
              "to": "execute_graph_block_2"
            },
            {
              "from": "execute_graph_block_2",
              "to": "execute_graph_block_3"
            },
            {
              "from": "execute_graph_block_3",
              "to": "execute_graph_block_4"
            },
            {
              "from": "execute_graph_block_4",
              "to": "execute_graph_block_5"
            }
          ]
        }
      },
      {
        "decl_name": "get_user_credits",
        "start_line": 131,
        "end_line": 136,
        "children": [],
        "code": "@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_user_credits_1",
              "code": "@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n"
            },
            {
              "id": "get_user_credits_2",
              "code": "    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n"
            }
          ],
          "edges": [
            {
              "from": "get_user_credits_1",
              "to": "get_user_credits_2"
            }
          ]
        }
      },
      {
        "decl_name": "DeleteGraphResponse",
        "start_line": 144,
        "end_line": 145,
        "children": [],
        "code": "class DeleteGraphResponse(TypedDict):\n    version_counts: int\n",
        "cfg": {
          "nodes": [
            {
              "id": "DeleteGraphResponse_1",
              "code": "class DeleteGraphResponse(TypedDict):\n    version_counts: int\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "get_graphs",
        "start_line": 148,
        "end_line": 152,
        "children": [],
        "code": "@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_graphs_1",
              "code": "@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n"
            },
            {
              "id": "get_graphs_2",
              "code": "    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n"
            }
          ],
          "edges": [
            {
              "from": "get_graphs_1",
              "to": "get_graphs_2"
            }
          ]
        }
      },
      {
        "decl_name": "get_graph",
        "start_line": 163,
        "end_line": 174,
        "children": [],
        "code": "async def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graph\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_graph_1",
              "code": "async def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n"
            },
            {
              "id": "get_graph_2",
              "code": "    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n"
            },
            {
              "id": "get_graph_3",
              "code": "    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n"
            },
            {
              "id": "get_graph_4",
              "code": "    return graph\n"
            }
          ],
          "edges": [
            {
              "from": "get_graph_1",
              "to": "get_graph_2"
            },
            {
              "from": "get_graph_2",
              "to": "get_graph_3"
            },
            {
              "from": "get_graph_3",
              "to": "get_graph_4"
            }
          ]
        }
      },
      {
        "decl_name": "get_graph_all_versions",
        "start_line": 187,
        "end_line": 193,
        "children": [],
        "code": "async def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n    return graphs\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_graph_all_versions_1",
              "code": "async def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n"
            },
            {
              "id": "get_graph_all_versions_2",
              "code": "    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n"
            },
            {
              "id": "get_graph_all_versions_3",
              "code": "    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n"
            },
            {
              "id": "get_graph_all_versions_4",
              "code": "    return graphs\n"
            }
          ],
          "edges": [
            {
              "from": "get_graph_all_versions_1",
              "to": "get_graph_all_versions_2"
            },
            {
              "from": "get_graph_all_versions_2",
              "to": "get_graph_all_versions_3"
            },
            {
              "from": "get_graph_all_versions_3",
              "to": "get_graph_all_versions_4"
            }
          ]
        }
      },
      {
        "decl_name": "create_new_graph",
        "start_line": 199,
        "end_line": 202,
        "children": [],
        "code": "async def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n",
        "cfg": {
          "nodes": [
            {
              "id": "create_new_graph_1",
              "code": "async def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "do_create_graph",
        "start_line": 205,
        "end_line": 241,
        "children": [],
        "code": "async def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n        graph.version = 1\n    else:\n        raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )\n\n    graph.is_template = is_template\n    graph.is_active = not is_template\n    graph.reassign_ids(user_id=user_id, reassign_graph_id=True)\n\n    graph = await graph_db.create_graph(graph, user_id=user_id)\n    graph = await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )\n    return graph\n",
        "cfg": {
          "nodes": [
            {
              "id": "do_create_graph_1",
              "code": "async def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n"
            },
            {
              "id": "do_create_graph_2",
              "code": "    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n"
            },
            {
              "id": "do_create_graph_3",
              "code": "    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n"
            },
            {
              "id": "do_create_graph_4",
              "code": "        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n"
            },
            {
              "id": "do_create_graph_5",
              "code": "        graph.version = 1\n"
            },
            {
              "id": "do_create_graph_6",
              "code": "    else:\n        raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )\n"
            },
            {
              "id": "do_create_graph_7",
              "code": "    graph.is_template = is_template\n    graph.is_active = not is_template\n    graph.reassign_ids(user_id=user_id, reassign_graph_id=True)\n"
            },
            {
              "id": "do_create_graph_8",
              "code": "    graph = await graph_db.create_graph(graph, user_id=user_id)\n    graph = await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )\n    return graph\n"
            }
          ],
          "edges": [
            {
              "from": "do_create_graph_1",
              "to": "do_create_graph_2"
            },
            {
              "from": "do_create_graph_1",
              "to": "do_create_graph_3"
            },
            {
              "from": "do_create_graph_1",
              "to": "do_create_graph_6"
            },
            {
              "from": "do_create_graph_2",
              "to": "do_create_graph_7"
            },
            {
              "from": "do_create_graph_3",
              "to": "do_create_graph_4"
            },
            {
              "from": "do_create_graph_3",
              "to": "do_create_graph_5"
            },
            {
              "from": "do_create_graph_5",
              "to": "do_create_graph_7"
            },
            {
              "from": "do_create_graph_7",
              "to": "do_create_graph_8"
            }
          ]
        }
      },
      {
        "decl_name": "delete_graph",
        "start_line": 247,
        "end_line": 257,
        "children": [
          {
            "decl_name": "get_credentials",
            "start_line": 252,
            "end_line": 253,
            "children": [],
            "code": "        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n",
            "cfg": {
              "nodes": [
                {
                  "id": "get_credentials_1",
                  "code": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n"
                }
              ],
              "edges": []
            }
          }
        ],
        "code": "async def delete_graph(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> DeleteGraphResponse:\n    if active_version := await graph_db.get_graph(graph_id, user_id=user_id):\n\n\n        await on_graph_deactivate(active_version, get_credentials)\n\n    return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}\n",
        "cfg": {
          "nodes": [
            {
              "id": "delete_graph_1",
              "code": "async def delete_graph(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> DeleteGraphResponse:\n"
            },
            {
              "id": "delete_graph_2",
              "code": "    if active_version := await graph_db.get_graph(graph_id, user_id=user_id):\n"
            },
            {
              "id": "delete_graph_3",
              "code": "        await on_graph_deactivate(active_version, get_credentials)\n"
            },
            {
              "id": "delete_graph_4",
              "code": "    return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}\n"
            }
          ],
          "edges": [
            {
              "from": "delete_graph_1",
              "to": "delete_graph_2"
            },
            {
              "from": "delete_graph_2",
              "to": "delete_graph_3"
            },
            {
              "from": "delete_graph_2",
              "to": "delete_graph_4"
            },
            {
              "from": "delete_graph_3",
              "to": "delete_graph_4"
            }
          ]
        }
      },
      {
        "decl_name": "update_graph",
        "start_line": 268,
        "end_line": 319,
        "children": [
          {
            "decl_name": "get_credentials",
            "start_line": 300,
            "end_line": 301,
            "children": [],
            "code": "        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n",
            "cfg": {
              "nodes": [
                {
                  "id": "get_credentials_1",
                  "code": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n"
                }
              ],
              "edges": []
            }
          }
        ],
        "code": "async def update_graph(\n    graph_id: str,\n    graph: graph_db.Graph,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> graph_db.GraphModel:\n    # Sanity check\n    if graph.id and graph.id != graph_id:\n        raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")\n\n    # Determine new version\n    existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not existing_versions:\n        raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")\n    latest_version_number = max(g.version for g in existing_versions)\n    graph.version = latest_version_number + 1\n\n    latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )\n    current_active_version = next((v for v in existing_versions if v.is_active), None)\n    if latest_version_graph.is_template != graph.is_template:\n        raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )\n    graph.is_active = not graph.is_template\n    graph = graph_db.make_graph_model(graph, user_id)\n    graph.reassign_ids(user_id=user_id)\n\n    new_graph_version = await graph_db.create_graph(graph, user_id=user_id)\n\n    if new_graph_version.is_active:\n\n\n        # Handle activation of the new graph first to ensure continuity\n        new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n        # Ensure new version is the only active version\n        await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n        if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )\n\n    return new_graph_version\n",
        "cfg": {
          "nodes": [
            {
              "id": "update_graph_1",
              "code": "async def update_graph(\n    graph_id: str,\n    graph: graph_db.Graph,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> graph_db.GraphModel:\n"
            },
            {
              "id": "update_graph_2",
              "code": "    # Sanity check\n    if graph.id and graph.id != graph_id:\n        raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")\n"
            },
            {
              "id": "update_graph_3",
              "code": "    # Determine new version\n    existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not existing_versions:\n        raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")\n"
            },
            {
              "id": "update_graph_4",
              "code": "    latest_version_number = max(g.version for g in existing_versions)\n    graph.version = latest_version_number + 1\n"
            },
            {
              "id": "update_graph_5",
              "code": "    latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )\n"
            },
            {
              "id": "update_graph_6",
              "code": "    current_active_version = next((v for v in existing_versions if v.is_active), None)\n    if latest_version_graph.is_template != graph.is_template:\n        raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )\n"
            },
            {
              "id": "update_graph_7",
              "code": "    graph.is_active = not graph.is_template\n    graph = graph_db.make_graph_model(graph, user_id)\n    graph.reassign_ids(user_id=user_id)\n"
            },
            {
              "id": "update_graph_8",
              "code": "    new_graph_version = await graph_db.create_graph(graph, user_id=user_id)\n"
            },
            {
              "id": "update_graph_9",
              "code": "    if new_graph_version.is_active:\n\n\n"
            },
            {
              "id": "update_graph_10",
              "code": "        # Handle activation of the new graph first to ensure continuity\n        new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n"
            },
            {
              "id": "update_graph_11",
              "code": "        # Ensure new version is the only active version\n        await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n"
            },
            {
              "id": "update_graph_12",
              "code": "        if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )\n"
            },
            {
              "id": "update_graph_13",
              "code": "    return new_graph_version\n"
            }
          ],
          "edges": [
            {
              "from": "update_graph_1",
              "to": "update_graph_2"
            },
            {
              "from": "update_graph_2",
              "to": "update_graph_3"
            },
            {
              "from": "update_graph_3",
              "to": "update_graph_4"
            },
            {
              "from": "update_graph_4",
              "to": "update_graph_5"
            },
            {
              "from": "update_graph_5",
              "to": "update_graph_6"
            },
            {
              "from": "update_graph_6",
              "to": "update_graph_7"
            },
            {
              "from": "update_graph_7",
              "to": "update_graph_8"
            },
            {
              "from": "update_graph_8",
              "to": "update_graph_9"
            },
            {
              "from": "update_graph_9",
              "to": "update_graph_10"
            },
            {
              "from": "update_graph_9",
              "to": "update_graph_13"
            },
            {
              "from": "update_graph_10",
              "to": "update_graph_11"
            },
            {
              "from": "update_graph_11",
              "to": "update_graph_12"
            },
            {
              "from": "update_graph_12",
              "to": "update_graph_13"
            }
          ]
        }
      },
      {
        "decl_name": "set_graph_active_version",
        "start_line": 327,
        "end_line": 360,
        "children": [
          {
            "decl_name": "get_credentials",
            "start_line": 341,
            "end_line": 342,
            "children": [],
            "code": "    def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)\n",
            "cfg": {
              "nodes": [
                {
                  "id": "get_credentials_1",
                  "code": "def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)\n"
                }
              ],
              "edges": []
            }
          }
        ],
        "code": "async def set_graph_active_version(\n    graph_id: str,\n    request_body: SetGraphActiveVersion,\n    user_id: Annotated[str, Depends(get_user_id)],\n):\n    new_active_version = request_body.active_graph_version\n    new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )\n    if not new_active_graph:\n        raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")\n\n    current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)\n\n\n    # Handle activation of the new graph first to ensure continuity\n    await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )\n    # Ensure new version is the only active version\n    await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )\n    if current_active_graph and current_active_graph.version != new_active_version:\n        # Handle deactivation of the previously active version\n        await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "set_graph_active_version_1",
              "code": "async def set_graph_active_version(\n    graph_id: str,\n    request_body: SetGraphActiveVersion,\n    user_id: Annotated[str, Depends(get_user_id)],\n):\n"
            },
            {
              "id": "set_graph_active_version_2",
              "code": "    new_active_version = request_body.active_graph_version\n"
            },
            {
              "id": "set_graph_active_version_3",
              "code": "    new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )\n"
            },
            {
              "id": "set_graph_active_version_4",
              "code": "    if not new_active_graph:\n        raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")\n"
            },
            {
              "id": "set_graph_active_version_5",
              "code": "    current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)\n"
            },
            {
              "id": "set_graph_active_version_6",
              "code": "    await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )\n"
            },
            {
              "id": "set_graph_active_version_7",
              "code": "    await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )\n"
            },
            {
              "id": "set_graph_active_version_8",
              "code": "    if current_active_graph and current_active_graph.version != new_active_version:\n"
            },
            {
              "id": "set_graph_active_version_9",
              "code": "        await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "set_graph_active_version_1",
              "to": "set_graph_active_version_2"
            },
            {
              "from": "set_graph_active_version_2",
              "to": "set_graph_active_version_3"
            },
            {
              "from": "set_graph_active_version_3",
              "to": "set_graph_active_version_4"
            },
            {
              "from": "set_graph_active_version_4",
              "to": "set_graph_active_version_5"
            },
            {
              "from": "set_graph_active_version_5",
              "to": "set_graph_active_version_6"
            },
            {
              "from": "set_graph_active_version_6",
              "to": "set_graph_active_version_7"
            },
            {
              "from": "set_graph_active_version_7",
              "to": "set_graph_active_version_8"
            },
            {
              "from": "set_graph_active_version_8",
              "to": "set_graph_active_version_9"
            }
          ]
        }
      },
      {
        "decl_name": "execute_graph",
        "start_line": 368,
        "end_line": 380,
        "children": [],
        "code": "def execute_graph(\n    graph_id: str,\n    node_input: dict[Any, Any],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, Any]:  # FIXME: add proper return type\n    try:\n        graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}\n    except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)\n",
        "cfg": {
          "nodes": [
            {
              "id": "execute_graph_1",
              "code": "def execute_graph(\n    graph_id: str,\n    node_input: dict[Any, Any],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, Any]:  # FIXME: add proper return type\n"
            },
            {
              "id": "execute_graph_2",
              "code": "    try:\n        graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}\n"
            },
            {
              "id": "execute_graph_3",
              "code": "    except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)\n"
            }
          ],
          "edges": [
            {
              "from": "execute_graph_1",
              "to": "execute_graph_2"
            },
            {
              "from": "execute_graph_2",
              "to": "execute_graph_3"
            }
          ]
        }
      },
      {
        "decl_name": "stop_graph_run",
        "start_line": 388,
        "end_line": 399,
        "children": [],
        "code": "async def stop_graph_run(\n    graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[execution_db.ExecutionResult]:\n    if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\n        raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")\n\n    await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )\n\n    # Retrieve & return canceled graph execution in its final state\n    return await execution_db.get_execution_results(graph_exec_id)\n",
        "cfg": {
          "nodes": [
            {
              "id": "stop_graph_run_1",
              "code": "async def stop_graph_run(\n    graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[execution_db.ExecutionResult]:\n"
            },
            {
              "id": "stop_graph_run_2",
              "code": "    if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\n        raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")\n"
            },
            {
              "id": "stop_graph_run_3",
              "code": "    await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )\n"
            },
            {
              "id": "stop_graph_run_4",
              "code": "    # Retrieve & return canceled graph execution in its final state\n    return await execution_db.get_execution_results(graph_exec_id)\n"
            }
          ],
          "edges": [
            {
              "from": "stop_graph_run_1",
              "to": "stop_graph_run_2"
            },
            {
              "from": "stop_graph_run_2",
              "to": "stop_graph_run_3"
            },
            {
              "from": "stop_graph_run_3",
              "to": "stop_graph_run_4"
            }
          ]
        }
      },
      {
        "decl_name": "get_executions",
        "start_line": 407,
        "end_line": 410,
        "children": [],
        "code": "async def get_executions(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[graph_db.GraphExecution]:\n    return await graph_db.get_executions(user_id=user_id)\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_executions_1",
              "code": "async def get_executions(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[graph_db.GraphExecution]:\n    return await graph_db.get_executions(user_id=user_id)\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "get_graph_run_node_execution_results",
        "start_line": 418,
        "end_line": 427,
        "children": [],
        "code": "async def get_graph_run_node_execution_results(\n    graph_id: str,\n    graph_exec_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Sequence[execution_db.ExecutionResult]:\n    graph = await graph_db.get_graph(graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n\n    return await execution_db.get_execution_results(graph_exec_id)\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_graph_run_node_execution_results_1",
              "code": "async def get_graph_run_node_execution_results(\n    graph_id: str,\n    graph_exec_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Sequence[execution_db.ExecutionResult]:\n"
            },
            {
              "id": "get_graph_run_node_execution_results_2",
              "code": "    graph = await graph_db.get_graph(graph_id, user_id=user_id)\n"
            },
            {
              "id": "get_graph_run_node_execution_results_3",
              "code": "    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n"
            },
            {
              "id": "get_graph_run_node_execution_results_4",
              "code": "    return await execution_db.get_execution_results(graph_exec_id)\n"
            }
          ],
          "edges": [
            {
              "from": "get_graph_run_node_execution_results_1",
              "to": "get_graph_run_node_execution_results_2"
            },
            {
              "from": "get_graph_run_node_execution_results_2",
              "to": "get_graph_run_node_execution_results_3"
            },
            {
              "from": "get_graph_run_node_execution_results_3",
              "to": "get_graph_run_node_execution_results_4"
            }
          ]
        }
      },
      {
        "decl_name": "get_templates",
        "start_line": 440,
        "end_line": 443,
        "children": [],
        "code": "async def get_templates(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_templates_1",
              "code": "async def get_templates(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "get_template",
        "start_line": 451,
        "end_line": 457,
        "children": [],
        "code": "async def get_template(\n    graph_id: str, version: int | None = None\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(graph_id, version, template=True)\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")\n    return graph\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_template_1",
              "code": "async def get_template(\n    graph_id: str, version: int | None = None\n) -> graph_db.GraphModel:\n"
            },
            {
              "id": "get_template_2",
              "code": "    graph = await graph_db.get_graph(graph_id, version, template=True)\n"
            },
            {
              "id": "get_template_3",
              "code": "    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")\n"
            },
            {
              "id": "get_template_4",
              "code": "    return graph\n"
            }
          ],
          "edges": [
            {
              "from": "get_template_1",
              "to": "get_template_2"
            },
            {
              "from": "get_template_2",
              "to": "get_template_3"
            },
            {
              "from": "get_template_2",
              "to": "get_template_4"
            }
          ]
        }
      },
      {
        "decl_name": "create_new_template",
        "start_line": 465,
        "end_line": 468,
        "children": [],
        "code": "async def create_new_template(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=True, user_id=user_id)\n",
        "cfg": {
          "nodes": [
            {
              "id": "create_new_template_1",
              "code": "async def create_new_template(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=True, user_id=user_id)\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "ScheduleCreationRequest",
        "start_line": 476,
        "end_line": 479,
        "children": [],
        "code": "class ScheduleCreationRequest(pydantic.BaseModel):\n    cron: str\n    input_data: dict[Any, Any]\n    graph_id: str\n",
        "cfg": {
          "nodes": [
            {
              "id": "ScheduleCreationRequest_1",
              "code": "class ScheduleCreationRequest(pydantic.BaseModel):\n    cron: str\n    input_data: dict[Any, Any]\n    graph_id: str\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "create_schedule",
        "start_line": 487,
        "end_line": 505,
        "children": [],
        "code": "async def create_schedule(\n    user_id: Annotated[str, Depends(get_user_id)],\n    schedule: ScheduleCreationRequest,\n) -> scheduler.JobInfo:\n    graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)\n    if not graph:\n        raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )\n\n    return await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )\n",
        "cfg": {
          "nodes": [
            {
              "id": "create_schedule_1",
              "code": "async def create_schedule(\n    user_id: Annotated[str, Depends(get_user_id)],\n    schedule: ScheduleCreationRequest,\n) -> scheduler.JobInfo:\n"
            },
            {
              "id": "create_schedule_2",
              "code": "    graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)\n"
            },
            {
              "id": "create_schedule_3",
              "code": "    if not graph:\n        raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )\n"
            },
            {
              "id": "create_schedule_4",
              "code": "    return await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )\n"
            }
          ],
          "edges": [
            {
              "from": "create_schedule_1",
              "to": "create_schedule_2"
            },
            {
              "from": "create_schedule_2",
              "to": "create_schedule_3"
            },
            {
              "from": "create_schedule_3",
              "to": "create_schedule_4"
            }
          ]
        }
      },
      {
        "decl_name": "delete_schedule",
        "start_line": 513,
        "end_line": 518,
        "children": [],
        "code": "def delete_schedule(\n    schedule_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[Any, Any]:\n    execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\n    return {\"id\": schedule_id}\n",
        "cfg": {
          "nodes": [
            {
              "id": "delete_schedule_1",
              "code": "def delete_schedule(\n    schedule_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[Any, Any]:\n"
            },
            {
              "id": "delete_schedule_2",
              "code": "    execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\n"
            },
            {
              "id": "delete_schedule_3",
              "code": "    return {\"id\": schedule_id}\n"
            }
          ],
          "edges": [
            {
              "from": "delete_schedule_1",
              "to": "delete_schedule_2"
            },
            {
              "from": "delete_schedule_2",
              "to": "delete_schedule_3"
            }
          ]
        }
      },
      {
        "decl_name": "get_execution_schedules",
        "start_line": 526,
        "end_line": 533,
        "children": [],
        "code": "def get_execution_schedules(\n    user_id: Annotated[str, Depends(get_user_id)],\n    graph_id: str | None = None,\n) -> list[scheduler.JobInfo]:\n    return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_execution_schedules_1",
              "code": "def get_execution_schedules(\n    user_id: Annotated[str, Depends(get_user_id)],\n    graph_id: str | None = None,\n) -> list[scheduler.JobInfo]:\n"
            },
            {
              "id": "get_execution_schedules_2",
              "code": "    return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )\n"
            }
          ],
          "edges": [
            {
              "from": "get_execution_schedules_1",
              "to": "get_execution_schedules_2"
            }
          ]
        }
      },
      {
        "decl_name": "create_api_key",
        "start_line": 548,
        "end_line": 562,
        "children": [],
        "code": "async def create_api_key(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n) -> CreateAPIKeyResponse:\n    \"\"\"Create a new API key\"\"\"\n    try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)\n    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n",
        "cfg": {
          "nodes": [
            {
              "id": "create_api_key_1",
              "code": "async def create_api_key(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n) -> CreateAPIKeyResponse:\n    \"\"\"Create a new API key\"\"\"\n"
            },
            {
              "id": "create_api_key_2",
              "code": "    try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n"
            },
            {
              "id": "create_api_key_3",
              "code": "        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)\n"
            },
            {
              "id": "create_api_key_4",
              "code": "    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n"
            }
          ],
          "edges": [
            {
              "from": "create_api_key_1",
              "to": "create_api_key_2"
            },
            {
              "from": "create_api_key_2",
              "to": "create_api_key_3"
            },
            {
              "from": "create_api_key_2",
              "to": "create_api_key_4"
            }
          ]
        }
      },
      {
        "decl_name": "get_api_keys",
        "start_line": 572,
        "end_line": 580,
        "children": [],
        "code": "async def get_api_keys(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> list[APIKeyWithoutHash]:\n    \"\"\"List all API keys for the user\"\"\"\n    try:\n        return await list_user_api_keys(user_id)\n    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_api_keys_1",
              "code": "async def get_api_keys(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> list[APIKeyWithoutHash]:\n    \"\"\"List all API keys for the user\"\"\"\n"
            },
            {
              "id": "get_api_keys_2",
              "code": "    try:\n        return await list_user_api_keys(user_id)\n"
            },
            {
              "id": "get_api_keys_3",
              "code": "    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n"
            }
          ],
          "edges": [
            {
              "from": "get_api_keys_1",
              "to": "get_api_keys_2"
            },
            {
              "from": "get_api_keys_2",
              "to": "get_api_keys_3"
            }
          ]
        }
      },
      {
        "decl_name": "get_api_key",
        "start_line": 590,
        "end_line": 601,
        "children": [],
        "code": "async def get_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> APIKeyWithoutHash:\n    \"\"\"Get a specific API key\"\"\"\n    try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n        return api_key\n    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_api_key_1",
              "code": "async def get_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> APIKeyWithoutHash:\n    \"\"\"Get a specific API key\"\"\"\n"
            },
            {
              "id": "get_api_key_2",
              "code": "    try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n"
            },
            {
              "id": "get_api_key_3",
              "code": "        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n"
            },
            {
              "id": "get_api_key_4",
              "code": "        return api_key\n"
            },
            {
              "id": "get_api_key_5",
              "code": "    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n"
            },
            {
              "id": "get_api_key_6",
              "code": "        raise HTTPException(status_code=400, detail=str(e))\n"
            }
          ],
          "edges": [
            {
              "from": "get_api_key_1",
              "to": "get_api_key_2"
            },
            {
              "from": "get_api_key_2",
              "to": "get_api_key_3"
            },
            {
              "from": "get_api_key_2",
              "to": "get_api_key_5"
            },
            {
              "from": "get_api_key_3",
              "to": "get_api_key_4"
            },
            {
              "from": "get_api_key_5",
              "to": "get_api_key_6"
            }
          ]
        }
      },
      {
        "decl_name": "delete_api_key",
        "start_line": 611,
        "end_line": 623,
        "children": [],
        "code": "async def delete_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Revoke an API key\"\"\"\n    try:\n        return await revoke_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n",
        "cfg": {
          "nodes": [
            {
              "id": "delete_api_key_1",
              "code": "async def delete_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Revoke an API key\"\"\"\n"
            },
            {
              "id": "delete_api_key_2",
              "code": "    try:\n        return await revoke_api_key(key_id, user_id)\n"
            },
            {
              "id": "delete_api_key_3",
              "code": "    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n"
            },
            {
              "id": "delete_api_key_4",
              "code": "    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n"
            },
            {
              "id": "delete_api_key_5",
              "code": "    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n"
            }
          ],
          "edges": [
            {
              "from": "delete_api_key_1",
              "to": "delete_api_key_2"
            },
            {
              "from": "delete_api_key_2",
              "to": "delete_api_key_3"
            },
            {
              "from": "delete_api_key_2",
              "to": "delete_api_key_4"
            },
            {
              "from": "delete_api_key_2",
              "to": "delete_api_key_5"
            }
          ]
        }
      },
      {
        "decl_name": "suspend_key",
        "start_line": 633,
        "end_line": 645,
        "children": [],
        "code": "async def suspend_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Suspend an API key\"\"\"\n    try:\n        return await suspend_api_key(key_id, user_id)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n",
        "cfg": {
          "nodes": [
            {
              "id": "suspend_key_1",
              "code": "async def suspend_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Suspend an API key\"\"\"\n"
            },
            {
              "id": "suspend_key_2",
              "code": "    try:\n        return await suspend_api_key(key_id, user_id)\n"
            },
            {
              "id": "suspend_key_3",
              "code": "    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n"
            },
            {
              "id": "suspend_key_4",
              "code": "    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n"
            },
            {
              "id": "suspend_key_5",
              "code": "    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n"
            }
          ],
          "edges": [
            {
              "from": "suspend_key_1",
              "to": "suspend_key_2"
            },
            {
              "from": "suspend_key_2",
              "to": "suspend_key_3"
            },
            {
              "from": "suspend_key_2",
              "to": "suspend_key_4"
            },
            {
              "from": "suspend_key_2",
              "to": "suspend_key_5"
            }
          ]
        }
      },
      {
        "decl_name": "update_permissions",
        "start_line": 655,
        "end_line": 669,
        "children": [],
        "code": "async def update_permissions(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Update API key permissions\"\"\"\n    try:\n        return await update_api_key_permissions(key_id, user_id, request.permissions)\n    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n",
        "cfg": {
          "nodes": [
            {
              "id": "update_permissions_1",
              "code": "async def update_permissions(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Update API key permissions\"\"\"\n"
            },
            {
              "id": "update_permissions_2",
              "code": "    try:\n        return await update_api_key_permissions(key_id, user_id, request.permissions)\n"
            },
            {
              "id": "update_permissions_3",
              "code": "    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n"
            },
            {
              "id": "update_permissions_4",
              "code": "    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n"
            },
            {
              "id": "update_permissions_5",
              "code": "    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n"
            }
          ],
          "edges": [
            {
              "from": "update_permissions_1",
              "to": "update_permissions_2"
            },
            {
              "from": "update_permissions_2",
              "to": "update_permissions_3"
            },
            {
              "from": "update_permissions_2",
              "to": "update_permissions_4"
            },
            {
              "from": "update_permissions_2",
              "to": "update_permissions_5"
            }
          ]
        }
      }
    ],
    "code": "import asyncio\nimport logging\nfrom collections import defaultdict\nfrom typing import TYPE_CHECKING, Annotated, Any, Sequence\n\nimport pydantic\nfrom autogpt_libs.auth.middleware import auth_middleware\nfrom autogpt_libs.feature_flag.client import feature_flag\nfrom autogpt_libs.utils.cache import thread_cached\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import Optional, TypedDict\n\nimport backend.data.block\nimport backend.server.integrations.router\nimport backend.server.routers.analytics\nfrom backend.data import execution as execution_db\nfrom backend.data import graph as graph_db\nfrom backend.data.api_key import (\n    APIKeyError,\n    APIKeyNotFoundError,\n    APIKeyPermissionError,\n    APIKeyWithoutHash,\n    generate_api_key,\n    get_api_key_by_id,\n    list_user_api_keys,\n    revoke_api_key,\n    suspend_api_key,\n    update_api_key_permissions,\n)\nfrom backend.data.block import BlockInput, CompletedBlockOutput\nfrom backend.data.credit import get_block_costs, get_user_credit_model\nfrom backend.data.user import get_or_create_user\nfrom backend.executor import ExecutionManager, ExecutionScheduler, scheduler\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.webhooks.graph_lifecycle_hooks import (\n    on_graph_activate,\n    on_graph_deactivate,\n)\nfrom backend.server.model import (\n    CreateAPIKeyRequest,\n    CreateAPIKeyResponse,\n    CreateGraph,\n    SetGraphActiveVersion,\n    UpdatePermissionsRequest,\n)\nfrom backend.server.utils import get_user_id\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\n    from backend.data.model import Credentials\n\n\n\n\n\n\nsettings = Settings()\nlogger = logging.getLogger(__name__)\nintegration_creds_manager = IntegrationCredentialsManager()\n\n\n_user_credit_model = get_user_credit_model()\n\n# Define the API routes\nv1_router = APIRouter()\n\nv1_router.include_router(\n    backend.server.integrations.router.router,\n    prefix=\"/integrations\",\n    tags=[\"integrations\"],\n)\n\nv1_router.include_router(\n    backend.server.routers.analytics.router,\n    prefix=\"/analytics\",\n    tags=[\"analytics\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n########################################################\n##################### Auth #############################\n########################################################\n\n\n\n\n########################################################\n##################### Blocks ###########################\n########################################################\n\n\n\n\n@v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n########################################################\n##################### Credits ##########################\n########################################################\n\n\n\n\n########################################################\n##################### Graphs ###########################\n########################################################\n\n\n\n\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n\n\n\n\n@v1_router.delete(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n\n\n@v1_router.put(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n@v1_router.put(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n@v1_router.put(\n    path=\"/graphs/{graph_id}/versions/active\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n@v1_router.post(\n    path=\"/graphs/{graph_id}/execute\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n@v1_router.post(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n@v1_router.get(\n    path=\"/executions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n@v1_router.get(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n########################################################\n##################### Templates ########################\n########################################################\n\n\n@v1_router.get(\n    path=\"/templates\",\n    tags=[\"graphs\", \"templates\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n@v1_router.get(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n@v1_router.post(\n    path=\"/templates\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n########################################################\n##################### Schedules ########################\n########################################################\n\n\n\n\n@v1_router.post(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n@v1_router.delete(\n    path=\"/schedules/{schedule_id}\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n@v1_router.get(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\n\n########################################################\n#####################  API KEY ##############################\n########################################################\n\n\n@v1_router.post(\n    \"/api-keys\",\n    response_model=list[CreateAPIKeyResponse] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\n\n\n@v1_router.get(\n    \"/api-keys\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\n\n\n@v1_router.get(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\n\n\n@v1_router.delete(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\n\n\n@v1_router.post(\n    \"/api-keys/{key_id}/suspend\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\n\n\n@v1_router.put(\n    \"/api-keys/{key_id}/permissions\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n@feature_flag(\"api-keys-enabled\")\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import asyncio\nimport logging\nfrom collections import defaultdict\nfrom typing import TYPE_CHECKING, Annotated, Any, Sequence\n\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "import pydantic\nfrom autogpt_libs.auth.middleware import auth_middleware\nfrom autogpt_libs.feature_flag.client import feature_flag\nfrom autogpt_libs.utils.cache import thread_cached\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import Optional, TypedDict\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "import backend.data.block\nimport backend.server.integrations.router\nimport backend.server.routers.analytics\nfrom backend.data import execution as execution_db\nfrom backend.data import graph as graph_db\nfrom backend.data.api_key import (\n    APIKeyError,\n    APIKeyNotFoundError,\n    APIKeyPermissionError,\n    APIKeyWithoutHash,\n    generate_api_key,\n    get_api_key_by_id,\n    list_user_api_keys,\n    revoke_api_key,\n    suspend_api_key,\n    update_api_key_permissions,\n)\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "from backend.data.block import BlockInput, CompletedBlockOutput\nfrom backend.data.credit import get_block_costs, get_user_credit_model\nfrom backend.data.user import get_or_create_user\nfrom backend.executor import ExecutionManager, ExecutionScheduler, scheduler\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.webhooks.graph_lifecycle_hooks import (\n    on_graph_activate,\n    on_graph_deactivate,\n)\nfrom backend.server.model import (\n    CreateAPIKeyRequest,\n    CreateAPIKeyResponse,\n    CreateGraph,\n    SetGraphActiveVersion,\n    UpdatePermissionsRequest,\n)\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "from backend.server.utils import get_user_id\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\n"
        },
        {
          "id": "GlobalBlock_6",
          "code": "if TYPE_CHECKING:\n    from backend.data.model import Credentials\n\n"
        },
        {
          "id": "GlobalBlock_7",
          "code": "settings = Settings()\nlogger = logging.getLogger(__name__)\nintegration_creds_manager = IntegrationCredentialsManager()\n"
        },
        {
          "id": "GlobalBlock_8",
          "code": "_user_credit_model = get_user_credit_model()\n"
        },
        {
          "id": "GlobalBlock_9",
          "code": "v1_router = APIRouter()\n"
        },
        {
          "id": "GlobalBlock_10",
          "code": "v1_router.include_router(\n    backend.server.integrations.router.router,\n    prefix=\"/integrations\",\n    tags=[\"integrations\"],\n)\n"
        },
        {
          "id": "GlobalBlock_11",
          "code": "v1_router.include_router(\n    backend.server.routers.analytics.router,\n    prefix=\"/analytics\",\n    tags=[\"analytics\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_12",
          "code": "@v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_13",
          "code": "@v1_router.get(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n"
        },
        {
          "id": "GlobalBlock_14",
          "code": "@v1_router.get(\n    path=\"/graphs/{graph_id}/versions/{version}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_15",
          "code": "@v1_router.get(\n    path=\"/graphs/{graph_id}/versions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_16",
          "code": "@v1_router.get(\n    path=\"/templates/{graph_id}/versions\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_17",
          "code": "@v1_router.post(\n    path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n"
        },
        {
          "id": "GlobalBlock_18",
          "code": "@v1_router.delete(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n"
        },
        {
          "id": "GlobalBlock_19",
          "code": "@v1_router.put(\n    path=\"/graphs/{graph_id}\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)]\n)\n"
        },
        {
          "id": "GlobalBlock_20",
          "code": "@v1_router.put(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_21",
          "code": "@v1_router.put(\n    path=\"/graphs/{graph_id}/versions/active\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_22",
          "code": "@v1_router.post(\n    path=\"/graphs/{graph_id}/execute\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_23",
          "code": "@v1_router.post(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}/stop\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_24",
          "code": "@v1_router.get(\n    path=\"/executions\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_25",
          "code": "@v1_router.get(\n    path=\"/graphs/{graph_id}/executions/{graph_exec_id}\",\n    tags=[\"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_26",
          "code": "@v1_router.get(\n    path=\"/templates\",\n    tags=[\"graphs\", \"templates\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_27",
          "code": "@v1_router.get(\n    path=\"/templates/{graph_id}\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_28",
          "code": "@v1_router.post(\n    path=\"/templates\",\n    tags=[\"templates\", \"graphs\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_29",
          "code": "@v1_router.post(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_30",
          "code": "@v1_router.delete(\n    path=\"/schedules/{schedule_id}\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_31",
          "code": "@v1_router.get(\n    path=\"/schedules\",\n    tags=[\"schedules\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_32",
          "code": "@v1_router.post(\n    \"/api-keys\",\n    response_model=list[CreateAPIKeyResponse] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_33",
          "code": "@feature_flag(\"api-keys-enabled\")\n\n"
        },
        {
          "id": "GlobalBlock_34",
          "code": "@v1_router.get(\n    \"/api-keys\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_35",
          "code": "@feature_flag(\"api-keys-enabled\")\n\n"
        },
        {
          "id": "GlobalBlock_36",
          "code": "@v1_router.get(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_37",
          "code": "@feature_flag(\"api-keys-enabled\")\n\n"
        },
        {
          "id": "GlobalBlock_38",
          "code": "@v1_router.delete(\n    \"/api-keys/{key_id}\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_39",
          "code": "@feature_flag(\"api-keys-enabled\")\n\n"
        },
        {
          "id": "GlobalBlock_40",
          "code": "@v1_router.post(\n    \"/api-keys/{key_id}/suspend\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_41",
          "code": "@feature_flag(\"api-keys-enabled\")\n\n"
        },
        {
          "id": "GlobalBlock_42",
          "code": "@v1_router.put(\n    \"/api-keys/{key_id}/permissions\",\n    response_model=list[APIKeyWithoutHash] | dict[str, str],\n    tags=[\"api-keys\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
        },
        {
          "id": "GlobalBlock_43",
          "code": "@feature_flag(\"api-keys-enabled\")\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        },
        {
          "from": "GlobalBlock_5",
          "to": "GlobalBlock_6"
        },
        {
          "from": "GlobalBlock_6",
          "to": "GlobalBlock_7"
        },
        {
          "from": "GlobalBlock_7",
          "to": "GlobalBlock_8"
        },
        {
          "from": "GlobalBlock_8",
          "to": "GlobalBlock_9"
        },
        {
          "from": "GlobalBlock_9",
          "to": "GlobalBlock_10"
        },
        {
          "from": "GlobalBlock_10",
          "to": "GlobalBlock_11"
        },
        {
          "from": "GlobalBlock_11",
          "to": "GlobalBlock_12"
        },
        {
          "from": "GlobalBlock_12",
          "to": "GlobalBlock_13"
        },
        {
          "from": "GlobalBlock_13",
          "to": "GlobalBlock_14"
        },
        {
          "from": "GlobalBlock_14",
          "to": "GlobalBlock_15"
        },
        {
          "from": "GlobalBlock_15",
          "to": "GlobalBlock_16"
        },
        {
          "from": "GlobalBlock_16",
          "to": "GlobalBlock_17"
        },
        {
          "from": "GlobalBlock_17",
          "to": "GlobalBlock_18"
        },
        {
          "from": "GlobalBlock_18",
          "to": "GlobalBlock_19"
        },
        {
          "from": "GlobalBlock_19",
          "to": "GlobalBlock_20"
        },
        {
          "from": "GlobalBlock_20",
          "to": "GlobalBlock_21"
        },
        {
          "from": "GlobalBlock_21",
          "to": "GlobalBlock_22"
        },
        {
          "from": "GlobalBlock_22",
          "to": "GlobalBlock_23"
        },
        {
          "from": "GlobalBlock_23",
          "to": "GlobalBlock_24"
        },
        {
          "from": "GlobalBlock_24",
          "to": "GlobalBlock_25"
        },
        {
          "from": "GlobalBlock_25",
          "to": "GlobalBlock_26"
        },
        {
          "from": "GlobalBlock_26",
          "to": "GlobalBlock_27"
        },
        {
          "from": "GlobalBlock_27",
          "to": "GlobalBlock_28"
        },
        {
          "from": "GlobalBlock_28",
          "to": "GlobalBlock_29"
        },
        {
          "from": "GlobalBlock_29",
          "to": "GlobalBlock_30"
        },
        {
          "from": "GlobalBlock_30",
          "to": "GlobalBlock_31"
        },
        {
          "from": "GlobalBlock_31",
          "to": "GlobalBlock_32"
        },
        {
          "from": "GlobalBlock_32",
          "to": "GlobalBlock_33"
        },
        {
          "from": "GlobalBlock_33",
          "to": "GlobalBlock_34"
        },
        {
          "from": "GlobalBlock_34",
          "to": "GlobalBlock_35"
        },
        {
          "from": "GlobalBlock_35",
          "to": "GlobalBlock_36"
        },
        {
          "from": "GlobalBlock_36",
          "to": "GlobalBlock_37"
        },
        {
          "from": "GlobalBlock_37",
          "to": "GlobalBlock_38"
        },
        {
          "from": "GlobalBlock_38",
          "to": "GlobalBlock_39"
        },
        {
          "from": "GlobalBlock_39",
          "to": "GlobalBlock_40"
        },
        {
          "from": "GlobalBlock_40",
          "to": "GlobalBlock_41"
        },
        {
          "from": "GlobalBlock_41",
          "to": "GlobalBlock_42"
        },
        {
          "from": "GlobalBlock_42",
          "to": "GlobalBlock_43"
        }
      ]
    }
  }
]