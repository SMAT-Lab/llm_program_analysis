{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 122,
  "functions": [],
  "classes": [
    {
      "name": "Rank",
      "type": "class",
      "start_line": 6,
      "end_line": 10,
      "functions": [],
      "simplified_code": "class Rank(Enum):\n\n    OPERATOR = 0\n    SUPERVISOR = 1\n    DIRECTOR = 2",
      "blocks": [
        {
          "id": 1,
          "label": "class Rank(Enum):",
          "successors": [
            {
              "id": 2,
              "label": "    OPERATOR = 0",
              "successors": []
            },
            {
              "id": 3,
              "label": "    SUPERVISOR = 1",
              "successors": []
            },
            {
              "id": 4,
              "label": "    DIRECTOR = 2",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Employee",
      "type": "class",
      "start_line": 13,
      "end_line": 40,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 15,
          "end_line": 20,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, employee_id, name, rank, call_center):\n        self.employee_id = employee_id\n        self.name = name\n        self.rank = rank\n        self.call = None\n        self.call_center = call_center",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, employee_id, name, rank, call_center):",
              "successors": [
                {
                  "id": 2,
                  "label": "self.employee_id = employee_id\nself.name = name\nself.rank = rank\nself.call = None\nself.call_center = call_center",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "take_call",
          "type": "function",
          "start_line": 22,
          "end_line": 26,
          "functions": [],
          "classes": [],
          "simplified_code": "    def take_call(self, call):\n        \"\"\"Assume the employee will always successfully take the call.\"\"\"\n        self.call = call\n        self.call.employee = self\n        self.call.state = CallState.IN_PROGRESS",
          "blocks": [
            {
              "id": 1,
              "label": "def take_call(self, call):",
              "successors": [
                {
                  "id": 2,
                  "label": "\"\"\"Assume the employee will always successfully take the call.\"\"\"",
                  "successors": [
                    {
                      "id": 3,
                      "label": "self.call = call\nself.call.employee = self\nself.call.state = CallState.IN_PROGRESS",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "complete_call",
          "type": "function",
          "start_line": 28,
          "end_line": 30,
          "functions": [],
          "classes": [],
          "simplified_code": "    def complete_call(self):\n        self.call.state = CallState.COMPLETE\n        self.call_center.notify_call_completed(self.call)",
          "blocks": [
            {
              "id": 1,
              "label": "def complete_call(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "self.call.state = CallState.COMPLETE",
                  "successors": [
                    {
                      "id": 3,
                      "label": "self.call_center.notify_call_completed(self.call)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "escalate_call",
          "type": "function",
          "start_line": 33,
          "end_line": 34,
          "functions": [],
          "classes": [],
          "simplified_code": "    def escalate_call(self):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def escalate_call(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "_escalate_call",
          "type": "function",
          "start_line": 36,
          "end_line": 40,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _escalate_call(self):\n        self.call.state = CallState.READY\n        call = self.call\n        self.call = None\n        self.call_center.notify_call_escalated(call)",
          "blocks": [
            {
              "id": 1,
              "label": "def _escalate_call(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "self.call.state = CallState.READY\ncall = self.call\nself.call = None\nself.call_center.notify_call_escalated(call)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Employee(metaclass=ABCMeta):\n\n        self.call_center = call_center\n\n        self.call.state = CallState.IN_PROGRESS\n\n        self.call_center.notify_call_completed(self.call)\n\n    @abstractmethod\n        pass\n\n        self.call_center.notify_call_escalated(call)",
      "blocks": [
        {
          "id": 1,
          "label": "class Employee(metaclass=ABCMeta):",
          "successors": [
            {
              "id": 2,
              "label": "self.call_center = call_center",
              "successors": [
                {
                  "id": 3,
                  "label": "self.call.state = CallState.IN_PROGRESS",
                  "successors": [
                    {
                      "id": 4,
                      "label": "self.call_center.notify_call_completed(self.call)",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "label": "@abstractmethod",
              "successors": [
                {
                  "id": 6,
                  "label": "pass",
                  "successors": [
                    {
                      "id": 7,
                      "label": "self.call_center.notify_call_escalated(call)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Operator",
      "type": "class",
      "start_line": 43,
      "end_line": 50,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 45,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, employee_id, name):",
              "successors": [
                {
                  "id": 2,
                  "label": "    super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "escalate_call",
          "type": "function",
          "start_line": 48,
          "end_line": 50,
          "functions": [],
          "classes": [],
          "simplified_code": "    def escalate_call(self):\n        self.call.level = Rank.SUPERVISOR\n        self._escalate_call()",
          "blocks": [
            {
              "id": 1,
              "label": "def escalate_call(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "self.call.level = Rank.SUPERVISOR\nself._escalate_call()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Operator(Employee):\n\n        super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)\n\n        self._escalate_call()",
      "blocks": [
        {
          "id": 1,
          "label": "class Operator(Employee):",
          "successors": [
            {
              "id": 2,
              "label": "super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)",
              "successors": [
                {
                  "id": 3,
                  "label": "self._escalate_call()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Supervisor",
      "type": "class",
      "start_line": 53,
      "end_line": 60,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 55,
          "end_line": 56,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, employee_id, name):",
              "successors": [
                {
                  "id": 2,
                  "label": "    super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "escalate_call",
          "type": "function",
          "start_line": 58,
          "end_line": 60,
          "functions": [],
          "classes": [],
          "simplified_code": "    def escalate_call(self):\n        self.call.level = Rank.DIRECTOR\n        self._escalate_call()",
          "blocks": [
            {
              "id": 1,
              "label": "def escalate_call(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "self.call.level = Rank.DIRECTOR",
                  "successors": [
                    {
                      "id": 3,
                      "label": "self._escalate_call()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Supervisor(Employee):\n\n        super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)\n\n        self._escalate_call()",
      "blocks": [
        {
          "id": 1,
          "label": "class Supervisor(Employee):",
          "successors": [
            {
              "id": 2,
              "label": "super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)",
              "successors": [
                {
                  "id": 3,
                  "label": "self._escalate_call()",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Director",
      "type": "class",
      "start_line": 63,
      "end_line": 69,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 65,
          "end_line": 66,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, employee_id, name):",
              "successors": [
                {
                  "id": 2,
                  "label": "super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "escalate_call",
          "type": "function",
          "start_line": 68,
          "end_line": 69,
          "functions": [],
          "classes": [],
          "simplified_code": "    def escalate_call(self):\n        raise NotImplementedError('Directors must be able to handle any call')",
          "blocks": [
            {
              "id": 1,
              "label": "def escalate_call(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "raise NotImplementedError('Directors must be able to handle any call')",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Director(Employee):\n\n        super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)\n\n        raise NotImplementedError('Directors must be able to handle any call')",
      "blocks": [
        {
          "id": 1,
          "label": "class Director(Employee):",
          "successors": [
            {
              "id": 2,
              "label": "super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)",
              "successors": [
                {
                  "id": 3,
                  "label": "raise NotImplementedError('Directors must be able to handle any call')",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "CallState",
      "type": "class",
      "start_line": 72,
      "end_line": 76,
      "functions": [],
      "simplified_code": "class CallState(Enum):\n\n    READY = 0\n    IN_PROGRESS = 1\n    COMPLETE = 2",
      "blocks": [
        {
          "id": 1,
          "label": "class CallState(Enum):",
          "successors": [
            {
              "id": 2,
              "label": "    READY = 0\n    IN_PROGRESS = 1\n    COMPLETE = 2",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Call",
      "type": "class",
      "start_line": 79,
      "end_line": 84,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 81,
          "end_line": 83,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, rank):\n        self.state = CallState.READY\n        self.rank = rank",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, rank):",
              "successors": [
                {
                  "id": 2,
                  "label": "    self.state = CallState.READY\n    self.rank = rank",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class Call(object):\n\n        self.rank = rank\n        self.employee = None",
      "blocks": [
        {
          "id": 1,
          "label": "class Call(object):",
          "successors": [
            {
              "id": 2,
              "label": "self.rank = rank",
              "successors": []
            },
            {
              "id": 3,
              "label": "self.employee = None",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "CallCenter",
      "type": "class",
      "start_line": 87,
      "end_line": 122,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 89,
          "end_line": 93,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self, operators, supervisors, directors):\n        self.operators = operators\n        self.supervisors = supervisors\n        self.directors = directors\n        self.queued_calls = deque()",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self, operators, supervisors, directors):",
              "successors": [
                {
                  "id": 2,
                  "label": "self.operators = operators\nself.supervisors = supervisors\nself.directors = directors\nself.queued_calls = deque()",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "dispatch_call",
          "type": "function",
          "start_line": 95,
          "end_line": 106,
          "functions": [],
          "classes": [],
          "simplified_code": "    def dispatch_call(self, call):\n        if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):\n            raise ValueError('Invalid call rank: {}'.format(call.rank))\n        employee = None\n        if call.rank == Rank.OPERATOR:\n            employee = self._dispatch_call(call, self.operators)\n        if call.rank == Rank.SUPERVISOR or employee is None:\n            employee = self._dispatch_call(call, self.supervisors)\n        if call.rank == Rank.DIRECTOR or employee is None:\n            employee = self._dispatch_call(call, self.directors)\n        if employee is None:\n            self.queued_calls.append(call)",
          "blocks": [
            {
              "id": 1,
              "label": "def dispatch_call(self, call):",
              "successors": [
                {
                  "id": 2,
                  "label": "if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):",
                  "successors": [
                    {
                      "id": 3,
                      "label": "raise ValueError('Invalid call rank: {}'.format(call.rank))",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 4,
                  "label": "employee = None",
                  "successors": [
                    {
                      "id": 5,
                      "label": "if call.rank == Rank.OPERATOR:",
                      "successors": [
                        {
                          "id": 6,
                          "label": "employee = self._dispatch_call(call, self.operators)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 7,
                      "label": "if call.rank == Rank.SUPERVISOR or employee is None:",
                      "successors": [
                        {
                          "id": 8,
                          "label": "employee = self._dispatch_call(call, self.supervisors)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 9,
                      "label": "if call.rank == Rank.DIRECTOR or employee is None:",
                      "successors": [
                        {
                          "id": 10,
                          "label": "employee = self._dispatch_call(call, self.directors)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 11,
                      "label": "if employee is None:",
                      "successors": [
                        {
                          "id": 12,
                          "label": "self.queued_calls.append(call)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "_dispatch_call",
          "type": "function",
          "start_line": 108,
          "end_line": 113,
          "functions": [],
          "classes": [],
          "simplified_code": "    def _dispatch_call(self, call, employees):\n        for employee in employees:\n            if employee.call is None:\n                employee.take_call(call)\n                return employee\n        return None",
          "blocks": [
            {
              "id": 1,
              "label": "def _dispatch_call(self, call, employees):",
              "successors": [
                {
                  "id": 2,
                  "label": "for employee in employees:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "if employee.call is None:",
                      "successors": [
                        {
                          "id": 4,
                          "label": "employee.take_call(call)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "return employee",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 6,
                      "label": "return None",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "notify_call_escalated",
          "type": "function",
          "start_line": 115,
          "end_line": 116,
          "functions": [],
          "classes": [],
          "simplified_code": "    def notify_call_escalated(self, call):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def notify_call_escalated(self, call):",
              "successors": [
                {
                  "id": 2,
                  "label": "    pass",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "notify_call_completed",
          "type": "function",
          "start_line": 118,
          "end_line": 119,
          "functions": [],
          "classes": [],
          "simplified_code": "    def notify_call_completed(self, call):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def notify_call_completed(self, call):\n    pass",
              "successors": []
            }
          ]
        },
        {
          "name": "dispatch_queued_call_to_newly_freed_employee",
          "type": "function",
          "start_line": 121,
          "end_line": 122,
          "functions": [],
          "classes": [],
          "simplified_code": "    def dispatch_queued_call_to_newly_freed_employee(self, call, employee):\n        pass",
          "blocks": [
            {
              "id": 1,
              "label": "def dispatch_queued_call_to_newly_freed_employee(self, call, employee):",
              "successors": [
                {
                  "id": 2,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class CallCenter(object):\n\n        self.queued_calls = deque()\n\n            self.queued_calls.append(call)\n\n        return None\n\n        pass\n\n        pass\n\n        pass",
      "blocks": [
        {
          "id": 1,
          "label": "class CallCenter(object):",
          "successors": [
            {
              "id": 2,
              "label": "self.queued_calls = deque()",
              "successors": [
                {
                  "id": 3,
                  "label": "self.queued_calls.append(call)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "return None",
                      "successors": []
                    },
                    {
                      "id": 5,
                      "label": "pass",
                      "successors": []
                    },
                    {
                      "id": 6,
                      "label": "pass",
                      "successors": []
                    },
                    {
                      "id": 7,
                      "label": "pass",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "from abc import ABCMeta, abstractmethod\nfrom collections import deque\nfrom enum import Enum\n\n\n    DIRECTOR = 2\n\n\n        self.call_center.notify_call_escalated(call)\n\n\n        self._escalate_call()\n\n\n        self._escalate_call()\n\n\n        raise NotImplementedError('Directors must be able to handle any call')\n\n\n    COMPLETE = 2\n\n\n        self.employee = None\n\n\n        pass",
  "blocks": [
    {
      "id": 1,
      "label": "from abc import ABCMeta, abstractmethod\nfrom collections import deque\nfrom enum import Enum",
      "successors": [
        {
          "id": 2,
          "label": "DIRECTOR = 2",
          "successors": [
            {
              "id": 3,
              "label": "self.call_center.notify_call_escalated(call)",
              "successors": [
                {
                  "id": 4,
                  "label": "self._escalate_call()",
                  "successors": [
                    {
                      "id": 5,
                      "label": "self._escalate_call()",
                      "successors": [
                        {
                          "id": 6,
                          "label": "raise NotImplementedError('Directors must be able to handle any call')",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "id": 7,
          "label": "COMPLETE = 2",
          "successors": [
            {
              "id": 8,
              "label": "self.employee = None",
              "successors": [
                {
                  "id": 9,
                  "label": "pass",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}