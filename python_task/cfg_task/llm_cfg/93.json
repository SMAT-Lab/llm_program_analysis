[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 130,
    "children": [
      {
        "decl_name": "is_valid",
        "start_line": 3,
        "end_line": 32,
        "children": [],
        "code": "def is_valid(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> bool:\n    \"\"\"\n    Check if a word can be placed at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, True)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, False)\n    True\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            if row + i >= len(puzzle) or puzzle[row + i][col] != \"\":\n                return False\n        elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != \"\":\n            return False\n    return True\n",
        "cfg": {
          "nodes": [
            {
              "id": "is_valid_1",
              "code": "def is_valid(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> bool:\n"
            },
            {
              "id": "is_valid_2",
              "code": "    \"\"\"\n    Check if a word can be placed at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, True)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, False)\n    True\n    \"\"\"\n"
            },
            {
              "id": "is_valid_3",
              "code": "    for i in range(len(word)):\n        if vertical:\n            if row + i >= len(puzzle) or puzzle[row + i][col] != \"\":\n                return False\n        elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != \"\":\n            return False\n    return True\n"
            }
          ],
          "edges": [
            {
              "from": "is_valid_1",
              "to": "is_valid_2"
            },
            {
              "from": "is_valid_2",
              "to": "is_valid_3"
            }
          ]
        }
      },
      {
        "decl_name": "place_word",
        "start_line": 35,
        "end_line": 55,
        "children": [],
        "code": "def place_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n    \"\"\"\n    Place a word at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> place_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\n    \"\"\"\n    for i, char in enumerate(word):\n        if vertical:\n            puzzle[row + i][col] = char\n        else:\n            puzzle[row][col + i] = char\n",
        "cfg": {
          "nodes": [
            {
              "id": "place_word_1",
              "code": "def place_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n"
            },
            {
              "id": "place_word_2",
              "code": "    \"\"\"\n    Place a word at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> place_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\n    \"\"\"\n"
            },
            {
              "id": "place_word_3",
              "code": "    for i, char in enumerate(word):\n"
            },
            {
              "id": "place_word_4",
              "code": "        if vertical:\n            puzzle[row + i][col] = char\n"
            },
            {
              "id": "place_word_5",
              "code": "        else:\n            puzzle[row][col + i] = char\n"
            }
          ],
          "edges": [
            {
              "from": "place_word_1",
              "to": "place_word_2"
            },
            {
              "from": "place_word_2",
              "to": "place_word_3"
            },
            {
              "from": "place_word_3",
              "to": "place_word_4"
            },
            {
              "from": "place_word_3",
              "to": "place_word_5"
            },
            {
              "from": "place_word_4",
              "to": "place_word_3"
            },
            {
              "from": "place_word_5",
              "to": "place_word_3"
            }
          ]
        }
      },
      {
        "decl_name": "remove_word",
        "start_line": 58,
        "end_line": 78,
        "children": [],
        "code": "def remove_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n    \"\"\"\n    Remove a word from the given position.\n\n    >>> puzzle = [\n    ...     ['w', '', '', ''],\n    ...     ['o', '', '', ''],\n    ...     ['r', '', '', ''],\n    ...     ['d', '', '', '']\n    ... ]\n    >>> remove_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            puzzle[row + i][col] = \"\"\n        else:\n            puzzle[row][col + i] = \"\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "remove_word_1",
              "code": "def remove_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n"
            },
            {
              "id": "remove_word_2",
              "code": "    \"\"\"\n    Remove a word from the given position.\n\n    >>> puzzle = [\n    ...     ['w', '', '', ''],\n    ...     ['o', '', '', ''],\n    ...     ['r', '', '', ''],\n    ...     ['d', '', '', '']\n    ... ]\n    >>> remove_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\n    \"\"\"\n"
            },
            {
              "id": "remove_word_3",
              "code": "    for i in range(len(word)):\n"
            },
            {
              "id": "remove_word_4",
              "code": "        if vertical:\n            puzzle[row + i][col] = \"\"\n"
            },
            {
              "id": "remove_word_5",
              "code": "        else:\n            puzzle[row][col + i] = \"\"\n"
            }
          ],
          "edges": [
            {
              "from": "remove_word_1",
              "to": "remove_word_2"
            },
            {
              "from": "remove_word_2",
              "to": "remove_word_3"
            },
            {
              "from": "remove_word_3",
              "to": "remove_word_4"
            },
            {
              "from": "remove_word_3",
              "to": "remove_word_5"
            },
            {
              "from": "remove_word_4",
              "to": "remove_word_3"
            },
            {
              "from": "remove_word_5",
              "to": "remove_word_3"
            }
          ]
        }
      },
      {
        "decl_name": "solve_crossword",
        "start_line": 81,
        "end_line": 118,
        "children": [],
        "code": "def solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:\n    \"\"\"\n    Solve the crossword puzzle using backtracking.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"\n    for row in range(len(puzzle)):\n        for col in range(len(puzzle[0])):\n            if puzzle[row][col] == \"\":\n                for word in words:\n                    for vertical in [True, False]:\n                        if is_valid(puzzle, word, row, col, vertical):\n                            place_word(puzzle, word, row, col, vertical)\n                            words.remove(word)\n                            if solve_crossword(puzzle, words):\n                                return True\n                            words.append(word)\n                            remove_word(puzzle, word, row, col, vertical)\n                return False\n    return True\n",
        "cfg": {
          "nodes": [
            {
              "id": "solve_crossword_1",
              "code": "def solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:\n    \"\"\"\n    Solve the crossword puzzle using backtracking.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"\n"
            },
            {
              "id": "solve_crossword_2",
              "code": "    for row in range(len(puzzle)):\n"
            },
            {
              "id": "solve_crossword_3",
              "code": "        for col in range(len(puzzle[0])):\n"
            },
            {
              "id": "solve_crossword_4",
              "code": "            if puzzle[row][col] == \"\":\n"
            },
            {
              "id": "solve_crossword_5",
              "code": "                for word in words:\n"
            },
            {
              "id": "solve_crossword_6",
              "code": "                    for vertical in [True, False]:\n"
            },
            {
              "id": "solve_crossword_7",
              "code": "                        if is_valid(puzzle, word, row, col, vertical):\n"
            },
            {
              "id": "solve_crossword_8",
              "code": "                            place_word(puzzle, word, row, col, vertical)\n"
            },
            {
              "id": "solve_crossword_9",
              "code": "                            words.remove(word)\n"
            },
            {
              "id": "solve_crossword_10",
              "code": "                            if solve_crossword(puzzle, words):\n"
            },
            {
              "id": "solve_crossword_11",
              "code": "                                return True\n"
            },
            {
              "id": "solve_crossword_12",
              "code": "                            words.append(word)\n"
            },
            {
              "id": "solve_crossword_13",
              "code": "                            remove_word(puzzle, word, row, col, vertical)\n"
            },
            {
              "id": "solve_crossword_14",
              "code": "                return False\n"
            },
            {
              "id": "solve_crossword_15",
              "code": "    return True\n"
            }
          ],
          "edges": [
            {
              "from": "solve_crossword_1",
              "to": "solve_crossword_2"
            },
            {
              "from": "solve_crossword_2",
              "to": "solve_crossword_3"
            },
            {
              "from": "solve_crossword_3",
              "to": "solve_crossword_4"
            },
            {
              "from": "solve_crossword_4",
              "to": "solve_crossword_5"
            },
            {
              "from": "solve_crossword_4",
              "to": "solve_crossword_15"
            },
            {
              "from": "solve_crossword_5",
              "to": "solve_crossword_6"
            },
            {
              "from": "solve_crossword_6",
              "to": "solve_crossword_7"
            },
            {
              "from": "solve_crossword_7",
              "to": "solve_crossword_8"
            },
            {
              "from": "solve_crossword_7",
              "to": "solve_crossword_6"
            },
            {
              "from": "solve_crossword_8",
              "to": "solve_crossword_9"
            },
            {
              "from": "solve_crossword_9",
              "to": "solve_crossword_10"
            },
            {
              "from": "solve_crossword_10",
              "to": "solve_crossword_11"
            },
            {
              "from": "solve_crossword_10",
              "to": "solve_crossword_12"
            },
            {
              "from": "solve_crossword_12",
              "to": "solve_crossword_13"
            },
            {
              "from": "solve_crossword_13",
              "to": "solve_crossword_6"
            }
          ]
        }
      },
      {
        "decl_name": "__main__ block",
        "start_line": 121,
        "end_line": 130,
        "children": [],
        "code": "if __name__ == \"__main__\":\n    PUZZLE = [[\"\"] * 3 for _ in range(3)]\n    WORDS = [\"cat\", \"dog\", \"car\"]\n\n    if solve_crossword(PUZZLE, WORDS):\n        print(\"Solution found:\")\n        for row in PUZZLE:\n            print(\" \".join(row))\n    else:\n        print(\"No solution found:\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "__main__ block_1",
              "code": "if __name__ == \"__main__\":\n    PUZZLE = [[\"\"] * 3 for _ in range(3)]\n    WORDS = [\"cat\", \"dog\", \"car\"]\n\n"
            },
            {
              "id": "__main__ block_2",
              "code": "    if solve_crossword(PUZZLE, WORDS):\n        print(\"Solution found:\")\n"
            },
            {
              "id": "__main__ block_3",
              "code": "        for row in PUZZLE:\n            print(\" \".join(row))\n"
            },
            {
              "id": "__main__ block_4",
              "code": "    else:\n        print(\"No solution found:\")\n"
            }
          ],
          "edges": [
            {
              "from": "__main__ block_1",
              "to": "__main__ block_2"
            },
            {
              "from": "__main__ block_2",
              "to": "__main__ block_3"
            },
            {
              "from": "__main__ block_2",
              "to": "__main__ block_4"
            }
          ]
        }
      }
    ],
    "code": "# https://www.geeksforgeeks.org/solve-crossword-puzzle/\n\n\n\n\n\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "# https://www.geeksforgeeks.org/solve-crossword-puzzle/\n"
        }
      ],
      "edges": []
    }
  }
]