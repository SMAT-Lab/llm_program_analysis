[
  {
    "decl_name": "GlobalBlock",
    "start_line": 1,
    "end_line": 31,
    "children": [],
    "code": "from typing import Any, Callable, Concatenate, Coroutine, ParamSpec, TypeVar, cast\n\nfrom backend.data.credit import get_user_credit_model\nfrom backend.data.execution import (\n    ExecutionResult,\n    RedisExecutionEventBus,\n    create_graph_execution,\n    get_execution_results,\n    get_incomplete_executions,\n    get_latest_execution,\n    update_execution_status,\n    update_graph_execution_stats,\n    update_node_execution_stats,\n    upsert_execution_input,\n    upsert_execution_output,\n)\nfrom backend.data.graph import get_graph, get_node\nfrom backend.data.user import (\n    get_user_integrations,\n    get_user_metadata,\n    update_user_integrations,\n    update_user_metadata,\n)\nfrom backend.util.service import AppService, expose, register_pydantic_serializers\nfrom backend.util.settings import Config\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\nconfig = Config()\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from typing import Any, Callable, Concatenate, Coroutine, ParamSpec, TypeVar, cast\n\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from backend.data.credit import get_user_credit_model\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.execution import (\n    ExecutionResult,\n    RedisExecutionEventBus,\n    create_graph_execution,\n    get_execution_results,\n    get_incomplete_executions,\n    get_latest_execution,\n    update_execution_status,\n    update_graph_execution_stats,\n    update_node_execution_stats,\n    upsert_execution_input,\n    upsert_execution_output,\n)\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "from backend.data.graph import get_graph, get_node\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "from backend.data.user import (\n    get_user_integrations,\n    get_user_metadata,\n    update_user_integrations,\n    update_user_metadata,\n)\n"
        },
        {
          "id": "GlobalBlock_6",
          "code": "from backend.util.service import AppService, expose, register_pydantic_serializers\nfrom backend.util.settings import Config\n"
        },
        {
          "id": "GlobalBlock_7",
          "code": "\n"
        },
        {
          "id": "GlobalBlock_8",
          "code": "P = ParamSpec(\"P\")\nR = TypeVar(\"R\")\n"
        },
        {
          "id": "GlobalBlock_9",
          "code": "config = Config()\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        },
        {
          "from": "GlobalBlock_5",
          "to": "GlobalBlock_6"
        },
        {
          "from": "GlobalBlock_6",
          "to": "GlobalBlock_7"
        },
        {
          "from": "GlobalBlock_7",
          "to": "GlobalBlock_8"
        },
        {
          "from": "GlobalBlock_8",
          "to": "GlobalBlock_9"
        }
      ]
    }
  },
  {
    "decl_name": "DatabaseManager",
    "start_line": 32,
    "end_line": 93,
    "children": [
      {
        "decl_name": "DatabaseManager.__init__",
        "start_line": 33,
        "end_line": 37,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__()\n        self.use_db = True\n        self.use_redis = True\n        self.event_queue = RedisExecutionEventBus()\n",
        "cfg": {
          "nodes": [
            {
              "id": "DatabaseManager.__init___1",
              "code": "def __init__(self):\n        super().__init__()\n        self.use_db = True\n        self.use_redis = True\n        self.event_queue = RedisExecutionEventBus()\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "DatabaseManager.get_port",
        "start_line": 39,
        "end_line": 41,
        "children": [],
        "code": "    @classmethod\n    def get_port(cls) -> int:\n        return config.database_api_port\n",
        "cfg": {
          "nodes": [
            {
              "id": "DatabaseManager.get_port_1",
              "code": "@classmethod\n    def get_port(cls) -> int:\n        return config.database_api_port\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "DatabaseManager.send_execution_update",
        "start_line": 43,
        "end_line": 45,
        "children": [],
        "code": "    @expose\n    def send_execution_update(self, execution_result: ExecutionResult):\n        self.event_queue.publish(execution_result)\n",
        "cfg": {
          "nodes": [
            {
              "id": "DatabaseManager.send_execution_update_1",
              "code": "@expose\n"
            },
            {
              "id": "DatabaseManager.send_execution_update_2",
              "code": "    def send_execution_update(self, execution_result: ExecutionResult):\n        self.event_queue.publish(execution_result)\n"
            }
          ],
          "edges": [
            {
              "from": "DatabaseManager.send_execution_update_1",
              "to": "DatabaseManager.send_execution_update_2"
            }
          ]
        }
      },
      {
        "decl_name": "DatabaseManager.exposed_run_and_wait",
        "start_line": 47,
        "end_line": 61,
        "children": [
          {
            "decl_name": "DatabaseManager.exposed_run_and_wait.wrapper",
            "start_line": 53,
            "end_line": 56,
            "children": [],
            "code": "        def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res\n",
            "cfg": {
              "nodes": [
                {
                  "id": "DatabaseManager.exposed_run_and_wait.wrapper_1",
                  "code": "def wrapper(self, *args: P.args, **kwargs: P.kwargs) -> R:\n"
                },
                {
                  "id": "DatabaseManager.exposed_run_and_wait.wrapper_2",
                  "code": "            coroutine = f(*args, **kwargs)\n            res = self.run_and_wait(coroutine)\n            return res\n"
                }
              ],
              "edges": [
                {
                  "from": "DatabaseManager.exposed_run_and_wait.wrapper_1",
                  "to": "DatabaseManager.exposed_run_and_wait.wrapper_2"
                }
              ]
            }
          }
        ],
        "code": "    @staticmethod\n    def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:\n        @expose\n        @wraps(f)\n\n        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)\n\n        return wrapper\n",
        "cfg": {
          "nodes": [
            {
              "id": "DatabaseManager.exposed_run_and_wait_1",
              "code": "@staticmethod\n    def exposed_run_and_wait(\n        f: Callable[P, Coroutine[None, None, R]]\n    ) -> Callable[Concatenate[object, P], R]:\n"
            },
            {
              "id": "DatabaseManager.exposed_run_and_wait_2",
              "code": "        @expose\n        @wraps(f)\n"
            },
            {
              "id": "DatabaseManager.exposed_run_and_wait_3",
              "code": "        # Register serializers for annotations on bare function\n        register_pydantic_serializers(f)\n"
            },
            {
              "id": "DatabaseManager.exposed_run_and_wait_4",
              "code": "        return wrapper\n"
            }
          ],
          "edges": [
            {
              "from": "DatabaseManager.exposed_run_and_wait_1",
              "to": "DatabaseManager.exposed_run_and_wait_2"
            },
            {
              "from": "DatabaseManager.exposed_run_and_wait_2",
              "to": "DatabaseManager.exposed_run_and_wait_3"
            },
            {
              "from": "DatabaseManager.exposed_run_and_wait_3",
              "to": "DatabaseManager.exposed_run_and_wait_4"
            }
          ]
        }
      }
    ],
    "code": "class DatabaseManager(AppService):\n\n\n\n\n    # Executions\n    create_graph_execution = exposed_run_and_wait(create_graph_execution)\n    get_execution_results = exposed_run_and_wait(get_execution_results)\n    get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\n    get_latest_execution = exposed_run_and_wait(get_latest_execution)\n    update_execution_status = exposed_run_and_wait(update_execution_status)\n    update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)\n    update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\n    upsert_execution_input = exposed_run_and_wait(upsert_execution_input)\n    upsert_execution_output = exposed_run_and_wait(upsert_execution_output)\n\n    # Graphs\n    get_node = exposed_run_and_wait(get_node)\n    get_graph = exposed_run_and_wait(get_graph)\n\n    # Credits\n    user_credit_model = get_user_credit_model()\n    get_or_refill_credit = cast(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )\n    spend_credits = cast(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )\n\n    # User + User Metadata + User Integrations\n    get_user_metadata = exposed_run_and_wait(get_user_metadata)\n    update_user_metadata = exposed_run_and_wait(update_user_metadata)\n    get_user_integrations = exposed_run_and_wait(get_user_integrations)\n    update_user_integrations = exposed_run_and_wait(update_user_integrations)\n",
    "cfg": {
      "nodes": [
        {
          "id": "DatabaseManager_1",
          "code": "class DatabaseManager(AppService):\n"
        },
        {
          "id": "DatabaseManager_2",
          "code": "    # Executions\n    create_graph_execution = exposed_run_and_wait(create_graph_execution)\n    get_execution_results = exposed_run_and_wait(get_execution_results)\n    get_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\n    get_latest_execution = exposed_run_and_wait(get_latest_execution)\n    update_execution_status = exposed_run_and_wait(update_execution_status)\n    update_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)\n    update_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\n    upsert_execution_input = exposed_run_and_wait(upsert_execution_input)\n    upsert_execution_output = exposed_run_and_wait(upsert_execution_output)\n"
        },
        {
          "id": "DatabaseManager_3",
          "code": "    # Graphs\n    get_node = exposed_run_and_wait(get_node)\n    get_graph = exposed_run_and_wait(get_graph)\n"
        },
        {
          "id": "DatabaseManager_4",
          "code": "    # Credits\n    user_credit_model = get_user_credit_model()\n    get_or_refill_credit = cast(\n        Callable[[Any, str], int],\n        exposed_run_and_wait(user_credit_model.get_or_refill_credit),\n    )\n    spend_credits = cast(\n        Callable[[Any, str, int, str, dict[str, str], float, float], int],\n        exposed_run_and_wait(user_credit_model.spend_credits),\n    )\n"
        },
        {
          "id": "DatabaseManager_5",
          "code": "    # User + User Metadata + User Integrations\n    get_user_metadata = exposed_run_and_wait(get_user_metadata)\n    update_user_metadata = exposed_run_and_wait(update_user_metadata)\n    get_user_integrations = exposed_run_and_wait(get_user_integrations)\n    update_user_integrations = exposed_run_and_wait(update_user_integrations)\n"
        }
      ],
      "edges": [
        {
          "from": "DatabaseManager_1",
          "to": "DatabaseManager_2"
        },
        {
          "from": "DatabaseManager_2",
          "to": "DatabaseManager_3"
        },
        {
          "from": "DatabaseManager_3",
          "to": "DatabaseManager_4"
        },
        {
          "from": "DatabaseManager_4",
          "to": "DatabaseManager_5"
        }
      ]
    }
  }
]