[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 67,
    "children": [
      {
        "decl_name": "TimingInfo",
        "start_line": 9,
        "end_line": 11,
        "children": [],
        "code": "class TimingInfo(BaseModel):\n    cpu_time: float\n    wall_time: float\n",
        "cfg": {
          "nodes": [
            {
              "id": "TimingInfo_1",
              "code": "class TimingInfo(BaseModel):\n    cpu_time: float\n    wall_time: float\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "_start_measurement",
        "start_line": 14,
        "end_line": 15,
        "children": [],
        "code": "def _start_measurement() -> Tuple[float, float]:\n    return time.time(), os.times()[0] + os.times()[1]\n",
        "cfg": {
          "nodes": [
            {
              "id": "_start_measurement_1",
              "code": "def _start_measurement() -> Tuple[float, float]:\n    return time.time(), os.times()[0] + os.times()[1]\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "_end_measurement",
        "start_line": 18,
        "end_line": 23,
        "children": [],
        "code": "def _end_measurement(\n    start_wall_time: float, start_cpu_time: float\n) -> Tuple[float, float]:\n    end_wall_time = time.time()\n    end_cpu_time = os.times()[0] + os.times()[1]\n    return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time\n",
        "cfg": {
          "nodes": [
            {
              "id": "_end_measurement_1",
              "code": "def _end_measurement(\n    start_wall_time: float, start_cpu_time: float\n) -> Tuple[float, float]:\n"
            },
            {
              "id": "_end_measurement_2",
              "code": "    end_wall_time = time.time()\n    end_cpu_time = os.times()[0] + os.times()[1]\n"
            },
            {
              "id": "_end_measurement_3",
              "code": "    return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time\n"
            }
          ],
          "edges": [
            {
              "from": "_end_measurement_1",
              "to": "_end_measurement_2"
            },
            {
              "from": "_end_measurement_2",
              "to": "_end_measurement_3"
            }
          ]
        }
      },
      {
        "decl_name": "time_measured",
        "start_line": 32,
        "end_line": 49,
        "children": [
          {
            "decl_name": "time_measured.wrapper",
            "start_line": 38,
            "end_line": 47,
            "children": [],
            "code": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:\n        start_wall_time, start_cpu_time = _start_measurement()\n        try:\n            result = func(*args, **kwargs)\n        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\n        return timing_info, result\n",
            "cfg": {
              "nodes": [
                {
                  "id": "time_measured.wrapper_1",
                  "code": "def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:\n        start_wall_time, start_cpu_time = _start_measurement()\n"
                },
                {
                  "id": "time_measured.wrapper_2",
                  "code": "        try:\n            result = func(*args, **kwargs)\n"
                },
                {
                  "id": "time_measured.wrapper_3",
                  "code": "        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\n"
                },
                {
                  "id": "time_measured.wrapper_4",
                  "code": "        return timing_info, result\n"
                }
              ],
              "edges": [
                {
                  "from": "time_measured.wrapper_1",
                  "to": "time_measured.wrapper_2"
                },
                {
                  "from": "time_measured.wrapper_2",
                  "to": "time_measured.wrapper_3"
                },
                {
                  "from": "time_measured.wrapper_3",
                  "to": "time_measured.wrapper_4"
                }
              ]
            }
          }
        ],
        "code": "def time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:\n    \"\"\"\n    Decorator to measure the time taken by a function to execute.\n    \"\"\"\n\n    @functools.wraps(func)\n\n    return wrapper\n",
        "cfg": {
          "nodes": [
            {
              "id": "time_measured_1",
              "code": "def time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:\n"
            },
            {
              "id": "time_measured_2",
              "code": "    \"\"\"\n    Decorator to measure the time taken by a function to execute.\n    \"\"\"\n"
            },
            {
              "id": "time_measured_3",
              "code": "\n"
            },
            {
              "id": "time_measured_4",
              "code": "    @functools.wraps(func)\n"
            },
            {
              "id": "time_measured_5",
              "code": "\n"
            },
            {
              "id": "time_measured_6",
              "code": "    return wrapper\n"
            }
          ],
          "edges": [
            {
              "from": "time_measured_1",
              "to": "time_measured_2"
            },
            {
              "from": "time_measured_2",
              "to": "time_measured_3"
            },
            {
              "from": "time_measured_3",
              "to": "time_measured_4"
            },
            {
              "from": "time_measured_4",
              "to": "time_measured_5"
            },
            {
              "from": "time_measured_5",
              "to": "time_measured_6"
            }
          ]
        }
      },
      {
        "decl_name": "error_logged",
        "start_line": 52,
        "end_line": 66,
        "children": [
          {
            "decl_name": "error_logged.wrapper",
            "start_line": 58,
            "end_line": 65,
            "children": [],
            "code": "    def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )\n\n",
            "cfg": {
              "nodes": [
                {
                  "id": "error_logged.wrapper_1",
                  "code": "def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:\n"
                },
                {
                  "id": "error_logged.wrapper_2",
                  "code": "        try:\n            return func(*args, **kwargs)\n"
                },
                {
                  "id": "error_logged.wrapper_3",
                  "code": "        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )\n"
                }
              ],
              "edges": [
                {
                  "from": "error_logged.wrapper_1",
                  "to": "error_logged.wrapper_2"
                },
                {
                  "from": "error_logged.wrapper_2",
                  "to": "error_logged.wrapper_3"
                }
              ]
            }
          }
        ],
        "code": "def error_logged(func: Callable[P, T]) -> Callable[P, T | None]:\n    \"\"\"\n    Decorator to suppress and log any exceptions raised by a function.\n    \"\"\"\n\n    @functools.wraps(func)\n    return wrapper\n",
        "cfg": {
          "nodes": [
            {
              "id": "error_logged_1",
              "code": "def error_logged(func: Callable[P, T]) -> Callable[P, T | None]:\n"
            },
            {
              "id": "error_logged_2",
              "code": "    \"\"\"\n    Decorator to suppress and log any exceptions raised by a function.\n    \"\"\"\n"
            },
            {
              "id": "error_logged_3",
              "code": "\n"
            },
            {
              "id": "error_logged_4",
              "code": "    @functools.wraps(func)\n"
            },
            {
              "id": "error_logged_5",
              "code": "    return wrapper\n"
            }
          ],
          "edges": [
            {
              "from": "error_logged_1",
              "to": "error_logged_2"
            },
            {
              "from": "error_logged_2",
              "to": "error_logged_3"
            },
            {
              "from": "error_logged_3",
              "to": "error_logged_4"
            },
            {
              "from": "error_logged_4",
              "to": "error_logged_5"
            }
          ]
        }
      }
    ],
    "code": "import functools\nimport logging\nimport os\nimport time\nfrom typing import Callable, ParamSpec, Tuple, TypeVar\n\nfrom pydantic import BaseModel\n\n\n\n\n\n\n\n\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n\nlogger = logging.getLogger(__name__)\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import functools\nimport logging\nimport os\nimport time\nfrom typing import Callable, ParamSpec, Tuple, TypeVar\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from pydantic import BaseModel\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "P = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "logger = logging.getLogger(__name__)\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        }
      ]
    }
  }
]