[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 32,
    "children": [
      {
        "decl_name": "Slant3DCredentialsInput",
        "start_line": 8,
        "end_line": 10,
        "children": [],
        "code": "Slant3DCredentialsInput = CredentialsMetaInput[\n    Literal[ProviderName.SLANT3D], Literal[\"api_key\"]\n]\n",
        "cfg": {
          "nodes": [
            {
              "id": "Slant3DCredentialsInput_1",
              "code": "Slant3DCredentialsInput = CredentialsMetaInput[\n    Literal[ProviderName.SLANT3D], Literal[\"api_key\"]\n]\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "Slant3DCredentialsField",
        "start_line": 13,
        "end_line": 14,
        "children": [],
        "code": "def Slant3DCredentialsField() -> Slant3DCredentialsInput:\n    return CredentialsField(description=\"Slant3D API key for authentication\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "Slant3DCredentialsField_1",
              "code": "def Slant3DCredentialsField() -> Slant3DCredentialsInput:\n    return CredentialsField(description=\"Slant3D API key for authentication\")\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "TEST_CREDENTIALS",
        "start_line": 17,
        "end_line": 23,
        "children": [],
        "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"slant3d\",\n    api_key=SecretStr(\"mock-slant3d-api-key\"),\n    title=\"Mock Slant3D API key\",\n    expires_at=None,\n)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TEST_CREDENTIALS_1",
              "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"slant3d\",\n    api_key=SecretStr(\"mock-slant3d-api-key\"),\n    title=\"Mock Slant3D API key\",\n    expires_at=None,\n)\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "TEST_CREDENTIALS_INPUT",
        "start_line": 25,
        "end_line": 30,
        "children": [],
        "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}\n",
        "cfg": {
          "nodes": [
            {
              "id": "TEST_CREDENTIALS_INPUT_1",
              "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.title,\n}\n"
            }
          ],
          "edges": []
        }
      }
    ],
    "code": "from enum import Enum\nfrom typing import Literal\n\nfrom pydantic import BaseModel, SecretStr\n\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput\nfrom backend.integrations.providers import ProviderName\n\n\n\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from enum import Enum\nfrom typing import Literal\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from pydantic import BaseModel, SecretStr\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput\nfrom backend.integrations.providers import ProviderName\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        }
      ]
    }
  },
  {
    "decl_name": "CustomerDetails",
    "start_line": 33,
    "end_line": 42,
    "children": [],
    "code": "class CustomerDetails(BaseModel):\n    name: str\n    email: str\n    phone: str\n    address: str\n    city: str\n    state: str\n    zip: str\n    country_iso: str = \"US\"\n    is_residential: bool = True\n",
    "cfg": {
      "nodes": [
        {
          "id": "CustomerDetails_1",
          "code": "class CustomerDetails(BaseModel):\n    name: str\n    email: str\n    phone: str\n    address: str\n    city: str\n    state: str\n    zip: str\n    country_iso: str = \"US\"\n    is_residential: bool = True\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "Color",
    "start_line": 45,
    "end_line": 47,
    "children": [],
    "code": "class Color(Enum):\n    WHITE = \"white\"\n    BLACK = \"black\"\n",
    "cfg": {
      "nodes": [
        {
          "id": "Color_1",
          "code": "class Color(Enum):\n    WHITE = \"white\"\n    BLACK = \"black\"\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "Profile",
    "start_line": 50,
    "end_line": 52,
    "children": [],
    "code": "class Profile(Enum):\n    PLA = \"PLA\"\n    PETG = \"PETG\"\n",
    "cfg": {
      "nodes": [
        {
          "id": "Profile_1",
          "code": "class Profile(Enum):\n    PLA = \"PLA\"\n    PETG = \"PETG\"\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "OrderItem",
    "start_line": 55,
    "end_line": 60,
    "children": [],
    "code": "class OrderItem(BaseModel):\n    # filename: str\n    file_url: str\n    quantity: str  # String as per API spec\n    color: Color = Color.WHITE\n    profile: Profile = Profile.PLA\n",
    "cfg": {
      "nodes": [
        {
          "id": "OrderItem_1",
          "code": "class OrderItem(BaseModel):\n    # filename: str\n    file_url: str\n    quantity: str  # String as per API spec\n    color: Color = Color.WHITE\n    profile: Profile = Profile.PLA\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "Filament",
    "start_line": 65,
    "end_line": 69,
    "children": [],
    "code": "class Filament(BaseModel):\n    filament: str\n    hexColor: str\n    colorTag: str\n    profile: str\n",
    "cfg": {
      "nodes": [
        {
          "id": "Filament_1",
          "code": "class Filament(BaseModel):\n    filament: str\n    hexColor: str\n    colorTag: str\n    profile: str\n"
        }
      ],
      "edges": []
    }
  }
]