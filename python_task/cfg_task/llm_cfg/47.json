[
  {
    "decl_name": "GlobalBlock",
    "start_line": 1,
    "end_line": 75,
    "children": [
      {
        "decl_name": "_log_prefix",
        "start_line": 14,
        "end_line": 20,
        "children": [],
        "code": "def _log_prefix(resource_name: str, conn_id: str):\n    \"\"\"\n    Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.\n    \"\"\"\n    return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "_log_prefix_1",
              "code": "def _log_prefix(resource_name: str, conn_id: str):\n    \"\"\"\n    Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.\n    \"\"\"\n    return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "conn_retry",
        "start_line": 23,
        "end_line": 74,
        "children": [
          {
            "decl_name": "conn_retry.on_retry",
            "start_line": 33,
            "end_line": 36,
            "children": [],
            "code": "    def on_retry(retry_state):\n        prefix = _log_prefix(resource_name, conn_id)\n        exception = retry_state.outcome.exception()\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")\n",
            "cfg": {
              "nodes": [
                {
                  "id": "conn_retry.on_retry_1",
                  "code": "def on_retry(retry_state):\n"
                },
                {
                  "id": "conn_retry.on_retry_2",
                  "code": "        prefix = _log_prefix(resource_name, conn_id)\n        exception = retry_state.outcome.exception()\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")\n"
                }
              ],
              "edges": [
                {
                  "from": "conn_retry.on_retry_1",
                  "to": "conn_retry.on_retry_2"
                }
              ]
            }
          },
          {
            "decl_name": "conn_retry.decorator",
            "start_line": 38,
            "end_line": 72,
            "children": [
              {
                "decl_name": "conn_retry.decorator.sync_wrapper",
                "start_line": 49,
                "end_line": 58,
                "children": [],
                "code": "        def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n",
                "cfg": {
                  "nodes": [
                    {
                      "id": "conn_retry.decorator.sync_wrapper_1",
                      "code": "def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n"
                    },
                    {
                      "id": "conn_retry.decorator.sync_wrapper_2",
                      "code": "            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n"
                    },
                    {
                      "id": "conn_retry.decorator.sync_wrapper_3",
                      "code": "            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n"
                    }
                  ],
                  "edges": [
                    {
                      "from": "conn_retry.decorator.sync_wrapper_1",
                      "to": "conn_retry.decorator.sync_wrapper_2"
                    },
                    {
                      "from": "conn_retry.decorator.sync_wrapper_2",
                      "to": "conn_retry.decorator.sync_wrapper_3"
                    }
                  ]
                }
              },
              {
                "decl_name": "conn_retry.decorator.async_wrapper",
                "start_line": 61,
                "end_line": 70,
                "children": [],
                "code": "        async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n",
                "cfg": {
                  "nodes": [
                    {
                      "id": "conn_retry.decorator.async_wrapper_1",
                      "code": "async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n"
                    },
                    {
                      "id": "conn_retry.decorator.async_wrapper_2",
                      "code": "            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n"
                    },
                    {
                      "id": "conn_retry.decorator.async_wrapper_3",
                      "code": "            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n"
                    }
                  ],
                  "edges": [
                    {
                      "from": "conn_retry.decorator.async_wrapper_1",
                      "to": "conn_retry.decorator.async_wrapper_2"
                    },
                    {
                      "from": "conn_retry.decorator.async_wrapper_2",
                      "to": "conn_retry.decorator.async_wrapper_3"
                    }
                  ]
                }
              }
            ],
            "code": "    def decorator(func):\n        is_coroutine = asyncio.iscoroutinefunction(func)\n        retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )\n        wrapped_func = retry_decorator(func)\n\n        @wraps(func)\n\n        @wraps(func)\n\n        return async_wrapper if is_coroutine else sync_wrapper\n",
            "cfg": {
              "nodes": [
                {
                  "id": "conn_retry.decorator_1",
                  "code": "def decorator(func):\n        is_coroutine = asyncio.iscoroutinefunction(func)\n"
                },
                {
                  "id": "conn_retry.decorator_2",
                  "code": "        retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )\n"
                },
                {
                  "id": "conn_retry.decorator_3",
                  "code": "        wrapped_func = retry_decorator(func)\n"
                },
                {
                  "id": "conn_retry.decorator_4",
                  "code": "        @wraps(func)\n\n"
                },
                {
                  "id": "conn_retry.decorator_5",
                  "code": "        @wraps(func)\n\n"
                },
                {
                  "id": "conn_retry.decorator_6",
                  "code": "        return async_wrapper if is_coroutine else sync_wrapper\n"
                }
              ],
              "edges": [
                {
                  "from": "conn_retry.decorator_1",
                  "to": "conn_retry.decorator_2"
                },
                {
                  "from": "conn_retry.decorator_2",
                  "to": "conn_retry.decorator_3"
                },
                {
                  "from": "conn_retry.decorator_3",
                  "to": "conn_retry.decorator_4"
                },
                {
                  "from": "conn_retry.decorator_4",
                  "to": "conn_retry.decorator_5"
                },
                {
                  "from": "conn_retry.decorator_5",
                  "to": "conn_retry.decorator_6"
                }
              ]
            }
          }
        ],
        "code": "def conn_retry(\n    resource_name: str,\n    action_name: str,\n    max_retry: int = 5,\n    multiplier: int = 1,\n    min_wait: float = 1,\n    max_wait: float = 30,\n):\n    conn_id = str(uuid4())\n\n\n\n    return decorator\n",
        "cfg": {
          "nodes": [
            {
              "id": "conn_retry_1",
              "code": "def conn_retry(\n    resource_name: str,\n    action_name: str,\n    max_retry: int = 5,\n    multiplier: int = 1,\n    min_wait: float = 1,\n    max_wait: float = 30,\n):\n"
            },
            {
              "id": "conn_retry_2",
              "code": "    conn_id = str(uuid4())\n"
            },
            {
              "id": "conn_retry_3",
              "code": "    return decorator\n"
            }
          ],
          "edges": [
            {
              "from": "conn_retry_1",
              "to": "conn_retry_2"
            },
            {
              "from": "conn_retry_2",
              "to": "conn_retry_3"
            }
          ]
        }
      }
    ],
    "code": "import logging\nimport os\nimport threading\nfrom functools import wraps\nfrom uuid import uuid4\n\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nfrom backend.util.process import get_service_name\n\nlogger = logging.getLogger(__name__)\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import logging\nimport os\nimport threading\nfrom functools import wraps\nfrom uuid import uuid4\n\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nfrom backend.util.process import get_service_name\n\nlogger = logging.getLogger(__name__)\n"
        }
      ],
      "edges": []
    }
  }
]