[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 5,
    "children": [],
    "code": "import re\n\nfrom jinja2 import BaseLoader\nfrom jinja2.sandbox import SandboxedEnvironment\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import re\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from jinja2 import BaseLoader\nfrom jinja2.sandbox import SandboxedEnvironment\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        }
      ]
    }
  },
  {
    "decl_name": "TextFormatter",
    "start_line": 6,
    "end_line": 21,
    "children": [
      {
        "decl_name": "TextFormatter.__init__",
        "start_line": 7,
        "end_line": 14,
        "children": [],
        "code": "    def __init__(self):\n        # Create a sandboxed environment\n        self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n\n        # Clear any registered filters, tests, and globals to minimize attack surface\n        self.env.filters.clear()\n        self.env.tests.clear()\n        self.env.globals.clear()\n",
        "cfg": {
          "nodes": [
            {
              "id": "TextFormatter.__init___1",
              "code": "def __init__(self):\n"
            },
            {
              "id": "TextFormatter.__init___2",
              "code": "        # Create a sandboxed environment\n        self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n"
            },
            {
              "id": "TextFormatter.__init___3",
              "code": "        # Clear any registered filters, tests, and globals to minimize attack surface\n        self.env.filters.clear()\n        self.env.tests.clear()\n        self.env.globals.clear()\n"
            }
          ],
          "edges": [
            {
              "from": "TextFormatter.__init___1",
              "to": "TextFormatter.__init___2"
            },
            {
              "from": "TextFormatter.__init___2",
              "to": "TextFormatter.__init___3"
            }
          ]
        }
      },
      {
        "decl_name": "TextFormatter.format_string",
        "start_line": 16,
        "end_line": 21,
        "children": [],
        "code": "    def format_string(self, template_str: str, values=None, **kwargs) -> str:\n        # For python.format compatibility: replace all {...} with {{..}}.\n        # But avoid replacing {{...}} to {{{...}}}.\n        template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)\n        template = self.env.from_string(template_str)\n        return template.render(values or {}, **kwargs)\n",
        "cfg": {
          "nodes": [
            {
              "id": "TextFormatter.format_string_1",
              "code": "def format_string(self, template_str: str, values=None, **kwargs) -> str:\n"
            },
            {
              "id": "TextFormatter.format_string_2",
              "code": "        # For python.format compatibility: replace all {...} with {{..}}.\n        # But avoid replacing {{...}} to {{{...}}}.\n"
            },
            {
              "id": "TextFormatter.format_string_3",
              "code": "        template_str = re.sub(r\"(?<!{){[ a-zA-Z0-9_]+}\", r\"{\\g<0>}\", template_str)\n"
            },
            {
              "id": "TextFormatter.format_string_4",
              "code": "        template = self.env.from_string(template_str)\n"
            },
            {
              "id": "TextFormatter.format_string_5",
              "code": "        return template.render(values or {}, **kwargs)\n"
            }
          ],
          "edges": [
            {
              "from": "TextFormatter.format_string_1",
              "to": "TextFormatter.format_string_2"
            },
            {
              "from": "TextFormatter.format_string_2",
              "to": "TextFormatter.format_string_3"
            },
            {
              "from": "TextFormatter.format_string_3",
              "to": "TextFormatter.format_string_4"
            },
            {
              "from": "TextFormatter.format_string_4",
              "to": "TextFormatter.format_string_5"
            }
          ]
        }
      }
    ],
    "code": "class TextFormatter:\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "TextFormatter_1",
          "code": "class TextFormatter:\n"
        }
      ],
      "edges": []
    }
  }
]