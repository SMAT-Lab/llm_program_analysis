{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 577,
  "functions": [
    {
      "name": "get_profile",
      "type": "function",
      "start_line": 31,
      "end_line": 47,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_profile(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ]\n):\n    \"\"\"\n    Get the profile details for the authenticated user.\n    \"\"\"\n    try:\n        profile = await backend.server.v2.store.db.get_user_profile(user_id)\n        return profile\n    except Exception:\n        logger.exception(\"Exception occurred whilst getting user profile\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while retrieving the user profile\"},\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_profile(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ]\n):",
          "successors": [
            {
              "id": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "label": "    profile = await backend.server.v2.store.db.get_user_profile(user_id)\n    return profile",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "except Exception:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    logger.exception(\"Exception occurred whilst getting user profile\")\n    return fastapi.responses.JSONResponse(\n        status_code=500,\n        content={\"detail\": \"An error occurred while retrieving the user profile\"},\n    )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "update_or_create_profile",
      "type": "function",
      "start_line": 56,
      "end_line": 85,
      "functions": [],
      "classes": [],
      "simplified_code": "async def update_or_create_profile(\n    profile: backend.server.v2.store.model.Profile,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):\n    \"\"\"\n    Update the store profile for the authenticated user.\n\n    Args:\n        profile (Profile): The updated profile details\n        user_id (str): ID of the authenticated user\n\n    Returns:\n        CreatorDetails: The updated profile\n\n    Raises:\n        HTTPException: If there is an error updating the profile\n    \"\"\"\n    try:\n        updated_profile = await backend.server.v2.store.db.update_or_create_profile(\n            user_id=user_id, profile=profile\n        )\n        return updated_profile\n    except Exception:\n        logger.exception(\"Exception occurred whilst updating profile\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while updating the user profile\"},\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def update_or_create_profile(\n    profile: backend.server.v2.store.model.Profile,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):",
          "successors": [
            {
              "id": 2,
              "label": "    try:",
              "successors": [
                {
                  "id": 3,
                  "label": "        updated_profile = await backend.server.v2.store.db.update_or_create_profile(\n            user_id=user_id, profile=profile\n        )",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        return updated_profile",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "    except Exception:",
                  "successors": [
                    {
                      "id": 6,
                      "label": "        logger.exception(\"Exception occurred whilst updating profile\")",
                      "successors": [
                        {
                          "id": 7,
                          "label": "        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while updating the user profile\"},\n        )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_agents",
      "type": "function",
      "start_line": 98,
      "end_line": 159,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_agents(\n    featured: bool = False,\n    creator: str | None = None,\n    sorted_by: str | None = None,\n    search_query: str | None = None,\n    category: str | None = None,\n    page: int = 1,\n    page_size: int = 20,\n):\n    \"\"\"\n    Get a paginated list of agents from the store with optional filtering and sorting.\n\n    Args:\n        featured (bool, optional): Filter to only show featured agents. Defaults to False.\n        creator (str | None, optional): Filter agents by creator username. Defaults to None.\n        sorted_by (str | None, optional): Sort agents by \"runs\" or \"rating\". Defaults to None.\n        search_query (str | None, optional): Search agents by name, subheading and description. Defaults to None.\n        category (str | None, optional): Filter agents by category. Defaults to None.\n        page (int, optional): Page number for pagination. Defaults to 1.\n        page_size (int, optional): Number of agents per page. Defaults to 20.\n\n    Returns:\n        StoreAgentsResponse: Paginated list of agents matching the filters\n\n    Raises:\n        HTTPException: If page or page_size are less than 1\n\n    Used for:\n    - Home Page Featured Agents\n    - Home Page Top Agents\n    - Search Results\n    - Agent Details - Other Agents By Creator\n    - Agent Details - Similar Agents\n    - Creator Details - Agents By Creator\n    \"\"\"\n    if page < 1:\n        raise fastapi.HTTPException(\n            status_code=422, detail=\"Page must be greater than 0\"\n        )\n\n    if page_size < 1:\n        raise fastapi.HTTPException(\n            status_code=422, detail=\"Page size must be greater than 0\"\n        )\n\n    try:\n        agents = await backend.server.v2.store.db.get_store_agents(\n            featured=featured,\n            creator=creator,\n            sorted_by=sorted_by,\n            search_query=search_query,\n            category=category,\n            page=page,\n            page_size=page_size,\n        )\n        return agents\n    except Exception:\n        logger.exception(\"Exception occured whilst getting store agents\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while retrieving the store agents\"},\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "if page < 1:",
          "successors": [
            {
              "id": 2,
              "label": "    raise fastapi.HTTPException(\n        status_code=422, detail=\"Page must be greater than 0\"\n    )",
              "successors": []
            },
            {
              "id": 3,
              "label": "if page_size < 1:",
              "successors": [
                {
                  "id": 4,
                  "label": "    raise fastapi.HTTPException(\n        status_code=422, detail=\"Page size must be greater than 0\"\n    )",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "try:",
                  "successors": [
                    {
                      "id": 6,
                      "label": "    agents = await backend.server.v2.store.db.get_store_agents(\n        featured=featured,\n        creator=creator,\n        sorted_by=sorted_by,\n        search_query=search_query,\n        category=category,\n        page=page,\n        page_size=page_size,\n    )",
                      "successors": [
                        {
                          "id": 7,
                          "label": "    return agents",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "label": "except Exception:",
                      "successors": [
                        {
                          "id": 9,
                          "label": "    logger.exception(\"Exception occured whilst getting store agents\")",
                          "successors": [
                            {
                              "id": 10,
                              "label": "    return fastapi.responses.JSONResponse(\n        status_code=500,\n        content={\"detail\": \"An error occurred while retrieving the store agents\"},\n    )",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_agent",
      "type": "function",
      "start_line": 167,
      "end_line": 188,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_agent(username: str, agent_name: str):\n    \"\"\"\n    This is only used on the AgentDetails Page\n\n    It returns the store listing agents details.\n    \"\"\"\n    try:\n        username = urllib.parse.unquote(username).lower()\n        # URL decode the agent name since it comes from the URL path\n        agent_name = urllib.parse.unquote(agent_name).lower()\n        agent = await backend.server.v2.store.db.get_store_agent_details(\n            username=username, agent_name=agent_name\n        )\n        return agent\n    except Exception:\n        logger.exception(\"Exception occurred whilst getting store agent details\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\n                \"detail\": \"An error occurred while retrieving the store agent details\"\n            },\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_agent(username: str, agent_name: str):",
          "successors": [
            {
              "id": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "label": "username = urllib.parse.unquote(username).lower()\nagent_name = urllib.parse.unquote(agent_name).lower()\nagent = await backend.server.v2.store.db.get_store_agent_details(\n    username=username, agent_name=agent_name\n)\nreturn agent",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "except Exception:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "logger.exception(\"Exception occurred whilst getting store agent details\")\nreturn fastapi.responses.JSONResponse(\n    status_code=500,\n    content={\n        \"detail\": \"An error occurred while retrieving the store agent details\"\n    },\n)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "create_review",
      "type": "function",
      "start_line": 197,
      "end_line": 234,
      "functions": [],
      "classes": [],
      "simplified_code": "async def create_review(\n    username: str,\n    agent_name: str,\n    review: backend.server.v2.store.model.StoreReviewCreate,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):\n    \"\"\"\n    Create a review for a store agent.\n\n    Args:\n        username: Creator's username\n        agent_name: Name/slug of the agent\n        review: Review details including score and optional comments\n        user_id: ID of authenticated user creating the review\n\n    Returns:\n        The created review\n    \"\"\"\n    try:\n        username = urllib.parse.unquote(username).lower()\n        agent_name = urllib.parse.unquote(agent_name)\n        # Create the review\n        created_review = await backend.server.v2.store.db.create_store_review(\n            user_id=user_id,\n            store_listing_version_id=review.store_listing_version_id,\n            score=review.score,\n            comments=review.comments,\n        )\n\n        return created_review\n    except Exception:\n        logger.exception(\"Exception occurred whilst creating store review\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while creating the store review\"},\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def create_review(\n    username: str,\n    agent_name: str,\n    review: backend.server.v2.store.model.StoreReviewCreate,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):\n    \"\"\"\n    Create a review for a store agent.\n\n    Args:\n        username: Creator's username\n        agent_name: Name/slug of the agent\n        review: Review details including score and optional comments\n        user_id: ID of authenticated user creating the review\n\n    Returns:\n        The created review\n    \"\"\"\n    try:",
          "successors": [
            {
              "id": 2,
              "label": "username = urllib.parse.unquote(username).lower()\nagent_name = urllib.parse.unquote(agent_name)\n# Create the review\ncreated_review = await backend.server.v2.store.db.create_store_review(\n    user_id=user_id,\n    store_listing_version_id=review.store_listing_version_id,\n    score=review.score,\n    comments=review.comments,\n)\n\nreturn created_review",
              "successors": []
            },
            {
              "id": 3,
              "label": "except Exception:",
              "successors": [
                {
                  "id": 4,
                  "label": "logger.exception(\"Exception occurred whilst creating store review\")\nreturn fastapi.responses.JSONResponse(\n    status_code=500,\n    content={\"detail\": \"An error occurred while creating the store review\"},\n)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_creators",
      "type": "function",
      "start_line": 247,
      "end_line": 290,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_creators(\n    featured: bool = False,\n    search_query: str | None = None,\n    sorted_by: str | None = None,\n    page: int = 1,\n    page_size: int = 20,\n):\n    \"\"\"\n    This is needed for:\n    - Home Page Featured Creators\n    - Search Results Page\n\n    ---\n\n    To support this functionality we need:\n    - featured: bool - to limit the list to just featured agents\n    - search_query: str - vector search based on the creators profile description.\n    - sorted_by: [agent_rating, agent_runs] -\n    \"\"\"\n    if page < 1:\n        raise fastapi.HTTPException(\n            status_code=422, detail=\"Page must be greater than 0\"\n        )\n\n    if page_size < 1:\n        raise fastapi.HTTPException(\n            status_code=422, detail=\"Page size must be greater than 0\"\n        )\n\n    try:\n        creators = await backend.server.v2.store.db.get_store_creators(\n            featured=featured,\n            search_query=search_query,\n            sorted_by=sorted_by,\n            page=page,\n            page_size=page_size,\n        )\n        return creators\n    except Exception:\n        logger.exception(\"Exception occurred whilst getting store creators\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while retrieving the store creators\"},\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_creators(\n    featured: bool = False,\n    search_query: str | None = None,\n    sorted_by: str | None = None,\n    page: int = 1,\n    page_size: int = 20,\n):",
          "successors": [
            {
              "id": 2,
              "label": "if page < 1:",
              "successors": [
                {
                  "id": 3,
                  "label": "raise fastapi.HTTPException(\n    status_code=422, detail=\"Page must be greater than 0\"\n)",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "if page_size < 1:",
              "successors": [
                {
                  "id": 5,
                  "label": "raise fastapi.HTTPException(\n    status_code=422, detail=\"Page size must be greater than 0\"\n)",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "try:",
              "successors": [
                {
                  "id": 7,
                  "label": "creators = await backend.server.v2.store.db.get_store_creators(\n    featured=featured,\n    search_query=search_query,\n    sorted_by=sorted_by,\n    page=page,\n    page_size=page_size,\n)",
                  "successors": [
                    {
                      "id": 8,
                      "label": "return creators",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "except Exception:",
                  "successors": [
                    {
                      "id": 10,
                      "label": "logger.exception(\"Exception occurred whilst getting store creators\")",
                      "successors": [
                        {
                          "id": 11,
                          "label": "return fastapi.responses.JSONResponse(\n    status_code=500,\n    content={\"detail\": \"An error occurred while retrieving the store creators\"},\n)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_creator",
      "type": "function",
      "start_line": 298,
      "end_line": 318,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_creator(\n    username: str,\n):\n    \"\"\"\n    Get the details of a creator\n    - Creator Details Page\n    \"\"\"\n    try:\n        username = urllib.parse.unquote(username).lower()\n        creator = await backend.server.v2.store.db.get_store_creator_details(\n            username=username.lower()\n        )\n        return creator\n    except Exception:\n        logger.exception(\"Exception occurred whilst getting creator details\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\n                \"detail\": \"An error occurred while retrieving the creator details\"\n            },\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_creator(\n    username: str,\n):",
          "successors": [
            {
              "id": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "label": "    username = urllib.parse.unquote(username).lower()\n    creator = await backend.server.v2.store.db.get_store_creator_details(\n        username=username.lower()\n    )\n    return creator",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "except Exception:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    logger.exception(\"Exception occurred whilst getting creator details\")\n    return fastapi.responses.JSONResponse(\n        status_code=500,\n        content={\n            \"detail\": \"An error occurred while retrieving the creator details\"\n        },\n    )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_my_agents",
      "type": "function",
      "start_line": 330,
      "end_line": 343,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_my_agents(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ]\n):\n    try:\n        agents = await backend.server.v2.store.db.get_my_agents(user_id)\n        return agents\n    except Exception:\n        logger.exception(\"Exception occurred whilst getting my agents\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while retrieving the my agents\"},\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_my_agents(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ]\n):",
          "successors": [
            {
              "id": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "label": "    agents = await backend.server.v2.store.db.get_my_agents(user_id)\n    return agents",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "except Exception:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "    logger.exception(\"Exception occurred whilst getting my agents\")\n    return fastapi.responses.JSONResponse(\n        status_code=500,\n        content={\"detail\": \"An error occurred while retrieving the my agents\"},\n    )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "delete_submission",
      "type": "function",
      "start_line": 352,
      "end_line": 379,
      "functions": [],
      "classes": [],
      "simplified_code": "async def delete_submission(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n    submission_id: str,\n):\n    \"\"\"\n    Delete a store listing submission.\n\n    Args:\n        user_id (str): ID of the authenticated user\n        submission_id (str): ID of the submission to be deleted\n\n    Returns:\n        bool: True if the submission was successfully deleted, False otherwise\n    \"\"\"\n    try:\n        result = await backend.server.v2.store.db.delete_store_submission(\n            user_id=user_id,\n            submission_id=submission_id,\n        )\n        return result\n    except Exception:\n        logger.exception(\"Exception occurred whilst deleting store submission\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while deleting the store submission\"},\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def delete_submission(...):",
          "successors": [
            {
              "id": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "label": "result = await backend.server.v2.store.db.delete_store_submission(...)\nreturn result",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "except Exception:",
                  "successors": [
                    {
                      "id": 5,
                      "label": "logger.exception(\"Exception occurred whilst deleting store submission\")\nreturn fastapi.responses.JSONResponse(...)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "get_submissions",
      "type": "function",
      "start_line": 388,
      "end_line": 432,
      "functions": [],
      "classes": [],
      "simplified_code": "async def get_submissions(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n    page: int = 1,\n    page_size: int = 20,\n):\n    \"\"\"\n    Get a paginated list of store submissions for the authenticated user.\n\n    Args:\n        user_id (str): ID of the authenticated user\n        page (int, optional): Page number for pagination. Defaults to 1.\n        page_size (int, optional): Number of submissions per page. Defaults to 20.\n\n    Returns:\n        StoreListingsResponse: Paginated list of store submissions\n\n    Raises:\n        HTTPException: If page or page_size are less than 1\n    \"\"\"\n    if page < 1:\n        raise fastapi.HTTPException(\n            status_code=422, detail=\"Page must be greater than 0\"\n        )\n\n    if page_size < 1:\n        raise fastapi.HTTPException(\n            status_code=422, detail=\"Page size must be greater than 0\"\n        )\n    try:\n        listings = await backend.server.v2.store.db.get_store_submissions(\n            user_id=user_id,\n            page=page,\n            page_size=page_size,\n        )\n        return listings\n    except Exception:\n        logger.exception(\"Exception occurred whilst getting store submissions\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\n                \"detail\": \"An error occurred while retrieving the store submissions\"\n            },\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def get_submissions( user_id: typing.Annotated[ str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id) ], page: int = 1, page_size: int = 20, ):",
          "successors": [
            {
              "id": 2,
              "label": "if page < 1:",
              "successors": [
                {
                  "id": 3,
                  "label": "raise fastapi.HTTPException( status_code=422, detail=\"Page must be greater than 0\" )",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "if page_size < 1:",
              "successors": [
                {
                  "id": 5,
                  "label": "raise fastapi.HTTPException( status_code=422, detail=\"Page size must be greater than 0\" )",
                  "successors": []
                }
              ]
            },
            {
              "id": 6,
              "label": "try:",
              "successors": [
                {
                  "id": 7,
                  "label": "listings = await backend.server.v2.store.db.get_store_submissions( user_id=user_id, page=page, page_size=page_size, )",
                  "successors": [
                    {
                      "id": 8,
                      "label": "return listings",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 9,
                  "label": "except Exception:",
                  "successors": [
                    {
                      "id": 10,
                      "label": "logger.exception(\"Exception occurred whilst getting store submissions\")",
                      "successors": [
                        {
                          "id": 11,
                          "label": "return fastapi.responses.JSONResponse( status_code=500, content={ \"detail\": \"An error occurred while retrieving the store submissions\" }, )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "create_submission",
      "type": "function",
      "start_line": 441,
      "end_line": 479,
      "functions": [],
      "classes": [],
      "simplified_code": "async def create_submission(\n    submission_request: backend.server.v2.store.model.StoreSubmissionRequest,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):\n    \"\"\"\n    Create a new store listing submission.\n\n    Args:\n        submission_request (StoreSubmissionRequest): The submission details\n        user_id (str): ID of the authenticated user submitting the listing\n\n    Returns:\n        StoreSubmission: The created store submission\n\n    Raises:\n        HTTPException: If there is an error creating the submission\n    \"\"\"\n    try:\n        submission = await backend.server.v2.store.db.create_store_submission(\n            user_id=user_id,\n            agent_id=submission_request.agent_id,\n            agent_version=submission_request.agent_version,\n            slug=submission_request.slug,\n            name=submission_request.name,\n            video_url=submission_request.video_url,\n            image_urls=submission_request.image_urls,\n            description=submission_request.description,\n            sub_heading=submission_request.sub_heading,\n            categories=submission_request.categories,\n        )\n        return submission\n    except Exception:\n        logger.exception(\"Exception occurred whilst creating store submission\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while creating the store submission\"},\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def create_submission(\n    submission_request: backend.server.v2.store.model.StoreSubmissionRequest,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):",
          "successors": [
            {
              "id": 2,
              "label": "    try:",
              "successors": [
                {
                  "id": 3,
                  "label": "        submission = await backend.server.v2.store.db.create_store_submission(\n            user_id=user_id,\n            agent_id=submission_request.agent_id,\n            agent_version=submission_request.agent_version,\n            slug=submission_request.slug,\n            name=submission_request.name,\n            video_url=submission_request.video_url,\n            image_urls=submission_request.image_urls,\n            description=submission_request.description,\n            sub_heading=submission_request.sub_heading,\n            categories=submission_request.categories,\n        )",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        return submission",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "    except Exception:",
                  "successors": [
                    {
                      "id": 6,
                      "label": "        logger.exception(\"Exception occurred whilst creating store submission\")",
                      "successors": [
                        {
                          "id": 7,
                          "label": "        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while creating the store submission\"},\n        )",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "upload_submission_media",
      "type": "function",
      "start_line": 487,
      "end_line": 516,
      "functions": [],
      "classes": [],
      "simplified_code": "async def upload_submission_media(\n    file: fastapi.UploadFile,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):\n    \"\"\"\n    Upload media (images/videos) for a store listing submission.\n\n    Args:\n        file (UploadFile): The media file to upload\n        user_id (str): ID of the authenticated user uploading the media\n\n    Returns:\n        str: URL of the uploaded media file\n\n    Raises:\n        HTTPException: If there is an error uploading the media\n    \"\"\"\n    try:\n        media_url = await backend.server.v2.store.media.upload_media(\n            user_id=user_id, file=file\n        )\n        return media_url\n    except Exception:\n        logger.exception(\"Exception occurred whilst uploading submission media\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while uploading the media file\"},\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def upload_submission_media(\n    file: fastapi.UploadFile,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):",
          "successors": [
            {
              "id": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "label": "media_url = await backend.server.v2.store.media.upload_media(\n    user_id=user_id, file=file\n)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "return media_url",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "except Exception:",
                  "successors": [
                    {
                      "id": 6,
                      "label": "logger.exception(\"Exception occurred whilst uploading submission media\")",
                      "successors": [
                        {
                          "id": 7,
                          "label": "return fastapi.responses.JSONResponse(\n    status_code=500,\n    content={\"detail\": \"An error occurred while uploading the media file\"},\n)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "generate_image",
      "type": "function",
      "start_line": 524,
      "end_line": 577,
      "functions": [],
      "classes": [],
      "simplified_code": "async def generate_image(\n    agent_id: str,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n) -> fastapi.responses.Response:\n    \"\"\"\n    Generate an image for a store listing submission.\n\n    Args:\n        agent_id (str): ID of the agent to generate an image for\n        user_id (str): ID of the authenticated user\n\n    Returns:\n        JSONResponse: JSON containing the URL of the generated image\n    \"\"\"\n    try:\n        agent = await backend.data.graph.get_graph(agent_id, user_id=user_id)\n\n        if not agent:\n            raise fastapi.HTTPException(\n                status_code=404, detail=f\"Agent with ID {agent_id} not found\"\n            )\n        # Use .jpeg here since we are generating JPEG images\n        filename = f\"agent_{agent_id}.jpeg\"\n\n        existing_url = await backend.server.v2.store.media.check_media_exists(\n            user_id, filename\n        )\n        if existing_url:\n            logger.info(f\"Using existing image for agent {agent_id}\")\n            return fastapi.responses.JSONResponse(content={\"image_url\": existing_url})\n        # Generate agent image as JPEG\n        image = await backend.server.v2.store.image_gen.generate_agent_image(\n            agent=agent\n        )\n\n        # Create UploadFile with the correct filename and content_type\n        image_file = fastapi.UploadFile(\n            file=image,\n            filename=filename,\n        )\n\n        image_url = await backend.server.v2.store.media.upload_media(\n            user_id=user_id, file=image_file, use_file_name=True\n        )\n\n        return fastapi.responses.JSONResponse(content={\"image_url\": image_url})\n    except Exception:\n        logger.exception(\"Exception occurred whilst generating submission image\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while generating the image\"},\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "async def generate_image(...) -> fastapi.responses.Response:",
          "successors": [
            {
              "id": 2,
              "label": "try:",
              "successors": [
                {
                  "id": 3,
                  "label": "agent = await backend.data.graph.get_graph(agent_id, user_id=user_id)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "if not agent:",
                      "successors": [
                        {
                          "id": 5,
                          "label": "raise fastapi.HTTPException(...)",
                          "successors": []
                        },
                        {
                          "id": 6,
                          "label": "filename = f\"agent_{agent_id}.jpeg\"",
                          "successors": [
                            {
                              "id": 7,
                              "label": "existing_url = await backend.server.v2.store.media.check_media_exists(user_id, filename)",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "if existing_url:",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "logger.info(f\"Using existing image for agent {agent_id}\")",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "return fastapi.responses.JSONResponse(content={\"image_url\": existing_url})",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 11,
                                      "label": "image = await backend.server.v2.store.image_gen.generate_agent_image(agent=agent)",
                                      "successors": [
                                        {
                                          "id": 12,
                                          "label": "image_file = fastapi.UploadFile(file=image, filename=filename)",
                                          "successors": [
                                            {
                                              "id": 13,
                                              "label": "image_url = await backend.server.v2.store.media.upload_media(user_id=user_id, file=image_file, use_file_name=True)",
                                              "successors": [
                                                {
                                                  "id": 14,
                                                  "label": "return fastapi.responses.JSONResponse(content={\"image_url\": image_url})",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 15,
              "label": "except Exception:",
              "successors": [
                {
                  "id": 16,
                  "label": "logger.exception(\"Exception occurred whilst generating submission image\")",
                  "successors": [
                    {
                      "id": 17,
                      "label": "return fastapi.responses.JSONResponse(status_code=500, content={\"detail\": \"An error occurred while generating the image\"})",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import logging\nimport typing\nimport urllib.parse\n\nimport autogpt_libs.auth.depends\nimport autogpt_libs.auth.middleware\nimport fastapi\nimport fastapi.responses\n\nimport backend.data.graph\nimport backend.server.v2.store.db\nimport backend.server.v2.store.image_gen\nimport backend.server.v2.store.media\nimport backend.server.v2.store.model\n\nlogger = logging.getLogger(__name__)\n\nrouter = fastapi.APIRouter()\n\n\n##############################################\n############### Profile Endpoints ############\n##############################################\n\n\n@router.get(\n    \"/profile\",\n    tags=[\"store\", \"private\"],\n    response_model=backend.server.v2.store.model.ProfileDetails,\n)\n        )\n\n\n@router.post(\n    \"/profile\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.CreatorDetails,\n)\n        )\n\n\n##############################################\n############### Agent Endpoints ##############\n##############################################\n\n\n@router.get(\n    \"/agents\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.StoreAgentsResponse,\n)\n        )\n\n\n@router.get(\n    \"/agents/{username}/{agent_name}\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.StoreAgentDetails,\n)\n        )\n\n\n@router.post(\n    \"/agents/{username}/{agent_name}/review\",\n    tags=[\"store\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.StoreReview,\n)\n        )\n\n\n##############################################\n############# Creator Endpoints #############\n##############################################\n\n\n@router.get(\n    \"/creators\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.CreatorsResponse,\n)\n        )\n\n\n@router.get(\n    \"/creator/{username}\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.CreatorDetails,\n)\n        )\n\n\n############################################\n############# Store Submissions ###############\n############################################\n@router.get(\n    \"/myagents\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.MyAgentsResponse,\n)\n        )\n\n\n@router.delete(\n    \"/submissions/{submission_id}\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=bool,\n)\n        )\n\n\n@router.get(\n    \"/submissions\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.StoreSubmissionsResponse,\n)\n        )\n\n\n@router.post(\n    \"/submissions\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.StoreSubmission,\n)\n        )\n\n\n@router.post(\n    \"/submissions/media\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n)\n        )\n\n\n@router.post(\n    \"/submissions/generate_image\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n)\n        )",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nimport typing\nimport urllib.parse\n\nimport autogpt_libs.auth.depends\nimport autogpt_libs.auth.middleware\nimport fastapi\nimport fastapi.responses\n\nimport backend.data.graph\nimport backend.server.v2.store.db\nimport backend.server.v2.store.image_gen\nimport backend.server.v2.store.media\nimport backend.server.v2.store.model\n\nlogger = logging.getLogger(__name__)\n\nrouter = fastapi.APIRouter()",
      "successors": []
    },
    {
      "id": 2,
      "label": "@router.get(\n    \"/profile\",\n    tags=[\"store\", \"private\"],\n    response_model=backend.server.v2.store.model.ProfileDetails,\n)",
      "successors": []
    },
    {
      "id": 3,
      "label": "@router.post(\n    \"/profile\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.CreatorDetails,\n)",
      "successors": []
    },
    {
      "id": 4,
      "label": "@router.get(\n    \"/agents\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.StoreAgentsResponse,\n)",
      "successors": []
    },
    {
      "id": 5,
      "label": "@router.get(\n    \"/agents/{username}/{agent_name}\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.StoreAgentDetails,\n)",
      "successors": []
    },
    {
      "id": 6,
      "label": "@router.post(\n    \"/agents/{username}/{agent_name}/review\",\n    tags=[\"store\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.StoreReview,\n)",
      "successors": []
    },
    {
      "id": 7,
      "label": "@router.get(\n    \"/creators\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.CreatorsResponse,\n)",
      "successors": []
    },
    {
      "id": 8,
      "label": "@router.get(\n    \"/creator/{username}\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.CreatorDetails,\n)",
      "successors": []
    },
    {
      "id": 9,
      "label": "@router.get(\n    \"/myagents\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.MyAgentsResponse,\n)",
      "successors": []
    },
    {
      "id": 10,
      "label": "@router.delete(\n    \"/submissions/{submission_id}\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=bool,\n)",
      "successors": []
    },
    {
      "id": 11,
      "label": "@router.get(\n    \"/submissions\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.StoreSubmissionsResponse,\n)",
      "successors": []
    },
    {
      "id": 12,
      "label": "@router.post(\n    \"/submissions\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.StoreSubmission,\n)",
      "successors": []
    },
    {
      "id": 13,
      "label": "@router.post(\n    \"/submissions/media\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n)",
      "successors": []
    },
    {
      "id": 14,
      "label": "@router.post(\n    \"/submissions/generate_image\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n)",
      "successors": []
    }
  ]
}