[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 15,
    "children": [],
    "code": "from google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\nfrom ._auth import (\n    GOOGLE_OAUTH_IS_CONFIGURED,\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GoogleCredentials,\n    GoogleCredentialsField,\n    GoogleCredentialsInput,\n)\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from ._auth import (\n    GOOGLE_OAUTH_IS_CONFIGURED,\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    GoogleCredentials,\n    GoogleCredentialsField,\n    GoogleCredentialsInput,\n)\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        }
      ]
    }
  },
  {
    "decl_name": "GoogleSheetsReadBlock",
    "start_line": 16,
    "end_line": 99,
    "children": [
      {
        "decl_name": "GoogleSheetsReadBlock.Input",
        "start_line": 17,
        "end_line": 26,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/spreadsheets.readonly\"]\n        )\n        spreadsheet_id: str = SchemaField(\n            description=\"The ID of the spreadsheet to read from\",\n        )\n        range: str = SchemaField(\n            description=\"The A1 notation of the range to read\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GoogleSheetsReadBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "GoogleSheetsReadBlock.Input_2",
              "code": "        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/spreadsheets.readonly\"]\n        )\n"
            },
            {
              "id": "GoogleSheetsReadBlock.Input_3",
              "code": "        spreadsheet_id: str = SchemaField(\n            description=\"The ID of the spreadsheet to read from\",\n        )\n"
            },
            {
              "id": "GoogleSheetsReadBlock.Input_4",
              "code": "        range: str = SchemaField(\n            description=\"The A1 notation of the range to read\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GoogleSheetsReadBlock.Input_1",
              "to": "GoogleSheetsReadBlock.Input_2"
            },
            {
              "from": "GoogleSheetsReadBlock.Input_2",
              "to": "GoogleSheetsReadBlock.Input_3"
            },
            {
              "from": "GoogleSheetsReadBlock.Input_3",
              "to": "GoogleSheetsReadBlock.Input_4"
            }
          ]
        }
      },
      {
        "decl_name": "GoogleSheetsReadBlock.Output",
        "start_line": 28,
        "end_line": 34,
        "children": [],
        "code": "    class Output(BlockSchema):\n        result: list[list[str]] = SchemaField(\n            description=\"The data read from the spreadsheet\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GoogleSheetsReadBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "GoogleSheetsReadBlock.Output_2",
              "code": "        result: list[list[str]] = SchemaField(\n            description=\"The data read from the spreadsheet\",\n        )\n"
            },
            {
              "id": "GoogleSheetsReadBlock.Output_3",
              "code": "        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GoogleSheetsReadBlock.__init__",
        "start_line": 36,
        "end_line": 65,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"5724e902-3635-47e9-a108-aaa0263a4988\",\n            description=\"This block reads data from a Google Sheets spreadsheet.\",\n            categories={BlockCategory.DATA},\n            input_schema=GoogleSheetsReadBlock.Input,\n            output_schema=GoogleSheetsReadBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"spreadsheet_id\": \"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\",\n                \"range\": \"Sheet1!A1:B2\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    [\n                        [\"Name\", \"Score\"],\n                        [\"Alice\", \"85\"],\n                    ],\n                ),\n            ],\n            test_mock={\n                \"_read_sheet\": lambda *args, **kwargs: [\n                    [\"Name\", \"Score\"],\n                    [\"Alice\", \"85\"],\n                ],\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GoogleSheetsReadBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"5724e902-3635-47e9-a108-aaa0263a4988\",\n            description=\"This block reads data from a Google Sheets spreadsheet.\",\n            categories={BlockCategory.DATA},\n            input_schema=GoogleSheetsReadBlock.Input,\n            output_schema=GoogleSheetsReadBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"spreadsheet_id\": \"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\",\n                \"range\": \"Sheet1!A1:B2\",\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    [\n                        [\"Name\", \"Score\"],\n                        [\"Alice\", \"85\"],\n                    ],\n                ),\n            ],\n            test_mock={\n                \"_read_sheet\": lambda *args, **kwargs: [\n                    [\"Name\", \"Score\"],\n                    [\"Alice\", \"85\"],\n                ],\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GoogleSheetsReadBlock.run",
        "start_line": 67,
        "end_line": 72,
        "children": [],
        "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = self._build_service(credentials, **kwargs)\n        data = self._read_sheet(service, input_data.spreadsheet_id, input_data.range)\n        yield \"result\", data\n",
        "cfg": {
          "nodes": [
            {
              "id": "GoogleSheetsReadBlock.run_1",
              "code": "def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GoogleSheetsReadBlock.run_2",
              "code": "        service = self._build_service(credentials, **kwargs)\n"
            },
            {
              "id": "GoogleSheetsReadBlock.run_3",
              "code": "        data = self._read_sheet(service, input_data.spreadsheet_id, input_data.range)\n"
            },
            {
              "id": "GoogleSheetsReadBlock.run_4",
              "code": "        yield \"result\", data\n"
            }
          ],
          "edges": [
            {
              "from": "GoogleSheetsReadBlock.run_1",
              "to": "GoogleSheetsReadBlock.run_2"
            },
            {
              "from": "GoogleSheetsReadBlock.run_2",
              "to": "GoogleSheetsReadBlock.run_3"
            },
            {
              "from": "GoogleSheetsReadBlock.run_3",
              "to": "GoogleSheetsReadBlock.run_4"
            }
          ]
        }
      },
      {
        "decl_name": "GoogleSheetsReadBlock._build_service",
        "start_line": 75,
        "end_line": 92,
        "children": [],
        "code": "    def _build_service(credentials: GoogleCredentials, **kwargs):\n        creds = Credentials(\n            token=(\n                credentials.access_token.get_secret_value()\n                if credentials.access_token\n                else None\n            ),\n            refresh_token=(\n                credentials.refresh_token.get_secret_value()\n                if credentials.refresh_token\n                else None\n            ),\n            token_uri=\"https://oauth2.googleapis.com/token\",\n            client_id=kwargs.get(\"client_id\"),\n            client_secret=kwargs.get(\"client_secret\"),\n            scopes=credentials.scopes,\n        )\n        return build(\"sheets\", \"v4\", credentials=creds)\n",
        "cfg": {
          "nodes": [
            {
              "id": "GoogleSheetsReadBlock._build_service_1",
              "code": "def _build_service(credentials: GoogleCredentials, **kwargs):\n"
            },
            {
              "id": "GoogleSheetsReadBlock._build_service_2",
              "code": "        creds = Credentials(\n            token=(\n                credentials.access_token.get_secret_value()\n                if credentials.access_token\n                else None\n            ),\n            refresh_token=(\n                credentials.refresh_token.get_secret_value()\n                if credentials.refresh_token\n                else None\n            ),\n            token_uri=\"https://oauth2.googleapis.com/token\",\n            client_id=kwargs.get(\"client_id\"),\n            client_secret=kwargs.get(\"client_secret\"),\n            scopes=credentials.scopes,\n        )\n"
            },
            {
              "id": "GoogleSheetsReadBlock._build_service_3",
              "code": "        return build(\"sheets\", \"v4\", credentials=creds)\n"
            }
          ],
          "edges": [
            {
              "from": "GoogleSheetsReadBlock._build_service_1",
              "to": "GoogleSheetsReadBlock._build_service_2"
            },
            {
              "from": "GoogleSheetsReadBlock._build_service_2",
              "to": "GoogleSheetsReadBlock._build_service_3"
            }
          ]
        }
      },
      {
        "decl_name": "GoogleSheetsReadBlock._read_sheet",
        "start_line": 94,
        "end_line": 97,
        "children": [],
        "code": "    def _read_sheet(self, service, spreadsheet_id: str, range: str) -> list[list[str]]:\n        sheet = service.spreadsheets()\n        result = sheet.values().get(spreadsheetId=spreadsheet_id, range=range).execute()\n        return result.get(\"values\", [])\n",
        "cfg": {
          "nodes": [
            {
              "id": "GoogleSheetsReadBlock._read_sheet_1",
              "code": "def _read_sheet(self, service, spreadsheet_id: str, range: str) -> list[list[str]]:\n"
            },
            {
              "id": "GoogleSheetsReadBlock._read_sheet_2",
              "code": "        sheet = service.spreadsheets()\n        result = sheet.values().get(spreadsheetId=spreadsheet_id, range=range).execute()\n        return result.get(\"values\", [])\n"
            }
          ],
          "edges": [
            {
              "from": "GoogleSheetsReadBlock._read_sheet_1",
              "to": "GoogleSheetsReadBlock._read_sheet_2"
            }
          ]
        }
      }
    ],
    "code": "class GoogleSheetsReadBlock(Block):\n\n\n\n\n    @staticmethod\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GoogleSheetsReadBlock_1",
          "code": "class GoogleSheetsReadBlock(Block):\n"
        },
        {
          "id": "GoogleSheetsReadBlock_2",
          "code": "    @staticmethod\n"
        }
      ],
      "edges": [
        {
          "from": "GoogleSheetsReadBlock_1",
          "to": "GoogleSheetsReadBlock_2"
        }
      ]
    }
  },
  {
    "decl_name": "GoogleSheetsWriteBlock",
    "start_line": 100,
    "end_line": 184,
    "children": [
      {
        "decl_name": "GoogleSheetsWriteBlock.Input",
        "start_line": 101,
        "end_line": 113,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/spreadsheets\"]\n        )\n        spreadsheet_id: str = SchemaField(\n            description=\"The ID of the spreadsheet to write to\",\n        )\n        range: str = SchemaField(\n            description=\"The A1 notation of the range to write\",\n        )\n        values: list[list[str]] = SchemaField(\n            description=\"The data to write to the spreadsheet\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GoogleSheetsWriteBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "GoogleSheetsWriteBlock.Input_2",
              "code": "        credentials: GoogleCredentialsInput = GoogleCredentialsField(\n            [\"https://www.googleapis.com/auth/spreadsheets\"]\n        )\n"
            },
            {
              "id": "GoogleSheetsWriteBlock.Input_3",
              "code": "        spreadsheet_id: str = SchemaField(\n            description=\"The ID of the spreadsheet to write to\",\n        )\n"
            },
            {
              "id": "GoogleSheetsWriteBlock.Input_4",
              "code": "        range: str = SchemaField(\n            description=\"The A1 notation of the range to write\",\n        )\n"
            },
            {
              "id": "GoogleSheetsWriteBlock.Input_5",
              "code": "        values: list[list[str]] = SchemaField(\n            description=\"The data to write to the spreadsheet\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GoogleSheetsWriteBlock.Input_1",
              "to": "GoogleSheetsWriteBlock.Input_2"
            },
            {
              "from": "GoogleSheetsWriteBlock.Input_2",
              "to": "GoogleSheetsWriteBlock.Input_3"
            },
            {
              "from": "GoogleSheetsWriteBlock.Input_3",
              "to": "GoogleSheetsWriteBlock.Input_4"
            },
            {
              "from": "GoogleSheetsWriteBlock.Input_4",
              "to": "GoogleSheetsWriteBlock.Input_5"
            }
          ]
        }
      },
      {
        "decl_name": "GoogleSheetsWriteBlock.Output",
        "start_line": 115,
        "end_line": 121,
        "children": [],
        "code": "    class Output(BlockSchema):\n        result: dict = SchemaField(\n            description=\"The result of the write operation\",\n        )\n        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GoogleSheetsWriteBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "GoogleSheetsWriteBlock.Output_2",
              "code": "        result: dict = SchemaField(\n            description=\"The result of the write operation\",\n        )\n"
            },
            {
              "id": "GoogleSheetsWriteBlock.Output_3",
              "code": "        error: str = SchemaField(\n            description=\"Error message if any\",\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "GoogleSheetsWriteBlock.Output_1",
              "to": "GoogleSheetsWriteBlock.Output_2"
            },
            {
              "from": "GoogleSheetsWriteBlock.Output_1",
              "to": "GoogleSheetsWriteBlock.Output_3"
            }
          ]
        }
      },
      {
        "decl_name": "GoogleSheetsWriteBlock.__init__",
        "start_line": 123,
        "end_line": 154,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"d9291e87-301d-47a8-91fe-907fb55460e5\",\n            description=\"This block writes data to a Google Sheets spreadsheet.\",\n            categories={BlockCategory.DATA},\n            input_schema=GoogleSheetsWriteBlock.Input,\n            output_schema=GoogleSheetsWriteBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"spreadsheet_id\": \"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\",\n                \"range\": \"Sheet1!A1:B2\",\n                \"values\": [\n                    [\"Name\", \"Score\"],\n                    [\"Bob\", \"90\"],\n                ],\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    {\"updatedCells\": 4, \"updatedColumns\": 2, \"updatedRows\": 2},\n                ),\n            ],\n            test_mock={\n                \"_write_sheet\": lambda *args, **kwargs: {\n                    \"updatedCells\": 4,\n                    \"updatedColumns\": 2,\n                    \"updatedRows\": 2,\n                },\n            },\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "GoogleSheetsWriteBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"d9291e87-301d-47a8-91fe-907fb55460e5\",\n            description=\"This block writes data to a Google Sheets spreadsheet.\",\n            categories={BlockCategory.DATA},\n            input_schema=GoogleSheetsWriteBlock.Input,\n            output_schema=GoogleSheetsWriteBlock.Output,\n            disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n            test_input={\n                \"spreadsheet_id\": \"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\",\n                \"range\": \"Sheet1!A1:B2\",\n                \"values\": [\n                    [\"Name\", \"Score\"],\n                    [\"Bob\", \"90\"],\n                ],\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"result\",\n                    {\"updatedCells\": 4, \"updatedColumns\": 2, \"updatedRows\": 2},\n                ),\n            ],\n            test_mock={\n                \"_write_sheet\": lambda *args, **kwargs: {\n                    \"updatedCells\": 4,\n                    \"updatedColumns\": 2,\n                    \"updatedRows\": 2,\n                },\n            },\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "GoogleSheetsWriteBlock.run",
        "start_line": 156,
        "end_line": 166,
        "children": [],
        "code": "    def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n        service = GoogleSheetsReadBlock._build_service(credentials, **kwargs)\n        result = self._write_sheet(\n            service,\n            input_data.spreadsheet_id,\n            input_data.range,\n            input_data.values,\n        )\n        yield \"result\", result\n",
        "cfg": {
          "nodes": [
            {
              "id": "GoogleSheetsWriteBlock.run_1",
              "code": "def run(\n        self, input_data: Input, *, credentials: GoogleCredentials, **kwargs\n    ) -> BlockOutput:\n"
            },
            {
              "id": "GoogleSheetsWriteBlock.run_2",
              "code": "        service = GoogleSheetsReadBlock._build_service(credentials, **kwargs)\n"
            },
            {
              "id": "GoogleSheetsWriteBlock.run_3",
              "code": "        result = self._write_sheet(\n            service,\n            input_data.spreadsheet_id,\n            input_data.range,\n            input_data.values,\n        )\n"
            },
            {
              "id": "GoogleSheetsWriteBlock.run_4",
              "code": "        yield \"result\", result\n"
            }
          ],
          "edges": [
            {
              "from": "GoogleSheetsWriteBlock.run_1",
              "to": "GoogleSheetsWriteBlock.run_2"
            },
            {
              "from": "GoogleSheetsWriteBlock.run_2",
              "to": "GoogleSheetsWriteBlock.run_3"
            },
            {
              "from": "GoogleSheetsWriteBlock.run_3",
              "to": "GoogleSheetsWriteBlock.run_4"
            }
          ]
        }
      },
      {
        "decl_name": "GoogleSheetsWriteBlock._write_sheet",
        "start_line": 168,
        "end_line": 183,
        "children": [],
        "code": "    def _write_sheet(\n        self, service, spreadsheet_id: str, range: str, values: list[list[str]]\n    ) -> dict:\n        body = {\"values\": values}\n        result = (\n            service.spreadsheets()\n            .values()\n            .update(\n                spreadsheetId=spreadsheet_id,\n                range=range,\n                valueInputOption=\"USER_ENTERED\",\n                body=body,\n            )\n            .execute()\n        )\n        return result\n",
        "cfg": {
          "nodes": [
            {
              "id": "GoogleSheetsWriteBlock._write_sheet_1",
              "code": "def _write_sheet(\n        self, service, spreadsheet_id: str, range: str, values: list[list[str]]\n    ) -> dict:\n"
            },
            {
              "id": "GoogleSheetsWriteBlock._write_sheet_2",
              "code": "        body = {\"values\": values}\n"
            },
            {
              "id": "GoogleSheetsWriteBlock._write_sheet_3",
              "code": "        result = (\n            service.spreadsheets()\n            .values()\n            .update(\n                spreadsheetId=spreadsheet_id,\n                range=range,\n                valueInputOption=\"USER_ENTERED\",\n                body=body,\n            )\n            .execute()\n        )\n"
            },
            {
              "id": "GoogleSheetsWriteBlock._write_sheet_4",
              "code": "        return result\n"
            }
          ],
          "edges": [
            {
              "from": "GoogleSheetsWriteBlock._write_sheet_1",
              "to": "GoogleSheetsWriteBlock._write_sheet_2"
            },
            {
              "from": "GoogleSheetsWriteBlock._write_sheet_2",
              "to": "GoogleSheetsWriteBlock._write_sheet_3"
            },
            {
              "from": "GoogleSheetsWriteBlock._write_sheet_3",
              "to": "GoogleSheetsWriteBlock._write_sheet_4"
            }
          ]
        }
      }
    ],
    "code": "class GoogleSheetsWriteBlock(Block):\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GoogleSheetsWriteBlock_1",
          "code": "class GoogleSheetsWriteBlock(Block):\n"
        }
      ],
      "edges": []
    }
  }
]