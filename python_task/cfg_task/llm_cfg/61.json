[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 47,
    "children": [
      {
        "decl_name": "to_dict",
        "start_line": 9,
        "end_line": 10,
        "children": [],
        "code": "def to_dict(data) -> dict:\n    return jsonable_encoder(data)\n",
        "cfg": {
          "nodes": [
            {
              "id": "to_dict_1",
              "code": "def to_dict(data) -> dict:\n    return jsonable_encoder(data)\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "dumps",
        "start_line": 13,
        "end_line": 14,
        "children": [],
        "code": "def dumps(data) -> str:\n    return json.dumps(jsonable_encoder(data))\n",
        "cfg": {
          "nodes": [
            {
              "id": "dumps_1",
              "code": "def dumps(data) -> str:\n    return json.dumps(jsonable_encoder(data))\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "loads_overload_target_type",
        "start_line": 20,
        "end_line": 21,
        "children": [],
        "code": "@overload\ndef loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ...\n",
        "cfg": {
          "nodes": [
            {
              "id": "loads_overload_target_type_1",
              "code": "@overload\ndef loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ...\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "loads_overload",
        "start_line": 24,
        "end_line": 25,
        "children": [],
        "code": "@overload\ndef loads(data: str, *args, **kwargs) -> Any: ...\n",
        "cfg": {
          "nodes": [
            {
              "id": "loads_overload_1",
              "code": "@overload\ndef loads(data: str, *args, **kwargs) -> Any: ...\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "loads",
        "start_line": 28,
        "end_line": 32,
        "children": [],
        "code": "def loads(data: str, *args, target_type: Type[T] | None = None, **kwargs) -> Any:\n    parsed = json.loads(data, *args, **kwargs)\n    if target_type:\n        return type_match(parsed, target_type)\n    return parsed\n",
        "cfg": {
          "nodes": [
            {
              "id": "loads_1",
              "code": "def loads(data: str, *args, target_type: Type[T] | None = None, **kwargs) -> Any:\n    parsed = json.loads(data, *args, **kwargs)\n"
            },
            {
              "id": "loads_2",
              "code": "    if target_type:\n        return type_match(parsed, target_type)\n"
            },
            {
              "id": "loads_3",
              "code": "    return parsed\n"
            }
          ],
          "edges": [
            {
              "from": "loads_1",
              "to": "loads_2"
            },
            {
              "from": "loads_2",
              "to": "loads_3"
            }
          ]
        }
      },
      {
        "decl_name": "validate_with_jsonschema",
        "start_line": 35,
        "end_line": 46,
        "children": [],
        "code": "def validate_with_jsonschema(\n    schema: dict[str, Any], data: dict[str, Any]\n) -> str | None:\n    \"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"\n    try:\n        jsonschema.validate(data, schema)\n        return None\n    except jsonschema.ValidationError as e:\n        return str(e)\n",
        "cfg": {
          "nodes": [
            {
              "id": "validate_with_jsonschema_1",
              "code": "def validate_with_jsonschema(\n    schema: dict[str, Any], data: dict[str, Any]\n) -> str | None:\n    \"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"\n"
            },
            {
              "id": "validate_with_jsonschema_2",
              "code": "    try:\n        jsonschema.validate(data, schema)\n        return None\n"
            },
            {
              "id": "validate_with_jsonschema_3",
              "code": "    except jsonschema.ValidationError as e:\n        return str(e)\n"
            }
          ],
          "edges": [
            {
              "from": "validate_with_jsonschema_1",
              "to": "validate_with_jsonschema_2"
            },
            {
              "from": "validate_with_jsonschema_2",
              "to": "validate_with_jsonschema_3"
            }
          ]
        }
      }
    ],
    "code": "import json\nfrom typing import Any, Type, TypeVar, overload\n\nimport jsonschema\nfrom fastapi.encoders import jsonable_encoder\n\nfrom .type import type_match\n\n\n\n\n\n\nT = TypeVar(\"T\")\n\n\n\n\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import json\nfrom typing import Any, Type, TypeVar, overload\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "import jsonschema\nfrom fastapi.encoders import jsonable_encoder\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from .type import type_match\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "T = TypeVar(\"T\")\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        }
      ]
    }
  }
]