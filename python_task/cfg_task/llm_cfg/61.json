{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 47,
  "functions": [
    {
      "name": "to_dict",
      "type": "function",
      "start_line": 10,
      "end_line": 11,
      "functions": [],
      "classes": [],
      "simplified_code": "def to_dict(data) -> dict:\n    return jsonable_encoder(data)",
      "blocks": [
        {
          "id": 1,
          "label": "def to_dict(data) -> dict:",
          "successors": [
            {
              "id": 2,
              "label": "    return jsonable_encoder(data)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "dumps",
      "type": "function",
      "start_line": 14,
      "end_line": 15,
      "functions": [],
      "classes": [],
      "simplified_code": "def dumps(data) -> str:\n    return json.dumps(jsonable_encoder(data))",
      "blocks": [
        {
          "id": 1,
          "label": "def dumps(data) -> str:",
          "successors": [
            {
              "id": 2,
              "label": "    return json.dumps(jsonable_encoder(data))",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "loads",
      "type": "function",
      "start_line": 29,
      "end_line": 33,
      "functions": [],
      "classes": [],
      "simplified_code": "def loads(data: str, *args, target_type: Type[T] | None = None, **kwargs) -> Any:\n    parsed = json.loads(data, *args, **kwargs)\n    if target_type:\n        return type_match(parsed, target_type)\n    return parsed",
      "blocks": [
        {
          "id": 1,
          "label": "parsed = json.loads(data, *args, **kwargs)",
          "successors": [
            {
              "id": 2,
              "label": "if target_type:",
              "successors": [
                {
                  "id": 3,
                  "label": "    return type_match(parsed, target_type)",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "return parsed",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "validate_with_jsonschema",
      "type": "function",
      "start_line": 36,
      "end_line": 47,
      "functions": [],
      "classes": [],
      "simplified_code": "def validate_with_jsonschema(\n    schema: dict[str, Any], data: dict[str, Any]\n) -> str | None:\n    \"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"\n    try:\n        jsonschema.validate(data, schema)\n        return None\n    except jsonschema.ValidationError as e:\n        return str(e)",
      "blocks": [
        {
          "id": 1,
          "label": "try:",
          "successors": [
            {
              "id": 2,
              "label": "    jsonschema.validate(data, schema)\n    return None",
              "successors": []
            },
            {
              "id": 3,
              "label": "except jsonschema.ValidationError as e:",
              "successors": [
                {
                  "id": 4,
                  "label": "    return str(e)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import json\nfrom typing import Any, Type, TypeVar, overload\n\nimport jsonschema\nfrom fastapi.encoders import jsonable_encoder\n\nfrom .type import type_match\n\n\n    return jsonable_encoder(data)\n\n\n    return json.dumps(jsonable_encoder(data))\n\n\nT = TypeVar(\"T\")\n\n\n@overload\ndef loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ...\n\n\n@overload\ndef loads(data: str, *args, **kwargs) -> Any: ...\n\n\n    return parsed\n\n\n        return str(e)",
  "blocks": [
    {
      "id": 1,
      "label": "import json\nfrom typing import Any, Type, TypeVar, overload\n\nimport jsonschema\nfrom fastapi.encoders import jsonable_encoder\n\nfrom .type import type_match",
      "successors": [
        {
          "id": 2,
          "label": "return jsonable_encoder(data)",
          "successors": []
        },
        {
          "id": 3,
          "label": "return json.dumps(jsonable_encoder(data))",
          "successors": []
        },
        {
          "id": 4,
          "label": "T = TypeVar(\"T\")",
          "successors": [
            {
              "id": 5,
              "label": "@overload\ndef loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ...",
              "successors": [
                {
                  "id": 6,
                  "label": "@overload\ndef loads(data: str, *args, **kwargs) -> Any: ...",
                  "successors": [
                    {
                      "id": 7,
                      "label": "return parsed",
                      "successors": []
                    },
                    {
                      "id": 8,
                      "label": "return str(e)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}