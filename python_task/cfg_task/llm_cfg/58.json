[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 6,
    "children": [],
    "code": "from enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from enum import Enum\nfrom typing import Any\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        }
      ]
    }
  },
  {
    "decl_name": "ComparisonOperator",
    "start_line": 7,
    "end_line": 14,
    "children": [],
    "code": "class ComparisonOperator(Enum):\n    EQUAL = \"==\"\n    NOT_EQUAL = \"!=\"\n    GREATER_THAN = \">\"\n    LESS_THAN = \"<\"\n    GREATER_THAN_OR_EQUAL = \">=\"\n    LESS_THAN_OR_EQUAL = \"<=\"\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "ComparisonOperator_1",
          "code": "class ComparisonOperator(Enum):\n    EQUAL = \"==\"\n    NOT_EQUAL = \"!=\"\n    GREATER_THAN = \">\"\n    LESS_THAN = \"<\"\n    GREATER_THAN_OR_EQUAL = \">=\"\n    LESS_THAN_OR_EQUAL = \"<=\"\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "ConditionBlock",
    "start_line": 16,
    "end_line": 109,
    "children": [
      {
        "decl_name": "ConditionBlock.Input",
        "start_line": 17,
        "end_line": 39,
        "children": [],
        "code": "    class Input(BlockSchema):\n        value1: Any = SchemaField(\n            description=\"Enter the first value for comparison\",\n            placeholder=\"For example: 10 or 'hello' or True\",\n        )\n        operator: ComparisonOperator = SchemaField(\n            description=\"Choose the comparison operator\",\n            placeholder=\"Select an operator\",\n        )\n        value2: Any = SchemaField(\n            description=\"Enter the second value for comparison\",\n            placeholder=\"For example: 20 or 'world' or False\",\n        )\n        yes_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is true. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )\n        no_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is false. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "ConditionBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "ConditionBlock.Input_2",
              "code": "        value1: Any = SchemaField(\n            description=\"Enter the first value for comparison\",\n            placeholder=\"For example: 10 or 'hello' or True\",\n        )\n"
            },
            {
              "id": "ConditionBlock.Input_3",
              "code": "        operator: ComparisonOperator = SchemaField(\n            description=\"Choose the comparison operator\",\n            placeholder=\"Select an operator\",\n        )\n"
            },
            {
              "id": "ConditionBlock.Input_4",
              "code": "        value2: Any = SchemaField(\n            description=\"Enter the second value for comparison\",\n            placeholder=\"For example: 20 or 'world' or False\",\n        )\n"
            },
            {
              "id": "ConditionBlock.Input_5",
              "code": "        yes_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is true. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )\n"
            },
            {
              "id": "ConditionBlock.Input_6",
              "code": "        no_value: Any = SchemaField(\n            description=\"(Optional) Value to output if the condition is false. If not provided, value1 will be used.\",\n            placeholder=\"Leave empty to use value1, or enter a specific value\",\n            default=None,\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "ConditionBlock.Input_1",
              "to": "ConditionBlock.Input_2"
            },
            {
              "from": "ConditionBlock.Input_2",
              "to": "ConditionBlock.Input_3"
            },
            {
              "from": "ConditionBlock.Input_3",
              "to": "ConditionBlock.Input_4"
            },
            {
              "from": "ConditionBlock.Input_4",
              "to": "ConditionBlock.Input_5"
            },
            {
              "from": "ConditionBlock.Input_5",
              "to": "ConditionBlock.Input_6"
            }
          ]
        }
      },
      {
        "decl_name": "ConditionBlock.Output",
        "start_line": 41,
        "end_line": 50,
        "children": [],
        "code": "    class Output(BlockSchema):\n        result: bool = SchemaField(\n            description=\"The result of the condition evaluation (True or False)\"\n        )\n        yes_output: Any = SchemaField(\n            description=\"The output value if the condition is true\"\n        )\n        no_output: Any = SchemaField(\n            description=\"The output value if the condition is false\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "ConditionBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "ConditionBlock.Output_2",
              "code": "        result: bool = SchemaField(\n            description=\"The result of the condition evaluation (True or False)\"\n        )\n"
            },
            {
              "id": "ConditionBlock.Output_3",
              "code": "        yes_output: Any = SchemaField(\n            description=\"The output value if the condition is true\"\n        )\n"
            },
            {
              "id": "ConditionBlock.Output_4",
              "code": "        no_output: Any = SchemaField(\n            description=\"The output value if the condition is false\"\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "ConditionBlock.Output_1",
              "to": "ConditionBlock.Output_2"
            },
            {
              "from": "ConditionBlock.Output_2",
              "to": "ConditionBlock.Output_3"
            },
            {
              "from": "ConditionBlock.Output_3",
              "to": "ConditionBlock.Output_4"
            }
          ]
        }
      },
      {
        "decl_name": "ConditionBlock.__init__",
        "start_line": 52,
        "end_line": 70,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\n            input_schema=ConditionBlock.Input,\n            output_schema=ConditionBlock.Output,\n            description=\"Handles conditional logic based on comparison operators\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"value1\": 10,\n                \"operator\": ComparisonOperator.GREATER_THAN.value,\n                \"value2\": 5,\n                \"yes_value\": \"Greater\",\n                \"no_value\": \"Not greater\",\n            },\n            test_output=[\n                (\"result\", True),\n                (\"yes_output\", \"Greater\"),\n            ],\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "ConditionBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"715696a0-e1da-45c8-b209-c2fa9c3b0be6\",\n            input_schema=ConditionBlock.Input,\n            output_schema=ConditionBlock.Output,\n            description=\"Handles conditional logic based on comparison operators\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"value1\": 10,\n                \"operator\": ComparisonOperator.GREATER_THAN.value,\n                \"value2\": 5,\n                \"yes_value\": \"Greater\",\n                \"no_value\": \"Not greater\",\n            },\n            test_output=[\n                (\"result\", True),\n                (\"yes_output\", \"Greater\"),\n            ],\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "ConditionBlock.run",
        "start_line": 72,
        "end_line": 108,
        "children": [],
        "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operator = input_data.operator\n\n        value1 = input_data.value1\n        if isinstance(value1, str):\n            try:\n                value1 = float(value1.strip())\n            except ValueError:\n                value1 = value1.strip()\n\n        value2 = input_data.value2\n        if isinstance(value2, str):\n            try:\n                value2 = float(value2.strip())\n            except ValueError:\n                value2 = value2.strip()\n\n        yes_value = input_data.yes_value if input_data.yes_value is not None else value1\n        no_value = input_data.no_value if input_data.no_value is not None else value2\n\n        comparison_funcs = {\n            ComparisonOperator.EQUAL: lambda a, b: a == b,\n            ComparisonOperator.NOT_EQUAL: lambda a, b: a != b,\n            ComparisonOperator.GREATER_THAN: lambda a, b: a > b,\n            ComparisonOperator.LESS_THAN: lambda a, b: a < b,\n            ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >= b,\n            ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b,\n        }\n\n        result = comparison_funcs[operator](value1, value2)\n\n        yield \"result\", result\n\n        if result:\n            yield \"yes_output\", yes_value\n        else:\n            yield \"no_output\", no_value\n",
        "cfg": {
          "nodes": [
            {
              "id": "ConditionBlock.run_1",
              "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operator = input_data.operator\n"
            },
            {
              "id": "ConditionBlock.run_2",
              "code": "        value1 = input_data.value1\n        if isinstance(value1, str):\n"
            },
            {
              "id": "ConditionBlock.run_3",
              "code": "            try:\n                value1 = float(value1.strip())\n            except ValueError:\n                value1 = value1.strip()\n"
            },
            {
              "id": "ConditionBlock.run_4",
              "code": "        value2 = input_data.value2\n        if isinstance(value2, str):\n"
            },
            {
              "id": "ConditionBlock.run_5",
              "code": "            try:\n                value2 = float(value2.strip())\n            except ValueError:\n                value2 = value2.strip()\n"
            },
            {
              "id": "ConditionBlock.run_6",
              "code": "        yes_value = input_data.yes_value if input_data.yes_value is not None else value1\n        no_value = input_data.no_value if input_data.no_value is not None else value2\n"
            },
            {
              "id": "ConditionBlock.run_7",
              "code": "        comparison_funcs = {\n            ComparisonOperator.EQUAL: lambda a, b: a == b,\n            ComparisonOperator.NOT_EQUAL: lambda a, b: a != b,\n            ComparisonOperator.GREATER_THAN: lambda a, b: a > b,\n            ComparisonOperator.LESS_THAN: lambda a, b: a < b,\n            ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >= b,\n            ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b,\n        }\n"
            },
            {
              "id": "ConditionBlock.run_8",
              "code": "        result = comparison_funcs[operator](value1, value2)\n"
            },
            {
              "id": "ConditionBlock.run_9",
              "code": "        yield \"result\", result\n"
            },
            {
              "id": "ConditionBlock.run_10",
              "code": "        if result:\n            yield \"yes_output\", yes_value\n        else:\n            yield \"no_output\", no_value\n"
            }
          ],
          "edges": [
            {
              "from": "ConditionBlock.run_1",
              "to": "ConditionBlock.run_2"
            },
            {
              "from": "ConditionBlock.run_2",
              "to": "ConditionBlock.run_3"
            },
            {
              "from": "ConditionBlock.run_2",
              "to": "ConditionBlock.run_4"
            },
            {
              "from": "ConditionBlock.run_3",
              "to": "ConditionBlock.run_4"
            },
            {
              "from": "ConditionBlock.run_4",
              "to": "ConditionBlock.run_5"
            },
            {
              "from": "ConditionBlock.run_4",
              "to": "ConditionBlock.run_6"
            },
            {
              "from": "ConditionBlock.run_5",
              "to": "ConditionBlock.run_6"
            },
            {
              "from": "ConditionBlock.run_6",
              "to": "ConditionBlock.run_7"
            },
            {
              "from": "ConditionBlock.run_7",
              "to": "ConditionBlock.run_8"
            },
            {
              "from": "ConditionBlock.run_8",
              "to": "ConditionBlock.run_9"
            },
            {
              "from": "ConditionBlock.run_9",
              "to": "ConditionBlock.run_10"
            }
          ]
        }
      }
    ],
    "code": "class ConditionBlock(Block):\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "ConditionBlock_1",
          "code": "class ConditionBlock(Block):\n"
        }
      ],
      "edges": []
    }
  }
]