[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 66,
    "children": [
      {
        "decl_name": "backtrack",
        "start_line": 15,
        "end_line": 37,
        "children": [],
        "code": "def backtrack(\n    candidates: list, path: list, answer: list, target: int, previous_index: int\n) -> None:\n    \"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"\n    if target == 0:\n        answer.append(path.copy())\n    else:\n        for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)\n",
        "cfg": {
          "nodes": [
            {
              "id": "backtrack_1",
              "code": "def backtrack(\n    candidates: list, path: list, answer: list, target: int, previous_index: int\n) -> None:\n    \"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"\n"
            },
            {
              "id": "backtrack_2",
              "code": "    if target == 0:\n        answer.append(path.copy())\n"
            },
            {
              "id": "backtrack_3",
              "code": "    else:\n        for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)\n"
            }
          ],
          "edges": [
            {
              "from": "backtrack_1",
              "to": "backtrack_2"
            },
            {
              "from": "backtrack_1",
              "to": "backtrack_3"
            }
          ]
        }
      },
      {
        "decl_name": "combination_sum",
        "start_line": 40,
        "end_line": 54,
        "children": [],
        "code": "def combination_sum(candidates: list, target: int) -> list:\n    \"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"\n    path = []  # type: list[int]\n    answer = []  # type: list[int]\n    backtrack(candidates, path, answer, target, 0)\n    return answer\n",
        "cfg": {
          "nodes": [
            {
              "id": "combination_sum_1",
              "code": "def combination_sum(candidates: list, target: int) -> list:\n    \"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"\n"
            },
            {
              "id": "combination_sum_2",
              "code": "    path = []  # type: list[int]\n    answer = []  # type: list[int]\n"
            },
            {
              "id": "combination_sum_3",
              "code": "    backtrack(candidates, path, answer, target, 0)\n"
            },
            {
              "id": "combination_sum_4",
              "code": "    return answer\n"
            }
          ],
          "edges": [
            {
              "from": "combination_sum_1",
              "to": "combination_sum_2"
            },
            {
              "from": "combination_sum_2",
              "to": "combination_sum_3"
            },
            {
              "from": "combination_sum_3",
              "to": "combination_sum_4"
            }
          ]
        }
      },
      {
        "decl_name": "main",
        "start_line": 57,
        "end_line": 58,
        "children": [],
        "code": "def main() -> None:\n    print(combination_sum([-8, 2.3, 0], 1))\n",
        "cfg": {
          "nodes": [
            {
              "id": "main_1",
              "code": "def main() -> None:\n    print(combination_sum([-8, 2.3, 0], 1))\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "if __name__ == \"__main__\"",
        "start_line": 61,
        "end_line": 65,
        "children": [],
        "code": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()\n",
        "cfg": {
          "nodes": [
            {
              "id": "if __name__ == \"__main__\"_1",
              "code": "if __name__ == \"__main__\":\n"
            },
            {
              "id": "if __name__ == \"__main__\"_2",
              "code": "    import doctest\n\n    doctest.testmod()\n    main()\n"
            }
          ],
          "edges": [
            {
              "from": "if __name__ == \"__main__\"_1",
              "to": "if __name__ == \"__main__\"_2"
            }
          ]
        }
      }
    ],
    "code": "\"\"\"\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\nWe need to find all the combinations whose sum equals to target given.\nWe can use an element more than one.\n\nTime complexity(Average Case): O(n!)\n\nConstraints:\n1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 40\n\"\"\"\n\n\n\n\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "\"\"\"\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\nWe need to find all the combinations whose sum equals to target given.\nWe can use an element more than one.\n\nTime complexity(Average Case): O(n!)\n\nConstraints:\n1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 40\n\"\"\"\n"
        }
      ],
      "edges": []
    }
  }
]