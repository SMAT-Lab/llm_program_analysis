{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 190,
  "functions": [
    {
      "name": "mock_settings",
      "type": "function",
      "start_line": 14,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": "def mock_settings(monkeypatch):\n    settings = Settings()\n    settings.config.media_gcs_bucket_name = \"test-bucket\"\n    settings.config.google_application_credentials = \"test-credentials\"\n    monkeypatch.setattr(\"backend.server.v2.store.media.Settings\", lambda: settings)\n    return settings",
      "blocks": [
        {
          "id": 1,
          "label": "settings = Settings()\\nsettings.config.media_gcs_bucket_name = \"test-bucket\"\\nsettings.config.google_application_credentials = \"test-credentials\"\\nmonkeypatch.setattr(\"backend.server.v2.store.media.Settings\", lambda: settings)",
          "successors": [
            {
              "id": 2,
              "label": "return settings",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "mock_storage_client",
      "type": "function",
      "start_line": 23,
      "end_line": 34,
      "functions": [],
      "classes": [],
      "simplified_code": "def mock_storage_client(mocker):\n    mock_client = unittest.mock.MagicMock()\n    mock_bucket = unittest.mock.MagicMock()\n    mock_blob = unittest.mock.MagicMock()\n\n    mock_client.bucket.return_value = mock_bucket\n    mock_bucket.blob.return_value = mock_blob\n    mock_blob.public_url = \"http://test-url/media/laptop.jpeg\"\n\n    mocker.patch(\"google.cloud.storage.Client\", return_value=mock_client)\n\n    return mock_client",
      "blocks": [
        {
          "id": 1,
          "label": "def mock_storage_client(mocker):",
          "successors": [
            {
              "id": 2,
              "label": "mock_client = unittest.mock.MagicMock()\nmock_bucket = unittest.mock.MagicMock()\nmock_blob = unittest.mock.MagicMock()",
              "successors": [
                {
                  "id": 3,
                  "label": "mock_client.bucket.return_value = mock_bucket\nmock_bucket.blob.return_value = mock_blob\nmock_blob.public_url = \"http://test-url/media/laptop.jpeg\"",
                  "successors": [
                    {
                      "id": 4,
                      "label": "mocker.patch(\"google.cloud.storage.Client\", return_value=mock_client)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "return mock_client",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_success",
      "type": "function",
      "start_line": 37,
      "end_line": 52,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_upload_media_success(mock_settings, mock_storage_client):\n    # Create test JPEG data with valid signature\n    test_data = b\"\\xFF\\xD8\\xFF\" + b\"test data\"\n\n    test_file = fastapi.UploadFile(\n        filename=\"laptop.jpeg\",\n        file=io.BytesIO(test_data),\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n    assert result == \"http://test-url/media/laptop.jpeg\"\n    mock_bucket = mock_storage_client.bucket.return_value\n    mock_blob = mock_bucket.blob.return_value\n    mock_blob.upload_from_string.assert_called_once()",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_upload_media_success(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "label": "    test_data = b\"\\xFF\\xD8\\xFF\" + b\"test data\"",
              "successors": [
                {
                  "id": 3,
                  "label": "    test_file = fastapi.UploadFile(\n        filename=\"laptop.jpeg\",\n        file=io.BytesIO(test_data),\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "    assert result == \"http://test-url/media/laptop.jpeg\"",
                          "successors": [
                            {
                              "id": 6,
                              "label": "    mock_bucket = mock_storage_client.bucket.return_value",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "    mock_blob = mock_bucket.blob.return_value",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "    mock_blob.upload_from_string.assert_called_once()",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_invalid_type",
      "type": "function",
      "start_line": 55,
      "end_line": 67,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_upload_media_invalid_type(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.txt\",\n        file=io.BytesIO(b\"test data\"),\n        headers=starlette.datastructures.Headers({\"content-type\": \"text/plain\"}),\n    )\n\n    with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n    mock_bucket = mock_storage_client.bucket.return_value\n    mock_blob = mock_bucket.blob.return_value\n    mock_blob.upload_from_string.assert_not_called()",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_upload_media_invalid_type(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "label": "test_file = fastapi.UploadFile(\n    filename=\"test.txt\",\n    file=io.BytesIO(b\"test data\"),\n    headers=starlette.datastructures.Headers({\"content-type\": \"text/plain\"}),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):",
                  "successors": [
                    {
                      "id": 4,
                      "label": "await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "mock_bucket = mock_storage_client.bucket.return_value\nmock_blob = mock_bucket.blob.return_value\nmock_blob.upload_from_string.assert_not_called()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_missing_credentials",
      "type": "function",
      "start_line": 70,
      "end_line": 83,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_upload_media_missing_credentials(monkeypatch):\n    settings = Settings()\n    settings.config.media_gcs_bucket_name = \"\"\n    settings.config.google_application_credentials = \"\"\n    monkeypatch.setattr(\"backend.server.v2.store.media.Settings\", lambda: settings)\n\n    test_file = fastapi.UploadFile(\n        filename=\"laptop.jpeg\",\n        file=io.BytesIO(b\"\\xFF\\xD8\\xFF\" + b\"test data\"),  # Valid JPEG signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n\n    with pytest.raises(backend.server.v2.store.exceptions.StorageConfigError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_upload_media_missing_credentials(monkeypatch):",
          "successors": [
            {
              "id": 2,
              "label": "settings = Settings()\nsettings.config.media_gcs_bucket_name = \"\"\nsettings.config.google_application_credentials = \"\"\nmonkeypatch.setattr(\"backend.server.v2.store.media.Settings\", lambda: settings)\n\ntest_file = fastapi.UploadFile(\n    filename=\"laptop.jpeg\",\n    file=io.BytesIO(b\"\\xFF\\xD8\\xFF\" + b\"test data\"),  # Valid JPEG signature\n    headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "with pytest.raises(backend.server.v2.store.exceptions.StorageConfigError):",
                  "successors": [
                    {
                      "id": 4,
                      "label": "await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_video_type",
      "type": "function",
      "start_line": 86,
      "end_line": 98,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_upload_media_video_type(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.mp4\",\n        file=io.BytesIO(b\"\\x00\\x00\\x00\\x18ftypmp42\"),  # Valid MP4 signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"video/mp4\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n    assert result == \"http://test-url/media/laptop.jpeg\"\n    mock_bucket = mock_storage_client.bucket.return_value\n    mock_blob = mock_bucket.blob.return_value\n    mock_blob.upload_from_string.assert_called_once()",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_upload_media_video_type(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "label": "test_file = fastapi.UploadFile(\n    filename=\"test.mp4\",\n    file=io.BytesIO(b\"\\x00\\x00\\x00\\x18ftypmp42\"),  # Valid MP4 signature\n    headers=starlette.datastructures.Headers({\"content-type\": \"video/mp4\"}),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "assert result == \"http://test-url/media/laptop.jpeg\"",
                      "successors": [
                        {
                          "id": 5,
                          "label": "mock_bucket = mock_storage_client.bucket.return_value",
                          "successors": [
                            {
                              "id": 6,
                              "label": "mock_blob = mock_bucket.blob.return_value",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "mock_blob.upload_from_string.assert_called_once()",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_file_too_large",
      "type": "function",
      "start_line": 101,
      "end_line": 112,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_upload_media_file_too_large(mock_settings, mock_storage_client):\n    large_data = b\"\\xFF\\xD8\\xFF\" + b\"x\" * (\n        50 * 1024 * 1024 + 1\n    )  # 50MB + 1 byte with valid JPEG signature\n    test_file = fastapi.UploadFile(\n        filename=\"laptop.jpeg\",\n        file=io.BytesIO(large_data),\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n\n    with pytest.raises(backend.server.v2.store.exceptions.FileSizeTooLargeError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_upload_media_file_too_large(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "label": "large_data = b\"\\xFF\\xD8\\xFF\" + b\"x\" * ( 50 * 1024 * 1024 + 1 )  # 50MB + 1 byte with valid JPEG signature\n    test_file = fastapi.UploadFile( filename=\"laptop.jpeg\", file=io.BytesIO(large_data), headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}), )",
              "successors": [
                {
                  "id": 3,
                  "label": "with pytest.raises(backend.server.v2.store.exceptions.FileSizeTooLargeError):",
                  "successors": [
                    {
                      "id": 4,
                      "label": "await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_file_read_error",
      "type": "function",
      "start_line": 115,
      "end_line": 124,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_upload_media_file_read_error(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"laptop.jpeg\",\n        file=io.BytesIO(b\"\"),  # Empty file that will raise error on read\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n    test_file.read = unittest.mock.AsyncMock(side_effect=Exception(\"Read error\"))\n\n    with pytest.raises(backend.server.v2.store.exceptions.FileReadError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_upload_media_file_read_error(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "label": "test_file = fastapi.UploadFile(\n    filename=\"laptop.jpeg\",\n    file=io.BytesIO(b\"\"),  # Empty file that will raise error on read\n    headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "test_file.read = unittest.mock.AsyncMock(side_effect=Exception(\"Read error\"))",
                  "successors": [
                    {
                      "id": 4,
                      "label": "with pytest.raises(backend.server.v2.store.exceptions.FileReadError):",
                      "successors": [
                        {
                          "id": 5,
                          "label": "await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_png_success",
      "type": "function",
      "start_line": 127,
      "end_line": 135,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_upload_media_png_success(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.png\",\n        file=io.BytesIO(b\"\\x89PNG\\r\\n\\x1a\\n\"),  # Valid PNG signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/png\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n    assert result == \"http://test-url/media/laptop.jpeg\"",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_upload_media_png_success(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "label": "    test_file = fastapi.UploadFile(\n        filename=\"test.png\",\n        file=io.BytesIO(b\"\\x89PNG\\r\\n\\x1a\\n\"),  # Valid PNG signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/png\"}),\n    )",
              "successors": [
                {
                  "id": 3,
                  "label": "    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    assert result == \"http://test-url/media/laptop.jpeg\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_gif_success",
      "type": "function",
      "start_line": 138,
      "end_line": 146,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_upload_media_gif_success(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.gif\",\n        file=io.BytesIO(b\"GIF89a\"),  # Valid GIF signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/gif\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n    assert result == \"http://test-url/media/laptop.jpeg\"",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_upload_media_gif_success(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "label": "test_file = fastapi.UploadFile(\n    filename=\"test.gif\",\n    file=io.BytesIO(b\"GIF89a\"),  # Valid GIF signature\n    headers=starlette.datastructures.Headers({\"content-type\": \"image/gif\"}),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "assert result == \"http://test-url/media/laptop.jpeg\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_webp_success",
      "type": "function",
      "start_line": 149,
      "end_line": 157,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_upload_media_webp_success(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.webp\",\n        file=io.BytesIO(b\"RIFF\\x00\\x00\\x00\\x00WEBP\"),  # Valid WebP signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/webp\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n    assert result == \"http://test-url/media/laptop.jpeg\"",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_upload_media_webp_success(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "label": "test_file = fastapi.UploadFile(\n    filename=\"test.webp\",\n    file=io.BytesIO(b\"RIFF\\x00\\x00\\x00\\x00WEBP\"),  # Valid WebP signature\n    headers=starlette.datastructures.Headers({\"content-type\": \"image/webp\"}),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "assert result == \"http://test-url/media/laptop.jpeg\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_webm_success",
      "type": "function",
      "start_line": 160,
      "end_line": 168,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_upload_media_webm_success(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.webm\",\n        file=io.BytesIO(b\"\\x1a\\x45\\xdf\\xa3\"),  # Valid WebM signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"video/webm\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n    assert result == \"http://test-url/media/laptop.jpeg\"",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_upload_media_webm_success(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "label": "    test_file = fastapi.UploadFile(\n        filename=\"test.webm\",\n        file=io.BytesIO(b\"\\x1a\\x45\\xdf\\xa3\"),  # Valid WebM signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"video/webm\"}),\n    )",
              "successors": [
                {
                  "id": 3,
                  "label": "    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    assert result == \"http://test-url/media/laptop.jpeg\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_mismatched_signature",
      "type": "function",
      "start_line": 171,
      "end_line": 179,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_upload_media_mismatched_signature(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.jpeg\",\n        file=io.BytesIO(b\"\\x89PNG\\r\\n\\x1a\\n\"),  # PNG signature with JPEG content type\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n\n    with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_upload_media_mismatched_signature(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "label": "test_file = fastapi.UploadFile(\n    filename=\"test.jpeg\",\n    file=io.BytesIO(b\"\\x89PNG\\r\\n\\x1a\\n\"),  # PNG signature with JPEG content type\n    headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):",
                  "successors": [
                    {
                      "id": 4,
                      "label": "await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_upload_media_invalid_signature",
      "type": "function",
      "start_line": 182,
      "end_line": 190,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_upload_media_invalid_signature(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.jpeg\",\n        file=io.BytesIO(b\"invalid signature\"),\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n\n    with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_upload_media_invalid_signature(mock_settings, mock_storage_client):",
          "successors": [
            {
              "id": 2,
              "label": "test_file = fastapi.UploadFile(\n    filename=\"test.jpeg\",\n    file=io.BytesIO(b\"invalid signature\"),\n    headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n)",
              "successors": [
                {
                  "id": 3,
                  "label": "with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):",
                  "successors": [
                    {
                      "id": 4,
                      "label": "await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "import io\nimport unittest.mock\n\nimport fastapi\nimport pytest\nimport starlette.datastructures\n\nimport backend.server.v2.store.exceptions\nimport backend.server.v2.store.media\nfrom backend.util.settings import Settings\n\n\n@pytest.fixture\n    return settings\n\n\n@pytest.fixture\n    return mock_client\n\n\n    mock_blob.upload_from_string.assert_called_once()\n\n\n    mock_blob.upload_from_string.assert_not_called()\n\n\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n\n    mock_blob.upload_from_string.assert_called_once()\n\n\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n\n    assert result == \"http://test-url/media/laptop.jpeg\"\n\n\n    assert result == \"http://test-url/media/laptop.jpeg\"\n\n\n    assert result == \"http://test-url/media/laptop.jpeg\"\n\n\n    assert result == \"http://test-url/media/laptop.jpeg\"\n\n\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)",
  "blocks": []
}