{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 157,
  "functions": [
    {
      "name": "test_graph_creation",
      "type": "function",
      "start_line": 16,
      "end_line": 66,
      "functions": [],
      "classes": [],
      "simplified_code": "async def test_graph_creation(server: SpinTestServer):\n    \"\"\"\n    Test the creation of a graph with nodes and links.\n\n    This test ensures that:\n    1. A graph can be successfully created with valid connections.\n    2. The created graph has the correct structure and properties.\n\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"\n    value_block = StoreValueBlock().id\n    input_block = AgentInputBlock().id\n\n    graph = Graph(\n        id=\"test_graph\",\n        name=\"TestGraph\",\n        description=\"Test graph\",\n        nodes=[\n            Node(id=\"node_1\", block_id=value_block),\n            Node(id=\"node_2\", block_id=input_block, input_default={\"name\": \"input\"}),\n            Node(id=\"node_3\", block_id=value_block),\n        ],\n        links=[\n            Link(\n                source_id=\"node_1\",\n                sink_id=\"node_2\",\n                source_name=\"output\",\n                sink_name=\"name\",\n            ),\n        ],\n    )\n    create_graph = CreateGraph(graph=graph)\n    created_graph = await server.agent_server.test_create_graph(\n        create_graph, DEFAULT_USER_ID\n    )\n\n    assert UUID(created_graph.id)\n    assert created_graph.name == \"TestGraph\"\n\n    assert len(created_graph.nodes) == 3\n    assert UUID(created_graph.nodes[0].id)\n    assert UUID(created_graph.nodes[1].id)\n    assert UUID(created_graph.nodes[2].id)\n\n    nodes = created_graph.nodes\n    links = created_graph.links\n    assert len(links) == 1\n    assert links[0].source_id != links[0].sink_id\n    assert links[0].source_id in {nodes[0].id, nodes[1].id, nodes[2].id}\n    assert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_graph_creation(server: SpinTestServer):",
          "successors": [
            {
              "id": 2,
              "label": "value_block = StoreValueBlock().id\ninput_block = AgentInputBlock().id\ngraph = Graph(id=\"test_graph\", name=\"TestGraph\", description=\"Test graph\", nodes=[Node(id=\"node_1\", block_id=value_block), Node(id=\"node_2\", block_id=input_block, input_default={\"name\": \"input\"}), Node(id=\"node_3\", block_id=value_block)], links=[Link(source_id=\"node_1\", sink_id=\"node_2\", source_name=\"output\", sink_name=\"name\")])\ncreate_graph = CreateGraph(graph=graph)\ncreated_graph = await server.agent_server.test_create_graph(create_graph, DEFAULT_USER_ID)",
              "successors": [
                {
                  "id": 3,
                  "label": "assert UUID(created_graph.id)\nassert created_graph.name == \"TestGraph\"",
                  "successors": [
                    {
                      "id": 4,
                      "label": "assert len(created_graph.nodes) == 3\nassert UUID(created_graph.nodes[0].id)\nassert UUID(created_graph.nodes[1].id)\nassert UUID(created_graph.nodes[2].id)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "nodes = created_graph.nodes\nlinks = created_graph.links\nassert len(links) == 1\nassert links[0].source_id != links[0].sink_id\nassert links[0].source_id in {nodes[0].id, nodes[1].id, nodes[2].id}\nassert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "test_get_input_schema",
      "type": "function",
      "start_line": 70,
      "end_line": 157,
      "functions": [],
      "classes": [
        {
          "name": "ExpectedInputSchema",
          "type": "class",
          "start_line": 140,
          "end_line": 142,
          "functions": [],
          "classes": [],
          "simplified_code": "    class ExpectedInputSchema(BlockSchema):\n        in_key_a: Any = SchemaField(title=\"Key A\", default=\"A\", advanced=False)\n        in_key_b: Any = SchemaField(title=\"in_key_b\", advanced=True)",
          "blocks": [
            {
              "id": 1,
              "label": "class ExpectedInputSchema(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    in_key_a: Any = SchemaField(title=\"Key A\", default=\"A\", advanced=False)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    in_key_b: Any = SchemaField(title=\"in_key_b\", advanced=True)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "ExpectedOutputSchema",
          "type": "class",
          "start_line": 144,
          "end_line": 149,
          "functions": [],
          "classes": [],
          "simplified_code": "    class ExpectedOutputSchema(BlockSchema):\n        out_key: Any = SchemaField(\n            description=\"This is an output key\",\n            title=\"out_key\",\n            advanced=False,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class ExpectedOutputSchema(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    out_key: Any = SchemaField(\n        description=\"This is an output key\",\n        title=\"out_key\",\n        advanced=False,\n    )",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "async def test_get_input_schema(server: SpinTestServer):\n    \"\"\"\n    Test the get_input_schema method of a created graph.\n\n    This test ensures that:\n    1. A graph can be created with a single node.\n    2. The input schema of the created graph is correctly generated.\n    3. The input schema contains the expected input name and node id.\n\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"\n    value_block = StoreValueBlock().id\n    input_block = AgentInputBlock().id\n    output_block = AgentOutputBlock().id\n\n    graph = Graph(\n        name=\"TestInputSchema\",\n        description=\"Test input schema\",\n        nodes=[\n            Node(\n                id=\"node_0_a\",\n                block_id=input_block,\n                input_default={\"name\": \"in_key_a\", \"title\": \"Key A\", \"value\": \"A\"},\n                metadata={\"id\": \"node_0_a\"},\n            ),\n            Node(\n                id=\"node_0_b\",\n                block_id=input_block,\n                input_default={\"name\": \"in_key_b\", \"advanced\": True},\n                metadata={\"id\": \"node_0_b\"},\n            ),\n            Node(id=\"node_1\", block_id=value_block, metadata={\"id\": \"node_1\"}),\n            Node(\n                id=\"node_2\",\n                block_id=output_block,\n                input_default={\n                    \"name\": \"out_key\",\n                    \"description\": \"This is an output key\",\n                },\n                metadata={\"id\": \"node_2\"},\n            ),\n        ],\n        links=[\n            Link(\n                source_id=\"node_0_a\",\n                sink_id=\"node_1\",\n                source_name=\"result\",\n                sink_name=\"input\",\n            ),\n            Link(\n                source_id=\"node_0_b\",\n                sink_id=\"node_1\",\n                source_name=\"result\",\n                sink_name=\"input\",\n            ),\n            Link(\n                source_id=\"node_1\",\n                sink_id=\"node_2\",\n                source_name=\"output\",\n                sink_name=\"value\",\n            ),\n        ],\n    )\n\n    create_graph = CreateGraph(graph=graph)\n    created_graph = await server.agent_server.test_create_graph(\n        create_graph, DEFAULT_USER_ID\n    )\n\n        in_key_b: Any = SchemaField(title=\"in_key_b\", advanced=True)\n\n        )\n\n    input_schema = created_graph.input_schema\n    input_schema[\"title\"] = \"ExpectedInputSchema\"\n    assert input_schema == ExpectedInputSchema.jsonschema()\n\n    output_schema = created_graph.output_schema\n    output_schema[\"title\"] = \"ExpectedOutputSchema\"\n    assert output_schema == ExpectedOutputSchema.jsonschema()",
      "blocks": [
        {
          "id": 1,
          "label": "async def test_get_input_schema(server: SpinTestServer):",
          "successors": [
            {
              "id": 2,
              "label": "value_block = StoreValueBlock().id\ninput_block = AgentInputBlock().id\noutput_block = AgentOutputBlock().id",
              "successors": [
                {
                  "id": 3,
                  "label": "graph = Graph(\n    name=\"TestInputSchema\",\n    description=\"Test input schema\",\n    nodes=[\n        Node(\n            id=\"node_0_a\",\n            block_id=input_block,\n            input_default={\"name\": \"in_key_a\", \"title\": \"Key A\", \"value\": \"A\"},\n            metadata={\"id\": \"node_0_a\"},\n        ),\n        Node(\n            id=\"node_0_b\",\n            block_id=input_block,\n            input_default={\"name\": \"in_key_b\", \"advanced\": True},\n            metadata={\"id\": \"node_0_b\"},\n        ),\n        Node(id=\"node_1\", block_id=value_block, metadata={\"id\": \"node_1\"}),\n        Node(\n            id=\"node_2\",\n            block_id=output_block,\n            input_default={\n                \"name\": \"out_key\",\n                \"description\": \"This is an output key\",\n            },\n            metadata={\"id\": \"node_2\"},\n        ),\n    ],\n    links=[\n        Link(\n            source_id=\"node_0_a\",\n            sink_id=\"node_1\",\n            source_name=\"result\",\n            sink_name=\"input\",\n        ),\n        Link(\n            source_id=\"node_0_b\",\n            sink_id=\"node_1\",\n            source_name=\"result\",\n            sink_name=\"input\",\n        ),\n        Link(\n            source_id=\"node_1\",\n            sink_id=\"node_2\",\n            source_name=\"output\",\n            sink_name=\"value\",\n        ),\n    ],\n)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "create_graph = CreateGraph(graph=graph)\ncreated_graph = await server.agent_server.test_create_graph(create_graph, DEFAULT_USER_ID)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "input_schema = created_graph.input_schema\ninput_schema[\"title\"] = \"ExpectedInputSchema\"\nassert input_schema == ExpectedInputSchema.jsonschema()",
                          "successors": [
                            {
                              "id": 6,
                              "label": "output_schema = created_graph.output_schema\noutput_schema[\"title\"] = \"ExpectedOutputSchema\"\nassert output_schema == ExpectedOutputSchema.jsonschema()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "from typing import Any\nfrom uuid import UUID\n\nimport pytest\n\nfrom backend.blocks.basic import AgentInputBlock, AgentOutputBlock, StoreValueBlock\nfrom backend.data.block import BlockSchema\nfrom backend.data.graph import Graph, Link, Node\nfrom backend.data.model import SchemaField\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.model import CreateGraph\nfrom backend.util.test import SpinTestServer\n\n\n@pytest.mark.asyncio(scope=\"session\")\n    assert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}\n\n\n@pytest.mark.asyncio(scope=\"session\")\n    assert output_schema == ExpectedOutputSchema.jsonschema()",
  "blocks": [
    {
      "id": 1,
      "label": "@pytest.mark.asyncio(scope=\"session\")",
      "successors": [
        {
          "id": 2,
          "label": "assert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}",
          "successors": []
        }
      ]
    },
    {
      "id": 3,
      "label": "@pytest.mark.asyncio(scope=\"session\")",
      "successors": [
        {
          "id": 4,
          "label": "assert output_schema == ExpectedOutputSchema.jsonschema()",
          "successors": []
        }
      ]
    }
  ]
}