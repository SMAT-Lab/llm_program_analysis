[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 14,
    "children": [],
    "code": "from typing import Any\nfrom uuid import UUID\n\nimport pytest\n\nfrom backend.blocks.basic import AgentInputBlock, AgentOutputBlock, StoreValueBlock\nfrom backend.data.block import BlockSchema\nfrom backend.data.graph import Graph, Link, Node\nfrom backend.data.model import SchemaField\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.model import CreateGraph\nfrom backend.util.test import SpinTestServer\n\n\n@pytest.mark.asyncio(scope=\"session\")\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from typing import Any\nfrom uuid import UUID\n\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "import pytest\n\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.blocks.basic import AgentInputBlock, AgentOutputBlock, StoreValueBlock\nfrom backend.data.block import BlockSchema\nfrom backend.data.graph import Graph, Link, Node\nfrom backend.data.model import SchemaField\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.model import CreateGraph\nfrom backend.util.test import SpinTestServer\n\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "\n@pytest.mark.asyncio(scope=\"session\")\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        }
      ]
    }
  },
  {
    "decl_name": "test_graph_creation",
    "start_line": 15,
    "end_line": 67,
    "children": [],
    "code": "async def test_graph_creation(server: SpinTestServer):\n    \"\"\"\n    Test the creation of a graph with nodes and links.\n\n    This test ensures that:\n    1. A graph can be successfully created with valid connections.\n    2. The created graph has the correct structure and properties.\n\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"\n    value_block = StoreValueBlock().id\n    input_block = AgentInputBlock().id\n\n    graph = Graph(\n        id=\"test_graph\",\n        name=\"TestGraph\",\n        description=\"Test graph\",\n        nodes=[\n            Node(id=\"node_1\", block_id=value_block),\n            Node(id=\"node_2\", block_id=input_block, input_default={\"name\": \"input\"}),\n            Node(id=\"node_3\", block_id=value_block),\n        ],\n        links=[\n            Link(\n                source_id=\"node_1\",\n                sink_id=\"node_2\",\n                source_name=\"output\",\n                sink_name=\"name\",\n            ),\n        ],\n    )\n    create_graph = CreateGraph(graph=graph)\n    created_graph = await server.agent_server.test_create_graph(\n        create_graph, DEFAULT_USER_ID\n    )\n\n    assert UUID(created_graph.id)\n    assert created_graph.name == \"TestGraph\"\n\n    assert len(created_graph.nodes) == 3\n    assert UUID(created_graph.nodes[0].id)\n    assert UUID(created_graph.nodes[1].id)\n    assert UUID(created_graph.nodes[2].id)\n\n    nodes = created_graph.nodes\n    links = created_graph.links\n    assert len(links) == 1\n    assert links[0].source_id != links[0].sink_id\n    assert links[0].source_id in {nodes[0].id, nodes[1].id, nodes[2].id}\n    assert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_graph_creation_1",
          "code": "async def test_graph_creation(server: SpinTestServer):\n    \"\"\"\n    Test the creation of a graph with nodes and links.\n\n    This test ensures that:\n    1. A graph can be successfully created with valid connections.\n    2. The created graph has the correct structure and properties.\n\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"\n"
        },
        {
          "id": "test_graph_creation_2",
          "code": "    value_block = StoreValueBlock().id\n    input_block = AgentInputBlock().id\n"
        },
        {
          "id": "test_graph_creation_3",
          "code": "    graph = Graph(\n        id=\"test_graph\",\n        name=\"TestGraph\",\n        description=\"Test graph\",\n        nodes=[\n            Node(id=\"node_1\", block_id=value_block),\n            Node(id=\"node_2\", block_id=input_block, input_default={\"name\": \"input\"}),\n            Node(id=\"node_3\", block_id=value_block),\n        ],\n        links=[\n            Link(\n                source_id=\"node_1\",\n                sink_id=\"node_2\",\n                source_name=\"output\",\n                sink_name=\"name\",\n            ),\n        ],\n    )\n"
        },
        {
          "id": "test_graph_creation_4",
          "code": "    create_graph = CreateGraph(graph=graph)\n    created_graph = await server.agent_server.test_create_graph(\n        create_graph, DEFAULT_USER_ID\n    )\n"
        },
        {
          "id": "test_graph_creation_5",
          "code": "    assert UUID(created_graph.id)\n    assert created_graph.name == \"TestGraph\"\n"
        },
        {
          "id": "test_graph_creation_6",
          "code": "    assert len(created_graph.nodes) == 3\n    assert UUID(created_graph.nodes[0].id)\n    assert UUID(created_graph.nodes[1].id)\n    assert UUID(created_graph.nodes[2].id)\n"
        },
        {
          "id": "test_graph_creation_7",
          "code": "    nodes = created_graph.nodes\n    links = created_graph.links\n"
        },
        {
          "id": "test_graph_creation_8",
          "code": "    assert len(links) == 1\n    assert links[0].source_id != links[0].sink_id\n    assert links[0].source_id in {nodes[0].id, nodes[1].id, nodes[2].id}\n    assert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}\n"
        }
      ],
      "edges": [
        {
          "from": "test_graph_creation_1",
          "to": "test_graph_creation_2"
        },
        {
          "from": "test_graph_creation_2",
          "to": "test_graph_creation_3"
        },
        {
          "from": "test_graph_creation_3",
          "to": "test_graph_creation_4"
        },
        {
          "from": "test_graph_creation_4",
          "to": "test_graph_creation_5"
        },
        {
          "from": "test_graph_creation_5",
          "to": "test_graph_creation_6"
        },
        {
          "from": "test_graph_creation_6",
          "to": "test_graph_creation_7"
        },
        {
          "from": "test_graph_creation_7",
          "to": "test_graph_creation_8"
        }
      ]
    }
  },
  {
    "decl_name": "test_get_input_schema",
    "start_line": 68,
    "end_line": 157,
    "children": [
      {
        "decl_name": "ExpectedInputSchema",
        "start_line": 139,
        "end_line": 141,
        "children": [],
        "code": "    class ExpectedInputSchema(BlockSchema):\n        in_key_a: Any = SchemaField(title=\"Key A\", default=\"A\", advanced=False)\n        in_key_b: Any = SchemaField(title=\"in_key_b\", advanced=True)\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExpectedInputSchema_1",
              "code": "class ExpectedInputSchema(BlockSchema):\n"
            },
            {
              "id": "ExpectedInputSchema_2",
              "code": "        in_key_a: Any = SchemaField(title=\"Key A\", default=\"A\", advanced=False)\n        in_key_b: Any = SchemaField(title=\"in_key_b\", advanced=True)\n"
            }
          ],
          "edges": [
            {
              "from": "ExpectedInputSchema_1",
              "to": "ExpectedInputSchema_2"
            }
          ]
        }
      },
      {
        "decl_name": "ExpectedOutputSchema",
        "start_line": 143,
        "end_line": 148,
        "children": [],
        "code": "    class ExpectedOutputSchema(BlockSchema):\n        out_key: Any = SchemaField(\n            description=\"This is an output key\",\n            title=\"out_key\",\n            advanced=False,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExpectedOutputSchema_1",
              "code": "class ExpectedOutputSchema(BlockSchema):\n        out_key: Any = SchemaField(\n            description=\"This is an output key\",\n            title=\"out_key\",\n            advanced=False,\n        )\n"
            }
          ],
          "edges": []
        }
      }
    ],
    "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_get_input_schema(server: SpinTestServer):\n    \"\"\"\n    Test the get_input_schema method of a created graph.\n\n    This test ensures that:\n    1. A graph can be created with a single node.\n    2. The input schema of the created graph is correctly generated.\n    3. The input schema contains the expected input name and node id.\n\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"\n    value_block = StoreValueBlock().id\n    input_block = AgentInputBlock().id\n    output_block = AgentOutputBlock().id\n\n    graph = Graph(\n        name=\"TestInputSchema\",\n        description=\"Test input schema\",\n        nodes=[\n            Node(\n                id=\"node_0_a\",\n                block_id=input_block,\n                input_default={\"name\": \"in_key_a\", \"title\": \"Key A\", \"value\": \"A\"},\n                metadata={\"id\": \"node_0_a\"},\n            ),\n            Node(\n                id=\"node_0_b\",\n                block_id=input_block,\n                input_default={\"name\": \"in_key_b\", \"advanced\": True},\n                metadata={\"id\": \"node_0_b\"},\n            ),\n            Node(id=\"node_1\", block_id=value_block, metadata={\"id\": \"node_1\"}),\n            Node(\n                id=\"node_2\",\n                block_id=output_block,\n                input_default={\n                    \"name\": \"out_key\",\n                    \"description\": \"This is an output key\",\n                },\n                metadata={\"id\": \"node_2\"},\n            ),\n        ],\n        links=[\n            Link(\n                source_id=\"node_0_a\",\n                sink_id=\"node_1\",\n                source_name=\"result\",\n                sink_name=\"input\",\n            ),\n            Link(\n                source_id=\"node_0_b\",\n                sink_id=\"node_1\",\n                source_name=\"result\",\n                sink_name=\"input\",\n            ),\n            Link(\n                source_id=\"node_1\",\n                sink_id=\"node_2\",\n                source_name=\"output\",\n                sink_name=\"value\",\n            ),\n        ],\n    )\n\n    create_graph = CreateGraph(graph=graph)\n    created_graph = await server.agent_server.test_create_graph(\n        create_graph, DEFAULT_USER_ID\n    )\n\n\n\n    input_schema = created_graph.input_schema\n    input_schema[\"title\"] = \"ExpectedInputSchema\"\n    assert input_schema == ExpectedInputSchema.jsonschema()\n\n    output_schema = created_graph.output_schema\n    output_schema[\"title\"] = \"ExpectedOutputSchema\"\n    assert output_schema == ExpectedOutputSchema.jsonschema()\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_get_input_schema_1",
          "code": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_get_input_schema(server: SpinTestServer):\n    \"\"\"\n    Test the get_input_schema method of a created graph.\n\n    This test ensures that:\n    1. A graph can be created with a single node.\n    2. The input schema of the created graph is correctly generated.\n    3. The input schema contains the expected input name and node id.\n\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"\n"
        },
        {
          "id": "test_get_input_schema_2",
          "code": "    value_block = StoreValueBlock().id\n    input_block = AgentInputBlock().id\n    output_block = AgentOutputBlock().id\n\n"
        },
        {
          "id": "test_get_input_schema_3",
          "code": "    graph = Graph(\n        name=\"TestInputSchema\",\n        description=\"Test input schema\",\n        nodes=[\n            Node(\n                id=\"node_0_a\",\n                block_id=input_block,\n                input_default={\"name\": \"in_key_a\", \"title\": \"Key A\", \"value\": \"A\"},\n                metadata={\"id\": \"node_0_a\"},\n            ),\n            Node(\n                id=\"node_0_b\",\n                block_id=input_block,\n                input_default={\"name\": \"in_key_b\", \"advanced\": True},\n                metadata={\"id\": \"node_0_b\"},\n            ),\n            Node(id=\"node_1\", block_id=value_block, metadata={\"id\": \"node_1\"}),\n            Node(\n                id=\"node_2\",\n                block_id=output_block,\n                input_default={\n                    \"name\": \"out_key\",\n                    \"description\": \"This is an output key\",\n                },\n                metadata={\"id\": \"node_2\"},\n            ),\n        ],\n        links=[\n            Link(\n                source_id=\"node_0_a\",\n                sink_id=\"node_1\",\n                source_name=\"result\",\n                sink_name=\"input\",\n            ),\n            Link(\n                source_id=\"node_0_b\",\n                sink_id=\"node_1\",\n                source_name=\"result\",\n                sink_name=\"input\",\n            ),\n            Link(\n                source_id=\"node_1\",\n                sink_id=\"node_2\",\n                source_name=\"output\",\n                sink_name=\"value\",\n            ),\n        ],\n    )\n"
        },
        {
          "id": "test_get_input_schema_4",
          "code": "    create_graph = CreateGraph(graph=graph)\n    created_graph = await server.agent_server.test_create_graph(\n        create_graph, DEFAULT_USER_ID\n    )\n"
        },
        {
          "id": "test_get_input_schema_5",
          "code": "    input_schema = created_graph.input_schema\n    input_schema[\"title\"] = \"ExpectedInputSchema\"\n    assert input_schema == ExpectedInputSchema.jsonschema()\n"
        },
        {
          "id": "test_get_input_schema_6",
          "code": "    output_schema = created_graph.output_schema\n    output_schema[\"title\"] = \"ExpectedOutputSchema\"\n    assert output_schema == ExpectedOutputSchema.jsonschema()\n"
        }
      ],
      "edges": [
        {
          "from": "test_get_input_schema_1",
          "to": "test_get_input_schema_2"
        },
        {
          "from": "test_get_input_schema_2",
          "to": "test_get_input_schema_3"
        },
        {
          "from": "test_get_input_schema_3",
          "to": "test_get_input_schema_4"
        },
        {
          "from": "test_get_input_schema_4",
          "to": "test_get_input_schema_5"
        },
        {
          "from": "test_get_input_schema_5",
          "to": "test_get_input_schema_6"
        }
      ]
    }
  }
]