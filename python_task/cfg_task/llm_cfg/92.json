[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 52,
    "children": [
      {
        "decl_name": "binary_xor",
        "start_line": 3,
        "end_line": 45,
        "children": [],
        "code": "def binary_xor(a: int, b: int) -> str:\n    \"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary xor operation on the integers provided.\n\n    >>> binary_xor(25, 32)\n    '0b111001'\n    >>> binary_xor(37, 50)\n    '0b010111'\n    >>> binary_xor(21, 30)\n    '0b01011'\n    >>> binary_xor(58, 73)\n    '0b1110011'\n    >>> binary_xor(0, 255)\n    '0b11111111'\n    >>> binary_xor(256, 256)\n    '0b000000000'\n    >>> binary_xor(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_xor(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    TypeError: 'float' object cannot be interpreted as an integer\n    >>> binary_xor(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"the value of both inputs must be positive\")\n\n    a_binary = str(bin(a))[2:]  # remove the leading \"0b\"\n    b_binary = str(bin(b))[2:]  # remove the leading \"0b\"\n\n    max_len = max(len(a_binary), len(b_binary))\n\n    return \"0b\" + \"\".join(\n        str(int(char_a != char_b))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )\n",
        "cfg": {
          "nodes": [
            {
              "id": "binary_xor_1",
              "code": "def binary_xor(a: int, b: int) -> str:\n    \"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary xor operation on the integers provided.\n\n    >>> binary_xor(25, 32)\n    '0b111001'\n    >>> binary_xor(37, 50)\n    '0b010111'\n    >>> binary_xor(21, 30)\n    '0b01011'\n    >>> binary_xor(58, 73)\n    '0b1110011'\n    >>> binary_xor(0, 255)\n    '0b11111111'\n    >>> binary_xor(256, 256)\n    '0b000000000'\n    >>> binary_xor(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_xor(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    TypeError: 'float' object cannot be interpreted as an integer\n    >>> binary_xor(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n"
            },
            {
              "id": "binary_xor_2",
              "code": "    if a < 0 or b < 0:\n        raise ValueError(\"the value of both inputs must be positive\")\n"
            },
            {
              "id": "binary_xor_3",
              "code": "    a_binary = str(bin(a))[2:]  # remove the leading \"0b\"\n    b_binary = str(bin(b))[2:]  # remove the leading \"0b\"\n"
            },
            {
              "id": "binary_xor_4",
              "code": "    max_len = max(len(a_binary), len(b_binary))\n"
            },
            {
              "id": "binary_xor_5",
              "code": "    return \"0b\" + \"\".join(\n        str(int(char_a != char_b))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )\n"
            }
          ],
          "edges": [
            {
              "from": "binary_xor_1",
              "to": "binary_xor_2"
            },
            {
              "from": "binary_xor_2",
              "to": "binary_xor_3"
            },
            {
              "from": "binary_xor_3",
              "to": "binary_xor_4"
            },
            {
              "from": "binary_xor_4",
              "to": "binary_xor_5"
            }
          ]
        }
      },
      {
        "decl_name": "__main__",
        "start_line": 48,
        "end_line": 51,
        "children": [],
        "code": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
        "cfg": {
          "nodes": [
            {
              "id": "__main___1",
              "code": "if __name__ == \"__main__\":\n"
            },
            {
              "id": "__main___2",
              "code": "    import doctest\n\n    doctest.testmod()\n"
            }
          ],
          "edges": [
            {
              "from": "__main___1",
              "to": "__main___2"
            }
          ]
        }
      }
    ],
    "code": "# https://www.tutorialspoint.com/python3/bitwise_operators_example.htm\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "# https://www.tutorialspoint.com/python3/bitwise_operators_example.htm\n"
        }
      ],
      "edges": []
    }
  }
]