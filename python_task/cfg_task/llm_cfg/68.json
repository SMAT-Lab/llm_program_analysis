[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 20,
    "children": [],
    "code": "import asyncio\nimport contextlib\nimport logging\nfrom functools import wraps\nfrom typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast\n\nimport ldclient\nfrom fastapi import HTTPException\nfrom ldclient import Context, LDClient\nfrom ldclient.config import Config\nfrom typing_extensions import ParamSpec\n\nfrom .config import SETTINGS\n\nlogger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.DEBUG)\n\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import asyncio\nimport contextlib\nimport logging\nfrom functools import wraps\nfrom typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "import ldclient\nfrom fastapi import HTTPException\nfrom ldclient import Context, LDClient\nfrom ldclient.config import Config\nfrom typing_extensions import ParamSpec\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from .config import SETTINGS\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "logger = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.DEBUG)\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "P = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        }
      ]
    }
  },
  {
    "decl_name": "get_client",
    "start_line": 21,
    "end_line": 23,
    "children": [],
    "code": "def get_client() -> LDClient:\n    \"\"\"Get the LaunchDarkly client singleton.\"\"\"\n    return ldclient.get()\n",
    "cfg": {
      "nodes": [
        {
          "id": "get_client_1",
          "code": "def get_client() -> LDClient:\n    \"\"\"Get the LaunchDarkly client singleton.\"\"\"\n    return ldclient.get()\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "initialize_launchdarkly",
    "start_line": 26,
    "end_line": 42,
    "children": [],
    "code": "def initialize_launchdarkly() -> None:\n    sdk_key = SETTINGS.launch_darkly_sdk_key\n    logger.debug(\n        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )\n\n    if not sdk_key:\n        logger.warning(\"LaunchDarkly SDK key not configured\")\n        return\n\n    config = Config(sdk_key)\n    ldclient.set_config(config)\n\n    if ldclient.get().is_initialized():\n        logger.info(\"LaunchDarkly client initialized successfully\")\n    else:\n        logger.error(\"LaunchDarkly client failed to initialize\")\n",
    "cfg": {
      "nodes": [
        {
          "id": "initialize_launchdarkly_1",
          "code": "def initialize_launchdarkly() -> None:\n    sdk_key = SETTINGS.launch_darkly_sdk_key\n"
        },
        {
          "id": "initialize_launchdarkly_2",
          "code": "    logger.debug(\n        f\"Initializing LaunchDarkly with SDK key: {'present' if sdk_key else 'missing'}\"\n    )\n"
        },
        {
          "id": "initialize_launchdarkly_3",
          "code": "    if not sdk_key:\n        logger.warning(\"LaunchDarkly SDK key not configured\")\n        return\n"
        },
        {
          "id": "initialize_launchdarkly_4",
          "code": "    config = Config(sdk_key)\n    ldclient.set_config(config)\n"
        },
        {
          "id": "initialize_launchdarkly_5",
          "code": "    if ldclient.get().is_initialized():\n        logger.info(\"LaunchDarkly client initialized successfully\")\n"
        },
        {
          "id": "initialize_launchdarkly_6",
          "code": "    else:\n        logger.error(\"LaunchDarkly client failed to initialize\")\n"
        }
      ],
      "edges": [
        {
          "from": "initialize_launchdarkly_1",
          "to": "initialize_launchdarkly_2"
        },
        {
          "from": "initialize_launchdarkly_2",
          "to": "initialize_launchdarkly_3"
        },
        {
          "from": "initialize_launchdarkly_3",
          "to": "initialize_launchdarkly_4"
        },
        {
          "from": "initialize_launchdarkly_4",
          "to": "initialize_launchdarkly_5"
        },
        {
          "from": "initialize_launchdarkly_5",
          "to": "initialize_launchdarkly_6"
        }
      ]
    }
  },
  {
    "decl_name": "shutdown_launchdarkly",
    "start_line": 45,
    "end_line": 49,
    "children": [],
    "code": "def shutdown_launchdarkly() -> None:\n    \"\"\"Shutdown the LaunchDarkly client.\"\"\"\n    if ldclient.get().is_initialized():\n        ldclient.get().close()\n        logger.info(\"LaunchDarkly client closed successfully\")\n",
    "cfg": {
      "nodes": [
        {
          "id": "shutdown_launchdarkly_1",
          "code": "def shutdown_launchdarkly() -> None:\n    \"\"\"Shutdown the LaunchDarkly client.\"\"\"\n"
        },
        {
          "id": "shutdown_launchdarkly_2",
          "code": "    if ldclient.get().is_initialized():\n        ldclient.get().close()\n        logger.info(\"LaunchDarkly client closed successfully\")\n"
        }
      ],
      "edges": [
        {
          "from": "shutdown_launchdarkly_1",
          "to": "shutdown_launchdarkly_2"
        }
      ]
    }
  },
  {
    "decl_name": "create_context",
    "start_line": 52,
    "end_line": 60,
    "children": [],
    "code": "def create_context(\n    user_id: str, additional_attributes: Optional[Dict[str, Any]] = None\n) -> Context:\n    \"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\n    builder = Context.builder(str(user_id)).kind(\"user\")\n    if additional_attributes:\n        for key, value in additional_attributes.items():\n            builder.set(key, value)\n    return builder.build()\n",
    "cfg": {
      "nodes": [
        {
          "id": "create_context_1",
          "code": "def create_context(\n    user_id: str, additional_attributes: Optional[Dict[str, Any]] = None\n) -> Context:\n    \"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\n    builder = Context.builder(str(user_id)).kind(\"user\")\n"
        },
        {
          "id": "create_context_2",
          "code": "    if additional_attributes:\n"
        },
        {
          "id": "create_context_3",
          "code": "        for key, value in additional_attributes.items():\n            builder.set(key, value)\n"
        },
        {
          "id": "create_context_4",
          "code": "    return builder.build()\n"
        }
      ],
      "edges": [
        {
          "from": "create_context_1",
          "to": "create_context_2"
        },
        {
          "from": "create_context_2",
          "to": "create_context_3"
        },
        {
          "from": "create_context_2",
          "to": "create_context_4"
        },
        {
          "from": "create_context_3",
          "to": "create_context_4"
        }
      ]
    }
  },
  {
    "decl_name": "feature_flag",
    "start_line": 63,
    "end_line": 132,
    "children": [
      {
        "decl_name": "feature_flag.decorator",
        "start_line": 73,
        "end_line": 132,
        "children": [
          {
            "decl_name": "feature_flag.decorator.async_wrapper",
            "start_line": 77,
            "end_line": 102,
            "children": [],
            "code": "        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n\n",
            "cfg": {
              "nodes": [
                {
                  "id": "feature_flag.decorator.async_wrapper_1",
                  "code": "async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n"
                },
                {
                  "id": "feature_flag.decorator.async_wrapper_2",
                  "code": "            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n"
                },
                {
                  "id": "feature_flag.decorator.async_wrapper_3",
                  "code": "                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n"
                },
                {
                  "id": "feature_flag.decorator.async_wrapper_4",
                  "code": "                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n"
                },
                {
                  "id": "feature_flag.decorator.async_wrapper_5",
                  "code": "                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n"
                },
                {
                  "id": "feature_flag.decorator.async_wrapper_6",
                  "code": "                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n"
                },
                {
                  "id": "feature_flag.decorator.async_wrapper_7",
                  "code": "            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n"
                }
              ],
              "edges": [
                {
                  "from": "feature_flag.decorator.async_wrapper_1",
                  "to": "feature_flag.decorator.async_wrapper_2"
                },
                {
                  "from": "feature_flag.decorator.async_wrapper_2",
                  "to": "feature_flag.decorator.async_wrapper_3"
                },
                {
                  "from": "feature_flag.decorator.async_wrapper_2",
                  "to": "feature_flag.decorator.async_wrapper_4"
                },
                {
                  "from": "feature_flag.decorator.async_wrapper_3",
                  "to": "feature_flag.decorator.async_wrapper_5"
                },
                {
                  "from": "feature_flag.decorator.async_wrapper_4",
                  "to": "feature_flag.decorator.async_wrapper_5"
                },
                {
                  "from": "feature_flag.decorator.async_wrapper_5",
                  "to": "feature_flag.decorator.async_wrapper_6"
                },
                {
                  "from": "feature_flag.decorator.async_wrapper_6",
                  "to": "feature_flag.decorator.async_wrapper_7"
                }
              ]
            }
          },
          {
            "decl_name": "feature_flag.decorator.sync_wrapper",
            "start_line": 104,
            "end_line": 126,
            "children": [],
            "code": "        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n\n                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n\n",
            "cfg": {
              "nodes": [
                {
                  "id": "feature_flag.decorator.sync_wrapper_1",
                  "code": "def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n"
                },
                {
                  "id": "feature_flag.decorator.sync_wrapper_2",
                  "code": "            try:\n                user_id = kwargs.get(\"user_id\")\n                if not user_id:\n                    raise ValueError(\"user_id is required\")\n"
                },
                {
                  "id": "feature_flag.decorator.sync_wrapper_3",
                  "code": "                if not get_client().is_initialized():\n                    logger.warning(\n                        f\"LaunchDarkly not initialized, using default={default}\"\n                    )\n                    is_enabled = default\n"
                },
                {
                  "id": "feature_flag.decorator.sync_wrapper_4",
                  "code": "                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n"
                },
                {
                  "id": "feature_flag.decorator.sync_wrapper_5",
                  "code": "                if not is_enabled:\n                    raise HTTPException(status_code=404, detail=\"Feature not available\")\n"
                },
                {
                  "id": "feature_flag.decorator.sync_wrapper_6",
                  "code": "                return cast(T, func(*args, **kwargs))\n"
                },
                {
                  "id": "feature_flag.decorator.sync_wrapper_7",
                  "code": "            except Exception as e:\n                logger.error(f\"Error evaluating feature flag {flag_key}: {e}\")\n                raise\n"
                }
              ],
              "edges": [
                {
                  "from": "feature_flag.decorator.sync_wrapper_1",
                  "to": "feature_flag.decorator.sync_wrapper_2"
                },
                {
                  "from": "feature_flag.decorator.sync_wrapper_2",
                  "to": "feature_flag.decorator.sync_wrapper_3"
                },
                {
                  "from": "feature_flag.decorator.sync_wrapper_2",
                  "to": "feature_flag.decorator.sync_wrapper_4"
                },
                {
                  "from": "feature_flag.decorator.sync_wrapper_3",
                  "to": "feature_flag.decorator.sync_wrapper_5"
                },
                {
                  "from": "feature_flag.decorator.sync_wrapper_4",
                  "to": "feature_flag.decorator.sync_wrapper_5"
                },
                {
                  "from": "feature_flag.decorator.sync_wrapper_5",
                  "to": "feature_flag.decorator.sync_wrapper_6"
                },
                {
                  "from": "feature_flag.decorator.sync_wrapper_5",
                  "to": "feature_flag.decorator.sync_wrapper_7"
                }
              ]
            }
          }
        ],
        "code": "    def decorator(\n        func: Callable[P, Union[T, Awaitable[T]]],\n    ) -> Callable[P, Union[T, Awaitable[T]]]:\n        @wraps(func)\n        @wraps(func)\n        return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )\n\n    return decorator\n",
        "cfg": {
          "nodes": [
            {
              "id": "feature_flag.decorator_1",
              "code": "def decorator(\n        func: Callable[P, Union[T, Awaitable[T]]],\n    ) -> Callable[P, Union[T, Awaitable[T]]]:\n"
            },
            {
              "id": "feature_flag.decorator_2",
              "code": "        @wraps(func)\n        @wraps(func)\n"
            },
            {
              "id": "feature_flag.decorator_3",
              "code": "        return cast(\n            Callable[P, Union[T, Awaitable[T]]],\n            async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper,\n        )\n"
            },
            {
              "id": "feature_flag.decorator_4",
              "code": "    return decorator\n"
            }
          ],
          "edges": [
            {
              "from": "feature_flag.decorator_1",
              "to": "feature_flag.decorator_2"
            },
            {
              "from": "feature_flag.decorator_2",
              "to": "feature_flag.decorator_3"
            },
            {
              "from": "feature_flag.decorator_3",
              "to": "feature_flag.decorator_4"
            }
          ]
        }
      }
    ],
    "code": "def feature_flag(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "feature_flag_1",
          "code": "def feature_flag(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n"
        },
        {
          "id": "feature_flag_2",
          "code": "    \"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"\n"
        }
      ],
      "edges": [
        {
          "from": "feature_flag_1",
          "to": "feature_flag_2"
        }
      ]
    }
  },
  {
    "decl_name": "percentage_rollout",
    "start_line": 135,
    "end_line": 142,
    "children": [],
    "code": "def percentage_rollout(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"Decorator for percentage-based rollouts.\"\"\"\n    return feature_flag(flag_key, default)\n",
    "cfg": {
      "nodes": [
        {
          "id": "percentage_rollout_1",
          "code": "def percentage_rollout(\n    flag_key: str,\n    default: bool = False,\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n"
        },
        {
          "id": "percentage_rollout_2",
          "code": "    \"\"\"Decorator for percentage-based rollouts.\"\"\"\n    return feature_flag(flag_key, default)\n"
        }
      ],
      "edges": [
        {
          "from": "percentage_rollout_1",
          "to": "percentage_rollout_2"
        }
      ]
    }
  },
  {
    "decl_name": "beta_feature",
    "start_line": 145,
    "end_line": 153,
    "children": [],
    "code": "def beta_feature(\n    flag_key: Optional[str] = None,\n    unauthorized_response: Any = {\"message\": \"Not available in beta\"},\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n    \"\"\"Decorator for beta features.\"\"\"\n    actual_key = f\"beta-{flag_key}\" if flag_key else \"beta\"\n    return feature_flag(actual_key, False)\n",
    "cfg": {
      "nodes": [
        {
          "id": "beta_feature_1",
          "code": "def beta_feature(\n    flag_key: Optional[str] = None,\n    unauthorized_response: Any = {\"message\": \"Not available in beta\"},\n) -> Callable[\n    [Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]\n]:\n"
        },
        {
          "id": "beta_feature_2",
          "code": "    \"\"\"Decorator for beta features.\"\"\"\n"
        },
        {
          "id": "beta_feature_3",
          "code": "    actual_key = f\"beta-{flag_key}\" if flag_key else \"beta\"\n    return feature_flag(actual_key, False)\n"
        }
      ],
      "edges": [
        {
          "from": "beta_feature_1",
          "to": "beta_feature_2"
        },
        {
          "from": "beta_feature_2",
          "to": "beta_feature_3"
        }
      ]
    }
  },
  {
    "decl_name": "mock_flag_variation",
    "start_line": 156,
    "end_line": 166,
    "children": [],
    "code": "@contextlib.contextmanager\ndef mock_flag_variation(flag_key: str, return_value: Any):\n    \"\"\"Context manager for testing feature flags.\"\"\"\n    original_variation = get_client().variation\n    get_client().variation = lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )\n    try:\n        yield\n    finally:\n        get_client().variation = original_variation\n",
    "cfg": {
      "nodes": [
        {
          "id": "mock_flag_variation_1",
          "code": "@contextlib.contextmanager\ndef mock_flag_variation(flag_key: str, return_value: Any):\n    \"\"\"Context manager for testing feature flags.\"\"\"\n"
        },
        {
          "id": "mock_flag_variation_2",
          "code": "    original_variation = get_client().variation\n    get_client().variation = lambda key, context, default: (\n        return_value if key == flag_key else original_variation(key, context, default)\n    )\n"
        },
        {
          "id": "mock_flag_variation_3",
          "code": "    try:\n        yield\n"
        },
        {
          "id": "mock_flag_variation_4",
          "code": "    finally:\n        get_client().variation = original_variation\n"
        }
      ],
      "edges": [
        {
          "from": "mock_flag_variation_1",
          "to": "mock_flag_variation_2"
        },
        {
          "from": "mock_flag_variation_2",
          "to": "mock_flag_variation_3"
        },
        {
          "from": "mock_flag_variation_3",
          "to": "mock_flag_variation_4"
        }
      ]
    }
  }
]