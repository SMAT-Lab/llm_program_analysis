{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 195,
  "functions": [],
  "classes": [
    {
      "name": "PublishToMediumStatus",
      "type": "class",
      "start_line": 33,
      "end_line": 36,
      "functions": [],
      "simplified_code": "class PublishToMediumStatus(str, Enum):\n    PUBLIC = \"public\"\n    DRAFT = \"draft\"\n    UNLISTED = \"unlisted\"",
      "blocks": [
        {
          "id": 1,
          "label": "class PublishToMediumStatus(str, Enum):",
          "successors": [
            {
              "id": 2,
              "label": "    PUBLIC = \"public\"\n    DRAFT = \"draft\"\n    UNLISTED = \"unlisted\"",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "PublishToMediumBlock",
      "type": "class",
      "start_line": 39,
      "end_line": 195,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 97,
          "end_line": 131,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"3f7b2dcb-4a78-4e3f-b0f1-88132e1b89df\",\n            input_schema=PublishToMediumBlock.Input,\n            output_schema=PublishToMediumBlock.Output,\n            description=\"Publishes a post to Medium.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"author_id\": \"1234567890abcdef\",\n                \"title\": \"Test Post\",\n                \"content\": \"<h1>Test Content</h1><p>This is a test post.</p>\",\n                \"content_format\": \"html\",\n                \"tags\": [\"test\", \"automation\"],\n                \"license\": \"all-rights-reserved\",\n                \"notify_followers\": False,\n                \"publish_status\": PublishToMediumStatus.DRAFT.value,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\"post_id\", \"e6f36a\"),\n                (\"post_url\", \"https://medium.com/@username/test-post-e6f36a\"),\n                (\"published_at\", 1626282600),\n            ],\n            test_mock={\n                \"create_post\": lambda *args, **kwargs: {\n                    \"data\": {\n                        \"id\": \"e6f36a\",\n                        \"url\": \"https://medium.com/@username/test-post-e6f36a\",\n                        \"authorId\": \"1234567890abcdef\",\n                        \"publishedAt\": 1626282600,\n                    }\n                }\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "    super().__init__(\n        id=\"3f7b2dcb-4a78-4e3f-b0f1-88132e1b89df\",\n        input_schema=PublishToMediumBlock.Input,\n        output_schema=PublishToMediumBlock.Output,\n        description=\"Publishes a post to Medium.\",\n        categories={BlockCategory.SOCIAL},\n        test_input={\n            \"author_id\": \"1234567890abcdef\",\n            \"title\": \"Test Post\",\n            \"content\": \"<h1>Test Content</h1><p>This is a test post.</p>\",\n            \"content_format\": \"html\",\n            \"tags\": [\"test\", \"automation\"],\n            \"license\": \"all-rights-reserved\",\n            \"notify_followers\": False,\n            \"publish_status\": PublishToMediumStatus.DRAFT.value,\n            \"credentials\": TEST_CREDENTIALS_INPUT,\n        },\n        test_output=[\n            (\"post_id\", \"e6f36a\"),\n            (\"post_url\", \"https://medium.com/@username/test-post-e6f36a\"),\n            (\"published_at\", 1626282600),\n        ],\n        test_mock={\n            \"create_post\": lambda *args, **kwargs: {\n                \"data\": {\n                    \"id\": \"e6f36a\",\n                    \"url\": \"https://medium.com/@username/test-post-e6f36a\",\n                    \"authorId\": \"1234567890abcdef\",\n                    \"publishedAt\": 1626282600,\n                }\n            }\n        },\n        test_credentials=TEST_CREDENTIALS,\n    )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "create_post",
          "type": "function",
          "start_line": 133,
          "end_line": 169,
          "functions": [],
          "classes": [],
          "simplified_code": "    def create_post(\n        self,\n        api_key: SecretStr,\n        author_id,\n        title,\n        content,\n        content_format,\n        tags,\n        canonical_url,\n        publish_status,\n        license,\n        notify_followers,\n    ):\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n        }\n\n        data = {\n            \"title\": title,\n            \"content\": content,\n            \"contentFormat\": content_format,\n            \"tags\": tags,\n            \"canonicalUrl\": canonical_url,\n            \"publishStatus\": publish_status,\n            \"license\": license,\n            \"notifyFollowers\": notify_followers,\n        }\n\n        response = requests.post(\n            f\"https://api.medium.com/v1/users/{author_id}/posts\",\n            headers=headers,\n            json=data,\n        )\n\n        return response.json()",
          "blocks": [
            {
              "id": 1,
              "label": "headers = {\n    \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n}",
              "successors": [
                {
                  "id": 2,
                  "label": "data = {\n    \"title\": title,\n    \"content\": content,\n    \"contentFormat\": content_format,\n    \"tags\": tags,\n    \"canonicalUrl\": canonical_url,\n    \"publishStatus\": publish_status,\n    \"license\": license,\n    \"notifyFollowers\": notify_followers,\n}",
                  "successors": [
                    {
                      "id": 3,
                      "label": "response = requests.post(\n    f\"https://api.medium.com/v1/users/{author_id}/posts\",\n    headers=headers,\n    json=data,\n)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "return response.json()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 171,
          "end_line": 195,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        response = self.create_post(\n            credentials.api_key,\n            input_data.author_id.get_secret_value(),\n            input_data.title,\n            input_data.content,\n            input_data.content_format,\n            input_data.tags,\n            input_data.canonical_url,\n            input_data.publish_status,\n            input_data.license,\n            input_data.notify_followers,\n        )\n\n        if \"data\" in response:\n            yield \"post_id\", response[\"data\"][\"id\"]\n            yield \"post_url\", response[\"data\"][\"url\"]\n            yield \"published_at\", response[\"data\"][\"publishedAt\"]\n        else:\n            error_message = response.get(\"errors\", [{}])[0].get(\n                \"message\", \"Unknown error occurred\"\n            )\n            raise RuntimeError(f\"Failed to create Medium post: {error_message}\")",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    response = self.create_post(\n        credentials.api_key,\n        input_data.author_id.get_secret_value(),\n        input_data.title,\n        input_data.content,\n        input_data.content_format,\n        input_data.tags,\n        input_data.canonical_url,\n        input_data.publish_status,\n        input_data.license,\n        input_data.notify_followers,\n    )",
              "successors": [
                {
                  "id": 2,
                  "label": "if \"data\" in response:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    yield \"post_id\", response[\"data\"][\"id\"]\n    yield \"post_url\", response[\"data\"][\"url\"]\n    yield \"published_at\", response[\"data\"][\"publishedAt\"]",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "else:\n    error_message = response.get(\"errors\", [{}])[0].get(\n        \"message\", \"Unknown error occurred\"\n    )\n    raise RuntimeError(f\"Failed to create Medium post: {error_message}\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 40,
          "end_line": 85,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        author_id: BlockSecret = SecretField(\n            key=\"medium_author_id\",\n            description=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" https://api.medium.com/v1/me\" the response will contain the authorId field.\"\"\",\n            placeholder=\"Enter the author's Medium AuthorID\",\n        )\n        title: str = SchemaField(\n            description=\"The title of your Medium post\",\n            placeholder=\"Enter your post title\",\n        )\n        content: str = SchemaField(\n            description=\"The main content of your Medium post\",\n            placeholder=\"Enter your post content\",\n        )\n        content_format: str = SchemaField(\n            description=\"The format of the content: 'html' or 'markdown'\",\n            placeholder=\"html\",\n        )\n        tags: List[str] = SchemaField(\n            description=\"List of tags for your Medium post (up to 5)\",\n            placeholder=\"['technology', 'AI', 'blogging']\",\n        )\n        canonical_url: str | None = SchemaField(\n            default=None,\n            description=\"The original home of this content, if it was originally published elsewhere\",\n            placeholder=\"https://yourblog.com/original-post\",\n        )\n        publish_status: PublishToMediumStatus = SchemaField(\n            description=\"The publish status\",\n            placeholder=PublishToMediumStatus.DRAFT,\n        )\n        license: str = SchemaField(\n            default=\"all-rights-reserved\",\n            description=\"The license of the post: 'all-rights-reserved', 'cc-40-by', 'cc-40-by-sa', 'cc-40-by-nd', 'cc-40-by-nc', 'cc-40-by-nc-nd', 'cc-40-by-nc-sa', 'cc-40-zero', 'public-domain'\",\n            placeholder=\"all-rights-reserved\",\n        )\n        notify_followers: bool = SchemaField(\n            default=False,\n            description=\"Whether to notify followers that the user has published\",\n            placeholder=\"False\",\n        )\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.MEDIUM], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Medium integration can be used with any API key with sufficient permissions for the blocks it is used on.\",\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    author_id: BlockSecret = SecretField(\n        key=\"medium_author_id\",\n        description=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \\\"Authorization: Bearer YOUR_ACCESS_TOKEN\\\" https://api.medium.com/v1/me\\\" the response will contain the authorId field.\"\"\",\n        placeholder=\"Enter the author's Medium AuthorID\"\n    )",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    title: str = SchemaField(\n        description=\"The title of your Medium post\",\n        placeholder=\"Enter your post title\"\n    )",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    content: str = SchemaField(\n        description=\"The main content of your Medium post\",\n        placeholder=\"Enter your post content\"\n    )",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    content_format: str = SchemaField(\n        description=\"The format of the content: 'html' or 'markdown'\",\n        placeholder=\"html\"\n    )",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "    tags: List[str] = SchemaField(\n        description=\"List of tags for your Medium post (up to 5)\",\n        placeholder=\"['technology', 'AI', 'blogging']\"\n    )",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "    canonical_url: str | None = SchemaField(\n        default=None,\n        description=\"The original home of this content, if it was originally published elsewhere\",\n        placeholder=\"https://yourblog.com/original-post\"\n    )",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "    publish_status: PublishToMediumStatus = SchemaField(\n        description=\"The publish status\",\n        placeholder=PublishToMediumStatus.DRAFT\n    )",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "    license: str = SchemaField(\n        default=\"all-rights-reserved\",\n        description=\"The license of the post: 'all-rights-reserved', 'cc-40-by', 'cc-40-by-sa', 'cc-40-by-nd', 'cc-40-by-nc', 'cc-40-by-nc-nd', 'cc-40-by-nc-sa', 'cc-40-zero', 'public-domain'\",\n        placeholder=\"all-rights-reserved\"\n    )",
                                              "successors": [
                                                {
                                                  "id": 10,
                                                  "label": "    notify_followers: bool = SchemaField(\n        default=False,\n        description=\"Whether to notify followers that the user has published\",\n        placeholder=\"False\"\n    )",
                                                  "successors": [
                                                    {
                                                      "id": 11,
                                                      "label": "    credentials: CredentialsMetaInput[\n        Literal[ProviderName.MEDIUM], Literal[\"api_key\"]\n    ] = CredentialsField(\n        description=\"The Medium integration can be used with any API key with sufficient permissions for the blocks it is used on.\"\n    )",
                                                      "successors": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 87,
          "end_line": 95,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        post_id: str = SchemaField(description=\"The ID of the created Medium post\")\n        post_url: str = SchemaField(description=\"The URL of the created Medium post\")\n        published_at: int = SchemaField(\n            description=\"The timestamp when the post was published\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the post creation failed\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    post_id: str = SchemaField(description=\"The ID of the created Medium post\")",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    post_url: str = SchemaField(description=\"The URL of the created Medium post\")",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    published_at: int = SchemaField(description=\"The timestamp when the post was published\")",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    error: str = SchemaField(description=\"Error message if the post creation failed\")",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class PublishToMediumBlock(Block):\n        )\n\n        )\n\n        )\n\n        return response.json()\n\n            raise RuntimeError(f\"Failed to create Medium post: {error_message}\")",
      "blocks": [
        {
          "id": 1,
          "label": "class PublishToMediumBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "def __init__(self, token, title, content):",
              "successors": [
                {
                  "id": 3,
                  "label": "self.token = token\nself.title = title\nself.content = content",
                  "successors": []
                }
              ]
            },
            {
              "id": 4,
              "label": "def publish(self):",
              "successors": [
                {
                  "id": 5,
                  "label": "headers = {'Authorization': f'Bearer {self.token}', 'Content-Type': 'application/json'}",
                  "successors": [
                    {
                      "id": 6,
                      "label": "data = {\"title\": self.title, \"content\": self.content, \"contentFormat\": \"markdown\", \"publishStatus\": \"public\"}",
                      "successors": [
                        {
                          "id": 7,
                          "label": "response = requests.post('https://api.medium.com/v1/users/me/posts', headers=headers, json=data)",
                          "successors": [
                            {
                              "id": 8,
                              "label": "if response.status_code != 201:",
                              "successors": [
                                {
                                  "id": 9,
                                  "label": "error_message = response.json().get('errors', 'Unknown error')",
                                  "successors": [
                                    {
                                      "id": 10,
                                      "label": "raise RuntimeError(f\"Failed to create Medium post: {error_message}\")",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "return response.json()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "from enum import Enum\nfrom typing import List, Literal\n\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    BlockSecret,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n    SecretField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"medium\",\n    api_key=SecretStr(\"mock-medium-api-key\"),\n    title=\"Mock Medium API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n    UNLISTED = \"unlisted\"\n\n\n            raise RuntimeError(f\"Failed to create Medium post: {error_message}\")",
  "blocks": [
    {
      "id": 1,
      "label": "# Example input code\nfrom enum import Enum\nfrom typing : List, Literal\n\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    BlockSecret,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n    SecretField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"medium\",\n    api_key=SecretStr(\"mock-medium-api-key\"),\n    title=\"Mock Medium API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\nUNLISTED = \"unlisted\"",
      "successors": [
        {
          "id": 2,
          "label": "raise RuntimeError(f\"Failed to create Medium post: {error_message}\")",
          "successors": []
        }
      ]
    }
  ]
}