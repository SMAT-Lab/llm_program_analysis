[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 5,
    "children": [],
    "code": "import codecs\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import codecs\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        }
      ]
    }
  },
  {
    "decl_name": "TextDecoderBlock",
    "start_line": 6,
    "end_line": 38,
    "children": [
      {
        "decl_name": "TextDecoderBlock.Input",
        "start_line": 7,
        "end_line": 11,
        "children": [],
        "code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"A string containing escaped characters to be decoded\",\n            placeholder='Your entire text block with \\\\n and \\\\\" escaped characters',\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "TextDecoderBlock.Input_1",
              "code": "class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"A string containing escaped characters to be decoded\",\n            placeholder='Your entire text block with \\\\n and \\\\\" escaped characters',\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "TextDecoderBlock.Output",
        "start_line": 13,
        "end_line": 16,
        "children": [],
        "code": "    class Output(BlockSchema):\n        decoded_text: str = SchemaField(\n            description=\"The decoded text with escape sequences processed\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "TextDecoderBlock.Output_1",
              "code": "class Output(BlockSchema):\n        decoded_text: str = SchemaField(\n            description=\"The decoded text with escape sequences processed\"\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "TextDecoderBlock.__init__",
        "start_line": 18,
        "end_line": 34,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"2570e8fe-8447-43ed-84c7-70d657923231\",\n            description=\"Decodes a string containing escape sequences into actual text\",\n            categories={BlockCategory.TEXT},\n            input_schema=TextDecoderBlock.Input,\n            output_schema=TextDecoderBlock.Output,\n            test_input={\"text\": \"\"\"Hello\\nWorld!\\nThis is a \\\"quoted\\\" string.\"\"\"},\n            test_output=[\n                (\n                    \"decoded_text\",\n                    \"\"\"Hello\nWorld!\nThis is a \"quoted\" string.\"\"\",\n                )\n            ],\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "TextDecoderBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"2570e8fe-8447-43ed-84c7-70d657923231\",\n            description=\"Decodes a string containing escape sequences into actual text\",\n            categories={BlockCategory.TEXT},\n            input_schema=TextDecoderBlock.Input,\n            output_schema=TextDecoderBlock.Output,\n            test_input={\"text\": \"\"\"Hello\\nWorld!\\nThis is a \\\"quoted\\\" string.\"\"\"},\n            test_output=[\n                (\n                    \"decoded_text\",\n                    \"\"\"Hello\nWorld!\nThis is a \"quoted\" string.\"\"\",\n                )\n            ],\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "TextDecoderBlock.run",
        "start_line": 36,
        "end_line": 38,
        "children": [],
        "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        decoded_text = codecs.decode(input_data.text, \"unicode_escape\")\n        yield \"decoded_text\", decoded_text\n",
        "cfg": {
          "nodes": [
            {
              "id": "TextDecoderBlock.run_1",
              "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n"
            },
            {
              "id": "TextDecoderBlock.run_2",
              "code": "        decoded_text = codecs.decode(input_data.text, \"unicode_escape\")\n        yield \"decoded_text\", decoded_text\n"
            }
          ],
          "edges": [
            {
              "from": "TextDecoderBlock.run_1",
              "to": "TextDecoderBlock.run_2"
            }
          ]
        }
      }
    ],
    "code": "class TextDecoderBlock(Block):\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "TextDecoderBlock_1",
          "code": "class TextDecoderBlock(Block):\n"
        }
      ],
      "edges": []
    }
  }
]