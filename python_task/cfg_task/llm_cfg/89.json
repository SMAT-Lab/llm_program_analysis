[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 43,
    "children": [
      {
        "decl_name": "twos_complement",
        "start_line": 3,
        "end_line": 36,
        "children": [],
        "code": "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n    if number > 0:\n        raise ValueError(\"input must be a negative integer\")\n    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n    twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )\n    return \"0b\" + twos_complement_number\n",
        "cfg": {
          "nodes": [
            {
              "id": "twos_complement_1",
              "code": "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n"
            },
            {
              "id": "twos_complement_2",
              "code": "    if number > 0:\n        raise ValueError(\"input must be a negative integer\")\n"
            },
            {
              "id": "twos_complement_3",
              "code": "    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n"
            },
            {
              "id": "twos_complement_4",
              "code": "    twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )\n"
            },
            {
              "id": "twos_complement_5",
              "code": "    return \"0b\" + twos_complement_number\n"
            }
          ],
          "edges": [
            {
              "from": "twos_complement_1",
              "to": "twos_complement_2"
            },
            {
              "from": "twos_complement_2",
              "to": "twos_complement_3"
            },
            {
              "from": "twos_complement_3",
              "to": "twos_complement_4"
            },
            {
              "from": "twos_complement_4",
              "to": "twos_complement_5"
            }
          ]
        }
      }
    ],
    "code": "# Information on 2's complement: https://en.wikipedia.org/wiki/Two%27s_complement\n\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "# Information on 2's complement: https://en.wikipedia.org/wiki/Two%27s_complement\n\n\n\n\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        }
      ]
    }
  }
]