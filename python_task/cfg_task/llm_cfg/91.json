[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 9,
    "children": [],
    "code": "import os\nimport subprocess\n\ndirectory = os.path.dirname(os.path.realpath(__file__))\n\nBACKEND_DIR = \".\"\nLIBS_DIR = \"../autogpt_libs\"\nTARGET_DIRS = [BACKEND_DIR, LIBS_DIR]\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import os\nimport subprocess\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "directory = os.path.dirname(os.path.realpath(__file__))\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "BACKEND_DIR = \".\"\nLIBS_DIR = \"../autogpt_libs\"\nTARGET_DIRS = [BACKEND_DIR, LIBS_DIR]\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        }
      ]
    }
  },
  {
    "decl_name": "run",
    "start_line": 10,
    "end_line": 12,
    "children": [],
    "code": "def run(*command: str) -> None:\n    print(f\">>>>> Running poetry run {' '.join(command)}\")\n    subprocess.run([\"poetry\", \"run\"] + list(command), cwd=directory, check=True)\n",
    "cfg": {
      "nodes": [
        {
          "id": "run_1",
          "code": "def run(*command: str) -> None:\n    print(f\">>>>> Running poetry run {' '.join(command)}\")\n    subprocess.run([\"poetry\", \"run\"] + list(command), cwd=directory, check=True)\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "lint",
    "start_line": 15,
    "end_line": 24,
    "children": [],
    "code": "def lint():\n    try:\n        run(\"ruff\", \"check\", *TARGET_DIRS, \"--exit-zero\")\n        run(\"ruff\", \"format\", \"--diff\", \"--check\", LIBS_DIR)\n        run(\"isort\", \"--diff\", \"--check\", \"--profile\", \"black\", BACKEND_DIR)\n        run(\"black\", \"--diff\", \"--check\", BACKEND_DIR)\n        run(\"pyright\", *TARGET_DIRS)\n    except subprocess.CalledProcessError as e:\n        print(\"Lint failed, try running `poetry run format` to fix the issues: \", e)\n        raise e\n",
    "cfg": {
      "nodes": [
        {
          "id": "lint_1",
          "code": "def lint():\n    try:\n"
        },
        {
          "id": "lint_2",
          "code": "        run(\"ruff\", \"check\", *TARGET_DIRS, \"--exit-zero\")\n        run(\"ruff\", \"format\", \"--diff\", \"--check\", LIBS_DIR)\n        run(\"isort\", \"--diff\", \"--check\", \"--profile\", \"black\", BACKEND_DIR)\n        run(\"black\", \"--diff\", \"--check\", BACKEND_DIR)\n        run(\"pyright\", *TARGET_DIRS)\n"
        },
        {
          "id": "lint_3",
          "code": "    except subprocess.CalledProcessError as e:\n        print(\"Lint failed, try running `poetry run format` to fix the issues: \", e)\n        raise e\n"
        }
      ],
      "edges": [
        {
          "from": "lint_1",
          "to": "lint_2"
        },
        {
          "from": "lint_2",
          "to": "lint_3"
        }
      ]
    }
  },
  {
    "decl_name": "format",
    "start_line": 27,
    "end_line": 32,
    "children": [],
    "code": "def format():\n    run(\"ruff\", \"check\", \"--fix\", *TARGET_DIRS)\n    run(\"ruff\", \"format\", LIBS_DIR)\n    run(\"isort\", \"--profile\", \"black\", BACKEND_DIR)\n    run(\"black\", BACKEND_DIR)\n    run(\"pyright\", *TARGET_DIRS)\n",
    "cfg": {
      "nodes": [
        {
          "id": "format_1",
          "code": "def format():\n"
        },
        {
          "id": "format_2",
          "code": "    run(\"ruff\", \"check\", \"--fix\", *TARGET_DIRS)\n    run(\"ruff\", \"format\", LIBS_DIR)\n    run(\"isort\", \"--profile\", \"black\", BACKEND_DIR)\n    run(\"black\", BACKEND_DIR)\n    run(\"pyright\", *TARGET_DIRS)\n"
        }
      ],
      "edges": [
        {
          "from": "format_1",
          "to": "format_2"
        }
      ]
    }
  }
]