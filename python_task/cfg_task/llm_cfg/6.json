[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 12,
    "children": [],
    "code": "from urllib.parse import quote\n\nimport requests\n\nfrom backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from urllib.parse import quote\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "import requests\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "from backend.data.model import SchemaField\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        }
      ]
    }
  },
  {
    "decl_name": "FactCheckerBlock",
    "start_line": 13,
    "end_line": 59,
    "children": [
      {
        "decl_name": "FactCheckerBlock.Input",
        "start_line": 14,
        "end_line": 18,
        "children": [],
        "code": "    class Input(BlockSchema):\n        statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n",
        "cfg": {
          "nodes": [
            {
              "id": "FactCheckerBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "FactCheckerBlock.Input_2",
              "code": "        statement: str = SchemaField(\n            description=\"The statement to check for factuality\"\n        )\n"
            },
            {
              "id": "FactCheckerBlock.Input_3",
              "code": "        credentials: JinaCredentialsInput = JinaCredentialsField()\n"
            }
          ],
          "edges": [
            {
              "from": "FactCheckerBlock.Input_1",
              "to": "FactCheckerBlock.Input_2"
            },
            {
              "from": "FactCheckerBlock.Input_2",
              "to": "FactCheckerBlock.Input_3"
            }
          ]
        }
      },
      {
        "decl_name": "FactCheckerBlock.Output",
        "start_line": 20,
        "end_line": 26,
        "children": [],
        "code": "    class Output(BlockSchema):\n        factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )\n        result: bool = SchemaField(description=\"The result of the factuality check\")\n        reason: str = SchemaField(description=\"The reason for the factuality result\")\n        error: str = SchemaField(description=\"Error message if the check fails\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "FactCheckerBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "FactCheckerBlock.Output_2",
              "code": "        factuality: float = SchemaField(\n            description=\"The factuality score of the statement\"\n        )\n"
            },
            {
              "id": "FactCheckerBlock.Output_3",
              "code": "        result: bool = SchemaField(description=\"The result of the factuality check\")\n"
            },
            {
              "id": "FactCheckerBlock.Output_4",
              "code": "        reason: str = SchemaField(description=\"The reason for the factuality result\")\n"
            },
            {
              "id": "FactCheckerBlock.Output_5",
              "code": "        error: str = SchemaField(description=\"Error message if the check fails\")\n"
            }
          ],
          "edges": [
            {
              "from": "FactCheckerBlock.Output_1",
              "to": "FactCheckerBlock.Output_2"
            },
            {
              "from": "FactCheckerBlock.Output_2",
              "to": "FactCheckerBlock.Output_3"
            },
            {
              "from": "FactCheckerBlock.Output_3",
              "to": "FactCheckerBlock.Output_4"
            },
            {
              "from": "FactCheckerBlock.Output_4",
              "to": "FactCheckerBlock.Output_5"
            }
          ]
        }
      },
      {
        "decl_name": "FactCheckerBlock.__init__",
        "start_line": 28,
        "end_line": 35,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "FactCheckerBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"d38b6c5e-9968-4271-8423-6cfe60d6e7e6\",\n            description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=FactCheckerBlock.Input,\n            output_schema=FactCheckerBlock.Output,\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "FactCheckerBlock.run",
        "start_line": 37,
        "end_line": 58,
        "children": [],
        "code": "    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n        encoded_statement = quote(input_data.statement)\n        url = f\"https://g.jina.ai/{encoded_statement}\"\n\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n\n        if \"data\" in data:\n            data = data[\"data\"]\n            yield \"factuality\", data[\"factuality\"]\n            yield \"result\", data[\"result\"]\n            yield \"reason\", data[\"reason\"]\n        else:\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "FactCheckerBlock.run_1",
              "code": "def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n"
            },
            {
              "id": "FactCheckerBlock.run_2",
              "code": "        encoded_statement = quote(input_data.statement)\n        url = f\"https://g.jina.ai/{encoded_statement}\"\n"
            },
            {
              "id": "FactCheckerBlock.run_3",
              "code": "        headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n"
            },
            {
              "id": "FactCheckerBlock.run_4",
              "code": "        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n"
            },
            {
              "id": "FactCheckerBlock.run_5",
              "code": "        if \"data\" in data:\n            data = data[\"data\"]\n            yield \"factuality\", data[\"factuality\"]\n            yield \"result\", data[\"result\"]\n            yield \"reason\", data[\"reason\"]\n"
            },
            {
              "id": "FactCheckerBlock.run_6",
              "code": "        else:\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")\n"
            }
          ],
          "edges": [
            {
              "from": "FactCheckerBlock.run_1",
              "to": "FactCheckerBlock.run_2"
            },
            {
              "from": "FactCheckerBlock.run_2",
              "to": "FactCheckerBlock.run_3"
            },
            {
              "from": "FactCheckerBlock.run_3",
              "to": "FactCheckerBlock.run_4"
            },
            {
              "from": "FactCheckerBlock.run_4",
              "to": "FactCheckerBlock.run_5"
            },
            {
              "from": "FactCheckerBlock.run_4",
              "to": "FactCheckerBlock.run_6"
            }
          ]
        }
      }
    ],
    "code": "class FactCheckerBlock(Block):\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "FactCheckerBlock_1",
          "code": "class FactCheckerBlock(Block):\n"
        }
      ],
      "edges": []
    }
  }
]