[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 14,
    "children": [],
    "code": "from datetime import datetime\nfrom typing import Any, List\n\nfrom backend.blocks.exa._auth import (\n    ExaCredentials,\n    ExaCredentialsField,\n    ExaCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\nfrom .helpers import ContentSettings\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from datetime import datetime\nfrom typing import Any, List\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from backend.blocks.exa._auth import (\n    ExaCredentials,\n    ExaCredentialsField,\n    ExaCredentialsInput,\n)\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "from .helpers import ContentSettings\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        }
      ]
    }
  },
  {
    "decl_name": "ExaFindSimilarBlock",
    "start_line": 15,
    "end_line": 127,
    "children": [
      {
        "decl_name": "ExaFindSimilarBlock.Input",
        "start_line": 16,
        "end_line": 62,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        url: str = SchemaField(\n            description=\"The url for which you would like to find similar links\"\n        )\n        number_of_results: int = SchemaField(\n            description=\"Number of results to return\",\n            default=10,\n            advanced=True,\n        )\n        include_domains: List[str] = SchemaField(\n            description=\"Domains to include in search\",\n            default=[],\n            advanced=True,\n        )\n        exclude_domains: List[str] = SchemaField(\n            description=\"Domains to exclude from search\",\n            default=[],\n            advanced=True,\n        )\n        start_crawl_date: datetime = SchemaField(\n            description=\"Start date for crawled content\",\n        )\n        end_crawl_date: datetime = SchemaField(\n            description=\"End date for crawled content\",\n        )\n        start_published_date: datetime = SchemaField(\n            description=\"Start date for published content\",\n        )\n        end_published_date: datetime = SchemaField(\n            description=\"End date for published content\",\n        )\n        include_text: List[str] = SchemaField(\n            description=\"Text patterns to include (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        exclude_text: List[str] = SchemaField(\n            description=\"Text patterns to exclude (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n        contents: ContentSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentSettings(),\n            advanced=True,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExaFindSimilarBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n"
            },
            {
              "id": "ExaFindSimilarBlock.Input_2",
              "code": "        url: str = SchemaField(\n            description=\"The url for which you would like to find similar links\"\n        )\n"
            },
            {
              "id": "ExaFindSimilarBlock.Input_3",
              "code": "        number_of_results: int = SchemaField(\n            description=\"Number of results to return\",\n            default=10,\n            advanced=True,\n        )\n"
            },
            {
              "id": "ExaFindSimilarBlock.Input_4",
              "code": "        include_domains: List[str] = SchemaField(\n            description=\"Domains to include in search\",\n            default=[],\n            advanced=True,\n        )\n"
            },
            {
              "id": "ExaFindSimilarBlock.Input_5",
              "code": "        exclude_domains: List[str] = SchemaField(\n            description=\"Domains to exclude from search\",\n            default=[],\n            advanced=True,\n        )\n"
            },
            {
              "id": "ExaFindSimilarBlock.Input_6",
              "code": "        start_crawl_date: datetime = SchemaField(\n            description=\"Start date for crawled content\",\n        )\n"
            },
            {
              "id": "ExaFindSimilarBlock.Input_7",
              "code": "        end_crawl_date: datetime = SchemaField(\n            description=\"End date for crawled content\",\n        )\n"
            },
            {
              "id": "ExaFindSimilarBlock.Input_8",
              "code": "        start_published_date: datetime = SchemaField(\n            description=\"Start date for published content\",\n        )\n"
            },
            {
              "id": "ExaFindSimilarBlock.Input_9",
              "code": "        end_published_date: datetime = SchemaField(\n            description=\"End date for published content\",\n        )\n"
            },
            {
              "id": "ExaFindSimilarBlock.Input_10",
              "code": "        include_text: List[str] = SchemaField(\n            description=\"Text patterns to include (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n"
            },
            {
              "id": "ExaFindSimilarBlock.Input_11",
              "code": "        exclude_text: List[str] = SchemaField(\n            description=\"Text patterns to exclude (max 1 string, up to 5 words)\",\n            default=[],\n            advanced=True,\n        )\n"
            },
            {
              "id": "ExaFindSimilarBlock.Input_12",
              "code": "        contents: ContentSettings = SchemaField(\n            description=\"Content retrieval settings\",\n            default=ContentSettings(),\n            advanced=True,\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "ExaFindSimilarBlock.Input_1",
              "to": "ExaFindSimilarBlock.Input_2"
            },
            {
              "from": "ExaFindSimilarBlock.Input_2",
              "to": "ExaFindSimilarBlock.Input_3"
            },
            {
              "from": "ExaFindSimilarBlock.Input_3",
              "to": "ExaFindSimilarBlock.Input_4"
            },
            {
              "from": "ExaFindSimilarBlock.Input_4",
              "to": "ExaFindSimilarBlock.Input_5"
            },
            {
              "from": "ExaFindSimilarBlock.Input_5",
              "to": "ExaFindSimilarBlock.Input_6"
            },
            {
              "from": "ExaFindSimilarBlock.Input_6",
              "to": "ExaFindSimilarBlock.Input_7"
            },
            {
              "from": "ExaFindSimilarBlock.Input_7",
              "to": "ExaFindSimilarBlock.Input_8"
            },
            {
              "from": "ExaFindSimilarBlock.Input_8",
              "to": "ExaFindSimilarBlock.Input_9"
            },
            {
              "from": "ExaFindSimilarBlock.Input_9",
              "to": "ExaFindSimilarBlock.Input_10"
            },
            {
              "from": "ExaFindSimilarBlock.Input_10",
              "to": "ExaFindSimilarBlock.Input_11"
            },
            {
              "from": "ExaFindSimilarBlock.Input_11",
              "to": "ExaFindSimilarBlock.Input_12"
            }
          ]
        }
      },
      {
        "decl_name": "ExaFindSimilarBlock.Output",
        "start_line": 64,
        "end_line": 68,
        "children": [],
        "code": "    class Output(BlockSchema):\n        results: List[Any] = SchemaField(\n            description=\"List of similar documents with title, URL, published date, author, and score\",\n            default=[],\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExaFindSimilarBlock.Output_1",
              "code": "class Output(BlockSchema):\n        results: List[Any] = SchemaField(\n            description=\"List of similar documents with title, URL, published date, author, and score\",\n            default=[],\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "ExaFindSimilarBlock.__init__",
        "start_line": 70,
        "end_line": 77,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\",\n            description=\"Finds similar links using Exa's findSimilar API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaFindSimilarBlock.Input,\n            output_schema=ExaFindSimilarBlock.Output,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExaFindSimilarBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"5e7315d1-af61-4a0c-9350-7c868fa7438a\",\n            description=\"Finds similar links using Exa's findSimilar API\",\n            categories={BlockCategory.SEARCH},\n            input_schema=ExaFindSimilarBlock.Input,\n            output_schema=ExaFindSimilarBlock.Output,\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "ExaFindSimilarBlock.run",
        "start_line": 79,
        "end_line": 127,
        "children": [],
        "code": "    def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n        url = \"https://api.exa.ai/findSimilar\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n\n        payload = {\n            \"url\": input_data.url,\n            \"numResults\": input_data.number_of_results,\n            \"contents\": input_data.contents.dict(),\n        }\n\n        optional_field_mapping = {\n            \"include_domains\": \"includeDomains\",\n            \"exclude_domains\": \"excludeDomains\",\n            \"include_text\": \"includeText\",\n            \"exclude_text\": \"excludeText\",\n        }\n\n        # Add optional fields if they have values\n        for input_field, api_field in optional_field_mapping.items():\n            value = getattr(input_data, input_field)\n            if value:  # Only add non-empty values\n                payload[api_field] = value\n\n        date_field_mapping = {\n            \"start_crawl_date\": \"startCrawlDate\",\n            \"end_crawl_date\": \"endCrawlDate\",\n            \"start_published_date\": \"startPublishedDate\",\n            \"end_published_date\": \"endPublishedDate\",\n        }\n\n        # Add dates if they exist\n        for input_field, api_field in date_field_mapping.items():\n            value = getattr(input_data, input_field, None)\n            if value:\n                payload[api_field] = value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\")\n\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])\n        except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []\n",
        "cfg": {
          "nodes": [
            {
              "id": "ExaFindSimilarBlock.run_1",
              "code": "def run(\n        self, input_data: Input, *, credentials: ExaCredentials, **kwargs\n    ) -> BlockOutput:\n"
            },
            {
              "id": "ExaFindSimilarBlock.run_2",
              "code": "        url = \"https://api.exa.ai/findSimilar\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"x-api-key\": credentials.api_key.get_secret_value(),\n        }\n"
            },
            {
              "id": "ExaFindSimilarBlock.run_3",
              "code": "        payload = {\n            \"url\": input_data.url,\n            \"numResults\": input_data.number_of_results,\n            \"contents\": input_data.contents.dict(),\n        }\n"
            },
            {
              "id": "ExaFindSimilarBlock.run_4",
              "code": "        optional_field_mapping = {\n            \"include_domains\": \"includeDomains\",\n            \"exclude_domains\": \"excludeDomains\",\n            \"include_text\": \"includeText\",\n            \"exclude_text\": \"excludeText\",\n        }\n"
            },
            {
              "id": "ExaFindSimilarBlock.run_5",
              "code": "        for input_field, api_field in optional_field_mapping.items():\n            value = getattr(input_data, input_field)\n            if value:  # Only add non-empty values\n                payload[api_field] = value\n"
            },
            {
              "id": "ExaFindSimilarBlock.run_6",
              "code": "        date_field_mapping = {\n            \"start_crawl_date\": \"startCrawlDate\",\n            \"end_crawl_date\": \"endCrawlDate\",\n            \"start_published_date\": \"startPublishedDate\",\n            \"end_published_date\": \"endPublishedDate\",\n        }\n"
            },
            {
              "id": "ExaFindSimilarBlock.run_7",
              "code": "        for input_field, api_field in date_field_mapping.items():\n            value = getattr(input_data, input_field, None)\n            if value:\n                payload[api_field] = value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\")\n"
            },
            {
              "id": "ExaFindSimilarBlock.run_8",
              "code": "        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield \"results\", data.get(\"results\", [])\n"
            },
            {
              "id": "ExaFindSimilarBlock.run_9",
              "code": "        except Exception as e:\n            yield \"error\", str(e)\n            yield \"results\", []\n"
            }
          ],
          "edges": [
            {
              "from": "ExaFindSimilarBlock.run_1",
              "to": "ExaFindSimilarBlock.run_2"
            },
            {
              "from": "ExaFindSimilarBlock.run_2",
              "to": "ExaFindSimilarBlock.run_3"
            },
            {
              "from": "ExaFindSimilarBlock.run_3",
              "to": "ExaFindSimilarBlock.run_4"
            },
            {
              "from": "ExaFindSimilarBlock.run_4",
              "to": "ExaFindSimilarBlock.run_5"
            },
            {
              "from": "ExaFindSimilarBlock.run_5",
              "to": "ExaFindSimilarBlock.run_6"
            },
            {
              "from": "ExaFindSimilarBlock.run_6",
              "to": "ExaFindSimilarBlock.run_7"
            },
            {
              "from": "ExaFindSimilarBlock.run_7",
              "to": "ExaFindSimilarBlock.run_8"
            },
            {
              "from": "ExaFindSimilarBlock.run_8",
              "to": "ExaFindSimilarBlock.run_9"
            }
          ]
        }
      }
    ],
    "code": "class ExaFindSimilarBlock(Block):\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "ExaFindSimilarBlock_1",
          "code": "class ExaFindSimilarBlock(Block):\n"
        }
      ],
      "edges": []
    }
  }
]