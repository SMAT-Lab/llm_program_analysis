[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 8,
    "children": [],
    "code": "from backend.blocks.hubspot._auth import (\n    HubSpotCredentials,\n    HubSpotCredentialsField,\n    HubSpotCredentialsInput,\n)\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from backend.blocks.hubspot._auth import (\n    HubSpotCredentials,\n    HubSpotCredentialsField,\n    HubSpotCredentialsInput,\n)\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.model import SchemaField\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "from backend.util.request import requests\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        }
      ]
    }
  },
  {
    "decl_name": "HubSpotContactBlock",
    "start_line": 10,
    "end_line": 106,
    "children": [
      {
        "decl_name": "HubSpotContactBlock.Input",
        "start_line": 11,
        "end_line": 21,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n        operation: str = SchemaField(\n            description=\"Operation to perform (create, update, get)\", default=\"get\"\n        )\n        contact_data: dict = SchemaField(\n            description=\"Contact data for create/update operations\", default={}\n        )\n        email: str = SchemaField(\n            description=\"Email address for get/update operations\", default=\"\"\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "HubSpotContactBlock.Input_1",
              "code": "class Input(BlockSchema):\n        credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n"
            },
            {
              "id": "HubSpotContactBlock.Input_2",
              "code": "        operation: str = SchemaField(\n            description=\"Operation to perform (create, update, get)\", default=\"get\"\n        )\n"
            },
            {
              "id": "HubSpotContactBlock.Input_3",
              "code": "        contact_data: dict = SchemaField(\n            description=\"Contact data for create/update operations\", default={}\n        )\n"
            },
            {
              "id": "HubSpotContactBlock.Input_4",
              "code": "        email: str = SchemaField(\n            description=\"Email address for get/update operations\", default=\"\"\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "HubSpotContactBlock.Input_1",
              "to": "HubSpotContactBlock.Input_2"
            },
            {
              "from": "HubSpotContactBlock.Input_2",
              "to": "HubSpotContactBlock.Input_3"
            },
            {
              "from": "HubSpotContactBlock.Input_3",
              "to": "HubSpotContactBlock.Input_4"
            }
          ]
        }
      },
      {
        "decl_name": "HubSpotContactBlock.Output",
        "start_line": 23,
        "end_line": 25,
        "children": [],
        "code": "    class Output(BlockSchema):\n        contact: dict = SchemaField(description=\"Contact information\")\n        status: str = SchemaField(description=\"Operation status\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "HubSpotContactBlock.Output_1",
              "code": "class Output(BlockSchema):\n        contact: dict = SchemaField(description=\"Contact information\")\n        status: str = SchemaField(description=\"Operation status\")\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "HubSpotContactBlock.__init__",
        "start_line": 27,
        "end_line": 34,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"5267326e-c4c1-4016-9f54-4e72ad02f813\",\n            description=\"Manages HubSpot contacts - create, update, and retrieve contact information\",\n            categories={BlockCategory.CRM},\n            input_schema=HubSpotContactBlock.Input,\n            output_schema=HubSpotContactBlock.Output,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "HubSpotContactBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"5267326e-c4c1-4016-9f54-4e72ad02f813\",\n            description=\"Manages HubSpot contacts - create, update, and retrieve contact information\",\n            categories={BlockCategory.CRM},\n            input_schema=HubSpotContactBlock.Input,\n            output_schema=HubSpotContactBlock.Output,\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "HubSpotContactBlock.run",
        "start_line": 36,
        "end_line": 105,
        "children": [],
        "code": "    def run(\n        self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs\n    ) -> BlockOutput:\n        base_url = \"https://api.hubapi.com/crm/v3/objects/contacts\"\n        headers = {\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n        }\n\n        if input_data.operation == \"create\":\n            response = requests.post(\n                base_url, headers=headers, json={\"properties\": input_data.contact_data}\n            )\n            result = response.json()\n            yield \"contact\", result\n            yield \"status\", \"created\"\n\n        elif input_data.operation == \"get\":\n            # Search for contact by email\n            search_url = f\"{base_url}/search\"\n            search_data = {\n                \"filterGroups\": [\n                    {\n                        \"filters\": [\n                            {\n                                \"propertyName\": \"email\",\n                                \"operator\": \"EQ\",\n                                \"value\": input_data.email,\n                            }\n                        ]\n                    }\n                ]\n            }\n            response = requests.post(search_url, headers=headers, json=search_data)\n            result = response.json()\n            yield \"contact\", result.get(\"results\", [{}])[0]\n            yield \"status\", \"retrieved\"\n\n        elif input_data.operation == \"update\":\n            search_response = requests.post(\n                f\"{base_url}/search\",\n                headers=headers,\n                json={\n                    \"filterGroups\": [\n                        {\n                            \"filters\": [\n                                {\n                                    \"propertyName\": \"email\",\n                                    \"operator\": \"EQ\",\n                                    \"value\": input_data.email,\n                                }\n                            ]\n                        }\n                    ]\n                },\n            )\n            contact_id = search_response.json().get(\"results\", [{}])[0].get(\"id\")\n\n            if contact_id:\n                response = requests.patch(\n                    f\"{base_url}/{contact_id}\",\n                    headers=headers,\n                    json={\"properties\": input_data.contact_data},\n                )\n                result = response.json()\n                yield \"contact\", result\n                yield \"status\", \"updated\"\n            else:\n                yield \"contact\", {}\n                yield \"status\", \"contact_not_found\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "HubSpotContactBlock.run_1",
              "code": "def run(\n        self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs\n    ) -> BlockOutput:\n"
            },
            {
              "id": "HubSpotContactBlock.run_2",
              "code": "        base_url = \"https://api.hubapi.com/crm/v3/objects/contacts\"\n        headers = {\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n        }\n"
            },
            {
              "id": "HubSpotContactBlock.run_3",
              "code": "        if input_data.operation == \"create\":\n            response = requests.post(\n                base_url, headers=headers, json={\"properties\": input_data.contact_data}\n            )\n            result = response.json()\n            yield \"contact\", result\n            yield \"status\", \"created\"\n\n"
            },
            {
              "id": "HubSpotContactBlock.run_4",
              "code": "        elif input_data.operation == \"get\":\n            # Search for contact by email\n            search_url = f\"{base_url}/search\"\n            search_data = {\n                \"filterGroups\": [\n                    {\n                        \"filters\": [\n                            {\n                                \"propertyName\": \"email\",\n                                \"operator\": \"EQ\",\n                                \"value\": input_data.email,\n                            }\n                        ]\n                    }\n                ]\n            }\n            response = requests.post(search_url, headers=headers, json=search_data)\n            result = response.json()\n            yield \"contact\", result.get(\"results\", [{}])[0]\n            yield \"status\", \"retrieved\"\n\n"
            },
            {
              "id": "HubSpotContactBlock.run_5",
              "code": "        elif input_data.operation == \"update\":\n            search_response = requests.post(\n                f\"{base_url}/search\",\n                headers=headers,\n                json={\n                    \"filterGroups\": [\n                        {\n                            \"filters\": [\n                                {\n                                    \"propertyName\": \"email\",\n                                    \"operator\": \"EQ\",\n                                    \"value\": input_data.email,\n                                }\n                            ]\n                        }\n                    ]\n                },\n            )\n            contact_id = search_response.json().get(\"results\", [{}])[0].get(\"id\")\n\n"
            },
            {
              "id": "HubSpotContactBlock.run_6",
              "code": "            if contact_id:\n                response = requests.patch(\n                    f\"{base_url}/{contact_id}\",\n                    headers=headers,\n                    json={\"properties\": input_data.contact_data},\n                )\n                result = response.json()\n                yield \"contact\", result\n                yield \"status\", \"updated\"\n"
            },
            {
              "id": "HubSpotContactBlock.run_7",
              "code": "            else:\n                yield \"contact\", {}\n                yield \"status\", \"contact_not_found\"\n"
            }
          ],
          "edges": [
            {
              "from": "HubSpotContactBlock.run_1",
              "to": "HubSpotContactBlock.run_2"
            },
            {
              "from": "HubSpotContactBlock.run_2",
              "to": "HubSpotContactBlock.run_3"
            },
            {
              "from": "HubSpotContactBlock.run_2",
              "to": "HubSpotContactBlock.run_4"
            },
            {
              "from": "HubSpotContactBlock.run_2",
              "to": "HubSpotContactBlock.run_5"
            },
            {
              "from": "HubSpotContactBlock.run_5",
              "to": "HubSpotContactBlock.run_6"
            },
            {
              "from": "HubSpotContactBlock.run_5",
              "to": "HubSpotContactBlock.run_7"
            }
          ]
        }
      }
    ],
    "code": "class HubSpotContactBlock(Block):\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "HubSpotContactBlock_1",
          "code": "class HubSpotContactBlock(Block):\n"
        }
      ],
      "edges": []
    }
  }
]