{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 323,
  "functions": [],
  "classes": [
    {
      "name": "AudioTrack",
      "type": "class",
      "start_line": 33,
      "end_line": 81,
      "functions": [
        {
          "name": "audio_url",
          "type": "function",
          "start_line": 57,
          "end_line": 81,
          "functions": [],
          "classes": [],
          "simplified_code": "    def audio_url(self):\n        audio_urls = {\n            AudioTrack.OBSERVER: \"https://cdn.tfrv.xyz/audio/observer.mp3\",\n            AudioTrack.FUTURISTIC_BEAT: \"https://cdn.tfrv.xyz/audio/_futuristic-beat.mp3\",\n            AudioTrack.SCIENCE_DOCUMENTARY: \"https://cdn.tfrv.xyz/audio/_science-documentary.mp3\",\n            AudioTrack.HOTLINE: \"https://cdn.tfrv.xyz/audio/_hotline.mp3\",\n            AudioTrack.BLADERUNNER_2049: \"https://cdn.tfrv.xyz/audio/_bladerunner-2049.mp3\",\n            AudioTrack.A_FUTURE: \"https://cdn.tfrv.xyz/audio/a-future.mp3\",\n            AudioTrack.ELYSIAN_EMBERS: \"https://cdn.tfrv.xyz/audio/elysian-embers.mp3\",\n            AudioTrack.INSPIRING_CINEMATIC: \"https://cdn.tfrv.xyz/audio/inspiring-cinematic-ambient.mp3\",\n            AudioTrack.BLADERUNNER_REMIX: \"https://cdn.tfrv.xyz/audio/bladerunner-remix.mp3\",\n            AudioTrack.IZZAMUZZIC: \"https://cdn.tfrv.xyz/audio/_izzamuzzic.mp3\",\n            AudioTrack.NAS: \"https://cdn.tfrv.xyz/audio/_nas.mp3\",\n            AudioTrack.PARIS_ELSE: \"https://cdn.tfrv.xyz/audio/_paris-else.mp3\",\n            AudioTrack.SNOWFALL: \"https://cdn.tfrv.xyz/audio/_snowfall.mp3\",\n            AudioTrack.BURLESQUE: \"https://cdn.tfrv.xyz/audio/burlesque.mp3\",\n            AudioTrack.CORNY_CANDY: \"https://cdn.tfrv.xyz/audio/corny-candy.mp3\",\n            AudioTrack.HIGHWAY_NOCTURNE: \"https://cdn.tfrv.xyz/audio/highway-nocturne.mp3\",\n            AudioTrack.I_DONT_THINK_SO: \"https://cdn.tfrv.xyz/audio/i-dont-think-so.mp3\",\n            AudioTrack.LOSING_YOUR_MARBLES: \"https://cdn.tfrv.xyz/audio/losing-your-marbles.mp3\",\n            AudioTrack.REFRESHER: \"https://cdn.tfrv.xyz/audio/refresher.mp3\",\n            AudioTrack.TOURIST: \"https://cdn.tfrv.xyz/audio/tourist.mp3\",\n            AudioTrack.TWIN_TYCHES: \"https://cdn.tfrv.xyz/audio/twin-tynches.mp3\",\n        }\n        return audio_urls[self]",
          "blocks": [
            {
              "id": 1,
              "label": "def audio_url(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "audio_urls = {\n    AudioTrack.OBSERVER: \"https://cdn.tfrv.xyz/audio/observer.mp3\",\n    AudioTrack.FUTURISTIC_BEAT: \"https://cdn.tfrv.xyz/audio/_futuristic-beat.mp3\",\n    AudioTrack.SCIENCE_DOCUMENTARY: \"https://cdn.tfrv.xyz/audio/_science-documentary.mp3\",\n    AudioTrack.HOTLINE: \"https://cdn.tfrv.xyz/audio/_hotline.mp3\",\n    AudioTrack.BLADERUNNER_2049: \"https://cdn.tfrv.xyz/audio/_bladerunner-2049.mp3\",\n    AudioTrack.A_FUTURE: \"https://cdn.tfrv.xyz/audio/a-future.mp3\",\n    AudioTrack.ELYSIAN_EMBERS: \"https://cdn.tfrv.xyz/audio/elysian-embers.mp3\",\n    AudioTrack.INSPIRING_CINEMATIC: \"https://cdn.tfrv.xyz/audio/inspiring-cinematic-ambient.mp3\",\n    AudioTrack.BLADERUNNER_REMIX: \"https://cdn.tfrv.xyz/audio/bladerunner-remix.mp3\",\n    AudioTrack.IZZAMUZZIC: \"https://cdn.tfrv.xyz/audio/_izzamuzzic.mp3\",\n    AudioTrack.NAS: \"https://cdn.tfrv.xyz/audio/_nas.mp3\",\n    AudioTrack.PARIS_ELSE: \"https://cdn.tfrv.xyz/audio/_paris-else.mp3\",\n    AudioTrack.SNOWFALL: \"https://cdn.tfrv.xyz/audio/_snowfall.mp3\",\n    AudioTrack.BURLESQUE: \"https://cdn.tfrv.xyz/audio/burlesque.mp3\",\n    AudioTrack.CORNY_CANDY: \"https://cdn.tfrv.xyz/audio/corny-candy.mp3\",\n    AudioTrack.HIGHWAY_NOCTURNE: \"https://cdn.tfrv.xyz/audio/highway-nocturne.mp3\",\n    AudioTrack.I_DONT_THINK_SO: \"https://cdn.tfrv.xyz/audio/i-dont-think-so.mp3\",\n    AudioTrack.LOSING_YOUR_MARBLES: \"https://cdn.tfrv.xyz/audio/losing-your-marbles.mp3\",\n    AudioTrack.REFRESHER: \"https://cdn.tfrv.xyz/audio/refresher.mp3\",\n    AudioTrack.TOURIST: \"https://cdn.tfrv.xyz/audio/tourist.mp3\",\n    AudioTrack.TWIN_TYCHES: \"https://cdn.tfrv.xyz/audio/twin-tynches.mp3\",\n}",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return audio_urls[self]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class AudioTrack(str, Enum):\n    OBSERVER = (\"Observer\",)\n    FUTURISTIC_BEAT = (\"Futuristic Beat\",)\n    SCIENCE_DOCUMENTARY = (\"Science Documentary\",)\n    HOTLINE = (\"Hotline\",)\n    BLADERUNNER_2049 = (\"Bladerunner 2049\",)\n    A_FUTURE = (\"A Future\",)\n    ELYSIAN_EMBERS = (\"Elysian Embers\",)\n    INSPIRING_CINEMATIC = (\"Inspiring Cinematic\",)\n    BLADERUNNER_REMIX = (\"Bladerunner Remix\",)\n    IZZAMUZZIC = (\"Izzamuzzic\",)\n    NAS = (\"Nas\",)\n    PARIS_ELSE = (\"Paris - Else\",)\n    SNOWFALL = (\"Snowfall\",)\n    BURLESQUE = (\"Burlesque\",)\n    CORNY_CANDY = (\"Corny Candy\",)\n    HIGHWAY_NOCTURNE = (\"Highway Nocturne\",)\n    I_DONT_THINK_SO = (\"I Don't Think So\",)\n    LOSING_YOUR_MARBLES = (\"Losing Your Marbles\",)\n    REFRESHER = (\"Refresher\",)\n    TOURIST = (\"Tourist\",)\n    TWIN_TYCHES = (\"Twin Tyches\",)\n\n    @property\n        return audio_urls[self]",
      "blocks": [
        {
          "id": 1,
          "label": "class AudioTrack(str, Enum):",
          "successors": [
            {
              "id": 2,
              "label": "OBSERVER = (\"Observer\",)",
              "successors": [
                {
                  "id": 3,
                  "label": "FUTURISTIC_BEAT = (\"Futuristic Beat\",)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "SCIENCE_DOCUMENTARY = (\"Science Documentary\",)",
                      "successors": [
                        {
                          "id": 5,
                          "label": "HOTLINE = (\"Hotline\",)",
                          "successors": [
                            {
                              "id": 6,
                              "label": "BLADERUNNER_2049 = (\"Bladerunner 2049\",)",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "A_FUTURE = (\"A Future\",)",
                                  "successors": [
                                    {
                                      "id": 8,
                                      "label": "ELYSIAN_EMBERS = (\"Elysian Embers\",)",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "INSPIRING_CINEMATIC = (\"Inspiring Cinematic\",)",
                                          "successors": [
                                            {
                                              "id": 10,
                                              "label": "BLADERUNNER_REMIX = (\"Bladerunner Remix\",)",
                                              "successors": [
                                                {
                                                  "id": 11,
                                                  "label": "IZZAMUZZIC = (\"Izzamuzzic\",)",
                                                  "successors": [
                                                    {
                                                      "id": 12,
                                                      "label": "NAS = (\"Nas\",)",
                                                      "successors": [
                                                        {
                                                          "id": 13,
                                                          "label": "PARIS_ELSE = (\"Paris - Else\",)",
                                                          "successors": [
                                                            {
                                                              "id": 14,
                                                              "label": "SNOWFALL = (\"Snowfall\",)",
                                                              "successors": [
                                                                {
                                                                  "id": 15,
                                                                  "label": "BURLESQUE = (\"Burlesque\",)",
                                                                  "successors": [
                                                                    {
                                                                      "id": 16,
                                                                      "label": "CORNY_CANDY = (\"Corny Candy\",)",
                                                                      "successors": [
                                                                        {
                                                                          "id": 17,
                                                                          "label": "HIGHWAY_NOCTURNE = (\"Highway Nocturne\",)",
                                                                          "successors": [
                                                                            {
                                                                              "id": 18,
                                                                              "label": "I_DONT_THINK_SO = (\"I Don't Think So\",)",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 19,
                                                                                  "label": "LOSING_YOUR_MARBLES = (\"Losing Your Marbles\",)",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 20,
                                                                                      "label": "REFRESHER = (\"Refresher\",)",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 21,
                                                                                          "label": "TOURIST = (\"Tourist\",)",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 22,
                                                                                              "label": "TWIN_TYCHES = (\"Twin Tyches\",)",
                                                                                              "successors": [
                                                                                                {
                                                                                                  "id": 23,
                                                                                                  "label": "@property",
                                                                                                  "successors": [
                                                                                                    {
                                                                                                      "id": 24,
                                                                                                      "label": "return audio_urls[self]",
                                                                                                      "successors": []
                                                                                                    }
                                                                                                  ]
                                                                                                }
                                                                                              ]
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GenerationPreset",
      "type": "class",
      "start_line": 84,
      "end_line": 106,
      "functions": [],
      "classes": [],
      "simplified_code": "class GenerationPreset(str, Enum):\n    LEONARDO = (\"Default\",)\n    ANIME = (\"Anime\",)\n    REALISM = (\"Realist\",)\n    ILLUSTRATION = (\"Illustration\",)\n    SKETCH_COLOR = (\"Sketch Color\",)\n    SKETCH_BW = (\"Sketch B&W\",)\n    PIXAR = (\"Pixar\",)\n    INK = (\"Japanese Ink\",)\n    RENDER_3D = (\"3D Render\",)\n    LEGO = (\"Lego\",)\n    SCIFI = (\"Sci-Fi\",)\n    RECRO_CARTOON = (\"Retro Cartoon\",)\n    PIXEL_ART = (\"Pixel Art\",)\n    CREATIVE = (\"Creative\",)\n    PHOTOGRAPHY = (\"Photography\",)\n    RAYTRACED = (\"Raytraced\",)\n    ENVIRONMENT = (\"Environment\",)\n    FANTASY = (\"Fantasy\",)\n    ANIME_SR = (\"Anime Realism\",)\n    MOVIE = (\"Movie\",)\n    STYLIZED_ILLUSTRATION = (\"Stylized Illustration\",)\n    MANGA = (\"Manga\",)",
      "blocks": [
        {
          "id": 1,
          "label": "class GenerationPreset(str, Enum):",
          "successors": [
            {
              "id": 2,
              "label": "    LEONARDO = (\"Default\",)\n    ANIME = (\"Anime\",)\n    REALISM = (\"Realist\",)\n    ILLUSTRATION = (\"Illustration\",)\n    SKETCH_COLOR = (\"Sketch Color\",)\n    SKETCH_BW = (\"Sketch B&W\",)\n    PIXAR = (\"Pixar\",)\n    INK = (\"Japanese Ink\",)\n    RENDER_3D = (\"3D Render\",)\n    LEGO = (\"Lego\",)\n    SCIFI = (\"Sci-Fi\",)\n    RECRO_CARTOON = (\"Retro Cartoon\",)\n    PIXEL_ART = (\"Pixel Art\",)\n    CREATIVE = (\"Creative\",)\n    PHOTOGRAPHY = (\"Photography\",)\n    RAYTRACED = (\"Raytraced\",)\n    ENVIRONMENT = (\"Environment\",)\n    FANTASY = (\"Fantasy\",)\n    ANIME_SR = (\"Anime Realism\",)\n    MOVIE = (\"Movie\",)\n    STYLIZED_ILLUSTRATION = (\"Stylized Illustration\",)\n    MANGA = (\"Manga\",)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "Voice",
      "type": "class",
      "start_line": 109,
      "end_line": 130,
      "functions": [
        {
          "name": "voice_id",
          "type": "function",
          "start_line": 118,
          "end_line": 127,
          "functions": [],
          "classes": [],
          "simplified_code": "    def voice_id(self):\n        voice_id_map = {\n            Voice.LILY: \"pFZP5JQG7iQjIQuC4Bku\",\n            Voice.DANIEL: \"onwK4e9ZLuTAKqWW03F9\",\n            Voice.BRIAN: \"nPczCjzI2devNBz1zQrb\",\n            Voice.JESSICA: \"cgSgspJ2msm6clMCkdW9\",\n            Voice.CHARLOTTE: \"XB0fDUnXU5powFXDhCwa\",\n            Voice.CALLUM: \"N2lVS1w4EtoT3dr4eOWO\",\n        }\n        return voice_id_map[self]",
          "blocks": [
            {
              "id": 1,
              "label": "def voice_id(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "voice_id_map = {\n    Voice.LILY: \"pFZP5JQG7iQjIQuC4Bku\",\n    Voice.DANIEL: \"onwK4e9ZLuTAKqWW03F9\",\n    Voice.BRIAN: \"nPczCjzI2devNBz1zQrb\",\n    Voice.JESSICA: \"cgSgspJ2msm6clMCkdW9\",\n    Voice.CHARLOTTE: \"XB0fDUnXU5powFXDhCwa\",\n    Voice.CALLUM: \"N2lVS1w4EtoT3dr4eOWO\",\n}",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return voice_id_map[self]",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "__str__",
          "type": "function",
          "start_line": 129,
          "end_line": 130,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __str__(self):\n        return self.value",
          "blocks": [
            {
              "id": 1,
              "label": "def __str__(self):\n    return self.value",
              "successors": []
            }
          ]
        }
      ],
      "simplified_code": "class Voice(str, Enum):\n    LILY = \"Lily\"\n    DANIEL = \"Daniel\"\n    BRIAN = \"Brian\"\n    JESSICA = \"Jessica\"\n    CHARLOTTE = \"Charlotte\"\n    CALLUM = \"Callum\"\n\n    @property\n        return voice_id_map[self]\n\n        return self.value",
      "blocks": [
        {
          "id": 1,
          "label": "class Voice(str, Enum):",
          "successors": [
            {
              "id": 2,
              "label": "LILY = \"Lily\"\nDANIEL = \"Daniel\"\nBRIAN = \"Brian\"\nJESSICA = \"Jessica\"\nCHARLOTTE = \"Charlotte\"\nCALLUM = \"Callum\"",
              "successors": [
                {
                  "id": 3,
                  "label": "@property",
                  "successors": [
                    {
                      "id": 4,
                      "label": "def id(self):",
                      "successors": [
                        {
                          "id": 5,
                          "label": "return voice_id_map[self]",
                          "successors": [
                            {
                              "id": 6,
                              "label": "return self.value",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "VisualMediaType",
      "type": "class",
      "start_line": 133,
      "end_line": 136,
      "functions": [],
      "classes": [],
      "simplified_code": "class VisualMediaType(str, Enum):\n    STOCK_VIDEOS = (\"stockVideo\",)\n    MOVING_AI_IMAGES = (\"movingImage\",)\n    AI_VIDEO = (\"aiVideo\",)",
      "blocks": [
        {
          "id": 1,
          "label": "class VisualMediaType(str, Enum):",
          "successors": [
            {
              "id": 2,
              "label": "    STOCK_VIDEOS = (\"stockVideo\",)",
              "successors": []
            },
            {
              "id": 3,
              "label": "    MOVING_AI_IMAGES = (\"movingImage\",)",
              "successors": []
            },
            {
              "id": 4,
              "label": "    AI_VIDEO = (\"aiVideo\",)",
              "successors": []
            }
          ]
        }
      ]
    },
    {
      "name": "AIShortformVideoCreatorBlock",
      "type": "class",
      "start_line": 142,
      "end_line": 323,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 186,
          "end_line": 217,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"361697fb-0c4f-4feb-aed3-8320c88c771b\",\n            description=\"Creates a shortform video using revid.ai\",\n            categories={BlockCategory.SOCIAL, BlockCategory.AI},\n            input_schema=AIShortformVideoCreatorBlock.Input,\n            output_schema=AIShortformVideoCreatorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"script\": \"[close-up of a cat] Meow!\",\n                \"ratio\": \"9 / 16\",\n                \"resolution\": \"720p\",\n                \"frame_rate\": 60,\n                \"generation_preset\": GenerationPreset.LEONARDO,\n                \"background_music\": AudioTrack.HIGHWAY_NOCTURNE,\n                \"voice\": Voice.LILY,\n                \"video_style\": VisualMediaType.STOCK_VIDEOS,\n            },\n            test_output=(\n                \"video_url\",\n                \"https://example.com/video.mp4\",\n            ),\n            test_mock={\n                \"create_webhook\": lambda: (\n                    \"test_uuid\",\n                    \"https://webhook.site/test_uuid\",\n                ),\n                \"create_video\": lambda api_key, payload: {\"pid\": \"test_pid\"},\n                \"wait_for_video\": lambda api_key, pid, webhook_token, max_wait_time=1000: \"https://example.com/video.mp4\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "super().__init__(\n    id=\"361697fb-0c4f-4feb-aed3-8320c88c771b\",\n    description=\"Creates a shortform video using revid.ai\",\n    categories={BlockCategory.SOCIAL, BlockCategory.AI},\n    input_schema=AIShortformVideoCreatorBlock.Input,\n    output_schema=AIShortformVideoCreatorBlock.Output,\n    test_input={\n        \"credentials\": TEST_CREDENTIALS_INPUT,\n        \"script\": \"[close-up of a cat] Meow!\",\n        \"ratio\": \"9 / 16\",\n        \"resolution\": \"720p\",\n        \"frame_rate\": 60,\n        \"generation_preset\": GenerationPreset.LEONARDO,\n        \"background_music\": AudioTrack.HIGHWAY_NOCTURNE,\n        \"voice\": Voice.LILY,\n        \"video_style\": VisualMediaType.STOCK_VIDEOS,\n    },\n    test_output=(\n        \"video_url\",\n        \"https://example.com/video.mp4\",\n    ),\n    test_mock={\n        \"create_webhook\": lambda: (\n            \"test_uuid\",\n            \"https://webhook.site/test_uuid\",\n        ),\n        \"create_video\": lambda api_key, payload: {\"pid\": \"test_pid\"},\n        \"wait_for_video\": lambda api_key, pid, webhook_token, max_wait_time=1000: \"https://example.com/video.mp4\",\n    },\n    test_credentials=TEST_CREDENTIALS,\n)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "create_webhook",
          "type": "function",
          "start_line": 219,
          "end_line": 224,
          "functions": [],
          "classes": [],
          "simplified_code": "    def create_webhook(self):\n        url = \"https://webhook.site/token\"\n        headers = {\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"}\n        response = requests.post(url, headers=headers)\n        webhook_data = response.json()\n        return webhook_data[\"uuid\"], f\"https://webhook.site/{webhook_data['uuid']}\"",
          "blocks": [
            {
              "id": 1,
              "label": "def create_webhook(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "url = \"https://webhook.site/token\"\nheaders = {\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"}\nresponse = requests.post(url, headers=headers)\nwebhook_data = response.json()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return webhook_data[\"uuid\"], f\"https://webhook.site/{webhook_data['uuid']}\"",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "create_video",
          "type": "function",
          "start_line": 226,
          "end_line": 233,
          "functions": [],
          "classes": [],
          "simplified_code": "    def create_video(self, api_key: SecretStr, payload: dict) -> dict:\n        url = \"https://www.revid.ai/api/public/v2/render\"\n        headers = {\"key\": api_key.get_secret_value()}\n        response = requests.post(url, json=payload, headers=headers)\n        logger.debug(\n            f\"API Response Status Code: {response.status_code}, Content: {response.text}\"\n        )\n        return response.json()",
          "blocks": [
            {
              "id": 1,
              "label": "def create_video(self, api_key: SecretStr, payload: dict) -> dict:",
              "successors": [
                {
                  "id": 2,
                  "label": "url = \"https://www.revid.ai/api/public/v2/render\"\nheaders = {\"key\": api_key.get_secret_value()}\nresponse = requests.post(url, json=payload, headers=headers)\nlogger.debug(\n    f\"API Response Status Code: {response.status_code}, Content: {response.text}\"\n)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "return response.json()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "check_video_status",
          "type": "function",
          "start_line": 235,
          "end_line": 239,
          "functions": [],
          "classes": [],
          "simplified_code": "    def check_video_status(self, api_key: SecretStr, pid: str) -> dict:\n        url = f\"https://www.revid.ai/api/public/v2/status?pid={pid}\"\n        headers = {\"key\": api_key.get_secret_value()}\n        response = requests.get(url, headers=headers)\n        return response.json()",
          "blocks": [
            {
              "id": 1,
              "label": "def check_video_status(self, api_key: SecretStr, pid: str) -> dict:",
              "successors": [
                {
                  "id": 2,
                  "label": "    url = f\"https://www.revid.ai/api/public/v2/status?pid={pid}\"",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    headers = {\"key\": api_key.get_secret_value()}",
                      "successors": [
                        {
                          "id": 4,
                          "label": "    response = requests.get(url, headers=headers)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "    return response.json()",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "wait_for_video",
          "type": "function",
          "start_line": 241,
          "end_line": 266,
          "functions": [],
          "classes": [],
          "simplified_code": "    def wait_for_video(\n        self,\n        api_key: SecretStr,\n        pid: str,\n        webhook_token: str,\n        max_wait_time: int = 1000,\n    ) -> str:\n        start_time = time.time()\n        while time.time() - start_time < max_wait_time:\n            status = self.check_video_status(api_key, pid)\n            logger.debug(f\"Video status: {status}\")\n\n            if status.get(\"status\") == \"ready\" and \"videoUrl\" in status:\n                return status[\"videoUrl\"]\n            elif status.get(\"status\") == \"error\":\n                error_message = status.get(\"error\", \"Unknown error occurred\")\n                logger.error(f\"Video creation failed: {error_message}\")\n                raise ValueError(f\"Video creation failed: {error_message}\")\n            elif status.get(\"status\") in [\"FAILED\", \"CANCELED\"]:\n                logger.error(f\"Video creation failed: {status.get('message')}\")\n                raise ValueError(f\"Video creation failed: {status.get('message')}\")\n\n            time.sleep(10)\n\n        logger.error(\"Video creation timed out\")\n        raise TimeoutError(\"Video creation timed out\")",
          "blocks": [
            {
              "id": 1,
              "label": "def wait_for_video( self, api_key: SecretStr, pid: str, webhook_token: str, max_wait_time: int = 1000, ) -> str:",
              "successors": [
                {
                  "id": 2,
                  "label": "start_time = time.time()",
                  "successors": [
                    {
                      "id": 3,
                      "label": "while time.time() - start_time < max_wait_time:",
                      "successors": [
                        {
                          "id": 4,
                          "label": "status = self.check_video_status(api_key, pid)\nlogger.debug(f\"Video status: {status}\")",
                          "successors": [
                            {
                              "id": 5,
                              "label": "if status.get(\"status\") == \"ready\" and \"videoUrl\" in status:",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "return status[\"videoUrl\"]",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 7,
                              "label": "elif status.get(\"status\") == \"error\":",
                              "successors": [
                                {
                                  "id": 8,
                                  "label": "error_message = status.get(\"error\", \"Unknown error occurred\")\nlogger.error(f\"Video creation failed: {error_message}\")\nraise ValueError(f\"Video creation failed: {error_message}\")",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "elif status.get(\"status\") in [\"FAILED\", \"CANCELED\"]:",
                              "successors": [
                                {
                                  "id": 10,
                                  "label": "logger.error(f\"Video creation failed: {status.get('message')}\")\nraise ValueError(f\"Video creation failed: {status.get('message')}\")",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 11,
                              "label": "time.sleep(10)",
                              "successors": [
                                {
                                  "id": 3,
                                  "label": "while time.time() - start_time < max_wait_time:",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 12,
                      "label": "logger.error(\"Video creation timed out\")\nraise TimeoutError(\"Video creation timed out\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 268,
          "end_line": 323,
          "functions": [],
          "classes": [],
          "simplified_code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        # Create a new Webhook.site URL\n        webhook_token, webhook_url = self.create_webhook()\n        logger.debug(f\"Webhook URL: {webhook_url}\")\n\n        audio_url = input_data.background_music.audio_url\n\n        payload = {\n            \"frameRate\": input_data.frame_rate,\n            \"resolution\": input_data.resolution,\n            \"frameDurationMultiplier\": 18,\n            \"webhook\": webhook_url,\n            \"creationParams\": {\n                \"mediaType\": input_data.video_style,\n                \"captionPresetName\": \"Wrap 1\",\n                \"selectedVoice\": input_data.voice.voice_id,\n                \"hasEnhancedGeneration\": True,\n                \"generationPreset\": input_data.generation_preset.name,\n                \"selectedAudio\": input_data.background_music,\n                \"origin\": \"/create\",\n                \"inputText\": input_data.script,\n                \"flowType\": \"text-to-video\",\n                \"slug\": \"create-tiktok-video\",\n                \"hasToGenerateVoice\": True,\n                \"hasToTranscript\": False,\n                \"hasToSearchMedia\": True,\n                \"hasAvatar\": False,\n                \"hasWebsiteRecorder\": False,\n                \"hasTextSmallAtBottom\": False,\n                \"ratio\": input_data.ratio,\n                \"sourceType\": \"contentScraping\",\n                \"selectedStoryStyle\": {\"value\": \"custom\", \"label\": \"Custom\"},\n                \"hasToGenerateVideos\": input_data.video_style\n                != VisualMediaType.STOCK_VIDEOS,\n                \"audioUrl\": audio_url,\n            },\n        }\n\n        logger.debug(\"Creating video...\")\n        response = self.create_video(credentials.api_key, payload)\n        pid = response.get(\"pid\")\n\n        if not pid:\n            logger.error(\n                f\"Failed to create video: No project ID returned. API Response: {response}\"\n            )\n            raise RuntimeError(\"Failed to create video: No project ID returned\")\n        else:\n            logger.debug(\n                f\"Video created with project ID: {pid}. Waiting for completion...\"\n            )\n            video_url = self.wait_for_video(credentials.api_key, pid, webhook_token)\n            logger.debug(f\"Video ready: {video_url}\")\n            yield \"video_url\", video_url",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    webhook_token, webhook_url = self.create_webhook()\n    logger.debug(f\"Webhook URL: {webhook_url}\")\n\n    audio_url = input_data.background_music.audio_url\n\n    payload = {\n        \"frameRate\": input_data.frame_rate,\n        \"resolution\": input_data.resolution,\n        \"frameDurationMultiplier\": 18,\n        \"webhook\": webhook_url,\n        \"creationParams\": {\n            \"mediaType\": input_data.video_style,\n            \"captionPresetName\": \"Wrap 1\",\n            \"selectedVoice\": input_data.voice.voice_id,\n            \"hasEnhancedGeneration\": True,\n            \"generationPreset\": input_data.generation_preset.name,\n            \"selectedAudio\": input_data.background_music,\n            \"origin\": \"/create\",\n            \"inputText\": input_data.script,\n            \"flowType\": \"text-to-video\",\n            \"slug\": \"create-tiktok-video\",\n            \"hasToGenerateVoice\": True,\n            \"hasToTranscript\": False,\n            \"hasToSearchMedia\": True,\n            \"hasAvatar\": False,\n            \"hasWebsiteRecorder\": False,\n            \"hasTextSmallAtBottom\": False,\n            \"ratio\": input_data.ratio,\n            \"sourceType\": \"contentScraping\",\n            \"selectedStoryStyle\": {\"value\": \"custom\", \"label\": \"Custom\"},\n            \"hasToGenerateVideos\": input_data.video_style != VisualMediaType.STOCK_VIDEOS,\n            \"audioUrl\": audio_url,\n        },\n    }\n\n    logger.debug(\"Creating video...\")\n    response = self.create_video(credentials.api_key, payload)\n    pid = response.get(\"pid\")",
              "successors": [
                {
                  "id": 2,
                  "label": "if not pid:",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    logger.error(f\"Failed to create video: No project ID returned. API Response: {response}\")\n    raise RuntimeError(\"Failed to create video: No project ID returned\")",
                      "successors": []
                    },
                    {
                      "id": 4,
                      "label": "else:\n    logger.debug(f\"Video created with project ID: {pid}. Waiting for completion...\")\n    video_url = self.wait_for_video(credentials.api_key, pid, webhook_token)\n    logger.debug(f\"Video ready: {video_url}\")\n    yield \"video_url\", video_url",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 143,
          "end_line": 180,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REVID], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The revid.ai integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        script: str = SchemaField(\n            description=\"\"\"1. Use short and punctuated sentences\\n\\n2. Use linebreaks to create a new clip\\n\\n3. Text outside of brackets is spoken by the AI, and [text between brackets] will be used to guide the visual generation. For example, [close-up of a cat] will show a close-up of a cat.\"\"\",\n            placeholder=\"[close-up of a cat] Meow!\",\n        )\n        ratio: str = SchemaField(\n            description=\"Aspect ratio of the video\", default=\"9 / 16\"\n        )\n        resolution: str = SchemaField(\n            description=\"Resolution of the video\", default=\"720p\"\n        )\n        frame_rate: int = SchemaField(description=\"Frame rate of the video\", default=60)\n        generation_preset: GenerationPreset = SchemaField(\n            description=\"Generation preset for visual style - only effects AI generated visuals\",\n            default=GenerationPreset.LEONARDO,\n            placeholder=GenerationPreset.LEONARDO,\n        )\n        background_music: AudioTrack = SchemaField(\n            description=\"Background music track\",\n            default=AudioTrack.HIGHWAY_NOCTURNE,\n            placeholder=AudioTrack.HIGHWAY_NOCTURNE,\n        )\n        voice: Voice = SchemaField(\n            description=\"AI voice to use for narration\",\n            default=Voice.LILY,\n            placeholder=Voice.LILY,\n        )\n        video_style: VisualMediaType = SchemaField(\n            description=\"Type of visual media to use for the video\",\n            default=VisualMediaType.STOCK_VIDEOS,\n            placeholder=VisualMediaType.STOCK_VIDEOS,\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    credentials: CredentialsMetaInput[\n        Literal[ProviderName.REVID], Literal[\"api_key\"]\n    ] = CredentialsField(\n        description=\"The revid.ai integration can be used with \"\n        \"any API key with sufficient permissions for the blocks it is used on.\",\n    )",
                  "successors": []
                },
                {
                  "id": 3,
                  "label": "    script: str = SchemaField(\n        description=\"\"\"1. Use short and punctuated sentences\\n\\n2. Use linebreaks to create a new clip\\n\\n3. Text outside of brackets is spoken by the AI, and [text between brackets] will be used to guide the visual generation. For example, [close-up of a cat] will show a close-up of a cat.\"\"\",\n        placeholder=\"[close-up of a cat] Meow!\",\n    )",
                  "successors": []
                },
                {
                  "id": 4,
                  "label": "    ratio: str = SchemaField(\n        description=\"Aspect ratio of the video\", default=\"9 / 16\"\n    )",
                  "successors": []
                },
                {
                  "id": 5,
                  "label": "    resolution: str = SchemaField(\n        description=\"Resolution of the video\", default=\"720p\"\n    )",
                  "successors": []
                },
                {
                  "id": 6,
                  "label": "    frame_rate: int = SchemaField(description=\"Frame rate of the video\", default=60)",
                  "successors": []
                },
                {
                  "id": 7,
                  "label": "    generation_preset: GenerationPreset = SchemaField(\n        description=\"Generation preset for visual style - only effects AI generated visuals\",\n        default=GenerationPreset.LEONARDO,\n        placeholder=GenerationPreset.LEONARDO,\n    )",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "    background_music: AudioTrack = SchemaField(\n        description=\"Background music track\",\n        default=AudioTrack.HIGHWAY_NOCTURNE,\n        placeholder=AudioTrack.HIGHWAY_NOCTURNE,\n    )",
                  "successors": []
                },
                {
                  "id": 9,
                  "label": "    voice: Voice = SchemaField(\n        description=\"AI voice to use for narration\",\n        default=Voice.LILY,\n        placeholder=Voice.LILY,\n    )",
                  "successors": []
                },
                {
                  "id": 10,
                  "label": "    video_style: VisualMediaType = SchemaField(\n        description=\"Type of visual media to use for the video\",\n        default=VisualMediaType.STOCK_VIDEOS,\n        placeholder=VisualMediaType.STOCK_VIDEOS,\n    )",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 182,
          "end_line": 184,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        video_url: str = SchemaField(description=\"The URL of the created video\")\n        error: str = SchemaField(description=\"Error message if the request failed\")",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "video_url: str = SchemaField(description=\"The URL of the created video\")",
                  "successors": [
                    {
                      "id": 3,
                      "label": "error: str = SchemaField(description=\"Error message if the request failed\")",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class AIShortformVideoCreatorBlock(Block):\n        )\n\n        error: str = SchemaField(description=\"Error message if the request failed\")\n\n        )\n\n        return webhook_data[\"uuid\"], f\"https://webhook.site/{webhook_data['uuid']}\"\n\n        return response.json()\n\n        return response.json()\n\n        raise TimeoutError(\"Video creation timed out\")\n\n            yield \"video_url\", video_url",
      "blocks": [
        {
          "id": 1,
          "label": "class AIShortformVideoCreatorBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "error: str = SchemaField(description=\"Error message if the request failed\")",
              "successors": []
            },
            {
              "id": 3,
              "label": "return webhook_data[\"uuid\"], f\"https://webhook.site/{webhook_data['uuid']}\"",
              "successors": []
            },
            {
              "id": 4,
              "label": "return response.json()",
              "successors": []
            },
            {
              "id": 5,
              "label": "return response.json()",
              "successors": []
            },
            {
              "id": 6,
              "label": "raise TimeoutError(\"Video creation timed out\")",
              "successors": []
            },
            {
              "id": 7,
              "label": "yield \"video_url\", video_url",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "import logging\nimport time\nfrom enum import Enum\nfrom typing import Literal\n\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"revid\",\n    api_key=SecretStr(\"mock-revid-api-key\"),\n    title=\"Mock Revid API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n        return audio_urls[self]\n\n\n    MANGA = (\"Manga\",)\n\n\n        return self.value\n\n\n    AI_VIDEO = (\"aiVideo\",)\n\n\nlogger = logging.getLogger(__name__)\n\n\n            yield \"video_url\", video_url",
  "blocks": [
    {
      "id": 1,
      "label": "import logging\nimport time\nfrom enum import Enum\nfrom typing import Literal\n\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests",
      "successors": [
        {
          "id": 2,
          "label": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"revid\",\n    api_key=SecretStr(\"mock-revid-api-key\"),\n    title=\"Mock Revid API key\",\n    expires_at=None,\n)",
          "successors": [
            {
              "id": 3,
              "label": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}",
              "successors": [
                {
                  "id": 4,
                  "label": "return audio_urls[self]",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "id": 5,
          "label": "MANGA = (\"Manga\",)",
          "successors": [
            {
              "id": 6,
              "label": "return self.value",
              "successors": []
            }
          ]
        },
        {
          "id": 7,
          "label": "AI_VIDEO = (\"aiVideo\",)",
          "successors": [
            {
              "id": 8,
              "label": "logger = logging.getLogger(__name__)",
              "successors": [
                {
                  "id": 9,
                  "label": "yield \"video_url\", video_url",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}