[
  {
    "decl_name": "GlobalBlock",
    "start_line": 1,
    "end_line": 31,
    "children": [],
    "code": "import time\nfrom enum import Enum\nfrom typing import Literal\n\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n\nTEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"revid\",\n    api_key=SecretStr(\"mock-revid-api-key\"),\n    title=\"Mock Revid API key\",\n    expires_at=None,\n)\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import time\nfrom enum import Enum\nfrom typing import Literal\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from pydantic import SecretStr\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"revid\",\n    api_key=SecretStr(\"mock-revid-api-key\"),\n    title=\"Mock Revid API key\",\n    expires_at=None,\n)\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        }
      ]
    }
  },
  {
    "decl_name": "AudioTrack",
    "start_line": 32,
    "end_line": 81,
    "children": [
      {
        "decl_name": "AudioTrack.audio_url",
        "start_line": 56,
        "end_line": 80,
        "children": [],
        "code": "    def audio_url(self):\n        audio_urls = {\n            AudioTrack.OBSERVER: \"https://cdn.tfrv.xyz/audio/observer.mp3\",\n            AudioTrack.FUTURISTIC_BEAT: \"https://cdn.tfrv.xyz/audio/_futuristic-beat.mp3\",\n            AudioTrack.SCIENCE_DOCUMENTARY: \"https://cdn.tfrv.xyz/audio/_science-documentary.mp3\",\n            AudioTrack.HOTLINE: \"https://cdn.tfrv.xyz/audio/_hotline.mp3\",\n            AudioTrack.BLADERUNNER_2049: \"https://cdn.tfrv.xyz/audio/_bladerunner-2049.mp3\",\n            AudioTrack.A_FUTURE: \"https://cdn.tfrv.xyz/audio/a-future.mp3\",\n            AudioTrack.ELYSIAN_EMBERS: \"https://cdn.tfrv.xyz/audio/elysian-embers.mp3\",\n            AudioTrack.INSPIRING_CINEMATIC: \"https://cdn.tfrv.xyz/audio/inspiring-cinematic-ambient.mp3\",\n            AudioTrack.BLADERUNNER_REMIX: \"https://cdn.tfrv.xyz/audio/bladerunner-remix.mp3\",\n            AudioTrack.IZZAMUZZIC: \"https://cdn.tfrv.xyz/audio/_izzamuzzic.mp3\",\n            AudioTrack.NAS: \"https://cdn.tfrv.xyz/audio/_nas.mp3\",\n            AudioTrack.PARIS_ELSE: \"https://cdn.tfrv.xyz/audio/_paris-else.mp3\",\n            AudioTrack.SNOWFALL: \"https://cdn.tfrv.xyz/audio/_snowfall.mp3\",\n            AudioTrack.BURLESQUE: \"https://cdn.tfrv.xyz/audio/burlesque.mp3\",\n            AudioTrack.CORNY_CANDY: \"https://cdn.tfrv.xyz/audio/corny-candy.mp3\",\n            AudioTrack.HIGHWAY_NOCTURNE: \"https://cdn.tfrv.xyz/audio/highway-nocturne.mp3\",\n            AudioTrack.I_DONT_THINK_SO: \"https://cdn.tfrv.xyz/audio/i-dont-think-so.mp3\",\n            AudioTrack.LOSING_YOUR_MARBLES: \"https://cdn.tfrv.xyz/audio/losing-your-marbles.mp3\",\n            AudioTrack.REFRESHER: \"https://cdn.tfrv.xyz/audio/refresher.mp3\",\n            AudioTrack.TOURIST: \"https://cdn.tfrv.xyz/audio/tourist.mp3\",\n            AudioTrack.TWIN_TYCHES: \"https://cdn.tfrv.xyz/audio/twin-tynches.mp3\",\n        }\n        return audio_urls[self]\n",
        "cfg": {
          "nodes": [
            {
              "id": "AudioTrack.audio_url_1",
              "code": "def audio_url(self):\n"
            },
            {
              "id": "AudioTrack.audio_url_2",
              "code": "        audio_urls = {\n            AudioTrack.OBSERVER: \"https://cdn.tfrv.xyz/audio/observer.mp3\",\n            AudioTrack.FUTURISTIC_BEAT: \"https://cdn.tfrv.xyz/audio/_futuristic-beat.mp3\",\n            AudioTrack.SCIENCE_DOCUMENTARY: \"https://cdn.tfrv.xyz/audio/_science-documentary.mp3\",\n            AudioTrack.HOTLINE: \"https://cdn.tfrv.xyz/audio/_hotline.mp3\",\n            AudioTrack.BLADERUNNER_2049: \"https://cdn.tfrv.xyz/audio/_bladerunner-2049.mp3\",\n            AudioTrack.A_FUTURE: \"https://cdn.tfrv.xyz/audio/a-future.mp3\",\n            AudioTrack.ELYSIAN_EMBERS: \"https://cdn.tfrv.xyz/audio/elysian-embers.mp3\",\n            AudioTrack.INSPIRING_CINEMATIC: \"https://cdn.tfrv.xyz/audio/inspiring-cinematic-ambient.mp3\",\n            AudioTrack.BLADERUNNER_REMIX: \"https://cdn.tfrv.xyz/audio/bladerunner-remix.mp3\",\n            AudioTrack.IZZAMUZZIC: \"https://cdn.tfrv.xyz/audio/_izzamuzzic.mp3\",\n            AudioTrack.NAS: \"https://cdn.tfrv.xyz/audio/_nas.mp3\",\n            AudioTrack.PARIS_ELSE: \"https://cdn.tfrv.xyz/audio/_paris-else.mp3\",\n            AudioTrack.SNOWFALL: \"https://cdn.tfrv.xyz/audio/_snowfall.mp3\",\n            AudioTrack.BURLESQUE: \"https://cdn.tfrv.xyz/audio/burlesque.mp3\",\n            AudioTrack.CORNY_CANDY: \"https://cdn.tfrv.xyz/audio/corny-candy.mp3\",\n            AudioTrack.HIGHWAY_NOCTURNE: \"https://cdn.tfrv.xyz/audio/highway-nocturne.mp3\",\n            AudioTrack.I_DONT_THINK_SO: \"https://cdn.tfrv.xyz/audio/i-dont-think-so.mp3\",\n            AudioTrack.LOSING_YOUR_MARBLES: \"https://cdn.tfrv.xyz/audio/losing-your-marbles.mp3\",\n            AudioTrack.REFRESHER: \"https://cdn.tfrv.xyz/audio/refresher.mp3\",\n            AudioTrack.TOURIST: \"https://cdn.tfrv.xyz/audio/tourist.mp3\",\n            AudioTrack.TWIN_TYCHES: \"https://cdn.tfrv.xyz/audio/twin-tynches.mp3\",\n        }\n"
            },
            {
              "id": "AudioTrack.audio_url_3",
              "code": "        return audio_urls[self]\n"
            }
          ],
          "edges": [
            {
              "from": "AudioTrack.audio_url_1",
              "to": "AudioTrack.audio_url_2"
            },
            {
              "from": "AudioTrack.audio_url_2",
              "to": "AudioTrack.audio_url_3"
            }
          ]
        }
      }
    ],
    "code": "class AudioTrack(str, Enum):\n    OBSERVER = (\"Observer\",)\n    FUTURISTIC_BEAT = (\"Futuristic Beat\",)\n    SCIENCE_DOCUMENTARY = (\"Science Documentary\",)\n    HOTLINE = (\"Hotline\",)\n    BLADERUNNER_2049 = (\"Bladerunner 2049\",)\n    A_FUTURE = (\"A Future\",)\n    ELYSIAN_EMBERS = (\"Elysian Embers\",)\n    INSPIRING_CINEMATIC = (\"Inspiring Cinematic\",)\n    BLADERUNNER_REMIX = (\"Bladerunner Remix\",)\n    IZZAMUZZIC = (\"Izzamuzzic\",)\n    NAS = (\"Nas\",)\n    PARIS_ELSE = (\"Paris - Else\",)\n    SNOWFALL = (\"Snowfall\",)\n    BURLESQUE = (\"Burlesque\",)\n    CORNY_CANDY = (\"Corny Candy\",)\n    HIGHWAY_NOCTURNE = (\"Highway Nocturne\",)\n    I_DONT_THINK_SO = (\"I Don't Think So\",)\n    LOSING_YOUR_MARBLES = (\"Losing Your Marbles\",)\n    REFRESHER = (\"Refresher\",)\n    TOURIST = (\"Tourist\",)\n    TWIN_TYCHES = (\"Twin Tyches\",)\n\n    @property\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "AudioTrack_1",
          "code": "class AudioTrack(str, Enum):\n    OBSERVER = (\"Observer\",)\n    FUTURISTIC_BEAT = (\"Futuristic Beat\",)\n    SCIENCE_DOCUMENTARY = (\"Science Documentary\",)\n    HOTLINE = (\"Hotline\",)\n    BLADERUNNER_2049 = (\"Bladerunner 2049\",)\n    A_FUTURE = (\"A Future\",)\n    ELYSIAN_EMBERS = (\"Elysian Embers\",)\n    INSPIRING_CINEMATIC = (\"Inspiring Cinematic\",)\n    BLADERUNNER_REMIX = (\"Bladerunner Remix\",)\n    IZZAMUZZIC = (\"Izzamuzzic\",)\n    NAS = (\"Nas\",)\n    PARIS_ELSE = (\"Paris - Else\",)\n    SNOWFALL = (\"Snowfall\",)\n    BURLESQUE = (\"Burlesque\",)\n    CORNY_CANDY = (\"Corny Candy\",)\n    HIGHWAY_NOCTURNE = (\"Highway Nocturne\",)\n    I_DONT_THINK_SO = (\"I Don't Think So\",)\n    LOSING_YOUR_MARBLES = (\"Losing Your Marbles\",)\n    REFRESHER = (\"Refresher\",)\n    TOURIST = (\"Tourist\",)\n    TWIN_TYCHES = (\"Twin Tyches\",)\n\n"
        },
        {
          "id": "AudioTrack_2",
          "code": "    @property\n"
        }
      ],
      "edges": [
        {
          "from": "AudioTrack_1",
          "to": "AudioTrack_2"
        }
      ]
    }
  },
  {
    "decl_name": "GenerationPreset",
    "start_line": 83,
    "end_line": 106,
    "children": [],
    "code": "class GenerationPreset(str, Enum):\n    LEONARDO = (\"Default\",)\n    ANIME = (\"Anime\",)\n    REALISM = (\"Realist\",)\n    ILLUSTRATION = (\"Illustration\",)\n    SKETCH_COLOR = (\"Sketch Color\",)\n    SKETCH_BW = (\"Sketch B&W\",)\n    PIXAR = (\"Pixar\",)\n    INK = (\"Japanese Ink\",)\n    RENDER_3D = (\"3D Render\",)\n    LEGO = (\"Lego\",)\n    SCIFI = (\"Sci-Fi\",)\n    RECRO_CARTOON = (\"Retro Cartoon\",)\n    PIXEL_ART = (\"Pixel Art\",)\n    CREATIVE = (\"Creative\",)\n    PHOTOGRAPHY = (\"Photography\",)\n    RAYTRACED = (\"Raytraced\",)\n    ENVIRONMENT = (\"Environment\",)\n    FANTASY = (\"Fantasy\",)\n    ANIME_SR = (\"Anime Realism\",)\n    MOVIE = (\"Movie\",)\n    STYLIZED_ILLUSTRATION = (\"Stylized Illustration\",)\n    MANGA = (\"Manga\",)\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GenerationPreset_1",
          "code": "class GenerationPreset(str, Enum):\n    LEONARDO = (\"Default\",)\n    ANIME = (\"Anime\",)\n    REALISM = (\"Realist\",)\n    ILLUSTRATION = (\"Illustration\",)\n    SKETCH_COLOR = (\"Sketch Color\",)\n    SKETCH_BW = (\"Sketch B&W\",)\n    PIXAR = (\"Pixar\",)\n    INK = (\"Japanese Ink\",)\n    RENDER_3D = (\"3D Render\",)\n    LEGO = (\"Lego\",)\n    SCIFI = (\"Sci-Fi\",)\n    RECRO_CARTOON = (\"Retro Cartoon\",)\n    PIXEL_ART = (\"Pixel Art\",)\n    CREATIVE = (\"Creative\",)\n    PHOTOGRAPHY = (\"Photography\",)\n    RAYTRACED = (\"Raytraced\",)\n    ENVIRONMENT = (\"Environment\",)\n    FANTASY = (\"Fantasy\",)\n    ANIME_SR = (\"Anime Realism\",)\n    MOVIE = (\"Movie\",)\n    STYLIZED_ILLUSTRATION = (\"Stylized Illustration\",)\n    MANGA = (\"Manga\",)\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "Voice",
    "start_line": 108,
    "end_line": 130,
    "children": [
      {
        "decl_name": "Voice.voice_id",
        "start_line": 117,
        "end_line": 126,
        "children": [],
        "code": "    def voice_id(self):\n        voice_id_map = {\n            Voice.LILY: \"pFZP5JQG7iQjIQuC4Bku\",\n            Voice.DANIEL: \"onwK4e9ZLuTAKqWW03F9\",\n            Voice.BRIAN: \"nPczCjzI2devNBz1zQrb\",\n            Voice.JESSICA: \"cgSgspJ2msm6clMCkdW9\",\n            Voice.CHARLOTTE: \"XB0fDUnXU5powFXDhCwa\",\n            Voice.CALLUM: \"N2lVS1w4EtoT3dr4eOWO\",\n        }\n        return voice_id_map[self]\n",
        "cfg": {
          "nodes": [
            {
              "id": "Voice.voice_id_1",
              "code": "def voice_id(self):\n        voice_id_map = {\n            Voice.LILY: \"pFZP5JQG7iQjIQuC4Bku\",\n            Voice.DANIEL: \"onwK4e9ZLuTAKqWW03F9\",\n            Voice.BRIAN: \"nPczCjzI2devNBz1zQrb\",\n            Voice.JESSICA: \"cgSgspJ2msm6clMCkdW9\",\n            Voice.CHARLOTTE: \"XB0fDUnXU5powFXDhCwa\",\n            Voice.CALLUM: \"N2lVS1w4EtoT3dr4eOWO\",\n        }\n        return voice_id_map[self]\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "Voice.__str__",
        "start_line": 128,
        "end_line": 129,
        "children": [],
        "code": "    def __str__(self):\n        return self.value\n",
        "cfg": {
          "nodes": [
            {
              "id": "Voice.__str___1",
              "code": "def __str__(self):\n        return self.value\n"
            }
          ],
          "edges": []
        }
      }
    ],
    "code": "class Voice(str, Enum):\n    LILY = \"Lily\"\n    DANIEL = \"Daniel\"\n    BRIAN = \"Brian\"\n    JESSICA = \"Jessica\"\n    CHARLOTTE = \"Charlotte\"\n    CALLUM = \"Callum\"\n\n    @property\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "Voice_1",
          "code": "class Voice(str, Enum):\n    LILY = \"Lily\"\n    DANIEL = \"Daniel\"\n    BRIAN = \"Brian\"\n    JESSICA = \"Jessica\"\n    CHARLOTTE = \"Charlotte\"\n    CALLUM = \"Callum\"\n"
        },
        {
          "id": "Voice_2",
          "code": "    @property\n"
        }
      ],
      "edges": [
        {
          "from": "Voice_1",
          "to": "Voice_2"
        }
      ]
    }
  },
  {
    "decl_name": "VisualMediaType",
    "start_line": 132,
    "end_line": 136,
    "children": [],
    "code": "class VisualMediaType(str, Enum):\n    STOCK_VIDEOS = (\"stockVideo\",)\n    MOVING_AI_IMAGES = (\"movingImage\",)\n    AI_VIDEO = (\"aiVideo\",)\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "VisualMediaType_1",
          "code": "class VisualMediaType(str, Enum):\n    STOCK_VIDEOS = (\"stockVideo\",)\n    MOVING_AI_IMAGES = (\"movingImage\",)\n    AI_VIDEO = (\"aiVideo\",)\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "AIShortformVideoCreatorBlock",
    "start_line": 141,
    "end_line": 323,
    "children": [
      {
        "decl_name": "AIShortformVideoCreatorBlock.Input",
        "start_line": 142,
        "end_line": 179,
        "children": [],
        "code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REVID], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The revid.ai integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        script: str = SchemaField(\n            description=\"\"\"1. Use short and punctuated sentences\\n\\n2. Use linebreaks to create a new clip\\n\\n3. Text outside of brackets is spoken by the AI, and [text between brackets] will be used to guide the visual generation. For example, [close-up of a cat] will show a close-up of a cat.\"\"\",\n            placeholder=\"[close-up of a cat] Meow!\",\n        )\n        ratio: str = SchemaField(\n            description=\"Aspect ratio of the video\", default=\"9 / 16\"\n        )\n        resolution: str = SchemaField(\n            description=\"Resolution of the video\", default=\"720p\"\n        )\n        frame_rate: int = SchemaField(description=\"Frame rate of the video\", default=60)\n        generation_preset: GenerationPreset = SchemaField(\n            description=\"Generation preset for visual style - only effects AI generated visuals\",\n            default=GenerationPreset.LEONARDO,\n            placeholder=GenerationPreset.LEONARDO,\n        )\n        background_music: AudioTrack = SchemaField(\n            description=\"Background music track\",\n            default=AudioTrack.HIGHWAY_NOCTURNE,\n            placeholder=AudioTrack.HIGHWAY_NOCTURNE,\n        )\n        voice: Voice = SchemaField(\n            description=\"AI voice to use for narration\",\n            default=Voice.LILY,\n            placeholder=Voice.LILY,\n        )\n        video_style: VisualMediaType = SchemaField(\n            description=\"Type of visual media to use for the video\",\n            default=VisualMediaType.STOCK_VIDEOS,\n            placeholder=VisualMediaType.STOCK_VIDEOS,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIShortformVideoCreatorBlock.Input_1",
              "code": "class Input(BlockSchema):\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.Input_2",
              "code": "        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REVID], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The revid.ai integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.Input_3",
              "code": "        script: str = SchemaField(\n            description=\"\"\"1. Use short and punctuated sentences\\n\\n2. Use linebreaks to create a new clip\\n\\n3. Text outside of brackets is spoken by the AI, and [text between brackets] will be used to guide the visual generation. For example, [close-up of a cat] will show a close-up of a cat.\"\"\",\n            placeholder=\"[close-up of a cat] Meow!\",\n        )\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.Input_4",
              "code": "        ratio: str = SchemaField(\n            description=\"Aspect ratio of the video\", default=\"9 / 16\"\n        )\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.Input_5",
              "code": "        resolution: str = SchemaField(\n            description=\"Resolution of the video\", default=\"720p\"\n        )\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.Input_6",
              "code": "        frame_rate: int = SchemaField(description=\"Frame rate of the video\", default=60)\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.Input_7",
              "code": "        generation_preset: GenerationPreset = SchemaField(\n            description=\"Generation preset for visual style - only effects AI generated visuals\",\n            default=GenerationPreset.LEONARDO,\n            placeholder=GenerationPreset.LEONARDO,\n        )\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.Input_8",
              "code": "        background_music: AudioTrack = SchemaField(\n            description=\"Background music track\",\n            default=AudioTrack.HIGHWAY_NOCTURNE,\n            placeholder=AudioTrack.HIGHWAY_NOCTURNE,\n        )\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.Input_9",
              "code": "        voice: Voice = SchemaField(\n            description=\"AI voice to use for narration\",\n            default=Voice.LILY,\n            placeholder=Voice.LILY,\n        )\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.Input_10",
              "code": "        video_style: VisualMediaType = SchemaField(\n            description=\"Type of visual media to use for the video\",\n            default=VisualMediaType.STOCK_VIDEOS,\n            placeholder=VisualMediaType.STOCK_VIDEOS,\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "AIShortformVideoCreatorBlock.Input_1",
              "to": "AIShortformVideoCreatorBlock.Input_2"
            },
            {
              "from": "AIShortformVideoCreatorBlock.Input_2",
              "to": "AIShortformVideoCreatorBlock.Input_3"
            },
            {
              "from": "AIShortformVideoCreatorBlock.Input_3",
              "to": "AIShortformVideoCreatorBlock.Input_4"
            },
            {
              "from": "AIShortformVideoCreatorBlock.Input_4",
              "to": "AIShortformVideoCreatorBlock.Input_5"
            },
            {
              "from": "AIShortformVideoCreatorBlock.Input_5",
              "to": "AIShortformVideoCreatorBlock.Input_6"
            },
            {
              "from": "AIShortformVideoCreatorBlock.Input_6",
              "to": "AIShortformVideoCreatorBlock.Input_7"
            },
            {
              "from": "AIShortformVideoCreatorBlock.Input_7",
              "to": "AIShortformVideoCreatorBlock.Input_8"
            },
            {
              "from": "AIShortformVideoCreatorBlock.Input_8",
              "to": "AIShortformVideoCreatorBlock.Input_9"
            },
            {
              "from": "AIShortformVideoCreatorBlock.Input_9",
              "to": "AIShortformVideoCreatorBlock.Input_10"
            }
          ]
        }
      },
      {
        "decl_name": "AIShortformVideoCreatorBlock.Output",
        "start_line": 181,
        "end_line": 183,
        "children": [],
        "code": "    class Output(BlockSchema):\n        video_url: str = SchemaField(description=\"The URL of the created video\")\n        error: str = SchemaField(description=\"Error message if the request failed\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIShortformVideoCreatorBlock.Output_1",
              "code": "class Output(BlockSchema):\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.Output_2",
              "code": "        video_url: str = SchemaField(description=\"The URL of the created video\")\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.Output_3",
              "code": "        error: str = SchemaField(description=\"Error message if the request failed\")\n"
            }
          ],
          "edges": [
            {
              "from": "AIShortformVideoCreatorBlock.Output_1",
              "to": "AIShortformVideoCreatorBlock.Output_2"
            },
            {
              "from": "AIShortformVideoCreatorBlock.Output_2",
              "to": "AIShortformVideoCreatorBlock.Output_3"
            }
          ]
        }
      },
      {
        "decl_name": "AIShortformVideoCreatorBlock.__init__",
        "start_line": 185,
        "end_line": 216,
        "children": [],
        "code": "    def __init__(self):\n        super().__init__(\n            id=\"361697fb-0c4f-4feb-aed3-8320c88c771b\",\n            description=\"Creates a shortform video using revid.ai\",\n            categories={BlockCategory.SOCIAL, BlockCategory.AI},\n            input_schema=AIShortformVideoCreatorBlock.Input,\n            output_schema=AIShortformVideoCreatorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"script\": \"[close-up of a cat] Meow!\",\n                \"ratio\": \"9 / 16\",\n                \"resolution\": \"720p\",\n                \"frame_rate\": 60,\n                \"generation_preset\": GenerationPreset.LEONARDO,\n                \"background_music\": AudioTrack.HIGHWAY_NOCTURNE,\n                \"voice\": Voice.LILY,\n                \"video_style\": VisualMediaType.STOCK_VIDEOS,\n            },\n            test_output=(\n                \"video_url\",\n                \"https://example.com/video.mp4\",\n            ),\n            test_mock={\n                \"create_webhook\": lambda: (\n                    \"test_uuid\",\n                    \"https://webhook.site/test_uuid\",\n                ),\n                \"create_video\": lambda api_key, payload: {\"pid\": \"test_pid\"},\n                \"wait_for_video\": lambda api_key, pid, webhook_token, max_wait_time=1000: \"https://example.com/video.mp4\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIShortformVideoCreatorBlock.__init___1",
              "code": "def __init__(self):\n        super().__init__(\n            id=\"361697fb-0c4f-4feb-aed3-8320c88c771b\",\n            description=\"Creates a shortform video using revid.ai\",\n            categories={BlockCategory.SOCIAL, BlockCategory.AI},\n            input_schema=AIShortformVideoCreatorBlock.Input,\n            output_schema=AIShortformVideoCreatorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"script\": \"[close-up of a cat] Meow!\",\n                \"ratio\": \"9 / 16\",\n                \"resolution\": \"720p\",\n                \"frame_rate\": 60,\n                \"generation_preset\": GenerationPreset.LEONARDO,\n                \"background_music\": AudioTrack.HIGHWAY_NOCTURNE,\n                \"voice\": Voice.LILY,\n                \"video_style\": VisualMediaType.STOCK_VIDEOS,\n            },\n            test_output=(\n                \"video_url\",\n                \"https://example.com/video.mp4\",\n            ),\n            test_mock={\n                \"create_webhook\": lambda: (\n                    \"test_uuid\",\n                    \"https://webhook.site/test_uuid\",\n                ),\n                \"create_video\": lambda api_key, payload: {\"pid\": \"test_pid\"},\n                \"wait_for_video\": lambda api_key, pid, webhook_token, max_wait_time=1000: \"https://example.com/video.mp4\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AIShortformVideoCreatorBlock.create_webhook",
        "start_line": 218,
        "end_line": 223,
        "children": [],
        "code": "    def create_webhook(self):\n        url = \"https://webhook.site/token\"\n        headers = {\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"}\n        response = requests.post(url, headers=headers)\n        webhook_data = response.json()\n        return webhook_data[\"uuid\"], f\"https://webhook.site/{webhook_data['uuid']}\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIShortformVideoCreatorBlock.create_webhook_1",
              "code": "def create_webhook(self):\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.create_webhook_2",
              "code": "        url = \"https://webhook.site/token\"\n        headers = {\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"}\n        response = requests.post(url, headers=headers)\n        webhook_data = response.json()\n        return webhook_data[\"uuid\"], f\"https://webhook.site/{webhook_data['uuid']}\"\n"
            }
          ],
          "edges": [
            {
              "from": "AIShortformVideoCreatorBlock.create_webhook_1",
              "to": "AIShortformVideoCreatorBlock.create_webhook_2"
            }
          ]
        }
      },
      {
        "decl_name": "AIShortformVideoCreatorBlock.create_video",
        "start_line": 225,
        "end_line": 232,
        "children": [],
        "code": "    def create_video(self, api_key: SecretStr, payload: dict) -> dict:\n        url = \"https://www.revid.ai/api/public/v2/render\"\n        headers = {\"key\": api_key.get_secret_value()}\n        response = requests.post(url, json=payload, headers=headers)\n        logger.debug(\n            f\"API Response Status Code: {response.status_code}, Content: {response.text}\"\n        )\n        return response.json()\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIShortformVideoCreatorBlock.create_video_1",
              "code": "def create_video(self, api_key: SecretStr, payload: dict) -> dict:\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.create_video_2",
              "code": "        url = \"https://www.revid.ai/api/public/v2/render\"\n        headers = {\"key\": api_key.get_secret_value()}\n        response = requests.post(url, json=payload, headers=headers)\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.create_video_3",
              "code": "        logger.debug(\n            f\"API Response Status Code: {response.status_code}, Content: {response.text}\"\n        )\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.create_video_4",
              "code": "        return response.json()\n"
            }
          ],
          "edges": [
            {
              "from": "AIShortformVideoCreatorBlock.create_video_1",
              "to": "AIShortformVideoCreatorBlock.create_video_2"
            },
            {
              "from": "AIShortformVideoCreatorBlock.create_video_2",
              "to": "AIShortformVideoCreatorBlock.create_video_3"
            },
            {
              "from": "AIShortformVideoCreatorBlock.create_video_3",
              "to": "AIShortformVideoCreatorBlock.create_video_4"
            }
          ]
        }
      },
      {
        "decl_name": "AIShortformVideoCreatorBlock.check_video_status",
        "start_line": 234,
        "end_line": 238,
        "children": [],
        "code": "    def check_video_status(self, api_key: SecretStr, pid: str) -> dict:\n        url = f\"https://www.revid.ai/api/public/v2/status?pid={pid}\"\n        headers = {\"key\": api_key.get_secret_value()}\n        response = requests.get(url, headers=headers)\n        return response.json()\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIShortformVideoCreatorBlock.check_video_status_1",
              "code": "def check_video_status(self, api_key: SecretStr, pid: str) -> dict:\n        url = f\"https://www.revid.ai/api/public/v2/status?pid={pid}\"\n        headers = {\"key\": api_key.get_secret_value()}\n        response = requests.get(url, headers=headers)\n        return response.json()\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AIShortformVideoCreatorBlock.wait_for_video",
        "start_line": 240,
        "end_line": 265,
        "children": [],
        "code": "    def wait_for_video(\n        self,\n        api_key: SecretStr,\n        pid: str,\n        webhook_token: str,\n        max_wait_time: int = 1000,\n    ) -> str:\n        start_time = time.time()\n        while time.time() - start_time < max_wait_time:\n            status = self.check_video_status(api_key, pid)\n            logger.debug(f\"Video status: {status}\")\n\n            if status.get(\"status\") == \"ready\" and \"videoUrl\" in status:\n                return status[\"videoUrl\"]\n            elif status.get(\"status\") == \"error\":\n                error_message = status.get(\"error\", \"Unknown error occurred\")\n                logger.error(f\"Video creation failed: {error_message}\")\n                raise ValueError(f\"Video creation failed: {error_message}\")\n            elif status.get(\"status\") in [\"FAILED\", \"CANCELED\"]:\n                logger.error(f\"Video creation failed: {status.get('message')}\")\n                raise ValueError(f\"Video creation failed: {status.get('message')}\")\n\n            time.sleep(10)\n\n        logger.error(\"Video creation timed out\")\n        raise TimeoutError(\"Video creation timed out\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIShortformVideoCreatorBlock.wait_for_video_1",
              "code": "def wait_for_video(\n        self,\n        api_key: SecretStr,\n        pid: str,\n        webhook_token: str,\n        max_wait_time: int = 1000,\n    ) -> str:\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.wait_for_video_2",
              "code": "        start_time = time.time()\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.wait_for_video_3",
              "code": "        while time.time() - start_time < max_wait_time:\n            status = self.check_video_status(api_key, pid)\n            logger.debug(f\"Video status: {status}\")\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.wait_for_video_4",
              "code": "            if status.get(\"status\") == \"ready\" and \"videoUrl\" in status:\n                return status[\"videoUrl\"]\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.wait_for_video_5",
              "code": "            elif status.get(\"status\") == \"error\":\n                error_message = status.get(\"error\", \"Unknown error occurred\")\n                logger.error(f\"Video creation failed: {error_message}\")\n                raise ValueError(f\"Video creation failed: {error_message}\")\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.wait_for_video_6",
              "code": "            elif status.get(\"status\") in [\"FAILED\", \"CANCELED\"]:\n                logger.error(f\"Video creation failed: {status.get('message')}\")\n                raise ValueError(f\"Video creation failed: {status.get('message')}\")\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.wait_for_video_7",
              "code": "            time.sleep(10)\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.wait_for_video_8",
              "code": "        logger.error(\"Video creation timed out\")\n        raise TimeoutError(\"Video creation timed out\")\n"
            }
          ],
          "edges": [
            {
              "from": "AIShortformVideoCreatorBlock.wait_for_video_1",
              "to": "AIShortformVideoCreatorBlock.wait_for_video_2"
            },
            {
              "from": "AIShortformVideoCreatorBlock.wait_for_video_2",
              "to": "AIShortformVideoCreatorBlock.wait_for_video_3"
            },
            {
              "from": "AIShortformVideoCreatorBlock.wait_for_video_3",
              "to": "AIShortformVideoCreatorBlock.wait_for_video_4"
            },
            {
              "from": "AIShortformVideoCreatorBlock.wait_for_video_3",
              "to": "AIShortformVideoCreatorBlock.wait_for_video_5"
            },
            {
              "from": "AIShortformVideoCreatorBlock.wait_for_video_3",
              "to": "AIShortformVideoCreatorBlock.wait_for_video_6"
            },
            {
              "from": "AIShortformVideoCreatorBlock.wait_for_video_3",
              "to": "AIShortformVideoCreatorBlock.wait_for_video_7"
            },
            {
              "from": "AIShortformVideoCreatorBlock.wait_for_video_7",
              "to": "AIShortformVideoCreatorBlock.wait_for_video_3"
            }
          ]
        }
      },
      {
        "decl_name": "AIShortformVideoCreatorBlock.run",
        "start_line": 267,
        "end_line": 322,
        "children": [],
        "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        # Create a new Webhook.site URL\n        webhook_token, webhook_url = self.create_webhook()\n        logger.debug(f\"Webhook URL: {webhook_url}\")\n\n        audio_url = input_data.background_music.audio_url\n\n        payload = {\n            \"frameRate\": input_data.frame_rate,\n            \"resolution\": input_data.resolution,\n            \"frameDurationMultiplier\": 18,\n            \"webhook\": webhook_url,\n            \"creationParams\": {\n                \"mediaType\": input_data.video_style,\n                \"captionPresetName\": \"Wrap 1\",\n                \"selectedVoice\": input_data.voice.voice_id,\n                \"hasEnhancedGeneration\": True,\n                \"generationPreset\": input_data.generation_preset.name,\n                \"selectedAudio\": input_data.background_music,\n                \"origin\": \"/create\",\n                \"inputText\": input_data.script,\n                \"flowType\": \"text-to-video\",\n                \"slug\": \"create-tiktok-video\",\n                \"hasToGenerateVoice\": True,\n                \"hasToTranscript\": False,\n                \"hasToSearchMedia\": True,\n                \"hasAvatar\": False,\n                \"hasWebsiteRecorder\": False,\n                \"hasTextSmallAtBottom\": False,\n                \"ratio\": input_data.ratio,\n                \"sourceType\": \"contentScraping\",\n                \"selectedStoryStyle\": {\"value\": \"custom\", \"label\": \"Custom\"},\n                \"hasToGenerateVideos\": input_data.video_style\n                != VisualMediaType.STOCK_VIDEOS,\n                \"audioUrl\": audio_url,\n            },\n        }\n\n        logger.debug(\"Creating video...\")\n        response = self.create_video(credentials.api_key, payload)\n        pid = response.get(\"pid\")\n\n        if not pid:\n            logger.error(\n                f\"Failed to create video: No project ID returned. API Response: {response}\"\n            )\n            raise RuntimeError(\"Failed to create video: No project ID returned\")\n        else:\n            logger.debug(\n                f\"Video created with project ID: {pid}. Waiting for completion...\"\n            )\n            video_url = self.wait_for_video(credentials.api_key, pid, webhook_token)\n            logger.debug(f\"Video ready: {video_url}\")\n            yield \"video_url\", video_url\n",
        "cfg": {
          "nodes": [
            {
              "id": "AIShortformVideoCreatorBlock.run_1",
              "code": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.run_2",
              "code": "        # Create a new Webhook.site URL\n        webhook_token, webhook_url = self.create_webhook()\n        logger.debug(f\"Webhook URL: {webhook_url}\")\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.run_3",
              "code": "        audio_url = input_data.background_music.audio_url\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.run_4",
              "code": "        payload = {\n            \"frameRate\": input_data.frame_rate,\n            \"resolution\": input_data.resolution,\n            \"frameDurationMultiplier\": 18,\n            \"webhook\": webhook_url,\n            \"creationParams\": {\n                \"mediaType\": input_data.video_style,\n                \"captionPresetName\": \"Wrap 1\",\n                \"selectedVoice\": input_data.voice.voice_id,\n                \"hasEnhancedGeneration\": True,\n                \"generationPreset\": input_data.generation_preset.name,\n                \"selectedAudio\": input_data.background_music,\n                \"origin\": \"/create\",\n                \"inputText\": input_data.script,\n                \"flowType\": \"text-to-video\",\n                \"slug\": \"create-tiktok-video\",\n                \"hasToGenerateVoice\": True,\n                \"hasToTranscript\": False,\n                \"hasToSearchMedia\": True,\n                \"hasAvatar\": False,\n                \"hasWebsiteRecorder\": False,\n                \"hasTextSmallAtBottom\": False,\n                \"ratio\": input_data.ratio,\n                \"sourceType\": \"contentScraping\",\n                \"selectedStoryStyle\": {\"value\": \"custom\", \"label\": \"Custom\"},\n                \"hasToGenerateVideos\": input_data.video_style\n                != VisualMediaType.STOCK_VIDEOS,\n                \"audioUrl\": audio_url,\n            },\n        }\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.run_5",
              "code": "        logger.debug(\"Creating video...\")\n        response = self.create_video(credentials.api_key, payload)\n        pid = response.get(\"pid\")\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.run_6",
              "code": "        if not pid:\n            logger.error(\n                f\"Failed to create video: No project ID returned. API Response: {response}\"\n            )\n            raise RuntimeError(\"Failed to create video: No project ID returned\")\n"
            },
            {
              "id": "AIShortformVideoCreatorBlock.run_7",
              "code": "        else:\n            logger.debug(\n                f\"Video created with project ID: {pid}. Waiting for completion...\"\n            )\n            video_url = self.wait_for_video(credentials.api_key, pid, webhook_token)\n            logger.debug(f\"Video ready: {video_url}\")\n            yield \"video_url\", video_url\n"
            }
          ],
          "edges": [
            {
              "from": "AIShortformVideoCreatorBlock.run_1",
              "to": "AIShortformVideoCreatorBlock.run_2"
            },
            {
              "from": "AIShortformVideoCreatorBlock.run_2",
              "to": "AIShortformVideoCreatorBlock.run_3"
            },
            {
              "from": "AIShortformVideoCreatorBlock.run_3",
              "to": "AIShortformVideoCreatorBlock.run_4"
            },
            {
              "from": "AIShortformVideoCreatorBlock.run_4",
              "to": "AIShortformVideoCreatorBlock.run_5"
            },
            {
              "from": "AIShortformVideoCreatorBlock.run_5",
              "to": "AIShortformVideoCreatorBlock.run_6"
            },
            {
              "from": "AIShortformVideoCreatorBlock.run_5",
              "to": "AIShortformVideoCreatorBlock.run_7"
            }
          ]
        }
      }
    ],
    "code": "class AIShortformVideoCreatorBlock(Block):\n\n\n\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "AIShortformVideoCreatorBlock_1",
          "code": "class AIShortformVideoCreatorBlock(Block):\n"
        }
      ],
      "edges": []
    }
  }
]