[
  {
    "decl_name": "GlobalBlock",
    "start_line": 1,
    "end_line": 94,
    "children": [
      {
        "decl_name": "is_safe",
        "start_line": 15,
        "end_line": 44,
        "children": [],
        "code": "def is_safe(board: list[list[int]], row: int, column: int) -> bool:\n    \"\"\"\n    This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters:\n    board (2D matrix): The chessboard\n    row, column: Coordinates of the cell on the board\n\n    Returns:\n    Boolean Value\n\n    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    True\n    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    False\n    \"\"\"\n\n    n = len(board)  # Size of the board\n\n    # Check if there is any queen in the same row, column,\n    # left upper diagonal, and right upper diagonal\n    return (\n        all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))\n    )\n",
        "cfg": {
          "nodes": [
            {
              "id": "is_safe_1",
              "code": "def is_safe(board: list[list[int]], row: int, column: int) -> bool:\n    \"\"\"\n    This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters:\n    board (2D matrix): The chessboard\n    row, column: Coordinates of the cell on the board\n\n    Returns:\n    Boolean Value\n\n    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    True\n    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    False\n    \"\"\"\n"
            },
            {
              "id": "is_safe_2",
              "code": "    n = len(board)  # Size of the board\n"
            },
            {
              "id": "is_safe_3",
              "code": "    return (\n        all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))\n    )\n"
            }
          ],
          "edges": [
            {
              "from": "is_safe_1",
              "to": "is_safe_2"
            },
            {
              "from": "is_safe_2",
              "to": "is_safe_3"
            }
          ]
        }
      },
      {
        "decl_name": "solve",
        "start_line": 47,
        "end_line": 73,
        "children": [],
        "code": "def solve(board: list[list[int]], row: int) -> bool:\n    \"\"\"\n    This function creates a state space tree and calls the safe function until it\n    receives a False Boolean and terminates that branch and backtracks to the next\n    possible solution branch.\n    \"\"\"\n    if row >= len(board):\n        \"\"\"\n        If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n        \"\"\"\n        solution.append(board)\n        printboard(board)\n        print()\n        return True\n    for i in range(len(board)):\n        \"\"\"\n        For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.\n        \"\"\"\n        if is_safe(board, row, i):\n            board[row][i] = 1\n            solve(board, row + 1)\n            board[row][i] = 0\n    return False\n",
        "cfg": {
          "nodes": [
            {
              "id": "solve_1",
              "code": "def solve(board: list[list[int]], row: int) -> bool:\n    \"\"\"\n    This function creates a state space tree and calls the safe function until it\n    receives a False Boolean and terminates that branch and backtracks to the next\n    possible solution branch.\n    \"\"\"\n"
            },
            {
              "id": "solve_2",
              "code": "    if row >= len(board):\n        \"\"\"\n        If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n        \"\"\"\n        solution.append(board)\n        printboard(board)\n        print()\n        return True\n"
            },
            {
              "id": "solve_3",
              "code": "    for i in range(len(board)):\n        \"\"\"\n        For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.\n        \"\"\"\n"
            },
            {
              "id": "solve_4",
              "code": "        if is_safe(board, row, i):\n            board[row][i] = 1\n            solve(board, row + 1)\n            board[row][i] = 0\n"
            },
            {
              "id": "solve_5",
              "code": "    return False\n"
            }
          ],
          "edges": [
            {
              "from": "solve_1",
              "to": "solve_2"
            },
            {
              "from": "solve_1",
              "to": "solve_3"
            },
            {
              "from": "solve_3",
              "to": "solve_4"
            },
            {
              "from": "solve_3",
              "to": "solve_5"
            },
            {
              "from": "solve_4",
              "to": "solve_3"
            }
          ]
        }
      },
      {
        "decl_name": "printboard",
        "start_line": 76,
        "end_line": 86,
        "children": [],
        "code": "def printboard(board: list[list[int]]) -> None:\n    \"\"\"\n    Prints the boards that have a successful combination.\n    \"\"\"\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 1:\n                print(\"Q\", end=\" \")  # Queen is present\n            else:\n                print(\".\", end=\" \")  # Empty cell\n        print()\n",
        "cfg": {
          "nodes": [
            {
              "id": "printboard_1",
              "code": "def printboard(board: list[list[int]]) -> None:\n    \"\"\"\n    Prints the boards that have a successful combination.\n    \"\"\"\n"
            },
            {
              "id": "printboard_2",
              "code": "    for i in range(len(board)):\n"
            },
            {
              "id": "printboard_3",
              "code": "        for j in range(len(board)):\n"
            },
            {
              "id": "printboard_4",
              "code": "            if board[i][j] == 1:\n                print(\"Q\", end=\" \")  # Queen is present\n            else:\n                print(\".\", end=\" \")  # Empty cell\n"
            },
            {
              "id": "printboard_5",
              "code": "        print()\n"
            }
          ],
          "edges": [
            {
              "from": "printboard_1",
              "to": "printboard_2"
            },
            {
              "from": "printboard_2",
              "to": "printboard_3"
            },
            {
              "from": "printboard_3",
              "to": "printboard_4"
            },
            {
              "from": "printboard_4",
              "to": "printboard_3"
            },
            {
              "from": "printboard_4",
              "to": "printboard_5"
            },
            {
              "from": "printboard_5",
              "to": "printboard_2"
            }
          ]
        }
      }
    ],
    "code": "\nThe nqueens problem is of placing N queens on a N * N\nchess board such that no queen can attack any other queens placed\non that chess board.\nThis means that one queen cannot have any other queen on its horizontal, vertical and\ndiagonal lines.\n\n\"\"\"\n\nfrom __future__ import annotations\n\nsolution = []\n\n\n\n\n\n\n\n\n# Number of queens (e.g., n=8 for an 8x8 board)\nn = 8\nboard = [[0 for i in range(n)] for j in range(n)]\nsolve(board, 0)\nprint(\"The total number of solutions are:\", len(solution))\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "The nqueens problem is of placing N queens on a N * N\nchess board such that no queen can attack any other queens placed\non that chess board.\nThis means that one queen cannot have any other queen on its horizontal, vertical and\ndiagonal lines.\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from __future__ import annotations\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "solution = []\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "n = 8\nboard = [[0 for i in range(n)] for j in range(n)]\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "solve(board, 0)\n"
        },
        {
          "id": "GlobalBlock_6",
          "code": "print(\"The total number of solutions are:\", len(solution))\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        },
        {
          "from": "GlobalBlock_5",
          "to": "GlobalBlock_6"
        }
      ]
    }
  }
]