{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 66,
  "functions": [
    {
      "name": "generate_sum_of_subsets_soln",
      "type": "function",
      "start_line": 13,
      "end_line": 19,
      "functions": [],
      "classes": [],
      "simplified_code": "def generate_sum_of_subsets_soln(nums: list[int], max_sum: int) -> list[list[int]]:\n    result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n    return result",
      "blocks": [
        {
          "id": 1,
          "label": "def generate_sum_of_subsets_soln(nums: list[int], max_sum: int) -> list[list[int]]:",
          "successors": [
            {
              "id": 2,
              "label": "    result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)",
              "successors": [
                {
                  "id": 3,
                  "label": "    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "    return result",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "create_state_space_tree",
      "type": "function",
      "start_line": 22,
      "end_line": 51,
      "functions": [],
      "classes": [],
      "simplified_code": "def create_state_space_tree(\n    nums: list[int],\n    max_sum: int,\n    num_index: int,\n    path: list[int],\n    result: list[list[int]],\n    remaining_nums_sum: int,\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"\n    if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\n        return\n    if sum(path) == max_sum:\n        result.append(path)\n        return\n    for index in range(num_index, len(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
      "blocks": [
        {
          "id": 1,
          "label": "def create_state_space_tree(\n    nums: list[int],\n    max_sum: int,\n    num_index: int,\n    path: list[int],\n    result: list[list[int]],\n    remaining_nums_sum: int,\n) -> None:",
          "successors": [
            {
              "id": 2,
              "label": "    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"",
              "successors": [
                {
                  "id": 3,
                  "label": "    if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:",
                  "successors": [
                    {
                      "id": 4,
                      "label": "        return",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 5,
                  "label": "    if sum(path) == max_sum:",
                  "successors": [
                    {
                      "id": 6,
                      "label": "        result.append(path)",
                      "successors": [
                        {
                          "id": 7,
                          "label": "        return",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 8,
                  "label": "    for index in range(num_index, len(nums)):",
                  "successors": [
                    {
                      "id": 9,
                      "label": "        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "classes": [],
  "simplified_code": "\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"\n\nfrom __future__ import annotations\n\n\n    return result\n\n\n        )\n\n\n\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n\n\"\"\"\nnums = [3, 34, 4, 12, 5, 2]\nmax_sum = 9\nresult = generate_sum_of_subsets_soln(nums, max_sum)\nprint(*result)",
  "blocks": [
    {
      "id": 1,
      "label": "nums = [3, 34, 4, 12, 5, 2]",
      "successors": [
        {
          "id": 2,
          "label": "max_sum = 9",
          "successors": [
            {
              "id": 3,
              "label": "result = generate_sum_of_subsets_soln(nums, max_sum)",
              "successors": [
                {
                  "id": 4,
                  "label": "print(*result)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}