[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 66,
    "children": [
      {
        "decl_name": "generate_sum_of_subsets_soln",
        "start_line": 12,
        "end_line": 18,
        "children": [],
        "code": "def generate_sum_of_subsets_soln(nums: list[int], max_sum: int) -> list[list[int]]:\n    result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n    return result\n",
        "cfg": {
          "nodes": [
            {
              "id": "generate_sum_of_subsets_soln_1",
              "code": "def generate_sum_of_subsets_soln(nums: list[int], max_sum: int) -> list[list[int]]:\n    result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n    return result\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "create_state_space_tree",
        "start_line": 21,
        "end_line": 50,
        "children": [],
        "code": "def create_state_space_tree(\n    nums: list[int],\n    max_sum: int,\n    num_index: int,\n    path: list[int],\n    result: list[list[int]],\n    remaining_nums_sum: int,\n) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"\n    if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\n        return\n    if sum(path) == max_sum:\n        result.append(path)\n        return\n    for index in range(num_index, len(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "create_state_space_tree_1",
              "code": "def create_state_space_tree(\n    nums: list[int],\n    max_sum: int,\n    num_index: int,\n    path: list[int],\n    result: list[list[int]],\n    remaining_nums_sum: int,\n) -> None:\n"
            },
            {
              "id": "create_state_space_tree_2",
              "code": "    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"\n"
            },
            {
              "id": "create_state_space_tree_3",
              "code": "    if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\n        return\n"
            },
            {
              "id": "create_state_space_tree_4",
              "code": "    if sum(path) == max_sum:\n        result.append(path)\n        return\n"
            },
            {
              "id": "create_state_space_tree_5",
              "code": "    for index in range(num_index, len(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )\n"
            }
          ],
          "edges": [
            {
              "from": "create_state_space_tree_1",
              "to": "create_state_space_tree_2"
            },
            {
              "from": "create_state_space_tree_2",
              "to": "create_state_space_tree_3"
            },
            {
              "from": "create_state_space_tree_3",
              "to": "create_state_space_tree_4"
            },
            {
              "from": "create_state_space_tree_3",
              "to": "create_state_space_tree_5"
            },
            {
              "from": "create_state_space_tree_5",
              "to": "create_state_space_tree_3"
            }
          ]
        }
      }
    ],
    "code": "\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"\n\nfrom __future__ import annotations\n\n\n\n\n\n\n\"\"\"\nremove the comment to take an input from the user\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n\n\"\"\"\nnums = [3, 34, 4, 12, 5, 2]\nmax_sum = 9\nresult = generate_sum_of_subsets_soln(nums, max_sum)\nprint(*result)\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "from __future__ import annotations\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "print(\"Enter the elements\")\nnums = list(map(int, input().split()))\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "nums = [3, 34, 4, 12, 5, 2]\nmax_sum = 9\nresult = generate_sum_of_subsets_soln(nums, max_sum)\nprint(*result)\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_4"
        }
      ]
    }
  }
]