[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 5,
    "children": [],
    "code": "from typing import cast\nfrom unittest.mock import AsyncMock\n\nimport pytest\nfrom fastapi import WebSocket, WebSocketDisconnect\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from typing import cast\nfrom unittest.mock import AsyncMock\n\nimport pytest\nfrom fastapi import WebSocket, WebSocketDisconnect\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "mock_websocket",
    "start_line": 16,
    "end_line": 19,
    "children": [],
    "code": "@pytest.fixture\ndef mock_websocket() -> AsyncMock:\n    return AsyncMock(spec=WebSocket)\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "mock_websocket_1",
          "code": "@pytest.fixture\n"
        },
        {
          "id": "mock_websocket_2",
          "code": "def mock_websocket() -> AsyncMock:\n    return AsyncMock(spec=WebSocket)\n"
        }
      ],
      "edges": [
        {
          "from": "mock_websocket_1",
          "to": "mock_websocket_2"
        }
      ]
    }
  },
  {
    "decl_name": "mock_manager",
    "start_line": 21,
    "end_line": 24,
    "children": [],
    "code": "@pytest.fixture\ndef mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "mock_manager_1",
          "code": "@pytest.fixture\n"
        },
        {
          "id": "mock_manager_2",
          "code": "def mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)\n"
        }
      ],
      "edges": [
        {
          "from": "mock_manager_1",
          "to": "mock_manager_2"
        }
      ]
    }
  },
  {
    "decl_name": "test_websocket_router_subscribe",
    "start_line": 26,
    "end_line": 47,
    "children": [],
    "code": "@pytest.mark.asyncio\nasync def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_websocket_router_subscribe_1",
          "code": "@pytest.mark.asyncio\nasync def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
          "id": "test_websocket_router_subscribe_2",
          "code": "    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n"
        },
        {
          "id": "test_websocket_router_subscribe_3",
          "code": "    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n"
        },
        {
          "id": "test_websocket_router_subscribe_4",
          "code": "    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n"
        }
      ],
      "edges": [
        {
          "from": "test_websocket_router_subscribe_1",
          "to": "test_websocket_router_subscribe_2"
        },
        {
          "from": "test_websocket_router_subscribe_2",
          "to": "test_websocket_router_subscribe_3"
        },
        {
          "from": "test_websocket_router_subscribe_3",
          "to": "test_websocket_router_subscribe_4"
        }
      ]
    }
  },
  {
    "decl_name": "test_websocket_router_unsubscribe",
    "start_line": 49,
    "end_line": 70,
    "children": [],
    "code": "@pytest.mark.asyncio\nasync def test_websocket_router_unsubscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_websocket_router_unsubscribe_1",
          "code": "@pytest.mark.asyncio\nasync def test_websocket_router_unsubscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
          "id": "test_websocket_router_unsubscribe_2",
          "code": "    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n"
        },
        {
          "id": "test_websocket_router_unsubscribe_3",
          "code": "    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n"
        },
        {
          "id": "test_websocket_router_unsubscribe_4",
          "code": "    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n"
        }
      ],
      "edges": [
        {
          "from": "test_websocket_router_unsubscribe_1",
          "to": "test_websocket_router_unsubscribe_2"
        },
        {
          "from": "test_websocket_router_unsubscribe_2",
          "to": "test_websocket_router_unsubscribe_3"
        },
        {
          "from": "test_websocket_router_unsubscribe_3",
          "to": "test_websocket_router_unsubscribe_4"
        }
      ]
    }
  },
  {
    "decl_name": "test_websocket_router_invalid_method",
    "start_line": 72,
    "end_line": 91,
    "children": [],
    "code": "@pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n\n    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n\n    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_websocket_router_invalid_method_1",
          "code": "@pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
          "id": "test_websocket_router_invalid_method_2",
          "code": "    mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n"
        },
        {
          "id": "test_websocket_router_invalid_method_3",
          "code": "    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n"
        },
        {
          "id": "test_websocket_router_invalid_method_4",
          "code": "    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n"
        }
      ],
      "edges": [
        {
          "from": "test_websocket_router_invalid_method_1",
          "to": "test_websocket_router_invalid_method_2"
        },
        {
          "from": "test_websocket_router_invalid_method_2",
          "to": "test_websocket_router_invalid_method_3"
        },
        {
          "from": "test_websocket_router_invalid_method_3",
          "to": "test_websocket_router_invalid_method_4"
        }
      ]
    }
  },
  {
    "decl_name": "test_handle_subscribe_success",
    "start_line": 93,
    "end_line": 107,
    "children": [],
    "code": "async def test_handle_subscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_handle_subscribe_success_1",
          "code": "async def test_handle_subscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
          "id": "test_handle_subscribe_success_2",
          "code": "    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n"
        },
        {
          "id": "test_handle_subscribe_success_3",
          "code": "    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n"
        },
        {
          "id": "test_handle_subscribe_success_4",
          "code": "    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n"
        }
      ],
      "edges": [
        {
          "from": "test_handle_subscribe_success_1",
          "to": "test_handle_subscribe_success_2"
        },
        {
          "from": "test_handle_subscribe_success_2",
          "to": "test_handle_subscribe_success_3"
        },
        {
          "from": "test_handle_subscribe_success_3",
          "to": "test_handle_subscribe_success_4"
        }
      ]
    }
  },
  {
    "decl_name": "test_handle_subscribe_missing_data",
    "start_line": 109,
    "end_line": 123,
    "children": [],
    "code": "async def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.SUBSCRIBE)\n\n    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_handle_subscribe_missing_data_1",
          "code": "async def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
          "id": "test_handle_subscribe_missing_data_2",
          "code": "    message = WsMessage(method=Methods.SUBSCRIBE)\n"
        },
        {
          "id": "test_handle_subscribe_missing_data_3",
          "code": "    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n"
        },
        {
          "id": "test_handle_subscribe_missing_data_4",
          "code": "    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n"
        }
      ],
      "edges": [
        {
          "from": "test_handle_subscribe_missing_data_1",
          "to": "test_handle_subscribe_missing_data_2"
        },
        {
          "from": "test_handle_subscribe_missing_data_2",
          "to": "test_handle_subscribe_missing_data_3"
        },
        {
          "from": "test_handle_subscribe_missing_data_3",
          "to": "test_handle_subscribe_missing_data_4"
        }
      ]
    }
  },
  {
    "decl_name": "test_handle_unsubscribe_success",
    "start_line": 125,
    "end_line": 139,
    "children": [],
    "code": "async def test_handle_unsubscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_handle_unsubscribe_success_1",
          "code": "async def test_handle_unsubscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
          "id": "test_handle_unsubscribe_success_2",
          "code": "    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n"
        },
        {
          "id": "test_handle_unsubscribe_success_3",
          "code": "    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n"
        },
        {
          "id": "test_handle_unsubscribe_success_4",
          "code": "    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n"
        }
      ],
      "edges": [
        {
          "from": "test_handle_unsubscribe_success_1",
          "to": "test_handle_unsubscribe_success_2"
        },
        {
          "from": "test_handle_unsubscribe_success_2",
          "to": "test_handle_unsubscribe_success_3"
        },
        {
          "from": "test_handle_unsubscribe_success_3",
          "to": "test_handle_unsubscribe_success_4"
        }
      ]
    }
  },
  {
    "decl_name": "test_handle_unsubscribe_missing_data",
    "start_line": 141,
    "end_line": 154,
    "children": [],
    "code": "async def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n    message = WsMessage(method=Methods.UNSUBSCRIBE)\n\n    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n\n    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "test_handle_unsubscribe_missing_data_1",
          "code": "async def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
          "id": "test_handle_unsubscribe_missing_data_2",
          "code": "    message = WsMessage(method=Methods.UNSUBSCRIBE)\n"
        },
        {
          "id": "test_handle_unsubscribe_missing_data_3",
          "code": "    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n"
        },
        {
          "id": "test_handle_unsubscribe_missing_data_4",
          "code": "    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n"
        }
      ],
      "edges": [
        {
          "from": "test_handle_unsubscribe_missing_data_1",
          "to": "test_handle_unsubscribe_missing_data_2"
        },
        {
          "from": "test_handle_unsubscribe_missing_data_2",
          "to": "test_handle_unsubscribe_missing_data_3"
        },
        {
          "from": "test_handle_unsubscribe_missing_data_3",
          "to": "test_handle_unsubscribe_missing_data_4"
        }
      ]
    }
  }
]