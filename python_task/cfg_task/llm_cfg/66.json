[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 23,
    "children": [
      {
        "decl_name": "get_service_name",
        "start_line": 15,
        "end_line": 16,
        "children": [],
        "code": "def get_service_name():\n    return _SERVICE_NAME\n",
        "cfg": {
          "nodes": [
            {
              "id": "get_service_name_1",
              "code": "def get_service_name():\n    return _SERVICE_NAME\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "set_service_name",
        "start_line": 19,
        "end_line": 21,
        "children": [],
        "code": "def set_service_name(name: str):\n    global _SERVICE_NAME\n    _SERVICE_NAME = name\n",
        "cfg": {
          "nodes": [
            {
              "id": "set_service_name_1",
              "code": "def set_service_name(name: str):\n    global _SERVICE_NAME\n    _SERVICE_NAME = name\n"
            }
          ],
          "edges": []
        }
      }
    ],
    "code": "import logging\nimport os\nimport signal\nimport sys\nfrom abc import ABC, abstractmethod\nfrom multiprocessing import Process, set_start_method\nfrom typing import Optional\n\nfrom backend.util.logging import configure_logging\nfrom backend.util.metrics import sentry_init\n\nlogger = logging.getLogger(__name__)\n_SERVICE_NAME = \"MainProcess\"\n\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import logging\nimport os\nimport signal\nimport sys\nfrom abc import ABC, abstractmethod\nfrom multiprocessing import Process, set_start_method\nfrom typing import Optional\n"
        },
        {
          "id": "GlobalBlock_2",
          "code": "\n"
        },
        {
          "id": "GlobalBlock_3",
          "code": "from backend.util.logging import configure_logging\nfrom backend.util.metrics import sentry_init\n"
        },
        {
          "id": "GlobalBlock_4",
          "code": "\n"
        },
        {
          "id": "GlobalBlock_5",
          "code": "logger = logging.getLogger(__name__)\n_SERVICE_NAME = \"MainProcess\"\n"
        }
      ],
      "edges": [
        {
          "from": "GlobalBlock_1",
          "to": "GlobalBlock_2"
        },
        {
          "from": "GlobalBlock_2",
          "to": "GlobalBlock_3"
        },
        {
          "from": "GlobalBlock_3",
          "to": "GlobalBlock_4"
        },
        {
          "from": "GlobalBlock_4",
          "to": "GlobalBlock_5"
        }
      ]
    }
  },
  {
    "decl_name": "AppProcess",
    "start_line": 24,
    "end_line": 122,
    "children": [
      {
        "decl_name": "AppProcess.run",
        "start_line": 38,
        "end_line": 42,
        "children": [],
        "code": "    def run(self):\n        \"\"\"\n        The method that will be executed in the process.\n        \"\"\"\n        pass\n",
        "cfg": {
          "nodes": [
            {
              "id": "AppProcess.run_1",
              "code": "def run(self):\n        \"\"\"\n        The method that will be executed in the process.\n        \"\"\"\n        pass\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AppProcess.service_name",
        "start_line": 46,
        "end_line": 47,
        "children": [],
        "code": "    def service_name(cls) -> str:\n        return cls.__name__\n",
        "cfg": {
          "nodes": [
            {
              "id": "AppProcess.service_name_1",
              "code": "def service_name(cls) -> str:\n        return cls.__name__\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AppProcess.cleanup",
        "start_line": 49,
        "end_line": 54,
        "children": [],
        "code": "    def cleanup(self):\n        \"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"\n        pass\n",
        "cfg": {
          "nodes": [
            {
              "id": "AppProcess.cleanup_1",
              "code": "def cleanup(self):\n        \"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"\n        pass\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AppProcess.health_check",
        "start_line": 56,
        "end_line": 60,
        "children": [],
        "code": "    def health_check(self):\n        \"\"\"\n        A method to check the health of the process.\n        \"\"\"\n        pass\n",
        "cfg": {
          "nodes": [
            {
              "id": "AppProcess.health_check_1",
              "code": "def health_check(self):\n        \"\"\"\n        A method to check the health of the process.\n        \"\"\"\n        pass\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AppProcess.execute_run_command",
        "start_line": 62,
        "end_line": 74,
        "children": [],
        "code": "    def execute_run_command(self, silent):\n        signal.signal(signal.SIGTERM, self._self_terminate)\n\n        try:\n            if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")\n\n            set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()\n        except (KeyboardInterrupt, SystemExit) as e:\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")\n",
        "cfg": {
          "nodes": [
            {
              "id": "AppProcess.execute_run_command_1",
              "code": "def execute_run_command(self, silent):\n        signal.signal(signal.SIGTERM, self._self_terminate)\n"
            },
            {
              "id": "AppProcess.execute_run_command_2",
              "code": "        try:\n            if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")\n"
            },
            {
              "id": "AppProcess.execute_run_command_3",
              "code": "            set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()\n"
            },
            {
              "id": "AppProcess.execute_run_command_4",
              "code": "        except (KeyboardInterrupt, SystemExit) as e:\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")\n"
            }
          ],
          "edges": [
            {
              "from": "AppProcess.execute_run_command_1",
              "to": "AppProcess.execute_run_command_2"
            },
            {
              "from": "AppProcess.execute_run_command_2",
              "to": "AppProcess.execute_run_command_3"
            },
            {
              "from": "AppProcess.execute_run_command_2",
              "to": "AppProcess.execute_run_command_4"
            }
          ]
        }
      },
      {
        "decl_name": "AppProcess._self_terminate",
        "start_line": 76,
        "end_line": 78,
        "children": [],
        "code": "    def _self_terminate(self, signum: int, frame):\n        self.cleanup()\n        sys.exit(0)\n",
        "cfg": {
          "nodes": [
            {
              "id": "AppProcess._self_terminate_1",
              "code": "def _self_terminate(self, signum: int, frame):\n        self.cleanup()\n        sys.exit(0)\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AppProcess.__enter__",
        "start_line": 82,
        "end_line": 84,
        "children": [],
        "code": "    def __enter__(self):\n        self.start(background=True)\n        return self\n",
        "cfg": {
          "nodes": [
            {
              "id": "AppProcess.__enter___1",
              "code": "def __enter__(self):\n        self.start(background=True)\n        return self\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AppProcess.__exit__",
        "start_line": 86,
        "end_line": 87,
        "children": [],
        "code": "    def __exit__(self, *args, **kwargs):\n        self.stop()\n",
        "cfg": {
          "nodes": [
            {
              "id": "AppProcess.__exit___1",
              "code": "def __exit__(self, *args, **kwargs):\n        self.stop()\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "AppProcess.start",
        "start_line": 89,
        "end_line": 111,
        "children": [],
        "code": "    def start(self, background: bool = False, silent: bool = False, **proc_args) -> int:\n        \"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"\n        if not background:\n            self.execute_run_command(silent)\n            return 0\n\n        self.process = Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )\n        self.process.start()\n        self.health_check()\n        return self.process.pid or 0\n",
        "cfg": {
          "nodes": [
            {
              "id": "AppProcess.start_1",
              "code": "def start(self, background: bool = False, silent: bool = False, **proc_args) -> int:\n        \"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"\n"
            },
            {
              "id": "AppProcess.start_2",
              "code": "        if not background:\n            self.execute_run_command(silent)\n            return 0\n"
            },
            {
              "id": "AppProcess.start_3",
              "code": "        self.process = Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )\n        self.process.start()\n        self.health_check()\n        return self.process.pid or 0\n"
            }
          ],
          "edges": [
            {
              "from": "AppProcess.start_1",
              "to": "AppProcess.start_2"
            },
            {
              "from": "AppProcess.start_2",
              "to": "AppProcess.start_3"
            }
          ]
        }
      },
      {
        "decl_name": "AppProcess.stop",
        "start_line": 113,
        "end_line": 122,
        "children": [],
        "code": "    def stop(self):\n        \"\"\"\n        Stop the background process.\n        \"\"\"\n        if not self.process:\n            return\n\n        self.process.terminate()\n        self.process.join()\n        self.process = None\n",
        "cfg": {
          "nodes": [
            {
              "id": "AppProcess.stop_1",
              "code": "def stop(self):\n        \"\"\"\n        Stop the background process.\n        \"\"\"\n"
            },
            {
              "id": "AppProcess.stop_2",
              "code": "        if not self.process:\n            return\n"
            },
            {
              "id": "AppProcess.stop_3",
              "code": "        self.process.terminate()\n        self.process.join()\n        self.process = None\n"
            }
          ],
          "edges": [
            {
              "from": "AppProcess.stop_1",
              "to": "AppProcess.stop_2"
            },
            {
              "from": "AppProcess.stop_2",
              "to": "AppProcess.stop_3"
            }
          ]
        }
      }
    ],
    "code": "class AppProcess(ABC):\n    \"\"\"\n    A class to represent an object that can be executed in a background process.\n    \"\"\"\n\n    process: Optional[Process] = None\n\n    set_start_method(\"spawn\", force=True)\n    configure_logging()\n    sentry_init()\n\n    # Methods that are executed INSIDE the process #\n\n    @abstractmethod\n\n    @classmethod\n    @property\n\n\n\n\n\n    # Methods that are executed OUTSIDE the process #\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "AppProcess_1",
          "code": "class AppProcess(ABC):\n"
        },
        {
          "id": "AppProcess_2",
          "code": "    \"\"\"\n    A class to represent an object that can be executed in a background process.\n    \"\"\"\n"
        },
        {
          "id": "AppProcess_3",
          "code": "\n"
        },
        {
          "id": "AppProcess_4",
          "code": "    process: Optional[Process] = None\n"
        },
        {
          "id": "AppProcess_5",
          "code": "\n"
        },
        {
          "id": "AppProcess_6",
          "code": "    set_start_method(\"spawn\", force=True)\n    configure_logging()\n    sentry_init()\n"
        },
        {
          "id": "AppProcess_7",
          "code": "\n"
        },
        {
          "id": "AppProcess_8",
          "code": "    # Methods that are executed INSIDE the process #\n"
        },
        {
          "id": "AppProcess_9",
          "code": "\n"
        },
        {
          "id": "AppProcess_10",
          "code": "    @abstractmethod\n"
        },
        {
          "id": "AppProcess_11",
          "code": "\n"
        },
        {
          "id": "AppProcess_12",
          "code": "    @classmethod\n    @property\n"
        },
        {
          "id": "AppProcess_13",
          "code": "\n\n\n\n\n"
        },
        {
          "id": "AppProcess_14",
          "code": "    # Methods that are executed OUTSIDE the process #\n"
        }
      ],
      "edges": [
        {
          "from": "AppProcess_1",
          "to": "AppProcess_2"
        },
        {
          "from": "AppProcess_2",
          "to": "AppProcess_3"
        },
        {
          "from": "AppProcess_3",
          "to": "AppProcess_4"
        },
        {
          "from": "AppProcess_4",
          "to": "AppProcess_5"
        },
        {
          "from": "AppProcess_5",
          "to": "AppProcess_6"
        },
        {
          "from": "AppProcess_6",
          "to": "AppProcess_7"
        },
        {
          "from": "AppProcess_7",
          "to": "AppProcess_8"
        },
        {
          "from": "AppProcess_8",
          "to": "AppProcess_9"
        },
        {
          "from": "AppProcess_9",
          "to": "AppProcess_10"
        },
        {
          "from": "AppProcess_10",
          "to": "AppProcess_11"
        },
        {
          "from": "AppProcess_11",
          "to": "AppProcess_12"
        },
        {
          "from": "AppProcess_12",
          "to": "AppProcess_13"
        },
        {
          "from": "AppProcess_13",
          "to": "AppProcess_14"
        }
      ]
    }
  }
]