[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 44,
    "children": [
      {
        "decl_name": "binary_count_trailing_zeros",
        "start_line": 3,
        "end_line": 37,
        "children": [],
        "code": "def binary_count_trailing_zeros(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return 0 if (a == 0) else int(log2(a & -a))\n",
        "cfg": {
          "nodes": [
            {
              "id": "binary_count_trailing_zeros_1",
              "code": "def binary_count_trailing_zeros(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n"
            },
            {
              "id": "binary_count_trailing_zeros_2",
              "code": "    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n"
            },
            {
              "id": "binary_count_trailing_zeros_3",
              "code": "    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n"
            },
            {
              "id": "binary_count_trailing_zeros_4",
              "code": "    return 0 if (a == 0) else int(log2(a & -a))\n"
            }
          ],
          "edges": [
            {
              "from": "binary_count_trailing_zeros_1",
              "to": "binary_count_trailing_zeros_2"
            },
            {
              "from": "binary_count_trailing_zeros_2",
              "to": "binary_count_trailing_zeros_3"
            },
            {
              "from": "binary_count_trailing_zeros_2",
              "to": "binary_count_trailing_zeros_4"
            },
            {
              "from": "binary_count_trailing_zeros_3",
              "to": "binary_count_trailing_zeros_4"
            }
          ]
        }
      },
      {
        "decl_name": "__main__ block",
        "start_line": 40,
        "end_line": 43,
        "children": [],
        "code": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
        "cfg": {
          "nodes": [
            {
              "id": "__main__ block_1",
              "code": "if __name__ == \"__main__\":\n"
            },
            {
              "id": "__main__ block_2",
              "code": "    import doctest\n\n    doctest.testmod()\n"
            }
          ],
          "edges": [
            {
              "from": "__main__ block_1",
              "to": "__main__ block_2"
            }
          ]
        }
      }
    ],
    "code": "from math import log2\n\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from math import log2\n"
        }
      ],
      "edges": []
    }
  }
]