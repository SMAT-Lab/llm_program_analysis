{
  "name": "example_script",
  "type": "CFG",
  "start_line": 1,
  "end_line": 109,
  "functions": [],
  "classes": [
    {
      "name": "ReadCsvBlock",
      "type": "class",
      "start_line": 5,
      "end_line": 109,
      "functions": [
        {
          "name": "__init__",
          "type": "function",
          "start_line": 48,
          "end_line": 70,
          "functions": [],
          "classes": [],
          "simplified_code": "    def __init__(self):\n        super().__init__(\n            id=\"acf7625e-d2cb-4941-bfeb-2819fc6fc015\",\n            input_schema=ReadCsvBlock.Input,\n            output_schema=ReadCsvBlock.Output,\n            description=\"Reads a CSV file and outputs the data as a list of dictionaries and individual rows via rows.\",\n            contributors=[ContributorDetails(name=\"Nicholas Tindle\")],\n            categories={BlockCategory.TEXT, BlockCategory.DATA},\n            test_input={\n                \"contents\": \"a, b, c\\n1,2,3\\n4,5,6\",\n            },\n            test_output=[\n                (\"row\", {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}),\n                (\"row\", {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"}),\n                (\n                    \"all_data\",\n                    [\n                        {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"},\n                        {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"},\n                    ],\n                ),\n            ],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "def __init__(self):",
              "successors": [
                {
                  "id": 2,
                  "label": "super().__init__(\n    id=\"acf7625e-d2cb-4941-bfeb-2819fc6fc015\",\n    input_schema=ReadCsvBlock.Input,\n    output_schema=ReadCsvBlock.Output,\n    description=\"Reads a CSV file and outputs the data as a list of dictionaries and individual rows via rows.\",\n    contributors=[ContributorDetails(name=\"Nicholas Tindle\")],\n    categories={BlockCategory.TEXT, BlockCategory.DATA},\n    test_input={\n        \"contents\": \"a, b, c\\n1,2,3\\n4,5,6\",\n    },\n    test_output=[\n        (\"row\", {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}),\n        (\"row\", {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"}),\n        (\n            \"all_data\",\n            [\n                {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"},\n                {\"a\": \"4\", \"b\": \"5\", \"c\": \"6\"},\n            ],\n        ),\n    ],\n)",
                  "successors": []
                }
              ]
            }
          ]
        },
        {
          "name": "run",
          "type": "function",
          "start_line": 72,
          "end_line": 109,
          "functions": [
            {
              "name": "process_row",
              "type": "function",
              "start_line": 93,
              "end_line": 101,
              "functions": [],
              "classes": [],
              "simplified_code": "        def process_row(row):\n            data = {}\n            for i, value in enumerate(row):\n                if i not in input_data.skip_columns:\n                    if input_data.has_header and header:\n                        data[header[i]] = value.strip() if input_data.strip else value\n                    else:\n                        data[str(i)] = value.strip() if input_data.strip else value\n            return data",
              "blocks": [
                {
                  "id": 1,
                  "label": "def process_row(row):",
                  "successors": [
                    {
                      "id": 2,
                      "label": "data = {}",
                      "successors": [
                        {
                          "id": 3,
                          "label": "for i, value in enumerate(row):",
                          "successors": [
                            {
                              "id": 4,
                              "label": "if i not in input_data.skip_columns:",
                              "successors": [
                                {
                                  "id": 5,
                                  "label": "if input_data.has_header and header:",
                                  "successors": [
                                    {
                                      "id": 6,
                                      "label": "data[header[i]] = value.strip() if input_data.strip else value",
                                      "successors": [
                                        {
                                          "id": 9,
                                          "label": "return data",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 7,
                                      "label": "else:",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "data[str(i)] = value.strip() if input_data.strip else value",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "return data",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 9,
                              "label": "return data",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "classes": [],
          "simplified_code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        import csv\n        from io import StringIO\n\n        csv_file = StringIO(input_data.contents)\n        reader = csv.reader(\n            csv_file,\n            delimiter=input_data.delimiter,\n            quotechar=input_data.quotechar,\n            escapechar=input_data.escapechar,\n        )\n\n        header = None\n        if input_data.has_header:\n            header = next(reader)\n            if input_data.strip:\n                header = [h.strip() for h in header]\n\n        for _ in range(input_data.skip_rows):\n            next(reader)\n\n            return data\n\n        all_data = []\n        for row in reader:\n            processed_row = process_row(row)\n            all_data.append(processed_row)\n            yield \"row\", processed_row\n\n        yield \"all_data\", all_data",
          "blocks": [
            {
              "id": 1,
              "label": "def run(self, input_data: Input, **kwargs) -> BlockOutput:",
              "successors": [
                {
                  "id": 2,
                  "label": "import csv\nfrom io import StringIO",
                  "successors": [
                    {
                      "id": 3,
                      "label": "csv_file = StringIO(input_data.contents)\nreader = csv.reader(\n    csv_file,\n    delimiter=input_data.delimiter,\n    quotechar=input_data.quotechar,\n    escapechar=input_data.escapechar,\n)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "header = None",
                          "successors": [
                            {
                              "id": 5,
                              "label": "if input_data.has_header:",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "header = next(reader)\nif input_data.strip:\n    header = [h.strip() for h in header]",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "for _ in range(input_data.skip_rows):",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "next(reader)\nreturn data",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 9,
                                      "label": "all_data = []\nfor row in reader:\n    processed_row = process_row(row)\n    all_data.append(processed_row)\n    yield \"row\", processed_row",
                                      "successors": [
                                        {
                                          "id": 10,
                                          "label": "yield \"all_data\", all_data",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "class",
          "start_line": 6,
          "end_line": 38,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Input(BlockSchema):\n        contents: str = SchemaField(\n            description=\"The contents of the CSV file to read\",\n            placeholder=\"a, b, c\\n1,2,3\\n4,5,6\",\n        )\n        delimiter: str = SchemaField(\n            description=\"The delimiter used in the CSV file\",\n            default=\",\",\n        )\n        quotechar: str = SchemaField(\n            description=\"The character used to quote fields\",\n            default='\"',\n        )\n        escapechar: str = SchemaField(\n            description=\"The character used to escape the delimiter\",\n            default=\"\\\\\",\n        )\n        has_header: bool = SchemaField(\n            description=\"Whether the CSV file has a header row\",\n            default=True,\n        )\n        skip_rows: int = SchemaField(\n            description=\"The number of rows to skip from the start of the file\",\n            default=0,\n        )\n        strip: bool = SchemaField(\n            description=\"Whether to strip whitespace from the values\",\n            default=True,\n        )\n        skip_columns: list[str] = SchemaField(\n            description=\"The columns to skip from the start of the row\",\n            default=[],\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Input(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "contents: str = SchemaField(\n    description=\"The contents of the CSV file to read\",\n    placeholder=\"a, b, c\\n1,2,3\\n4,5,6\",\n)",
                  "successors": [
                    {
                      "id": 3,
                      "label": "delimiter: str = SchemaField(\n    description=\"The delimiter used in the CSV file\",\n    default=\",\",\n)",
                      "successors": [
                        {
                          "id": 4,
                          "label": "quotechar: str = SchemaField(\n    description=\"The character used to quote fields\",\n    default='\"',\n)",
                          "successors": [
                            {
                              "id": 5,
                              "label": "escapechar: str = SchemaField(\n    description=\"The character used to escape the delimiter\",\n    default=\"\\\\\",\n)",
                              "successors": [
                                {
                                  "id": 6,
                                  "label": "has_header: bool = SchemaField(\n    description=\"Whether the CSV file has a header row\",\n    default=True,\n)",
                                  "successors": [
                                    {
                                      "id": 7,
                                      "label": "skip_rows: int = SchemaField(\n    description=\"The number of rows to skip from the start of the file\",\n    default=0,\n)",
                                      "successors": [
                                        {
                                          "id": 8,
                                          "label": "strip: bool = SchemaField(\n    description=\"Whether to strip whitespace from the values\",\n    default=True,\n)",
                                          "successors": [
                                            {
                                              "id": 9,
                                              "label": "skip_columns: list[str] = SchemaField(\n    description=\"The columns to skip from the start of the row\",\n    default=[],\n)",
                                              "successors": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Output",
          "type": "class",
          "start_line": 40,
          "end_line": 46,
          "functions": [],
          "classes": [],
          "simplified_code": "    class Output(BlockSchema):\n        row: dict[str, str] = SchemaField(\n            description=\"The data produced from each row in the CSV file\"\n        )\n        all_data: list[dict[str, str]] = SchemaField(\n            description=\"All the data in the CSV file as a list of rows\"\n        )",
          "blocks": [
            {
              "id": 1,
              "label": "class Output(BlockSchema):",
              "successors": [
                {
                  "id": 2,
                  "label": "    row: dict[str, str] = SchemaField(\n        description=\"The data produced from each row in the CSV file\"\n    )",
                  "successors": [
                    {
                      "id": 3,
                      "label": "    all_data: list[dict[str, str]] = SchemaField(\n        description=\"All the data in the CSV file as a list of rows\"\n    )",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "simplified_code": "class ReadCsvBlock(Block):\n        )\n\n        )\n\n        )\n\n        yield \"all_data\", all_data",
      "blocks": [
        {
          "id": 1,
          "label": "class ReadCsvBlock(Block):",
          "successors": [
            {
              "id": 2,
              "label": "\n    def run(self):",
              "successors": [
                {
                  "id": 3,
                  "label": "df = pd.read_csv(self.path, nrows=50)",
                  "successors": [
                    {
                      "id": 4,
                      "label": "print(\"Initial data read successfully\")",
                      "successors": [
                        {
                          "id": 5,
                          "label": "for column in df.columns:",
                          "successors": [
                            {
                              "id": 6,
                              "label": "if df[column].dtype == 'object':",
                              "successors": [
                                {
                                  "id": 7,
                                  "label": "df[column] = df[column].astype(str)",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "print(f\"Converted column {column} to string\")",
                                      "successors": [
                                        {
                                          "id": 5,
                                          "label": "for column in df.columns:",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 8,
                                  "label": "else:",
                                  "successors": [
                                    {
                                      "id": 9,
                                      "label": "print(f\"Converted column {column} to string\")",
                                      "successors": [
                                        {
                                          "id": 5,
                                          "label": "for column in df.columns:",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 10,
                              "label": "all_data = df.to_dict(orient='list')",
                              "successors": [
                                {
                                  "id": 11,
                                  "label": "print(\"Data conversion to dict format complete\")",
                                  "successors": [
                                    {
                                      "id": 12,
                                      "label": "yield \"all_data\", all_data",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "simplified_code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import ContributorDetails, SchemaField\n\n\n        yield \"all_data\", all_data",
  "blocks": [
    {
      "id": 1,
      "label": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "successors": [
        {
          "id": 2,
          "label": "from backend.data.model import ContributorDetails, SchemaField",
          "successors": [
            {
              "id": 3,
              "label": "yield \"all_data\", all_data",
              "successors": []
            }
          ]
        }
      ]
    }
  ]
}