[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 9,
    "children": [],
    "code": "from prisma.models import User\n\nfrom backend.blocks.basic import AgentInputBlock, PrintToConsoleBlock\nfrom backend.blocks.text import FillTextTemplateBlock\nfrom backend.data import graph\nfrom backend.data.graph import create_graph\nfrom backend.data.user import get_or_create_user\nfrom backend.util.test import SpinTestServer, wait_execution\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "from prisma.models import User\n\nfrom backend.blocks.basic import AgentInputBlock, PrintToConsoleBlock\nfrom backend.blocks.text import FillTextTemplateBlock\nfrom backend.data import graph\nfrom backend.data.graph import create_graph\nfrom backend.data.user import get_or_create_user\nfrom backend.util.test import SpinTestServer, wait_execution\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "create_test_user",
    "start_line": 10,
    "end_line": 17,
    "children": [],
    "code": "async def create_test_user() -> User:\n    test_user_data = {\n        \"sub\": \"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n        \"email\": \"testuser#example.com\",\n        \"name\": \"Test User\",\n    }\n    user = await get_or_create_user(test_user_data)\n    return user\n",
    "cfg": {
      "nodes": [
        {
          "id": "create_test_user_1",
          "code": "async def create_test_user() -> User:\n"
        },
        {
          "id": "create_test_user_2",
          "code": "    test_user_data = {\n        \"sub\": \"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n        \"email\": \"testuser#example.com\",\n        \"name\": \"Test User\",\n    }\n"
        },
        {
          "id": "create_test_user_3",
          "code": "    user = await get_or_create_user(test_user_data)\n"
        },
        {
          "id": "create_test_user_4",
          "code": "    return user\n"
        }
      ],
      "edges": [
        {
          "from": "create_test_user_1",
          "to": "create_test_user_2"
        },
        {
          "from": "create_test_user_2",
          "to": "create_test_user_3"
        },
        {
          "from": "create_test_user_3",
          "to": "create_test_user_4"
        }
      ]
    }
  },
  {
    "decl_name": "create_test_graph",
    "start_line": 20,
    "end_line": 72,
    "children": [],
    "code": "def create_test_graph() -> graph.Graph:\n    \"\"\"\n    InputBlock\n               \\\n                 ---- FillTextTemplateBlock ---- PrintToConsoleBlock\n               /\n    InputBlock\n    \"\"\"\n    nodes = [\n        graph.Node(\n            block_id=AgentInputBlock().id,\n            input_default={\"name\": \"input_1\"},\n        ),\n        graph.Node(\n            block_id=AgentInputBlock().id,\n            input_default={\"name\": \"input_2\"},\n        ),\n        graph.Node(\n            block_id=FillTextTemplateBlock().id,\n            input_default={\n                \"format\": \"{a}, {b}{c}\",\n                \"values_#_c\": \"!!!\",\n            },\n        ),\n        graph.Node(block_id=PrintToConsoleBlock().id),\n    ]\n    links = [\n        graph.Link(\n            source_id=nodes[0].id,\n            sink_id=nodes[2].id,\n            source_name=\"result\",\n            sink_name=\"values_#_a\",\n        ),\n        graph.Link(\n            source_id=nodes[1].id,\n            sink_id=nodes[2].id,\n            source_name=\"result\",\n            sink_name=\"values_#_b\",\n        ),\n        graph.Link(\n            source_id=nodes[2].id,\n            sink_id=nodes[3].id,\n            source_name=\"output\",\n            sink_name=\"text\",\n        ),\n    ]\n\n    return graph.Graph(\n        name=\"TestGraph\",\n        description=\"Test graph\",\n        nodes=nodes,\n        links=links,\n    )\n",
    "cfg": {
      "nodes": [
        {
          "id": "create_test_graph_1",
          "code": "def create_test_graph() -> graph.Graph:\n    \"\"\"\n    InputBlock\n               \\\n                 ---- FillTextTemplateBlock ---- PrintToConsoleBlock\n               /\n    InputBlock\n    \"\"\"\n"
        },
        {
          "id": "create_test_graph_2",
          "code": "    nodes = [\n        graph.Node(\n            block_id=AgentInputBlock().id,\n            input_default={\"name\": \"input_1\"},\n        ),\n        graph.Node(\n            block_id=AgentInputBlock().id,\n            input_default={\"name\": \"input_2\"},\n        ),\n        graph.Node(\n            block_id=FillTextTemplateBlock().id,\n            input_default={\n                \"format\": \"{a}, {b}{c}\",\n                \"values_#_c\": \"!!!\",\n            },\n        ),\n        graph.Node(block_id=PrintToConsoleBlock().id),\n    ]\n"
        },
        {
          "id": "create_test_graph_3",
          "code": "    links = [\n        graph.Link(\n            source_id=nodes[0].id,\n            sink_id=nodes[2].id,\n            source_name=\"result\",\n            sink_name=\"values_#_a\",\n        ),\n        graph.Link(\n            source_id=nodes[1].id,\n            sink_id=nodes[2].id,\n            source_name=\"result\",\n            sink_name=\"values_#_b\",\n        ),\n        graph.Link(\n            source_id=nodes[2].id,\n            sink_id=nodes[3].id,\n            source_name=\"output\",\n            sink_name=\"text\",\n        ),\n    ]\n"
        },
        {
          "id": "create_test_graph_4",
          "code": "    return graph.Graph(\n        name=\"TestGraph\",\n        description=\"Test graph\",\n        nodes=nodes,\n        links=links,\n    )\n"
        }
      ],
      "edges": [
        {
          "from": "create_test_graph_1",
          "to": "create_test_graph_2"
        },
        {
          "from": "create_test_graph_2",
          "to": "create_test_graph_3"
        },
        {
          "from": "create_test_graph_3",
          "to": "create_test_graph_4"
        }
      ]
    }
  },
  {
    "decl_name": "sample_agent",
    "start_line": 75,
    "end_line": 85,
    "children": [],
    "code": "async def sample_agent():\n    async with SpinTestServer() as server:\n        test_user = await create_test_user()\n        test_graph = await create_graph(create_test_graph(), test_user.id)\n        input_data = {\"input_1\": \"Hello\", \"input_2\": \"World\"}\n        response = await server.agent_server.test_execute_graph(\n            test_graph.id, input_data, test_user.id\n        )\n        print(response)\n        result = await wait_execution(test_user.id, test_graph.id, response[\"id\"], 10)\n        print(result)\n",
    "cfg": {
      "nodes": [
        {
          "id": "sample_agent_1",
          "code": "async def sample_agent():\n    async with SpinTestServer() as server:\n"
        },
        {
          "id": "sample_agent_2",
          "code": "        test_user = await create_test_user()\n        test_graph = await create_graph(create_test_graph(), test_user.id)\n        input_data = {\"input_1\": \"Hello\", \"input_2\": \"World\"}\n"
        },
        {
          "id": "sample_agent_3",
          "code": "        response = await server.agent_server.test_execute_graph(\n            test_graph.id, input_data, test_user.id\n        )\n"
        },
        {
          "id": "sample_agent_4",
          "code": "        print(response)\n"
        },
        {
          "id": "sample_agent_5",
          "code": "        result = await wait_execution(test_user.id, test_graph.id, response[\"id\"], 10)\n        print(result)\n"
        }
      ],
      "edges": [
        {
          "from": "sample_agent_1",
          "to": "sample_agent_2"
        },
        {
          "from": "sample_agent_2",
          "to": "sample_agent_3"
        },
        {
          "from": "sample_agent_3",
          "to": "sample_agent_4"
        },
        {
          "from": "sample_agent_4",
          "to": "sample_agent_5"
        }
      ]
    }
  },
  {
    "decl_name": "MainExecutionBlock",
    "start_line": 88,
    "end_line": 91,
    "children": [],
    "code": "if __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(sample_agent())\n",
    "cfg": {
      "nodes": [
        {
          "id": "MainExecutionBlock_1",
          "code": "if __name__ == \"__main__\":\n"
        },
        {
          "id": "MainExecutionBlock_2",
          "code": "    import asyncio\n\n    asyncio.run(sample_agent())\n"
        }
      ],
      "edges": [
        {
          "from": "MainExecutionBlock_1",
          "to": "MainExecutionBlock_2"
        }
      ]
    }
  }
]