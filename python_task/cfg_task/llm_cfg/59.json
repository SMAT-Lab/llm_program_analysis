[
  {
    "decl_name": "GlobalBlock",
    "start_line": 0,
    "end_line": 15,
    "children": [],
    "code": "import logging\nimport time\nfrom typing import Sequence\n\nfrom backend.data import db\nfrom backend.data.block import Block, initialize_blocks\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.data.user import create_default_user\nfrom backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler\nfrom backend.server.rest_api import AgentServer\nfrom backend.server.utils import get_user_id\n\nlog = logging.getLogger(__name__)\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "GlobalBlock_1",
          "code": "import logging\nimport time\nfrom typing import Sequence\n\nfrom backend.data import db\nfrom backend.data.block import Block, initialize_blocks\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.data.user import create_default_user\nfrom backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler\nfrom backend.server.rest_api import AgentServer\nfrom backend.server.utils import get_user_id\n\nlog = logging.getLogger(__name__)\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "SpinTestServer",
    "start_line": 16,
    "end_line": 52,
    "children": [
      {
        "decl_name": "SpinTestServer.__init__",
        "start_line": 17,
        "end_line": 21,
        "children": [],
        "code": "    def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()\n",
        "cfg": {
          "nodes": [
            {
              "id": "SpinTestServer.__init___1",
              "code": "def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "SpinTestServer.test_get_user_id",
        "start_line": 23,
        "end_line": 25,
        "children": [],
        "code": "    @staticmethod\n    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n",
        "cfg": {
          "nodes": [
            {
              "id": "SpinTestServer.test_get_user_id_1",
              "code": "@staticmethod\n    def test_get_user_id():\n        return \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n"
            }
          ],
          "edges": []
        }
      },
      {
        "decl_name": "SpinTestServer.__aenter__",
        "start_line": 27,
        "end_line": 38,
        "children": [],
        "code": "    async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n\n        return self\n",
        "cfg": {
          "nodes": [
            {
              "id": "SpinTestServer.__aenter___1",
              "code": "async def __aenter__(self):\n"
            },
            {
              "id": "SpinTestServer.__aenter___2",
              "code": "        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n\n"
            },
            {
              "id": "SpinTestServer.__aenter___3",
              "code": "        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n"
            },
            {
              "id": "SpinTestServer.__aenter___4",
              "code": "        return self\n"
            }
          ],
          "edges": [
            {
              "from": "SpinTestServer.__aenter___1",
              "to": "SpinTestServer.__aenter___2"
            },
            {
              "from": "SpinTestServer.__aenter___2",
              "to": "SpinTestServer.__aenter___3"
            },
            {
              "from": "SpinTestServer.__aenter___3",
              "to": "SpinTestServer.__aenter___4"
            }
          ]
        }
      },
      {
        "decl_name": "SpinTestServer.__aexit__",
        "start_line": 40,
        "end_line": 46,
        "children": [],
        "code": "    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n",
        "cfg": {
          "nodes": [
            {
              "id": "SpinTestServer.__aexit___1",
              "code": "async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n"
            },
            {
              "id": "SpinTestServer.__aexit___2",
              "code": "        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n"
            }
          ],
          "edges": [
            {
              "from": "SpinTestServer.__aexit___1",
              "to": "SpinTestServer.__aexit___2"
            }
          ]
        }
      },
      {
        "decl_name": "SpinTestServer.setup_dependency_overrides",
        "start_line": 48,
        "end_line": 52,
        "children": [],
        "code": "    def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )\n",
        "cfg": {
          "nodes": [
            {
              "id": "SpinTestServer.setup_dependency_overrides_1",
              "code": "def setup_dependency_overrides(self):\n        # Override get_user_id for testing\n        self.agent_server.set_test_dependency_overrides(\n            {get_user_id: self.test_get_user_id}\n        )\n"
            }
          ],
          "edges": []
        }
      }
    ],
    "code": "class SpinTestServer:\n\n\n\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "SpinTestServer_1",
          "code": "class SpinTestServer:\n"
        }
      ],
      "edges": []
    }
  },
  {
    "decl_name": "wait_execution",
    "start_line": 55,
    "end_line": 77,
    "children": [
      {
        "decl_name": "wait_execution.is_execution_completed",
        "start_line": 61,
        "end_line": 67,
        "children": [],
        "code": "    async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f\"Execution status: {status}\")\n        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n        return status == ExecutionStatus.COMPLETED\n",
        "cfg": {
          "nodes": [
            {
              "id": "wait_execution.is_execution_completed_1",
              "code": "async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n"
            },
            {
              "id": "wait_execution.is_execution_completed_2",
              "code": "        log.info(f\"Execution status: {status}\")\n"
            },
            {
              "id": "wait_execution.is_execution_completed_3",
              "code": "        if status == ExecutionStatus.FAILED:\n            log.info(\"Execution failed\")\n            raise Exception(\"Execution failed\")\n"
            },
            {
              "id": "wait_execution.is_execution_completed_4",
              "code": "        return status == ExecutionStatus.COMPLETED\n"
            }
          ],
          "edges": [
            {
              "from": "wait_execution.is_execution_completed_1",
              "to": "wait_execution.is_execution_completed_2"
            },
            {
              "from": "wait_execution.is_execution_completed_2",
              "to": "wait_execution.is_execution_completed_3"
            },
            {
              "from": "wait_execution.is_execution_completed_2",
              "to": "wait_execution.is_execution_completed_4"
            }
          ]
        }
      }
    ],
    "code": "async def wait_execution(\n    user_id: str,\n    graph_id: str,\n    graph_exec_id: str,\n    timeout: int = 20,\n) -> Sequence[ExecutionResult]:\n\n    # Wait for the executions to complete\n    for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n        time.sleep(1)\n\n    assert False, \"Execution did not complete in time.\"\n",
    "cfg": {
      "nodes": [
        {
          "id": "wait_execution_1",
          "code": "async def wait_execution(\n    user_id: str,\n    graph_id: str,\n    graph_exec_id: str,\n    timeout: int = 20,\n) -> Sequence[ExecutionResult]:\n"
        },
        {
          "id": "wait_execution_2",
          "code": "    # Wait for the executions to complete\n"
        },
        {
          "id": "wait_execution_3",
          "code": "    for i in range(timeout):\n        if await is_execution_completed():\n"
        },
        {
          "id": "wait_execution_4",
          "code": "            return await AgentServer().test_get_graph_run_node_execution_results(\n                graph_id, graph_exec_id, user_id\n            )\n"
        },
        {
          "id": "wait_execution_5",
          "code": "        time.sleep(1)\n"
        },
        {
          "id": "wait_execution_6",
          "code": "    assert False, \"Execution did not complete in time.\"\n"
        }
      ],
      "edges": [
        {
          "from": "wait_execution_1",
          "to": "wait_execution_2"
        },
        {
          "from": "wait_execution_2",
          "to": "wait_execution_3"
        },
        {
          "from": "wait_execution_3",
          "to": "wait_execution_4"
        },
        {
          "from": "wait_execution_3",
          "to": "wait_execution_5"
        },
        {
          "from": "wait_execution_5",
          "to": "wait_execution_3"
        },
        {
          "from": "wait_execution_5",
          "to": "wait_execution_6"
        }
      ]
    }
  },
  {
    "decl_name": "execute_block_test",
    "start_line": 80,
    "end_line": 144,
    "children": [
      {
        "decl_name": "execute_block_test.compare",
        "start_line": 119,
        "end_line": 134,
        "children": [],
        "code": "            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n\n                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n",
        "cfg": {
          "nodes": [
            {
              "id": "execute_block_test.compare_1",
              "code": "def compare(data, expected_data):\n"
            },
            {
              "id": "execute_block_test.compare_2",
              "code": "                if data == expected_data:\n                    is_matching = True\n"
            },
            {
              "id": "execute_block_test.compare_3",
              "code": "                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n"
            },
            {
              "id": "execute_block_test.compare_4",
              "code": "                elif callable(expected_data):\n                    is_matching = expected_data(data)\n"
            },
            {
              "id": "execute_block_test.compare_5",
              "code": "                else:\n                    is_matching = False\n"
            },
            {
              "id": "execute_block_test.compare_6",
              "code": "                mark = \"✅\" if is_matching else \"❌\"\n                log.info(f\"{prefix} {mark} comparing `{data}` vs `{expected_data}`\")\n"
            },
            {
              "id": "execute_block_test.compare_7",
              "code": "                if not is_matching:\n                    raise ValueError(\n                        f\"{prefix}: wrong output {data} vs {expected_data}\"\n                    )\n"
            }
          ],
          "edges": [
            {
              "from": "execute_block_test.compare_1",
              "to": "execute_block_test.compare_2"
            },
            {
              "from": "execute_block_test.compare_2",
              "to": "execute_block_test.compare_3"
            },
            {
              "from": "execute_block_test.compare_2",
              "to": "execute_block_test.compare_5"
            },
            {
              "from": "execute_block_test.compare_3",
              "to": "execute_block_test.compare_4"
            },
            {
              "from": "execute_block_test.compare_3",
              "to": "execute_block_test.compare_5"
            },
            {
              "from": "execute_block_test.compare_4",
              "to": "execute_block_test.compare_5"
            },
            {
              "from": "execute_block_test.compare_5",
              "to": "execute_block_test.compare_6"
            },
            {
              "from": "execute_block_test.compare_6",
              "to": "execute_block_test.compare_7"
            }
          ]
        }
      }
    ],
    "code": "def execute_block_test(block: Block):\n    prefix = f\"[Test-{block.name}]\"\n\n    if not block.test_input or not block.test_output:\n        log.info(f\"{prefix} No test data provided\")\n        return\n    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n\n    output_index = 0\n    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")\n    prefix = \" \" * 4 + prefix\n\n    for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")\n\n    extra_exec_kwargs = {}\n\n    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n\n    for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n\n        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n\n    if output_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )\n\n",
    "cfg": {
      "nodes": [
        {
          "id": "execute_block_test_1",
          "code": "def execute_block_test(block: Block):\n    prefix = f\"[Test-{block.name}]\"\n"
        },
        {
          "id": "execute_block_test_2",
          "code": "    if not block.test_input or not block.test_output:\n        log.info(f\"{prefix} No test data provided\")\n        return\n"
        },
        {
          "id": "execute_block_test_3",
          "code": "    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n"
        },
        {
          "id": "execute_block_test_4",
          "code": "    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n"
        },
        {
          "id": "execute_block_test_5",
          "code": "    output_index = 0\n    log.info(f\"{prefix} Executing {len(block.test_input)} tests...\")\n"
        },
        {
          "id": "execute_block_test_6",
          "code": "    prefix = \" \" * 4 + prefix\n"
        },
        {
          "id": "execute_block_test_7",
          "code": "    for mock_name, mock_obj in (block.test_mock or {}).items():\n        log.info(f\"{prefix} mocking {mock_name}...\")\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f\"{prefix} mock {mock_name} not found in block\")\n"
        },
        {
          "id": "execute_block_test_8",
          "code": "    extra_exec_kwargs = {}\n"
        },
        {
          "id": "execute_block_test_9",
          "code": "    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(\n                f\"{prefix} requires credentials but has no test_credentials\"\n            )\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n"
        },
        {
          "id": "execute_block_test_10",
          "code": "    for input_data in block.test_input:\n        log.info(f\"{prefix} in: {input_data}\")\n"
        },
        {
          "id": "execute_block_test_11",
          "code": "        for output_name, output_data in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f\"{prefix} produced output more than expected\")\n            ex_output_name, ex_output_data = block.test_output[output_index]\n\n\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n"
        },
        {
          "id": "execute_block_test_12",
          "code": "    if output_index < len(block.test_output):\n        raise ValueError(\n            f\"{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}\"\n        )\n"
        }
      ],
      "edges": [
        {
          "from": "execute_block_test_1",
          "to": "execute_block_test_2"
        },
        {
          "from": "execute_block_test_2",
          "to": "execute_block_test_3"
        },
        {
          "from": "execute_block_test_2",
          "to": "execute_block_test_5"
        },
        {
          "from": "execute_block_test_3",
          "to": "execute_block_test_4"
        },
        {
          "from": "execute_block_test_4",
          "to": "execute_block_test_5"
        },
        {
          "from": "execute_block_test_5",
          "to": "execute_block_test_6"
        },
        {
          "from": "execute_block_test_6",
          "to": "execute_block_test_7"
        },
        {
          "from": "execute_block_test_7",
          "to": "execute_block_test_8"
        },
        {
          "from": "execute_block_test_8",
          "to": "execute_block_test_9"
        },
        {
          "from": "execute_block_test_9",
          "to": "execute_block_test_10"
        },
        {
          "from": "execute_block_test_10",
          "to": "execute_block_test_11"
        },
        {
          "from": "execute_block_test_11",
          "to": "execute_block_test_10"
        },
        {
          "from": "execute_block_test_11",
          "to": "execute_block_test_12"
        }
      ]
    }
  }
]