{
  "edge_analysis": {
    "static_total": 9,
    "llm_total": 15,
    "matched_edges": {
      "exact_matches": 4,
      "partial_matches": 2
    },
    "accuracy_metrics": {
      "precision": 0.2667,
      "recall": 0.4444,
      "f1_score": 0.3333
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 5: [Source] #15\\ntry: => [Target] #16\\nsubprocess.run(command, check=check)",
      "Edge 6: [Source] #15\\ntry: => [Target] #17\\nprint(f'Command failed: {e}')\\nsys.exit(1)",
      "Edge 8: [Source] #22\\nrun_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])\\nsys.exit(1) => [Target] #23\\nrun_command(['prisma', 'migrate', 'dev'])\\nresult = subprocess.run(['pytest'] + sys.argv[1:], check=False)\\nrun_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])\\nsys.exit(result.returncode)"
    ],
    "extra_blocks": [
      "Edge 0: [Source] def wait_for_postgres(max_retries=5, delay=5): => [Target] for _ in range(max_retries):",
      "Edge 2: [Source] for _ in range(max_retries): => [Target] print(\"Failed to connect to PostgreSQL.\")\\nreturn False",
      "Edge 6: [Source] if \"accepting connections\" in result.stdout:\\n print(\"PostgreSQL is ready.\")\\n return True => [Target] except subprocess.CalledProcessError:\\n print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\\n time.sleep(delay)",
      "Edge 9: [Source] def test():\\n # Start PostgreSQL with Docker Compose\\n run_command( => [Target] [\\n \"docker\",\\n \"compose\",\\n \"-f\",\\n \"docker-compose.test.yaml\",\\n \"up\",\\n \"-d\",\\n \"postgres-test\",\\n ]\\n )",
      "Edge 10: [Source] [\\n \"docker\",\\n \"compose\",\\n \"-f\",\\n \"docker-compose.test.yaml\",\\n \"up\",\\n \"-d\",\\n \"postgres-test\",\\n ]\\n ) => [Target] if not wait_for_postgres():",
      "Edge 11: [Source] [\\n \"docker\",\\n \"compose\",\\n \"-f\",\\n \"docker-compose.test.yaml\",\\n \"up\",\\n \"-d\",\\n \"postgres-test\",\\n ]\\n ) => [Target] # Run Prisma migrations\\n run_command([\"prisma\", \"migrate\", \"dev\"])\\n\\n # Run the tests\\n result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)",
      "Edge 12: [Source] if not wait_for_postgres(): => [Target] run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\\n sys.exit(1)"
    ]
  }
}