{
  "edge_analysis": {
    "static_total": 7,
    "llm_total": 10,
    "matched_edges": {
      "exact_matches": 5,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.5,
      "recall": 0.7142857142857143,
      "f1_score": 0.5882352941176471
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 2: [Source] #12\\nasync with SpinTestServer() as server:\\n test_user = await create_test_user()\\n test_graph = await create_graph(create_test_graph(), test_user.id)\\n input_data = {'input_1': 'Hello', 'input_2': 'World'}\\n response = await server.agent_server.test_execute_graph(test_graph.id,\\n input_data, test_user.id)\\n print(response)\\n result = await wait_execution(test_user.id, test_graph.id, response[\\n 'id'], 10)\\n print(result) => [Target] #13\\ntest_user = await create_test_user()",
      "Edge 3: [Source] #13\\ntest_user = await create_test_user() => [Target] #15\\ntest_graph = await create_graph(create_test_graph(), test_user.id)",
      "Edge 4: [Source] #15\\ntest_graph = await create_graph(create_test_graph(), test_user.id) => [Target] #16\\ninput_data = {'input_1': 'Hello', 'input_2': 'World'}\\nresponse = await server.agent_server.test_execute_graph(test_graph.id,\\n input_data, test_user.id)",
      "Edge 5: [Source] #16\\ninput_data = {'input_1': 'Hello', 'input_2': 'World'}\\nresponse = await server.agent_server.test_execute_graph(test_graph.id,\\n input data, test_user.id) => [Target] #17\\nprint(response)\\nresult = await wait_execution(test_user.id, test_graph.id, response[\\n 'id'], 10)",
      "Edge 6: [Source] #17\\nprint(response)\\nresult = await wait_execution(test_user.id, test_graph.id, response[\\n 'id'], 10) => [Target] #18\\nprint(result)"
    ],
    "extra_blocks": [
      "Edge 0: [Source] from prisma.models import User\\n\\nfrom backend.blocks.basic import AgentInputBlock, PrintToConsoleBlock\\nfrom backend.blocks.text import FillTextTemplateBlock\\nfrom backend.data import graph\\nfrom backend.data.graph import create_graph\\nfrom backend.data.user import get_or_create_user\\nfrom backend.util.test import SpinTestServer, wait_execution\\n\\n => [Target] \\n\\n\\n\\n\\n\\n",
      "Edge 1: [Source] \\n\\n\\n\\n\\n\\n => [Target] if __name__ == \"__main__\":",
      "Edge 3: [Source] def create_test_graph() -> graph.Graph:\\n \"\"\"\\n InputBlock\\n \\\\n ---- FillTextTemplateBlock ---- PrintToConsoleBlock\\n /\\n InputBlock\\n \"\"\" => [Target] nodes = [\\n graph.Node(\\n block_id=AgentInputBlock().id,\\n input_default={\"name\": \"input_1\"},\\n ),\\n graph.Node(\\n block_id=AgentInputBlock().id,\\n input_default={\"name\": \"input_2\"},\\n ),\\n graph.Node(\\n block_id=FillTextTemplateBlock().id,\\n input_default={\\n \"format\": \"{a}, {b}{c}\",\\n \"values_#_c\": \"!!!\",\\n },\\n ),\\n graph.Node(block_id=PrintToConsoleBlock().id),\\n ]",
      "Edge 4: [Source] nodes = [\\n graph.Node(\\n block_id=AgentInputBlock().id,\\n input_default={\"name\": \"input_1\"},\\n ),\\n graph.Node(\\n block_id=AgentInputBlock().id,\\n input_default={\"name\": \"input_2\"},\\n ),\\n graph.Node(\\n block_id=FillTextTemplateBlock().id,\\n input_default={\\n \"format\": \"{a}, {b}{c}\",\\n \"values_#_c\": \"!!!\",\\n },\\n ),\\n graph.Node(block_id=PrintToConsoleBlock().id),\\n ] => [Target] links = [\\n graph.Link(\\n source_id=nodes[0].id,\\n sink_id=nodes[2].id,\\n source_name=\"result\",\\n sink_name=\"values_#_a\",\\n ),\\n graph.Link(\\n source_id=nodes[1].id,\\n sink_id=nodes[2].id,\\n source_name=\"result\",\\n sink_name=\"values_#_b\",\\n ),\\n graph.Link(\\n source_id=nodes[2].id,\\n sink_id=nodes[3].id,\\n source_name=\"output\",\\n sink_name=\"text\",\\n ),\\n ]",
      "Edge 5: [Source] links = [\\n graph.Link(\\n source_id=nodes[0].id,\\n sink_id=nodes[2].id,\\n source_name=\"result\",\\n sink_name=\"values_#_a\",\\n ),\\n graph.Link(\\n source_id=nodes[1].id,\\n sink_id=nodes[2].id,\\n source_name=\"result\",\\n sink_name=\"values_#_b\",\\n ),\\n graph.Link(\\n source_id=nodes[2].id,\\n sink_id=nodes[3].id,\\n source_name=\"output\",\\n sink_name=\"text\",\\n ),\\n ] => [Target] return graph.Graph(\\n name=\"TestGraph\",\\n description=\"Test graph\",\\n nodes=nodes,\\n links=links,\\n )",
      "Edge 6: [Source] async def sample_agent(): => [Target] async with SpinTestServer() as server:\\n test_user = await create_test_user()\\n test_graph = await create_graph(create_test_graph(), test_user.id)\\n input data = {\"input_1\": \"Hello\", \"input_2\": \"World\"}\\n response = await server.agent_server.test_execute_graph(\\n test_graph.id, input_data, test_user.id\\n )"
    ]
  }
}