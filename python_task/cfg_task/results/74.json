{
  "edge_analysis": {
    "static_total": 10,
    "llm_total": 15,
    "matched_edges": {
      "exact_matches": 4,
      "partial_matches": 2
    },
    "accuracy_metrics": {
      "precision": 0.2667,
      "recall": 0.4,
      "f1_score": 0.32
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "#12\\nlogger.debug(f'Exchanging code for tokens with scopes: {scopes}')\\nflow = self._setup_oauth_flow(scopes)\\nflow.redirect_uri = self.redirect_uri\\nlogger.debug('Fetching token from Google')\\nflow.oauth2session.scope = None\\ntoken = flow.fetch_token(code=code)\\nlogger.debug('Token fetched successfully')\\ngranted_scopes: list[str] = token.get('scope', [])\\nlogger.debug(f'Scopes granted by Google: {granted_scopes}')\\ngoogle_creds = flow.credentials\\nlogger.debug(f'Received credentials: {google_creds}')\\nlogger.debug('Requesting user email')\\nusername = self._request_email(google_creds)\\nlogger.debug(f'User email retrieved: {username}')\\nassert google_creds.token",
      "#14\\nassert google_creds.refresh_token",
      "#16\\nassert google_creds.expiry",
      "#18\\nassert granted_scopes",
      "#28\\nsession = AuthorizedSession(creds)\\nresponse = session.get(self.EMAIL_ENDPOINT)\\nif not response.ok:",
      "#35\\nassert credentials.refresh_token"
    ],
    "extra_blocks": [
      "def get_login_url(self, scopes: list[str], state: str) -> str:\\n all_scopes = list(set(scopes + self.DEFAULT_SCOPES))\\n logger.debug(f\"Setting up OAuth flow with scopes: {all_scopes}\")\\n flow = self._setup_oauth_flow(all_scopes)\\n flow.redirect_uri = self.redirect_uri\\n authorization_url, _ = flow.authorization_url(\\n access_type=\"offline\",\\n include_granted_scopes=\"true\",\\n state=state,\\n prompt=\"consent\",\\n )",
      "return authorization_url",
      "# Use the scopes from the initial request\\n flow = self._setup_oauth_flow(scopes)\\n flow.redirect_uri = self.redirect_uri",
      "# Create OAuth2Credentials with the granted scopes\\n credentials = OAuth2Credentials(\\n provider=self.PROVIDER_NAME,\\n title=None,\\n username=username,\\n access_token=SecretStr(google_creds.token),\\n refresh_token=(SecretStr(google_creds.refresh_token)),\\n access_token_expires_at=(\\n int(google_creds.expiry.timestamp()) if google_creds.expiry else None\\n ),\\n refresh_token_expires_at=None,\\n scopes=granted_scopes,\\n )\\n logger.debug(\\n f\"OAuth2Credentials object created successfully with scopes: {credentials.scopes}\"\\n )",
      "session.post(\\n self.revoke_uri,\\n params={\"token\": credentials.access_token.get_secret_value()},\\n headers={\"content-type\": \"application/x-www-form-urlencoded\"},\\n )",
      "# Google's OAuth library is poorly typed so we need some of these:\\n assert google_creds.refresh_token\\n assert google_creds.scopes"
    ]
  }
}