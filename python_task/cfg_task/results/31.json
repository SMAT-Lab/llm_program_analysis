{
  "edge_analysis": {
    "static_total": 4,
    "llm_total": 6,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 3
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "#1\\nif __name__ == '__main__':",
      "#3\\n\"\"\"\\n Find excess-3 code of integer base 10.\\n Add 3 to all digits in a decimal number then convert to a binary-coded decimal.\\n https://en.wikipedia.org/wiki/Excess-3\\n\\n >>> excess_3_code(0)\\n '0b0011'\\n >>> excess_3_code(3)\\n '0b0110'\\n >>> excess_3_code(2)\\n '0b0101'\\n >>> excess_3_code(20)\\n '0b01010011'\\n >>> excess_3_code(120)\\n '0b010001010011'\\n \"\"\"\\nnum = ''",
      "#4\\nfor digit in str(max(0, number)):"
    ],
    "extra_blocks": [
      "if __name__ == \"__main__\":",
      "import doctest",
      "doctest.testmod()",
      "def excess_3_code(number: int) -> str:",
      "\"\"\"\\n Find excess-3 code of integer base 10.\\n Add 3 to all digits in a decimal number then convert to a binary-coded decimal.\\n https://en.wikipedia.org/wiki/Excess-3\\n\\n >>> excess_3_code(0)\\n '0b0011'\\n >>> excess_3_code(3)\\n '0b0110'\\n >>> excess_3_code(2)\\n '0b0101'\\n >>> excess_3_code(20)\\n '0b01010011'\\n >>> excess_3_code(120)\\n '0b010001010011'\\n \"\"\"",
      "num = \"\"",
      "for digit in str(max(0, number)):\\n num += str(bin(int(digit) + 3))[2:].zfill(4)"
    ]
  }
}