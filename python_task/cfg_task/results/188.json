{
  "edge_analysis": {
    "static_total": 26,
    "llm_total": 37,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.0,
      "recall": 0.0,
      "f1_score": 0.0
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "#3",
      "#4",
      "#5",
      "#6",
      "#10",
      "#11",
      "#13",
      "#15",
      "#17",
      "#20",
      "#21",
      "#23",
      "#25",
      "#28",
      "#29",
      "#31",
      "#33",
      "#35",
      "#37",
      "#40",
      "#41",
      "#43",
      "#45",
      "#48",
      "#49",
      "#51",
      "#53",
      "#56",
      "#57",
      "#59",
      "#61",
      "#63",
      "#65"
    ],
    "extra_blocks": [
      "from datetime import datetime",
      "@pytest.fixture(autouse=True)",
      "pytest.mark.asyncio",
      "async def setup_prisma():",
      " # Don't register client if already registered",
      "try:",
      "Prisma()",
      "except prisma.errors.ClientAlreadyRegisteredError:",
      "pass",
      "yield",
      "async def test_get_store_agents(mocker):",
      "# Mock data",
      "prisma.models.StoreAgent( listing_id=\"test-id\", storeListingVersionId=\"version123\", slug=\"test-agent\", agent_name=\"Test Agent\", agent_video=None, agent_image=[\"image.jpg\"], featured=False, creator_username=\"creator\", creator_avatar=\"avatar.jpg\", sub_heading=\"Test heading\", description=\"Test description\", categories=[], runs=10, rating=4.5, versions=[\"1.0\"], updated_at=datetime.now(), )",
      "# Mock prisma calls",
      "mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")",
      "mock_store_agent.return_value.find_many = mocker.AsyncMock(return_value=mock_agents)",
      "mock_store_agent.return_value.count = mocker.AsyncMock(return_value=1)",
      "# Call function",
      "result = await db.get_store_agents()",
      "# Verify results",
      "assert len(result.agents) == 1",
      "assert result.agents[0].slug == \"test-agent\"",
      "assert result.pagination.total_items == 1",
      "# Verify mocks called correctly",
      "mock_store_agent.return_value.find_many.assert_called_once()",
      "async def test_get_store_agent_details(mocker):",
      "# Mock data",
      "prisma.models.StoreAgent( listing_id=\"test-id\", storeListingVersionId=\"version123\", slug=\"test-agent\", agent_name=\"Test Agent\", agent_video=\"video.mp4\", agent_image=[\"image.jpg\"], featured=False, creator_username=\"creator\", creator_avatar=\"avatar.jpg\", sub_heading=\"Test heading\", description=\"Test description\", categories=[\"test\"], runs=10, rating=4.5, versions=[\"1.0\"], updated_at=datetime.now(), )",
      "# Mock prisma call",
      "result = await db.get_store_agent_details(\"creator\", \"test-agent\")",
      "assert result.slug == \"test-agent\"",
      "async def test_get_store_creator_details(mocker):",
      "# Mock data",
      "mock_creator_data = prisma.models.Creator( name=\"Test Creator\", username=\"creator\", description=\"Test description\", links=[\"link1\"], avatar_url=\"avatar.jpg\", num_agents=1, agent_rating=4.5, agent_runs=10, top_categories=[\"test\"], is_featured=False, )",
      "# Mock prisma call",
      "mock_creator = mocker.patch(\"prisma.models.Creator.prisma\")",
      "mock_creator.return_value.find_unique = mocker.AsyncMock()",
      "# Configure the mock to return values that will pass validation",
      "# Call function",
      "result = await db.get_store_creator_details(\"creator\")",
      "assert result.username == \"creator\"",
      "assert result.name == \"Test Creator\"",
      "async def test_create_store_submission(mocker):",
      "# Mock data",
      "mock_agent = prisma.models.AgentGraph( id=\"agent-id\", version=1, userId=\"user-id\", createdAt=datetime.now(), isActive=True, isTemplate=False, )",
      "# Mock prisma calls",
      "mock_listing = prisma.models.StoreListing( id=\"listing-id\", createdAt=datetime.now(), updatedAt=datetime.now(), isDeleted=False, isApproved=False, agentId=\"agent-id\", agentVersion=1, owningUserId=\"user-id\", )",
      "result = await db.create_store_submission( user_id=\"user-id\", agent_id=\"agent-id\", agent_version=1, slug=\"test-agent\", name=\"Test Agent\", description=\"Test description\", )",
      "assert result.name == \"Test Agent\"",
      "async def test_update_profile(mocker):",
      "# Mock data",
      "mock_profile = prisma.models.Profile( id=\"profile-id\", name=\"Test Creator\", username=\"creator\", description=\"Test description\", links=[\"link1\"], avatarUrl=\"avatar.jpg\", isFeatured=False, createdAt=datetime.now(), updatedAt=datetime.now(), )",
      "# Mock prisma calls",
      "mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")",
      "mock_profile_db.return_value.find_first = mocker.AsyncMock( return_value=mock_profile)",
      "async def test_get_user_profile(mocker):",
      "# Mock data",
      "mock_profile = prisma.models.Profile( id=\"profile-id\", name=\"No Profile Data\", username=\"testuser\", description=\"Test description\", links=[\"link1\", \"link2\"], avatarUrl=\"avatar.jpg\", isFeatured=False, createdAt=datetime.now(), updatedAt=datetime.now(), )",
      "# Mock prisma calls",
      "mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")",
      "result = await db.get_user_profile(\"user-id\")",
      "assert result.name == \"No Profile Data\"",
      "assert result.username == \"No Profile Data\""
    ]
  }
}