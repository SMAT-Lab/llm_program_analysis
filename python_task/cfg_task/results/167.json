{
  "edge_analysis": {
    "static_total": 4,
    "llm_total": 6,
    "matched_edges": {
      "exact_matches": 2,
      "partial_matches": 2
    },
    "accuracy_metrics": {
      "precision": 0.3333,
      "recall": 0.5,
      "f1_score": 0.4
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 1: [Source] #5\\nself.key = key or ENCRYPTION_KEY\\nif not self.key: => [Target] #7\\nself.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else\\n self.key)",
      "Edge 3: [Source] #15\\n\"\"\"Decrypt string to dictionary\"\"\"\\nif not encrypted_str: => [Target] #17\\ndecrypted = self.fernet.decrypt(encrypted_str.encode())\\nreturn json.loads(decrypted.decode())"
    ],
    "extra_blocks": [
      "Edge 0: [Source] import json => [Target] from typing import Optional",
      "Edge 1: [Source] def __init__(self, key: Optional[str] = None):\\n # Use provided key or get from environment\\n self.key = key or ENCRYPTION_KEY\\n => [Target] if not self.key:\\n raise ValueError(\\n \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\\n",
      "Edge 5: [Source] if not encrypted_str:\\n return {} => [Target] decrypted = self.fernet.decrypt(encrypted_str.encode())\\n return json.loads(decrypted.decode())"
    ]
  }
}