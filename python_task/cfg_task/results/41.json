{
  "edge_analysis": {
    "static_total": 25,
    "llm_total": 18,
    "matched_edges": {
      "exact_matches": 10,
      "partial_matches": 3
    },
    "accuracy_metrics": {
      "precision": 0.5555555555555556,
      "recall": 0.4,
      "f1_score": 0.4642857142857143
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 2: [Source] #4\\nread_me = read_me_file.read() => [Target] #5\\ntable_of_contents = ''.join(read_me.split('- - -')[0])\\nblocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')",
      "Edge 3: [Source] #5\\ntable_of_contents = ''.join(read_me.split('- - -')[0])\\nblocks = ''.join(read_me.split('- - -')[1]).split('\\n# ') => [Target] #6\\nfor i in range(len(blocks)):",
      "Edge 7: [Source] #7\\nif i == 0: => [Target] #11\\nblocks[i] = '# ' + blocks[i] + '\\n'",
      "Edge 10: [Source] #12\\nfor i in range(1, len(inner_blocks)): => [Target] #14\\ninner_blocks = ''.join(inner_blocks)\\nblocks[0] = inner_blocks\\nfinal_README = table_of_contents + '- - -' + ''.join(blocks)\\nwith open('README.md', 'w+') as sorted_file:",
      "Edge 11: [Source] #13\\nif inner_blocks[i][0] != '#': => [Target] #15\\ninner_blocks[i] = '##' + inner_blocks[i]",
      "Edge 13: [Source] #21\\nwith open('README.md', 'r') as read_me_file: => [Target] #22\\nread_me = read_me_file.readlines()",
      "Edge 16: [Source] #24\\nfor line in read_me: => [Target] #26\\nwith open('README.md', 'w+') as sorted_file:",
      "Edge 17: [Source] #26\\nwith open('README.md', 'w+') as sorted_file: => [Target] #33\\nblocks = [''.join(sorted(block, key=str.lower)) for block in blocks]\\nsorted_file.write(''.join(blocks))",
      "Edge 19: [Source] #25\\ns_line = line.lstrip()\\nindent = len(line) - len(s_line)\\nif any([s_line.startswith(s) for s in ['* [', '- [']]): => [Target] #29\\nblocks.append([line])\\nlast_indent = None",
      "Edge 20: [Source] #27\\nif indent == last_indent: => [Target] #32\\nblocks.append([line])",
      "Edge 21: [Source] #27\\nif indent == last_indent: => [Target] #30\\nblocks[-1].append(line)",
      "Edge 22: [Source] #30\\nblocks[-1].append(line) => [Target] #31\\nlast_indent = indent",
      "Edge 23: [Source] #33\\nblocks = [''.join(sorted(block, key=str.lower)) for block in blocks]\\nsorted_file.write(''.join(blocks)) => [Target] #34\\nsort_blocks()"
    ],
    "extra_blocks": [
      "Edge 0: [Source] #!/usr/bin/env python\\n# coding: utf-8\\n\\n\"\"\"\\n The approach taken is explained below. I decided to do it simply.\\n Initially I was considering parsing the data into some sort of\\n structure and then generating an appropriate README. I am still\\n considering doing it - but for now this should work. The only issue\\n I see is that it only sorts the entries at the lowest level, and that\\n the order of the top-level contents do not match the order of the actual\\n entries.\\n\\n This could be extended by having nested blocks, sorting them recursively\\n and flattening the end structure into a list of lines. Revision 2 maybe ^.^.\\n\"\"\"\\n\\n\\n\\n\\n => [Target] if __name__ == \"__main__\":\\n main()",
      "Edge 8: [Source] def main(): => [Target] # First, we load the current README into memory as an array of lines\\n with open('README.md', 'r') as read_me_file:\\n read_me = read_me_file.readlines()\\n",
      "Edge 9: [Source] # First, we load the current README into memory as an array of lines\\n with open('README.md', 'r') as read_me_file:\\n read_me = read_me_file.readlines()\\n => [Target] # Then we cluster the lines together as blocks\\n # Each block represents a collection of lines that should be sorted\\n # This was done by assuming only links ([...](...)) are meant to be sorted\\n # Clustering is done by indentation\\n blocks = []\\n last_indent = None\\n",
      "Edge 10: [Source] # Then we cluster the lines together as blocks\\n # Each block represents a collection of lines that should be sorted\\n # This was done by assuming only links ([...](...)) are meant to be sorted\\n # Clustering is done by indentation\\n blocks = []\\n last_indent = None\\n => [Target] for line in read_me:\\n s_line = line.lstrip()\\n indent = len(line) - len(s_line)\\n",
      "Edge 12: [Source] if any([s_line.startswith(s) for s in ['* [', '- [']]):\\n => [Target] if indent == last_indent:\\n blocks[-1].append(line)\\n",
      "Edge 13: [Source] if any([s_line.startswith(s) for s in ['* [', '- [']]):\\n => [Target] with open('README.md', 'w+') as sorted_file:\\n # Then all of the blocks are sorted individually\\n blocks = [\\n ''.join(sorted(block, key=str.lower)) for block in blocks\\n ]\\n",
      "Edge 14: [Source] if indent == last_indent:\\n blocks[-1].append(line)\\n => [Target] else:\\n blocks.append([line])\\n last_indent = indent\\n",
      "Edge 2: [Source] with open('README.md', 'r') as read_me_file:\\n read_me = read_me_file.read() => [Target] table_of_contents = ''.join(read_me.split('- - -')[0])\\nblocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')",
      "Edge 3: [Source] table_of_contents = ''.join(read_me.split('- - -')[0])\\nblocks = ''.join(read_me.split('- - -')[1]).split('\\n# ') => [Target] for i in range(len(blocks)):\\n if i == 0:\\n blocks[i] = blocks[i] + '\\n'\\n else:\\n blocks[i] = '# ' + blocks[i] + '\\n'",
      "Edge 4: [Source] for i in range(len(blocks)):\\n if i == 0:\\n blocks[i] = blocks[i] + '\\n'\\n else:\\n blocks[i] = '# ' + blocks[i] + '\\n' => [Target] inner_blocks = sorted(blocks[0].split('##'))",
      "Edge 5: [Source] inner_blocks = sorted(blocks[0].split('##')) => [Target] for i in range(1, len(inner_blocks)):\\n if inner_blocks[i][0] != '#':\\n inner_blocks[i] = '##' + inner_blocks[i]",
      "Edge 6: [Source] for i in range(1, len(inner_blocks)):\\n if inner_blocks[i][0] != '#':\\n inner_blocks[i] = '##' + inner_blocks[i] => [Target] inner_blocks = ''.join(inner_blocks)\\nblocks[0] = inner_blocks\\nfinal_README = table_of_contents + '- - -' + ''.join(blocks)",
      "Edge 7: [Source] inner_blocks = ''.join(inner_blocks)\\nblocks[0] = inner_blocks\\nfinal_README = table_of_contents + '- - -' + ''.join(blocks) => [Target] with open('README.md', 'w+') as sorted_file:\\n sorted_file.write(final_README)",
      "Edge 16: [Source] with open('README.md', 'w+') as sorted_file:\\n # Then all of the blocks are sorted individually\\n blocks = [\\n ''.join(sorted(block, key=str.lower)) for block in blocks\\n ]\\n => [Target] sorted_file.write(''.join(blocks))\\n"
    ]
  }
}