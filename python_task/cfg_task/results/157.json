{
  "edge_analysis": {
    "static_total": 17,
    "llm_total": 22,
    "matched_edges": {
      "exact_matches": 12,
      "partial_matches": 8
    },
    "accuracy_metrics": {
      "precision": 0.5454545454545454,
      "recall": 0.7058823529411765,
      "f1_score": 0.6153846153846154
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 2: [Source] connection.close() => [Target] connection = None",
      "Edge 4: [Source] if auto_connect: => [Target] raise RuntimeError('Redis connection is not established')",
      "Edge 6: [Source] c = AsyncRedis(host=HOST, port=PORT, password=PASSWORD, decode_responses=True)\\nawait c.ping() => [Target] connection_async = c\\nreturn connection_async"
    ],
    "extra_blocks": [
      "Edge 0: [Source] import logging\\nimport os\\n\\nfrom dotenv import load_dotenv\\nfrom redis import Redis\\nfrom redis.asyncio import Redis as AsyncRedis\\n\\nfrom backend.util.retry import conn_retry\\n\\nload_dotenv()\\n\\nHOST = os.getenv(\"REDIS_HOST\", \"localhost\")\\nPORT = int(os.getenv(\"REDIS_PORT\", \"6379\"))\\nPASSWORD = os.getenv(\"REDIS_PASSWORD\", \"password\") => [Target] logger = logging.getLogger(__name__)\\nconnection: Redis | None = None\\nconnection_async: AsyncRedis | None = None",
      "Edge 1: [Source] logger = logging.getLogger(__name__)\\nconnection: Redis | None = None\\nconnection_async: AsyncRedis | None = None => [Target] @conn_retry(\"Redis\", \"Acquiring connection\")",
      "Edge 2: [Source] @conn_retry(\"Redis\", \"Acquiring connection\") => [Target] @conn_retry(\"Redis\", \"Releasing connection\")",
      "Edge 3: [Source] @conn_retry(\"Redis\", \"Releasing connection\") => [Target] @conn_retry(\"AsyncRedis\", \"Acquiring connection\")",
      "Edge 4: [Source] @conn_retry(\"AsyncRedis\", \"Acquiring connection\") => [Target] @conn_retry(\"AsyncRedis\", \"Releasing connection\")",
      "Edge 14: [Source] if auto_connect:\\n return connect() => [Target] raise RuntimeError(\"Redis connection is not established\")",
      "Edge 19: [Target] if connection_async:\\n return connection_async => [Target] if auto_connect:\\n return await connect_async()",
      "Edge 20: [Source] if auto_connect:\\n return await connect_async() => [Target] raise RuntimeError(\"AsyncRedis connection is not established\")"
    ]
  }
}