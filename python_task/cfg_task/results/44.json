{
  "edge_analysis": {
    "static_total": 4,
    "llm_total": 7,
    "matched_edges": {
      "exact_matches": 1,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.14285714285714285,
      "recall": 0.25,
      "f1_score": 0.18181818181818182
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 1: [Source] #21\nresponse = self.create_post(credentials.api_key, input_data.author_id.\n get_secret_value(), input_data.title, input_data.content, input_data.\n content_format, input_data.tags, input_data.canonical_url, input_data.\n publish_status, input_data.license, input_data.notify_followers)\nif 'data' in response: => [Target] #24\nerror_message = response.get('errors', [{}])[0].get('message',\n 'Unknown error occurred')\nraise RuntimeError(f'Failed to create Medium post: {error_message}')",
      "Edge 2: [Source] #22\nyield 'post_id', response['data']['id'] => [Target] #26\nyield 'post_url', response['data']['url']",
      "Edge 3: [Source] #26\nyield 'post_url', response['data']['url'] => [Target] #27\nyield 'published_at', response['data']['publishedAt']"
    ],
    "extra_blocks": [
      "Edge 0: [Source] from enum import Enum\nfrom typing import List, Literal\n\nfrom pydantic import SecretStr\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n APIKeyCredentials,\n BlockSecret,\n CredentialsField,\n CredentialsMetaInput,\n SchemaField,\n SecretField,\n)\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests => [Target] TEST_CREDENTIALS = APIKeyCredentials(\n id=\"01234567-89ab-cdef-0123-456789abcdef\",\n provider=\"medium\",\n api_key=SecretStr(\"mock-medium-api-key\"),\n title=\"Mock Medium API key\",\n expires_at=None,\n)",
      "Edge 1: [Source] TEST_CREDENTIALS = APIKeyCredentials(\n id=\"01234567-89ab-cdef-0123-456789abcdef\",\n provider=\"medium\",\n api_key=SecretStr(\"mock-medium-api-key\"),\n title=\"Mock Medium API key\",\n expires_at=None,\n) => [Target] TEST_CREDENTIALS_INPUT = {\n \"provider\": TEST_CREDENTIALS.provider,\n \"id\": TEST_CREDENTIALS.id,\n \"type\": TEST_CREDENTIALS.type,\n \"title\": TEST_CREDENTIALS.type,\n}",
      "Edge 2: [Source] def create_post(\n self,\n api_key: SecretStr,\n author_id,\n title,\n content,\n content_format,\n tags,\n canonical_url,\n publish_status,\n license,\n notify_followers,\n ): => [Target] headers = {\n \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n \"Content-Type\": \"application/json\",\n \"Accept\": \"application/json\",\n }\n\n data = {\n \"title\": title,\n \"content\": content,\n \"contentFormat\": content_format,\n \"tags\": tags,\n \"canonicalUrl\": canonical_url,\n \"publishStatus\": publish_status,\n \"license\": license,\n \"notifyFollowers\": notify_followers,\n }",
      "Edge 3: [Source] headers = {\n \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n \"Content-Type\": \"application/json\",\n \"Accept\": \"application/json\",\n }\n\n data = {\n \"title\": title,\n \"content\": content,\n \"contentFormat\": content_format,\n \"tags\": tags,\n \"canonicalUrl\": canonical_url,\n \"publishStatus\": publish_status,\n \"license\": license,\n \"notifyFollowers\": notify_followers,\n } => [Target] response = requests.post(\n f\"https://api.medium.com/v1/users/{author_id}/posts\",\n headers=headers,\n json=data,\n )",
      "Edge 4: [Source] response = requests.post(\n f\"https://api.medium.com/v1/users/{author_id}/posts\",\n headers=headers,\n json=data,\n ) => [Target] return response.json()",
      "Edge 5: [Source] def run(\n self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n ) -> BlockOutput:\n response = self.create_post(\n credentials.api_key,\n input_data.author_id.get_secret_value(),\n input_data.title,\n input_data.content,\n input_data.content_format,\n input_data.tags,\n input_data.canonical_url,\n input_data.publish_status,\n input_data.license,\n input_data.notify_followers,\n ) => [Target] if \"data\" in response:\n yield \"post_id\", response[\"data\"][\"id\"]\n yield \"post_url\", response[\"data\"][\"url\"]\n yield \"published_at\", response[\"data\"][\"publishedAt\"]",
      "Edge 6: [Source] def run(\n self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n ) -> BlockOutput:\n response = self.create_post(\n credentials.api_key,\n input_data.author_id.get_secret_value(),\n input_data.title,\n input_data.content,\n input_data.content_format,\n input_data.tags,\n input_data.canonical_url,\n input_data.publish_status,\n input_data.license,\n input_data.notify_followers,\n ) => [Target] else:\n error_message = response.get(\"errors\", [{}])[0].get(\n \"message\", \"Unknown error occurred\"\n )\n raise RuntimeError(f\"Failed to create Medium post: {error_message}\")"
    ]
  }
}