{
  "edge_analysis": {
    "static_total": 3,
    "llm_total": 1,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 1
    },
    "accuracy_metrics": {
      "precision": 0.0,
      "recall": 0.0,
      "f1_score": 0.0
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 0: [Source] #11\\nyield 'payload', input_data.payload => [Target] #12\\nyield 'order_id', input_data.payload['orderId']",
      "Edge 1: [Source] #31\\nyield from super().run(input_data, **kwargs)\\nyield 'status', input_data.payload['status'] => [Target] #32\\nyield 'tracking_number', input_data.payload['trackingNumber']",
      "Edge 2: [Source] #32\\nyield 'tracking_number', input_data.payload['trackingNumber'] => [Target] #33\\nyield 'carrier_code', input_data.payload['carrierCode']"
    ],
    "extra_blocks": [
      "Edge 0: [Source] def run(self, input_data: Input, **kwargs) -> BlockOutput: # type: ignore => [Target] yield from super().run(input_data, **kwargs)\\n\\n # Extract and normalize values from the payload\\n yield \"status\", input_data.payload[\"status\"]\\n yield \"tracking_number\", input_data.payload[\"trackingNumber\"]\\n yield \"carrier_code\", input_data.payload[\"carrierCode\"]"
    ]
  }
}