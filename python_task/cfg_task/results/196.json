{
  "edge_analysis": {
    "static_total": 3,
    "llm_total": 13,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 2
    },
    "accuracy_metrics": {
      "precision": 0.0,
      "recall": 0.0,
      "f1_score": 0.0
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "#3\\nasync with SpinTestServer() as server:\\n yield server",
      "#9\\ncreated_graph_ids = []\\noriginal_create_graph = server.agent_server.test_create_graph\\ntry:",
      "#11\\ncreated_graph = await original_create_graph(*args, **kwargs)"
    ],
    "extra_blocks": [
      "import logging",
      "import pytest",
      "from backend.util.test import SpinTestServer",
      "logger = logging.getLogger(__name__)",
      "ch = logging.StreamHandler()\\nch.setLevel(logging.INFO)\\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\\nch.setFormatter(formatter)\\nlogger.addHandler(ch)",
      "@pytest.fixture(scope=\"session\")",
      "@pytest.fixture(scope=\"session\", autouse=True)",
      "async def server():",
      "async def graph_cleanup(server):\\n created_graph_ids = []\\n original_create_graph = server.agent_server.test_create_graph\\n",
      "try:\\n",
      "finally:\\n",
      "# Delete the created graphs and assert they were deleted\\nfor graph_id, user_id in created_graph_ids:\\n",
      "if user_id:\\n resp = await server.agent_server.test_delete_graph(graph_id, user_id)\\n num_deleted = resp[\"version_counts\"]\\n assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"\\n"
    ]
  }
}