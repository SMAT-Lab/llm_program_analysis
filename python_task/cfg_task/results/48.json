{
  "edge_analysis": {
    "static_total": 14,
    "llm_total": 3,
    "matched_edges": {
      "exact_matches": 1,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.3333333333333333,
      "recall": 0.07142857142857142,
      "f1_score": 0.11764705882352942
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "#5\n\"\"\"\n >>> backtrack(0, 0)\n True\n\n >>> backtrack(0, 1)\n True\n\n >>> backtrack(0, 4)\n False\n \"\"\"\nif pattern_index == len(pattern) and str_index == len(input_string):",
      "#5\n\"\"\"\n >>> backtrack(0, 0)\n True\n\n >>> backtrack(0, 1)\n True\n\n >>> backtrack(0, 4)\n False\n \"\"\"\nif pattern_index == len(pattern) and str_index == len(input_string):",
      "#7\nif pattern_index == len(pattern) or str_index == len(input_string):",
      "#7\nif pattern_index == len(pattern) or str_index == len(input_string):",
      "#10\nchar = pattern[pattern_index]\nif char in pattern_map:",
      "#10\nchar = pattern[pattern_index]\nif char in pattern_map:",
      "#12\nmapped_str = pattern_map[char]\nif input_string.startswith(mapped_str, str_index):",
      "#12\nmapped_str = pattern_map[char]\nif input_string.startswith(mapped_str, str_index):",
      "#13\nfor end in range(str_index + 1, len(input_string) + 1):",
      "#13\nfor end in range(str_index + 1, len(input_string) + 1):",
      "#19\nsubstr = input_string[str_index:end]\nif substr in str_map:",
      "#22\npattern_map[char] = substr\nstr_map[substr] = char\nif backtrack(pattern_index + 1, end):",
      "#22\npattern_map[char] = substr\nstr_map[substr] = char\nif backtrack(pattern_index + 1, end):"
    ],
    "extra_blocks": [
      "def match_word_pattern(pattern: str, input_string: str) -> bool:\n \"\"\"\n Determine if a given pattern matches a string using backtracking.\n\n pattern: The pattern to match.\n input_string: The string to match against the pattern.\n return: True if the pattern matches the string, False otherwise.\n\n >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n True\n\n >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n True\n\n >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n False\n \"\"\""
    ]
  }
}