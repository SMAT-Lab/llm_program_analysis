{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 5,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] import logging => [Target] from backend.data import integrations\\nfrom backend.data.model import APIKeyCredentials, Credentials, OAuth2Credentials",
      "Edge 1: [Source] from backend.data import integrations\\nfrom backend.data.model import APIKeyCredentials, Credentials, OAuth2Credentials => [Target] from ._base import WT, BaseWebhooksManager",
      "Edge 2: [Source] from ._base import WT, BaseWebhooksManager => [Target] logger = logging.getLogger(__name__)",
      "Edge 3: [Source] async def _register_webhook(\\n self,\\n credentials: Credentials,\\n webhook_type: WT,\\n resource: str,\\n events: list[str],\\n ingress_url: str,\\n secret: str,\\n ) -> tuple[str, dict]: => [Target] print(ingress_url) # FIXME: pass URL to user in front end",
      "Edge 4: [Source] print(ingress_url) # FIXME: pass URL to user in front end => [Target] return \"\", {}"
    ]
  }
}