{
  "edge_analysis": {
    "static_total": 10,
    "llm_total": 43,
    "matched_edges": {
      "exact_matches": 5,
      "partial_matches": 2
    },
    "accuracy_metrics": {
      "precision": 5.0,
      "recall": 0.5,
      "f1_score": 0.8333333333333334
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "#106",
      "#115",
      "#138",
      "#139",
      "#140"
    ],
    "extra_blocks": [
      "from typing_extensions import TypedDict",
      "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "from backend.data.model import SchemaField",
      "from ._api import get_api",
      "from ._auth import ( TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GithubCredentials, GithubCredentialsField, GithubCredentialsInput,)",
      "@staticmethod def list_tags( credentials: GithubCredentials, repo_url: str ) -> list[Output.TagItem]: ",
      "api = get_api(credentials) tags_url = repo_url + \"/tags\" response = api.get(tags_url) data = response.json() repo_path = repo_url.replace(\"https://github.com/\", \"\") tags: list[GithubListTagsBlock.Output.TagItem] = [ { \"name\": tag[\"name\"], \"url\": f\"https://github.com/{repo_path}/tree/{tag['name']}\", } for tag in data ]",
      "return tags",
      "tags = self.list_tags( credentials, input_data.repo_url, )",
      "yield from ((\"tag\", tag) for tag in tags)",
      "def list_branches( credentials: GithubCredentials, repo_url: str ) -> list[Output.BranchItem]: ",
      "api = get_api(credentials) branches_url = repo_url + \"/branches\" response = api.get(branches_url) data = response.json() repo_path = repo_url.replace(\"https://github.com/\", \"\") branches: list[GithubListBranchesBlock.Output.BranchItem] = [ { \"name\": branch[\"name\"], \"url\": f\"https://github.com/{repo_path}/tree/{branch['name']}\", } for branch in data ]",
      "return branches",
      "branches = self.list_branches( credentials, input_data.repo_url, )",
      "yield from ((\"branch\", branch) for branch in branches)",
      "def list_discussions( credentials: GithubCredentials, repo_url: str, num_discussions: int ) -> list[Output.DiscussionItem]: ",
      "api = get_api(credentials) # GitHub GraphQL API endpoint is different; we'll use api.post with custom URL repo_path = repo_url.replace(\"https://github.com/\", \"\") owner, repo = repo_path.split(\"/\") query = \"\"\" query($owner: String!, $repo: String!, $num: Int!) { repository(owner: $owner, name: $repo) { discussions(first: $num) { nodes { title url } } } } } \"\"\" variables = {\"owner\": owner, \"repo\": repo, \"num\": num_discussions} response = api.post( \"https://api.github.com/graphql\", json={\"query\": query, \"variables\": variables}, ) data = response.json() discussions: list[GithubListDiscussionsBlock.Output.DiscussionItem] = [ {\"title\": discussion[\"title\"], \"url\": discussion[\"url\"]} for discussion in data[\"data\"][\"repository\"][\"discussions\"][\"nodes\"] ]",
      "return discussions",
      "discussions = self.list_discussions( credentials, input_data.repo_url, input_data.num_discussions )",
      "yield from ((\"discussion\", discussion) for discussion in discussions)",
      "class Input(BlockSchema): credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\") repo_url: str = SchemaField( description=\"URL of the GitHub repository\", placeholder=\"https://github.com/owner/repo\", ) num_discussions: int = SchemaField( description=\"Number of discussions to fetch\", default=5 )",
      "def list_releases( credentials: GithubCredentials, repo_url: str) -> list[Output.ReleaseItem]: ",
      "api = get_api(credentials) releases_url = repo_url + \"/releases\" response = api.get(releases_url) data = response.json() releases: list[GithubListReleasesBlock.Output.ReleaseItem] = [ {\"name\": release[\"name\"], \"url\": release[\"html_url\"]} for release in data ]",
      "return releases",
      "releases = self.list_releases( credentials, input_data.repo_url, )",
      "yield from ((\"release\", release) for release in releases)",
      "def read_file( credentials: GithubCredentials, repo_url: str, file_path: str, branch: str ) -> tuple[str, int]: ",
      "api = get_api(credentials) content_url = repo_url + f\"/contents/{file_path}?ref={branch}\" response = api.get(content_url) content = response.json()",
      "return content[\"content\"], content[\"size\"]",
      "def run( self, input_data: Input, *, credentials: GithubCredentials, **kwargs, ) -> BlockOutput: ",
      "yield \"raw_content\", raw_content",
      "yield \"text_content\", base64.b64decode(raw_content).decode(\"utf-8\")",
      "yield \"size\", size",
      "def read_folder( credentials: GithubCredentials, repo_url: str, folder_path: str, branch: str ) -> tuple[list[Output.FileEntry], list[Output.DirEntry]]: ",
      "api = get_api(credentials) contents_url = repo_url + f\"/contents/{folder_path}?ref={branch}\" response = api.get(contents_url) content = response.json()",
      "files = [ GithubReadFolderBlock.Output.FileEntry( name=entry[\"name\"], path=entry[\"path\"], size=entry[\"size\"], ) for entry in content if entry[\"type\"] == \"file\" ]",
      "dirs = [ GithubReadFolderBlock.Output.DirEntry( name=entry[\"name\"], path=entry[\"path\"], ) for entry in content if entry[\"type\"] == \"dir\" ]",
      "return files, dirs",
      "files, dirs = self.read_folder( credentials, input_data.repo_url, input_data.folder_path.lstrip(\"/\"), input_data.branch, )",
      "yield from ((\"file\", file) for file in files)",
      "yield from ((\"dir\", dir) for dir in dirs)",
      "class Output(BlockSchema): ",
      "def create_branch( credentials: GithubCredentials, repo_url: str, new_branch: str, source_branch: str, ) -> str: ",
      "api = get_api(credentials) # Get the SHA of the source branch ref_url = repo_url + f\"/git/refs/heads/{source_branch}\" response = api.get(ref_url) sha = response.json()[\"object\"][\"sha\"]",
      "create_ref_url = repo_url + \"/git/refs\" data = {\"ref\": f\"refs/heads/{new_branch}\", \"sha\": sha} response = api.post(create_ref_url, json=data) return \"Branch created successfully\"",
      "status = self.create_branch( credentials, input_data.repo_url, input_data.new_branch, input_data.source_branch, )",
      "yield \"status\", status",
      "def delete_branch( credentials: GithubCredentials, repo_url: str, branch: str ) -> str: ",
      "api = get_api(credentials) ref_url = repo_url + f\"/git/refs/heads/{branch}\" api.delete(ref_url)",
      "return \"Branch deleted successfully\"",
      "status = self.delete_branch( credentials, input_data.repo_url, input_data.branch, )",
      "yield \"status\", status"
    ]
  }
}