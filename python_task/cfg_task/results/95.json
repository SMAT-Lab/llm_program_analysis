{
  "edge_analysis": {
    "static_total": 12,
    "llm_total": 8,
    "matched_edges": {
      "exact_matches": 5,
      "partial_matches": 2
    },
    "accuracy_metrics": {
      "precision": 0.625,
      "recall": 0.4166666666666667,
      "f1_score": 0.5
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 2: [Source] #6\\nassert created_graph.name == 'TestGraph' => [Target] #8\\nassert len(created_graph.nodes) == 3",
      "Edge 4: [Source] #10\\nassert UUID(created_graph.nodes[0].id) => [Target] #12\\nassert UUID(created_graph.nodes[1].id)",
      "Edge 6: [Source] #14\\nassert UUID(created_graph.nodes[2].id) => [Target] #16\\nnodes = created_graph.nodes\\nlinks = created_graph.links\\nassert len(links) == 1",
      "Edge 8: [Source] #18\\nassert links[0].source_id != links[0].sink_id => [Target] #20\\nassert links[0].source_id in {nodes[0].id, nodes[1].id, nodes[2].id}",
      "Edge 10: [Source] #27\\n\"\"\"\\n Test the get_input_schema method of a created graph.\\n\\n This test ensures that:\\n 1. A graph can be created with a single node.\\n 2. The input schema of the created graph is correctly generated.\\n 3. The input schema contains the expected input name and node id.\\n\\n Args:\\n server (SpinTestServer): The test server instance.\\n \"\"\"\\nvalue_block = StoreValueBlock().id\\ninput_block = AgentInputBlock().id\\noutput_block = AgentOutputBlock().id\\ngraph = Graph(name='TestInputSchema', description='Test input schema',\\n nodes=[Node(id='node_0_a', block_id=input_block, input_default={'name':\\n 'in_key_a', 'title': 'Key A', 'value': 'A'}, metadata={'id': 'node_0_a'\\n }), Node(id='node_0_b', block_id=input_block, input_default={'name':\\n 'in_key_b', 'advanced': True}, metadata={'id': 'node_0_b'}), Node(id=\\n 'node_1', block_id=value_block, metadata={'id': 'node_1'}), Node(id=\\n 'node_2', block_id=output_block, input_default={'name': 'out_key',\\n 'description': 'This is an output key'}, metadata={'id': 'node_2'})],\\n links=[Link(source_id='node_0_a', sink_id='node_1', source_name=\\n 'result', sink_name='input'), Link(source_id='node_0_b', sink_id=\\n 'node_1', source_name='result', sink_name='input'), Link(source_id=\\n 'node_1', sink_id='node_2', source_name='output', sink_name='value')])\\ncreate_graph = CreateGraph(graph=graph)\\ncreated_graph = await server.agent_server.test_create_graph(create_graph,\\n DEFAULT_USER_ID) => [Target] #28\\ninput_schema = created_graph.input_schema\\ninput_schema['title'] = 'ExpectedInputSchema'\\nassert input_schema == ExpectedInputSchema.jsonschema()",
      "Edge 11: [Source] #28\\ninput_schema = created_graph.input_schema\\ninput_schema['title'] = 'ExpectedInputSchema'\\nassert input_schema == ExpectedInputSchema.jsonschema() => [Target] #36\\noutput_schema = created_graph.output_schema\\noutput_schema['title'] = 'ExpectedOutputSchema'\\nassert output_schema == ExpectedOutputSchema.jsonschema()"
    ],
    "extra_blocks": [
      "Edge 2: [Source] create_graph = CreateGraph(graph=graph)\\ncreated_graph = await server.agent_server.test_create_graph(\\n create_graph, DEFAULT_USER_ID\\n)\\n => [Target] assert UUID(created_graph.id)\\nassert created_graph.name == \"TestGraph\"\\n",
      "Edge 4: [Source] assert len(created_graph.nodes) == 3\\nassert UUID(created_graph.nodes[0].id)\\nassert UUID(created_graph.nodes[1].id)\\nassert UUID(created_graph.nodes[2].id)\\n => [Target] nodes = created_graph.nodes\\nlinks = created_graph.links\\nassert len(links) == 1\\nassert links[0].source_id != links[0].sink_id\\nassert links[0].source_id in {nodes[0].id, nodes[1].id, nodes[2].id}\\nassert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}\\n",
      "Edge 5: [Source] async def test_get_input_schema(server: SpinTestServer):\\n \"\"\"\\n Test the get_input_schema method of a created graph.\\n\\n This test ensures that:\\n 1. A graph can be created with a single node.\\n 2. The input schema of the created graph is correctly generated.\\n 3. The input schema contains the expected input name and node id.\\n\\n Args:\\n server (SpinTestServer): The test server instance.\\n \"\"\"\\n value_block = StoreValueBlock().id\\n input_block = AgentInputBlock().id\\n output_block = AgentOutputBlock().id => [Target] graph = Graph(\\n name=\"TestInputSchema\",\\n description=\"Test input schema\",\\n nodes=[\\n Node(\\n id=\"node_0_a\",\\n block_id=input_block,\\n input_default={\"name\": \"in_key_a\", \"title\": \"Key A\", \"value\": \"A\"},\\n metadata={\"id\": \"node_0_a\"},\\n ),\\n Node(\\n id=\"node_0_b\",\\n block_id=input_block,\\n input_default={\"name\": \"in_key_b\", \"advanced\": True},\\n metadata={\"id\": \"node_0_b\"},\\n ),\\n Node(id=\"node_1\", block_id=value_block, metadata={\"id\": \"node_1\"}),\\n Node(\\n id=\"node_2\",\\n block_id=output_block,\\n input_default={\\n \"name\": \"out_key\",\\n \"description\": \"This is an output key\",\\n },\\n metadata={\"id\": \"node_2\"},\\n ),\\n ],\\n links=[\\n Link(\\n source_id=\"node_0_a\",\\n sink_id=\"node_1\",\\n source_name=\"result\",\\n sink_name=\"input\",\\n ),\\n Link(\\n source_id=\"node_0_b\",\\n sink_id=\"node_1\",\\n source_name=\"result\",\\n sink_name=\"input\",\\n ),\\n Link(\\n source_id=\"node_1\",\\n sink_id=\"node_2\",\\n source_name=\"output\",\\n sink_name=\"value\",\\n ),\\n ],\\n)\\n\\ncreate_graph = CreateGraph(graph=graph)\\ncreated_graph = await server.agent_server.test_create_graph(\\n create_graph, DEFAULT_USER_ID\\n) => [Target] input_schema = created_graph.input_schema\\ninput_schema[\"title\"] = \"ExpectedInputSchema\"\\nassert input_schema == ExpectedInputSchema.jsonschema()"
    ]
  }
}