{
  "edge_analysis": {
    "static_total": 9,
    "llm_total": 13,
    "matched_edges": {
      "exact_matches": 2,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": "0.15384615384615385",
      "recall": "0.2222222222222222",
      "f1_score": "0.1818181818181818"
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 1: [Source] #11\\nfor spot in self.spots_taken: => [Target] #13\\nself.spots_taken = []",
      "Edge 2: [Source] #58\\nfor level in self.levels: => [Target] #59\\nif level.park_vehicle(vehicle):",
      "Edge 3: [Source] #58\\nfor level in self.levels: => [Target] #60\\nreturn False",
      "Edge 4: [Source] #59\\nif level.park_vehicle(vehicle): => [Target] #61\\nreturn True",
      "Edge 5: [Source] #76\\nspot = self._find_available_spot(vehicle)\\nif spot is None: => [Target] #77\\nreturn None",
      "Edge 6: [Source] #76\\nspot = self._find_available_spot(vehicle)\\nif spot is None: => [Target] #79\\nspot.park_vehicle(vehicle)\\nreturn spot",
      "Edge 7: [Source] #100\\nif self.vehicle is not None: => [Target] #101\\nreturn False",
      "Edge 8: [Source] #100\\nif self.vehicle is not None: => [Target] #102\\nreturn vehicle.can_fit_in_spot(self)"
    ],
    "extra_blocks": [
      "Edge 0: [Source] from abc import ABCMeta, abstractmethod => [Target] from enum import Enum",
      "Edge 1: [Source] class Vehicle(metaclass=ABCMeta): => [Target] @abstractmethod",
      "Edge 2: [Source] def clear_spots(self): => [Target] for spot in self.spots_taken:\\n spot.remove_vehicle(self)",
      "Edge 3: [Source] def clear_spots(self): => [Target] self.spots_taken = []",
      "Edge 4: [Source] for spot in self.spots_taken:\\n spot.remove_vehicle(self) => [Target] self.spots_taken = []",
      "Edge 5: [Source] def take_spot(self, spot): => [Target] self.spots_taken.append(spot)",
      "Edge 6: [Source] def park_vehicle(self, vehicle): => [Target] for level in self.levels:\\n if level.park_vehicle(vehicle):\\n return True",
      "Edge 7: [Source] for level in self.levels:\\n if level.park_vehicle(vehicle):\\n return True => [Target] return False",
      "Edge 8: [Source] def park_vehicle(self, vehicle):\\n spot = self._find_available_spot(vehicle) => [Target] if spot is None:\\n return None",
      "Edge 9: [Source] def park_vehicle(self, vehicle):\\n spot = self._find_available_spot(vehicle) => [Target] else:\\n spot.park_vehicle(vehicle)\\n return spot",
      "Edge 10: [Source] def _park_starting_at_spot(self, spot, vehicle):\\n \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\" => [Target] pass",
      "Edge 11: [Source] def can_fit_vehicle(self, vehicle): => [Target] if self.vehicle is not None:\\n return False",
      "Edge 12: [Source] if self.vehicle is not None:\\n return False => [Target] return vehicle.can_fit_in_spot(self)"
    ]
  }
}