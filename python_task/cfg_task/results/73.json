{
  "edge_analysis": {
    "static_total": 17,
    "llm_total": 11,
    "matched_edges": {
      "exact_matches": 6,
      "partial_matches": 2
    },
    "accuracy_metrics": {
      "precision": 0.5454545454545454,
      "recall": 0.35294117647058826,
      "f1_score": 0.42857142857142855
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 1: [Source] #9\\n\"\"\"\\n Generate an image for an agent using Flux model via Replicate API.\\n\\n Args:\\n agent (Graph): The agent to generate an image for\\n\\n Returns:\\n io.BytesIO: The generated image as bytes\\n \"\"\"\\ntry: => [Target] #11\\nlogger.exception('Failed to generate agent image')\\nraise RuntimeError(f'Image generation failed: {str(e)}')",
      "Edge 4: [Source] #14\\nprompt = f\"\"\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"\"\"\\nclient = replicate.Client(api_token=settings.secrets.replicate_api_key)\\ninput_data = {'prompt': prompt, 'width': 1024, 'height': 768,\\n 'aspect_ratio': '4:3', 'output_format': 'jpg', 'output_quality': 90,\\n 'num_inference_steps': 30, 'guidance': 3.5, 'negative_prompt':\\n 'blurry, low quality, distorted, deformed', 'disable_safety_checker': True}\\ntry: => [Target] #16\\noutput = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\\nif isinstance(output, list) and output:",
      "Edge 6: [Source] #16\\noutput = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\\nif isinstance(output, list) and output: => [Target] #19\\nif isinstance(output[0], FileOutput):",
      "Edge 8: [Source] #19\\nif isinstance(output[0], FileOutput): => [Target] #31\\nresult_url = output[0]\\nresponse = requests.get(result_url)\\nresponse.raise_for_status()\\nimage_bytes = response.content",
      "Edge 9: [Source] #29\\nimage_bytes = output[0].read() => [Target] #20\\nreturn io.BytesIO(image_bytes)",
      "Edge 12: [Source] #21\\nif isinstance(output, FileOutput): => [Target] #24\\nif isinstance(output, str):",
      "Edge 13: [Source] #24\\nif isinstance(output, str): => [Target] #25\\nresponse = requests.get(output)\\nresponse.raise_for_status()\\nimage_bytes = response.content",
      "Edge 14: [Source] #24\\nif isinstance(output, str): => [Target] #27\\nraise RuntimeError('Unexpected output format from the model.')",
      "Edge 15: [Source] #17\\nif e.status == 401: => [Target] #33\\nraise RuntimeError('Invalid Replicate API token') from e",
      "Edge 16: [Source] #17\\nif e.status == 401: => [Target] #34\\nraise RuntimeError(f'Replicate API error: {str(e)}') from e"
    ],
    "extra_blocks": [
      "Edge 0: [Source] import io\\nimport logging\\nfrom enum import Enum => [Target] import replicate\\nimport replicate.exceptions\\nimport requests\\nfrom replicate.helpers import FileOutput",
      "Edge 1: [Source] import replicate\\nimport replicate.exceptions\\nimport requests\\nfrom replicate.helpers import FileOutput => [Target] from backend.data.graph import Graph\\nfrom backend.util.settings import Settings",
      "Edge 2: [Source] from backend.data.graph import Graph\\nfrom backend.util.settings import Settings => [Target] logger = logging.getLogger(__name__)",
      "Edge 5: [Source] if not settings.secrets.replicate_api_key:\\n raise ValueError(\"Missing Replicate API key in settings\") => [Target] # Construct prompt from agent details\\n prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\"",
      "Edge 6: [Source] # Construct prompt from agent details\\n prompt = f\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.\" => [Target] # Set up Replicate client\\n client = replicate.Client(api_token=settings.secrets.replicate_api_key)",
      "Edge 7: [Source] # Set up Replicate client\\n client = replicate.Client(api_token=settings.secrets.replicate_api_key) => [Target] # Model parameters\\n input_data = {\\n \"prompt\": prompt,\\n \"width\": 1024,\\n \"height\": 768,\\n \"aspect_ratio\": \"4:3\",\\n \"output_format\": \"jpg\",\\n \"output_quality\": 90,\\n \"num_inference_steps\": 30,\\n \"guidance\": 3.5,\\n \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\\n \"disable_safety_checker\": True,\\n }",
      "Edge 8: [Source] # Model parameters\\n input_data = {\\n \"prompt\": prompt,\\n \"width\": 1024,\\n \"height\": 768,\\n \"aspect_ratio\": \"4:3\",\\n \"output_format\": \"jpg\",\\n \"output_quality\": 90,\\n \"num_inference_steps\": 30,\\n \"guidance\": 3.5,\\n \"negative_prompt\": \"blurry, low quality, distorted, deformed\",\\n \"disable_safety_checker\": True,\\n } => [Target] try:\\n # Run model\\n output = client.run(\"black-forest-labs/flux-1.1-pro\", input=input_data)\\n\\n # Depending on the model output, extract the image URL or bytes\\n # If the output is a list of FileOutput or URLs\\n if isinstance(output, list) and output:\\n if isinstance(output[0], FileOutput):\\n image_bytes = output[0].read()\\n else:\\n # If it's a URL string, fetch the image bytes\\n result_url = output[0]\\n response = requests.get(result_url)\\n response.raise_for_status()\\n image_bytes = response.content\\n elif isinstance(output, FileOutput):\\n image_bytes = output.read()\\n elif isinstance(output, str):\\n # Output is a URL\\n response = requests.get(output)\\n response.raise_for_status()\\n image_bytes = response.content\\n else:\\n raise RuntimeError(\"Unexpected output format from the model.\")\\n\\n return io.BytesIO(image_bytes)"
    ]
  }
}