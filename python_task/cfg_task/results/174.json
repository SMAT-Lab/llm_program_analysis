{
  "edge_analysis": {
    "static_total": 13,
    "llm_total": 12,
    "matched_edges": {
      "exact_matches": 6,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.5,
      "recall": 0.46153846153846156,
      "f1_score": 0.48
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 0: [Source] #8\\nif source is None: => [Target] #9\\nreturn False",
      "Edge 1: [Source] #8\\nif source is None: => [Target] #10\\nqueue = deque()\\nqueue.append(source)\\nsource.visit_state = State.visited",
      "Edge 6: [Source] #13\\nnode = queue.popleft()\\nprint(node)\\nif dest is node: => [Target] #16\\nfor adjacent_node in node.adj_nodes.values():",
      "Edge 7: [Source] #16\\nfor adjacent_node in node.adj_nodes.values(): => [Target] #18\\nif adjacent_node.visit_state == State.unvisited:",
      "Edge 8: [Source] #18\\nif adjacent_node.visit_state == State.unvisited: => [Target] #20\\nqueue.append(adjacent_node)\\nadjacent_node.visit_state = State.visited"
    ],
    "extra_blocks": [
      "Edge 0: [Source] class State(Enum): => [Target] unvisited = 0\\n visited = 1",
      "Edge 7: [Source] for adjacent_node in node.adj_nodes.values():\\n if adjacent_node.visit_state == State.unvisited:\\n queue.append(adjacent_node)\\n adjacent_node.visit_state = State.visited => [Target] return False"
    ]
  }
}