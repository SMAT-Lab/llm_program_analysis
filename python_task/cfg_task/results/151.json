{
  "edge_analysis": {
    "static_total": 29,
    "llm_total": 41,
    "matched_edges": {
      "exact_matches": 15,
      "partial_matches": 5
    },
    "accuracy_metrics": {
      "precision": 0.36585365853658536,
      "recall": 0.5172413793103449,
      "f1_score": 0.4285714285714286
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 2: [Source] #49\nif isinstance(obj, list) and isinstance(key, int) and 0 <= key < len(obj): => [Target] #50\nyield 'output', obj[key]",
      "Edge 3: [Source] #49\nif isinstance(obj, list) and isinstance(key, int) and 0 <= key < len(obj): => [Target] #52\nif isinstance(obj, list) and isinstance(key, str):",
      "Edge 8: [Source] #63\nif isinstance(obj[0], dict) and key in obj[0]: => [Target] #64\nyield 'output', [item[key] for item in obj if key in item]",
      "Edge 9: [Source] #63\nif isinstance(obj[0], dict) and key in obj[0]: => [Target] #66\nyield 'output', [getattr(val, key) for val in obj if hasattr(val, key)]",
      "Edge 10: [Source] #55\nif isinstance(obj, object) and isinstance(key, str) and hasattr(obj, key): => [Target] #56\nyield 'output', getattr(obj, key)"
    ],
    "extra_blocks": [
      "Edge 1: [Source] def run(self, input_data: Input, **kwargs) -> BlockOutput:\\n obj = input_data.input\\n key = input_data.key\\n => [Target] if isinstance(obj, dict) and key in obj:\\n yield \"output\", obj[key]\\n",
      "Edge 2: [Source] def run(self, input_data: Input, **kwargs) -> BlockOutput:\\n obj = input_data.input\\n key = input_data.key\\n => [Target] elif isinstance(obj, list) and isinstance(key, int) and 0 <= key < len(obj):\\n yield \"output\", obj[key]\\n",
      "Edge 3: [Source] def run(self, input_data: Input, **kwargs) -> BlockOutput:\\n obj = input_data.input\\n key = input_data.key\\n => [Target] elif isinstance(obj, list) and isinstance(key, str):\\n if len(obj) == 0:\\n yield \"output\", []\\n elif isinstance(obj[0], dict) and key in obj[0]:\\n yield \"output\", [item[key] for item in obj if key in item]\\n else:\\n yield \"output\", [getattr(val, key) for val in obj if hasattr(val, key)]\\n",
      "Edge 4: [Source] def run(self, input_data: Input, **kwargs) -> BlockOutput:\\n obj = input_data.input\\n key = input_data.key\\n => [Target] elif isinstance(obj, object) and isinstance(key, str) and hasattr(obj, key):\\n yield \"output\", getattr(obj, key)\\n",
      "Edge 5: [Source] def run(self, input_data: Input, **kwargs) -> BlockOutput:\\n obj = input_data.input\\n key = input_data.key\\n => [Target] yield \"missing\", input_data.input\\n"
    ]
  }
}