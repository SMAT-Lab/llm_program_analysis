{
  "edge_analysis": {
    "static_total": 9,
    "llm_total": 13,
    "matched_edges": {
      "exact_matches": 7,
      "partial_matches": 2
    },
    "accuracy_metrics": {
      "precision": 0.5384615384615384,
      "recall": 0.7777777777777778,
      "f1_score": 0.6363636363636364
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 2: [Source] #10\\n\\\"\\\"\\\"\\n Pseudo-Code\\n Base Case:\\n 1. Check if we visited all of vertices\\n 1.1 If last visited vertex has path to starting vertex return True either\\n return False\\n Recursive Step:\\n 2. Iterate over each vertex\\n Check if next vertex is valid for transiting from current vertex\\n 2.1 Remember next vertex as next transition\\n 2.2 Do recursive call and check if going to this vertex solves problem\\n 2.3 If next vertex leads to solution return True\\n 2.4 Else backtrack, delete remembered vertex\\n\\n Case 1: Use exact graph as in main function, with initialized values\\n >>> graph = [[0, 1, 0, 1, 0],\\n >>> path = [0, -1, -1, -1, -1, 0]\\n >>> curr_ind = 1\\n >>> util_hamilton_cycle(graph, path, curr_ind)\\n True\\n >>> path\\n [0, 1, 2, 4, 3, 0]\\n\\n Case 2: Use exact graph as in previous case, but in the properties taken from\\n middle of calculation\\n >>> graph = [[0, 1, 0, 1, 0],\\n >>> path = [0, 1, 2, -1, -1, 0]\\n >>> curr_ind = 3\\n >>> util_hamilton_cycle(graph, path, curr_ind)\\n True\\n >>> path\\n [0, 1, 2, 4, 3, 0]\\n \\\"\\nif curr_ind == len(graph): => [Target] #11\\nreturn graph[path[curr_ind - 1]][path[0]] == 1",
      "Edge 5: [Source] #12\\nfor next_ver in range(len(graph)): => [Target] #15\\nreturn False"
    ],
    "extra_blocks": [
      "Edge 0: [Source] def valid_connection(\\n graph: list[list[int]], next_ver: int, curr_ind: int, path: list[int]\\n) -> bool: => [Target] \\\"\\\"\\\"\\n Checks whether it is possible to add next into path by validating 2 statements\\n 1. There should be path between current and next vertex\\n 2. Next vertex should not be in path\\n If both validations succeed we return True, saying that it is possible to connect\\n this vertices, otherwise we return False\\n\\n Case 1:Use exact graph as in main function, with initialized values\\n >>> graph = [[0, 1, 0, 1, 0],\\n ... [1, 0, 1, 1, 1],\\n ... [0, 1, 0, 0, 1],\\n ... [1, 1, 0, 0, 1],\\n ... [0, 1, 1, 1, 0]]\\n >>> path = [0, -1, -1, -1, -1, 0]\\n >>> curr_ind = 1\\n >>> next_ver = 1\\n >>> valid_connection(graph, next_ver, curr_ind, path)\\n True\\n\\n Case 2: Same graph, but trying to connect to node that is already in path\\n >>> path = [0, 1, 2, 4, -1, 0]\\n >>> curr_ind = 4\\n >>> next_ver = 1\\n >>> valid_connection(graph, next_ver, curr_ind, path)\\n False\\n \\\"\\\"\\\"",
      "Edge 1: [Source] \\\"\\\"\\\"\\n Checks whether it is possible to add next into path by validating 2 statements\\n 1. There should be path between current and next vertex\\n 2. Next vertex should not be in path\\n If both validations succeed we return True, saying that it is possible to connect\\n this vertices, otherwise we return False\\n\\n Case 1:Use exact graph as in main function, with initialized values\\n >>> graph = [[0, 1, 0, 1, 0],\\n ... [1, 0, 1, 1, 1],\\n ... [0, 1, 0, 0, 1],\\n ... [1, 1, 0, 0, 1],\\n ... [0, 1, 1, 1, 0]]\\n >>> path = [0, -1, -1, -1, -1, 0]\\n >>> curr_ind = 1\\n >>> next_ver = 1\\n >>> valid_connection(graph, next_ver, curr_ind, path)\\n True\\n\\n Case 2: Same graph, but trying to connect to node that is already in path\\n >>> path = [0, 1, 2, 4, -1, 0]\\n >>> curr_ind = 4\\n >>> next_ver = 1\\n >>> valid_connection(graph, next_ver, curr_ind, path)\\n False\\n \\\"\\\"\\\" => [Target] # 1. Validate that path exists between current and next vertices\\nif graph[path[curr_ind - 1]][next_ver] == 0:"
    ]
  }
}