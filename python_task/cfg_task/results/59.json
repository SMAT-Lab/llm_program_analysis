{
  "edge_analysis": {
    "static_total": 42,
    "llm_total": 33,
    "matched_edges": {
      "exact_matches": 27,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.8182,
      "recall": 0.6429,
      "f1_score": 0.72
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 2: [Source] #36\\nfor i in range(timeout): => [Target] #38\\nassert False, 'Execution did not complete in time.'",
      "Edge 3: [Source] #37\\nif await is_execution_completed(): => [Target] #39\\nreturn await AgentServer().test_get_graph_run_node_execution_results(graph_id,\\n graph_exec_id, user_id)",
      "Edge 4: [Source] #37\\nif await is_execution_completed(): => [Target] #40\\ntime.sleep(1)",
      "Edge 5: [Source] #29\\nstatus = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id) => [Target] #30\\nlog.info(f'Execution status: {status}')\\nif status == ExecutionStatus.FAILED:",
      "Edge 6: [Source] #30\\nlog.info(f'Execution status: {status}')\\nif status == ExecutionStatus.FAILED: => [Target] #31\\nlog.info('Execution failed')\\nraise Exception('Execution failed')",
      "Edge 7: [Source] #30\\nlog.info(f'Execution status: {status}')\\nif status == ExecutionStatus.FAILED: => [Target] #32\\nreturn status == ExecutionStatus.COMPLETED",
      "Edge 9: [Source] #46\\nprefix = f'[Test-{block.name}]'\\nif not block.test_input or not block.test_output: => [Target] #48\\nif not isinstance(block.test_input, list):",
      "Edge 10: [Source] #48\\nif not isinstance(block.test_input, list): => [Target] #50\\nblock.test_input = [block.test_input]",
      "Edge 11: [Source] #50\\nblock.test_input = [block.test_input] => [Target] #51\\nif not isinstance(block.test_output, list):",
      "Edge 12: [Source] #51\\nif not isinstance(block.test_output, list): => [Target] #52\\nblock.test_output = [block.test_output]",
      "Edge 13: [Source] #52\\nblock.test_output = [block.test_output] => [Target] #53\\noutput_index = 0\\nprefix = ' ' * 4 + prefix",
      "Edge 14: [Source] #53\\noutput_index = 0\\nprefix = ' ' * 4 + prefix => [Target] #54\\nfor mock_name, mock_obj in (block.test_mock or {}).items():",
      "Edge 15: [Source] #54\\nfor mock_name, mock_obj in (block.test_mock or {}).items(): => [Target] #55\\nif hasattr(block, mock_name):",
      "Edge 16: [Source] #54\\nfor mock_name, mock_obj in (block.test_mock or {}).items(): => [Target] #56\\nextra_exec_kwargs = {}\\nif CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:",
      "Edge 17: [Source] #55\\nif hasattr(block, mock_name): => [Target] #57\\nsetattr(block, mock_name, mock_obj)",
      "Edge 18: [Source] #55\\nif hasattr(block, mock_name): => [Target] #59\\nlog.info(f'{prefix} mock {mock_name} not found in block')",
      "Edge 19: [Source] #56\\nextra_exec_kwargs = {}\\nif CREDENTIALS_FIELD_NAME in block.input_schema.model_fields: => [Target] #60\\nif not block.test_credentials:",
      "Edge 20: [Source] #60\\nif not block.test_credentials: => [Target] #62\\nraise ValueError(f'{prefix} requires credentials but has no test_credentials')",
      "Edge 21: [Source] #60\\nif not block.test_credentials: => [Target] #63\\nextra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials",
      "Edge 22: [Source] #63\\nextra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials => [Target] #61\\nfor input_data in block.test_input:",
      "Edge 23: [Source] #61\\nfor input_data in block.test_input: => [Target] #65\\nlog.info(f'{prefix} in: {input_data}')",
      "Edge 24: [Source] #61\\nfor input_data in block.test_input: => [Target] #66\\nif output_index < len(block.test_output):",
      "Edge 25: [Source] #65\\nlog.info(f'{prefix} in: {input_data}') => [Target] #67\\nfor output_name, output_data in block.execute(input_data, **extra_exec_kwargs):",
      "Edge 26: [Source] #67\\nfor output_name, output_data in block.execute(input_data, **extra_exec_kwargs): => [Target] #68\\nif output_index >= len(block.test_output):",
      "Edge 27: [Source] #68\\nif output_index >= len(block.test_output): => [Target] #70\\nraise ValueError(f'{prefix} produced output more than expected')",
      "Edge 28: [Source] #68\\nif output_index >= len(block.test_output): => [Target] #71\\nex_output_name, ex_output_data = block.test_output[output_index]\\ncompare(output_data, ex_output_data)\\ncompare(output_name, ex_output_name)\\noutput_index += 1",
      "Edge 29: [Source] #66\\nif output_index < len(block.test_output): => [Target] #88\\nraise ValueError(\\n f'{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}'\\n )",
      "Edge 30: [Source] #74\\nif data == expected_data: => [Target] #75\\nis_matching = True",
      "Edge 31: [Source] #74\\nif data == expected_data: => [Target] #77\\nif isinstance(expected_data, type):",
      "Edge 33: [Source] #76\\nmark = '\\u2705' if is_matching else '\\u274c'\\nlog.info(f'{prefix} {mark} comparing `{data}` vs `{expected_data}`')\\nif not is_matching: => [Target] #84\\nraise ValueError(f'{prefix}: wrong output {data} vs {expected_data}')",
      "Edge 34: [Source] #77\\nif isinstance(expected_data, type): => [Target] #78\\nis_matching = isinstance(data, expected_data)",
      "Edge 35: [Source] #77\\nif isinstance(expected_data, type): => [Target] #80\\nif callable(expected_data):",
      "Edge 36: [Source] #80\\nif callable(expected_data): => [Target] #81\\nis_matching = expected_data(data)",
      "Edge 37: [Source] #80\\nif callable(expected_data): => [Target] #83\\nis_matching = False"
    ],
    "extra_blocks": [
      "Edge 0: [Source] import logging\\nimport time\\nfrom typing import Sequence\\n\\nfrom backend.data import db\\nfrom backend.data.block import Block, initialize_blocks\\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\\nfrom backend.data.user import create_default_user\\nfrom backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler\\nfrom backend.server.rest_api import AgentServer\\nfrom backend.server.utils import get_user_id => [Target] log = logging.getLogger(__name__)"
    ]
  }
}