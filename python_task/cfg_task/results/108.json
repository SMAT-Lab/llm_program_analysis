{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 9,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] from base64 import b64encode\\nfrom urllib.parse import urlencode => [Target] from backend.data.model import OAuth2Credentials\\nfrom backend.integrations.providers import ProviderName\\nfrom backend.util.request import requests",
      "Edge 1: [Source] from backend.data.model import OAuth2Credentials\\nfrom backend.integrations.providers import ProviderName\\nfrom backend.util.request import requests => [Target] from .base import BaseOAuthHandler",
      "Edge 2: [Source] def get_login_url(self, scopes: list[str], state: str) -> str:\\n params = {\\n \"client_id\": self.client_id,\\n \"redirect_uri\": self.redirect_uri,\\n \"response_type\": \"code\",\\n \"owner\": \"user\",\\n \"state\": state,\\n } => [Target] return f\"{self.auth_base_url}?{urlencode(params)}\"",
      "Edge 3: [Source] def exchange_code_for_tokens(\\n self, code: str, scopes: list[str]\\n ) -> OAuth2Credentials: => [Target] request_body = {\\n \"grant_type\": \"authorization_code\",\\n \"code\": code,\\n \"redirect_uri\": self.redirect_uri,\\n }",
      "Edge 4: [Source] def exchange_code_for_tokens(\\n self, code: str, scopes: list[str]\\n ) -> OAuth2Credentials: => [Target] auth_str = b64encode(f\"{self.client_id}:{self.client_secret}\".encode()).decode()\\n headers = {\\n \"Authorization\": f\"Basic {auth_str}\",\\n \"Accept\": \"application/json\",\\n }",
      "Edge 5: [Source] def exchange_code_for_tokens(\\n self, code: str, scopes: list[str]\\n ) -> OAuth2Credentials: => [Target] response = requests.post(self.token_url, json=request_body, headers=headers)\\n token_data = response.json()",
      "Edge 6: [Source] def exchange_code_for_tokens(\\n self, code: str, scopes: list[str]\\n ) -> OAuth2Credentials: => [Target] # Email is only available for non-bot users\\n email = (\\n token_data[\"owner\"][\"person\"][\"email\"]\\n if \"person\" in token_data[\"owner\"]\\n and \"email\" in token_data[\"owner\"][\"person\"]\\n else None\\n )",
      "Edge 7: [Source] def exchange_code_for_tokens(\\n self, code: str, scopes: list[str]\\n ) -> OAuth2Credentials: => [Target] return OAuth2Credentials(\\n provider=self.PROVIDER_NAME,\\n title=token_data.get(\"workspace_name\"),\\n username=email,\\n access_token=token_data[\"access_token\"],\\n refresh_token=None,\\n access_token_expires_at=None, # Notion tokens don't expire\\n refresh_token_expires_at=None,\\n scopes=[],\\n metadata={\\n \"owner\": token_data[\"owner\"],\\n \"bot_id\": token_data[\"bot_id\"],\\n \"workspace_id\": token_data[\"workspace_id\"],\\n \"workspace_name\": token_data.get(\"workspace_name\"),\\n \"workspace_icon\": token_data.get(\"workspace_icon\"),\\n },\\n )",
      "Edge 8: [Source] def needs_refresh(self, credentials: OAuth2Credentials) -> bool: => [Target] # Notion access tokens don't expire\\n return False"
    ]
  }
}