{
  "edge_analysis": {
    "static_total": 33,
    "llm_total": 52,
    "matched_edges": {
      "exact_matches": 13,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.25,
      "recall": 0.3939393939393939,
      "f1_score": 0.3061224489795918
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 1: [Source] #5\\ntry: => [Target] #7\\nmsg = f'Error in {func.__name__}: {e.__str__()}'\\nlogger.exception(msg)\\nraise",
      "Edge 7: [Source] #21\\nfor model in pydantic_types: => [Target] #23\\nlogger.debug(\\n f\"Registering Pyro (de)serializers for {func.__name__} annotation '{name}': {model.__qualname__}'\\n )\\npyro.register_class_to_dict(model, _make_custom_serializer(model))\\npyro.register_dict_to_class(model.__qualname__, _make_custom_deserializer(model)",
      "Edge 9: [Source] #94\\nif isinstance(client, PyroClient): => [Target] #97\\nraise RuntimeError(f'Client {client.__class__} is not a Pyro client.')",
      "Edge 13: [Source] #117\\norigin = get_origin(annotation)\\nargs = get_args(annotation)\\nif origin in (Union, UnionType, list, List, tuple, Tuple, set, Set, => [Target] #120\\nif origin in (dict, Dict):",
      "Edge 16: [Source] #120\\nif origin in (dict, Dict): => [Target] #123\\nif origin in (Awaitable, Coroutine):",
      "Edge 18: [Source] #123\\nif origin in (Awaitable, Coroutine): => [Target] #126\\nannotype = annotation if origin is None else origin\\nif annotype is not None and not hasattr(typing, getattr(annotype,",
      "Edge 22: [Source] #131\\nif annotype not in builtin_types and not issubclass(annotype, Enum): => [Target] #132\\nraise TypeError(f'Unsupported type encountered: {annotype}')",
      "Edge 28: [Source] #68\\nself.shared_event_loop = asyncio.get_event_loop()\\nif self.use_db: => [Target] #69\\nself.shared_event_loop.run_until_complete(db.connect())",
      "Edge 30: [Source] #69\\nself.shared_event_loop.run_until_complete(db.connect()) => [Target] #70\\nif self.use_redis:",
      "Edge 31: [Source] #70\\nif self.use_redis: => [Target] #71\\nredis.connect()",
      "Edge 32: [Source] #71\\nredis.connect() => [Target] #72\\nif self.use_supabase:",
      "Edge 33: [Source] #72\\nif self.use_supabase: => [Target] #73\\nfrom supabase import create_client\\nsecrets = Secrets()\\nself.supabase = create_client(secrets.supabase_url, secrets.\\n supabase_service_role_key)",
      "Edge 34: [Source] #73\\nfrom supabase import create_client\\nsecrets = Secrets()\\nself.supabase = create_client(secrets.supabase_url, secrets.\\n supabase_service_role_key) => [Target] #74\\nasync_thread = threading.Thread(target=self.__start_async_loop)\\nasync_thread.daemon = True\\nasync_thread.start()\\ndaemon_thread = threading.Thread(target=self.__start_pyro)\\ndaemon_thread.daemon = True\\ndaemon_thread.start()\\nself.run_service()"
    ],
    "extra_blocks": [
      "Edge 0: [Source] import asyncio\\nimport builtins\\nimport logging\\nimport os\\nimport threading\\nimport time\\nimport typing\\nfrom abc import ABC, abstractmethod\\nfrom enum import Enum\\nfrom types import NoneType, UnionType\\nfrom typing import (\\n Annotated,\\n Any,\\n Awaitable,\\n Callable,\\n Coroutine,\\n Dict,\\n FrozenSet,\\n Iterator,\\n List,\\n Set,\\n Tuple,\\n Type,\\n TypeVar,\\n Union,\\n cast,\\n get_args,\\n get_origin,\\n)\\nimport Pyro5.api\\nfrom pydantic import BaseModel\\nfrom Pyro5 import api as pyro\\nfrom Pyro5 import config as pyro_config\\nfrom backend.data import db, redis\\nfrom backend.util.process import AppProcess\\nfrom backend.util.retry import conn_retry\\nfrom backend.util.settings import Config, Secrets\\nlogger = logging.getLogger(__name__)\\nT = TypeVar(\"T\")\\nC = TypeVar(\"C\", bound=Callable)\\nconfig = Config()\\npyro_host = config.pyro_host\\npyro_config.MAX_RETRIES = config.pyro_client_comm_retry # type: ignore\\npyro_config.COMMTIMEOUT = config.pyro_client_comm_timeout # type: ignore\\n# --------- UTILITIES --------- # => [Target] AS = TypeVar(\"AS\", bound=AppService)",
      "Edge 1: [Source] AS = TypeVar(\"AS\", bound=AppService) => [Target] builtin_types = [*vars(builtins).values(), NoneType, Enum]",
      "Edge 11: [Source] class DynamicClient(PyroClient):\\n @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\") => [Target] return cast(AS, DynamicClient())",
      "Edge 16: [Source] if origin in (\\n Union,\\n UnionType,\\n list,\\n List,\\n tuple,\\n Tuple,\\n set,\\n Set,\\n frozenset,\\n FrozenSet,\\n ): => [Target] for arg in args:\\n yield from _pydantic_models_from_type_annotation(arg)",
      "Edge 17: [Source] if origin in (\\n Union,\\n UnionType,\\n list,\\n List,\\n tuple,\\n Tuple,\\n set,\\n Set,\\n frozenset,\\n FrozenSet,\\n ): => [Target] elif origin in (dict, Dict):\\n key_type, value_type = args\\n yield from _pydantic_models_from_type_annotation(key_type)\\n yield from _pydantic_models_from_type_annotation(value_type)",
      "Edge 18: [Source] if origin in (\\n Union,\\n UnionType,\\n list,\\n List,\\n tuple,\\n Tuple,\\n set,\\n Set,\\n frozenset,\\n FrozenSet,\\n ): => [Target] elif origin in (Awaitable, Coroutine):\\n # For coroutines and awaitables, check the return type\\n return_type = args[-1]\\n yield from _pydantic_models_from_type_annotation(return_type)",
      "Edge 19: [Source] for arg in args:\\n yield from _pydantic_models_from_type_annotation(arg) => [Target] origin = get_origin(annotation)\\nargs = get_args(annotation)",
      "Edge 20: [Source] elif origin in (dict, Dict):\\n key_type, value_type = args\\n yield from _pydantic_models_from_type_annotation(key_type)\\n yield from _pydantic_models_from_type_annotation(value_type) => [Target] else:\\n annotype = annotation if origin is None else origin\\n\\n # Exclude generic types and aliases\\n if (\\n annotype is not None\\n and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\\n and isinstance(annotype, type)\\n ):\\n if issubclass(annotype, BaseModel):\\n yield annotype\\n elif annotype not in builtin_types and not issubclass(annotype, Enum):\\n raise TypeError(f\"Unsupported type encountered: {annotype}\")",
      "Edge 21: [Source] elif origin in (Awaitable, Coroutine):\\n # For coroutines and awaitables, check the return type\\n return_type = args[-1]\\n yield from _pydantic_models_from_type_annotation(return_type) => [Target] else:\\n annotype = annotation if origin is None else origin\\n\\n # Exclude generic types and aliases\\n if (\\n annotype is not None\\n and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\\n and isinstance(annotype, type)\\n ):\\n if issubclass(annotype, BaseModel):\\n yield annotype\\n elif annotype not in builtin_types and not issubclass(annotype, Enum):\\n raise TypeError(f\"Unsupported type encountered: {annotype}\")",
      "Edge 22: [Source] class AppService(AppProcess, ABC):\\n shared_event_loop: asyncio.AbstractEventLoop\\n use_db: bool = False\\n use_redis: bool = False\\n use_supabase: bool = False => [Target] @classmethod\\n @abstractmethod",
      "Edge 23: [Source] @classmethod\\n @abstractmethod => [Target] @classmethod",
      "Edge 24: [Source] @classmethod\\n @abstractmethod => [Target] @conn_retry(\"Pyro\", \"Starting Pyro Service\")",
      "Edge 28: [Source] while True:\\n time.sleep(10) => [Target] while True:",
      "Edge 29: [Source] while True: => [Target] while True:\\n time.sleep(10)",
      "Edge 30: [Source] def run(self):\\n self.shared_event_loop = asyncio.get_event_loop() => [Target] if self.use_db:\\n self.shared_event_loop.run_until_complete(db.connect())",
      "Edge 31: [Source] def run(self):\\n self.shared_event_loop = asyncio.get_event_loop() => [Target] if self.use_redis:\\n redis.connect()",
      "Edge 32: [Source] def run(self):\\n self.shared_event_loop = asyncio.get_event_loop() => [Target] if self.use_supabase:\\n from supabase import create_client\\n\\n secrets = Secrets()\\n self.supabase = create_client(\\n secrets.supabase_url, secrets.supabase_service_role_key\\n )",
      "Edge 33: [Source] def run(self):\\n self.shared_event_loop = asyncio.get_event_loop() => [Target] # Initialize the async loop.\\n async_thread = threading.Thread(target=self.__start_async_loop)\\n async_thread.daemon = True\\n async_thread.start()",
      "Edge 34: [Source] def run(self):\\n self.shared_event_loop = asyncio.get_event_loop() => [Target] # Initialize pyro service\\n daemon_thread = threading.Thread(target=self.__start_pyro)\\n daemon_thread.daemon = True\\n daemon_thread.start()",
      "Edge 35: [Source] def run(self):\\n self.shared_event_loop = asyncio.get_event_loop() => [Target] # Run the main service (if it's not implemented, just sleep).\\n self.run_service()",
      "Edge 41: [Source] maximum_connection_thread_count = max(\\n Pyro5.config.THREADPOOL_SIZE,\\n config.num_node_workers * config.num_graph_workers,\\n ) => [Target] Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count # type: ignore\\n daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\\n self.uri = daemon.register(self, objectId=self.service_name)\\n logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\\n daemon.requestLoop()",
      "Edge 43: [Source] class PyroClient:\\n proxy: Pyro5.api.Proxy\\n def __init__(self):\\n self.proxy = None => [Target] def send_message(self, message):\\n if self.proxy:",
      "Edge 44: [Source] def connect(self, uri):\\n try: => [Target] self.proxy = Pyro5.api.Proxy(uri)\\n self.proxy.connect()",
      "Edge 45: [Source] self.proxy = Pyro5.api.Proxy(uri)\\n self.proxy.connect() => [Target] except Pyro5.errors.CommunicationError:",
      "Edge 46: [Source] except Pyro5.errors.CommunicationError: => [Target] print('Failed to connect to Pyro server.')\\n return",
      "Edge 47: [Source] def send_message(self, message):\\n if self.proxy: => [Target] try:",
      "Edge 48: [Source] def send_message(self, message):\\n if self.proxy: => [Target] else:",
      "Edge 49: [Source] try: => [Target] self.proxy.send(message)\\n except Exception as e:",
      "Edge 50: [Source] self.proxy.send(message)\\n except Exception as e: => [Target] print(f'An error occurred: {e}')\\n return",
      "Edge 51: [Source] else: => [Target] print('Not connected to Pyro server.')"
    ]
  }
}