{
  "edge_analysis": {
    "static_total": 4,
    "llm_total": 9,
    "matched_edges": {
      "exact_matches": 1,
      "partial_matches": 1
    },
    "accuracy_metrics": {
      "precision": 0.1111,
      "recall": 0.25,
      "f1_score": 0.1538
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 1: [Source] #17\\nresult = func(*args, **kwargs) => [Target] #18\\nreturn timing_info, result",
      "Edge 2: [Source] #26\\ntry: => [Target] #27\\nreturn func(*args, **kwargs)",
      "Edge 3: [Source] #26\\ntry: => [Target] #28\\nlogger.exception(\\n f'Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}'\\n )"
    ],
    "extra_blocks": [
      "Edge 0: [Source] import functools\\nimport logging\\nimport os\\nimport time\\nfrom typing import Callable, ParamSpec, Tuple, TypeVar => [Target] from pydantic import BaseModel",
      "Edge 1: [Source] from pydantic import BaseModel => [Target] P = ParamSpec(\"P\")\\nT = TypeVar(\"T\")",
      "Edge 2: [Source] P = ParamSpec(\"P\")\\nT = TypeVar(\"T\") => [Target] logger = logging.getLogger(__name__)",
      "Edge 3: [Source] def _end_measurement(\\n start_wall_time: float, start_cpu_time: float\\n) -> Tuple[float, float]:\\n end_wall_time = time.time()\\n end_cpu_time = os.times()[0] + os.times()[1] => [Target] return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time",
      "Edge 4: [Source] def time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:\\n \"\"\"\\n Decorator to measure the time taken by a function to execute.\\n \"\"\"\\n\\n @functools.wraps(func) => [Target] return wrapper"
    ]
  }
}