{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 7,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": "0.0",
      "recall": "0.0",
      "f1_score": "0.0"
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] class DatabaseManager(AppService): => [Target] create_graph_execution = exposed_run_and_wait(create_graph_execution)\\nget_execution_results = exposed_run_and_wait(get_execution_results)\\nget_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\\nget_latest_execution = exposed_run_and_wait(get_latest_execution)\\nupdate_execution_status = exposed_run_and_wait(update_execution_status)\\nupdate_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)\\nupdate_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\\nupsert_execution_input = exposed_run_and_wait(upsert_execution_input)\\nupsert_execution_output = exposed_run_and_wait(upsert_execution_output)",
      "Edge 1: [Source] create_graph_execution = exposed_run_and_wait(create_graph_execution)\\nget_execution_results = exposed_run_and_wait(get_execution_results)\\nget_incomplete_executions = exposed_run_and_wait(get_incomplete_executions)\\nget_latest_execution = exposed_run_and_wait(get_latest_execution)\\nupdate_execution_status = exposed_run_and_wait(update_execution_status)\\nupdate_graph_execution_stats = exposed_run_and_wait(update_graph_execution_stats)\\nupdate_node_execution_stats = exposed_run_and_wait(update_node_execution_stats)\\nupsert_execution_input = exposed_run_and_wait(upsert_execution_input)\\nupsert_execution_output = exposed_run_and_wait(upsert_execution_output) => [Target] get_node = exposed_run_and_wait(get_node)\\nget_graph = exposed_run_and_wait(get_graph)",
      "Edge 2: [Source] get_node = exposed_run_and_wait(get_node)\\nget_graph = exposed_run_and_wait(get_graph) => [Target] user_credit_model = get_user_credit_model()\\nget_or_refill_credit = cast(\\n Callable[[Any, str], int],\\n exposed_run_and_wait(user_credit_model.get_or_refill_credit),\\n)",
      "Edge 3: [Source] user_credit_model = get_user_credit_model()\\nget_or_refill_credit = cast(\\n Callable[[Any, str], int],\\n exposed_run_and_wait(user_credit_model.get_or_refill_credit),\\n) => [Target] spend_credits = cast(\\n Callable[[Any, str, int, str, dict[str, str], float, float], int],\\n exposed_run_and_wait(user_credit_model.spend_credits),\\n)",
      "Edge 4: [Source] spend_credits = cast(\\n Callable[[Any, str, int, str, dict[str, str], float, float], int],\\n exposed_run_and_wait(user_credit_model.spend_credits),\\n) => [Target] get_user_metadata = exposed_run_and_wait(get_user_metadata)\\nupdate_user_metadata = exposed_run_and_wait(update_user_metadata)\\nget_user_integrations = exposed_run_and_wait(get_user_integrations)\\nupdate_user_integrations = exposed_run_and_wait(update_user_integrations)",
      "Edge 5: [Source] def exposed_run_and_wait(\\n f: Callable[P, Coroutine[None, None, R]]\\n ) -> Callable[Concatenate[object, P], R]:\\n @expose\\n @wraps(f) => [Target] # Register serializers for annotations on bare function\\n register_pydantic_serializers(f)",
      "Edge 6: [Source] # Register serializers for annotations on bare function\\n register_pydantic_serializers(f) => [Target] return wrapper"
    ]
  }
}