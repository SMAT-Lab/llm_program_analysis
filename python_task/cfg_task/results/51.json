{
  "edge_analysis": {
    "static_total": 6,
    "llm_total": 12,
    "matched_edges": {
      "exact_matches": 5,
      "partial_matches": 1
    },
    "accuracy_metrics": {
      "precision": 0.4167,
      "recall": 0.8333,
      "f1_score": 0.5555
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 3: [Source] #6\\nfor index in range(previous_index, len(candidates)): => [Target] #7\\nif target >= candidates[index]:",
      "Edge 4: [Source] #7\\nif target >= candidates[index]: => [Target] #9\\npath.append(candidates[index])\\nbacktrack(candidates, path, answer, target - candidates[index], index)\\npath.pop(len(path) - 1)"
    ],
    "extra_blocks": [
      "Edge 0: [Source] \"\\\"\\\"\\\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\\nWe need to find all the combinations whose sum equals to target given.\\nWe can use an element more than one.\\n\\nTime complexity(Average Case): O(n!)\\n\\nConstraints:\\n1 <= candidates.length <= 30\\n2 <= candidates[i] <= 40\\nAll elements of candidates are distinct.\\n1 <= target <= 40\\n\\\"\\\" => [Target] if __name__ == \\\"__main__\\\":",
      "Edge 1: [Source] if __name__ == \\\"__main__\\\": => [Target] import doctest\\n\\ndoctest.testmod()",
      "Edge 2: [Source] if __name__ == \\\"__main__\\\": => [Target] main()",
      "Edge 6: [Source] if target == 0: => [Target] else:\\n for index in range(previous_index, len(candidates)):",
      "Edge 9: [Source] path.append(candidates[index])\\nbacktrack(candidates, path, answer, target - candidates[index], index)\\npath.pop(len(path) - 1) => [Target] else:\\n for index in range(previous_index, len(candidates)):",
      "Edge 10: [Source] def combination_sum(candidates: list, target: int) -> list:\\n \\\"\\\"\\\"\\n >>> combination_sum([2, 3, 5], 8)\\n [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\\n >>> combination_sum([2, 3, 6, 7], 7)\\n [[2, 2, 3], [7]]\\n >>> combination_sum([-8, 2.3, 0], 1)\\n Traceback (most recent call last):\\n ...\\n RecursionError: maximum recursion depth exceeded\\n \\\"\\\"\\\" => [Target] path = [] # type: list[int]\\n answer = [] # type: list[int]\\n backtrack(candidates, path, answer, target, 0)",
      "Edge 11: [Source] path = [] # type: list[int]\\n answer = [] # type: list[int]\\n backtrack(candidates, path, answer, target, 0) => [Target] return answer"
    ]
  }
}