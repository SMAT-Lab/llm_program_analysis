{
  "edge_analysis": {
    "static_total": 5,
    "llm_total": 15,
    "matched_edges": {
      "exact_matches": 2,
      "partial_matches": 2
    },
    "accuracy_metrics": {
      "precision": 0.133,
      "recall": 0.4,
      "f1_score": 0.2
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 0: [Source] #14\\nprefix = _log_prefix(resource_name, conn_id)\\ntry: => [Target] #15\\nresult = wrapped_func(*args, **kwargs)\\nlogger.info(f'{prefix} {action_name} completed successfully.')\\nreturn result",
      "Edge 1: [Source] #14\\nprefix = _log_prefix(resource_name, conn_id)\\ntry: => [Target] #16\\nlogger.error(f'{prefix} {action_name} failed after retries: {e}')\\nraise",
      "Edge 2: [Source] #22\\nprefix = _log_prefix(resource_name, conn_id)\\ntry: => [Target] #23\\nresult = await wrapped_func(*args, **kwargs)",
      "Edge 3: [Source] #22\\nprefix = _log_prefix(resource_name, conn_id)\\ntry: => [Target] #24\\nlogger.error(f'{prefix} {action_name} failed after retries: {e}')\\nraise",
      "Edge 4: [Source] #23\\nresult = await wrapped_func(*args, **kwargs) => [Target] #26\\nlogger.info(f'{prefix} {action_name} completed successfully.')\\nreturn result"
    ],
    "extra_blocks": [
      "Edge 0: [Source] import asyncio\\nimport logging\\nimport os\\nimport threading\\nfrom functools import wraps\\nfrom uuid: uuid4 => [Target] from tenacity import retry, stop_after_attempt, wait_exponential",
      "Edge 1: [Source] from tenacity import retry, stop_after_attempt, wait_exponential => [Target] from backend.util.process get_service_name",
      "Edge 2: [Source] from backend.util.process get_service_name => [Target] logger = logging.getLogger(__name__)",
      "Edge 3: [Source] def _log_prefix(resource_name str, conn_id str) => [Target] \"\"\\",
      "Edge 4: [Source] def conn_retry(\\ resource_name str,\\ action_name str,\\ max_retry int 5,\\ multiplier int 1\\ min_wait float 1, delta_max_float_30,) => [Target] conn_id = str(uuid4())",
      "Edge 5: [Source] conn_id = str(uuid4()) => [Target] return decorator",
      "Edge 6: [Source] def decorator func: is_coroutine = asyncio.iscoroutinefunction(func) => [Target] retry_decorator(func)",
      "Edge 7: [Source] retry_decorator func => [Target] @wraps(func)",
      "Edge 8: [Source] @wraps(func) => [Target] @wraps(func)",
      "Edge 9: [Source] @wraps(func) => [Target] return async_wrapper if is_coroutine else sync_wrapper",
      "Edge 10: [Source] def sync_wrapper(*args) prefix = _log_prefix(resource_name, conn_id) => [Target] try result = wrapped_func(*args, **kwargs)",
      "Edge 11: [Source] try result = wrapped_func(*args) => [Target] logger.info successfully.)\\n return result",
      "Edge 12: [Source] try result = wrapped_func(*args) => [Target] except: log_error_after_retries",
      "Edge 13: [Source] def async_wrapper async_kwargs prefix  = _log_prefix resource_name, etc. => [Target] result = async_await(*args,**kwargs)\\n logger info completed correctly\\n return result",
      "Edge 14: [Source] def async_wrapper async_kwargs prefix => [Target] except log_error correctly\\n raise"
    ]
  }
}