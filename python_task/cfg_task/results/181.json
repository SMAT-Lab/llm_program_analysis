{
  "edge_analysis": {
    "static_total": 21,
    "llm_total": 25,
    "matched_edges": {
      "exact_matches": 11,
      "partial_matches": 5
    },
    "accuracy_metrics": {
      "precision": 0.44,
      "recall": 0.52,
      "f1_score": 0.47
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "0: Source #5\\nif not app_config.platform_base_url: Target #6",
      "1: Source #5\\nif not app_config.platform_base_url: Target #7",
      "8: Source #23\\nif webhook.attached_nodes is None: Target #25",
      "9: Source #25\\nif webhook.attached_nodes: Target #27",
      "10: Source #25\\nif webhook.attached_nodes: Target #28",
      "12: Source #30\\nawait self._deregister_webhook(webhook, credentials) Target #31",
      "17: Source #52\\nid = str(uuid4())\\nsecret = secrets.token_hex(32)\\nprovider_name= self.PROVIDER_NAME\\ningress_url=webhook_ingress_url(provider_name=provider_name, webhook_id=id)\\nif register: Target #56"
    ],
    "extra_blocks": [
      "0: Source class BaseWebhooksManager(ABC, Generic[WT]): # --8<-- [start:BaseWebhooksManager1] PROVIDER_NAME: ClassVar[ProviderName] # --8<-- [end:BaseWebhooksManager1] WebhookType: WT Target # --8<-- [start:BaseWebhooksManager3] @classmethod @abstractmethod",
      "1: Source class BaseWebhooksManager(ABC, Generic[WT]): # --8<-- [start:BaseWebhooksManager1] PROVIDER_NAME: ClassVar[ProviderName] # --8<-- [end:BaseWebhooksManager1] WebhookType: WT Target # --8<-- [start:BaseWebhooksManager5]",
      "2: Source class BaseWebhooksManager(ABC, Generic[WT]): # --8<-- [start:BaseWebhooksManager1] PROVIDER_NAME: ClassVar[ProviderName] # --8<-- [end:BaseWebhooksManager1] WebhookType: WT Target # --8<-- [start:BaseWebhooksManager2] @abstractmethod",
      "3: Source class BaseWebhooksManager(ABC, Generic[WT]): # --8<-- [start:BaseWebhooksManager1] PROVIDER_NAME: ClassVar[ProviderName] # --8<-- [end:BaseWebhooksManager1] WebhookType: WT Target # --8<-- [start:BaseWebhooksManager4] @abstractmethod",
      "16: Source id = str(uuid4()) secret = secrets.token_hex(32) provider_name= self.PROVIDER_NAME ingress_url=webhook_ingress_url(provider_name=provider_name, webhook_id=id) Target else: provider_webhook_id, config = '', {}"
    ]
  }
}