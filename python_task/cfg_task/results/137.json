{
  "edge_analysis": {
    "static_total": 54,
    "llm_total": 16,
    "matched_edges": {
      "exact_matches": 6,
      "partial_matches": 4
    },
    "accuracy_metrics": {
      "precision": 0.375,
      "recall": 0.1111111111111111,
      "f1_score": 0.1724137931034483
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 2: [Source] #4\\nsettings = Settings()\\nstorage_client = storage.Client()\\nbucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\\nimage_path = f'users/{user_id}/images/{filename}'\\nimage_blob = bucket.blob(image_path)\\nif image_blob.exists(): => [Target] #7\\nreturn image_blob.public_url",
      "Edge 3: [Source] #4\\nsettings = Settings()\\nstorage_client = storage.Client()\\nbucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\\nimage_path = f'users/{user_id}/images/{filename}'\\nimage_blob = bucket.blob(image_path)\\nif image_blob.exists(): => [Target] #8\\nvideo_path = f'users/{user_id}/videos/{filename}'\\nvideo_blob = bucket.blob(video_path)\\nif video_blob.exists():",
      "Edge 4: [Source] #8\\nvideo_path = f'users/{user_id}/videos/{filename}'\\nvideo_blob = bucket.blob(video_path)\\nif video_blob.exists(): => [Target] #10\\nreturn video_blob.public_url",
      "Edge 5: [Source] #8\\nvideo_path = f'users/{user_id}/videos/{filename}'\\nvideo_blob = bucket.blob(video_path)\\nif video_blob.exists(): => [Target] #11\\nreturn None",
      "Edge 8: [Source] #18\\ncontent = await file.read(1024) => [Target] #21\\nawait file.seek(0)",
      "Edge 9: [Source] #21\\nawait file.seek(0) => [Target] #20\\nif file.content_type in ALLOWED_IMAGE_TYPES:",
      "Edge 10: [Source] #20\\nif file.content_type in ALLOWED_IMAGE_TYPES: => [Target] #24\\nif content.startswith(b'\\xff\\xd8\\xff'):",
      "Edge 11: [Source] #20\\nif file.content_type in ALLOWED_IMAGE_TYPES: => [Target] #26\\nif file.content_type in ALLOWED_VIDEO_TYPES:",
      "Edge 17: [Source] #25\\nsettings = Settings()\\nif not settings.config.media_gcs_bucket_name: => [Target] #68\\ntry:",
      "Edge 18: [Source] #68\\ntry: => [Target] #70\\ncontent_type = file.content_type\\nif content_type is None:",
      "Edge 19: [Source] #68\\ntry: => [Target] #71\\nraise",
      "Edge 20: [Source] #68\\ntry: => [Target] #72\\nlogger.exception('Unexpected error in upload_media')\\nraise backend.server.v2.store.exceptions.MediaUploadError(\\n 'Unexpected error during media upload') from e",
      "Edge 21: [Source] #70\\ncontent_type = file.content_type\\nif content_type is None: => [Target] #74\\ncontent_type = 'image/jpeg'",
      "Edge 22: [Source] #74\\ncontent_type = 'image/jpeg' => [Target] #75\\nif content_type not in ALLOWED_IMAGE_TYPES and content_type not in ALLOWED_VIDEO_TYPES:",
      "Edge 23: [Source] #75\\nif content_type not in ALLOWED_IMAGE_TYPES and content_type not in ALLOWED_VIDEO_TYPES: => [Target] #76\\nlogger.warning(f'Invalid file type attempted: {content_type}')\\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\\n f'File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}'\\n )",
      "Edge 24: [Source] #75\\nif content_type not in ALLOWED_IMAGE_TYPES and content_type not in ALLOWED_VIDEO_TYPES: => [Target] #77\\nfile_size = 0\\nchunk_size = 8192\\ntry:",
      "Edge 25: [Source] #77\\nfile_size = 0\\nchunk_size = 8192\\ntry: => [Target] #79\\nwhile (chunk := await file.read(chunk_size)):",
      "Edge 26: [Source] #77\\nfile_size = 0\\nchunk_size = 8192\\ntry: => [Target] #80\\nraise",
      "Edge 27: [Source] #77\\nfile_size = 0\\nchunk_size = 8192\\ntry: => [Target] #81\\nlogger.error(f'Error reading file chunks: {str(e)}')\\nraise backend.server.v2.store.exceptions.FileReadError(\\n 'Failed to read uploaded file') from e",
      "Edge 29: [Source] #79\\nwhile (chunk := await file.read(chunk_size)): => [Target] #82\\nawait file.seek(0)",
      "Edge 30: [Source] #83\\nfile_size += len(chunk)\\nif file_size > MAX_FILE_SIZE: => [Target] #85\\nlogger.warning(f'File size too large: {file_size} bytes')\\nraise backend.server.v2.store.exceptions.FileSizeTooLargeError(\\n 'File too large. Maximum size is 50MB')",
      "Edge 31: [Source] #82\\nawait file.seek(0) => [Target] #90\\nfilename = file.filename or ''\\nfile_ext = os.path.splitext(filename)[1].lower()\\nif use_file_name:",
      "Edge 32: [Source] #90\\nfilename = file.filename or ''\\nfile_ext = os.path.splitext(filename)[1].lower()\\nif use_file_name: => [Target] #91\\nunique_filename = filename",
      "Edge 33: [Source] #90\\nfilename = file.filename or ''\\nfile_ext = os.path.splitext(filename)[1].lower()\\nif use_file_name: => [Target] #93\\nunique_filename = f'{uuid.uuid4()}{file_ext}'",
      "Edge 34: [Source] #91\\nunique_filename = filename => [Target] #92\\nmedia_type = 'images' if content_type in ALLOWED_IMAGE_TYPES else 'videos'\\nstorage_path = f'users/{user_id}/{media_type}/{unique_filename}'\\ntry:",
      "Edge 35: [Source] #92\\nmedia_type = 'images' if content_type in ALLOWED_IMAGE_TYPES else 'videos'\\nstorage_path = f'users/{user_id}/{media_type}/{unique_filename}'\\ntry: => [Target] #94\\nstorage_client = storage.Client()\\nbucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\\nblob = bucket.blob(storage_path)\\nblob.content_type = content_type\\nfile_bytes = await file.read()",
      "Edge 36: [Source] #92\\nmedia_type = 'images' if content_type in ALLOWED_IMAGE_TYPES else 'videos'\\nstorage_path = f'users/{user_id}/{media_type}/{unique_filename}'\\ntry: => [Target] #95\\nlogger.error(f'GCS storage error: {str(e)}')\\nraise backend.server.v2.store.exceptions.StorageUploadError(\\n 'Failed to upload file to storage') from e",
      "Edge 37: [Source] #94\\nstorage_client = storage.Client()\\nbucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\\nblob = bucket.blob(storage_path)\\nblob.content_type = content_type\\nfile_bytes = await file.read() => [Target] #97\\nblob.upload_from_string(file_bytes, content_type=content_type)\\npublic_url = blob.public_url\\nlogger.info(f'Successfully uploaded file to: {storage_path}')\\nreturn public_url",
      "Edge 38: [Source] #44\\nif content.startswith(b'\\x89PNG\\r\\n\\x1a\\n'): => [Target] #45\\nif file.content_type != 'image/png':",
      "Edge 39: [Source] #44\\nif content.startswith(b'\\x89PNG\\r\\n\\x1a\\n'): => [Target] #47\\nif content.startswith(b'GIF87a') or content.startswith(b'GIF89a'):",
      "Edge 40: [Source] #45\\nif file.content_type != 'image/png': => [Target] #61\\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\\n 'File signature does not match content type')",
      "Edge 41: [Source] #47\\nif content.startswith(b'GIF87a') or content.startswith(b'GIF89a'): => [Target] #48\\nif file.content_type != 'image/gif':",
      "Edge 42: [Source] #47\\nif content.startswith(b'GIF87a') or content.startswith(b'GIF89a'): => [Target] #50\\nif content.startswith(b'RIFF') and content[8:12] == b'WEBP':",
      "Edge 43: [Source] #48\\nif file.content_type != 'image/gif': => [Target] #58\\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\\n 'File signature does not match content type')",
      "Edge 44: [Source] #50\\nif content.startswith(b'RIFF') and content[8:12] == b'WEBP': => [Target] #51\\nif file.content_type != 'image/webp':",
      "Edge 45: [Source] #50\\nif content.startswith(b'RIFF') and content[8:12] == b'WEBP': => [Target] #53\\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\\n 'Invalid image file signature')",
      "Edge 46: [Source] #51\\nif file.content_type != 'image/webp': => [Target] #55\\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\\n 'File signature does not match content type')",
      "Edge 47: [Source] #26\\nif file.content_type in ALLOWED_VIDEO_TYPES: => [Target] #27\\nif content.startswith(b'\\x00\\x00\\x00') and content[4:8] == b'ftyp':",
      "Edge 48: [Source] #27\\nif content.startswith(b'\\x00\\x00\\x00') and content[4:8] == b'ftyp': => [Target] #29\\nif file.content_type != 'video/mp4':",
      "Edge 49: [Source] #27\\nif content.startswith(b'\\x00\\x00\\x00') and content[4:8] == b'ftyp': => [Target] #31\\nif content.startswith(b'\\x1aE\\xdf\\xa3'):",
      "Edge 50: [Source] #29\\nif file.content_type != 'video/mp4': => [Target] #39\\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\\n 'File signature does not match content type')",
      "Edge 51: [Source] #31\\nif content.startswith(b'\\x1aE\\xdf\\xa3'): => [Target] #32\\nif file.content_type != 'video/webm':",
      "Edge 52: [Source] #31\\nif content.startswith(b'\\x1aE\\xdf\\xa3'): => [Target] #34\\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\\n 'Invalid video file signature')",
      "Edge 53: [Source] #32\\nif file.content_type != 'video/webm': => [Target] #36\\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\\n 'File signature does not match content type')",
      "Edge 15: [Source] #42\\nif file.content_type != 'image/jpeg':",
      "Edge 17: [Source] #25\\nsettings = Settings()\\nif not settings.config.media_gcs_bucket_name: \\n raise backend.server.v2.store.exceptions.StorageConfigError(\\n 'Missing storage bucket configuration')"
    ],
    "extra_blocks": [
      "Edge 8: # Generate unique filename",
      "Edge 9: filename = file.filename or \"\"\\n file_ext = os.path.splitext(filename)[1].lower()\\n if use_file_name:\\n unique_filename = filename\\n else:\\n unique_filename = f\"{uuid.uuid4()}{file_ext}\"\\n\\n # Construct storage path\\n media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\\n storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\\n\\n try:\\n storage_client = storage.Client()\\n bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\\n blob = bucket.blob(storage_path)\\n blob.content_type = content_type\\n\\n file_bytes = await file.read()\\n blob.upload_from_string(file_bytes, content_type=content_type)\\n\\n public_url = blob.public_url\\n\\n logger.info(f\"Successfully uploaded file to: {storage_path}\")\\n return public_url",
      "Edge 10: elif file.content_type in ALLOWED_VIDEO_TYPES:\\n # Check video file signatures\\n if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"): # MP4\\n if file.content_type != \"video/mp4\":\\n raise backend.server.v2.store.exceptions.InvalidFileTypeError(\\n \"File signature does not match content type\"\\n )\\n elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"): # WebM\\n if file.content_type != \"video/webm\":\\n raise backend.server.v2.store.exceptions.InvalidFileTypeError(\\n \"File signature does not match content type\"\\n )\\n else:\\n raise backend.server.v2.store.exceptions.InvalidFileTypeError(\\n \"Invalid video file signature\"\\n )",
      "Edge 11: settings = Settings()\\n\\n # Check required settings first before doing any file processing",
      "Edge 15: except Exception as e:\\n logger.error(f\"Error reading file content: {str(e)}\")\\n raise backend.server.v2.store.exceptions.FileReadError(\\n \"Failed to read file content\"\\n ) from e => [Target] except backend.server.v2.store.exceptions.MediaUploadError:\\n raise\\n except Exception as e:\\n logger.exception(\"Unexpected error in upload_media\")\\n raise backend.server.v2.store.exceptions.MediaUploadError(\\n \"Unexpected error during media upload\"\\n ) from e"
    ]
  }
}