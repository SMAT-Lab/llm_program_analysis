{
  "edge_analysis": {
    "static_total": 28,
    "llm_total": 34,
    "matched_edges": {
      "exact_matches": 18,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.529,
      "recall": 0.643,
      "f1_score": 0.581
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 22: [Source] #78\\nconfig_to_save = self.config.get_updates()\\nconfig_path = os.path.join(get_data_path(), 'config.json')\\nif os.path.exists(config_path): => [Target] #80\\nwith open(config_path, 'r+') as f:",
      "Edge 23: [Source] #78\\nconfig_to_save = self.config.get_updates()\\nconfig_path = os.path.join(get_data_path(), 'config.json')\\nif os.path.exists(config_path): => [Target] #82\\nwith open(config_path, 'w') as f:",
      "Edge 24: [Source] #80\\nwith open(config_path, 'r+') as f: => [Target] #85\\nexisting_config: Dict[str, Any] = json.load(f)\\nexisting_config.update(config_to_save)\\nf.seek(0)\\njson.dump(existing_config, f, indent=2)\\nf.truncate()",
      "Edge 25: [Source] #85\\nexisting_config: Dict[str, Any] = json.load(f)\\nexisting_config.update(config_to_save)\\nf.seek(0)\\njson.dump(existing_config, f, indent=2)\\nf.truncate() => [Target] #81\\nself.config.clear_updates()",
      "Edge 26: [Source] #82\\nwith open(config_path, 'w') as f: => [Target] #83\\njson.dump(config_to_save, f, indent=2)"
    ],
    "extra_blocks": [
      "Edge 0: [Source] import json\\nimport os\\nfrom enum import Enum\\nfrom typing import Any, Dict, Generic, List, Set, Tuple, Type, TypeVar\\n\\nfrom pydantic import BaseModel, Field, PrivateAttr, ValidationInfo, field_validator\\nfrom pydantic_settings import (\\n BaseSettings,\\n JsonConfigSettingsSource,\\n PydanticBaseSettingsSource,\\n SettingsConfigDict,\\n)\\n\\nfrom backend.util.data import get_data_path\\n\\nT = TypeVar(\"T\", bound=BaseSettings) => [Target] @classmethod\\n def settings_customise_sources(\\n cls,\\n settings_cls: Type[BaseSettings],\\n init_settings: PydanticBaseSettingsSource,\\n env_settings: PydanticBaseSettingsSource,\\n dotenv_settings: PydanticBaseSettingsSource,\\n file_secret_settings: PydanticBaseSettingsSource,\\n ) -> Tuple[PydanticBaseSettingsSource, ...]:\\n return (\\n env_settings,\\n file_secret_settings,\\n dotenv_settings,\\n JsonConfigSettingsSource(settings_cls),\\n init_settings,\\n )",
      "Edge 26: [Source] def settings_customise_sources(\\n cls,\\n settings_cls: Type[BaseSettings],\\n init_settings: PydanticBaseSettingsSource,\\n env_settings: PydanticBaseSettingsSource,\\n dotenv_settings: PydanticBaseSettingsSource,\\n file_secret_settings: PydanticBaseSettingsSource,\\n ) -> Tuple[PydanticBaseSettingsSource, ...]: => [Target] return (\\n env_settings,\\n file_secret_settings,\\n dotenv_settings,\\n JsonConfigSettingsSource(settings_cls),\\n init_settings,\\n )"
    ]
  }
}