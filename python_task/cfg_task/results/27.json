{
  "edge_analysis": {
    "static_total": 17,
    "llm_total": 28,
    "matched_edges": {
      "exact_matches": 2,
      "partial_matches": 5
    },
    "accuracy_metrics": {
      "precision": 0.0714,
      "recall": 0.1176,
      "f1_score": 0.0895
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "#11",
      "#12",
      "#14",
      "#19",
      "#20",
      "#22",
      "#27",
      "#28",
      "#30",
      "#35",
      "#36",
      "#43",
      "#44",
      "#46",
      "#51",
      "#52",
      "#54",
      "#59",
      "#60",
      "#62"
    ],
    "extra_blocks": [
      "@pytest.fixture",
      "@pytest.mark.asyncio",
      "async def test_websocket_router_subscribe(\\n mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:",
      "mock_websocket.receive_text.side_effect = [\\n WsMessage(\\n method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\\n ).model_dump_json(),\\n WebSocketDisconnect(),\\n]",
      "await websocket_router(\\n cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\\n)",
      "mock_manager.connect.assert_called_once_with(mock_websocket)\\nmock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\\nmock_websocket.send_text.assert_called_once()\\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\\nmock_manager.disconnect.assert_called_once_with(mock_websocket)",
      "async def test_websocket_router_unsubscribe(\\n mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:",
      "mock_websocket.receive_text.side_effect = [\\n WsMessage(\\n method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\\n ).model_dump_json(),\\n WebSocketDisconnect(),\\n]",
      "await websocket_router(\\n cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\\n)",
      "mock_manager.connect.assert_called_once_with(mock_websocket)\\nmock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\\nmock_websocket.send_text.assert_called_once()\\nassert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\\nmock_manager.disconnect.assert_called_once_with(mock_websocket)",
      "async def test_websocket_router_invalid_method(\\n mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:",
      "mock_websocket.receive_text.side_effect = [\\n WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\\n WebSocketDisconnect(),\\n]",
      "await websocket_router(\\n cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\\n)",
      "mock_manager.connect.assert_called_once_with(mock_websocket)\\nmock_websocket.send_text.assert_called_once()\\nassert '\\\"method\\\":\\\"error\\\"' in mock_websocket.send_text.call_args[0][0]\\nassert '\\\"success\\\":false' in mock_websocket.send_text.call_args[0][0]\\nmock_manager.disconnect.assert_called_once_with(mock_websocket)",
      "async def test_handle_subscribe_success(\\n mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:\\n message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})",
      "await handle_subscribe(\\n cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\\n)",
      "mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\\nmock_websocket.send_text.assert_called_once()\\nassert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\\nassert '\"success\":true' in mock_websocket.send_text.call_args[0][0]",
      "async def test_handle_subscribe_missing_data(\\n mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:\\n message = WsMessage(method=Methods.SUBSCRIBE)",
      "await handle_subscribe(\\n cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\\n)",
      "mock_manager.subscribe.assert_not_called()",
      "mock_websocket.send_text.assert_called_once()",
      "assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]",
      "assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]",
      "async def test_handle_unsubscribe_missing_data(\\n mock_websocket: AsyncMock, mock_manager: AsyncMock\\n) -> None:",
      "message = WsMessage(method=Methods.UNSUBSCRIBE)",
      "await handle_unsubscribe(\\n cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\\n)",
      "mock_manager.unsubscribe.assert_not_called()\\nmock_websocket.send_text.assert_called_once()\\nassert '\\\"method\\\":\\\"error\\\"' in mock_websocket.send_text.call_args[0][0]\\nassert '\\\"success\\\":false' in mock_websocket.send_text.call_args[0][0]"
    ]
  }
}