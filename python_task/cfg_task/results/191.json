{
  "edge_analysis": {
    "static_total": 18,
    "llm_total": 24,
    "matched_edges": {
      "exact_matches": 10,
      "partial_matches": 4
    },
    "accuracy_metrics": {
      "precision": 0.4166666666666667,
      "recall": 0.5555555555555556,
      "f1_score": 0.47619047619047616
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 3: [Source] #4\\nfor inner_position in positions: => [Target] #6\\nreturn permissible_positions",
      "Edge 4: [Source] #5\\ny_test, x_test = inner_position\\nif 0 <= y_test < n and 0 <= x_test < n: => [Target] #7\\npermissible_positions.append(inner_position)",
      "Edge 5: [Source] #16\\n\"\"\"\\n Helper function to solve knight tour problem.\\n \"\"\"\\nif is_complete(board): => [Target] #17\\nreturn True",
      "Edge 13: [Source] #31\\nfor i in range(n): => [Target] #32\\nfor j in range(n):",
      "Edge 15: [Source] #32\\nfor j in range(n): => [Target] #34\\nboard[i][j] = 1\\nif open_knight_tour_helper(board, (i, j), 1):",
      "Edge 16: [Source] #34\\nboard[i][j] = 1\\nif open_knight_tour_helper(board, (i, j), 1): => [Target] #36\\nreturn board"
    ],
    "extra_blocks": [
      "Edge 0: [Source] # Knight Tour Intro: https://www.youtube.com/watch?v=ab_dY3dZFHM => [Target] from __future__ import annotations",
      "Edge 1: [Source] from __future__ import annotations => [Target] if __name__ == \"__main__\":",
      "Edge 15: [Source] \"\"\"\\n Find the solution for the knight tour problem for a board of size n. Raises\\n ValueError if the tour cannot be performed for the given size.\\n\\n >>> open_knight_tour(1)\\n [[1]]\\n\\n >>> open_knight_tour(2)\\n Traceback (most recent call last):\\n ...\\n ValueError: Open Knight Tour cannot be performed on a board of size 2\\n \"\"\" => [Target] msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"\\n raise ValueError(msg)",
      "Edge 21: [Source] board[i][j] = 0 => [Target] for i in range(n):",
      "Edge 22: [Source] for i in range(n): => [Target] for j in range(n):",
      "Edge 23: [Source] for j in range(n): => [Target] board[i][j] = 1\\n if open_knight_tour_helper(board, (i, j), 1):"
    ]
  }
}