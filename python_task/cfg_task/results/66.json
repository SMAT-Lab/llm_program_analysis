{
  "edge_analysis": {
    "static_total": 8,
    "llm_total": 21,
    "matched_edges": {
      "exact_matches": 3,
      "partial_matches": 2
    },
    "accuracy_metrics": {
      "precision": 3.0,
      "recall": 0.375,
      "f1_score": 0.7200000000000001
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 3: [Source] #29\\nsys.stdout = open(os.devnull, 'w')\\nsys.stderr = open(os.devnull, 'w') => [Target] #30\\nset_service_name(self.service_name)\\nself.run()",
      "Edge 4: [Source] #43\\n\"\"\"\\n Start the background process.\\n Args:\\n background: Whether to run the process in the background.\\n silent: Whether to disable stdout and stderr.\\n proc_args: Additional arguments to pass to the process.\\n Returns:\\n the process id or 0 if the process is not running in the background.\\n \"\"\"\\nif not background: => [Target] #44\\nself.execute_run_command(silent)\\nreturn 0",
      "Edge 5: [Source] #43\\n\"\"\"\\n Start the background process.\\n Args:\\n background: Whether to run the process in the background.\\n silent: Whether to disable stdout and stderr.\\n proc_args: Additional arguments to pass to the process.\\n Returns:\\n the process id or 0 if the process is not running in the background.\\n \"\"\"\\nif not background: => [Target] #45\\nself.process = Process(name=self.__class__.__name__, target=self.\\n execute_run_command, args=(silent,), **proc_args)\\nself.process.start()\\nself.health_check()\\nreturn self.process.pid or 0"
    ],
    "extra_blocks": [
      "Edge 0: [Source] import logging\\nimport os\\nimport signal\\nimport sys\\nfrom abc import ABC, abstractmethod\\nfrom multiprocessing import Process, set_start_method\\nfrom typing import Optional\\n\\nfrom backend.util.logging import configure_logging\\nfrom backend.util.metrics import sentry_init => [Target] logger = logging.getLogger(__name__)\\n_SERVICE_NAME = \"MainProcess\"",
      "Edge 1: [Source] class AppProcess(ABC):\\n \"\"\"\\n A class to represent an object that can be executed in a background process.\\n \"\"\"\\n => [Target] process: Optional[Process] = None\\n",
      "Edge 2: [Source] process: Optional[Process] = None\\n => [Target] set_start_method(\"spawn\", force=True)\\n configure_logging()\\n sentry_init()\\n",
      "Edge 3: [Source] # Methods that are executed INSIDE the process #\\n\\n",
      "Edge 4: [Source] @abstractmethod\\n\\n",
      "Edge 5: [Source] @classmethod\\n @property\\n\\n",
      "Edge 6: [Source] \\n\\n",
      "Edge 7: [Source] \\n\\n # Methods that are executed OUTSIDE the process #\\n\\n",
      "Edge 8: [Source] \\n\\n",
      "Edge 9: [Source] \\n\\n",
      "Edge 17: [Source] def stop(self): => [Target] \"\"\"\\n Stop the background process.\\n \"\"\""
    ]
  }
}