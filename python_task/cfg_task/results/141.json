{
  "edge_analysis": {
    "static_total": 17,
    "llm_total": 31,
    "matched_edges": {
      "exact_matches": 7,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0.2258,
      "recall": 0.4118,
      "f1_score": 0.2927
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 2: [Source] #40\\ntry: => [Target] #41\\nnumber, url = self.create_pr(credentials, input_data.repo_url, input_data.\\n title, input_data.body, input_data.head, input_data.base)\\nyield 'number', number",
      "Edge 3: [Source] #40\\ntry: => [Target] #42\\nyield 'error', str(e)",
      "Edge 4: [Source] #41\\nnumber, url = self.create_pr(credentials, input_data.repo_url, input_data.\\n title, input_data.body, input_data.head, input_data.base)\\nyield 'number', number => [Target] #44\\nyield 'url', url",
      "Edge 5: [Source] #65\\napi = get_api(credentials)\\nfiles_url = prepare_pr_api_url(pr_url=pr_url, path='files')\\nresponse = api.get(files_url)\\nfiles = response.json()\\nchanges = [] => [Target] #66\\nfor file in files:",
      "Edge 6: [Source] #66\\nfor file in files: => [Target] #67\\nfilename = file.get('filename')\\npatch = file.get('patch')\\nif filename and patch:",
      "Edge 7: [Source] #66\\nfor file in files: => [Target] #68\\nreturn '\\n\\n'.join(changes)",
      "Edge 8: [Source] #67\\nfilename = file.get('filename')\\npatch = file.get('patch')\\nif filename and patch: => [Target] #69\\nchanges.append(f\"\"\"File: {filename}\\n{patch}\"\"\")",
      "Edge 9: [Source] #74\\ntitle, body, author = self.read_pr(credentials, input_data.pr_url)\\nyield 'title', title => [Target] #75\\nyield 'body', body",
      "Edge 10: [Source] #75\\nyield 'body', body => [Target] #76\\nyield 'author', author",
      "Edge 11: [Source] #76\\nyield 'author', author => [Target] #77\\nif input_data.include_pr_changes:",
      "Edge 12: [Source] #77\\nif input_data.include_pr_changes: => [Target] #78\\nchanges = self.read_pr_changes(credentials, input_data.pr_url)\\nyield 'changes', changes",
      "Edge 13: [Source] #99\\ntry: => [Target] #100\\nstatus = self.assign_reviewer(credentials, input_data.pr_url, input_data.\\n reviewer)\\nyield 'status', status",
      "Edge 14: [Source] #99\\ntry: => [Target] #101\\nyield 'error', str(e)",
      "Edge 15: [Source] #123\\ntry: => [Target] #124\\nstatus = self.unassign_reviewer(credentials, input_data.pr_url, input_data.\\n reviewer)\\nyield 'status', status",
      "Edge 16: [Source] #123\\ntry: => [Target] #125\\nyield 'error', str(e)"
    ],
    "extra_blocks": [
      "Edge 2: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput: => [Target] pull_requests = self.list_prs(\\n credentials,\\n input_data.repo_url,\\n )",
      "Edge 3: [Source] pull_requests = self.list_prs(\\n credentials,\\n input_data.repo_url,\\n ) => [Target] yield from ((\"pull_request\", pr) for pr in pull_requests)",
      "Edge 4: [Source] class GithubMakePullRequestBlock(Block): => [Target] @staticmethod",
      "Edge 5: [Source] def create_pr(\\n credentials: GithubCredentials,\\n repo_url: str,\\n title: str,\\n body: str,\\n head: str,\\n base: str,\\n ) -> tuple[int, str]: => [Target] api = get_api(credentials)\\n pulls_url = repo_url + \"/pulls\"\\n data = {\"title\": title, \"body\": body, \"head\": head, \"base\": base}\\n response = api.post(pulls_url, json=data)\\n pr_data = response.json()",
      "Edge 6: [Source] api = get_api(credentials)\\n pulls_url = repo_url + \"/pulls\"\\n data = {\"title\": title, \"body\": body, \"head\": head, \"base\": base}\\n response = api.post(pulls_url, json=data)\\n pr_data = response.json() => [Target] return pr_data[\"number\"], pr_data[\"html_url\"]",
      "Edge 7: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput: => [Target] try:",
      "Edge 8: [Source] try: => [Target] number, url = self.create_pr(\\n credentials,\\n input_data.repo_url,\\n input_data.title,\\n input_data.body,\\n input_data.head,\\n input_data.base,\\n )",
      "Edge 9: [Source] try: => [Target] except Exception as e:\\n yield \"error\", str(e)",
      "Edge 10: [Source] number, url = self.create_pr(\\n credentials,\\n input_data.repo_url,\\n input_data.title,\\n input_data.body,\\n input_data.head,\\n input_data.base,\\n ) => [Target] yield \"number\", number\\n yield \"url\", url",
      "Edge 11: [Source] class Input(BlockSchema):\\n credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\\n repo_url: str = SchemaField(\\n description=\"URL of the GitHub repository\",\\n placeholder=\"https://github.com/owner/repo\",\\n ) => [Target] title: str = SchemaField(\\n description=\"Title of the pull request\",\\n placeholder=\"Enter the pull request title\",\\n )",
      "Edge 12: [Source] class Input(BlockSchema):\\n credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\\n repo_url: str = SchemaField(\\n description=\"URL of the GitHub repository\",\\n placeholder=\"https://github.com/owner/repo\",\\n ) => [Target] body: str = SchemaField(\\n description=\"Body of the pull request\",\\n placeholder=\"Enter the pull request body\",\\n )",
      "Edge 13: [Source] class Input(BlockSchema):\\n credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\\n repo_url: str = SchemaField(\\n description=\"URL of the GitHub repository\",\\n placeholder=\"https://github.com/owner/repo\",\\n ) => [Target] head: str = SchemaField(\\n description=(\\n \"The name of the branch where your changes are implemented. \"\\n \"For cross-repository pull requests in the same network, \"\\n \"namespace head with a user like this: username:branch.\"\\n ),\\n placeholder=\"Enter the head branch\",\\n )",
      "Edge 14: [Source] class Input(BlockSchema):\\n credentials: GithubCredentialsInput = GithubCredentialsField(\"repo\")\\n repo_url: str = SchemaField(\\n description=\"URL of the GitHub repository\",\\n placeholder=\"https://github.com/owner/repo\",\\n ) => [Target] base: str = SchemaField(\\n description=\"The name of the branch you want the changes pulled into.\",\\n placeholder=\"Enter the base branch\",\\n )",
      "Edge 15: [Source] class GithubReadPullRequestBlock(Block): => [Target] @staticmethod",
      "Edge 16: [Source] @staticmethod => [Target] @staticmethod",
      "Edge 17: [Source] def read_pr_changes(credentials: GithubCredentials, pr_url: str) -> str:\\n api = get_api(credentials)\\n files_url = prepare_pr_api_url(pr_url=pr_url, path=\"files\")\\n response = api.get(files_url)\\n files = response.json()\\n changes = [] => [Target] for file in files:\\n filename = file.get(\"filename\")\\n patch = file.get(\"patch\")\\n if filename and patch:\\n changes.append(f\"File: {filename}\\n{patch}\")",
      "Edge 18: [Source] def read_pr_changes(credentials: GithubCredentials, pr_url: str) -> str:\\n api = get_api(credentials)\\n files_url = prepare_pr_api_url(pr_url=pr_url, path=\"files\")\\n response = api.get(files_url)\\n files = response.json()\\n changes = [] => [Target] return \"\\n\\n\".join(changes)",
      "Edge 19: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput:\\n title, body, author = self.read_pr(\\n credentials,\\n input_data.pr_url,\\n )\\n yield \"title\", title\\n yield \"body\", body\\n yield \"author\", author => [Target] if input_data.include_pr_changes:\\n changes = self.read_pr_changes(\\n credentials,\\n input_data.pr_url,\\n )\\n yield \"changes\", changes",
      "Edge 20: [Source] def assign_reviewer(\\n credentials: GithubCredentials, pr_url: str, reviewer: str\\n ) -> str: => [Target] api = get_api(credentials)\\n reviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\\n data = {\"reviewers\": [reviewer]}\\n api.post(reviewers_url, json=data)\\n return \"Reviewer assigned successfully\"",
      "Edge 21: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput: => [Target] try:\\n status = self.assign_reviewer(\\n credentials,\\n input_data.pr_url,\\n input_data.reviewer,\\n )\\n yield \"status\", status",
      "Edge 22: [Source] try:\\n status = self.assign_reviewer(\\n credentials,\\n input_data.pr_url,\\n input_data.reviewer,\\n )\\n yield \"status\", status => [Target] except Exception as e:\\n yield \"error\", str(e)",
      "Edge 23: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput: => [Target] try:\\n status = self.unassign_reviewer(\\n credentials,\\n input_data.pr_url,\\n input_data.reviewer,\\n )\\n yield \"status\", status",
      "Edge 24: [Source] try:\\n status = self.unassign_reviewer(\\n credentials,\\n input_data.pr_url,\\n input_data.reviewer,\\n )\\n yield \"status\", status => [Target] except Exception as e:\\n yield \"error\", str(e)",
      "Edge 25: [Source] def __init__(self): => [Target] super().__init__(\\n id=\"2646956e-96d5-4754-a3df-034017e7ed96\",\\n description=\"This block lists all reviewers for a specified GitHub pull request.\",\\n categories={BlockCategory.DEVELOPER_TOOLS},\\n input_schema=GithubListPRReviewersBlock.Input,\\n output_schema=GithubListPRReviewersBlock.Output,\\n test_input={\\n \"pr_url\": \"https://github.com/owner/repo/pull/1\",\\n \"credentials\": TEST_CREDENTIALS_INPUT,\\n },\\n test_credentials=TEST_CREDENTIALS,\\n test_output=[\\n (\\n \"reviewer\",\\n {\\n \"username\": \"reviewer1\",\\n \"url\": \"https://github.com/reviewer1\",\\n },\\n )\\n ],\\n test_mock={\\n \"list_reviewers\": lambda *args, **kwargs: [\\n {\\n \"username\": \"reviewer1\",\\n \"url\": \"https://github.com/reviewer1\",\\n }\\n ]\\n },\\n )",
      "Edge 26: [Source] def list_reviewers(\\n credentials: GithubCredentials, pr_url: str\\n) -> list[Output.ReviewerItem]: => [Target] api = get_api(credentials)\\nreviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\\nresponse = api.get(reviewers_url)\\ndata = response.json()",
      "Edge 27: [Source] api = get_api(credentials)\\nreviewers_url = prepare_pr_api_url(pr_url=pr_url, path=\"requested_reviewers\")\\nresponse = api.get(reviewers_url)\\ndata = response.json() => [Target] reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [\\n {\"username\": reviewer[\"login\"], \"url\": reviewer[\"html_url\"]}\\n for reviewer in data.get(\"users\", [])\\n]",
      "Edge 28: [Source] reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [\\n {\"username\": reviewer[\"login\"], \"url\": reviewer[\"html_url\"]}\\n for reviewer in data.get(\"users\", [])\\n] => [Target] return reviewers",
      "Edge 29: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput: => [Target] reviewers = self.list_reviewers(\\n credentials,\\n input_data.pr_url,\\n )",
      "Edge 30: [Source] reviewers = self.list_reviewers(\\n credentials,\\n input_data.pr_url,\\n ) => [Target] yield from ((\"reviewer\", reviewer) for reviewer in reviewers)"
    ]
  }
}