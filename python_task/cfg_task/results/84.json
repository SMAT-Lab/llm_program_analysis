{
  "edge_analysis": {
    "static_total": 7,
    "llm_total": 14,
    "matched_edges": {
      "exact_matches": 6,
      "partial_matches": 1
    },
    "accuracy_metrics": {
      "precision": 0.42857142857142855,
      "recall": 0.8571428571428571,
      "f1_score": 0.5714285714285714
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 0: [Source] #11\\nawait connection_manager.connect(mock_websocket) => [Target] #12\\nassert mock_websocket in connection_manager.active_connections",
      "Edge 2: [Source] #17\\nconnection_manager.active_connections.add(mock_websocket)\\nconnection_manager.subscriptions['test_graph'] = {mock_websocket}\\nconnection_manager.disconnect(mock_websocket)\\nassert mock_websocket not in connection_manager.active_connections => [Target] #19\\nassert mock_websocket not in connection_manager.subscriptions['test_graph']",
      "Edge 4: [Source] #30\\nconnection_manager.subscriptions['test_graph'] = {mock_websocket}\\nawait connection_manager.unsubscribe('test_graph', mock_websocket) => [Target] #31\\nassert 'test_graph' not in connection_manager.subscriptions"
    ],
    "extra_blocks": [
      "Edge 0: [Source] from datetime import datetime, timezone => [Target] from unittest.mock import AsyncMock\\n\\nimport pytest",
      "Edge 1: [Source] from unittest.mock import AsyncMock\\n\\nimport pytest => [Target] from fastapi import WebSocket",
      "Edge 2: [Source] from fastapi import WebSocket => [Target] \\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\\nfrom backend.server.conn_manager import ConnectionManager\\nfrom backend.server.model import Methods, WsMessage",
      "Edge 3: [Source] async def test_connect(\\n connection_manager: ConnectionManager, mock_websocket: AsyncMock\\n) -> None: => [Target] await connection_manager.connect(mock_websocket)\\n assert mock_websocket in connection_manager.active_connections\\n mock_websocket.accept.assert_called_once()",
      "Edge 4: [Source] def test_disconnect(\\n connection_manager: ConnectionManager, mock_websocket: AsyncMock\\n) -> None: => [Target] connection_manager.active_connections.add(mock_websocket)\\nconnection_manager.subscriptions[\"test_graph\"] = {mock_websocket}",
      "Edge 5: [Source] connection_manager.active_connections.add(mock_websocket)\\nconnection_manager.subscriptions[\"test_graph\"] = {mock_websocket} => [Target] connection_manager.disconnect(mock_websocket)",
      "Edge 6: [Source] connection_manager.disconnect(mock_websocket) => [Target] assert mock_websocket not in connection_manager.active_connections\\nassert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]",
      "Edge 7: [Source] async def test_unsubscribe(\\n connection_manager: ConnectionManager, mock_websocket: AsyncMock\\n) -> None: => [Target] connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\\n\\n await connection_manager.unsubscribe(\"test_graph\", mock_websocket)",
      "Edge 8: [Source] connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\\n\\n await connection_manager.unsubscribe(\"test_graph\", mock_websocket) => [Target] assert \"test_graph\" not in connection_manager.subscriptions",
      "Edge 9: [Source] async def test_send_execution_result(\\n connection_manager: ConnectionManager, mock_websocket: AsyncMock\\n) -> None: => [Target] connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\\nresult: ExecutionResult = ExecutionResult(\\n graph_id=\"test_graph\",\\n graph_version=1,\\n graph_exec_id=\"test_exec_id\",\\n node_exec_id=\"test_node_exec_id\",\\n node_id=\"test_node_id\",\\n block_id=\"test_block_id\",\\n status=ExecutionStatus.COMPLETED,\\n input_data={\"input1\": \"value1\"},\\n output_data={\"output1\": [\"result1\"]},\\n add_time=datetime.now(tz=timezone.utc),\\n queue_time=None,\\n start_time=datetime.now(tz=timezone.utc),\\n end_time=datetime.now(tz=timezone.utc),\\n)",
      "Edge 10: [Source] connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\\nresult: ExecutionResult = ExecutionResult(\\n graph_id=\"test_graph\",\\n graph_version=1,\\n graph_exec_id=\"test_exec_id\",\\n node_exec_id=\"test_node_exec_id\",\\n node_id=\"test_node_id\",\\n block_id=\"test_block_id\",\\n status=ExecutionStatus.COMPLETED,\\n input_data={\"input1\": \"value1\"},\\n output_data={\"output1\": [\"result1\"]},\\n add_time=datetime.now(tz=timezone.utc),\\n queue_time=None,\\n start_time=datetime.now(tz=timezone.utc),\\n end_time=datetime.now(tz=timezone.utc),\\n) => [Target] await connection_manager.send_execution_result(result)",
      "Edge 11: [Source] await connection_manager.send_execution_result(result) => [Target] mock_websocket.send_text.assert_called_once_with(\\n WsMessage(\\n method=Methods.EXECUTION_EVENT,\\n channel=\"test_graph\",\\n data=result.model_dump(),\\n ).model_dump_json()\\n)",
      "Edge 12: [Source] async def test_send_execution_result_no_subscribers(\\n connection_manager: ConnectionManager, mock_websocket: AsyncMock\\n) -> None:\\n result: ExecutionResult = ExecutionResult(\\n graph_id=\"test_graph\",\\n graph_version=1,\\n graph_exec_id=\"test_exec_id\",\\n node_exec_id=\"test_node_exec_id\",\\n node_id=\"test_node_id\",\\n block_id=\"test_block_id\",\\n status=ExecutionStatus.COMPLETED,\\n input_data={\"input1\": \"value1\"},\\n output_data={\"output1\": [\"result1\"]},\\n add_time=datetime.now(),\\n queue_time=None,\\n start_time=datetime.now(),\\n end_time=datetime.now(),\\n ) => [Target] await connection_manager.send_execution_result(result)",
      "Edge 13: [Source] await connection_manager.send_execution_result(result) => [Target] mock_websocket.send_text.assert_not_called()"
    ]
  }
}