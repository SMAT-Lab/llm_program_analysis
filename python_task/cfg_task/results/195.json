{
  "edge_analysis": {
    "static_total": 19,
    "llm_total": 18,
    "matched_edges": {
      "exact_matches": 8,
      "partial_matches": 5
    },
    "accuracy_metrics": {
      "precision": 0.4444444444444444,
      "recall": 0.42105263157894735,
      "f1_score": 0.43243243243243246
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 8: [Source] #43\npc = Pinecone(api_key=credentials.api_key.get_secret_value())\nidx = pc.Index(input_data.idx_name)\nquery_vector = input_data.query_vector\nif isinstance(query_vector, list) and len(query_vector) > 0: => [Target] #46\nif isinstance(query_vector[0], list):",
      "Edge 7: [Source] #42\ntry: => [Target] #44\nerror_msg = f'Error querying Pinecone: {str(e)}'\nraise RuntimeError(error_msg) from e"
    ],
    "extra_blocks": [
      "Edge 8: [Source] def run(\n self, \n input_data: Input,*,credentials: APIKeyCredentials,**kwargs, ) -> BlockOutput: => [Target] try:",
      "Edge 7: [Source] def __init__(self): => [Target] super().__init__(\n id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\n description=\"Queries a Pinecone index\",\n categories={BlockCategory.LOGIC},\n input_schema=PineconeQueryBlock.Input,\n output_schema=PineconeQueryBlock.Output,\n )"
    ]
  }
}