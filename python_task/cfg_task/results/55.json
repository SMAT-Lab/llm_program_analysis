{
  "edge_analysis": {
    "static_total": 6,
    "llm_total": 12,
    "matched_edges": {
      "exact_matches": 4,
      "partial_matches": 2
    },
    "accuracy_metrics": {
      "precision": 0.3333,
      "recall": 0.6667,
      "f1_score": 0.4444
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 1: #22\\nwhile keep_going: => #23\\nkeep_going = input_data.run_continuously\\nfeed = self.parse_feed(input_data.rss_url",
      "Edge 5: #26\\npub_date = datetime(*entry['published_parsed'][:6], tzinfo=timezone.utc)\\nif pub_date > start_time: => #28\\nyield 'entry', RSSEntry(title=entry['title'], link=entry['link'],\\n description=entry.get('summary', ''), pub_date=pub_date, author=entry.\\n get('author', ''), categories=[tag['term'] for tag in entry.get('tags',\\n [])])"
    ],
    "extra_blocks": [
      "Edge 7: [Source] if pub_date > start_time: => [Target] \\n time.sleep(input_data.polling_rate)",
      "Edge 8: [Source] yield (\\n \"entry\",\\n RSSEntry(\\n title=entry[\"title\"],\\n link=entry[\"link\"],\\n description=entry.get(\"summary\", \"\"),\\n pub_date=pub_date,\\n author=entry.get(\"author\", \"\"),\\n categories=[tag[\"term\"] for tag in entry.get(\"tags\", [])],\\n ),\\n ) => [Target] \\n time.sleep(input_data.polling_rate)",
      "Edge 9: [Source] \\n time.sleep(input_data.polling_rate) => [Target] while keep_going:",
      "Edge 10: [Source] \\n time.sleep(input_data.polling_rate) => [Target] while keep_going:",
      "Edge 11: [Source] \\n time.sleep(input_data.polling_rate) => [Target] while keep_going:"
    ]
  }
}