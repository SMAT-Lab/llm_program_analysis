{
  "edge_analysis": {
    "static_total": 0,
    "llm_total": 4,
    "matched_edges": {
      "exact_matches": 0,
      "partial_matches": 0
    },
    "accuracy_metrics": {
      "precision": 0,
      "recall": 0,
      "f1_score": 0
    }
  },
  "structure_validation": {
    "missing_blocks": [],
    "extra_blocks": [
      "Edge 0: [Source] @staticmethod\n def call_unreal_speech_api(\n api_key: SecretStr, text: str, voice_id: str\n ) -> dict[str, Any]: => [Target] url = \"https://api.v7.unrealspeech.com/speech\"\n headers = {\n \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n \"Content-Type\": \"application/json\",\n }\n data = {\n \"Text\": text,\n \"VoiceId\": voice_id,\n \"Bitrate\": \"192k\",\n \"Speed\": \"0\",\n \"Pitch\": \"1\",\n \"TimestampType\": \"sentence\",\n }",
      "Edge 1: [Source] url = \"https://api.v7.unrealspeech.com/speech\"\n headers = {\n \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n \"Content-Type\": \"application/json\",\n }\n data = {\n \"Text\": text,\n \"VoiceId\": voice_id,\n \"Bitrate\": \"192k\",\n \"Speed\": \"0\",\n \"Pitch\": \"1\",\n \"TimestampType\": \"sentence\",\n } => [Target] response = requests.post(url, headers=headers, json=data)\n return response.json()",
      "Edge 2: [Source] def run(\n self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n ) -> BlockOutput: => [Target] api_response = self.call_unreal_speech_api(\n credentials.api_key,\n input_data.text,\n input_data.voice_id,\n )",
      "Edge 3: [Source] api_response = self.call_unreal_speech_api(\n credentials.api_key,\n input_data.text,\n input_data.voice_id,\n ) => [Target] yield \"mp3_url\", api_response[\"OutputUri\"]"
    ]
  }
}