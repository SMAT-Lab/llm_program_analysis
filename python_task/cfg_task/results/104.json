{
  "edge_analysis": {
    "static_total": 106,
    "llm_total": 89,
    "matched_edges": {
      "exact_matches": 15,
      "partial_matches": 41
    },
    "accuracy_metrics": {
      "precision": "15/89: 0.1685",
      "recall": "15/106: 0.1415",
      "f1_score": "2*(0.1685*0.1415)/(0.1685+0.1415): 0.1543"
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "#13",
      "#14",
      "#15",
      "#17",
      "#24",
      "#25",
      "#26",
      "#28",
      "#35",
      "#36",
      "#37",
      "#39",
      "#47",
      "#48",
      "#49",
      "#80",
      "#81",
      "#82",
      "#84",
      "#85",
      "#86",
      "#100",
      "#102",
      "#103",
      "#104",
      "#105",
      "#107",
      "#108",
      "#112",
      "#119",
      "#120",
      "#121",
      "#122",
      "#124",
      "#125",
      "#126",
      "#129",
      "#130",
      "#131",
      "#141",
      "#142",
      "#143",
      "#145",
      "#146",
      "#147",
      "#149",
      "#156",
      "#157",
      "#158",
      "#159",
      "#161",
      "#162",
      "#163",
      "#173",
      "#174",
      "#175",
      "#177",
      "#178",
      "#179",
      "#181",
      "#188",
      "#189",
      "#190",
      "#192",
      "#199",
      "#200",
      "#201",
      "#203",
      "#221",
      "#222",
      "#223",
      "#225",
      "#226",
      "#227",
      "#228",
      "#235",
      "#236",
      "#237"
    ],
    "extra_blocks": [
      "async def delete_agent(agent_id: str)",
      "try:",
      "except prisma.errors.PrismaError as e:",
      "except Exception as e:",
      "async def create_agent_entry(name: str, description: str, author: str, keywords: typing.List[str], categories: typing.List[str], graph: prisma.Json, submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING,)",
      "async def update_agent_entry(agent_id: str, version: int, submission_state: prisma.enums.SubmissionStatus, comments: str | None = None)",
      "async def get_agents(page: int = 1, page_size: int = 10, name: str | None = None, keyword: str | None = None, category: str | None = None, description: str | None = None, description_threshold: int = 60, submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED, sort_by: str = createdAt, sort_order: typing.Literal[desc] | typing.Literal[asc] = desc,):",
      "try: # Define the base query query = {}",
      "try:",
      "except prisma.errors.PrismaError as e:",
      "if description:",
      "try: filtered_agents = [] for agent in agents: if ( agent.description and fuzzywuzzy.fuzz.partial_ratio( description.lower(), agent.description.lower() ) >= description_threshold ): filtered_agents.append(agent) agents = filtered_agents",
      "async def get_agent_details(agent_id: str, version: int | None = None)",
      "try: query = {id: agent_id} if version is not None:",
      "except prisma.errors.PrismaError as e:",
      "async def search_db(query: str, page: int = 1, page_size: int = 10, categories: typing.List[str] | None = None, description_threshold: int = 60, sort_by: str = rank, sort_order: typing.Literal[desc] | typing.Literal[asc] = desc, submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,)",
      "try:",
      "except prisma.errors.PrismaError as e:",
      "async def get_top_agents_by_downloads(page: int = 1, page_size: int = 10, submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,)",
      "try: # Agents with no downloads will not be included in the results... is this the desired behavior? analytics = await prisma.models.AnalyticsTracker.prisma().find_many( include={agent: True}, order={downloads: desc}, where={agent: {is: {submissionStatus: submission_status}}}, skip=skip, take=page_size )",
      "try: total_count = await prisma.models.AnalyticsTracker.prisma().count( where={agent: {is: {submissionStatus: submission_status}}} )",
      "async def set_agent_featured(agent_id: str, is_active: bool = True, featured_categories: list[str] = [featured])",
      "try: agent = await prisma.models.Agents.prisma().find_unique(where={id: agent_id})",
      "if not agent: raise AgentQueryError(fAgent with ID {agent_id} not found.)",
      "async def get_featured_agents(category: str = featured, page: int = 1, page_size: int = 10, submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,)",
      "try: featured_agents = await prisma.models.FeaturedAgent.prisma().find_many( where={ featuredCategories: {has: category}, isActive: True, agent: {is: {submissionStatus: submission_status}}, }, include={agent: {include: {AnalyticsTracker: True}}}, skip=skip, take=page_size )",
      "async def remove_featured_category(agent_id: str, category: str)",
      "try:",
      "async def add_featured_category(agent_id: str, category: str)",
      "try: featured_agent = await prisma.models.FeaturedAgent.prisma().update( where={agentId: agent_id}, data={featuredCategories: {push: [category]}}, )",
      "async def get_agent_featured(agent_id: str)",
      "try: featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique( where={agentId: agent_id}, ) return featured_agent",
      "async def get_not_featured_agents(page: int = 1, page_size: int = 10)",
      "async def get_all_categories()",
      "try: agents = await prisma.models.Agents.prisma().find_many(distinct=[categories])",
      "async def create_agent_installed_event(event_data: market.model.AgentInstalledFromMarketplaceEventData,)",
      "try: await prisma.models.InstallTracker.prisma().create( data={ installedAgentId: event_data.installed_agent_id, marketplaceAgentId: event_data.marketplace_agent_id, installationLocation: prisma.enums.InstallationLocation( event_data.installation_location.name ), } )"
    ]
  }
}