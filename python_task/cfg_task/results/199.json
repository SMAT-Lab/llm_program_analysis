{
  "edge_analysis": {
    "static_total": 6,
    "llm_total": 8,
    "matched_edges": {
      "exact_matches": 2,
      "partial_matches": 2
    },
    "accuracy_metrics": {
      "precision": 0.25,
      "recall": 0.3333333333333333,
      "f1_score": 0.2857142857142857
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 2: [Source] #3\\n\"\"\"\\n Take in a positive integer 'number'.\\n Returns the zero-based index of first set bit in that 'number' from right.\\n Returns -1, If no set bit found.\\n\\n >>> get_index_of_rightmost_set_bit(0)\\n -1\\n >>> get_index_of_rightmost_set_bit(5)\\n 0\\n >>> get_index_of_rightmost_set_bit(36)\\n 2\\n >>> get_index_of_rightmost_set_bit(8)\\n 3\\n >>> get_index_of_rightmost_set_bit(-18)\\n Traceback (most recent call last):\\n ValueError: Input must be a non-negative integer\\n >>> get_index_of_rightmost_set_bit('test')\\n Traceback (most recent call last):\\n ValueError: Input must be a non-negative integer\\n >>> get_index_of_rightmost_set_bit(1.25)\\n Traceback (most recent call last):\\n ValueError: Input must be a non-negative integer\\n \"\"\"\\nif not isinstance(number, int) or number < 0: => [Target] #5\\nintermediate = number & ~(number - 1)\\nindex = 0",
      "Edge 3: [Source] #5\\nintermediate = number & ~(number - 1)\\nindex = 0 => [Target] #7\\nwhile intermediate:",
      "Edge 4: [Source] #7\\nwhile intermediate: => [Target] #8\\nintermediate >>= 1\\nindex += 1",
      "Edge 5: [Source] #7\\nwhile intermediate: => [Target] #9\\nreturn index - 1"
    ],
    "extra_blocks": [
      "Edge 0: [Source] # Reference: https://www.geeksforgeeks.org/position-of-rightmost-set-bit/ => [Target] \\n",
      "Edge 1: [Source] \\n => [Target] \\n",
      "Edge 2: [Source] \\n => [Target] if __name__ == \"__main__\":",
      "Edge 4: [Source] \"\"\"\\n Finding the index of rightmost set bit has some very peculiar use-cases,\\n especially in finding missing or/and repeating numbers in a list of\\n positive integers.\\n \"\"\" => [Target] import doctest",
      "Edge 5: [Source] import doctest => [Target] \\n doctest.testmod(verbose=True)"
    ]
  }
}