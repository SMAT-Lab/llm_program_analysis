{
  "edge_analysis": {
    "static_total": 12,
    "llm_total": 29,
    "matched_edges": {
      "exact_matches": 5,
      "partial_matches": 3
    },
    "accuracy_metrics": {
      "precision": 0.1724137931034483,
      "recall": 0.4166666666666667,
      "f1_score": 0.2448979591836735
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 1: [Source] #10\\n\"\"\"Logs job execution outcomes for better monitoring.\"\"\"\\nif event.exception: => [Target] #13\\nlog(f'Job {event.job_id} completed successfully.')",
      "Edge 3: [Source] #20\\nargs = JobArgs(**kwargs)\\ntry: => [Target] #22\\nlogger.exception(f'Error executing graph {args.graph_id}: {e}')",
      "Edge 5: [Source] #53\\njob = self.scheduler.get_job(schedule_id)\\nif not job: => [Target] #55\\njob_args = JobArgs(**job.kwargs)\\nif job_args.user_id != user_id:",
      "Edge 8: [Source] #63\\nschedules = [] => [Target] #64\\nfor job in self.scheduler.get_jobs():",
      "Edge 10: [Source] #64\\nfor job in self.scheduler.get_jobs(): => [Target] #66\\nreturn schedules"
    ],
    "extra_blocks": [
      "Edge 7: [Source] class JobInfo(JobArgs):\\n id: str\\n name: str\\n next_run_time: str\\n => [Target] @staticmethod\\n",
      "Edge 8: [Source] @staticmethod\\n => [Target] )\\n",
      "Edge 9: [Source] class ExecutionScheduler(AppService): => [Target] scheduler: BlockingScheduler",
      "Edge 10: [Source] class ExecutionScheduler(AppService): => [Target] @classmethod",
      "Edge 11: [Source] class ExecutionScheduler(AppService): => [Target] @property\\n @thread_cached",
      "Edge 12: [Source] class ExecutionScheduler(AppService): => [Target] @expose",
      "Edge 13: [Source] class ExecutionScheduler(AppService): => [Target] @expose",
      "Edge 14: [Source] class ExecutionScheduler(AppService): => [Target] @expose",
      "Edge 16: [Source] def add_execution_schedule(\\n self,\\n graph_id: str,\\n graph_version: int,\\n cron: str,\\n input_data: BlockInput,\\n user_id: str,\\n ) -> JobInfo: => [Target] job_args = JobArgs(\\n graph_id=graph_id,\\n input_data=input_data,\\n user_id=user_id,\\n graph_version=graph_version,\\n cron=cron,\\n )",
      "Edge 17: [Source] job_args = JobArgs(\\n graph_id=graph_id,\\n input_data=input_data,\\n user_id=user_id,\\n graph_version=graph_version,\\n cron=cron,\\n ) => [Target] job = self.scheduler.add_job(\\n execute_graph,\\n CronTrigger.from_crontab(cron),\\n kwargs=job_args.model_dump(),\\n replace_existing=True,\\n )",
      "Edge 18: [Source] job = self.scheduler.add_job(\\n execute_graph,\\n CronTrigger.from_crontab(cron),\\n kwargs=job_args.model_dump(),\\n replace_existing=True,\\n ) => [Target] log(f\"Added job {job.id} with cron schedule '{cron}' input data: {input_data}\")\\n return JobInfo.from_db(job_args, job)",
      "Edge 23: [Source] log(f\"Deleting job {schedule_id}\")\\n job.remove() => [Target] return JobInfo.from_db(job_args, job)",
      "Edge 25: [Source] def get_execution_schedules(\\n self, graph_id: str | None = None, user_id: str | None = None\\n ) -> list[JobInfo]:\\n schedules = []\\n for job in self.scheduler.get_jobs(): => [Target] return schedules",
      "Edge 27: [Source] job_args = JobArgs(**job.kwargs)\\n if (\\n job.next_run_time is not None\\n and (graph_id is None or job_args.graph_id == graph_id)\\n and (user_id is None or job_args.user_id == user_id)\\n ): => [Target] return schedules",
      "Edge 28: [Source] schedules.append(JobInfo.from_db(job_args, job)) => [Target] return schedules"
    ]
  }
}