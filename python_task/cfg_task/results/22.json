{
  "edge_analysis": {
    "static_total": 9,
    "llm_total": 26,
    "matched_edges": {
      "exact_matches": 8,
      "partial_matches": 1
    },
    "accuracy_metrics": {
      "precision": 0.3076923076923077,
      "recall": 0.8888888888888888,
      "f1_score": 0.4583333333333333
    }
  },
  "structure_validation": {
    "missing_blocks": [
      "Edge 2: [Source] #24\\nid, url = self.post_comment(credentials, input_data.issue_url, input_data.\\n comment)\\nyield 'id', id => [Target] #25\\nyield 'url', url",
      "Edge 5: [Source] #67\\nyield 'title', title => [Target] #68\\nif body:",
      "Edge 6: [Source] #68\\nif body: => [Target] #70\\nyield 'body', body",
      "Edge 7: [Source] #70\\nyield 'body', body => [Target] #71\\nif user:",
      "Edge 8: [Source] #71\\nif user: => [Target] #73\\nyield 'user', user"
    ],
    "extra_blocks": [
      "Edge 9: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput:\\n title, body, user = self.read_issue(\\n credentials,\\n input_data.issue_url,\\n ) => [Target] if title:\\n yield \"title\", title",
      "Edge 10: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput:\\n title, body, user = self.read_issue(\\n credentials,\\n input_data.issue_url,\\n ) => [Target] if body:\\n yield \"body\", body",
      "Edge 11: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput:\\n title, body, user = self.read_issue(\\n credentials,\\n input_data.issue_url,\\n ) => [Target] if user:\\n yield \"user\", user",
      "Edge 12: [Source] def list_issues(\\n credentials: GithubCredentials, repo_url: str\\n ) -> list[Output.IssueItem]:\\n api = get_api(credentials)\\n issues_url = repo_url + \"/issues\"\\n response = api.get(issues_url)\\n data = response.json()\\n issues: list[GithubListIssuesBlock.Output.IssueItem] = [\\n {\"title\": issue[\"title\"], \"url\": issue[\"html_url\"]} for issue in data\\n ] => [Target] return issues",
      "Edge 13: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput:\\n issues = self.list_issues(\\n credentials,\\n input_data.repo_url,\\n ) => [Target] yield from ((\"issue\", issue) for issue in issues)",
      "Edge 14: [Source] class Output(BlockSchema): => [Target] issue: IssueItem = SchemaField(\\n title=\"Issue\", description=\"Issues with their title and URL\"\\n )\\n error: str = SchemaField(description=\"Error message if listing issues failed\")",
      "Edge 15: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput: => [Target] status = self.add_label(\\n credentials,\\n input_data.issue_url,\\n input_data.label,\\n )",
      "Edge 16: [Source] status = self.add_label(\\n credentials,\\n input_data.issue_url,\\n input_data.label,\\n ) => [Target] yield \"status\", status",
      "Edge 17: [Source] class GithubRemoveLabelBlock(Block): => [Target] @staticmethod",
      "Edge 18: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput:\\n status = self.remove_label(\\n credentials,\\n input_data.issue_url,\\n input_data.label,\\n ) => [Target] yield \"status\", status",
      "Edge 19: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput: => [Target] status = self.assign_issue(\\n credentials,\\n input_data.issue_url,\\n input_data.assignee,\\n )",
      "Edge 20: [Source] status = self.assign_issue(\\n credentials,\\n input_data.issue_url,\\n input_data.assignee,\\n ) => [Target] yield \"status\", status",
      "Edge 21: [Source] class GithubUnassignIssueBlock(Block): => [Target] @staticmethod",
      "Edge 22: [Source] @staticmethod => [Target] yield \"status\", status",
      "Edge 23: [Source] def unassign_issue(\\n credentials: GithubCredentials,\\n issue_url: str,\\n assignee: str,\\n ) -> str: => [Target] api = get_api(credentials)\\n assignees_url = issue_url + \"/assignees\"\\n data = {\"assignees\": [assignee]}\\n api.delete(assignees_url, json=data)",
      "Edge 24: [Source] api = get_api(credentials)\\n assignees_url = issue_url + \"/assignees\"\\n data = {\"assignees\": [assignee]}\\n api.delete(assignees_url, json=data) => [Target] return \"Issue unassigned successfully\"",
      "Edge 25: [Source] def run(\\n self,\\n input_data: Input,\\n *,\\n credentials: GithubCredentials,\\n **kwargs,\\n ) -> BlockOutput: => [Target] status = self.unassign_issue(\\n credentials,\\n input_data.issue_url,\\n input_data.assignee,\\n )"
    ]
  }
}