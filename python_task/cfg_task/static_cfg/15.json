{
  "name": "15.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom __future__ import annotations",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "IIRFilter",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    N-Order IIR filter\n    Assumes working with float samples normalized on [-1, 1]\n\n    ---\n\n    Implementation details:\n    Based on the 2nd-order function from\n    https://en.wikipedia.org/wiki/Digital_biquad_filter,\n    this generalized N-order function was made.\n\n    Using the following transfer function\n\n    we can rewrite this to\n        .. math:: y[n]={\\\\frac{1}{a_{0}}}\n    \"\"\"",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nself.order = order\nself.a_coeffs = [1.0] + [0.0] * order\nself.b_coeffs = [1.0] + [0.0] * order\nself.input_history = [0.0] * self.order\nself.output_history = [0.0] * self.order",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "set_coefficients",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\n\"\"\"\n        Set the coefficients for the IIR filter.\n        These should both be of size `order` + 1.\n        :math:`a_0` may be left out, and it will use 1.0 as default value.\n\n        This method works well with scipy's filter design functions\n\n        >>> # Make a 2nd-order 1000Hz butterworth lowpass filter\n        >>> import scipy.signal\n        >>> b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\n        >>> filt = IIRFilter(2)\n        >>> filt.set_coefficients(a_coeffs, b_coeffs)\n        \"\"\"\nif len(a_coeffs) < self.order:",
              "successors": [
                {
                  "id": 9,
                  "label": "#9\na_coeffs = [1.0, *a_coeffs]",
                  "successors": [
                    {
                      "id": 10,
                      "label": "#10\nif len(a_coeffs) != self.order + 1:",
                      "successors": [
                        {
                          "id": 11,
                          "label": "#11\nmsg = (\n    f'Expected a_coeffs to have {self.order + 1} elements for {self.order}-order filter, got {len(a_coeffs)}'\n    )\nraise ValueError(msg)",
                          "successors": []
                        },
                        {
                          "id": 12,
                          "label": "#12\nif len(b_coeffs) != self.order + 1:",
                          "successors": [
                            {
                              "id": 14,
                              "label": "#14\nmsg = (\n    f'Expected b_coeffs to have {self.order + 1} elements for {self.order}-order filter, got {len(a_coeffs)}'\n    )\nraise ValueError(msg)",
                              "successors": []
                            },
                            {
                              "id": 15,
                              "label": "#15\nself.a_coeffs = a_coeffs\nself.b_coeffs = b_coeffs",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "process",
          "type": "CFG",
          "blocks": [
            {
              "id": 19,
              "label": "#19\n\"\"\"\n        Calculate :math:`y[n]`\n\n        >>> filt = IIRFilter(2)\n        >>> filt.process(0)\n        0.0\n        \"\"\"\nresult = 0.0",
              "successors": [
                {
                  "id": 20,
                  "label": "#20\nfor i in range(1, self.order + 1):",
                  "successors": [
                    {
                      "id": 21,
                      "label": "#21\nresult += self.b_coeffs[i] * self.input_history[i - 1] - self.a_coeffs[i\n    ] * self.output_history[i - 1]",
                      "successors": []
                    },
                    {
                      "id": 22,
                      "label": "#22\nresult = (result + self.b_coeffs[0] * sample) / self.a_coeffs[0]\nself.input_history[1:] = self.input_history[:-1]\nself.output_history[1:] = self.output_history[:-1]\nself.input_history[0] = sample\nself.output_history[0] = result\nreturn result",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}