{
  "name": "178.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport os\nfrom enum import Enum\nfrom typing import Literal\nimport replicate\nfrom pydantic import SecretStr\nfrom replicate.helpers import FileOutput\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nTEST_CREDENTIALS = APIKeyCredentials(id=\n    '01234567-89ab-cdef-0123-456789abcdef', provider='replicate', api_key=\n    SecretStr('mock-replicate-api-key'), title='Mock Replicate API key',\n    expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id':\n    TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title':\n    TEST_CREDENTIALS.type}",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "ReplicateFluxModelName",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nFLUX_SCHNELL = 'Flux Schnell',\nFLUX_PRO = 'Flux Pro',\nFLUX_PRO1_1 = 'Flux Pro 1.1',",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "api_name",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\napi_names = {ReplicateFluxModelName.FLUX_SCHNELL:\n    'black-forest-labs/flux-schnell', ReplicateFluxModelName.FLUX_PRO:\n    'black-forest-labs/flux-pro', ReplicateFluxModelName.FLUX_PRO1_1:\n    'black-forest-labs/flux-1.1-pro'}\nreturn api_names[self]",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "ImageType",
      "type": "CFG",
      "blocks": [
        {
          "id": 10,
          "label": "#10\nWEBP = 'webp'\nJPG = 'jpg'\nPNG = 'png'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ReplicateFluxAdvancedModelBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 13,
          "label": "#13",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 21,
              "label": "#21\nsuper().__init__(id='90f8c45e-e983-4644-aa0b-b4ebe2f531bc', description=\n    'This block runs Flux models on Replicate with advanced settings.',\n    categories={BlockCategory.AI}, input_schema=\n    ReplicateFluxAdvancedModelBlock.Input, output_schema=\n    ReplicateFluxAdvancedModelBlock.Output, test_input={'credentials':\n    TEST_CREDENTIALS_INPUT, 'replicate_model_name': ReplicateFluxModelName.\n    FLUX_SCHNELL, 'prompt':\n    'A beautiful landscape painting of a serene lake at sunrise', 'seed':\n    None, 'steps': 25, 'guidance': 3.0, 'interval': 2.0, 'aspect_ratio':\n    '1:1', 'output_format': ImageType.PNG, 'output_quality': 80,\n    'safety_tolerance': 2}, test_output=[('result',\n    'https://replicate.com/output/generated-image-url.jpg')], test_mock={\n    'run_model': lambda api_key, model_name, prompt, seed, steps, guidance,\n    interval, aspect_ratio, output_format, output_quality, safety_tolerance:\n    'https://replicate.com/output/generated-image-url.jpg'},\n    test_credentials=TEST_CREDENTIALS)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 24,
              "label": "#24\nseed = input_data.seed\nif seed is None:",
              "successors": [
                {
                  "id": 25,
                  "label": "#25\nseed = int.from_bytes(os.urandom(4), 'big')",
                  "successors": [
                    {
                      "id": 26,
                      "label": "#26\nresult = self.run_model(api_key=credentials.api_key, model_name=input_data.\n    replicate_model_name.api_name, prompt=input_data.prompt, seed=seed,\n    steps=input_data.steps, guidance=input_data.guidance, interval=\n    input_data.interval, aspect_ratio=input_data.aspect_ratio,\n    output_format=input_data.output_format, output_quality=input_data.\n    output_quality, safety_tolerance=input_data.safety_tolerance)\nyield 'result', result",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run_model",
          "type": "CFG",
          "blocks": [
            {
              "id": 30,
              "label": "#30\nclient = replicate.Client(api_token=api_key.get_secret_value())\noutput: FileOutput | list[FileOutput] = client.run(f'{model_name}', input={\n    'prompt': prompt, 'seed': seed, 'steps': steps, 'guidance': guidance,\n    'interval': interval, 'aspect_ratio': aspect_ratio, 'output_format':\n    output_format, 'output_quality': output_quality, 'safety_tolerance':\n    safety_tolerance}, wait=False)\nif isinstance(output, list) and len(output) > 0:",
              "successors": [
                {
                  "id": 31,
                  "label": "#31\nif isinstance(output[0], FileOutput):",
                  "successors": [
                    {
                      "id": 40,
                      "label": "#40\nresult_url = output[0].url",
                      "successors": [
                        {
                          "id": 32,
                          "label": "#32\nreturn result_url",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 42,
                      "label": "#42\nresult_url = output[0]",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 33,
                  "label": "#33\nif isinstance(output, FileOutput):",
                  "successors": [
                    {
                      "id": 34,
                      "label": "#34\nresult_url = output.url",
                      "successors": []
                    },
                    {
                      "id": 36,
                      "label": "#36\nif isinstance(output, str):",
                      "successors": [
                        {
                          "id": 37,
                          "label": "#37\nresult_url = output",
                          "successors": []
                        },
                        {
                          "id": 39,
                          "label": "#39\nresult_url = 'No output received'",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 15,
              "label": "#15\ncredentials: CredentialsMetaInput[Literal[ProviderName.REPLICATE], Literal[\n    'api_key']] = CredentialsField(description=\n    'The Replicate integration can be used with any API key with sufficient permissions for the blocks it is used on.'\n    )\nprompt: str = SchemaField(description='Text prompt for image generation',\n    placeholder=\"e.g., 'A futuristic cityscape at sunset'\", title='Prompt')\nreplicate_model_name: ReplicateFluxModelName = SchemaField(description=\n    'The name of the Image Generation Model, i.e Flux Schnell', default=\n    ReplicateFluxModelName.FLUX_SCHNELL, title='Image Generation Model',\n    advanced=False)\nseed: int | None = SchemaField(description=\n    'Random seed. Set for reproducible generation', default=None, title='Seed')\nsteps: int = SchemaField(description='Number of diffusion steps', default=\n    25, title='Steps')\nguidance: float = SchemaField(description=\n    'Controls the balance between adherence to the text prompt and image quality/diversity. Higher values make the output more closely match the prompt but may reduce overall image quality.'\n    , default=3, title='Guidance')\ninterval: float = SchemaField(description=\n    'Interval is a setting that increases the variance in possible outputs. Setting this value low will ensure strong prompt following with more consistent outputs.'\n    , default=2, title='Interval')\naspect_ratio: str = SchemaField(description=\n    'Aspect ratio for the generated image', default='1:1', title=\n    'Aspect Ratio', placeholder=\n    'Choose from: 1:1, 16:9, 2:3, 3:2, 4:5, 5:4, 9:16')\noutput_format: ImageType = SchemaField(description=\n    'File format of the output image', default=ImageType.WEBP, title=\n    'Output Format')\noutput_quality: int = SchemaField(description=\n    'Quality when saving the output images, from 0 to 100. Not relevant for .png outputs'\n    , default=80, title='Output Quality')\nsafety_tolerance: int = SchemaField(description=\n    'Safety tolerance, 1 is most strict and 5 is most permissive', default=\n    2, title='Safety Tolerance')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 18,
              "label": "#18\nresult: str = SchemaField(description='Generated output')\nerror: str = SchemaField(description='Error message if the model run failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}