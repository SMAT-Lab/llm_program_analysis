{
  "name": "154.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport unittest\nfrom validate.links import find_links_in_text\nfrom validate.links import check_duplicate_links\nfrom validate.links import fake_user_agent\nfrom validate.links import get_host_from_link\nfrom validate.links import has_cloudflare_protection",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "FakeResponse",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nself.status_code = code\nself.headers = headers\nself.text = text",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "TestValidateLinks",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "setUp",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nself.duplicate_links = ['https://www.example.com',\n    'https://www.example.com', 'https://www.example.com',\n    'https://www.anotherexample.com']\nself.no_duplicate_links = ['https://www.firstexample.com',\n    'https://www.secondexample.com', 'https://www.anotherexample.com']\nself.code_200 = 200\nself.code_403 = 403\nself.code_503 = 503\nself.cloudflare_headers = {'Server': 'cloudflare'}\nself.no_cloudflare_headers = {'Server': 'google'}\nself.text_with_cloudflare_flags = (\nself.text_without_cloudflare_flags = 'Lorem Ipsum'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_find_link_in_text",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\ntext = \"\"\"\n            # this is valid\n\n            http://example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com.br\n            https://www.example.com.gov.br\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\n\n            # this not is valid\n\n            example.com\n            https:example.com\n            https:/example.com\n            https//example.com\n            https//.com\n        \"\"\"\nlinks = find_links_in_text(text)\nself.assertIsInstance(links, list)\nself.assertEqual(len(links), 7)",
              "successors": [
                {
                  "id": 15,
                  "label": "#15\nfor link in links:",
                  "successors": [
                    {
                      "id": 16,
                      "label": "#16\nwith self.subTest():",
                      "successors": [
                        {
                          "id": 18,
                          "label": "#18\nself.assertIsInstance(link, str)",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_find_link_in_text_with_invalid_argument",
          "type": "CFG",
          "blocks": [
            {
              "id": 22,
              "label": "#22\nwith self.assertRaises(TypeError):",
              "successors": [
                {
                  "id": 23,
                  "label": "#23\nfind_links_in_text()\nfind_links_in_text(1)\nfind_links_in_text(True)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_if_check_duplicate_links_has_the_correct_return",
          "type": "CFG",
          "blocks": [
            {
              "id": 27,
              "label": "#27\nresult_1 = check_duplicate_links(self.duplicate_links)\nresult_2 = check_duplicate_links(self.no_duplicate_links)\nself.assertIsInstance(result_1, tuple)\nself.assertIsInstance(result_2, tuple)\nhas_duplicate_links, links = result_1\nno_duplicate_links, no_links = result_2\nself.assertTrue(has_duplicate_links)\nself.assertFalse(no_duplicate_links)\nself.assertIsInstance(links, list)\nself.assertIsInstance(no_links, list)\nself.assertEqual(len(links), 2)\nself.assertEqual(len(no_links), 0)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_if_fake_user_agent_has_a_str_as_return",
          "type": "CFG",
          "blocks": [
            {
              "id": 30,
              "label": "#30\nuser_agent = fake_user_agent()\nself.assertIsInstance(user_agent, str)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_get_host_from_link",
          "type": "CFG",
          "blocks": [
            {
              "id": 33,
              "label": "#33\nlinks = ['example.com', 'https://example.com', 'https://www.example.com',\n    'https://www.example.com.br', 'https://www.example.com/route',\n    'https://www.example.com?p=1&q=2', 'https://www.example.com#anchor']",
              "successors": [
                {
                  "id": 34,
                  "label": "#34\nfor link in links:",
                  "successors": [
                    {
                      "id": 35,
                      "label": "#35\nhost = get_host_from_link(link)\nwith self.subTest():",
                      "successors": [
                        {
                          "id": 37,
                          "label": "#37\nself.assertIsInstance(host, str)\nself.assertNotIn('://', host)\nself.assertNotIn('/', host)\nself.assertNotIn('?', host)\nself.assertNotIn('#', host)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 36,
                      "label": "#36\nwith self.assertRaises(TypeError):",
                      "successors": [
                        {
                          "id": 39,
                          "label": "#39\nget_host_from_link()",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_has_cloudflare_protection_with_code_403_and_503_in_response",
          "type": "CFG",
          "blocks": [
            {
              "id": 43,
              "label": "#43\nresp_with_cloudflare_protection_code_403 = FakeResponse(code=self.code_403,\n    headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\nresp_with_cloudflare_protection_code_503 = FakeResponse(code=self.code_503,\n    headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\nresult1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\nresult2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\nself.assertTrue(result1)\nself.assertTrue(result2)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_has_cloudflare_protection_when_there_is_no_protection",
          "type": "CFG",
          "blocks": [
            {
              "id": 46,
              "label": "#46\nresp_without_cloudflare_protection1 = FakeResponse(code=self.code_200,\n    headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags\n    )\nresp_without_cloudflare_protection2 = FakeResponse(code=self.code_403,\n    headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags\n    )\nresp_without_cloudflare_protection3 = FakeResponse(code=self.code_503,\n    headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags\n    )\nresult1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\nresult2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\nresult3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\nself.assertFalse(result1)\nself.assertFalse(result2)\nself.assertFalse(result3)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}