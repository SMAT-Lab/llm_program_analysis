{
  "name": "169.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport re\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "CodeExtractionBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8', description=\n    'Extracts code blocks from text and identifies their programming languages'\n    , categories={BlockCategory.TEXT}, input_schema=CodeExtractionBlock.\n    Input, output_schema=CodeExtractionBlock.Output, test_input={'text':\n    \"\"\"Here's a Python example:\n```python\nprint('Hello World')\n```\nAnd some HTML:\n```html\n<h1>Title</h1>\n```\"\"\"\n    }, test_output=[('html', '<h1>Title</h1>'), ('python',\n    \"print('Hello World')\"), ('remaining_text',\n    \"\"\"Here's a Python example:\nAnd some HTML:\"\"\")])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nlanguage_aliases = {'html': ['html', 'htm'], 'css': ['css'], 'javascript':\n    ['javascript', 'js'], 'python': ['python', 'py'], 'sql': ['sql'],\n    'java': ['java'], 'cpp': ['cpp', 'c++'], 'csharp': ['csharp', 'c#',\n    'cs'], 'json_code': ['json'], 'bash': ['bash', 'shell', 'sh'], 'php': [\n    'php'], 'ruby': ['ruby', 'rb'], 'yaml': ['yaml', 'yml'], 'markdown': [\n    'markdown', 'md'], 'typescript': ['typescript', 'ts'], 'xml': ['xml']}",
              "successors": [
                {
                  "id": 15,
                  "label": "#15\nfor canonical_name, aliases in language_aliases.items():",
                  "successors": [
                    {
                      "id": 16,
                      "label": "#16\ncode = ''",
                      "successors": [
                        {
                          "id": 18,
                          "label": "#18\nfor alias in aliases:",
                          "successors": [
                            {
                              "id": 19,
                              "label": "#19\ncode_for_alias = self.extract_code(input_data.text, alias)\nif code_for_alias:",
                              "successors": [
                                {
                                  "id": 21,
                                  "label": "#21\ncode = code + '\\n\\n' + code_for_alias if code else code_for_alias",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 20,
                              "label": "#20\nif code:",
                              "successors": [
                                {
                                  "id": 23,
                                  "label": "#23\nyield canonical_name, code",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 17,
                      "label": "#17\npattern = '```(?:' + '|'.join(re.escape(alias) for aliases in\n    language_aliases.values() for alias in aliases) + ')\\\\s+[\\\\s\\\\S]*?```'\nremaining_text = re.sub(pattern, '', input_data.text).strip()\nremaining_text = re.sub('\\\\n\\\\s*\\\\n', '\\n', remaining_text)\nif remaining_text:",
                      "successors": [
                        {
                          "id": 26,
                          "label": "#26\nyield 'remaining_text', remaining_text",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "extract_code",
          "type": "CFG",
          "blocks": [
            {
              "id": 31,
              "label": "#31\nlanguage = re.escape(language)\npattern = re.compile(f'```{language}\\\\s+(.*?)```', re.DOTALL | re.IGNORECASE)\nmatches = pattern.finditer(text)\ncode_blocks = [match.group(1).strip() for match in matches]\nreturn '\\n\\n'.join(code_blocks) if code_blocks else ''",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ntext: str = SchemaField(description=\n    'Text containing code blocks to extract (e.g., AI response)',\n    placeholder='Enter text containing code blocks')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nhtml: str = SchemaField(description='Extracted HTML code')\ncss: str = SchemaField(description='Extracted CSS code')\njavascript: str = SchemaField(description='Extracted JavaScript code')\npython: str = SchemaField(description='Extracted Python code')\nsql: str = SchemaField(description='Extracted SQL code')\njava: str = SchemaField(description='Extracted Java code')\ncpp: str = SchemaField(description='Extracted C++ code')\ncsharp: str = SchemaField(description='Extracted C# code')\njson_code: str = SchemaField(description='Extracted JSON code')\nbash: str = SchemaField(description='Extracted Bash code')\nphp: str = SchemaField(description='Extracted PHP code')\nruby: str = SchemaField(description='Extracted Ruby code')\nyaml: str = SchemaField(description='Extracted YAML code')\nmarkdown: str = SchemaField(description='Extracted Markdown code')\ntypescript: str = SchemaField(description='Extracted TypeScript code')\nxml: str = SchemaField(description='Extracted XML code')\nremaining_text: str = SchemaField(description=\n    'Remaining text after code extraction')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}