{
  "name": "103.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport secrets\nfrom datetime import datetime, timedelta, timezone\nfrom typing import TYPE_CHECKING\nfrom pydantic import SecretStr\nif TYPE_CHECKING:",
      "successors": [
        {
          "id": 2,
          "label": "#2\nfrom backend.executor.database import DatabaseManager",
          "successors": [
            {
              "id": 3,
              "label": "#3\nfrom autogpt_libs.utils.cache import thread_cached\nfrom autogpt_libs.utils.synchronize import RedisKeyedMutex\nfrom backend.data.model import APIKeyCredentials, Credentials, OAuth2Credentials, OAuthState, UserIntegrations\nfrom backend.util.settings import Settings\nsettings = Settings()\nrevid_credentials = APIKeyCredentials(id=\n    'fdb7f412-f519-48d1-9b5f-d2f73d0e01fe', provider='revid', api_key=\n    SecretStr(settings.secrets.revid_api_key), title=\n    'Use Credits for Revid', expires_at=None)\nideogram_credentials = APIKeyCredentials(id=\n    '760f84fc-b270-42de-91f6-08efe1b512d0', provider='ideogram', api_key=\n    SecretStr(settings.secrets.ideogram_api_key), title=\n    'Use Credits for Ideogram', expires_at=None)\nreplicate_credentials = APIKeyCredentials(id=\n    '6b9fc200-4726-4973-86c9-cd526f5ce5db', provider='replicate', api_key=\n    SecretStr(settings.secrets.replicate_api_key), title=\n    'Use Credits for Replicate', expires_at=None)\nopenai_credentials = APIKeyCredentials(id=\n    '53c25cb8-e3ee-465c-a4d1-e75a4c899c2a', provider='openai', api_key=\n    SecretStr(settings.secrets.openai_api_key), title=\n    'Use Credits for OpenAI', expires_at=None)\nanthropic_credentials = APIKeyCredentials(id=\n    '24e5d942-d9e3-4798-8151-90143ee55629', provider='anthropic', api_key=\n    SecretStr(settings.secrets.anthropic_api_key), title=\n    'Use Credits for Anthropic', expires_at=None)\ngroq_credentials = APIKeyCredentials(id=\n    '4ec22295-8f97-4dd1-b42b-2c6957a02545', provider='groq', api_key=\n    SecretStr(settings.secrets.groq_api_key), title='Use Credits for Groq',\n    expires_at=None)\ndid_credentials = APIKeyCredentials(id=\n    '7f7b0654-c36b-4565-8fa7-9a52575dfae2', provider='d_id', api_key=\n    SecretStr(settings.secrets.did_api_key), title='Use Credits for D-ID',\n    expires_at=None)\njina_credentials = APIKeyCredentials(id=\n    '7f26de70-ba0d-494e-ba76-238e65e7b45f', provider='jina', api_key=\n    SecretStr(settings.secrets.jina_api_key), title='Use Credits for Jina',\n    expires_at=None)\nunreal_credentials = APIKeyCredentials(id=\n    '66f20754-1b81-48e4-91d0-f4f0dd82145f', provider='unreal', api_key=\n    SecretStr(settings.secrets.unreal_speech_api_key), title=\n    'Use Credits for Unreal', expires_at=None)\nopen_router_credentials = APIKeyCredentials(id=\n    'b5a0e27d-0c98-4df3-a4b9-10193e1f3c40', provider='open_router', api_key\n    =SecretStr(settings.secrets.open_router_api_key), title=\n    'Use Credits for Open Router', expires_at=None)\nDEFAULT_CREDENTIALS = [revid_credentials, ideogram_credentials,\n    replicate_credentials, openai_credentials, anthropic_credentials,\n    groq_credentials, did_credentials, jina_credentials, unreal_credentials,\n    open_router_credentials]",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "IntegrationCredentialsStore",
      "type": "CFG",
      "blocks": [
        {
          "id": 5,
          "label": "#5",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 7,
              "label": "#7\nfrom backend.data.redis import get_redis\nself.locks = RedisKeyedMutex(get_redis())",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "db_manager",
          "type": "CFG",
          "blocks": [
            {
              "id": 10,
              "label": "#10\nfrom backend.executor.database import DatabaseManager\nfrom backend.util.service import get_service_client\nreturn get_service_client(DatabaseManager)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "add_creds",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nwith self.locked_user_integrations(user_id):",
              "successors": [
                {
                  "id": 15,
                  "label": "#15\nif self.get_creds_by_id(user_id, credentials.id):",
                  "successors": [
                    {
                      "id": 17,
                      "label": "#17\nraise ValueError(\n    f'Can not re-create existing credentials #{credentials.id} for user #{user_id}'\n    )",
                      "successors": []
                    },
                    {
                      "id": 18,
                      "label": "#18\nself._set_user_integration_creds(user_id, [*self.get_all_creds(user_id),\n    credentials])",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_all_creds",
          "type": "CFG",
          "blocks": [
            {
              "id": 22,
              "label": "#22\nusers_credentials = self._get_user_integrations(user_id).credentials\nall_credentials = users_credentials\nif settings.secrets.revid_api_key:",
              "successors": [
                {
                  "id": 23,
                  "label": "#23\nall_credentials.append(revid_credentials)",
                  "successors": [
                    {
                      "id": 24,
                      "label": "#24\nif settings.secrets.ideogram_api_key:",
                      "successors": [
                        {
                          "id": 25,
                          "label": "#25\nall_credentials.append(ideogram_credentials)",
                          "successors": [
                            {
                              "id": 26,
                              "label": "#26\nif settings.secrets.groq_api_key:",
                              "successors": [
                                {
                                  "id": 27,
                                  "label": "#27\nall_credentials.append(groq_credentials)",
                                  "successors": [
                                    {
                                      "id": 28,
                                      "label": "#28\nif settings.secrets.replicate_api_key:",
                                      "successors": [
                                        {
                                          "id": 29,
                                          "label": "#29\nall_credentials.append(replicate_credentials)",
                                          "successors": [
                                            {
                                              "id": 30,
                                              "label": "#30\nif settings.secrets.openai_api_key:",
                                              "successors": [
                                                {
                                                  "id": 31,
                                                  "label": "#31\nall_credentials.append(openai_credentials)",
                                                  "successors": [
                                                    {
                                                      "id": 32,
                                                      "label": "#32\nif settings.secrets.anthropic_api_key:",
                                                      "successors": [
                                                        {
                                                          "id": 33,
                                                          "label": "#33\nall_credentials.append(anthropic_credentials)",
                                                          "successors": [
                                                            {
                                                              "id": 34,
                                                              "label": "#34\nif settings.secrets.did_api_key:",
                                                              "successors": [
                                                                {
                                                                  "id": 35,
                                                                  "label": "#35\nall_credentials.append(did_credentials)",
                                                                  "successors": [
                                                                    {
                                                                      "id": 36,
                                                                      "label": "#36\nif settings.secrets.jina_api_key:",
                                                                      "successors": [
                                                                        {
                                                                          "id": 37,
                                                                          "label": "#37\nall_credentials.append(jina_credentials)",
                                                                          "successors": [
                                                                            {
                                                                              "id": 38,
                                                                              "label": "#38\nif settings.secrets.unreal_speech_api_key:",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 39,
                                                                                  "label": "#39\nall_credentials.append(unreal_credentials)",
                                                                                  "successors": [
                                                                                    {
                                                                                      "id": 40,
                                                                                      "label": "#40\nif settings.secrets.open_router_api_key:",
                                                                                      "successors": [
                                                                                        {
                                                                                          "id": 41,
                                                                                          "label": "#41\nall_credentials.append(open_router_credentials)",
                                                                                          "successors": [
                                                                                            {
                                                                                              "id": 42,
                                                                                              "label": "#42\nreturn all_credentials",
                                                                                              "successors": []
                                                                                            }
                                                                                          ]
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_creds_by_id",
          "type": "CFG",
          "blocks": [
            {
              "id": 46,
              "label": "#46\nall_credentials = self.get_all_creds(user_id)\nreturn next((c for c in all_credentials if c.id == credentials_id), None)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_creds_by_provider",
          "type": "CFG",
          "blocks": [
            {
              "id": 50,
              "label": "#50\ncredentials = self.get_all_creds(user_id)\nreturn [c for c in credentials if c.provider == provider]",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_authorized_providers",
          "type": "CFG",
          "blocks": [
            {
              "id": 54,
              "label": "#54\ncredentials = self.get_all_creds(user_id)\nreturn list(set(c.provider for c in credentials))",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "update_creds",
          "type": "CFG",
          "blocks": [
            {
              "id": 58,
              "label": "#58\nwith self.locked_user_integrations(user_id):",
              "successors": [
                {
                  "id": 59,
                  "label": "#59\ncurrent = self.get_creds_by_id(user_id, updated.id)\nif not current:",
                  "successors": [
                    {
                      "id": 61,
                      "label": "#61\nraise ValueError(\n    f'Credentials with ID {updated.id} for user with ID {user_id} not found')",
                      "successors": []
                    },
                    {
                      "id": 62,
                      "label": "#62\nif type(current) is not type(updated):",
                      "successors": [
                        {
                          "id": 64,
                          "label": "#64\nraise TypeError(\n    f'Can not update credentials with ID {updated.id} from type {type(current)} to type {type(updated)}'\n    )",
                          "successors": []
                        },
                        {
                          "id": 65,
                          "label": "#65\nif isinstance(updated, OAuth2Credentials) and isinstance(current,",
                          "successors": [
                            {
                              "id": 67,
                              "label": "#67\nraise ValueError(\n    f'Can not update credentials with ID {updated.id} and scopes {current.scopes} to more restrictive set of scopes {updated.scopes}'\n    )",
                              "successors": []
                            },
                            {
                              "id": 68,
                              "label": "#68\nupdated_credentials_list = [(updated if c.id == updated.id else c) for c in\n    self.get_all_creds(user_id)]\nself._set_user_integration_creds(user_id, updated_credentials_list)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "delete_creds_by_id",
          "type": "CFG",
          "blocks": [
            {
              "id": 72,
              "label": "#72\nwith self.locked_user_integrations(user_id):",
              "successors": [
                {
                  "id": 73,
                  "label": "#73\nfiltered_credentials = [c for c in self.get_all_creds(user_id) if c.id !=\n    credentials_id]\nself._set_user_integration_creds(user_id, filtered_credentials)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "store_state_token",
          "type": "CFG",
          "blocks": [
            {
              "id": 77,
              "label": "#77\ntoken = secrets.token_urlsafe(32)\nexpires_at = datetime.now(timezone.utc) + timedelta(minutes=10)\nstate = OAuthState(token=token, provider=provider, expires_at=int(\n    expires_at.timestamp()), scopes=scopes)\nwith self.locked_user_integrations(user_id):",
              "successors": [
                {
                  "id": 78,
                  "label": "#78\nuser_integrations = self._get_user_integrations(user_id)\noauth_states = user_integrations.oauth_states\noauth_states.append(state)\nuser_integrations.oauth_states = oauth_states\nself.db_manager.update_user_integrations(user_id=user_id, data=\n    user_integrations)",
                  "successors": [
                    {
                      "id": 79,
                      "label": "#79\nreturn token",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get_any_valid_scopes_from_state_token",
          "type": "CFG",
          "blocks": [
            {
              "id": 83,
              "label": "#83\n\"\"\"\n        Get the valid scopes from the OAuth state token. This will return any valid scopes\n        from any OAuth state token for the given provider. If no valid scopes are found,\n        an empty list is returned. DO NOT RELY ON THIS TOKEN TO AUTHENTICATE A USER, AS IT\n        IS TO CHECK IF THE USER HAS GIVEN PERMISSIONS TO THE APPLICATION BEFORE EXCHANGING\n        THE CODE FOR TOKENS.\n        \"\"\"\nuser_integrations = self._get_user_integrations(user_id)\noauth_states = user_integrations.oauth_states\nnow = datetime.now(timezone.utc)\nvalid_state = next((state for state in oauth_states if state.token == token and\n    state.provider == provider and state.expires_at > now.timestamp()), None)\nif valid_state:",
              "successors": [
                {
                  "id": 84,
                  "label": "#84\nreturn valid_state.scopes",
                  "successors": []
                },
                {
                  "id": 85,
                  "label": "#85\nreturn []",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "verify_state_token",
          "type": "CFG",
          "blocks": [
            {
              "id": 90,
              "label": "#90\nwith self.locked_user_integrations(user_id):",
              "successors": [
                {
                  "id": 91,
                  "label": "#91\nuser_integrations = self._get_user_integrations(user_id)\noauth_states = user_integrations.oauth_states\nnow = datetime.now(timezone.utc)\nvalid_state = next((state for state in oauth_states if state.token == token and\n    state.provider == provider and state.expires_at > now.timestamp()), None)\nif valid_state:",
                  "successors": [
                    {
                      "id": 93,
                      "label": "#93\noauth_states.remove(valid_state)\nuser_integrations.oauth_states = oauth_states\nself.db_manager.update_user_integrations(user_id, user_integrations)\nreturn True",
                      "successors": []
                    },
                    {
                      "id": 92,
                      "label": "#92\nreturn False",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_set_user_integration_creds",
          "type": "CFG",
          "blocks": [
            {
              "id": 99,
              "label": "#99\nintegrations = self._get_user_integrations(user_id)\ncredentials = [c for c in credentials if c not in DEFAULT_CREDENTIALS]\nintegrations.credentials = credentials\nself.db_manager.update_user_integrations(user_id, integrations)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_get_user_integrations",
          "type": "CFG",
          "blocks": [
            {
              "id": 102,
              "label": "#102\nintegrations: UserIntegrations = self.db_manager.get_user_integrations(user_id\n    =user_id)\nreturn integrations",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "locked_user_integrations",
          "type": "CFG",
          "blocks": [
            {
              "id": 106,
              "label": "#106\nkey = f'user:{user_id}', 'integrations'\nreturn self.locks.locked(key)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}