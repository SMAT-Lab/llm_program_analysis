{
  "name": "82.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 27,
          "label": "#27\nimport doctest\ndoctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "gray_code",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n\n    >>> gray_code(1)\n    [0, 1]\n\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n    ValueError: The given input must be positive\n\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \"\"\"\nif bit_count < 0:",
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise ValueError('The given input must be positive')",
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nsequence = gray_code_sequence_string(bit_count)",
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nfor i in range(len(sequence)):",
                  "successors": [
                    {
                      "id": 8,
                      "label": "#8\nsequence[i] = int(sequence[i], 2)",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "#9\nreturn sequence",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "gray_code_sequence_string",
      "type": "CFG",
      "blocks": [
        {
          "id": 13,
          "label": "#13\n\"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \"\"\"\nif bit_count == 0:",
          "successors": [
            {
              "id": 14,
              "label": "#14\nreturn ['0']",
              "successors": []
            },
            {
              "id": 15,
              "label": "#15\nif bit_count == 1:",
              "successors": [
                {
                  "id": 17,
                  "label": "#17\nreturn ['0', '1']",
                  "successors": []
                },
                {
                  "id": 18,
                  "label": "#18\nseq_len = 1 << bit_count\nsmaller_sequence = gray_code_sequence_string(bit_count - 1)\nsequence = []",
                  "successors": [
                    {
                      "id": 20,
                      "label": "#20\nfor i in range(seq_len // 2):",
                      "successors": [
                        {
                          "id": 21,
                          "label": "#21\ngenerated_no = '0' + smaller_sequence[i]\nsequence.append(generated_no)",
                          "successors": []
                        },
                        {
                          "id": 22,
                          "label": "#22\nfor i in reversed(range(seq_len // 2)):",
                          "successors": [
                            {
                              "id": 23,
                              "label": "#23\ngenerated_no = '1' + smaller_sequence[i]\nsequence.append(generated_no)",
                              "successors": []
                            },
                            {
                              "id": 24,
                              "label": "#24\nreturn sequence",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}