{
  "name": "89.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 9,
          "label": "#9\nimport doctest\ndoctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "twos_complement",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n    ValueError: input must be a negative integer\n    \"\"\"\nif number > 0:",
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise ValueError('input must be a negative integer')",
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nbinary_number_length = len(bin(number)[3:])\ntwos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\ntwos_complement_number = '1' + '0' * (binary_number_length - len(\n    twos_complement_number)) + twos_complement_number if number < 0 else '0'\nreturn '0b' + twos_complement_number",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}