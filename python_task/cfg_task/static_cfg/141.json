{
  "name": "141.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport re\nfrom typing_extensions import TypedDict\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom ._api import get_api\nfrom ._auth import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GithubCredentials, GithubCredentialsField, GithubCredentialsInput",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "prepare_pr_api_url",
      "type": "CFG",
      "blocks": [
        {
          "id": 154,
          "label": "#154\npattern = '^(?:https?://)?([^/]+/[^/]+/[^/]+)/pull/(\\\\d+)'\nmatch = re.match(pattern, pr_url)\nif not match:",
          "successors": [
            {
              "id": 155,
              "label": "#155\nreturn pr_url",
              "successors": []
            },
            {
              "id": 156,
              "label": "#156\nbase_url, pr_number = match.groups()\nreturn f'{base_url}/pulls/{pr_number}/{path}'",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "GithubListPullRequestsBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nsuper().__init__(id='ffef3c4c-6cd0-48dd-817d-459f975219f4', description=\n    'This block lists all pull requests for a specified GitHub repository.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubListPullRequestsBlock.Input, output_schema=\n    GithubListPullRequestsBlock.Output, test_input={'repo_url':\n    'https://github.com/owner/repo', 'credentials': TEST_CREDENTIALS_INPUT},\n    test_credentials=TEST_CREDENTIALS, test_output=[('pull_request', {\n    'title': 'Pull request 1', 'url':\n    'https://github.com/owner/repo/pull/1'})], test_mock={'list_prs': lambda\n    *args, **kwargs: [{'title': 'Pull request 1', 'url':\n    'https://github.com/owner/repo/pull/1'}]})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "list_prs",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\napi = get_api(credentials)\npulls_url = repo_url + '/pulls'\nresponse = api.get(pulls_url)\ndata = response.json()\npull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = [{'title':\n    pr['title'], 'url': pr['html_url']} for pr in data]\nreturn pull_requests",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 21,
              "label": "#21\npull_requests = self.list_prs(credentials, input_data.repo_url)\nyield from (('pull_request', pr) for pr in pull_requests)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository',\n    placeholder='https://github.com/owner/repo')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\npull_request: PRItem = SchemaField(title='Pull Request', description=\n    'PRs with their title and URL')\nerror: str = SchemaField(description='Error message if listing issues failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": [
            {
              "name": "PRItem",
              "type": "CFG",
              "blocks": [
                {
                  "id": 10,
                  "label": "#10\ntitle: str\nurl: str",
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            }
          ]
        }
      ]
    },
    {
      "name": "GithubMakePullRequestBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 25,
          "label": "#25",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 33,
              "label": "#33\nsuper().__init__(id='dfb987f8-f197-4b2e-bf19-111812afd692', description=\n    'This block creates a new pull request on a specified GitHub repository.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubMakePullRequestBlock.Input, output_schema=\n    GithubMakePullRequestBlock.Output, test_input={'repo_url':\n    'https://github.com/owner/repo', 'title': 'Test Pull Request', 'body':\n    'This is a test pull request.', 'head': 'feature-branch', 'base':\n    'main', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('number', 1), ('url',\n    'https://github.com/owner/repo/pull/1')], test_mock={'create_pr': lambda\n    *args, **kwargs: (1, 'https://github.com/owner/repo/pull/1')})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "create_pr",
          "type": "CFG",
          "blocks": [
            {
              "id": 36,
              "label": "#36\napi = get_api(credentials)\npulls_url = repo_url + '/pulls'\ndata = {'title': title, 'body': body, 'head': head, 'base': base}\nresponse = api.post(pulls_url, json=data)\npr_data = response.json()\nreturn pr_data['number'], pr_data['html_url']",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 40,
              "label": "#40\ntry:",
              "successors": [
                {
                  "id": 41,
                  "label": "#41\nnumber, url = self.create_pr(credentials, input_data.repo_url, input_data.\n    title, input_data.body, input_data.head, input_data.base)\nyield 'number', number",
                  "successors": [
                    {
                      "id": 44,
                      "label": "#44\nyield 'url', url",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 42,
                  "label": "#42\nyield 'error', str(e)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 27,
              "label": "#27\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository',\n    placeholder='https://github.com/owner/repo')\ntitle: str = SchemaField(description='Title of the pull request',\n    placeholder='Enter the pull request title')\nbody: str = SchemaField(description='Body of the pull request', placeholder\n    ='Enter the pull request body')\nhead: str = SchemaField(description=\n    'The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch.'\n    , placeholder='Enter the head branch')\nbase: str = SchemaField(description=\n    'The name of the branch you want the changes pulled into.', placeholder\n    ='Enter the base branch')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 30,
              "label": "#30\nnumber: int = SchemaField(description='Number of the created pull request')\nurl: str = SchemaField(description='URL of the created pull request')\nerror: str = SchemaField(description=\n    'Error message if the pull request creation failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubReadPullRequestBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 50,
          "label": "#50",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 58,
              "label": "#58\nsuper().__init__(id='bf94b2a4-1a30-4600-a783-a8a44ee31301', description=\n    'This block reads the body, title, user, and changes of a specified GitHub pull request.'\n    , categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubReadPullRequestBlock.Input, output_schema=\n    GithubReadPullRequestBlock.Output, test_input={'pr_url':\n    'https://github.com/owner/repo/pull/1', 'include_pr_changes': True,\n    'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('title', 'Title of the pull request'),\n    ('body', 'This is the body of the pull request.'), ('author',\n    'username'), ('changes', 'List of changes made in the pull request.')],\n    test_mock={'read_pr': lambda *args, **kwargs: (\n    'Title of the pull request', 'This is the body of the pull request.',\n    'username'), 'read_pr_changes': lambda *args, **kwargs:\n    'List of changes made in the pull request.'})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "read_pr",
          "type": "CFG",
          "blocks": [
            {
              "id": 61,
              "label": "#61\napi = get_api(credentials)\nissue_url = pr_url.replace('/pull/', '/issues/')\nresponse = api.get(issue_url)\ndata = response.json()\ntitle = data.get('title', 'No title found')\nbody = data.get('body', 'No body content found')\nauthor = data.get('user', {}).get('login', 'No user found')\nreturn title, body, author",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "read_pr_changes",
          "type": "CFG",
          "blocks": [
            {
              "id": 65,
              "label": "#65\napi = get_api(credentials)\nfiles_url = prepare_pr_api_url(pr_url=pr_url, path='files')\nresponse = api.get(files_url)\nfiles = response.json()\nchanges = []",
              "successors": [
                {
                  "id": 66,
                  "label": "#66\nfor file in files:",
                  "successors": [
                    {
                      "id": 67,
                      "label": "#67\nfilename = file.get('filename')\npatch = file.get('patch')\nif filename and patch:",
                      "successors": [
                        {
                          "id": 69,
                          "label": "#69\nchanges.append(f\"\"\"File: {filename}\n{patch}\"\"\")",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 68,
                      "label": "#68\nreturn '\\n\\n'.join(changes)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 74,
              "label": "#74\ntitle, body, author = self.read_pr(credentials, input_data.pr_url)\nyield 'title', title",
              "successors": [
                {
                  "id": 75,
                  "label": "#75\nyield 'body', body",
                  "successors": [
                    {
                      "id": 76,
                      "label": "#76\nyield 'author', author",
                      "successors": [
                        {
                          "id": 77,
                          "label": "#77\nif input_data.include_pr_changes:",
                          "successors": [
                            {
                              "id": 78,
                              "label": "#78\nchanges = self.read_pr_changes(credentials, input_data.pr_url)\nyield 'changes', changes",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 52,
              "label": "#52\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\npr_url: str = SchemaField(description='URL of the GitHub pull request',\n    placeholder='https://github.com/owner/repo/pull/1')\ninclude_pr_changes: bool = SchemaField(description=\n    'Whether to include the changes made in the pull request', default=False)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 55,
              "label": "#55\ntitle: str = SchemaField(description='Title of the pull request')\nbody: str = SchemaField(description='Body of the pull request')\nauthor: str = SchemaField(description='User who created the pull request')\nchanges: str = SchemaField(description='Changes made in the pull request')\nerror: str = SchemaField(description=\n    'Error message if reading the pull request failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubAssignPRReviewerBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 84,
          "label": "#84",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 92,
              "label": "#92\nsuper().__init__(id='c0d22c5e-e688-43e3-ba43-d5faba7927fd', description=\n    'This block assigns a reviewer to a specified GitHub pull request.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubAssignPRReviewerBlock.Input, output_schema=\n    GithubAssignPRReviewerBlock.Output, test_input={'pr_url':\n    'https://github.com/owner/repo/pull/1', 'reviewer': 'reviewer_username',\n    'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('status',\n    'Reviewer assigned successfully')], test_mock={'assign_reviewer': lambda\n    *args, **kwargs: 'Reviewer assigned successfully'})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "assign_reviewer",
          "type": "CFG",
          "blocks": [
            {
              "id": 95,
              "label": "#95\napi = get_api(credentials)\nreviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\ndata = {'reviewers': [reviewer]}\napi.post(reviewers_url, json=data)\nreturn 'Reviewer assigned successfully'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 99,
              "label": "#99\ntry:",
              "successors": [
                {
                  "id": 100,
                  "label": "#100\nstatus = self.assign_reviewer(credentials, input_data.pr_url, input_data.\n    reviewer)\nyield 'status', status",
                  "successors": []
                },
                {
                  "id": 101,
                  "label": "#101\nyield 'error', str(e)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 86,
              "label": "#86\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\npr_url: str = SchemaField(description='URL of the GitHub pull request',\n    placeholder='https://github.com/owner/repo/pull/1')\nreviewer: str = SchemaField(description=\n    'Username of the reviewer to assign', placeholder=\n    \"Enter the reviewer's username\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 89,
              "label": "#89\nstatus: str = SchemaField(description=\n    'Status of the reviewer assignment operation')\nerror: str = SchemaField(description=\n    'Error message if the reviewer assignment failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubUnassignPRReviewerBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 108,
          "label": "#108",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 116,
              "label": "#116\nsuper().__init__(id='9637945d-c602-4875-899a-9c22f8fd30de', description=\n    'This block unassigns a reviewer from a specified GitHub pull request.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubUnassignPRReviewerBlock.Input, output_schema=\n    GithubUnassignPRReviewerBlock.Output, test_input={'pr_url':\n    'https://github.com/owner/repo/pull/1', 'reviewer': 'reviewer_username',\n    'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('status',\n    'Reviewer unassigned successfully')], test_mock={'unassign_reviewer': \n    lambda *args, **kwargs: 'Reviewer unassigned successfully'})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "unassign_reviewer",
          "type": "CFG",
          "blocks": [
            {
              "id": 119,
              "label": "#119\napi = get_api(credentials)\nreviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\ndata = {'reviewers': [reviewer]}\napi.delete(reviewers_url, json=data)\nreturn 'Reviewer unassigned successfully'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 123,
              "label": "#123\ntry:",
              "successors": [
                {
                  "id": 124,
                  "label": "#124\nstatus = self.unassign_reviewer(credentials, input_data.pr_url, input_data.\n    reviewer)\nyield 'status', status",
                  "successors": []
                },
                {
                  "id": 125,
                  "label": "#125\nyield 'error', str(e)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 110,
              "label": "#110\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\npr_url: str = SchemaField(description='URL of the GitHub pull request',\n    placeholder='https://github.com/owner/repo/pull/1')\nreviewer: str = SchemaField(description=\n    'Username of the reviewer to unassign', placeholder=\n    \"Enter the reviewer's username\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 113,
              "label": "#113\nstatus: str = SchemaField(description=\n    'Status of the reviewer unassignment operation')\nerror: str = SchemaField(description=\n    'Error message if the reviewer unassignment failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubListPRReviewersBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 132,
          "label": "#132",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 143,
              "label": "#143\nsuper().__init__(id='2646956e-96d5-4754-a3df-034017e7ed96', description=\n    'This block lists all reviewers for a specified GitHub pull request.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubListPRReviewersBlock.Input, output_schema=\n    GithubListPRReviewersBlock.Output, test_input={'pr_url':\n    'https://github.com/owner/repo/pull/1', 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('reviewer', {'username': 'reviewer1', 'url':\n    'https://github.com/reviewer1'})], test_mock={'list_reviewers': lambda\n    *args, **kwargs: [{'username': 'reviewer1', 'url':\n    'https://github.com/reviewer1'}]})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "list_reviewers",
          "type": "CFG",
          "blocks": [
            {
              "id": 146,
              "label": "#146\napi = get_api(credentials)\nreviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\nresponse = api.get(reviewers_url)\ndata = response.json()\nreviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [{\n    'username': reviewer['login'], 'url': reviewer['html_url']} for\n    reviewer in data.get('users', [])]\nreturn reviewers",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 150,
              "label": "#150\nreviewers = self.list_reviewers(credentials, input_data.pr_url)\nyield from (('reviewer', reviewer) for reviewer in reviewers)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 134,
              "label": "#134\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\npr_url: str = SchemaField(description='URL of the GitHub pull request',\n    placeholder='https://github.com/owner/repo/pull/1')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 137,
              "label": "#137\nreviewer: ReviewerItem = SchemaField(title='Reviewer', description=\n    'Reviewers with their username and profile URL')\nerror: str = SchemaField(description=\n    'Error message if listing reviewers failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": [
            {
              "name": "ReviewerItem",
              "type": "CFG",
              "blocks": [
                {
                  "id": 139,
                  "label": "#139\nusername: str\nurl: str",
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            }
          ]
        }
      ]
    }
  ]
}