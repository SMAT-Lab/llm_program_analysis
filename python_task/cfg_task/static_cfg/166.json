{
  "name": "166.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport base64\nfrom email.utils import parseaddr\nfrom typing import List\nfrom google.oauth2.credentials import Credentials\nfrom googleapiclient.discovery import build\nfrom pydantic import BaseModel\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom ._auth import GOOGLE_OAUTH_IS_CONFIGURED, TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GoogleCredentials, GoogleCredentialsField, GoogleCredentialsInput",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "Attachment",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nfilename: str\ncontent_type: str\nsize: int\nattachment_id: str",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "Email",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6\nid: str\nsubject: str\nsnippet: str\nfrom_: str\nto: str\ndate: str\nbody: str = ''\nsizeEstimate: int\nattachments: List[Attachment]",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "GmailReadBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\nsuper().__init__(id='25310c70-b89b-43ba-b25c-4dfa7e2a481c', description=\n    'This block reads emails from Gmail.', categories={BlockCategory.\n    COMMUNICATION}, disabled=not GOOGLE_OAUTH_IS_CONFIGURED, input_schema=\n    GmailReadBlock.Input, output_schema=GmailReadBlock.Output, test_input={\n    'query': 'is:unread', 'max_results': 5, 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('email', {'id': '1', 'subject': 'Test Email', 'snippet':\n    'This is a test email', 'from_': 'test@example.com', 'to':\n    'recipient@example.com', 'date': '2024-01-01', 'body':\n    'This is a test email', 'sizeEstimate': 100, 'attachments': []}), (\n    'emails', [{'id': '1', 'subject': 'Test Email', 'snippet':\n    'This is a test email', 'from_': 'test@example.com', 'to':\n    'recipient@example.com', 'date': '2024-01-01', 'body':\n    'This is a test email', 'sizeEstimate': 100, 'attachments': []}])],\n    test_mock={'_read_emails': lambda *args, **kwargs: [{'id': '1',\n    'subject': 'Test Email', 'snippet': 'This is a test email', 'from_':\n    'test@example.com', 'to': 'recipient@example.com', 'date': '2024-01-01',\n    'body': 'This is a test email', 'sizeEstimate': 100, 'attachments': []}\n    ], '_send_email': lambda *args, **kwargs: {'id': '1', 'status': 'sent'}})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 20,
              "label": "#20\nservice = self._build_service(credentials, **kwargs)\nmessages = self._read_emails(service, input_data.query, input_data.max_results)",
              "successors": [
                {
                  "id": 21,
                  "label": "#21\nfor email in messages:",
                  "successors": [
                    {
                      "id": 22,
                      "label": "#22\nyield 'email', email",
                      "successors": []
                    },
                    {
                      "id": 23,
                      "label": "#23\nyield 'emails', messages",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_build_service",
          "type": "CFG",
          "blocks": [
            {
              "id": 28,
              "label": "#28\ncreds = Credentials(token=credentials.access_token.get_secret_value() if\n    credentials.access_token else None, refresh_token=credentials.\n    refresh_token.get_secret_value() if credentials.refresh_token else None,\n    token_uri='https://oauth2.googleapis.com/token', client_id=kwargs.get(\n    'client_id'), client_secret=kwargs.get('client_secret'), scopes=\n    credentials.scopes)\nreturn build('gmail', 'v1', credentials=creds)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_read_emails",
          "type": "CFG",
          "blocks": [
            {
              "id": 32,
              "label": "#32\nresults = service.users().messages().list(userId='me', q=query or '',\n    maxResults=max_results or 10).execute()\nmessages = results.get('messages', [])\nemail_data = []",
              "successors": [
                {
                  "id": 33,
                  "label": "#33\nfor message in messages:",
                  "successors": [
                    {
                      "id": 34,
                      "label": "#34\nmsg = service.users().messages().get(userId='me', id=message['id'], format=\n    'full').execute()\nheaders = {header['name'].lower(): header['value'] for header in msg[\n    'payload']['headers']}\nattachments = self._get_attachments(service, msg)\nemail = Email(id=msg['id'], subject=headers.get('subject', 'No Subject'),\n    snippet=msg['snippet'], from_=parseaddr(headers.get('from', ''))[1], to\n    =parseaddr(headers.get('to', ''))[1], date=headers.get('date', ''),\n    body=self._get_email_body(msg), sizeEstimate=msg['sizeEstimate'],\n    attachments=attachments)\nemail_data.append(email)",
                      "successors": []
                    },
                    {
                      "id": 35,
                      "label": "#35\nreturn email_data",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_get_email_body",
          "type": "CFG",
          "blocks": [
            {
              "id": 39,
              "label": "#39\nif 'parts' in msg['payload']:",
              "successors": [
                {
                  "id": 40,
                  "label": "#40\nfor part in msg['payload']['parts']:",
                  "successors": [
                    {
                      "id": 46,
                      "label": "#46\nif part['mimeType'] == 'text/plain':",
                      "successors": [
                        {
                          "id": 48,
                          "label": "#48\nreturn base64.urlsafe_b64decode(part['body']['data']).decode('utf-8')",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 41,
                      "label": "#41\nreturn 'This email does not contain a text body.'",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 42,
                  "label": "#42\nif msg['payload']['mimeType'] == 'text/plain':",
                  "successors": [
                    {
                      "id": 43,
                      "label": "#43\nreturn base64.urlsafe_b64decode(msg['payload']['body']['data']).decode('utf-8')",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_get_attachments",
          "type": "CFG",
          "blocks": [
            {
              "id": 54,
              "label": "#54\nattachments = []\nif 'parts' in message['payload']:",
              "successors": [
                {
                  "id": 55,
                  "label": "#55\nfor part in message['payload']['parts']:",
                  "successors": [
                    {
                      "id": 57,
                      "label": "#57\nif part['filename']:",
                      "successors": [
                        {
                          "id": 59,
                          "label": "#59\nattachment = Attachment(filename=part['filename'], content_type=part[\n    'mimeType'], size=int(part['body'].get('size', 0)), attachment_id=part[\n    'body']['attachmentId'])\nattachments.append(attachment)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 56,
                      "label": "#56\nreturn attachments",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "download_attachment",
          "type": "CFG",
          "blocks": [
            {
              "id": 64,
              "label": "#64\nattachment = service.users().messages().attachments().get(userId='me',\n    messageId=message_id, id=attachment_id).execute()\nfile_data = base64.urlsafe_b64decode(attachment['data'].encode('UTF-8'))\nreturn file_data",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\ncredentials: GoogleCredentialsInput = GoogleCredentialsField([\n    'https://www.googleapis.com/auth/gmail.readonly'])\nquery: str = SchemaField(description='Search query for reading emails',\n    default='is:unread')\nmax_results: int = SchemaField(description=\n    'Maximum number of emails to retrieve', default=10)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nemail: Email = SchemaField(description='Email data')\nemails: list[Email] = SchemaField(description='List of email data')\nerror: str = SchemaField(description='Error message if any')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GmailSendBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 69,
          "label": "#69",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 77,
              "label": "#77\nsuper().__init__(id='6c27abc2-e51d-499e-a85f-5a0041ba94f0', description=\n    'This block sends an email using Gmail.', categories={BlockCategory.\n    COMMUNICATION}, input_schema=GmailSendBlock.Input, output_schema=\n    GmailSendBlock.Output, disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n    test_input={'to': 'recipient@example.com', 'subject': 'Test Email',\n    'body': 'This is a test email sent from GmailSendBlock.', 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('result', {'id': '1', 'status': 'sent'})], test_mock={'_send_email':\n    lambda *args, **kwargs: {'id': '1', 'status': 'sent'}})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 80,
              "label": "#80\nservice = GmailReadBlock._build_service(credentials, **kwargs)\nsend_result = self._send_email(service, input_data.to, input_data.subject,\n    input_data.body)\nyield 'result', send_result",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_send_email",
          "type": "CFG",
          "blocks": [
            {
              "id": 84,
              "label": "#84\nif not to or not subject or not body:",
              "successors": [
                {
                  "id": 85,
                  "label": "#85\nraise ValueError('To, subject, and body are required for sending an email')",
                  "successors": []
                },
                {
                  "id": 86,
                  "label": "#86\nmessage = self._create_message(to, subject, body)\nsent_message = service.users().messages().send(userId='me', body=message\n    ).execute()\nreturn {'id': sent_message['id'], 'status': 'sent'}",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_create_message",
          "type": "CFG",
          "blocks": [
            {
              "id": 91,
              "label": "#91\nimport base64\nfrom email.mime.text import MIMEText\nmessage = MIMEText(body)\nmessage['to'] = to\nmessage['subject'] = subject\nraw_message = base64.urlsafe_b64encode(message.as_bytes()).decode('utf-8')\nreturn {'raw': raw_message}",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 71,
              "label": "#71\ncredentials: GoogleCredentialsInput = GoogleCredentialsField([\n    'https://www.googleapis.com/auth/gmail.send'])\nto: str = SchemaField(description='Recipient email address')\nsubject: str = SchemaField(description='Email subject')\nbody: str = SchemaField(description='Email body')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 74,
              "label": "#74\nresult: dict = SchemaField(description='Send confirmation')\nerror: str = SchemaField(description='Error message if any')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GmailListLabelsBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 96,
          "label": "#96",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 104,
              "label": "#104\nsuper().__init__(id='3e1c2c1c-c689-4520-b956-1f3bf4e02bb7', description=\n    'This block lists all labels in Gmail.', categories={BlockCategory.\n    COMMUNICATION}, input_schema=GmailListLabelsBlock.Input, output_schema=\n    GmailListLabelsBlock.Output, disabled=not GOOGLE_OAUTH_IS_CONFIGURED,\n    test_input={'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('result', [{'id': 'Label_1', 'name':\n    'Important'}, {'id': 'Label_2', 'name': 'Work'}])], test_mock={\n    '_list_labels': lambda *args, **kwargs: [{'id': 'Label_1', 'name':\n    'Important'}, {'id': 'Label_2', 'name': 'Work'}]})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 107,
              "label": "#107\nservice = GmailReadBlock._build_service(credentials, **kwargs)\nlabels = self._list_labels(service)\nyield 'result', labels",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_list_labels",
          "type": "CFG",
          "blocks": [
            {
              "id": 111,
              "label": "#111\nresults = service.users().labels().list(userId='me').execute()\nlabels = results.get('labels', [])\nreturn [{'id': label['id'], 'name': label['name']} for label in labels]",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 98,
              "label": "#98\ncredentials: GoogleCredentialsInput = GoogleCredentialsField([\n    'https://www.googleapis.com/auth/gmail.labels'])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 101,
              "label": "#101\nresult: list[dict] = SchemaField(description='List of labels')\nerror: str = SchemaField(description='Error message if any')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GmailAddLabelBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 116,
          "label": "#116",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 124,
              "label": "#124\nsuper().__init__(id='f884b2fb-04f4-4265-9658-14f433926ac9', description=\n    'This block adds a label to a Gmail message.', categories={\n    BlockCategory.COMMUNICATION}, input_schema=GmailAddLabelBlock.Input,\n    output_schema=GmailAddLabelBlock.Output, disabled=not\n    GOOGLE_OAUTH_IS_CONFIGURED, test_input={'message_id': '12345',\n    'label_name': 'Important', 'credentials': TEST_CREDENTIALS_INPUT},\n    test_credentials=TEST_CREDENTIALS, test_output=[('result', {'status':\n    'Label added successfully', 'label_id': 'Label_1'})], test_mock={\n    '_add_label': lambda *args, **kwargs: {'status':\n    'Label added successfully', 'label_id': 'Label_1'}})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 127,
              "label": "#127\nservice = GmailReadBlock._build_service(credentials, **kwargs)\nresult = self._add_label(service, input_data.message_id, input_data.label_name)\nyield 'result', result",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_add_label",
          "type": "CFG",
          "blocks": [
            {
              "id": 131,
              "label": "#131\nlabel_id = self._get_or_create_label(service, label_name)\nservice.users().messages().modify(userId='me', id=message_id, body={\n    'addLabelIds': [label_id]}).execute()\nreturn {'status': 'Label added successfully', 'label_id': label_id}",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_get_or_create_label",
          "type": "CFG",
          "blocks": [
            {
              "id": 135,
              "label": "#135\nlabel_id = self._get_label_id(service, label_name)\nif not label_id:",
              "successors": [
                {
                  "id": 136,
                  "label": "#136\nlabel = service.users().labels().create(userId='me', body={'name': label_name}\n    ).execute()\nlabel_id = label['id']",
                  "successors": [
                    {
                      "id": 137,
                      "label": "#137\nreturn label_id",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_get_label_id",
          "type": "CFG",
          "blocks": [
            {
              "id": 141,
              "label": "#141\nresults = service.users().labels().list(userId='me').execute()\nlabels = results.get('labels', [])",
              "successors": [
                {
                  "id": 142,
                  "label": "#142\nfor label in labels:",
                  "successors": [
                    {
                      "id": 143,
                      "label": "#143\nif label['name'] == label_name:",
                      "successors": [
                        {
                          "id": 145,
                          "label": "#145\nreturn label['id']",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 144,
                      "label": "#144\nreturn None",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 118,
              "label": "#118\ncredentials: GoogleCredentialsInput = GoogleCredentialsField([\n    'https://www.googleapis.com/auth/gmail.modify'])\nmessage_id: str = SchemaField(description='Message ID to add label to')\nlabel_name: str = SchemaField(description='Label name to add')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 121,
              "label": "#121\nresult: dict = SchemaField(description='Label addition result')\nerror: str = SchemaField(description='Error message if any')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GmailRemoveLabelBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 152,
          "label": "#152",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 160,
              "label": "#160\nsuper().__init__(id='0afc0526-aba1-4b2b-888e-a22b7c3f359d', description=\n    'This block removes a label from a Gmail message.', categories={\n    BlockCategory.COMMUNICATION}, input_schema=GmailRemoveLabelBlock.Input,\n    output_schema=GmailRemoveLabelBlock.Output, disabled=not\n    GOOGLE_OAUTH_IS_CONFIGURED, test_input={'message_id': '12345',\n    'label_name': 'Important', 'credentials': TEST_CREDENTIALS_INPUT},\n    test_credentials=TEST_CREDENTIALS, test_output=[('result', {'status':\n    'Label removed successfully', 'label_id': 'Label_1'})], test_mock={\n    '_remove_label': lambda *args, **kwargs: {'status':\n    'Label removed successfully', 'label_id': 'Label_1'}})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 163,
              "label": "#163\nservice = GmailReadBlock._build_service(credentials, **kwargs)\nresult = self._remove_label(service, input_data.message_id, input_data.\n    label_name)\nyield 'result', result",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_remove_label",
          "type": "CFG",
          "blocks": [
            {
              "id": 167,
              "label": "#167\nlabel_id = self._get_label_id(service, label_name)\nif label_id:",
              "successors": [
                {
                  "id": 168,
                  "label": "#168\nservice.users().messages().modify(userId='me', id=message_id, body={\n    'removeLabelIds': [label_id]}).execute()\nreturn {'status': 'Label removed successfully', 'label_id': label_id}",
                  "successors": []
                },
                {
                  "id": 170,
                  "label": "#170\nreturn {'status': 'Label not found', 'label_name': label_name}",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "_get_label_id",
          "type": "CFG",
          "blocks": [
            {
              "id": 175,
              "label": "#175\nresults = service.users().labels().list(userId='me').execute()\nlabels = results.get('labels', [])",
              "successors": [
                {
                  "id": 176,
                  "label": "#176\nfor label in labels:",
                  "successors": [
                    {
                      "id": 177,
                      "label": "#177\nif label['name'] == label_name:",
                      "successors": [
                        {
                          "id": 179,
                          "label": "#179\nreturn label['id']",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 178,
                      "label": "#178\nreturn None",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 154,
              "label": "#154\ncredentials: GoogleCredentialsInput = GoogleCredentialsField([\n    'https://www.googleapis.com/auth/gmail.modify'])\nmessage_id: str = SchemaField(description='Message ID to remove label from')\nlabel_name: str = SchemaField(description='Label name to remove')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 157,
              "label": "#157\nresult: dict = SchemaField(description='Label removal result')\nerror: str = SchemaField(description='Error message if any')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}