{
  "name": "73.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport io\nimport logging\nfrom enum import Enum\nimport replicate\nimport replicate.exceptions\nimport requests\nfrom replicate.helpers import FileOutput\nfrom backend.data.graph import Graph\nfrom backend.util.settings import Settings\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "generate_agent_image",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9\n\"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\ntry:",
          "successors": [
            {
              "id": 10,
              "label": "#10\nsettings = Settings()\nif not settings.secrets.replicate_api_key:",
              "successors": [
                {
                  "id": 13,
                  "label": "#13\nraise ValueError('Missing Replicate API key in settings')",
                  "successors": []
                },
                {
                  "id": 14,
                  "label": "#14\nprompt = f\"\"\"Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\n- **Name**: {agent.name}\n- **Description**: {agent.description}\nFocus on showcasing its core functionality with an appealing design.\"\"\"\nclient = replicate.Client(api_token=settings.secrets.replicate_api_key)\ninput_data = {'prompt': prompt, 'width': 1024, 'height': 768,\n    'aspect_ratio': '4:3', 'output_format': 'jpg', 'output_quality': 90,\n    'num_inference_steps': 30, 'guidance': 3.5, 'negative_prompt':\n    'blurry, low quality, distorted, deformed', 'disable_safety_checker': True}\ntry:",
                  "successors": [
                    {
                      "id": 16,
                      "label": "#16\noutput = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\nif isinstance(output, list) and output:",
                      "successors": [
                        {
                          "id": 19,
                          "label": "#19\nif isinstance(output[0], FileOutput):",
                          "successors": [
                            {
                              "id": 29,
                              "label": "#29\nimage_bytes = output[0].read()",
                              "successors": [
                                {
                                  "id": 20,
                                  "label": "#20\nreturn io.BytesIO(image_bytes)",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 31,
                              "label": "#31\nresult_url = output[0]\nresponse = requests.get(result_url)\nresponse.raise_for_status()\nimage_bytes = response.content",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 21,
                          "label": "#21\nif isinstance(output, FileOutput):",
                          "successors": [
                            {
                              "id": 22,
                              "label": "#22\nimage_bytes = output.read()",
                              "successors": []
                            },
                            {
                              "id": 24,
                              "label": "#24\nif isinstance(output, str):",
                              "successors": [
                                {
                                  "id": 25,
                                  "label": "#25\nresponse = requests.get(output)\nresponse.raise_for_status()\nimage_bytes = response.content",
                                  "successors": []
                                },
                                {
                                  "id": 27,
                                  "label": "#27\nraise RuntimeError('Unexpected output format from the model.')",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 17,
                      "label": "#17\nif e.status == 401:",
                      "successors": [
                        {
                          "id": 33,
                          "label": "#33\nraise RuntimeError('Invalid Replicate API token') from e",
                          "successors": []
                        },
                        {
                          "id": 34,
                          "label": "#34\nraise RuntimeError(f'Replicate API error: {str(e)}') from e",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 11,
              "label": "#11\nlogger.exception('Failed to generate agent image')\nraise RuntimeError(f'Image generation failed: {str(e)}')",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "ImageSize",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nLANDSCAPE = '1024x768'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ImageStyle",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6\nDIGITAL_ART = 'digital art'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ]
}