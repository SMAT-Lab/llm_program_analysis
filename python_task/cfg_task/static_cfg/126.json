{
  "name": "126.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 15,
          "label": "#15\nimport doctest\ndoctest.testmod()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "find_previous_power_of_two",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Find the largest power of two that is less than or equal to a given integer.\n    https://stackoverflow.com/questions/1322510\n\n    >>> [find_previous_power_of_two(i) for i in range(18)]\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\n    >>> find_previous_power_of_two(-5)\n    Traceback (most recent call last):\n    ValueError: Input must be a non-negative integer\n    >>> find_previous_power_of_two(10.5)\n    Traceback (most recent call last):\n    ValueError: Input must be a non-negative integer\n    \"\"\"\nif not isinstance(number, int) or number < 0:",
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise ValueError('Input must be a non-negative integer')",
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nif number == 0:",
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nreturn 0",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "#8\npower = 1",
                  "successors": [
                    {
                      "id": 10,
                      "label": "#10\nwhile power <= number:",
                      "successors": [
                        {
                          "id": 11,
                          "label": "#11\npower <<= 1",
                          "successors": []
                        },
                        {
                          "id": 12,
                          "label": "#12\nreturn power >> 1 if number > 1 else 1",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}