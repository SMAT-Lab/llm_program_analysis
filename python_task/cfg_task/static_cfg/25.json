{
  "name": "25.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nimport time\nfrom enum import Enum\nfrom typing import Literal\nimport replicate\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nlogger = logging.getLogger(__name__)\nTEST_CREDENTIALS = APIKeyCredentials(id=\n    '01234567-89ab-cdef-0123-456789abcdef', provider='replicate', api_key=\n    SecretStr('mock-replicate-api-key'), title='Mock Replicate API key',\n    expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id':\n    TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title':\n    TEST_CREDENTIALS.type}",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "MusicGenModelVersion",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nSTEREO_LARGE = 'stereo-large'\nMELODY_LARGE = 'melody-large'\nLARGE = 'large'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AudioFormat",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6\nWAV = 'wav'\nMP3 = 'mp3'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "NormalizationStrategy",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9\nLOUDNESS = 'loudness'\nCLIP = 'clip'\nPEAK = 'peak'\nRMS = 'rms'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AIMusicGeneratorBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 12,
          "label": "#12",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 20,
              "label": "#20\nsuper().__init__(id='44f6c8ad-d75c-4ae1-8209-aad1c0326928', description=\n    \"This block generates music using Meta's MusicGen model on Replicate.\",\n    categories={BlockCategory.AI}, input_schema=AIMusicGeneratorBlock.Input,\n    output_schema=AIMusicGeneratorBlock.Output, test_input={'credentials':\n    TEST_CREDENTIALS_INPUT, 'prompt':\n    'An upbeat electronic dance track with heavy bass',\n    'music_gen_model_version': MusicGenModelVersion.STEREO_LARGE,\n    'duration': 8, 'temperature': 1.0, 'top_k': 250, 'top_p': 0.0,\n    'classifier_free_guidance': 3, 'output_format': AudioFormat.WAV,\n    'normalization_strategy': NormalizationStrategy.LOUDNESS}, test_output=\n    [('result', 'https://replicate.com/output/generated-audio-url.wav')],\n    test_mock={'run_model': lambda api_key, music_gen_model_version, prompt,\n    duration, temperature, top_k, top_p, classifier_free_guidance,\n    output_format, normalization_strategy:\n    'https://replicate.com/output/generated-audio-url.wav'},\n    test_credentials=TEST_CREDENTIALS)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 23,
              "label": "#23\nmax_retries = 3\nretry_delay = 5\nlast_error = None",
              "successors": [
                {
                  "id": 24,
                  "label": "#24\nfor attempt in range(max_retries):",
                  "successors": [
                    {
                      "id": 25,
                      "label": "#25\ntry:",
                      "successors": [
                        {
                          "id": 27,
                          "label": "#27\nlogger.debug(f'[AIMusicGeneratorBlock] - Running model (attempt {attempt + 1})'\n    )\nresult = self.run_model(api_key=credentials.api_key,\n    music_gen_model_version=input_data.music_gen_model_version, prompt=\n    input_data.prompt, duration=input_data.duration, temperature=input_data\n    .temperature, top_k=input_data.top_k, top_p=input_data.top_p,\n    classifier_free_guidance=input_data.classifier_free_guidance,\n    output_format=input_data.output_format, normalization_strategy=\n    input_data.normalization_strategy)\nif result and result != 'No output received':",
                          "successors": [
                            {
                              "id": 30,
                              "label": "#30\nyield 'result', result",
                              "successors": [
                                {
                                  "id": 34,
                                  "label": "#34\nreturn",
                                  "successors": []
                                }
                              ]
                            },
                            {
                              "id": 32,
                              "label": "#32\nlast_error = 'Model returned empty or invalid response'\nraise ValueError(last_error)",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 28,
                          "label": "#28\nlast_error = f'Unexpected error: {str(e)}'\nlogger.error(f'[AIMusicGeneratorBlock] - Error: {last_error}')\nif attempt < max_retries - 1:",
                          "successors": [
                            {
                              "id": 36,
                              "label": "#36\ntime.sleep(retry_delay)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 26,
                      "label": "#26\nyield 'error', f'Failed after {max_retries} attempts. Last error: {last_error}'",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run_model",
          "type": "CFG",
          "blocks": [
            {
              "id": 41,
              "label": "#41\nclient = replicate.Client(api_token=api_key.get_secret_value())\noutput = client.run(\n    'meta/musicgen:671ac645ce5e552cc63a54a2bbff63fcf798043055d2dac5fc9e36a837eedcfb'\n    , input={'prompt': prompt, 'music_gen_model_version':\n    music_gen_model_version, 'duration': duration, 'temperature':\n    temperature, 'top_k': top_k, 'top_p': top_p, 'classifier_free_guidance':\n    classifier_free_guidance, 'output_format': output_format,\n    'normalization_strategy': normalization_strategy})\nif isinstance(output, list) and len(output) > 0:",
              "successors": [
                {
                  "id": 42,
                  "label": "#42\nresult_url = output[0]",
                  "successors": [
                    {
                      "id": 43,
                      "label": "#43\nreturn result_url",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 44,
                  "label": "#44\nif isinstance(output, str):",
                  "successors": [
                    {
                      "id": 45,
                      "label": "#45\nresult_url = output",
                      "successors": []
                    },
                    {
                      "id": 47,
                      "label": "#47\nresult_url = 'No output received'",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\ncredentials: CredentialsMetaInput[Literal[ProviderName.REPLICATE], Literal[\n    'api_key']] = CredentialsField(description=\n    'The Replicate integration can be used with any API key with sufficient permissions for the blocks it is used on.'\n    )\nprompt: str = SchemaField(description=\n    'A description of the music you want to generate', placeholder=\n    \"e.g., 'An upbeat electronic dance track with heavy bass'\", title='Prompt')\nmusic_gen_model_version: MusicGenModelVersion = SchemaField(description=\n    'Model to use for generation', default=MusicGenModelVersion.\n    STEREO_LARGE, title='Model Version')\nduration: int = SchemaField(description=\n    'Duration of the generated audio in seconds', default=8, title='Duration')\ntemperature: float = SchemaField(description=\n    \"Controls the 'conservativeness' of the sampling process. Higher temperature means more diversity\"\n    , default=1.0, title='Temperature')\ntop_k: int = SchemaField(description=\n    'Reduces sampling to the k most likely tokens', default=250, title='Top K')\ntop_p: float = SchemaField(description=\n    'Reduces sampling to tokens with cumulative probability of p. When set to 0 (default), top_k sampling is used'\n    , default=0.0, title='Top P')\nclassifier_free_guidance: int = SchemaField(description=\n    'Increases the influence of inputs on the output. Higher values produce lower-variance outputs that adhere more closely to inputs'\n    , default=3, title='Classifier Free Guidance')\noutput_format: AudioFormat = SchemaField(description=\n    'Output format for generated audio', default=AudioFormat.WAV, title=\n    'Output Format')\nnormalization_strategy: NormalizationStrategy = SchemaField(description=\n    'Strategy for normalizing audio', default=NormalizationStrategy.\n    LOUDNESS, title='Normalization Strategy')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\nresult: str = SchemaField(description='URL of the generated audio file')\nerror: str = SchemaField(description='Error message if the model run failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}