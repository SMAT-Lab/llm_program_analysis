{
  "name": "101.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom typing import Literal\nfrom urllib.parse import quote\nfrom pydantic import SecretStr\nfrom backend.blocks.helpers.http import GetRequest\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nTEST_CREDENTIALS = APIKeyCredentials(id=\n    '01234567-89ab-cdef-0123-456789abcdef', provider='openweathermap',\n    api_key=SecretStr('mock-openweathermap-api-key'), title=\n    'Mock OpenWeatherMap API key', expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id':\n    TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title':\n    TEST_CREDENTIALS.type}",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "GetWikipediaSummaryBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='f5b0f5d0-1862-4d61-94be-3ad0fa772760', description=\n    'This block fetches the summary of a given topic from Wikipedia.',\n    categories={BlockCategory.SEARCH}, input_schema=\n    GetWikipediaSummaryBlock.Input, output_schema=GetWikipediaSummaryBlock.\n    Output, test_input={'topic': 'Artificial Intelligence'}, test_output=(\n    'summary', 'summary content'), test_mock={'get_request': lambda url,\n    json: {'extract': 'summary content'}})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\ntopic = input_data.topic\nurl = f'https://en.wikipedia.org/api/rest_v1/page/summary/{topic}'\nresponse = self.get_request(url, json=True)\nif 'extract' not in response:",
              "successors": [
                {
                  "id": 15,
                  "label": "#15\nraise RuntimeError(f'Unable to parse Wikipedia response: {response}')",
                  "successors": []
                },
                {
                  "id": 16,
                  "label": "#16\nyield 'summary', response['extract']",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ntopic: str = SchemaField(description='The topic to fetch the summary for')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nsummary: str = SchemaField(description='The summary of the given topic')\nerror: str = SchemaField(description=\n    'Error message if the summary cannot be retrieved')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GetWeatherInformationBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 22,
          "label": "#22",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 30,
              "label": "#30\nsuper().__init__(id='f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f', input_schema=\n    GetWeatherInformationBlock.Input, output_schema=\n    GetWeatherInformationBlock.Output, description=\n    'Retrieves weather information for a specified location using OpenWeatherMap API.'\n    , test_input={'location': 'New York', 'use_celsius': True,\n    'credentials': TEST_CREDENTIALS_INPUT}, test_output=[('temperature',\n    '21.66'), ('humidity', '32'), ('condition', 'overcast clouds')],\n    test_mock={'get_request': lambda url, json: {'main': {'temp': 21.66,\n    'humidity': 32}, 'weather': [{'description': 'overcast clouds'}]}},\n    test_credentials=TEST_CREDENTIALS)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 33,
              "label": "#33\nunits = 'metric' if input_data.use_celsius else 'imperial'\napi_key = credentials.api_key\nlocation = input_data.location\nurl = (\n    f'http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}'\n    )\nweather_data = self.get_request(url, json=True)\nif 'main' in weather_data and 'weather' in weather_data:",
              "successors": [
                {
                  "id": 34,
                  "label": "#34\nyield 'temperature', str(weather_data['main']['temp'])",
                  "successors": [
                    {
                      "id": 38,
                      "label": "#38\nyield 'humidity', str(weather_data['main']['humidity'])",
                      "successors": [
                        {
                          "id": 39,
                          "label": "#39\nyield 'condition', weather_data['weather'][0]['description']",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 36,
                  "label": "#36\nraise RuntimeError(f'Expected keys not found in response: {weather_data}')",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 24,
              "label": "#24\nlocation: str = SchemaField(description=\n    'Location to get weather information for')\ncredentials: CredentialsMetaInput[Literal[ProviderName.OPENWEATHERMAP],\n    Literal['api_key']] = CredentialsField(description=\n    'The OpenWeatherMap integration can be used with any API key with sufficient permissions for the blocks it is used on.'\n    )\nuse_celsius: bool = SchemaField(default=True, description=\n    'Whether to use Celsius or Fahrenheit for temperature')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 27,
              "label": "#27\ntemperature: str = SchemaField(description=\n    'Temperature in the specified location')\nhumidity: str = SchemaField(description='Humidity in the specified location')\ncondition: str = SchemaField(description=\n    'Weather condition in the specified location')\nerror: str = SchemaField(description=\n    'Error message if the weather information cannot be retrieved')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}