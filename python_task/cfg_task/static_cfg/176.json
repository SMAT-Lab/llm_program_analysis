{
  "name": "176.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport asyncio\nimport logging\nfrom contextlib import asynccontextmanager\nimport uvicorn\nfrom autogpt_libs.auth import parse_jwt_token\nfrom fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect\nfrom starlette.middleware.cors import CORSMiddleware\nfrom backend.data import redis\nfrom backend.data.execution import AsyncRedisExecutionEventBus\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import ExecutionSubscription, Methods, WsMessage\nfrom backend.util.service import AppProcess\nfrom backend.util.settings import AppEnvironment, Config, Settings\nlogger = logging.getLogger(__name__)\nsettings = Settings()\ndocs_url = '/docs' if settings.config.app_env == AppEnvironment.LOCAL else None\napp = FastAPI(lifespan=lifespan, docs_url=docs_url)\n_connection_manager = None",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "lifespan",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nmanager = get_connection_manager()\nfut = asyncio.create_task(event_broadcaster(manager))\nfut.add_done_callback(lambda _: logger.info('Event broadcaster stopped'))\nyield",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_connection_manager",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\nglobal _connection_manager\nif _connection_manager is None:",
          "successors": [
            {
              "id": 8,
              "label": "#8\n_connection_manager = ConnectionManager()",
              "successors": [
                {
                  "id": 9,
                  "label": "#9\nreturn _connection_manager",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "event_broadcaster",
      "type": "CFG",
      "blocks": [
        {
          "id": 13,
          "label": "#13\ntry:",
          "successors": [
            {
              "id": 14,
              "label": "#14\nredis.connect()\nevent_queue = AsyncRedisExecutionEventBus()",
              "successors": [
                {
                  "id": 17,
                  "label": "#17\nasync for event in event_queue.listen():\n    await manager.send_execution_result(event)",
                  "successors": [
                    {
                      "id": 18,
                      "label": "#18\nawait manager.send_execution_result(event)",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 15,
              "label": "#15\nlogger.exception(f'Event broadcaster error: {e}')\nraise",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "authenticate_websocket",
      "type": "CFG",
      "blocks": [
        {
          "id": 24,
          "label": "#24\nif not settings.config.enable_auth:",
          "successors": [
            {
              "id": 25,
              "label": "#25\nreturn DEFAULT_USER_ID",
              "successors": []
            },
            {
              "id": 26,
              "label": "#26\ntoken = websocket.query_params.get('token')\nif not token:",
              "successors": [
                {
                  "id": 28,
                  "label": "#28\nawait websocket.close(code=4001, reason='Missing authentication token')",
                  "successors": [
                    {
                      "id": 30,
                      "label": "#30\nreturn ''",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 29,
                  "label": "#29\ntry:",
                  "successors": [
                    {
                      "id": 32,
                      "label": "#32\npayload = parse_jwt_token(token)\nuser_id = payload.get('sub')\nif not user_id:",
                      "successors": [
                        {
                          "id": 35,
                          "label": "#35\nawait websocket.close(code=4002, reason='Invalid token')",
                          "successors": [
                            {
                              "id": 37,
                              "label": "#37\nreturn ''",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 36,
                          "label": "#36\nreturn user_id",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 33,
                      "label": "#33\nawait websocket.close(code=4003, reason='Invalid token')",
                      "successors": [
                        {
                          "id": 40,
                          "label": "#40\nreturn ''",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "handle_subscribe",
      "type": "CFG",
      "blocks": [
        {
          "id": 44,
          "label": "#44\nif not message.data:",
          "successors": [
            {
              "id": 45,
              "label": "#45\nawait websocket.send_text(WsMessage(method=Methods.ERROR, success=False,\n    error='Subscription data missing').model_dump_json())",
              "successors": []
            },
            {
              "id": 47,
              "label": "#47\nex_sub = ExecutionSubscription.model_validate(message.data)\nawait manager.subscribe(ex_sub.graph_id, websocket)",
              "successors": [
                {
                  "id": 48,
                  "label": "#48\nlogger.debug(f'New execution subscription for graph {ex_sub.graph_id}')\nawait websocket.send_text(WsMessage(method=Methods.SUBSCRIBE, success=True,\n    channel=ex_sub.graph_id).model_dump_json())",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "handle_unsubscribe",
      "type": "CFG",
      "blocks": [
        {
          "id": 53,
          "label": "#53\nif not message.data:",
          "successors": [
            {
              "id": 54,
              "label": "#54\nawait websocket.send_text(WsMessage(method=Methods.ERROR, success=False,\n    error='Subscription data missing').model_dump_json())",
              "successors": []
            },
            {
              "id": 56,
              "label": "#56\nex_sub = ExecutionSubscription.model_validate(message.data)\nawait manager.unsubscribe(ex_sub.graph_id, websocket)",
              "successors": [
                {
                  "id": 57,
                  "label": "#57\nlogger.debug(f'Removed execution subscription for graph {ex_sub.graph_id}')\nawait websocket.send_text(WsMessage(method=Methods.UNSUBSCRIBE, success=\n    True, channel=ex_sub.graph_id).model_dump_json())",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "health",
      "type": "CFG",
      "blocks": [
        {
          "id": 62,
          "label": "#62\nreturn {'status': 'healthy'}",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "websocket_router",
      "type": "CFG",
      "blocks": [
        {
          "id": 66,
          "label": "#66\nuser_id = await authenticate_websocket(websocket)",
          "successors": [
            {
              "id": 67,
              "label": "#67\nif not user_id:",
              "successors": [
                {
                  "id": 68,
                  "label": "#68\nreturn",
                  "successors": []
                },
                {
                  "id": 69,
                  "label": "#69\nawait manager.connect(websocket)",
                  "successors": [
                    {
                      "id": 71,
                      "label": "#71\ntry:",
                      "successors": [
                        {
                          "id": 72,
                          "label": "#72\nwhile True:",
                          "successors": [
                            {
                              "id": 75,
                              "label": "#75\ndata = await websocket.receive_text()",
                              "successors": [
                                {
                                  "id": 77,
                                  "label": "#77\nmessage = WsMessage.model_validate_json(data)\nif message.method == Methods.HEARTBEAT:",
                                  "successors": [
                                    {
                                      "id": 78,
                                      "label": "#78\nawait websocket.send_json({'method': Methods.HEARTBEAT.value, 'data':\n    'pong', 'success': True})",
                                      "successors": []
                                    },
                                    {
                                      "id": 79,
                                      "label": "#79\nif message.method == Methods.SUBSCRIBE:",
                                      "successors": [
                                        {
                                          "id": 81,
                                          "label": "#81\nawait handle_subscribe(websocket, manager, message)",
                                          "successors": []
                                        },
                                        {
                                          "id": 83,
                                          "label": "#83\nif message.method == Methods.UNSUBSCRIBE:",
                                          "successors": [
                                            {
                                              "id": 84,
                                              "label": "#84\nawait handle_unsubscribe(websocket, manager, message)",
                                              "successors": []
                                            },
                                            {
                                              "id": 86,
                                              "label": "#86\nif message.method == Methods.ERROR:",
                                              "successors": [
                                                {
                                                  "id": 87,
                                                  "label": "#87\nlogger.error(f'WebSocket Error message received: {message.data}')",
                                                  "successors": []
                                                },
                                                {
                                                  "id": 89,
                                                  "label": "#89\nlogger.warning(\n    f'Unknown WebSocket message type {message.method} received: {message.data}'\n    )\nawait websocket.send_text(WsMessage(method=Methods.ERROR, success=False,\n    error='Message type is not processed by the server').model_dump_json())",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 73,
                          "label": "#73\nmanager.disconnect(websocket)\nlogger.debug('WebSocket client disconnected')",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "WebsocketServer",
      "type": "CFG",
      "blocks": [
        {
          "id": 95,
          "label": "#95",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 97,
              "label": "#97\nlogger.info(f'CORS allow origins: {settings.config.backend_cors_allow_origins}'\n    )\nserver_app = CORSMiddleware(app=app, allow_origins=settings.config.\n    backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'],\n    allow_headers=['*'])\nuvicorn.run(server_app, host=Config().websocket_server_host, port=Config().\n    websocket_server_port)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}