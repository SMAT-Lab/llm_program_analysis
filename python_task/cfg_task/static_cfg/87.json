{
  "name": "87.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom prisma.models import User\nfrom backend.blocks.llm import AIStructuredResponseGeneratorBlock\nfrom backend.blocks.reddit import GetRedditPostsBlock, PostRedditCommentBlock\nfrom backend.blocks.text import FillTextTemplateBlock, MatchTextPatternBlock\nfrom backend.data.graph import Graph, Link, Node, create_graph\nfrom backend.data.user import get_or_create_user\nfrom backend.util.test import SpinTestServer, wait_execution\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 20,
          "label": "#20\nimport asyncio\nasyncio.run(reddit_marketing_agent())",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "create_test_graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n                    subreddit\n                       ||\n                        v\n        GetRedditPostsBlock (post_id, post_title, post_body)\n                  //     ||     \\\\\n              post_id  post_title  post_body\n                 ||       ||        ||\n                 v        v         v\n              FillTextTemplateBlock (format)\n                      ||\n                      v\n            AIStructuredResponseBlock / TextRelevancy\n                 ||       ||       ||\n            post_id  is_relevant  marketing_text\n               ||       ||        ||\n               v        v         v\n                 MatchTextPatternBlock\n                 ||       ||\n              positive  negative\n                ||\n                v\n        PostRedditCommentBlock\n    \"\"\"\nreddit_get_post_input = {'post_limit': 3}\ntext_formatter_input = {'format':\n    \"\"\"\nBased on the following post, write your marketing comment:\n* Post ID: {id}\n* Post Subreddit: {subreddit}\n* Post Title: {title}\n* Post Body: {body}\"\"\"\n    .strip()}\nllm_call_input = {'sys_prompt':\n    \"\"\"\nYou are an expert at marketing.\nYou have been tasked with picking Reddit posts that are relevant to your product.\nThe product you are marketing is: Auto-GPT an autonomous AI agent utilizing GPT model.\nYou reply the post that you find it relevant to be replied with marketing text.\nMake sure to only comment on a relevant post.\n\"\"\"\n    , 'expected_format': {'post_id': 'str, the reddit post id',\n    'is_relevant': 'bool, whether the post is relevant for marketing',\n    'marketing_text': 'str, marketing text, this is empty on irrelevant posts'}\n    }\ntext_matcher_input = {'match': 'true', 'case_sensitive': False}\nreddit_comment_input = {}\nreddit_get_post_node = Node(block_id=GetRedditPostsBlock().id,\n    input_default=reddit_get_post_input)\ntext_formatter_node = Node(block_id=FillTextTemplateBlock().id,\n    input_default=text_formatter_input)\nllm_call_node = Node(block_id=AIStructuredResponseGeneratorBlock().id,\n    input_default=llm_call_input)\ntext_matcher_node = Node(block_id=MatchTextPatternBlock().id, input_default\n    =text_matcher_input)\nreddit_comment_node = Node(block_id=PostRedditCommentBlock().id,\n    input_default=reddit_comment_input)\nnodes = [reddit_get_post_node, text_formatter_node, llm_call_node,\n    text_matcher_node, reddit_comment_node]\nlinks = [Link(source_id=reddit_get_post_node.id, sink_id=\n    text_formatter_node.id, source_name='post', sink_name='values'), Link(\n    source_id=text_formatter_node.id, sink_id=llm_call_node.id, source_name\n    ='output', sink_name='prompt'), Link(source_id=llm_call_node.id,\n    sink_id=text_matcher_node.id, source_name='response', sink_name='data'),\n    Link(source_id=llm_call_node.id, sink_id=text_matcher_node.id,\n    source_name='response_#_is_relevant', sink_name='text'), Link(source_id\n    =text_matcher_node.id, sink_id=reddit_comment_node.id, source_name=\n    'positive_#_post_id', sink_name='data_#_post_id'), Link(source_id=\n    text_matcher_node.id, sink_id=reddit_comment_node.id, source_name=\n    'positive_#_marketing_text', sink_name='data_#_comment')]\ntest_graph = Graph(name='RedditMarketingAgent', description=\n    'Reddit marketing agent', nodes=nodes, links=links)\nreturn test_graph",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "create_test_user",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\ntest_user_data = {'sub': 'ef3b97d7-1161-4eb4-92b2-10c24fb154c1', 'email':\n    'testuser@example.com', 'name': 'Test User'}\nuser = await get_or_create_user(test_user_data)",
          "successors": [
            {
              "id": 8,
              "label": "#8\nreturn user",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "reddit_marketing_agent",
      "type": "CFG",
      "blocks": [
        {
          "id": 12,
          "label": "#12\nasync with SpinTestServer() as server:\n    test_user = await create_test_user()\n    test_graph = await create_graph(create_test_graph(), user_id=test_user.id)\n    input_data = {'subreddit': 'AutoGPT'}\n    response = await server.agent_server.test_execute_graph(test_graph.id,\n        input_data, test_user.id)\n    print(response)\n    result = await wait_execution(test_user.id, test_graph.id, response[\n        'id'], 120)\n    print(result)",
          "successors": [
            {
              "id": 13,
              "label": "#13\ntest_user = await create_test_user()",
              "successors": [
                {
                  "id": 15,
                  "label": "#15\ntest_graph = await create_graph(create_test_graph(), user_id=test_user.id)",
                  "successors": [
                    {
                      "id": 16,
                      "label": "#16\ninput_data = {'subreddit': 'AutoGPT'}\nresponse = await server.agent_server.test_execute_graph(test_graph.id,\n    input_data, test_user.id)",
                      "successors": [
                        {
                          "id": 17,
                          "label": "#17\nprint(response)\nresult = await wait_execution(test_user.id, test_graph.id, response['id'], 120)",
                          "successors": [
                            {
                              "id": 18,
                              "label": "#18\nprint(result)",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}