{
  "name": "56.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\n\nThe nqueens problem is of placing N queens on a N * N\nchess board such that no queen can attack any other queens placed\non that chess board.\nThis means that one queen cannot have any other queen on its horizontal, vertical and\ndiagonal lines.\n\n\"\"\"\nfrom __future__ import annotations\nsolution = []\nn = 8\nboard = [[(0) for i in range(n)] for j in range(n)]\nsolve(board, 0)\nprint('The total number of solutions are:', len(solution))",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "is_safe",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters:\n    board (2D matrix): The chessboard\n    row, column: Coordinates of the cell on the board\n\n    Returns:\n    Boolean Value\n\n    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    True\n    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    False\n    \"\"\"\nn = len(board)\nreturn all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(\n    column, n))) and all(board[i][j] != 1 for i, j in zip(range(row, -1, -1\n    ), range(column, -1, -1))) and all(board[i][j] != 1 for i, j in zip(\n    range(row, n), range(column, n))) and all(board[i][j] != 1 for i, j in\n    zip(range(row, n), range(column, -1, -1)))",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "solve",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\n\"\"\"\n    This function creates a state space tree and calls the safe function until it\n    receives a False Boolean and terminates that branch and backtracks to the next\n    possible solution branch.\n    \"\"\"\nif row >= len(board):",
          "successors": [
            {
              "id": 8,
              "label": "#8\n\"\"\"\n        If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n        \"\"\"\nsolution.append(board)\nprintboard(board)\nprint()\nreturn True",
              "successors": []
            },
            {
              "id": 9,
              "label": "#9\nfor i in range(len(board)):",
              "successors": [
                {
                  "id": 11,
                  "label": "#11\n\"\"\"\n        For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.\n        \"\"\"\nif is_safe(board, row, i):",
                  "successors": [
                    {
                      "id": 13,
                      "label": "#13\nboard[row][i] = 1\nsolve(board, row + 1)\nboard[row][i] = 0",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 12,
                  "label": "#12\nreturn False",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "printboard",
      "type": "CFG",
      "blocks": [
        {
          "id": 18,
          "label": "#18\n\"\"\"\n    Prints the boards that have a successful combination.\n    \"\"\"",
          "successors": [
            {
              "id": 19,
              "label": "#19\nfor i in range(len(board)):",
              "successors": [
                {
                  "id": 20,
                  "label": "#20\nfor j in range(len(board)):",
                  "successors": [
                    {
                      "id": 22,
                      "label": "#22\nif board[i][j] == 1:",
                      "successors": [
                        {
                          "id": 24,
                          "label": "#24\nprint('Q', end=' ')",
                          "successors": []
                        },
                        {
                          "id": 26,
                          "label": "#26\nprint('.', end=' ')",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 23,
                      "label": "#23\nprint()",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}