{
  "name": "1.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom enum import Enum\nfrom typing import Any, Dict, Literal, Optional\nfrom pydantic import SecretStr\nfrom requests.exceptions import RequestException\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\nTEST_CREDENTIALS = APIKeyCredentials(id=\n    '01234567-89ab-cdef-0123-456789abcdef', provider='ideogram', api_key=\n    SecretStr('mock-ideogram-api-key'), title='Mock Ideogram API key',\n    expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id':\n    TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title':\n    TEST_CREDENTIALS.type}",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "IdeogramModelName",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nV2 = 'V_2'\nV1 = 'V_1'\nV1_TURBO = 'V_1_TURBO'\nV2_TURBO = 'V_2_TURBO'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "MagicPromptOption",
      "type": "CFG",
      "blocks": [
        {
          "id": 6,
          "label": "#6\nAUTO = 'AUTO'\nON = 'ON'\nOFF = 'OFF'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "StyleType",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9\nAUTO = 'AUTO'\nGENERAL = 'GENERAL'\nREALISTIC = 'REALISTIC'\nDESIGN = 'DESIGN'\nRENDER_3D = 'RENDER_3D'\nANIME = 'ANIME'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "ColorPalettePreset",
      "type": "CFG",
      "blocks": [
        {
          "id": 12,
          "label": "#12\nNONE = 'NONE'\nEMBER = 'EMBER'\nFRESH = 'FRESH'\nJUNGLE = 'JUNGLE'\nMAGIC = 'MAGIC'\nMELON = 'MELON'\nMOSAIC = 'MOSAIC'\nPASTEL = 'PASTEL'\nULTRAMARINE = 'ULTRAMARINE'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AspectRatio",
      "type": "CFG",
      "blocks": [
        {
          "id": 15,
          "label": "#15\nASPECT_10_16 = 'ASPECT_10_16'\nASPECT_16_10 = 'ASPECT_16_10'\nASPECT_9_16 = 'ASPECT_9_16'\nASPECT_16_9 = 'ASPECT_16_9'\nASPECT_3_2 = 'ASPECT_3_2'\nASPECT_2_3 = 'ASPECT_2_3'\nASPECT_4_3 = 'ASPECT_4_3'\nASPECT_3_4 = 'ASPECT_3_4'\nASPECT_1_1 = 'ASPECT_1_1'\nASPECT_1_3 = 'ASPECT_1_3'\nASPECT_3_1 = 'ASPECT_3_1'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "UpscaleOption",
      "type": "CFG",
      "blocks": [
        {
          "id": 18,
          "label": "#18\nAI_UPSCALE = 'AI Upscale'\nNO_UPSCALE = 'No Upscale'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "IdeogramModelBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 21,
          "label": "#21",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 29,
              "label": "#29\nsuper().__init__(id='6ab085e2-20b3-4055-bc3e-08036e01eca6', description=\n    'This block runs Ideogram models with both simple and advanced settings.',\n    categories={BlockCategory.AI}, input_schema=IdeogramModelBlock.Input,\n    output_schema=IdeogramModelBlock.Output, test_input={\n    'ideogram_model_name': IdeogramModelName.V2, 'prompt':\n    'A futuristic cityscape at sunset', 'aspect_ratio': AspectRatio.\n    ASPECT_1_1, 'upscale': UpscaleOption.NO_UPSCALE, 'magic_prompt_option':\n    MagicPromptOption.AUTO, 'seed': None, 'style_type': StyleType.AUTO,\n    'negative_prompt': None, 'color_palette_name': ColorPalettePreset.NONE,\n    'credentials': TEST_CREDENTIALS_INPUT}, test_output=[('result',\n    'https://ideogram.ai/api/images/test-generated-image-url.png')],\n    test_mock={'run_model': lambda api_key, model_name, prompt, seed,\n    aspect_ratio, magic_prompt_option, style_type, negative_prompt,\n    color_palette_name:\n    'https://ideogram.ai/api/images/test-generated-image-url.png',\n    'upscale_image': lambda api_key, image_url:\n    'https://ideogram.ai/api/images/test-upscaled-image-url.png'},\n    test_credentials=TEST_CREDENTIALS)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 32,
              "label": "#32\nseed = input_data.seed\nresult = self.run_model(api_key=credentials.api_key, model_name=input_data.\n    ideogram_model_name.value, prompt=input_data.prompt, seed=seed,\n    aspect_ratio=input_data.aspect_ratio.value, magic_prompt_option=\n    input_data.magic_prompt_option.value, style_type=input_data.style_type.\n    value, negative_prompt=input_data.negative_prompt, color_palette_name=\n    input_data.color_palette_name.value)\nif input_data.upscale == UpscaleOption.AI_UPSCALE:",
              "successors": [
                {
                  "id": 33,
                  "label": "#33\nresult = self.upscale_image(api_key=credentials.api_key, image_url=result)",
                  "successors": [
                    {
                      "id": 34,
                      "label": "#34\nyield 'result', result",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run_model",
          "type": "CFG",
          "blocks": [
            {
              "id": 38,
              "label": "#38\nurl = 'https://api.ideogram.ai/generate'\nheaders = {'Api-Key': api_key.get_secret_value(), 'Content-Type':\n    'application/json'}\ndata: Dict[str, Any] = {'image_request': {'prompt': prompt, 'model':\n    model_name, 'aspect_ratio': aspect_ratio, 'magic_prompt_option':\n    magic_prompt_option, 'style_type': style_type}}\nif seed is not None:",
              "successors": [
                {
                  "id": 39,
                  "label": "#39\ndata['image_request']['seed'] = seed",
                  "successors": [
                    {
                      "id": 40,
                      "label": "#40\nif negative_prompt:",
                      "successors": [
                        {
                          "id": 41,
                          "label": "#41\ndata['image_request']['negative_prompt'] = negative_prompt",
                          "successors": [
                            {
                              "id": 42,
                              "label": "#42\nif color_palette_name != 'NONE':",
                              "successors": [
                                {
                                  "id": 43,
                                  "label": "#43\ndata['image_request']['color_palette'] = {'name': color_palette_name}",
                                  "successors": [
                                    {
                                      "id": 44,
                                      "label": "#44\ntry:",
                                      "successors": [
                                        {
                                          "id": 45,
                                          "label": "#45\nresponse = requests.post(url, json=data, headers=headers)\nreturn response.json()['data'][0]['url']",
                                          "successors": []
                                        },
                                        {
                                          "id": 46,
                                          "label": "#46\nraise Exception(f'Failed to fetch image: {str(e)}')",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "upscale_image",
          "type": "CFG",
          "blocks": [
            {
              "id": 52,
              "label": "#52\nurl = 'https://api.ideogram.ai/upscale'\nheaders = {'Api-Key': api_key.get_secret_value()}\ntry:",
              "successors": [
                {
                  "id": 53,
                  "label": "#53\nimage_response = requests.get(image_url)\nfiles = {'image_file': ('image.png', image_response.content, 'image/png')}\nresponse = requests.post(url, headers=headers, data={'image_request': '{}'},\n    files=files)\nreturn response.json()['data'][0]['url']",
                  "successors": []
                },
                {
                  "id": 54,
                  "label": "#54\nraise Exception(f'Failed to upscale image: {str(e)}')",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 23,
              "label": "#23\ncredentials: CredentialsMetaInput[Literal[ProviderName.IDEOGRAM], Literal[\n    'api_key']] = CredentialsField(description=\n    'The Ideogram integration can be used with any API key with sufficient permissions for the blocks it is used on.'\n    )\nprompt: str = SchemaField(description='Text prompt for image generation',\n    placeholder=\"e.g., 'A futuristic cityscape at sunset'\", title='Prompt')\nideogram_model_name: IdeogramModelName = SchemaField(description=\n    'The name of the Image Generation Model, e.g., V_2', default=\n    IdeogramModelName.V2, title='Image Generation Model', advanced=False)\naspect_ratio: AspectRatio = SchemaField(description=\n    'Aspect ratio for the generated image', default=AspectRatio.ASPECT_1_1,\n    title='Aspect Ratio', advanced=False)\nupscale: UpscaleOption = SchemaField(description=\n    'Upscale the generated image', default=UpscaleOption.NO_UPSCALE, title=\n    'Upscale Image', advanced=False)\nmagic_prompt_option: MagicPromptOption = SchemaField(description=\n    'Whether to use MagicPrompt for enhancing the request', default=\n    MagicPromptOption.AUTO, title='Magic Prompt Option', advanced=True)\nseed: Optional[int] = SchemaField(description=\n    'Random seed. Set for reproducible generation', default=None, title=\n    'Seed', advanced=True)\nstyle_type: StyleType = SchemaField(description=\n    'Style type to apply, applicable for V_2 and above', default=StyleType.\n    AUTO, title='Style Type', advanced=True)\nnegative_prompt: Optional[str] = SchemaField(description=\n    'Description of what to exclude from the image', default=None, title=\n    'Negative Prompt', advanced=True)\ncolor_palette_name: ColorPalettePreset = SchemaField(description=\n    \"Color palette preset name, choose 'None' to skip\", default=\n    ColorPalettePreset.NONE, title='Color Palette Preset', advanced=True)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 26,
              "label": "#26\nresult: str = SchemaField(description='Generated image URL')\nerror: str = SchemaField(description='Error message if the model run failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}