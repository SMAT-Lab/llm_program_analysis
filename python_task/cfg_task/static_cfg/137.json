{
  "name": "137.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nimport os\nimport uuid\nimport fastapi\nfrom google.cloud import storage\nimport backend.server.v2.store.exceptions\nfrom backend.util.settings import Settings\nlogger = logging.getLogger(__name__)\nALLOWED_IMAGE_TYPES = {'image/jpeg', 'image/png', 'image/gif', 'image/webp'}\nALLOWED_VIDEO_TYPES = {'video/mp4', 'video/webm'}\nMAX_FILE_SIZE = 50 * 1024 * 1024",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "check_media_exists",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"\ntry:",
          "successors": [
            {
              "id": 4,
              "label": "#4\nsettings = Settings()\nstorage_client = storage.Client()\nbucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\nimage_path = f'users/{user_id}/images/{filename}'\nimage_blob = bucket.blob(image_path)\nif image_blob.exists():",
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nreturn image_blob.public_url",
                  "successors": []
                },
                {
                  "id": 8,
                  "label": "#8\nvideo_path = f'users/{user_id}/videos/{filename}'\nvideo_blob = bucket.blob(video_path)\nif video_blob.exists():",
                  "successors": [
                    {
                      "id": 10,
                      "label": "#10\nreturn video_blob.public_url",
                      "successors": []
                    },
                    {
                      "id": 11,
                      "label": "#11\nreturn None",
                      "successors": []
                    }
                  ]
                }
              ]
            },
            {
              "id": 5,
              "label": "#5\nlogger.error(f'Error checking if media file exists: {str(e)}')\nreturn None",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "upload_media",
      "type": "CFG",
      "blocks": [
        {
          "id": 17,
          "label": "#17\ntry:",
          "successors": [
            {
              "id": 18,
              "label": "#18\ncontent = await file.read(1024)",
              "successors": [
                {
                  "id": 21,
                  "label": "#21\nawait file.seek(0)",
                  "successors": [
                    {
                      "id": 20,
                      "label": "#20\nif file.content_type in ALLOWED_IMAGE_TYPES:",
                      "successors": [
                        {
                          "id": 24,
                          "label": "#24\nif content.startswith(b'\\xff\\xd8\\xff'):",
                          "successors": [
                            {
                              "id": 42,
                              "label": "#42\nif file.content_type != 'image/jpeg':",
                              "successors": [
                                {
                                  "id": 64,
                                  "label": "#64\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\n    'File signature does not match content type')",
                                  "successors": []
                                },
                                {
                                  "id": 25,
                                  "label": "#25\nsettings = Settings()\nif not settings.config.media_gcs_bucket_name:",
                                  "successors": [
                                    {
                                      "id": 67,
                                      "label": "#67\nlogger.error('Missing GCS bucket name setting')\nraise backend.server.v2.store.exceptions.StorageConfigError(\n    'Missing storage bucket configuration')",
                                      "successors": []
                                    },
                                    {
                                      "id": 68,
                                      "label": "#68\ntry:",
                                      "successors": [
                                        {
                                          "id": 70,
                                          "label": "#70\ncontent_type = file.content_type\nif content_type is None:",
                                          "successors": [
                                            {
                                              "id": 74,
                                              "label": "#74\ncontent_type = 'image/jpeg'",
                                              "successors": [
                                                {
                                                  "id": 75,
                                                  "label": "#75\nif content_type not in ALLOWED_IMAGE_TYPES and content_type not in ALLOWED_VIDEO_TYPES:",
                                                  "successors": [
                                                    {
                                                      "id": 76,
                                                      "label": "#76\nlogger.warning(f'Invalid file type attempted: {content_type}')\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\n    f'File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}'\n    )",
                                                      "successors": []
                                                    },
                                                    {
                                                      "id": 77,
                                                      "label": "#77\nfile_size = 0\nchunk_size = 8192\ntry:",
                                                      "successors": [
                                                        {
                                                          "id": 79,
                                                          "label": "#79\nwhile (chunk := await file.read(chunk_size)):",
                                                          "successors": [
                                                            {
                                                              "id": 83,
                                                              "label": "#83\nfile_size += len(chunk)\nif file_size > MAX_FILE_SIZE:",
                                                              "successors": [
                                                                {
                                                                  "id": 85,
                                                                  "label": "#85\nlogger.warning(f'File size too large: {file_size} bytes')\nraise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n    'File too large. Maximum size is 50MB')",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "id": 82,
                                                              "label": "#82\nawait file.seek(0)",
                                                              "successors": [
                                                                {
                                                                  "id": 90,
                                                                  "label": "#90\nfilename = file.filename or ''\nfile_ext = os.path.splitext(filename)[1].lower()\nif use_file_name:",
                                                                  "successors": [
                                                                    {
                                                                      "id": 91,
                                                                      "label": "#91\nunique_filename = filename",
                                                                      "successors": [
                                                                        {
                                                                          "id": 92,
                                                                          "label": "#92\nmedia_type = 'images' if content_type in ALLOWED_IMAGE_TYPES else 'videos'\nstorage_path = f'users/{user_id}/{media_type}/{unique_filename}'\ntry:",
                                                                          "successors": [
                                                                            {
                                                                              "id": 94,
                                                                              "label": "#94\nstorage_client = storage.Client()\nbucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\nblob = bucket.blob(storage_path)\nblob.content_type = content_type\nfile_bytes = await file.read()",
                                                                              "successors": [
                                                                                {
                                                                                  "id": 97,
                                                                                  "label": "#97\nblob.upload_from_string(file_bytes, content_type=content_type)\npublic_url = blob.public_url\nlogger.info(f'Successfully uploaded file to: {storage_path}')\nreturn public_url",
                                                                                  "successors": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "id": 95,
                                                                              "label": "#95\nlogger.error(f'GCS storage error: {str(e)}')\nraise backend.server.v2.store.exceptions.StorageUploadError(\n    'Failed to upload file to storage') from e",
                                                                              "successors": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "id": 93,
                                                                      "label": "#93\nunique_filename = f'{uuid.uuid4()}{file_ext}'",
                                                                      "successors": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "id": 80,
                                                          "label": "#80\nraise",
                                                          "successors": []
                                                        },
                                                        {
                                                          "id": 81,
                                                          "label": "#81\nlogger.error(f'Error reading file chunks: {str(e)}')\nraise backend.server.v2.store.exceptions.FileReadError(\n    'Failed to read uploaded file') from e",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "id": 71,
                                          "label": "#71\nraise",
                                          "successors": []
                                        },
                                        {
                                          "id": 72,
                                          "label": "#72\nlogger.exception('Unexpected error in upload_media')\nraise backend.server.v2.store.exceptions.MediaUploadError(\n    'Unexpected error during media upload') from e",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "id": 44,
                              "label": "#44\nif content.startswith(b'\\x89PNG\\r\\n\\x1a\\n'):",
                              "successors": [
                                {
                                  "id": 45,
                                  "label": "#45\nif file.content_type != 'image/png':",
                                  "successors": [
                                    {
                                      "id": 61,
                                      "label": "#61\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\n    'File signature does not match content type')",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 47,
                                  "label": "#47\nif content.startswith(b'GIF87a') or content.startswith(b'GIF89a'):",
                                  "successors": [
                                    {
                                      "id": 48,
                                      "label": "#48\nif file.content_type != 'image/gif':",
                                      "successors": [
                                        {
                                          "id": 58,
                                          "label": "#58\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\n    'File signature does not match content type')",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 50,
                                      "label": "#50\nif content.startswith(b'RIFF') and content[8:12] == b'WEBP':",
                                      "successors": [
                                        {
                                          "id": 51,
                                          "label": "#51\nif file.content_type != 'image/webp':",
                                          "successors": [
                                            {
                                              "id": 55,
                                              "label": "#55\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\n    'File signature does not match content type')",
                                              "successors": []
                                            }
                                          ]
                                        },
                                        {
                                          "id": 53,
                                          "label": "#53\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\n    'Invalid image file signature')",
                                          "successors": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 26,
                          "label": "#26\nif file.content_type in ALLOWED_VIDEO_TYPES:",
                          "successors": [
                            {
                              "id": 27,
                              "label": "#27\nif content.startswith(b'\\x00\\x00\\x00') and content[4:8] == b'ftyp':",
                              "successors": [
                                {
                                  "id": 29,
                                  "label": "#29\nif file.content_type != 'video/mp4':",
                                  "successors": [
                                    {
                                      "id": 39,
                                      "label": "#39\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\n    'File signature does not match content type')",
                                      "successors": []
                                    }
                                  ]
                                },
                                {
                                  "id": 31,
                                  "label": "#31\nif content.startswith(b'\\x1aE\\xdf\\xa3'):",
                                  "successors": [
                                    {
                                      "id": 32,
                                      "label": "#32\nif file.content_type != 'video/webm':",
                                      "successors": [
                                        {
                                          "id": 36,
                                          "label": "#36\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\n    'File signature does not match content type')",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 34,
                                      "label": "#34\nraise backend.server.v2.store.exceptions.InvalidFileTypeError(\n    'Invalid video file signature')",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "id": 19,
              "label": "#19\nlogger.error(f'Error reading file content: {str(e)}')\nraise backend.server.v2.store.exceptions.FileReadError(\n    'Failed to read file content') from e",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}