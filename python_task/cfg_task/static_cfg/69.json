{
  "name": "69.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nimport time\nfrom enum import Enum\nfrom typing import Literal\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\nTEST_CREDENTIALS = APIKeyCredentials(id=\n    '01234567-89ab-cdef-0123-456789abcdef', provider='revid', api_key=\n    SecretStr('mock-revid-api-key'), title='Mock Revid API key', expires_at\n    =None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id':\n    TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title':\n    TEST_CREDENTIALS.type}\nlogger = logging.getLogger(__name__)",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "AudioTrack",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nOBSERVER = 'Observer',\nFUTURISTIC_BEAT = 'Futuristic Beat',\nSCIENCE_DOCUMENTARY = 'Science Documentary',\nHOTLINE = 'Hotline',\nBLADERUNNER_2049 = 'Bladerunner 2049',\nA_FUTURE = 'A Future',\nELYSIAN_EMBERS = 'Elysian Embers',\nINSPIRING_CINEMATIC = 'Inspiring Cinematic',\nBLADERUNNER_REMIX = 'Bladerunner Remix',\nIZZAMUZZIC = 'Izzamuzzic',\nNAS = 'Nas',\nPARIS_ELSE = 'Paris - Else',\nSNOWFALL = 'Snowfall',\nBURLESQUE = 'Burlesque',\nCORNY_CANDY = 'Corny Candy',\nHIGHWAY_NOCTURNE = 'Highway Nocturne',\nI_DONT_THINK_SO = \"I Don't Think So\",\nLOSING_YOUR_MARBLES = 'Losing Your Marbles',\nREFRESHER = 'Refresher',\nTOURIST = 'Tourist',\nTWIN_TYCHES = 'Twin Tyches',",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "audio_url",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\naudio_urls = {AudioTrack.OBSERVER:\n    'https://cdn.tfrv.xyz/audio/observer.mp3', AudioTrack.FUTURISTIC_BEAT:\n    'https://cdn.tfrv.xyz/audio/_futuristic-beat.mp3', AudioTrack.\n    SCIENCE_DOCUMENTARY:\n    'https://cdn.tfrv.xyz/audio/_science-documentary.mp3', AudioTrack.\n    HOTLINE: 'https://cdn.tfrv.xyz/audio/_hotline.mp3', AudioTrack.\n    BLADERUNNER_2049: 'https://cdn.tfrv.xyz/audio/_bladerunner-2049.mp3',\n    AudioTrack.A_FUTURE: 'https://cdn.tfrv.xyz/audio/a-future.mp3',\n    AudioTrack.ELYSIAN_EMBERS:\n    'https://cdn.tfrv.xyz/audio/elysian-embers.mp3', AudioTrack.\n    INSPIRING_CINEMATIC:\n    'https://cdn.tfrv.xyz/audio/inspiring-cinematic-ambient.mp3',\n    AudioTrack.BLADERUNNER_REMIX:\n    'https://cdn.tfrv.xyz/audio/bladerunner-remix.mp3', AudioTrack.\n    IZZAMUZZIC: 'https://cdn.tfrv.xyz/audio/_izzamuzzic.mp3', AudioTrack.\n    NAS: 'https://cdn.tfrv.xyz/audio/_nas.mp3', AudioTrack.PARIS_ELSE:\n    'https://cdn.tfrv.xyz/audio/_paris-else.mp3', AudioTrack.SNOWFALL:\n    'https://cdn.tfrv.xyz/audio/_snowfall.mp3', AudioTrack.BURLESQUE:\n    'https://cdn.tfrv.xyz/audio/burlesque.mp3', AudioTrack.CORNY_CANDY:\n    'https://cdn.tfrv.xyz/audio/corny-candy.mp3', AudioTrack.\n    HIGHWAY_NOCTURNE: 'https://cdn.tfrv.xyz/audio/highway-nocturne.mp3',\n    AudioTrack.I_DONT_THINK_SO:\n    'https://cdn.tfrv.xyz/audio/i-dont-think-so.mp3', AudioTrack.\n    LOSING_YOUR_MARBLES:\n    'https://cdn.tfrv.xyz/audio/losing-your-marbles.mp3', AudioTrack.\n    REFRESHER: 'https://cdn.tfrv.xyz/audio/refresher.mp3', AudioTrack.\n    TOURIST: 'https://cdn.tfrv.xyz/audio/tourist.mp3', AudioTrack.\n    TWIN_TYCHES: 'https://cdn.tfrv.xyz/audio/twin-tynches.mp3'}\nreturn audio_urls[self]",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "GenerationPreset",
      "type": "CFG",
      "blocks": [
        {
          "id": 10,
          "label": "#10\nLEONARDO = 'Default',\nANIME = 'Anime',\nREALISM = 'Realist',\nILLUSTRATION = 'Illustration',\nSKETCH_COLOR = 'Sketch Color',\nSKETCH_BW = 'Sketch B&W',\nPIXAR = 'Pixar',\nINK = 'Japanese Ink',\nRENDER_3D = '3D Render',\nLEGO = 'Lego',\nSCIFI = 'Sci-Fi',\nRECRO_CARTOON = 'Retro Cartoon',\nPIXEL_ART = 'Pixel Art',\nCREATIVE = 'Creative',\nPHOTOGRAPHY = 'Photography',\nRAYTRACED = 'Raytraced',\nENVIRONMENT = 'Environment',\nFANTASY = 'Fantasy',\nANIME_SR = 'Anime Realism',\nMOVIE = 'Movie',\nSTYLIZED_ILLUSTRATION = 'Stylized Illustration',\nMANGA = 'Manga',",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "Voice",
      "type": "CFG",
      "blocks": [
        {
          "id": 13,
          "label": "#13\nLILY = 'Lily'\nDANIEL = 'Daniel'\nBRIAN = 'Brian'\nJESSICA = 'Jessica'\nCHARLOTTE = 'Charlotte'\nCALLUM = 'Callum'",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "voice_id",
          "type": "CFG",
          "blocks": [
            {
              "id": 15,
              "label": "#15\nvoice_id_map = {Voice.LILY: 'pFZP5JQG7iQjIQuC4Bku', Voice.DANIEL:\n    'onwK4e9ZLuTAKqWW03F9', Voice.BRIAN: 'nPczCjzI2devNBz1zQrb', Voice.\n    JESSICA: 'cgSgspJ2msm6clMCkdW9', Voice.CHARLOTTE:\n    'XB0fDUnXU5powFXDhCwa', Voice.CALLUM: 'N2lVS1w4EtoT3dr4eOWO'}\nreturn voice_id_map[self]",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "__str__",
          "type": "CFG",
          "blocks": [
            {
              "id": 19,
              "label": "#19\nreturn self.value",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "VisualMediaType",
      "type": "CFG",
      "blocks": [
        {
          "id": 24,
          "label": "#24\nSTOCK_VIDEOS = 'stockVideo',\nMOVING_AI_IMAGES = 'movingImage',\nAI_VIDEO = 'aiVideo',",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "AIShortformVideoCreatorBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 27,
          "label": "#27",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 35,
              "label": "#35\nsuper().__init__(id='361697fb-0c4f-4feb-aed3-8320c88c771b', description=\n    'Creates a shortform video using revid.ai', categories={BlockCategory.\n    SOCIAL, BlockCategory.AI}, input_schema=AIShortformVideoCreatorBlock.\n    Input, output_schema=AIShortformVideoCreatorBlock.Output, test_input={\n    'credentials': TEST_CREDENTIALS_INPUT, 'script':\n    '[close-up of a cat] Meow!', 'ratio': '9 / 16', 'resolution': '720p',\n    'frame_rate': 60, 'generation_preset': GenerationPreset.LEONARDO,\n    'background_music': AudioTrack.HIGHWAY_NOCTURNE, 'voice': Voice.LILY,\n    'video_style': VisualMediaType.STOCK_VIDEOS}, test_output=('video_url',\n    'https://example.com/video.mp4'), test_mock={'create_webhook': lambda :\n    ('test_uuid', 'https://webhook.site/test_uuid'), 'create_video': lambda\n    api_key, payload: {'pid': 'test_pid'}, 'wait_for_video': lambda api_key,\n    pid, webhook_token, max_wait_time=1000: 'https://example.com/video.mp4'\n    }, test_credentials=TEST_CREDENTIALS)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "create_webhook",
          "type": "CFG",
          "blocks": [
            {
              "id": 38,
              "label": "#38\nurl = 'https://webhook.site/token'\nheaders = {'Accept': 'application/json', 'Content-Type': 'application/json'}\nresponse = requests.post(url, headers=headers)\nwebhook_data = response.json()\nreturn webhook_data['uuid'], f\"https://webhook.site/{webhook_data['uuid']}\"",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "create_video",
          "type": "CFG",
          "blocks": [
            {
              "id": 42,
              "label": "#42\nurl = 'https://www.revid.ai/api/public/v2/render'\nheaders = {'key': api_key.get_secret_value()}\nresponse = requests.post(url, json=payload, headers=headers)\nlogger.debug(\n    f'API Response Status Code: {response.status_code}, Content: {response.text}'\n    )\nreturn response.json()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "check_video_status",
          "type": "CFG",
          "blocks": [
            {
              "id": 46,
              "label": "#46\nurl = f'https://www.revid.ai/api/public/v2/status?pid={pid}'\nheaders = {'key': api_key.get_secret_value()}\nresponse = requests.get(url, headers=headers)\nreturn response.json()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "wait_for_video",
          "type": "CFG",
          "blocks": [
            {
              "id": 50,
              "label": "#50\nstart_time = time.time()",
              "successors": [
                {
                  "id": 51,
                  "label": "#51\nwhile time.time() - start_time < max_wait_time:",
                  "successors": [
                    {
                      "id": 52,
                      "label": "#52\nstatus = self.check_video_status(api_key, pid)\nlogger.debug(f'Video status: {status}')\nif status.get('status') == 'ready' and 'videoUrl' in status:",
                      "successors": [
                        {
                          "id": 54,
                          "label": "#54\nreturn status['videoUrl']",
                          "successors": []
                        },
                        {
                          "id": 56,
                          "label": "#56\nif status.get('status') == 'error':",
                          "successors": [
                            {
                              "id": 57,
                              "label": "#57\nerror_message = status.get('error', 'Unknown error occurred')\nlogger.error(f'Video creation failed: {error_message}')\nraise ValueError(f'Video creation failed: {error_message}')",
                              "successors": []
                            },
                            {
                              "id": 59,
                              "label": "#59\nif status.get('status') in ['FAILED', 'CANCELED']:",
                              "successors": [
                                {
                                  "id": 60,
                                  "label": "#60\nlogger.error(f\"Video creation failed: {status.get('message')}\")\nraise ValueError(f\"Video creation failed: {status.get('message')}\")",
                                  "successors": []
                                },
                                {
                                  "id": 55,
                                  "label": "#55\ntime.sleep(10)",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 53,
                      "label": "#53\nlogger.error('Video creation timed out')\nraise TimeoutError('Video creation timed out')",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 68,
              "label": "#68\nwebhook_token, webhook_url = self.create_webhook()\nlogger.debug(f'Webhook URL: {webhook_url}')\naudio_url = input_data.background_music.audio_url\npayload = {'frameRate': input_data.frame_rate, 'resolution': input_data.\n    resolution, 'frameDurationMultiplier': 18, 'webhook': webhook_url,\n    'creationParams': {'mediaType': input_data.video_style,\n    'captionPresetName': 'Wrap 1', 'selectedVoice': input_data.voice.\n    voice_id, 'hasEnhancedGeneration': True, 'generationPreset': input_data\n    .generation_preset.name, 'selectedAudio': input_data.background_music,\n    'origin': '/create', 'inputText': input_data.script, 'flowType':\n    'text-to-video', 'slug': 'create-tiktok-video', 'hasToGenerateVoice': \n    True, 'hasToTranscript': False, 'hasToSearchMedia': True, 'hasAvatar': \n    False, 'hasWebsiteRecorder': False, 'hasTextSmallAtBottom': False,\n    'ratio': input_data.ratio, 'sourceType': 'contentScraping',\n    'selectedStoryStyle': {'value': 'custom', 'label': 'Custom'},\n    'hasToGenerateVideos': input_data.video_style != VisualMediaType.\n    STOCK_VIDEOS, 'audioUrl': audio_url}}\nresponse = self.create_video(credentials.api_key, payload)\npid = response.get('pid')\nif not pid:",
              "successors": [
                {
                  "id": 69,
                  "label": "#69\nlogger.error(\n    f'Failed to create video: No project ID returned. API Response: {response}'\n    )\nraise RuntimeError('Failed to create video: No project ID returned')",
                  "successors": []
                },
                {
                  "id": 71,
                  "label": "#71\n    )\nvideo_url = self.wait_for_video(credentials.api_key, pid, webhook_token)\nlogger.debug(f'Video ready: {video_url}')\nyield 'video_url', video_url",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 29,
              "label": "#29\ncredentials: CredentialsMetaInput[Literal[ProviderName.REVID], Literal[\n    'api_key']] = CredentialsField(description=\n    'The revid.ai integration can be used with any API key with sufficient permissions for the blocks it is used on.'\n    )\nscript: str = SchemaField(description=\n    \"\"\"1. Use short and punctuated sentences\n\n2. Use linebreaks to create a new clip\n\n3. Text outside of brackets is spoken by the AI, and [text between brackets] will be used to guide the visual generation. For example, [close-up of a cat] will show a close-up of a cat.\"\"\"\n    , placeholder='[close-up of a cat] Meow!')\nratio: str = SchemaField(description='Aspect ratio of the video', default=\n    '9 / 16')\nresolution: str = SchemaField(description='Resolution of the video',\n    default='720p')\nframe_rate: int = SchemaField(description='Frame rate of the video', default=60\n    )\ngeneration_preset: GenerationPreset = SchemaField(description=\n    'Generation preset for visual style - only effects AI generated visuals',\n    default=GenerationPreset.LEONARDO, placeholder=GenerationPreset.LEONARDO)\nbackground_music: AudioTrack = SchemaField(description=\n    'Background music track', default=AudioTrack.HIGHWAY_NOCTURNE,\n    placeholder=AudioTrack.HIGHWAY_NOCTURNE)\nvoice: Voice = SchemaField(description='AI voice to use for narration',\n    default=Voice.LILY, placeholder=Voice.LILY)\nvideo_style: VisualMediaType = SchemaField(description=\n    'Type of visual media to use for the video', default=VisualMediaType.\n    STOCK_VIDEOS, placeholder=VisualMediaType.STOCK_VIDEOS)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 32,
              "label": "#32\nvideo_url: str = SchemaField(description='The URL of the created video')\nerror: str = SchemaField(description='Error message if the request failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}