{
  "name": "105.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "Node",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nself.results = results\nself.next = next",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "LinkedList",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nself.head = None\nself.tail = None",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "move_to_front",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\npass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "append_to_front",
          "type": "CFG",
          "blocks": [
            {
              "id": 17,
              "label": "#17\npass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "remove_from_tail",
          "type": "CFG",
          "blocks": [
            {
              "id": 20,
              "label": "#20\npass",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "Cache",
      "type": "CFG",
      "blocks": [
        {
          "id": 24,
          "label": "#24",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 26,
              "label": "#26\nself.MAX_SIZE = MAX_SIZE\nself.size = 0\nself.lookup = {}\nself.linked_list = LinkedList()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get",
          "type": "CFG",
          "blocks": [
            {
              "id": 29,
              "label": "#29\n\"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\nnode = self.lookup.get(query)\nif node is None:",
              "successors": [
                {
                  "id": 30,
                  "label": "#30\nreturn None",
                  "successors": []
                },
                {
                  "id": 31,
                  "label": "#31\nself.linked_list.move_to_front(node)\nreturn node.results",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "set",
          "type": "CFG",
          "blocks": [
            {
              "id": 36,
              "label": "#36\n\"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\nnode = self.lookup.get(query)\nif node is not None:",
              "successors": [
                {
                  "id": 37,
                  "label": "#37\nnode.results = results\nself.linked_list.move_to_front(node)",
                  "successors": []
                },
                {
                  "id": 39,
                  "label": "#39\nif self.size == self.MAX_SIZE:",
                  "successors": [
                    {
                      "id": 40,
                      "label": "#40\nself.lookup.pop(self.linked_list.tail.query, None)\nself.linked_list.remove_from_tail()",
                      "successors": [
                        {
                          "id": 41,
                          "label": "#41\nnew_node = Node(results)\nself.linked_list.append_to_front(new_node)\nself.lookup[query] = new_node",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 42,
                      "label": "#42\nself.size += 1",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}