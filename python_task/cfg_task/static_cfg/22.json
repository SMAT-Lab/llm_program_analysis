{
  "name": "22.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom urllib.parse import urlparse\nfrom typing_extensions import TypedDict\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom ._api import get_api\nfrom ._auth import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GithubCredentials, GithubCredentialsField, GithubCredentialsInput",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "is_github_url",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nreturn urlparse(url).netloc == 'github.com'",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "GithubCommentBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 15,
              "label": "#15\nsuper().__init__(id='a8db4d8d-db1c-4a25-a1b0-416a8c33602b', description=\n    'This block posts a comment on a specified GitHub issue or pull request.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubCommentBlock.Input, output_schema=GithubCommentBlock.Output,\n    test_input=[{'issue_url': 'https://github.com/owner/repo/issues/1',\n    'comment': 'This is a test comment.', 'credentials':\n    TEST_CREDENTIALS_INPUT}, {'issue_url':\n    'https://github.com/owner/repo/pull/1', 'comment':\n    'This is a test comment.', 'credentials': TEST_CREDENTIALS_INPUT}],\n    test_credentials=TEST_CREDENTIALS, test_output=[('id', 1337), ('url',\n    'https://github.com/owner/repo/issues/1#issuecomment-1337'), ('id', \n    1337), ('url',\n    'https://github.com/owner/repo/issues/1#issuecomment-1337')], test_mock\n    ={'post_comment': lambda *args, **kwargs: (1337,\n    'https://github.com/owner/repo/issues/1#issuecomment-1337')})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "post_comment",
          "type": "CFG",
          "blocks": [
            {
              "id": 18,
              "label": "#18\napi = get_api(credentials)\ndata = {'body': body_text}\nif 'pull' in issue_url:",
              "successors": [
                {
                  "id": 19,
                  "label": "#19\nissue_url = issue_url.replace('pull', 'issues')",
                  "successors": [
                    {
                      "id": 20,
                      "label": "#20\ncomments_url = issue_url + '/comments'\nresponse = api.post(comments_url, json=data)\ncomment = response.json()\nreturn comment['id'], comment['html_url']",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 24,
              "label": "#24\nid, url = self.post_comment(credentials, input_data.issue_url, input_data.\n    comment)\nyield 'id', id",
              "successors": [
                {
                  "id": 25,
                  "label": "#25\nyield 'url', url",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 9,
              "label": "#9\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nissue_url: str = SchemaField(description=\n    'URL of the GitHub issue or pull request', placeholder=\n    'https://github.com/owner/repo/issues/1')\ncomment: str = SchemaField(description=\n    'Comment to post on the issue or pull request', placeholder=\n    'Enter your comment')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 12,
              "label": "#12\nid: int = SchemaField(description='ID of the created comment')\nurl: str = SchemaField(description='URL to the comment on GitHub')\nerror: str = SchemaField(description=\n    'Error message if the comment posting failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubMakeIssueBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 30,
          "label": "#30",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 38,
              "label": "#38\nsuper().__init__(id='691dad47-f494-44c3-a1e8-05b7990f2dab', description=\n    'This block creates a new issue on a specified GitHub repository.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubMakeIssueBlock.Input, output_schema=GithubMakeIssueBlock.Output,\n    test_input={'repo_url': 'https://github.com/owner/repo', 'title':\n    'Test Issue', 'body': 'This is a test issue.', 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('number', 1), ('url', 'https://github.com/owner/repo/issues/1')],\n    test_mock={'create_issue': lambda *args, **kwargs: (1,\n    'https://github.com/owner/repo/issues/1')})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "create_issue",
          "type": "CFG",
          "blocks": [
            {
              "id": 41,
              "label": "#41\napi = get_api(credentials)\ndata = {'title': title, 'body': body}\nissues_url = repo_url + '/issues'\nresponse = api.post(issues_url, json=data)\nissue = response.json()\nreturn issue['number'], issue['html_url']",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 45,
              "label": "#45\nnumber, url = self.create_issue(credentials, input_data.repo_url,\n    input_data.title, input_data.body)\nyield 'number', number",
              "successors": [
                {
                  "id": 46,
                  "label": "#46\nyield 'url', url",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 32,
              "label": "#32\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository',\n    placeholder='https://github.com/owner/repo')\ntitle: str = SchemaField(description='Title of the issue', placeholder=\n    'Enter the issue title')\nbody: str = SchemaField(description='Body of the issue', placeholder=\n    'Enter the issue body')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 35,
              "label": "#35\nnumber: int = SchemaField(description='Number of the created issue')\nurl: str = SchemaField(description='URL of the created issue')\nerror: str = SchemaField(description=\n    'Error message if the issue creation failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubReadIssueBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 51,
          "label": "#51",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 59,
              "label": "#59\nsuper().__init__(id='6443c75d-032a-4772-9c08-230c707c8acc', description=\n    'This block reads the body, title, and user of a specified GitHub issue.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubReadIssueBlock.Input, output_schema=GithubReadIssueBlock.Output,\n    test_input={'issue_url': 'https://github.com/owner/repo/issues/1',\n    'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('title', 'Title of the issue'), ('body',\n    'This is the body of the issue.'), ('user', 'username')], test_mock={\n    'read_issue': lambda *args, **kwargs: ('Title of the issue',\n    'This is the body of the issue.', 'username')})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "read_issue",
          "type": "CFG",
          "blocks": [
            {
              "id": 62,
              "label": "#62\napi = get_api(credentials)\nresponse = api.get(issue_url)\ndata = response.json()\ntitle = data.get('title', 'No title found')\nbody = data.get('body', 'No body content found')\nuser = data.get('user', {}).get('login', 'No user found')\nreturn title, body, user",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 66,
              "label": "#66\ntitle, body, user = self.read_issue(credentials, input_data.issue_url)\nif title:",
              "successors": [
                {
                  "id": 67,
                  "label": "#67\nyield 'title', title",
                  "successors": [
                    {
                      "id": 68,
                      "label": "#68\nif body:",
                      "successors": [
                        {
                          "id": 70,
                          "label": "#70\nyield 'body', body",
                          "successors": [
                            {
                              "id": 71,
                              "label": "#71\nif user:",
                              "successors": [
                                {
                                  "id": 73,
                                  "label": "#73\nyield 'user', user",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 53,
              "label": "#53\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nissue_url: str = SchemaField(description='URL of the GitHub issue',\n    placeholder='https://github.com/owner/repo/issues/1')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 56,
              "label": "#56\ntitle: str = SchemaField(description='Title of the issue')\nbody: str = SchemaField(description='Body of the issue')\nuser: str = SchemaField(description='User who created the issue')\nerror: str = SchemaField(description=\n    'Error message if reading the issue failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubListIssuesBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 79,
          "label": "#79",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 90,
              "label": "#90\nsuper().__init__(id='c215bfd7-0e57-4573-8f8c-f7d4963dcd74', description=\n    'This block lists all issues for a specified GitHub repository.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubListIssuesBlock.Input, output_schema=GithubListIssuesBlock.Output,\n    test_input={'repo_url': 'https://github.com/owner/repo', 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('issue', {'title': 'Issue 1', 'url':\n    'https://github.com/owner/repo/issues/1'})], test_mock={'list_issues': \n    lambda *args, **kwargs: [{'title': 'Issue 1', 'url':\n    'https://github.com/owner/repo/issues/1'}]})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "list_issues",
          "type": "CFG",
          "blocks": [
            {
              "id": 93,
              "label": "#93\napi = get_api(credentials)\nissues_url = repo_url + '/issues'\nresponse = api.get(issues_url)\ndata = response.json()\nissues: list[GithubListIssuesBlock.Output.IssueItem] = [{'title': issue[\n    'title'], 'url': issue['html_url']} for issue in data]\nreturn issues",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 97,
              "label": "#97\nissues = self.list_issues(credentials, input_data.repo_url)\nyield from (('issue', issue) for issue in issues)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 81,
              "label": "#81\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository',\n    placeholder='https://github.com/owner/repo')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 84,
              "label": "#84\nissue: IssueItem = SchemaField(title='Issue', description=\n    'Issues with their title and URL')\nerror: str = SchemaField(description='Error message if listing issues failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": [
            {
              "name": "IssueItem",
              "type": "CFG",
              "blocks": [
                {
                  "id": 86,
                  "label": "#86\ntitle: str\nurl: str",
                  "successors": []
                }
              ],
              "functions": [],
              "classes": []
            }
          ]
        }
      ]
    },
    {
      "name": "GithubAddLabelBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 101,
          "label": "#101",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 109,
              "label": "#109\nsuper().__init__(id='98bd6b77-9506-43d5-b669-6b9733c4b1f1', description=\n    'This block adds a label to a specified GitHub issue or pull request.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubAddLabelBlock.Input, output_schema=GithubAddLabelBlock.Output,\n    test_input={'issue_url': 'https://github.com/owner/repo/issues/1',\n    'label': 'bug', 'credentials': TEST_CREDENTIALS_INPUT},\n    test_credentials=TEST_CREDENTIALS, test_output=[('status',\n    'Label added successfully')], test_mock={'add_label': lambda *args, **\n    kwargs: 'Label added successfully'})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "add_label",
          "type": "CFG",
          "blocks": [
            {
              "id": 112,
              "label": "#112\napi = get_api(credentials)\ndata = {'labels': [label]}\nlabels_url = issue_url + '/labels'\napi.post(labels_url, json=data)\nreturn 'Label added successfully'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 116,
              "label": "#116\nstatus = self.add_label(credentials, input_data.issue_url, input_data.label)\nyield 'status', status",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 103,
              "label": "#103\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nissue_url: str = SchemaField(description=\n    'URL of the GitHub issue or pull request', placeholder=\n    'https://github.com/owner/repo/issues/1')\nlabel: str = SchemaField(description=\n    'Label to add to the issue or pull request', placeholder='Enter the label')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 106,
              "label": "#106\nstatus: str = SchemaField(description='Status of the label addition operation')\nerror: str = SchemaField(description=\n    'Error message if the label addition failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubRemoveLabelBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 121,
          "label": "#121",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 129,
              "label": "#129\nsuper().__init__(id='78f050c5-3e3a-48c0-9e5b-ef1ceca5589c', description=\n    'This block removes a label from a specified GitHub issue or pull request.'\n    , categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubRemoveLabelBlock.Input, output_schema=GithubRemoveLabelBlock.\n    Output, test_input={'issue_url':\n    'https://github.com/owner/repo/issues/1', 'label': 'bug', 'credentials':\n    TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output\n    =[('status', 'Label removed successfully')], test_mock={'remove_label':\n    lambda *args, **kwargs: 'Label removed successfully'})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "remove_label",
          "type": "CFG",
          "blocks": [
            {
              "id": 132,
              "label": "#132\napi = get_api(credentials)\nlabel_url = issue_url + f'/labels/{label}'\napi.delete(label_url)\nreturn 'Label removed successfully'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 136,
              "label": "#136\nstatus = self.remove_label(credentials, input_data.issue_url, input_data.label)\nyield 'status', status",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 123,
              "label": "#123\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nissue_url: str = SchemaField(description=\n    'URL of the GitHub issue or pull request', placeholder=\n    'https://github.com/owner/repo/issues/1')\nlabel: str = SchemaField(description=\n    'Label to remove from the issue or pull request', placeholder=\n    'Enter the label')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 126,
              "label": "#126\nstatus: str = SchemaField(description='Status of the label removal operation')\nerror: str = SchemaField(description=\n    'Error message if the label removal failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubAssignIssueBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 141,
          "label": "#141",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 149,
              "label": "#149\nsuper().__init__(id='90507c72-b0ff-413a-886a-23bbbd66f542', description=\n    'This block assigns a user to a specified GitHub issue.', categories={\n    BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubAssignIssueBlock.\n    Input, output_schema=GithubAssignIssueBlock.Output, test_input={\n    'issue_url': 'https://github.com/owner/repo/issues/1', 'assignee':\n    'username1', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('status', 'Issue assigned successfully'\n    )], test_mock={'assign_issue': lambda *args, **kwargs:\n    'Issue assigned successfully'})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "assign_issue",
          "type": "CFG",
          "blocks": [
            {
              "id": 152,
              "label": "#152\napi = get_api(credentials)\nassignees_url = issue_url + '/assignees'\ndata = {'assignees': [assignee]}\napi.post(assignees_url, json=data)\nreturn 'Issue assigned successfully'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 156,
              "label": "#156\nstatus = self.assign_issue(credentials, input_data.issue_url, input_data.\n    assignee)\nyield 'status', status",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 143,
              "label": "#143\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nissue_url: str = SchemaField(description='URL of the GitHub issue',\n    placeholder='https://github.com/owner/repo/issues/1')\nassignee: str = SchemaField(description='Username to assign to the issue',\n    placeholder='Enter the username')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 146,
              "label": "#146\nstatus: str = SchemaField(description=\n    'Status of the issue assignment operation')\nerror: str = SchemaField(description=\n    'Error message if the issue assignment failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "GithubUnassignIssueBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 161,
          "label": "#161",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 169,
              "label": "#169\nsuper().__init__(id='d154002a-38f4-46c2-962d-2488f2b05ece', description=\n    'This block unassigns a user from a specified GitHub issue.',\n    categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=\n    GithubUnassignIssueBlock.Input, output_schema=GithubUnassignIssueBlock.\n    Output, test_input={'issue_url':\n    'https://github.com/owner/repo/issues/1', 'assignee': 'username1',\n    'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=\n    TEST_CREDENTIALS, test_output=[('status',\n    'Issue unassigned successfully')], test_mock={'unassign_issue': lambda\n    *args, **kwargs: 'Issue unassigned successfully'})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "unassign_issue",
          "type": "CFG",
          "blocks": [
            {
              "id": 172,
              "label": "#172\napi = get_api(credentials)\nassignees_url = issue_url + '/assignees'\ndata = {'assignees': [assignee]}\napi.delete(assignees_url, json=data)\nreturn 'Issue unassigned successfully'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 176,
              "label": "#176\nstatus = self.unassign_issue(credentials, input_data.issue_url, input_data.\n    assignee)\nyield 'status', status",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 163,
              "label": "#163\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nissue_url: str = SchemaField(description='URL of the GitHub issue',\n    placeholder='https://github.com/owner/repo/issues/1')\nassignee: str = SchemaField(description=\n    'Username to unassign from the issue', placeholder='Enter the username')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 166,
              "label": "#166\nstatus: str = SchemaField(description=\n    'Status of the issue unassignment operation')\nerror: str = SchemaField(description=\n    'Error message if the issue unassignment failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}