{
  "name": "59.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nimport time\nfrom typing import Sequence\nfrom backend.data import db\nfrom backend.data.block import Block, initialize_blocks\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.data.user import create_default_user\nfrom backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler\nfrom backend.server.rest_api import AgentServer\nfrom backend.server.utils import get_user_id\nlog = logging.getLogger(__name__)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "wait_execution",
      "type": "CFG",
      "blocks": [
        {
          "id": 27,
          "label": "#27",
          "successors": [
            {
              "id": 36,
              "label": "#36\nfor i in range(timeout):",
              "successors": [
                {
                  "id": 37,
                  "label": "#37\nif await is_execution_completed():",
                  "successors": [
                    {
                      "id": 39,
                      "label": "#39\nreturn await AgentServer().test_get_graph_run_node_execution_results(graph_id,\n    graph_exec_id, user_id)",
                      "successors": []
                    },
                    {
                      "id": 40,
                      "label": "#40\ntime.sleep(1)",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 38,
                  "label": "#38\nassert False, 'Execution did not complete in time.'",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "is_execution_completed",
          "type": "CFG",
          "blocks": [
            {
              "id": 29,
              "label": "#29\nstatus = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)",
              "successors": [
                {
                  "id": 30,
                  "label": "#30\nlog.info(f'Execution status: {status}')\nif status == ExecutionStatus.FAILED:",
                  "successors": [
                    {
                      "id": 31,
                      "label": "#31\nlog.info('Execution failed')\nraise Exception('Execution failed')",
                      "successors": []
                    },
                    {
                      "id": 32,
                      "label": "#32\nreturn status == ExecutionStatus.COMPLETED",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "execute_block_test",
      "type": "CFG",
      "blocks": [
        {
          "id": 46,
          "label": "#46\nprefix = f'[Test-{block.name}]'\nif not block.test_input or not block.test_output:",
          "successors": [
            {
              "id": 47,
              "label": "#47\nlog.info(f'{prefix} No test data provided')\nreturn",
              "successors": []
            },
            {
              "id": 48,
              "label": "#48\nif not isinstance(block.test_input, list):",
              "successors": [
                {
                  "id": 50,
                  "label": "#50\nblock.test_input = [block.test_input]",
                  "successors": [
                    {
                      "id": 51,
                      "label": "#51\nif not isinstance(block.test_output, list):",
                      "successors": [
                        {
                          "id": 52,
                          "label": "#52\nblock.test_output = [block.test_output]",
                          "successors": [
                            {
                              "id": 53,
                              "label": "#53\noutput_index = 0\nprefix = ' ' * 4 + prefix",
                              "successors": [
                                {
                                  "id": 54,
                                  "label": "#54\nfor mock_name, mock_obj in (block.test_mock or {}).items():",
                                  "successors": [
                                    {
                                      "id": 55,
                                      "label": "#55\nif hasattr(block, mock_name):",
                                      "successors": [
                                        {
                                          "id": 57,
                                          "label": "#57\nsetattr(block, mock_name, mock_obj)",
                                          "successors": []
                                        },
                                        {
                                          "id": 59,
                                          "label": "#59\nlog.info(f'{prefix} mock {mock_name} not found in block')",
                                          "successors": []
                                        }
                                      ]
                                    },
                                    {
                                      "id": 56,
                                      "label": "#56\nextra_exec_kwargs = {}\nif CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:",
                                      "successors": [
                                        {
                                          "id": 60,
                                          "label": "#60\nif not block.test_credentials:",
                                          "successors": [
                                            {
                                              "id": 62,
                                              "label": "#62\nraise ValueError(f'{prefix} requires credentials but has no test_credentials')",
                                              "successors": []
                                            },
                                            {
                                              "id": 63,
                                              "label": "#63\nextra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials",
                                              "successors": [
                                                {
                                                  "id": 61,
                                                  "label": "#61\nfor input_data in block.test_input:",
                                                  "successors": [
                                                    {
                                                      "id": 65,
                                                      "label": "#65\nlog.info(f'{prefix} in: {input_data}')",
                                                      "successors": [
                                                        {
                                                          "id": 67,
                                                          "label": "#67\nfor output_name, output_data in block.execute(input_data, **extra_exec_kwargs):",
                                                          "successors": [
                                                            {
                                                              "id": 68,
                                                              "label": "#68\nif output_index >= len(block.test_output):",
                                                              "successors": [
                                                                {
                                                                  "id": 70,
                                                                  "label": "#70\nraise ValueError(f'{prefix} produced output more than expected')",
                                                                  "successors": []
                                                                },
                                                                {
                                                                  "id": 71,
                                                                  "label": "#71\nex_output_name, ex_output_data = block.test_output[output_index]\ncompare(output_data, ex_output_data)\ncompare(output_name, ex_output_name)\noutput_index += 1",
                                                                  "successors": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "id": 66,
                                                      "label": "#66\nif output_index < len(block.test_output):",
                                                      "successors": [
                                                        {
                                                          "id": 88,
                                                          "label": "#88\nraise ValueError(\n    f'{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}'\n    )",
                                                          "successors": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "compare",
          "type": "CFG",
          "blocks": [
            {
              "id": 74,
              "label": "#74\nif data == expected_data:",
              "successors": [
                {
                  "id": 75,
                  "label": "#75\nis_matching = True",
                  "successors": [
                    {
                      "id": 76,
                      "label": "#76\nmark = '\u2705' if is_matching else '\u274c'\nlog.info(f'{prefix} {mark} comparing `{data}` vs `{expected_data}`')\nif not is_matching:",
                      "successors": [
                        {
                          "id": 84,
                          "label": "#84\nraise ValueError(f'{prefix}: wrong output {data} vs {expected_data}')",
                          "successors": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 77,
                  "label": "#77\nif isinstance(expected_data, type):",
                  "successors": [
                    {
                      "id": 78,
                      "label": "#78\nis_matching = isinstance(data, expected_data)",
                      "successors": []
                    },
                    {
                      "id": 80,
                      "label": "#80\nif callable(expected_data):",
                      "successors": [
                        {
                          "id": 81,
                          "label": "#81\nis_matching = expected_data(data)",
                          "successors": []
                        },
                        {
                          "id": 83,
                          "label": "#83\nis_matching = False",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "SpinTestServer",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\nself.db_api = DatabaseManager()\nself.exec_manager = ExecutionManager()\nself.agent_server = AgentServer()\nself.scheduler = ExecutionScheduler()",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "test_get_user_id",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\nreturn '3e53486c-cf57-477e-ba2a-cb02dc828e1a'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "__aenter__",
          "type": "CFG",
          "blocks": [
            {
              "id": 12,
              "label": "#12\nself.setup_dependency_overrides()\nself.db_api.__enter__()\nself.agent_server.__enter__()\nself.exec_manager.__enter__()\nself.scheduler.__enter__()\nawait db.connect()",
              "successors": [
                {
                  "id": 13,
                  "label": "#13\nawait initialize_blocks()",
                  "successors": [
                    {
                      "id": 14,
                      "label": "#14\nawait create_default_user()",
                      "successors": [
                        {
                          "id": 15,
                          "label": "#15\nreturn self",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "__aexit__",
          "type": "CFG",
          "blocks": [
            {
              "id": 19,
              "label": "#19\nawait db.disconnect()",
              "successors": [
                {
                  "id": 20,
                  "label": "#20\nself.scheduler.__exit__(exc_type, exc_val, exc_tb)\nself.exec_manager.__exit__(exc_type, exc_val, exc_tb)\nself.agent_server.__exit__(exc_type, exc_val, exc_tb)\nself.db_api.__exit__(exc_type, exc_val, exc_tb)",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "setup_dependency_overrides",
          "type": "CFG",
          "blocks": [
            {
              "id": 23,
              "label": "#23\nself.agent_server.set_test_dependency_overrides({get_user_id: self.\n    test_get_user_id})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}