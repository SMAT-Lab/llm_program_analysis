{
  "name": "200.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport ipaddress\nimport re\nimport socket\nfrom typing import Callable\nfrom urllib.parse import urlparse, urlunparse\nimport idna\nimport requests as req\nfrom backend.util.settings import Config\nBLOCKED_IP_NETWORKS = [ipaddress.ip_network('0.0.0.0/8'), ipaddress.\n    ip_network('10.0.0.0/8'), ipaddress.ip_network('127.0.0.0/8'),\n    ipaddress.ip_network('169.254.0.0/16'), ipaddress.ip_network(\n    '172.16.0.0/12'), ipaddress.ip_network('192.168.0.0/16'), ipaddress.\n    ip_network('224.0.0.0/4'), ipaddress.ip_network('240.0.0.0/4')]\nALLOWED_SCHEMES = ['http', 'https']\nHOSTNAME_REGEX = re.compile('^[A-Za-z0-9.-]+$')\nrequests = Requests(trusted_origins=Config().trust_endpoints_for_requests)",
      "successors": []
    }
  ],
  "functions": [
    {
      "name": "_canonicalize_url",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nurl = url.strip().strip('/')\nif not url.startswith(('http://', 'https://')):",
          "successors": [
            {
              "id": 4,
              "label": "#4\nurl = 'http://' + url",
              "successors": [
                {
                  "id": 5,
                  "label": "#5\nurl = url.replace('\\\\', '/')\nreturn url",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "_is_ip_blocked",
      "type": "CFG",
      "blocks": [
        {
          "id": 9,
          "label": "#9\n\"\"\"\n    Checks if the IP address is in a blocked network.\n    \"\"\"\nip_addr = ipaddress.ip_address(ip)\nreturn any(ip_addr in network for network in BLOCKED_IP_NETWORKS)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "validate_url",
      "type": "CFG",
      "blocks": [
        {
          "id": 13,
          "label": "#13\n\"\"\"\n    Validates the URL to prevent SSRF attacks by ensuring it does not point to a private\n    or untrusted IP address, unless whitelisted.\n    \"\"\"\nurl = _canonicalize_url(url)\nparsed = urlparse(url)\nif parsed.scheme not in ALLOWED_SCHEMES:",
          "successors": [
            {
              "id": 14,
              "label": "#14\nraise ValueError(\n    f\"Scheme '{parsed.scheme}' is not allowed. Only HTTP/HTTPS are supported.\")",
              "successors": []
            },
            {
              "id": 15,
              "label": "#15\nif not parsed.hostname:",
              "successors": [
                {
                  "id": 17,
                  "label": "#17\nraise ValueError('Invalid URL: No hostname found.')",
                  "successors": []
                },
                {
                  "id": 18,
                  "label": "#18\ntry:",
                  "successors": [
                    {
                      "id": 20,
                      "label": "#20\nascii_hostname = idna.encode(parsed.hostname).decode('ascii')",
                      "successors": [
                        {
                          "id": 22,
                          "label": "#22\nif not HOSTNAME_REGEX.match(ascii_hostname):",
                          "successors": [
                            {
                              "id": 24,
                              "label": "#24\nraise ValueError('Hostname contains invalid characters.')",
                              "successors": []
                            },
                            {
                              "id": 25,
                              "label": "#25\nparsed = parsed._replace(netloc=ascii_hostname)\nurl = str(urlunparse(parsed))\nif ascii_hostname in trusted_origins:",
                              "successors": [
                                {
                                  "id": 27,
                                  "label": "#27\nreturn url",
                                  "successors": []
                                },
                                {
                                  "id": 28,
                                  "label": "#28\ntry:",
                                  "successors": [
                                    {
                                      "id": 30,
                                      "label": "#30\nip_addresses = {res[4][0] for res in socket.getaddrinfo(ascii_hostname, None)}",
                                      "successors": [
                                        {
                                          "id": 32,
                                          "label": "#32\nif not ip_addresses:",
                                          "successors": [
                                            {
                                              "id": 34,
                                              "label": "#34\nraise ValueError(f'No IP addresses found for {ascii_hostname}')",
                                              "successors": []
                                            },
                                            {
                                              "id": 35,
                                              "label": "#35\nfor ip in ip_addresses:",
                                              "successors": [
                                                {
                                                  "id": 37,
                                                  "label": "#37\nif _is_ip_blocked(ip):",
                                                  "successors": [
                                                    {
                                                      "id": 39,
                                                      "label": "#39\nraise ValueError(\n    f'Access to private IP address {ip} for hostname {ascii_hostname} is not allowed.'\n    )",
                                                      "successors": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "id": 38,
                                                  "label": "#38\nreturn url",
                                                  "successors": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "id": 31,
                                      "label": "#31\nraise ValueError(f'Unable to resolve IP address for hostname {ascii_hostname}')",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 21,
                      "label": "#21\nraise ValueError('Invalid hostname with unsupported characters.')",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "Requests",
      "type": "CFG",
      "blocks": [
        {
          "id": 45,
          "label": "#45\n\"\"\"\n    A wrapper around the requests library that validates URLs before making requests.\n    \"\"\"",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 47,
              "label": "#47\nself.trusted_origins = []",
              "successors": [
                {
                  "id": 48,
                  "label": "#48\nfor url in (trusted_origins or []):",
                  "successors": [
                    {
                      "id": 49,
                      "label": "#49\nhostname = urlparse(url).hostname\nif not hostname:",
                      "successors": [
                        {
                          "id": 51,
                          "label": "#51\nraise ValueError(f'Invalid URL: Unable to determine hostname of {url}')",
                          "successors": []
                        },
                        {
                          "id": 52,
                          "label": "#52\nself.trusted_origins.append(hostname)",
                          "successors": []
                        }
                      ]
                    },
                    {
                      "id": 50,
                      "label": "#50\nself.raise_for_status = raise_for_status\nself.extra_url_validator = extra_url_validator\nself.extra_headers = extra_headers",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "request",
          "type": "CFG",
          "blocks": [
            {
              "id": 56,
              "label": "#56\nif self.extra_headers is not None:",
              "successors": [
                {
                  "id": 57,
                  "label": "#57\nheaders = {**headers or {}, **self.extra_headers}",
                  "successors": [
                    {
                      "id": 58,
                      "label": "#58\nurl = validate_url(url, self.trusted_origins)\nif self.extra_url_validator is not None:",
                      "successors": [
                        {
                          "id": 59,
                          "label": "#59\nurl = self.extra_url_validator(url)",
                          "successors": [
                            {
                              "id": 60,
                              "label": "#60\nresponse = req.request(method, url, *args, headers=headers, allow_redirects\n    =allow_redirects, **kwargs)\nif self.raise_for_status:",
                              "successors": [
                                {
                                  "id": 61,
                                  "label": "#61\nresponse.raise_for_status()",
                                  "successors": [
                                    {
                                      "id": 62,
                                      "label": "#62\nreturn response",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "get",
          "type": "CFG",
          "blocks": [
            {
              "id": 66,
              "label": "#66\nreturn self.request('GET', url, *args, **kwargs)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "post",
          "type": "CFG",
          "blocks": [
            {
              "id": 70,
              "label": "#70\nreturn self.request('POST', url, *args, **kwargs)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "put",
          "type": "CFG",
          "blocks": [
            {
              "id": 74,
              "label": "#74\nreturn self.request('PUT', url, *args, **kwargs)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "delete",
          "type": "CFG",
          "blocks": [
            {
              "id": 78,
              "label": "#78\nreturn self.request('DELETE', url, *args, **kwargs)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "head",
          "type": "CFG",
          "blocks": [
            {
              "id": 82,
              "label": "#82\nreturn self.request('HEAD', url, *args, **kwargs)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "options",
          "type": "CFG",
          "blocks": [
            {
              "id": 86,
              "label": "#86\nreturn self.request('OPTIONS', url, *args, **kwargs)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "patch",
          "type": "CFG",
          "blocks": [
            {
              "id": 90,
              "label": "#90\nreturn self.request('PATCH', url, *args, **kwargs)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}