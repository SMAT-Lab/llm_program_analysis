{
  "name": "172.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\n\"\"\"\nThe command line interface for the agent server\n\"\"\"\nimport os\nimport pathlib\nimport click\nimport psutil\nfrom backend import app\nfrom backend.util.process import AppProcess\nmain.add_command(test)\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 92,
          "label": "#92\nmain()",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_pid_path",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\nhome_dir = pathlib.Path.home()\nnew_dir = home_dir / '.config' / 'agpt'\nfile_path = new_dir / 'running.tmp'\nreturn file_path",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_pid",
      "type": "CFG",
      "blocks": [
        {
          "id": 7,
          "label": "#7\nfile_path = get_pid_path()\nif not file_path.exists():",
          "successors": [
            {
              "id": 8,
              "label": "#8\nreturn None",
              "successors": []
            },
            {
              "id": 9,
              "label": "#9\nos.makedirs(file_path.parent, exist_ok=True)\nwith open(file_path, 'r', encoding='utf-8') as file:",
              "successors": [
                {
                  "id": 11,
                  "label": "#11\npid = file.read()",
                  "successors": [
                    {
                      "id": 12,
                      "label": "#12\ntry:",
                      "successors": [
                        {
                          "id": 13,
                          "label": "#13\nreturn int(pid)",
                          "successors": []
                        },
                        {
                          "id": 14,
                          "label": "#14\nreturn None",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "write_pid",
      "type": "CFG",
      "blocks": [
        {
          "id": 20,
          "label": "#20\nfile_path = get_pid_path()\nos.makedirs(file_path.parent, exist_ok=True)\nwith open(file_path, 'w', encoding='utf-8') as file:",
          "successors": [
            {
              "id": 21,
              "label": "#21\nfile.write(str(pid))",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "main",
      "type": "CFG",
      "blocks": [
        {
          "id": 31,
          "label": "#31\n\"\"\"AutoGPT Server CLI Tool\"\"\"\npass",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "start",
      "type": "CFG",
      "blocks": [
        {
          "id": 34,
          "label": "#34\n\"\"\"\n    Starts the server in the background and saves the PID\n    \"\"\"\npid = get_pid()\nif pid and psutil.pid_exists(pid):",
          "successors": [
            {
              "id": 35,
              "label": "#35\nprint('Server is already running')\nexit(1)",
              "successors": [
                {
                  "id": 36,
                  "label": "#36\nprint('Starting server')\npid = MainApp().start(background=True, silent=True)\nprint(f'Server running in process: {pid}')\nwrite_pid(pid)\nprint('done')\nos._exit(status=0)",
                  "successors": []
                }
              ]
            },
            {
              "id": 37,
              "label": "#37\nif pid:",
              "successors": [
                {
                  "id": 38,
                  "label": "#38\nprint('PID does not exist deleting file')\nos.remove(get_pid_path())",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "stop",
      "type": "CFG",
      "blocks": [
        {
          "id": 42,
          "label": "#42\n\"\"\"\n    Stops the server\n    \"\"\"\npid = get_pid()\nif not pid:",
          "successors": [
            {
              "id": 43,
              "label": "#43\nprint('Server is not running')\nreturn",
              "successors": []
            },
            {
              "id": 44,
              "label": "#44\nos.remove(get_pid_path())\nprocess = psutil.Process(int(pid))",
              "successors": [
                {
                  "id": 46,
                  "label": "#46\nfor child in process.children(recursive=True):",
                  "successors": [
                    {
                      "id": 47,
                      "label": "#47\nchild.terminate()",
                      "successors": []
                    },
                    {
                      "id": 48,
                      "label": "#48\nprocess.terminate()\nprint('Server Stopped')",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "gen_encrypt_key",
      "type": "CFG",
      "blocks": [
        {
          "id": 51,
          "label": "#51\n\"\"\"\n    Generate a new encryption key\n    \"\"\"\nfrom cryptography.fernet import Fernet\nprint(Fernet.generate_key().decode())",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "test",
      "type": "CFG",
      "blocks": [
        {
          "id": 54,
          "label": "#54\n\"\"\"\n    Group for test commands\n    \"\"\"\npass",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "reddit",
      "type": "CFG",
      "blocks": [
        {
          "id": 57,
          "label": "#57\n\"\"\"\n    Create an event graph\n    \"\"\"\nimport requests\nfrom backend.usecases.reddit_marketing import create_test_graph\ntest_graph = create_test_graph()\nurl = f'{server_address}/graphs'\nheaders = {'Content-Type': 'application/json'}\ndata = test_graph.model_dump_json()\nresponse = requests.post(url, headers=headers, data=data)\ngraph_id = response.json()['id']\nprint(f'Graph created with ID: {graph_id}')",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "populate_db",
      "type": "CFG",
      "blocks": [
        {
          "id": 60,
          "label": "#60\n\"\"\"\n    Create an event graph\n    \"\"\"\nimport requests\nfrom backend.usecases.sample import create_test_graph\ntest_graph = create_test_graph()\nurl = f'{server_address}/graphs'\nheaders = {'Content-Type': 'application/json'}\ndata = test_graph.model_dump_json()\nresponse = requests.post(url, headers=headers, data=data)\ngraph_id = response.json()['id']\nif response.status_code == 200:",
          "successors": [
            {
              "id": 61,
              "label": "#61\nexecute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\ntext = 'Hello, World!'\ninput_data = {'input': text}\nresponse = requests.post(execute_url, headers=headers, json=input_data)\nschedule_url = f'{server_address}/graphs/{graph_id}/schedules'\ndata = {'graph_id': graph_id, 'cron': '*/5 * * * *', 'input_data': {'input':\n    'Hello, World!'}}\nresponse = requests.post(schedule_url, headers=headers, json=data)",
              "successors": [
                {
                  "id": 62,
                  "label": "#62\nprint(\"\"\"Database populated with: \n- graph\n- execution\n- schedule\"\"\")",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "graph",
      "type": "CFG",
      "blocks": [
        {
          "id": 65,
          "label": "#65\n\"\"\"\n    Create an event graph\n    \"\"\"\nimport requests\nfrom backend.usecases.sample import create_test_graph\nurl = f'{server_address}/graphs'\nheaders = {'Content-Type': 'application/json'}\ndata = create_test_graph().model_dump_json()\nresponse = requests.post(url, headers=headers, data=data)\nif response.status_code == 200:",
          "successors": [
            {
              "id": 66,
              "label": "#66\nprint(response.json()['id'])\nexecute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\ntext = 'Hello, World!'\ninput_data = {'input': text}\nresponse = requests.post(execute_url, headers=headers, json=input_data)",
              "successors": []
            },
            {
              "id": 68,
              "label": "#68\nprint('Failed to send graph')\nprint(f'Response: {response.text}')",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "execute",
      "type": "CFG",
      "blocks": [
        {
          "id": 71,
          "label": "#71\n\"\"\"\n    Create an event graph\n    \"\"\"\nimport requests\nheaders = {'Content-Type': 'application/json'}\nexecute_url = f'http://0.0.0.0:8000/graphs/{graph_id}/execute'\nrequests.post(execute_url, headers=headers, json=content)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "event",
      "type": "CFG",
      "blocks": [
        {
          "id": 74,
          "label": "#74\n\"\"\"\n    Send an event to the running server\n    \"\"\"\nprint('Event sent')",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "websocket",
      "type": "CFG",
      "blocks": [
        {
          "id": 77,
          "label": "#77\n\"\"\"\n    Tests the websocket connection.\n    \"\"\"\nimport asyncio\nimport websockets.asyncio.client\nfrom backend.server.ws_api import ExecutionSubscription, Methods, WsMessage\nasyncio.run(send_message(server_address))\nprint('Testing WS')",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "send_message",
          "type": "CFG",
          "blocks": [
            {
              "id": 79,
              "label": "#79\nuri = f'ws://{server_address}'\nasync with websockets.asyncio.client.connect(uri) as websocket:\n    try:\n        msg = WsMessage(method=Methods.SUBSCRIBE, data=\n            ExecutionSubscription(graph_id=graph_id).model_dump()\n            ).model_dump_json()\n        await websocket.send(msg)\n        print(f'Sending: {msg}')\n        while True:\n            response = await websocket.recv()\n            print(f'Response from server: {response}')\n    except InterruptedError:\n        exit(0)",
              "successors": [
                {
                  "id": 80,
                  "label": "#80\ntry:",
                  "successors": [
                    {
                      "id": 82,
                      "label": "#82\nmsg = WsMessage(method=Methods.SUBSCRIBE, data=ExecutionSubscription(\n    graph_id=graph_id).model_dump()).model_dump_json()\nawait websocket.send(msg)",
                      "successors": [
                        {
                          "id": 85,
                          "label": "#85\nprint(f'Sending: {msg}')",
                          "successors": [
                            {
                              "id": 86,
                              "label": "#86\nwhile True:",
                              "successors": [
                                {
                                  "id": 87,
                                  "label": "#87\nresponse = await websocket.recv()",
                                  "successors": [
                                    {
                                      "id": 89,
                                      "label": "#89\nprint(f'Response from server: {response}')",
                                      "successors": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "id": 83,
                      "label": "#83\nexit(0)",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "MainApp",
      "type": "CFG",
      "blocks": [
        {
          "id": 25,
          "label": "#25",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 27,
              "label": "#27\napp.main(silent=True)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}