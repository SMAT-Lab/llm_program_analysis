{
  "name": "131.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nimport logging\nfrom typing import TYPE_CHECKING, AsyncGenerator, Optional\nfrom prisma import Json\nfrom prisma.models import IntegrationWebhook\nfrom pydantic import Field, computed_field\nfrom backend.data.includes import INTEGRATION_WEBHOOK_INCLUDE\nfrom backend.data.queue import AsyncRedisEventBus\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks.utils import webhook_ingress_url\nfrom .db import BaseDbModel\nif TYPE_CHECKING:",
      "successors": [
        {
          "id": 2,
          "label": "#2\nfrom .graph import NodeModel",
          "successors": [
            {
              "id": 3,
              "label": "#3\nlogger = logging.getLogger(__name__)\n_webhook_event_bus = WebhookEventBus()",
              "successors": []
            }
          ]
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "create_webhook",
      "type": "CFG",
      "blocks": [
        {
          "id": 16,
          "label": "#16\ncreated_webhook = await IntegrationWebhook.prisma().create(data={'id':\n    webhook.id, 'userId': webhook.user_id, 'provider': webhook.provider.\n    value, 'credentialsId': webhook.credentials_id, 'webhookType': webhook.\n    webhook_type, 'resource': webhook.resource, 'events': webhook.events,\n    'config': Json(webhook.config), 'secret': webhook.secret,\n    'providerWebhookId': webhook.provider_webhook_id})",
          "successors": [
            {
              "id": 17,
              "label": "#17\nreturn Webhook.from_db(created_webhook)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_webhook",
      "type": "CFG",
      "blocks": [
        {
          "id": 21,
          "label": "#21\n\"\"\"\u26a0\ufe0f No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\nwebhook = await IntegrationWebhook.prisma().find_unique_or_raise(where={\n    'id': webhook_id}, include=INTEGRATION_WEBHOOK_INCLUDE)",
          "successors": [
            {
              "id": 22,
              "label": "#22\nreturn Webhook.from_db(webhook)",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "get_all_webhooks_by_creds",
      "type": "CFG",
      "blocks": [
        {
          "id": 26,
          "label": "#26\n\"\"\"\u26a0\ufe0f No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\nif not credentials_id:",
          "successors": [
            {
              "id": 27,
              "label": "#27\nraise ValueError('credentials_id must not be empty')",
              "successors": []
            },
            {
              "id": 28,
              "label": "#28\nwebhooks = await IntegrationWebhook.prisma().find_many(where={\n    'credentialsId': credentials_id}, include=INTEGRATION_WEBHOOK_INCLUDE)",
              "successors": [
                {
                  "id": 30,
                  "label": "#30\nreturn [Webhook.from_db(webhook) for webhook in webhooks]",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "find_webhook_by_credentials_and_props",
      "type": "CFG",
      "blocks": [
        {
          "id": 34,
          "label": "#34\n\"\"\"\u26a0\ufe0f No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\nwebhook = await IntegrationWebhook.prisma().find_first(where={\n    'credentialsId': credentials_id, 'webhookType': webhook_type,\n    'resource': resource, 'events': {'has_every': events}}, include=\n    INTEGRATION_WEBHOOK_INCLUDE)",
          "successors": [
            {
              "id": 35,
              "label": "#35\nreturn Webhook.from_db(webhook) if webhook else None",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "find_webhook_by_graph_and_props",
      "type": "CFG",
      "blocks": [
        {
          "id": 39,
          "label": "#39\n\"\"\"\u26a0\ufe0f No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\nwebhook = await IntegrationWebhook.prisma().find_first(where={'provider':\n    provider, 'webhookType': webhook_type, 'events': {'has_every': events},\n    'AgentNodes': {'some': {'agentGraphId': graph_id}}}, include=\n    INTEGRATION_WEBHOOK_INCLUDE)",
          "successors": [
            {
              "id": 40,
              "label": "#40\nreturn Webhook.from_db(webhook) if webhook else None",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "update_webhook_config",
      "type": "CFG",
      "blocks": [
        {
          "id": 44,
          "label": "#44\n\"\"\"\u26a0\ufe0f No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\n_updated_webhook = await IntegrationWebhook.prisma().update(where={'id':\n    webhook_id}, data={'config': Json(updated_config)}, include=\n    INTEGRATION_WEBHOOK_INCLUDE)",
          "successors": [
            {
              "id": 45,
              "label": "#45\nif _updated_webhook is None:",
              "successors": [
                {
                  "id": 46,
                  "label": "#46\nraise ValueError(f'Webhook #{webhook_id} not found')",
                  "successors": []
                },
                {
                  "id": 47,
                  "label": "#47\nreturn Webhook.from_db(_updated_webhook)",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "delete_webhook",
      "type": "CFG",
      "blocks": [
        {
          "id": 52,
          "label": "#52\n\"\"\"\u26a0\ufe0f No `user_id` check: DO NOT USE without check in user-facing endpoints.\"\"\"\ndeleted = await IntegrationWebhook.prisma().delete(where={'id': webhook_id})",
          "successors": [
            {
              "id": 53,
              "label": "#53\nif not deleted:",
              "successors": [
                {
                  "id": 54,
                  "label": "#54\nraise ValueError(f'Webhook #{webhook_id} not found')",
                  "successors": []
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "publish_webhook_event",
      "type": "CFG",
      "blocks": [
        {
          "id": 69,
          "label": "#69\nawait _webhook_event_bus.publish_event(event,\n    f'{event.webhook_id}/{event.event_type}')",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "listen_for_webhook_events",
      "type": "CFG",
      "blocks": [
        {
          "id": 73,
          "label": "#73\nasync for event in _webhook_event_bus.listen_events(\n    f\"{webhook_id}/{event_type or '*'}\"):\n    yield event",
          "successors": [
            {
              "id": 74,
              "label": "#74\nyield event",
              "successors": []
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "wait_for_webhook_event",
      "type": "CFG",
      "blocks": [
        {
          "id": 79,
          "label": "#79\nreturn await _webhook_event_bus.wait_for_event(\n    f\"{webhook_id}/{event_type or '*'}\", timeout)",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": [
    {
      "name": "Webhook",
      "type": "CFG",
      "blocks": [
        {
          "id": 5,
          "label": "#5\nuser_id: str\nprovider: ProviderName\ncredentials_id: str\nwebhook_type: str\nresource: str\nevents: list[str]\nconfig: dict = Field(default_factory=dict)\nsecret: str\nprovider_webhook_id: str\nattached_nodes: Optional[list['NodeModel']] = None",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "url",
          "type": "CFG",
          "blocks": [
            {
              "id": 7,
              "label": "#7\nreturn webhook_ingress_url(self.provider.value, self.id)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "from_db",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nfrom .graph import NodeModel\nreturn Webhook(id=webhook.id, user_id=webhook.userId, provider=ProviderName\n    (webhook.provider), credentials_id=webhook.credentialsId, webhook_type=\n    webhook.webhookType, resource=webhook.resource, events=webhook.events,\n    config=dict(webhook.config), secret=webhook.secret, provider_webhook_id\n    =webhook.providerWebhookId, attached_nodes=[NodeModel.from_db(node) for\n    node in webhook.AgentNodes] if webhook.AgentNodes is not None else None)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    },
    {
      "name": "WebhookEvent",
      "type": "CFG",
      "blocks": [
        {
          "id": 59,
          "label": "#59\nprovider: str\nwebhook_id: str\nevent_type: str\npayload: dict",
          "successors": []
        }
      ],
      "functions": [],
      "classes": []
    },
    {
      "name": "WebhookEventBus",
      "type": "CFG",
      "blocks": [
        {
          "id": 62,
          "label": "#62\nModel = WebhookEvent",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "event_bus_name",
          "type": "CFG",
          "blocks": [
            {
              "id": 64,
              "label": "#64\nreturn 'webhooks'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": []
    }
  ]
}