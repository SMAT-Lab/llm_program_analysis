{
  "name": "199.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nif __name__ == '__main__':",
      "successors": [
        {
          "id": 12,
          "label": "#12\n\"\"\"\n    Finding the index of rightmost set bit has some very peculiar use-cases,\n    especially in finding missing or/and repeating numbers in a list of\n    positive integers.\n    \"\"\"\nimport doctest\ndoctest.testmod(verbose=True)",
          "successors": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_index_of_rightmost_set_bit",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    Take in a positive integer 'number'.\n    Returns the zero-based index of first set bit in that 'number' from right.\n    Returns -1, If no set bit found.\n\n    >>> get_index_of_rightmost_set_bit(0)\n    -1\n    >>> get_index_of_rightmost_set_bit(5)\n    0\n    >>> get_index_of_rightmost_set_bit(36)\n    2\n    >>> get_index_of_rightmost_set_bit(8)\n    3\n    >>> get_index_of_rightmost_set_bit(-18)\n    Traceback (most recent call last):\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit('test')\n    Traceback (most recent call last):\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit(1.25)\n    Traceback (most recent call last):\n    ValueError: Input must be a non-negative integer\n    \"\"\"\nif not isinstance(number, int) or number < 0:",
          "successors": [
            {
              "id": 4,
              "label": "#4\nraise ValueError('Input must be a non-negative integer')",
              "successors": []
            },
            {
              "id": 5,
              "label": "#5\nintermediate = number & ~(number - 1)\nindex = 0",
              "successors": [
                {
                  "id": 7,
                  "label": "#7\nwhile intermediate:",
                  "successors": [
                    {
                      "id": 8,
                      "label": "#8\nintermediate >>= 1\nindex += 1",
                      "successors": []
                    },
                    {
                      "id": 9,
                      "label": "#9\nreturn index - 1",
                      "successors": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "functions": [],
      "classes": []
    }
  ],
  "classes": []
}