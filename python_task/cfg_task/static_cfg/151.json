{
  "name": "151.py",
  "type": "CFG",
  "blocks": [
    {
      "id": 1,
      "label": "#1\nfrom typing import Any, List\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema, BlockType\nfrom backend.data.model import SchemaField\nfrom backend.util.mock import MockObject\nfrom backend.util.text import TextFormatter\nformatter = TextFormatter()",
      "successors": []
    }
  ],
  "functions": [],
  "classes": [
    {
      "name": "StoreValueBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 3,
          "label": "#3\n\"\"\"\n    This block allows you to provide a constant value as a block, in a stateless manner.\n    The common use-case is simply pass the `input` data, it will `output` the same data.\n    The block output will be static, the output can be consumed multiple times.\n    \"\"\"",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 11,
              "label": "#11\nsuper().__init__(id='1ff065e9-88e8-4358-9d82-8dc91f622ba9', description=\n    'This block forwards an input value as output, allowing reuse without change.'\n    , categories={BlockCategory.BASIC}, input_schema=StoreValueBlock.Input,\n    output_schema=StoreValueBlock.Output, test_input=[{'input':\n    'Hello, World!'}, {'input': 'Hello, World!', 'data': 'Existing Data'}],\n    test_output=[('output', 'Hello, World!'), ('output', 'Existing Data')],\n    static_output=True)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 14,
              "label": "#14\nyield 'output', input_data.data or input_data.input",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 5,
              "label": "#5\ninput: Any = SchemaField(description=\n    'Trigger the block to produce the output. The value is only used when `data` is None.'\n    )\ndata: Any = SchemaField(description=\n    'The constant data to be retained in the block. This value is passed as `output`.'\n    , default=None)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 8,
              "label": "#8\noutput: Any = SchemaField(description='The stored data retained in the block.')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "PrintToConsoleBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 19,
          "label": "#19",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 27,
              "label": "#27\nsuper().__init__(id='f3b1c1b2-4c4f-4f0d-8d2f-4c4f0d8d2f4c', description=\n    'Print the given text to the console, this is used for a debugging purpose.'\n    , categories={BlockCategory.BASIC}, input_schema=PrintToConsoleBlock.\n    Input, output_schema=PrintToConsoleBlock.Output, test_input={'text':\n    'Hello, World!'}, test_output=('status', 'printed'))",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 30,
              "label": "#30\nprint('>>>>> Print: ', input_data.text)\nyield 'status', 'printed'",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 21,
              "label": "#21\ntext: str = SchemaField(description='The text to print to the console.')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 24,
              "label": "#24\nstatus: str = SchemaField(description='The status of the print operation.')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "FindInDictionaryBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 35,
          "label": "#35",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 43,
              "label": "#43\nsuper().__init__(id='0e50422c-6dee-4145-83d6-3a5a392f65de', description=\n    'Lookup the given key in the input dictionary/object/list and return the value.'\n    , input_schema=FindInDictionaryBlock.Input, output_schema=\n    FindInDictionaryBlock.Output, test_input=[{'input': {'apple': 1,\n    'banana': 2, 'cherry': 3}, 'key': 'banana'}, {'input': {'x': 10, 'y': \n    20, 'z': 30}, 'key': 'w'}, {'input': [1, 2, 3], 'key': 1}, {'input': [1,\n    2, 3], 'key': 3}, {'input': MockObject(value='!!', key='key'), 'key':\n    'key'}, {'input': [{'k1': 'v1'}, {'k2': 'v2'}, {'k1': 'v3'}], 'key':\n    'k1'}], test_output=[('output', 2), ('missing', {'x': 10, 'y': 20, 'z':\n    30}), ('output', 2), ('missing', [1, 2, 3]), ('output', 'key'), (\n    'output', ['v1', 'v3'])], categories={BlockCategory.BASIC})",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 46,
              "label": "#46\nobj = input_data.input\nkey = input_data.key\nif isinstance(obj, dict) and key in obj:",
              "successors": [
                {
                  "id": 47,
                  "label": "#47\nyield 'output', obj[key]",
                  "successors": []
                },
                {
                  "id": 49,
                  "label": "#49\nif isinstance(obj, list) and isinstance(key, int) and 0 <= key < len(obj):",
                  "successors": [
                    {
                      "id": 50,
                      "label": "#50\nyield 'output', obj[key]",
                      "successors": []
                    },
                    {
                      "id": 52,
                      "label": "#52\nif isinstance(obj, list) and isinstance(key, str):",
                      "successors": [
                        {
                          "id": 53,
                          "label": "#53\nif len(obj) == 0:",
                          "successors": [
                            {
                              "id": 61,
                              "label": "#61\nyield 'output', []",
                              "successors": []
                            },
                            {
                              "id": 63,
                              "label": "#63\nif isinstance(obj[0], dict) and key in obj[0]:",
                              "successors": [
                                {
                                  "id": 64,
                                  "label": "#64\nyield 'output', [item[key] for item in obj if key in item]",
                                  "successors": []
                                },
                                {
                                  "id": 66,
                                  "label": "#66\nyield 'output', [getattr(val, key) for val in obj if hasattr(val, key)]",
                                  "successors": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "id": 55,
                          "label": "#55\nif isinstance(obj, object) and isinstance(key, str) and hasattr(obj, key):",
                          "successors": [
                            {
                              "id": 56,
                              "label": "#56\nyield 'output', getattr(obj, key)",
                              "successors": []
                            },
                            {
                              "id": 58,
                              "label": "#58\nyield 'missing', input_data.input",
                              "successors": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 37,
              "label": "#37\ninput: Any = SchemaField(description='Dictionary to lookup from')\nkey: str | int = SchemaField(description='Key to lookup in the dictionary')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 40,
              "label": "#40\noutput: Any = SchemaField(description='Value found for the given key')\nmissing: Any = SchemaField(description=\n    'Value of the input that missing the key')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "AgentInputBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 75,
          "label": "#75\n\"\"\"\n    This block is used to provide input to the graph.\n\n    It takes in a value, name, description, default values list and bool to limit selection to default values.\n\n    It Outputs the value passed as input.\n    \"\"\"",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 83,
              "label": "#83\nsuper().__init__(id='c0a8e994-ebf1-4a9c-a4d8-89d09c86741b', description=\n    'This block is used to provide input to the graph.', input_schema=\n    AgentInputBlock.Input, output_schema=AgentInputBlock.Output, test_input\n    =[{'value': 'Hello, World!', 'name': 'input_1', 'description':\n    'This is a test input.', 'placeholder_values': [],\n    'limit_to_placeholder_values': False}, {'value': 'Hello, World!',\n    'name': 'input_2', 'description': 'This is a test input.',\n    'placeholder_values': ['Hello, World!'], 'limit_to_placeholder_values':\n    True}], test_output=[('result', 'Hello, World!'), ('result',\n    'Hello, World!')], categories={BlockCategory.INPUT, BlockCategory.BASIC\n    }, block_type=BlockType.INPUT, static_output=True)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 86,
              "label": "#86\nyield 'result', input_data.value",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 77,
              "label": "#77\nname: str = SchemaField(description='The name of the input.')\nvalue: Any = SchemaField(description='The value to be passed as input.',\n    default=None)\ntitle: str | None = SchemaField(description='The title of the input.',\n    default=None, advanced=True)\ndescription: str | None = SchemaField(description=\n    'The description of the input.', default=None, advanced=True)\nplaceholder_values: List[Any] = SchemaField(description=\n    'The placeholder values to be passed as input.', default=[], advanced=True)\nlimit_to_placeholder_values: bool = SchemaField(description=\n    'Whether to limit the selection to placeholder values.', default=False,\n    advanced=True)\nadvanced: bool = SchemaField(description=\n    'Whether to show the input in the advanced section, if the field is not required.'\n    , default=False, advanced=True)\nsecret: bool = SchemaField(description=\n    'Whether the input should be treated as a secret.', default=False,\n    advanced=True)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 80,
              "label": "#80\nresult: Any = SchemaField(description='The value passed as input.')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "AgentOutputBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 91,
          "label": "#91\n\"\"\"\n    Records the output of the graph for users to see.\n\n    Behavior:\n        If `format` is provided and the `value` is of a type that can be formatted,\n        the block attempts to format the recorded_value using the `format`.\n        If formatting fails or no `format` is provided, the raw `value` is output.\n    \"\"\"",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 99,
              "label": "#99\nsuper().__init__(id='363ae599-353e-4804-937e-b2ee3cef3da4', description=\n    'Stores the output of the graph for users to see.', input_schema=\n    AgentOutputBlock.Input, output_schema=AgentOutputBlock.Output,\n    test_input=[{'value': 'Hello, World!', 'name': 'output_1',\n    'description': 'This is a test output.', 'format': '{{ output_1 }}!!'},\n    {'value': '42', 'name': 'output_2', 'description':\n    'This is another test output.', 'format': '{{ output_2 }}'}, {'value':\n    MockObject(value='!!', key='key'), 'name': 'output_3', 'description':\n    'This is a test output with a mock object.', 'format': '{{ output_3 }}'\n    }], test_output=[('output', 'Hello, World!!!'), ('output', '42'), (\n    'output', MockObject(value='!!', key='key'))], categories={\n    BlockCategory.OUTPUT, BlockCategory.BASIC}, block_type=BlockType.OUTPUT,\n    static_output=True)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 102,
              "label": "#102\n\"\"\"\n        Attempts to format the recorded_value using the fmt_string if provided.\n        If formatting fails or no fmt_string is given, returns the original recorded_value.\n        \"\"\"\nif input_data.format:",
              "successors": [
                {
                  "id": 103,
                  "label": "#103\ntry:",
                  "successors": [
                    {
                      "id": 107,
                      "label": "#107\nyield 'output', formatter.format_string(input_data.format, {input_data.name:\n    input_data.value})",
                      "successors": []
                    },
                    {
                      "id": 108,
                      "label": "#108\nyield 'output', f'Error: {e}, {input_data.value}'",
                      "successors": []
                    }
                  ]
                },
                {
                  "id": 105,
                  "label": "#105\nyield 'output', input_data.value",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 93,
              "label": "#93\nvalue: Any = SchemaField(description='The value to be recorded as output.',\n    default=None, advanced=False)\nname: str = SchemaField(description='The name of the output.')\ntitle: str | None = SchemaField(description='The title of the output.',\n    default=None, advanced=True)\ndescription: str | None = SchemaField(description=\n    'The description of the output.', default=None, advanced=True)\nformat: str = SchemaField(description=\n    'The format string to be used to format the recorded_value.', default=\n    '', advanced=True)\nadvanced: bool = SchemaField(description=\n    'Whether to treat the output as advanced.', default=False, advanced=True)\nsecret: bool = SchemaField(description=\n    'Whether the output should be treated as a secret.', default=False,\n    advanced=True)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 96,
              "label": "#96\noutput: Any = SchemaField(description='The value recorded as output.')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "AddToDictionaryBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 115,
          "label": "#115",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 123,
              "label": "#123\nsuper().__init__(id='31d1064e-7446-4693-a7d4-65e5ca1180d1', description=\n    'Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.'\n    , categories={BlockCategory.BASIC}, input_schema=AddToDictionaryBlock.\n    Input, output_schema=AddToDictionaryBlock.Output, test_input=[{\n    'dictionary': {'existing_key': 'existing_value'}, 'key': 'new_key',\n    'value': 'new_value'}, {'key': 'first_key', 'value': 'first_value'}, {\n    'dictionary': {'existing_key': 'existing_value'}, 'entries': {'new_key':\n    'new_value', 'first_key': 'first_value'}}], test_output=[(\n    'updated_dictionary', {'existing_key': 'existing_value', 'new_key':\n    'new_value'}), ('updated_dictionary', {'first_key': 'first_value'}), (\n    'updated_dictionary', {'existing_key': 'existing_value', 'new_key':\n    'new_value', 'first_key': 'first_value'})])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 126,
              "label": "#126\nupdated_dict = input_data.dictionary.copy()\nif input_data.value is not None and input_data.key:",
              "successors": [
                {
                  "id": 127,
                  "label": "#127\nupdated_dict[input_data.key] = input_data.value",
                  "successors": [
                    {
                      "id": 128,
                      "label": "#128\nfor key, value in input_data.entries.items():",
                      "successors": [
                        {
                          "id": 129,
                          "label": "#129\nupdated_dict[key] = value",
                          "successors": []
                        },
                        {
                          "id": 130,
                          "label": "#130\nyield 'updated_dictionary', updated_dict",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 117,
              "label": "#117\ndictionary: dict[Any, Any] = SchemaField(default={}, description=\n    'The dictionary to add the entry to. If not provided, a new dictionary will be created.'\n    )\nkey: str = SchemaField(default='', description='The key for the new entry.',\n    placeholder='new_key', advanced=False)\nvalue: Any = SchemaField(default=None, description=\n    'The value for the new entry.', placeholder='new_value', advanced=False)\nentries: dict[Any, Any] = SchemaField(default={}, description=\n    'The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.'\n    , advanced=True)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 120,
              "label": "#120\nupdated_dictionary: dict = SchemaField(description=\n    'The dictionary with the new entry added.')\nerror: str = SchemaField(description='Error message if the operation failed.')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "AddToListBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 135,
          "label": "#135",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 143,
              "label": "#143\nsuper().__init__(id='aeb08fc1-2fc1-4141-bc8e-f758f183a822', description=\n    'Adds a new entry to a list. The entry can be of any type. If no list is provided, a new one is created.'\n    , categories={BlockCategory.BASIC}, input_schema=AddToListBlock.Input,\n    output_schema=AddToListBlock.Output, test_input=[{'list': [1, 'string',\n    {'existing_key': 'existing_value'}], 'entry': {'new_key': 'new_value'},\n    'position': 1}, {'entry': 'first_entry'}, {'list': ['a', 'b', 'c'],\n    'entry': 'd'}, {'entry': 'e', 'entries': ['f', 'g'], 'list': ['a', 'b'],\n    'position': 1}], test_output=[('updated_list', [1, {'new_key':\n    'new_value'}, 'string', {'existing_key': 'existing_value'}]), (\n    'updated_list', ['first_entry']), ('updated_list', ['a', 'b', 'c', 'd']\n    ), ('updated_list', ['a', 'f', 'g', 'e', 'b'])])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 146,
              "label": "#146\nentries_added = input_data.entries.copy()\nif input_data.entry:",
              "successors": [
                {
                  "id": 147,
                  "label": "#147\nentries_added.append(input_data.entry)",
                  "successors": [
                    {
                      "id": 148,
                      "label": "#148\nupdated_list = input_data.list.copy()\nif (pos := input_data.position) is not None:",
                      "successors": [
                        {
                          "id": 149,
                          "label": "#149\nupdated_list = updated_list[:pos] + entries_added + updated_list[pos:]",
                          "successors": [
                            {
                              "id": 150,
                              "label": "#150\nyield 'updated_list', updated_list",
                              "successors": []
                            }
                          ]
                        },
                        {
                          "id": 151,
                          "label": "#151\nupdated_list += entries_added",
                          "successors": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 137,
              "label": "#137\nlist: List[Any] = SchemaField(default=[], advanced=False, description=\n    'The list to add the entry to. If not provided, a new list will be created.'\n    )\nentry: Any = SchemaField(description=\n    'The entry to add to the list. Can be of any type (string, int, dict, etc.).'\n    , advanced=False, default=None)\nentries: List[Any] = SchemaField(default=[], description=\n    'The entries to add to the list. This is the batch version of the `entry` field.'\n    , advanced=True)\nposition: int | None = SchemaField(default=None, description=\n    'The position to insert the new entry. If not provided, the entry will be appended to the end of the list.'\n    )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 140,
              "label": "#140\nupdated_list: List[Any] = SchemaField(description=\n    'The list with the new entry added.')\nerror: str = SchemaField(description='Error message if the operation failed.')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "NoteBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 156,
          "label": "#156",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 164,
              "label": "#164\nsuper().__init__(id='cc10ff7b-7753-4ff2-9af6-9399b1a7eddc', description=\n    'This block is used to display a sticky note with the given text.',\n    categories={BlockCategory.BASIC}, input_schema=NoteBlock.Input,\n    output_schema=NoteBlock.Output, test_input={'text': 'Hello, World!'},\n    test_output=[('output', 'Hello, World!')], block_type=BlockType.NOTE)",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 167,
              "label": "#167\nyield 'output', input_data.text",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 158,
              "label": "#158\ntext: str = SchemaField(description='The text to display in the sticky note.')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 161,
              "label": "#161\noutput: str = SchemaField(description='The text to display in the sticky note.'\n    )",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "CreateDictionaryBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 172,
          "label": "#172",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 180,
              "label": "#180\nsuper().__init__(id='b924ddf4-de4f-4b56-9a85-358930dcbc91', description=\n    'Creates a dictionary with the specified key-value pairs. Use this when you know all the values you want to add upfront.'\n    , categories={BlockCategory.DATA}, input_schema=CreateDictionaryBlock.\n    Input, output_schema=CreateDictionaryBlock.Output, test_input=[{\n    'values': {'name': 'Alice', 'age': 25, 'city': 'New York'}}, {'values':\n    {'numbers': [1, 2, 3], 'active': True, 'score': 95.5}}], test_output=[(\n    'dictionary', {'name': 'Alice', 'age': 25, 'city': 'New York'}), (\n    'dictionary', {'numbers': [1, 2, 3], 'active': True, 'score': 95.5})])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 183,
              "label": "#183\ntry:",
              "successors": [
                {
                  "id": 184,
                  "label": "#184\nyield 'dictionary', input_data.values",
                  "successors": []
                },
                {
                  "id": 185,
                  "label": "#185\nyield 'error', f'Failed to create dictionary: {str(e)}'",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 174,
              "label": "#174\nvalues: dict[str, Any] = SchemaField(description=\n    'Key-value pairs to create the dictionary with', placeholder=\n    \"e.g., {'name': 'Alice', 'age': 25}\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 177,
              "label": "#177\ndictionary: dict[str, Any] = SchemaField(description=\n    'The created dictionary containing the specified key-value pairs')\nerror: str = SchemaField(description=\n    'Error message if dictionary creation failed')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    },
    {
      "name": "CreateListBlock",
      "type": "CFG",
      "blocks": [
        {
          "id": 192,
          "label": "#192",
          "successors": []
        }
      ],
      "functions": [
        {
          "name": "__init__",
          "type": "CFG",
          "blocks": [
            {
              "id": 200,
              "label": "#200\nsuper().__init__(id='a912d5c7-6e00-4542-b2a9-8034136930e4', description=\n    'Creates a list with the specified values. Use this when you know all the values you want to add upfront.'\n    , categories={BlockCategory.DATA}, input_schema=CreateListBlock.Input,\n    output_schema=CreateListBlock.Output, test_input=[{'values': ['Alice', \n    25, True]}, {'values': [1, 2, 3, 'four', {'key': 'value'}]}],\n    test_output=[('list', ['Alice', 25, True]), ('list', [1, 2, 3, 'four',\n    {'key': 'value'}])])",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "run",
          "type": "CFG",
          "blocks": [
            {
              "id": 203,
              "label": "#203\ntry:",
              "successors": [
                {
                  "id": 204,
                  "label": "#204\nyield 'list', input_data.values",
                  "successors": []
                },
                {
                  "id": 205,
                  "label": "#205\nyield 'error', f'Failed to create list: {str(e)}'",
                  "successors": []
                }
              ]
            }
          ],
          "functions": [],
          "classes": []
        }
      ],
      "classes": [
        {
          "name": "Input",
          "type": "CFG",
          "blocks": [
            {
              "id": 194,
              "label": "#194\nvalues: List[Any] = SchemaField(description=\n    'A list of values to be combined into a new list.', placeholder=\n    \"e.g., ['Alice', 25, True]\")",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        },
        {
          "name": "Output",
          "type": "CFG",
          "blocks": [
            {
              "id": 197,
              "label": "#197\nlist: List[Any] = SchemaField(description=\n    'The created list containing the specified values.')\nerror: str = SchemaField(description='Error message if list creation failed.')",
              "successors": []
            }
          ],
          "functions": [],
          "classes": []
        }
      ]
    }
  ]
}