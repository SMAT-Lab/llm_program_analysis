{
    "type": "module",
    "start_token": 81,
    "end_token": 99,
    "label": "\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
    "children": [
        {
            "type": "function_definition",
            "start_token": 0,
            "end_token": 80,
            "label": "def find_previous_power_of_two(number: int) -> int:\n    \"\"\"\n    Find the largest power of two that is less than or equal to a given integer.\n    https://stackoverflow.com/questions/1322510\n\n    >>> [find_previous_power_of_two(i) for i in range(18)]\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\n    >>> find_previous_power_of_two(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> find_previous_power_of_two(10.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if number == 0:\n        return 0\n    power = 1\n    while power <= number:\n        power <<= 1  # Equivalent to multiplying by 2\n    return power >> 1 if number > 1 else 1\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 1,
                    "end_token": 1,
                    "label": "find_previous_power_of_two",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 2,
                    "end_token": 6,
                    "label": "(number: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 3,
                            "end_token": 5,
                            "label": "number: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 3,
                                    "end_token": 3,
                                    "label": "number",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 5,
                                    "end_token": 5,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "start_token": 8,
                    "end_token": 9,
                    "label": "> int",
                    "children": []
                },
                {
                    "type": "string",
                    "start_token": 12,
                    "end_token": 14,
                    "label": "\"\"\"\n    Find the largest power of two that is less than or equal to a given integer.\n    https://stackoverflow.com/questions/1322510\n\n    >>> [find_previous_power_of_two(i) for i in range(18)]\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\n    >>> find_previous_power_of_two(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> find_previous_power_of_two(10.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 16,
                    "end_token": 80,
                    "label": "if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if number == 0:\n        return 0\n    power = 1\n    while power <= number:\n        power <<= 1  # Equivalent to multiplying by 2\n    return power >> 1 if number > 1 else 1\n",
                    "children": [
                        {
                            "type": "if_statement",
                            "start_token": 16,
                            "end_token": 34,
                            "label": "if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")",
                            "children": [
                                {
                                    "type": "boolean_operator",
                                    "start_token": 17,
                                    "end_token": 27,
                                    "label": "not isinstance(number, int) or number < 0",
                                    "children": [
                                        {
                                            "type": "not_operator",
                                            "start_token": 17,
                                            "end_token": 23,
                                            "label": "not isinstance(number, int)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 18,
                                                    "end_token": 23,
                                                    "label": "isinstance(number, int)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 18,
                                                            "end_token": 18,
                                                            "label": "isinstance",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 19,
                                                            "end_token": 23,
                                                            "label": "(number, int)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 20,
                                                                    "end_token": 20,
                                                                    "label": "number",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type",
                                                                    "start_token": 22,
                                                                    "end_token": 22,
                                                                    "label": "int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comparison_operator",
                                            "start_token": 25,
                                            "end_token": 27,
                                            "label": "number < 0",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 25,
                                                    "end_token": 25,
                                                    "label": "number",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": 27,
                                                    "end_token": 27,
                                                    "label": "0",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "raise_statement",
                                    "start_token": 30,
                                    "end_token": 34,
                                    "label": "raise ValueError(\"Input must be a non-negative integer\")",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 31,
                                            "end_token": 31,
                                            "label": "ValueError",
                                            "children": []
                                        },
                                        {
                                            "type": "parenthesized_expression",
                                            "start_token": 32,
                                            "end_token": 34,
                                            "label": "(\"Input must be a non-negative integer\")",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "start_token": 33,
                                                    "end_token": 33,
                                                    "label": "\"Input must be a non-negative integer\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "start_token": 36,
                            "end_token": 44,
                            "label": "if number == 0:\n        return 0",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "start_token": 37,
                                    "end_token": 40,
                                    "label": "number == 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 37,
                                            "end_token": 37,
                                            "label": "number",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "start_token": 40,
                                            "end_token": 40,
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 43,
                                    "end_token": 44,
                                    "label": "return 0",
                                    "children": [
                                        {
                                            "type": "integer",
                                            "start_token": 44,
                                            "end_token": 44,
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 46,
                            "end_token": 48,
                            "label": "power = 1",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 46,
                                    "end_token": 46,
                                    "label": "power",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "start_token": 48,
                                    "end_token": 48,
                                    "label": "1",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "while_statement",
                            "start_token": 50,
                            "end_token": 78,
                            "label": "while power <= number:\n        power <<= 1  # Equivalent to multiplying by 2\n    return power >> 1 if number > 1 else",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "start_token": 51,
                                    "end_token": 55,
                                    "label": "power <= number:",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 51,
                                            "end_token": 51,
                                            "label": "power",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 54,
                                            "end_token": 54,
                                            "label": "number",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 57,
                                    "end_token": 78,
                                    "label": "power <<= 1  # Equivalent to multiplying by 2\n    return power >> 1 if number > 1 else",
                                    "children": [
                                        {
                                            "type": "augmented_assignment",
                                            "start_token": 57,
                                            "end_token": 61,
                                            "label": "power <<= 1",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 57,
                                                    "end_token": 57,
                                                    "label": "power",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": 61,
                                                    "end_token": 61,
                                                    "label": "1",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comment",
                                            "start_token": 62,
                                            "end_token": 67,
                                            "label": "# Equivalent to multiplying by 2",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 69,
                            "end_token": 79,
                            "label": "return power >> 1 if number > 1 else 1",
                            "children": [
                                {
                                    "type": "conditional_expression",
                                    "start_token": 70,
                                    "end_token": 79,
                                    "label": "power >> 1 if number > 1 else 1",
                                    "children": [
                                        {
                                            "type": "comparison_operator",
                                            "start_token": 75,
                                            "end_token": 77,
                                            "label": "number > 1",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 75,
                                                    "end_token": 75,
                                                    "label": "number",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": 77,
                                                    "end_token": 77,
                                                    "label": "1",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "binary_operator",
                                            "start_token": 70,
                                            "end_token": 73,
                                            "label": "power >> 1",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 70,
                                                    "end_token": 70,
                                                    "label": "power",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": 73,
                                                    "end_token": 73,
                                                    "label": "1",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "integer",
                                            "start_token": 79,
                                            "end_token": 79,
                                            "label": "1",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "find_previous_power_of_two",
            "start_line": 1,
            "end_line": 24
        },
        {
            "type": "if_statement",
            "start_token": 83,
            "end_token": 98,
            "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
            "children": [
                {
                    "type": "if_clause",
                    "start_token": 83,
                    "end_token": 88,
                    "label": "if __name__ == \"__main__\":",
                    "children": [
                        {
                            "type": "comparison_operator",
                            "start_token": 83,
                            "end_token": 87,
                            "label": "if __name__ == \"__main__\"",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 84,
                                    "end_token": 84,
                                    "label": "__name__",
                                    "children": []
                                },
                                {
                                    "type": "string",
                                    "start_token": 87,
                                    "end_token": 87,
                                    "label": "\"__main__\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 89,
                    "end_token": 98,
                    "label": "\n    import doctest\n\n    doctest.testmod()",
                    "children": [
                        {
                            "type": "import_statement",
                            "start_token": 90,
                            "end_token": 91,
                            "label": "import doctest",
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "start_token": 91,
                                    "end_token": 91,
                                    "label": "doctest",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "start_token": 94,
                            "end_token": 98,
                            "label": "doctest.testmod()",
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 94,
                                    "end_token": 98,
                                    "label": "doctest.testmod()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 94,
                                            "end_token": 96,
                                            "label": "doctest.testmod",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 94,
                                                    "end_token": 94,
                                                    "label": "doctest",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 97,
                                            "end_token": 98,
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}