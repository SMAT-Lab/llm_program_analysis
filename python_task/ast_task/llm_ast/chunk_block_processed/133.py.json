{
    "type": "module",
    "start_token": 0,
    "end_token": 2648,
    "label": "import asyncio\nimport random\nfrom datetime import datetime\n\nimport prisma.enums\nfrom faker import Faker\nfrom prisma import Prisma\n\nfaker = Faker()\n\n# Constants for data generation limits\n\n# Base entities\nNUM_USERS = 100  # Creates 100 user records\nNUM_AGENT_BLOCKS = 100  # Creates 100 agent block templates\n\n# Per-user entities\nMIN_GRAPHS_PER_USER = 1  # Each user will have between 1-5 graphs\nMAX_GRAPHS_PER_USER = 5  # Total graphs: 500-2500 (NUM_USERS * MIN/MAX_GRAPHS)\n\n# Per-graph entities\nMIN_NODES_PER_GRAPH = 2  # Each graph will have between 2-5 nodes\nMAX_NODES_PER_GRAPH = (\n    5  # Total nodes: 1000-2500 (GRAPHS_PER_USER * NUM_USERS * MIN/MAX_NODES)\n)\n\n# Additional per-user entities\nMIN_PRESETS_PER_USER = 1  # Each user will have between 1-2 presets\nMAX_PRESETS_PER_USER = 5  # Total presets: 500-2500 (NUM_USERS * MIN/MAX_PRESETS)\nMIN_AGENTS_PER_USER = 1  # Each user will have between 1-2 agents\nMAX_AGENTS_PER_USER = 10  # Total agents: 500-5000 (NUM_USERS * MIN/MAX_AGENTS)\n\n# Execution and review records\nMIN_EXECUTIONS_PER_GRAPH = 1  # Each graph will have between 1-5 execution records\nMAX_EXECUTIONS_PER_GRAPH = (\n    20  # Total executions: 1000-5000 (TOTAL_GRAPHS * MIN/MAX_EXECUTIONS)\n)\nMIN_REVIEWS_PER_VERSION = 1  # Each version will have between 1-3 reviews\nMAX_REVIEWS_PER_VERSION = 5  # Total reviews depends on number of versions created\n\n\ndef get_image():\n    url = faker.image_url()\n    while \"placekitten.com\" in url:\n        url = faker.image_url()\n    return url\n\n\nasync def main():\n    db = Prisma()\n    await db.connect()\n\n    # Insert Users\n    print(f\"Inserting {NUM_USERS} users\")\n    users = []\n    for _ in range(NUM_USERS):\n        user = await db.user.create(\n            data={\n                \"id\": str(faker.uuid4()),\n                \"email\": faker.unique.email(),\n                \"name\": faker.name(),\n                \"metadata\": prisma.Json({}),\n                \"integrations\": \"\",\n            }\n        )\n        users.append(user)\n\n    # Insert AgentBlocks\n    agent_blocks = []\n    print(f\"Inserting {NUM_AGENT_BLOCKS} agent blocks\")\n    for _ in range(NUM_AGENT_BLOCKS):\n        block = await db.agentblock.create(\n            data={\n                \"name\": f\"{faker.word()}_{str(faker.uuid4())[:8]}\",\n                \"inputSchema\": \"{}\",\n                \"outputSchema\": \"{}\",\n            }\n        )\n        agent_blocks.append(block)\n\n    # Insert AgentGraphs\n    agent_graphs = []\n    print(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent graphs\")\n    for user in users:\n        for _ in range(\n            random.randint(MIN_GRAPHS_PER_USER, MAX_GRAPHS_PER_USER)\n        ):  # Adjust the range to create more graphs per user if desired\n            graph = await db.agentgraph.create(\n                data={\n                    \"name\": faker.sentence(nb_words=3),\n                    \"description\": faker.text(max_nb_chars=200),\n                    \"userId\": user.id,\n                    \"isActive\": True,\n                    \"isTemplate\": False,\n                }\n            )\n            agent_graphs.append(graph)\n\n    # Insert AgentNodes\n    agent_nodes = []\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_NODES_PER_GRAPH} agent nodes\"\n    )\n    for graph in agent_graphs:\n        num_nodes = random.randint(MIN_NODES_PER_GRAPH, MAX_NODES_PER_GRAPH)\n        for _ in range(num_nodes):  # Create 5 AgentNodes per graph\n            block = random.choice(agent_blocks)\n            node = await db.agentnode.create(\n                data={\n                    \"agentBlockId\": block.id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": \"{}\",\n                    \"metadata\": \"{}\",\n                }\n            )\n            agent_nodes.append(node)\n\n    # Insert AgentPresets\n    agent_presets = []\n    print(f\"Inserting {NUM_USERS * MAX_PRESETS_PER_USER} agent presets\")\n    for user in users:\n        num_presets = random.randint(MIN_PRESETS_PER_USER, MAX_PRESETS_PER_USER)\n        for _ in range(num_presets):  # Create 1 AgentPreset per user\n            graph = random.choice(agent_graphs)\n            preset = await db.agentpreset.create(\n                data={\n                    \"name\": faker.sentence(nb_words=3),\n                    \"description\": faker.text(max_nb_chars=200),\n                    \"userId\": user.id,\n                    \"agentId\": graph.id,\n                    \"agentVersion\": graph.version,\n                    \"isActive\": True,\n                }\n            )\n            agent_presets.append(preset)\n\n    # Insert UserAgents\n    user_agents = []\n    print(f\"Inserting {NUM_USERS * MAX_AGENTS_PER_USER} user agents\")\n    for user in users:\n        num_agents = random.randint(MIN_AGENTS_PER_USER, MAX_AGENTS_PER_USER)\n        for _ in range(num_agents):  # Create 1 UserAgent per user\n            graph = random.choice(agent_graphs)\n            preset = random.choice(agent_presets)\n            user_agent = await db.useragent.create(\n                data={\n                    \"userId\": user.id,\n                    \"agentId\": graph.id,\n                    \"agentVersion\": graph.version,\n                    \"agentPresetId\": preset.id,\n                    \"isFavorite\": random.choice([True, False]),\n                    \"isCreatedByUser\": random.choice([True, False]),\n                    \"isArchived\": random.choice([True, False]),\n                    \"isDeleted\": random.choice([True, False]),\n                }\n            )\n            user_agents.append(user_agent)\n\n    # Insert AgentGraphExecutions\n    # Insert AgentGraphExecutions\n    agent_graph_executions = []\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent graph executions\"\n    )\n    graph_execution_data = []\n    for graph in agent_graphs:\n        user = random.choice(users)\n        num_executions = random.randint(\n            MIN_EXECUTIONS_PER_GRAPH, MAX_EXECUTIONS_PER_GRAPH\n        )\n        for _ in range(num_executions):\n            matching_presets = [p for p in agent_presets if p.agentId == graph.id]\n            preset = (\n                random.choice(matching_presets)\n                if matching_presets and random.random() < 0.5\n                else None\n            )\n\n            graph_execution_data.append(\n                {\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"userId\": user.id,\n                    \"executionStatus\": prisma.enums.AgentExecutionStatus.COMPLETED,\n                    \"startedAt\": faker.date_time_this_year(),\n                    \"agentPresetId\": preset.id if preset else None,\n                }\n            )\n\n    agent_graph_executions = await db.agentgraphexecution.create_many(\n        data=graph_execution_data\n    )\n    # Need to fetch the created records since create_many doesn't return them\n    agent_graph_executions = await db.agentgraphexecution.find_many()\n\n    # Insert AgentNodeExecutions\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node executions\"\n    )\n    node_execution_data = []\n    for execution in agent_graph_executions:\n        nodes = [\n            node for node in agent_nodes if node.agentGraphId == execution.agentGraphId\n        ]\n        for node in nodes:\n            node_execution_data.append(\n                {\n                    \"agentGraphExecutionId\": execution.id,\n                    \"agentNodeId\": node.id,\n                    \"executionStatus\": prisma.enums.AgentExecutionStatus.COMPLETED,\n                    \"addedTime\": datetime.now(),\n                }\n            )\n\n    agent_node_executions = await db.agentnodeexecution.create_many(\n        data=node_execution_data\n    )\n    # Need to fetch the created records since create_many doesn't return them\n    agent_node_executions = await db.agentnodeexecution.find_many()\n\n    # Insert AgentNodeExecutionInputOutput\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node execution input/outputs\"\n    )\n    input_output_data = []\n    for node_execution in agent_node_executions:\n        # Input data\n        input_output_data.append(\n            {\n                \"name\": \"input1\",\n                \"data\": \"{}\",\n                \"time\": datetime.now(),\n                \"referencedByInputExecId\": node_execution.id,\n            }\n        )\n        # Output data\n        input_output_data.append(\n            {\n                \"name\": \"output1\",\n                \"data\": \"{}\",\n                \"time\": datetime.now(),\n                \"referencedByOutputExecId\": node_execution.id,\n            }\n        )\n\n    await db.agentnodeexecutioninputoutput.create_many(data=input_output_data)\n\n    # Insert AgentNodeLinks\n    print(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent node links\")\n    for graph in agent_graphs:\n        nodes = [node for node in agent_nodes if node.agentGraphId == graph.id]\n        if len(nodes) >= 2:\n            source_node = nodes[0]\n            sink_node = nodes[1]\n            await db.agentnodelink.create(\n                data={\n                    \"agentNodeSourceId\": source_node.id,\n                    \"sourceName\": \"output1\",\n                    \"agentNodeSinkId\": sink_node.id,\n                    \"sinkName\": \"input1\",\n                    \"isStatic\": False,\n                }\n            )\n\n    # Insert AnalyticsDetails\n    print(f\"Inserting {NUM_USERS} analytics details\")\n    for user in users:\n        for _ in range(1):\n            await db.analyticsdetails.create(\n                data={\n                    \"userId\": user.id,\n                    \"type\": faker.word(),\n                    \"data\": prisma.Json({}),\n                    \"dataIndex\": faker.word(),\n                }\n            )\n\n    # Insert AnalyticsMetrics\n    print(f\"Inserting {NUM_USERS} analytics metrics\")\n    for user in users:\n        for _ in range(1):\n            await db.analyticsmetrics.create(\n                data={\n                    \"userId\": user.id,\n                    \"analyticMetric\": faker.word(),\n                    \"value\": random.uniform(0, 100),\n                    \"dataString\": faker.word(),\n                }\n            )\n\n    # Insert CreditTransaction (formerly UserBlockCredit)\n    print(f\"Inserting {NUM_USERS} credit transactions\")\n    for user in users:\n        for _ in range(1):\n            block = random.choice(agent_blocks)\n            await db.credittransaction.create(\n                data={\n                    \"transactionKey\": str(faker.uuid4()),\n                    \"userId\": user.id,\n                    \"blockId\": block.id,\n                    \"amount\": random.randint(1, 100),\n                    \"type\": (\n                        prisma.enums.CreditTransactionType.TOP_UP\n                        if random.random() < 0.5\n                        else prisma.enums.CreditTransactionType.USAGE\n                    ),\n                    \"metadata\": prisma.Json({}),\n                }\n            )\n\n    # Insert Profiles\n    profiles = []\n    print(f\"Inserting {NUM_USERS} profiles\")\n    for user in users:\n        profile = await db.profile.create(\n            data={\n                \"userId\": user.id,\n                \"name\": user.name or faker.name(),\n                \"username\": faker.unique.user_name(),\n                \"description\": faker.text(),\n                \"links\": [faker.url() for _ in range(3)],\n                \"avatarUrl\": get_image(),\n            }\n        )\n        profiles.append(profile)\n\n    # Insert StoreListings\n    store_listings = []\n    print(f\"Inserting {NUM_USERS} store listings\")\n    for graph in agent_graphs:\n        user = random.choice(users)\n        listing = await db.storelisting.create(\n            data={\n                \"agentId\": graph.id,\n                \"agentVersion\": graph.version,\n                \"owningUserId\": user.id,\n                \"isApproved\": random.choice([True, False]),\n            }\n        )\n        store_listings.append(listing)\n\n    # Insert StoreListingVersions\n    store_listing_versions = []\n    print(f\"Inserting {NUM_USERS} store listing versions\")\n    for listing in store_listings:\n        graph = [g for g in agent_graphs if g.id == listing.agentId][0]\n        version = await db.storelistingversion.create(\n            data={\n                \"agentId\": graph.id,\n                \"agentVersion\": graph.version,\n                \"slug\": faker.slug(),\n                \"name\": graph.name or faker.sentence(nb_words=3),\n                \"subHeading\": faker.sentence(),\n                \"videoUrl\": faker.url(),\n                \"imageUrls\": [get_image() for _ in range(3)],\n                \"description\": faker.text(),\n                \"categories\": [faker.word() for _ in range(3)],\n                \"isFeatured\": random.choice([True, False]),\n                \"isAvailable\": True,\n                \"isApproved\": random.choice([True, False]),\n                \"storeListingId\": listing.id,\n            }\n        )\n        store_listing_versions.append(version)\n\n    # Insert StoreListingReviews\n    print(f\"Inserting {NUM_USERS * MAX_REVIEWS_PER_VERSION} store listing reviews\")\n    for version in store_listing_versions:\n        # Create a copy of users list and shuffle it to avoid duplicates\n        available_reviewers = users.copy()\n        random.shuffle(available_reviewers)\n\n        # Limit number of reviews to available unique reviewers\n        num_reviews = min(\n            random.randint(MIN_REVIEWS_PER_VERSION, MAX_REVIEWS_PER_VERSION),\n            len(available_reviewers),\n        )\n\n        # Take only the first num_reviews reviewers\n        for reviewer in available_reviewers[:num_reviews]:\n            await db.storelistingreview.create(\n                data={\n                    \"storeListingVersionId\": version.id,\n                    \"reviewByUserId\": reviewer.id,\n                    \"score\": random.randint(1, 5),\n                    \"comments\": faker.text(),\n                }\n            )\n\n    # Insert StoreListingSubmissions\n    print(f\"Inserting {NUM_USERS} store listing submissions\")\n    for listing in store_listings:\n        version = random.choice(store_listing_versions)\n        reviewer = random.choice(users)\n        status: prisma.enums.SubmissionStatus = random.choice(\n            [\n                prisma.enums.SubmissionStatus.PENDING,\n                prisma.enums.SubmissionStatus.APPROVED,\n                prisma.enums.SubmissionStatus.REJECTED,\n            ]\n        )\n        await db.storelistingsubmission.create(\n            data={\n                \"storeListingId\": listing.id,\n                \"storeListingVersionId\": version.id,\n                \"reviewerId\": reviewer.id,\n                \"Status\": status,\n                \"reviewComments\": faker.text(),\n            }\n        )\n\n    # Insert APIKeys\n    print(f\"Inserting {NUM_USERS} api keys\")\n    for user in users:\n        await db.apikey.create(\n            data={\n                \"name\": faker.word(),\n                \"prefix\": str(faker.uuid4())[:8],\n                \"postfix\": str(faker.uuid4())[-8:],\n                \"key\": str(faker.sha256()),\n                \"status\": prisma.enums.APIKeyStatus.ACTIVE,\n                \"permissions\": [\n                    prisma.enums.APIKeyPermission.EXECUTE_GRAPH,\n                    prisma.enums.APIKeyPermission.READ_GRAPH,\n                ],\n                \"description\": faker.text(),\n                \"userId\": user.id,\n            }\n        )\n\n    await db.disconnect()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())",
    "children": [
        {
            "type": "import_statement",
            "start_token": 0,
            "end_token": 1,
            "label": "import asyncio",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 1,
                    "end_token": 1,
                    "label": "asyncio",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 3,
            "end_token": 4,
            "label": "import random",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 4,
                    "end_token": 4,
                    "label": "random",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 6,
            "end_token": 9,
            "label": "from datetime import datetime",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 7,
                    "end_token": 7,
                    "label": "datetime",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 9,
                    "end_token": 9,
                    "label": "datetime",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 12,
            "end_token": 15,
            "label": "import prisma.enums",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 13,
                    "end_token": 15,
                    "label": "prisma.enums",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 17,
            "end_token": 20,
            "label": "from faker import Faker",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 18,
                    "end_token": 18,
                    "label": "faker",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 20,
                    "end_token": 20,
                    "label": "Faker",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 22,
            "end_token": 25,
            "label": "from prisma import Prisma",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 23,
                    "end_token": 23,
                    "label": "prisma",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 25,
                    "end_token": 25,
                    "label": "Prisma",
                    "children": []
                }
            ]
        },
        {
            "type": "assignment",
            "start_token": 28,
            "end_token": 32,
            "label": "faker = Faker()",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 28,
                    "end_token": 28,
                    "label": "faker",
                    "children": []
                },
                {
                    "type": "call",
                    "start_token": 30,
                    "end_token": 32,
                    "label": "Faker()",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 30,
                            "end_token": 30,
                            "label": "Faker",
                            "children": []
                        },
                        {
                            "type": "argument_list",
                            "start_token": 31,
                            "end_token": 32,
                            "label": "()",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "start_token": 35,
            "end_token": 41,
            "label": "# Constants for data generation limits\n",
            "children": []
        },
        {
            "type": "block",
            "start_token": 47,
            "end_token": 65,
            "label": "NUM_USERS = 100  # Creates 100 user records\nNUM_AGENT_BLOCKS = 100  # Creates 100 agent block templates\n",
            "children": [
                {
                    "type": "assignment",
                    "start_token": 47,
                    "end_token": 49,
                    "label": "NUM_USERS = 100",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 47,
                            "end_token": 47,
                            "label": "NUM_USERS",
                            "children": []
                        },
                        {
                            "type": "integer",
                            "start_token": 49,
                            "end_token": 49,
                            "label": "100",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "comment",
                    "start_token": 50,
                    "end_token": 65,
                    "label": "# Creates 100 user records\nNUM_AGENT_BLOCKS = 100  # Creates 100 agent block templates\n",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 56,
                    "end_token": 58,
                    "label": "NUM_AGENT_BLOCKS = 100",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 56,
                            "end_token": 56,
                            "label": "NUM_AGENT_BLOCKS",
                            "children": []
                        },
                        {
                            "type": "integer",
                            "start_token": 58,
                            "end_token": 58,
                            "label": "100",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "start_token": 67,
            "end_token": 72,
            "label": "# Per-user entities\n",
            "children": []
        },
        {
            "type": "block",
            "start_token": 73,
            "end_token": 103,
            "label": "MIN_GRAPHS_PER_USER = 1  # Each user will have between 1-5 graphs\nMAX_GRAPHS_PER_USER = 5  # Total graphs: 500-2500 (NUM_USERS * MIN/MAX_GRAPHS)",
            "children": [
                {
                    "type": "assignment",
                    "start_token": 73,
                    "end_token": 75,
                    "label": "MIN_GRAPHS_PER_USER = 1",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 73,
                            "end_token": 73,
                            "label": "MIN_GRAPHS_PER_USER",
                            "children": []
                        },
                        {
                            "type": "integer",
                            "start_token": 75,
                            "end_token": 75,
                            "label": "1",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "comment",
                    "start_token": 76,
                    "end_token": 103,
                    "label": "# Each user will have between 1-5 graphs\nMAX_GRAPHS_PER_USER = 5  # Total graphs: 500-2500 (NUM_USERS * MIN/MAX_GRAPHS)",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 87,
                    "end_token": 89,
                    "label": "MAX_GRAPHS_PER_USER = 5",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 87,
                            "end_token": 87,
                            "label": "MAX_GRAPHS_PER_USER",
                            "children": []
                        },
                        {
                            "type": "integer",
                            "start_token": 89,
                            "end_token": 89,
                            "label": "5",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "start_token": 106,
            "end_token": 111,
            "label": "# Per-graph entities\n",
            "children": []
        },
        {
            "type": "block",
            "start_token": 112,
            "end_token": 138,
            "label": "MIN_NODES_PER_GRAPH = 2  # Each graph will have between 2-5 nodes\nMAX_NODES_PER_GRAPH = (\n    5  # Total nodes: 1000-2500 (",
            "children": [
                {
                    "type": "assignment",
                    "start_token": 112,
                    "end_token": 114,
                    "label": "MIN_NODES_PER_GRAPH = 2",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 112,
                            "end_token": 112,
                            "label": "MIN_NODES_PER_GRAPH",
                            "children": []
                        },
                        {
                            "type": "integer",
                            "start_token": 114,
                            "end_token": 114,
                            "label": "2",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "comment",
                    "start_token": 115,
                    "end_token": 138,
                    "label": "# Each graph will have between 2-5 nodes\nMAX_NODES_PER_GRAPH = (\n    5  # Total nodes: 1000-2500 (",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 126,
                    "end_token": 149,
                    "label": "MAX_NODES_PER_GRAPH = (\n    5  # Total nodes: 1000-2500 (GRAPHS_PER_USER * NUM_USERS * MIN/MAX_NODES)\n)\n",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 126,
                            "end_token": 126,
                            "label": "MAX_NODES_PER_GRAPH",
                            "children": []
                        },
                        {
                            "type": "parenthesized_expression",
                            "start_token": 128,
                            "end_token": 148,
                            "label": "(\n    5  # Total nodes: 1000-2500 (GRAPHS_PER_USER * NUM_USERS * MIN/MAX_NODES)\n)",
                            "children": [
                                {
                                    "type": "integer",
                                    "start_token": 130,
                                    "end_token": 130,
                                    "label": "5",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "comment",
            "start_token": 151,
            "end_token": 156,
            "label": "# Additional per-user entities",
            "children": []
        },
        {
            "type": "block",
            "start_token": 158,
            "end_token": 188,
            "label": "MIN_PRESETS_PER_USER = 1  # Each user will have between 1-2 presets\nMAX_PRESETS_PER_USER = 5  # Total presets: 500-2500 (NUM_USERS * MIN/MAX_PRESETS)",
            "children": [
                {
                    "type": "assignment",
                    "start_token": 158,
                    "end_token": 160,
                    "label": "MIN_PRESETS_PER_USER = 1",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 158,
                            "end_token": 158,
                            "label": "MIN_PRESETS_PER_USER",
                            "children": []
                        },
                        {
                            "type": "integer",
                            "start_token": 160,
                            "end_token": 160,
                            "label": "1",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "comment",
                    "start_token": 161,
                    "end_token": 188,
                    "label": "# Each user will have between 1-2 presets\nMAX_PRESETS_PER_USER = 5  # Total presets: 500-2500 (NUM_USERS * MIN/MAX_PRESETS)",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 172,
                    "end_token": 174,
                    "label": "MAX_PRESETS_PER_USER = 5",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 172,
                            "end_token": 172,
                            "label": "MAX_PRESETS_PER_USER",
                            "children": []
                        },
                        {
                            "type": "integer",
                            "start_token": 174,
                            "end_token": 174,
                            "label": "5",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "assignment",
            "start_token": 190,
            "end_token": 192,
            "label": "MIN_AGENTS_PER_USER = 1",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 190,
                    "end_token": 190,
                    "label": "MIN_AGENTS_PER_USER",
                    "children": []
                },
                {
                    "type": "integer",
                    "start_token": 192,
                    "end_token": 192,
                    "label": "1",
                    "children": []
                }
            ]
        },
        {
            "type": "comment",
            "start_token": 193,
            "end_token": 220,
            "label": "# Each user will have between 1-2 agents\nMAX_AGENTS_PER_USER = 10  # Total agents: 500-5000 (NUM_USERS * MIN/MAX_AGENTS)",
            "children": []
        },
        {
            "type": "assignment",
            "start_token": 204,
            "end_token": 206,
            "label": "MAX_AGENTS_PER_USER = 10",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 204,
                    "end_token": 204,
                    "label": "MAX_AGENTS_PER_USER",
                    "children": []
                },
                {
                    "type": "integer",
                    "start_token": 206,
                    "end_token": 206,
                    "label": "10",
                    "children": []
                }
            ]
        },
        {
            "type": "comment",
            "start_token": 207,
            "end_token": 220,
            "label": "# Total agents: 500-5000 (NUM_USERS * MIN/MAX_AGENTS)",
            "children": []
        },
        {
            "type": "comment",
            "start_token": 223,
            "end_token": 228,
            "label": "# Execution and review records\n",
            "children": []
        },
        {
            "type": "block",
            "start_token": 229,
            "end_token": 262,
            "label": "MIN_EXECUTIONS_PER_GRAPH = 1  # Each graph will have between 1-5 execution records\nMAX_EXECUTIONS_PER_GRAPH = (\n    20  # Total executions: 1000-5000 (TOTAL_GRAPHS * MIN/MAX_EXECUTIONS)",
            "children": [
                {
                    "type": "assignment",
                    "start_token": 229,
                    "end_token": 231,
                    "label": "MIN_EXECUTIONS_PER_GRAPH = 1",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 229,
                            "end_token": 229,
                            "label": "MIN_EXECUTIONS_PER_GRAPH",
                            "children": []
                        },
                        {
                            "type": "integer",
                            "start_token": 231,
                            "end_token": 231,
                            "label": "1",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "comment",
                    "start_token": 232,
                    "end_token": 262,
                    "label": "# Each graph will have between 1-5 execution records\nMAX_EXECUTIONS_PER_GRAPH = (\n    20  # Total executions: 1000-5000 (TOTAL_GRAPHS * MIN/MAX_EXECUTIONS)",
                    "children": []
                },
                {
                    "type": "assignment",
                    "start_token": 244,
                    "end_token": 264,
                    "label": "MAX_EXECUTIONS_PER_GRAPH = (\n    20  # Total executions: 1000-5000 (TOTAL_GRAPHS * MIN/MAX_EXECUTIONS)\n)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 244,
                            "end_token": 244,
                            "label": "MAX_EXECUTIONS_PER_GRAPH",
                            "children": []
                        },
                        {
                            "type": "parenthesized_expression",
                            "start_token": 246,
                            "end_token": 263,
                            "label": "(\n    20  # Total executions: 1000-5000 (TOTAL_GRAPHS * MIN/MAX_EXECUTIONS)\n",
                            "children": [
                                {
                                    "type": "integer",
                                    "start_token": 248,
                                    "end_token": 248,
                                    "label": "20",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "assignment",
            "start_token": 266,
            "end_token": 268,
            "label": "MIN_REVIEWS_PER_VERSION = 1",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 266,
                    "end_token": 266,
                    "label": "MIN_REVIEWS_PER_VERSION",
                    "children": []
                },
                {
                    "type": "integer",
                    "start_token": 268,
                    "end_token": 268,
                    "label": "1",
                    "children": []
                }
            ]
        },
        {
            "type": "comment",
            "start_token": 269,
            "end_token": 292,
            "label": "# Each version will have between 1-3 reviews\nMAX_REVIEWS_PER_VERSION = 5  # Total reviews depends on number of versions created\n",
            "children": []
        },
        {
            "type": "function_definition",
            "start_token": 295,
            "end_token": 325,
            "label": "def get_image():\n    url = faker.image_url()\n    while \"placekitten.com\" in url:\n        url = faker.image_url()\n    return url\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 296,
                    "end_token": 296,
                    "label": "get_image",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 297,
                    "end_token": 298,
                    "label": "()",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 300,
                    "end_token": 324,
                    "label": "\n    url = faker.image_url()\n    while \"placekitten.com\" in url:\n        url = faker.image_url()\n    return url",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": 301,
                            "end_token": 307,
                            "label": "url = faker.image_url()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 301,
                                    "end_token": 301,
                                    "label": "url",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 303,
                                    "end_token": 307,
                                    "label": "faker.image_url()",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 303,
                                            "end_token": 305,
                                            "label": "faker.image_url",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 303,
                                                    "end_token": 303,
                                                    "label": "faker",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 305,
                                                    "end_token": 305,
                                                    "label": "image_url",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 306,
                                            "end_token": 307,
                                            "label": "()",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "while_statement",
                            "start_token": 309,
                            "end_token": 322,
                            "label": "while \"placekitten.com\" in url:\n        url = faker.image_url()\n",
                            "children": [
                                {
                                    "type": "boolean_operator",
                                    "start_token": 310,
                                    "end_token": 312,
                                    "label": "\"placekitten.com\" in url",
                                    "children": [
                                        {
                                            "type": "string",
                                            "start_token": 310,
                                            "end_token": 310,
                                            "label": "\"placekitten.com\"",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 312,
                                            "end_token": 312,
                                            "label": "url",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 314,
                                    "end_token": 322,
                                    "label": "\n        url = faker.image_url()\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 315,
                                            "end_token": 321,
                                            "label": "url = faker.image_url()",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 315,
                                                    "end_token": 315,
                                                    "label": "url",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 317,
                                                    "end_token": 321,
                                                    "label": "faker.image_url()",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "start_token": 317,
                                                            "end_token": 319,
                                                            "label": "faker.image_url",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 317,
                                                                    "end_token": 317,
                                                                    "label": "faker",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 319,
                                                                    "end_token": 319,
                                                                    "label": "image_url",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 320,
                                                            "end_token": 321,
                                                            "label": "()",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 323,
                            "end_token": 324,
                            "label": "return url",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 324,
                                    "end_token": 324,
                                    "label": "url",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "get_image",
            "start_line": 42,
            "end_line": 46
        },
        {
            "type": "function_definition",
            "start_token": 328,
            "end_token": 2631,
            "label": "async def main():\n    db = Prisma()\n    await db.connect()\n\n    # Insert Users\n    print(f\"Inserting {NUM_USERS} users\")\n    users = []\n    for _ in range(NUM_USERS):\n        user = await db.user.create(\n            data={\n                \"id\": str(faker.uuid4()),\n                \"email\": faker.unique.email(),\n                \"name\": faker.name(),\n                \"metadata\": prisma.Json({}),\n                \"integrations\": \"\",\n            }\n        )\n        users.append(user)\n\n    # Insert AgentBlocks\n    agent_blocks = []\n    print(f\"Inserting {NUM_AGENT_BLOCKS} agent blocks\")\n    for _ in range(NUM_AGENT_BLOCKS):\n        block = await db.agentblock.create(\n            data={\n                \"name\": f\"{faker.word()}_{str(faker.uuid4())[:8]}\",\n                \"inputSchema\": \"{}\",\n                \"outputSchema\": \"{}\",\n            }\n        )\n        agent_blocks.append(block)\n\n    # Insert AgentGraphs\n    agent_graphs = []\n    print(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent graphs\")\n    for user in users:\n        for _ in range(\n            random.randint(MIN_GRAPHS_PER_USER, MAX_GRAPHS_PER_USER)\n        ):  # Adjust the range to create more graphs per user if desired\n            graph = await db.agentgraph.create(\n                data={\n                    \"name\": faker.sentence(nb_words=3),\n                    \"description\": faker.text(max_nb_chars=200),\n                    \"userId\": user.id,\n                    \"isActive\": True,\n                    \"isTemplate\": False,\n                }\n            )\n            agent_graphs.append(graph)\n\n    # Insert AgentNodes\n    agent_nodes = []\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_NODES_PER_GRAPH} agent nodes\"\n    )\n    for graph in agent_graphs:\n        num_nodes = random.randint(MIN_NODES_PER_GRAPH, MAX_NODES_PER_GRAPH)\n        for _ in range(num_nodes):  # Create 5 AgentNodes per graph\n            block = random.choice(agent_blocks)\n            node = await db.agentnode.create(\n                data={\n                    \"agentBlockId\": block.id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": \"{}\",\n                    \"metadata\": \"{}\",\n                }\n            )\n            agent_nodes.append(node)\n\n    # Insert AgentPresets\n    agent_presets = []\n    print(f\"Inserting {NUM_USERS * MAX_PRESETS_PER_USER} agent presets\")\n    for user in users:\n        num_presets = random.randint(MIN_PRESETS_PER_USER, MAX_PRESETS_PER_USER)\n        for _ in range(num_presets):  # Create 1 AgentPreset per user\n            graph = random.choice(agent_graphs)\n            preset = await db.agentpreset.create(\n                data={\n                    \"name\": faker.sentence(nb_words=3),\n                    \"description\": faker.text(max_nb_chars=200),\n                    \"userId\": user.id,\n                    \"agentId\": graph.id,\n                    \"agentVersion\": graph.version,\n                    \"isActive\": True,\n                }\n            )\n            agent_presets.append(preset)\n\n    # Insert UserAgents\n    user_agents = []\n    print(f\"Inserting {NUM_USERS * MAX_AGENTS_PER_USER} user agents\")\n    for user in users:\n        num_agents = random.randint(MIN_AGENTS_PER_USER, MAX_AGENTS_PER_USER)\n        for _ in range(num_agents):  # Create 1 UserAgent per user\n            graph = random.choice(agent_graphs)\n            preset = random.choice(agent_presets)\n            user_agent = await db.useragent.create(\n                data={\n                    \"userId\": user.id,\n                    \"agentId\": graph.id,\n                    \"agentVersion\": graph.version,\n                    \"agentPresetId\": preset.id,\n                    \"isFavorite\": random.choice([True, False]),\n                    \"isCreatedByUser\": random.choice([True, False]),\n                    \"isArchived\": random.choice([True, False]),\n                    \"isDeleted\": random.choice([True, False]),\n                }\n            )\n            user_agents.append(user_agent)\n\n    # Insert AgentGraphExecutions\n    # Insert AgentGraphExecutions\n    agent_graph_executions = []\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent graph executions\"\n    )\n    graph_execution_data = []\n    for graph in agent_graphs:\n        user = random.choice(users)\n        num_executions = random.randint(\n            MIN_EXECUTIONS_PER_GRAPH, MAX_EXECUTIONS_PER_GRAPH\n        )\n        for _ in range(num_executions):\n            matching_presets = [p for p in agent_presets if p.agentId == graph.id]\n            preset = (\n                random.choice(matching_presets)\n                if matching_presets and random.random() < 0.5\n                else None\n            )\n\n            graph_execution_data.append(\n                {\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"userId\": user.id,\n                    \"executionStatus\": prisma.enums.AgentExecutionStatus.COMPLETED,\n                    \"startedAt\": faker.date_time_this_year(),\n                    \"agentPresetId\": preset.id if preset else None,\n                }\n            )\n\n    agent_graph_executions = await db.agentgraphexecution.create_many(\n        data=graph_execution_data\n    )\n    # Need to fetch the created records since create_many doesn't return them\n    agent_graph_executions = await db.agentgraphexecution.find_many()\n\n    # Insert AgentNodeExecutions\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node executions\"\n    )\n    node_execution_data = []\n    for execution in agent_graph_executions:\n        nodes = [\n            node for node in agent_nodes if node.agentGraphId == execution.agentGraphId\n        ]\n        for node in nodes:\n            node_execution_data.append(\n                {\n                    \"agentGraphExecutionId\": execution.id,\n                    \"agentNodeId\": node.id,\n                    \"executionStatus\": prisma.enums.AgentExecutionStatus.COMPLETED,\n                    \"addedTime\": datetime.now(),\n                }\n            )\n\n    agent_node_executions = await db.agentnodeexecution.create_many(\n        data=node_execution_data\n    )\n    # Need to fetch the created records since create_many doesn't return them\n    agent_node_executions = await db.agentnodeexecution.find_many()\n\n    # Insert AgentNodeExecutionInputOutput\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node execution input/outputs\"\n    )\n    input_output_data = []\n    for node_execution in agent_node_executions:\n        # Input data\n        input_output_data.append(\n            {\n                \"name\": \"input1\",\n                \"data\": \"{}\",\n                \"time\": datetime.now(),\n                \"referencedByInputExecId\": node_execution.id,\n            }\n        )\n        # Output data\n        input_output_data.append(\n            {\n                \"name\": \"output1\",\n                \"data\": \"{}\",\n                \"time\": datetime.now(),\n                \"referencedByOutputExecId\": node_execution.id,\n            }\n        )\n\n    await db.agentnodeexecutioninputoutput.create_many(data=input_output_data)\n\n    # Insert AgentNodeLinks\n    print(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent node links\")\n    for graph in agent_graphs:\n        nodes = [node for node in agent_nodes if node.agentGraphId == graph.id]\n        if len(nodes) >= 2:\n            source_node = nodes[0]\n            sink_node = nodes[1]\n            await db.agentnodelink.create(\n                data={\n                    \"agentNodeSourceId\": source_node.id,\n                    \"sourceName\": \"output1\",\n                    \"agentNodeSinkId\": sink_node.id,\n                    \"sinkName\": \"input1\",\n                    \"isStatic\": False,\n                }\n            )\n\n    # Insert AnalyticsDetails\n    print(f\"Inserting {NUM_USERS} analytics details\")\n    for user in users:\n        for _ in range(1):\n            await db.analyticsdetails.create(\n                data={\n                    \"userId\": user.id,\n                    \"type\": faker.word(),\n                    \"data\": prisma.Json({}),\n                    \"dataIndex\": faker.word(),\n                }\n            )\n\n    # Insert AnalyticsMetrics\n    print(f\"Inserting {NUM_USERS} analytics metrics\")\n    for user in users:\n        for _ in range(1):\n            await db.analyticsmetrics.create(\n                data={\n                    \"userId\": user.id,\n                    \"analyticMetric\": faker.word(),\n                    \"value\": random.uniform(0, 100),\n                    \"dataString\": faker.word(),\n                }\n            )\n\n    # Insert CreditTransaction (formerly UserBlockCredit)\n    print(f\"Inserting {NUM_USERS} credit transactions\")\n    for user in users:\n        for _ in range(1):\n            block = random.choice(agent_blocks)\n            await db.credittransaction.create(\n                data={\n                    \"transactionKey\": str(faker.uuid4()),\n                    \"userId\": user.id,\n                    \"blockId\": block.id,\n                    \"amount\": random.randint(1, 100),\n                    \"type\": (\n                        prisma.enums.CreditTransactionType.TOP_UP\n                        if random.random() < 0.5\n                        else prisma.enums.CreditTransactionType.USAGE\n                    ),\n                    \"metadata\": prisma.Json({}),\n                }\n            )\n\n    # Insert Profiles\n    profiles = []\n    print(f\"Inserting {NUM_USERS} profiles\")\n    for user in users:\n        profile = await db.profile.create(\n            data={\n                \"userId\": user.id,\n                \"name\": user.name or faker.name(),\n                \"username\": faker.unique.user_name(),\n                \"description\": faker.text(),\n                \"links\": [faker.url() for _ in range(3)],\n                \"avatarUrl\": get_image(),\n            }\n        )\n        profiles.append(profile)\n\n    # Insert StoreListings\n    store_listings = []\n    print(f\"Inserting {NUM_USERS} store listings\")\n    for graph in agent_graphs:\n        user = random.choice(users)\n        listing = await db.storelisting.create(\n            data={\n                \"agentId\": graph.id,\n                \"agentVersion\": graph.version,\n                \"owningUserId\": user.id,\n                \"isApproved\": random.choice([True, False]),\n            }\n        )\n        store_listings.append(listing)\n\n    # Insert StoreListingVersions\n    store_listing_versions = []\n    print(f\"Inserting {NUM_USERS} store listing versions\")\n    for listing in store_listings:\n        graph = [g for g in agent_graphs if g.id == listing.agentId][0]\n        version = await db.storelistingversion.create(\n            data={\n                \"agentId\": graph.id,\n                \"agentVersion\": graph.version,\n                \"slug\": faker.slug(),\n                \"name\": graph.name or faker.sentence(nb_words=3),\n                \"subHeading\": faker.sentence(),\n                \"videoUrl\": faker.url(),\n                \"imageUrls\": [get_image() for _ in range(3)],\n                \"description\": faker.text(),\n                \"categories\": [faker.word() for _ in range(3)],\n                \"isFeatured\": random.choice([True, False]),\n                \"isAvailable\": True,\n                \"isApproved\": random.choice([True, False]),\n                \"storeListingId\": listing.id,\n            }\n        )\n        store_listing_versions.append(version)\n\n    # Insert StoreListingReviews\n    print(f\"Inserting {NUM_USERS * MAX_REVIEWS_PER_VERSION} store listing reviews\")\n    for version in store_listing_versions:\n        # Create a copy of users list and shuffle it to avoid duplicates\n        available_reviewers = users.copy()\n        random.shuffle(available_reviewers)\n\n        # Limit number of reviews to available unique reviewers\n        num_reviews = min(\n            random.randint(MIN_REVIEWS_PER_VERSION, MAX_REVIEWS_PER_VERSION),\n            len(available_reviewers),\n        )\n\n        # Take only the first num_reviews reviewers\n        for reviewer in available_reviewers[:num_reviews]:\n            await db.storelistingreview.create(\n                data={\n                    \"storeListingVersionId\": version.id,\n                    \"reviewByUserId\": reviewer.id,\n                    \"score\": random.randint(1, 5),\n                    \"comments\": faker.text(),\n                }\n            )\n\n    # Insert StoreListingSubmissions\n    print(f\"Inserting {NUM_USERS} store listing submissions\")\n    for listing in store_listings:\n        version = random.choice(store_listing_versions)\n        reviewer = random.choice(users)\n        status: prisma.enums.SubmissionStatus = random.choice(\n            [\n                prisma.enums.SubmissionStatus.PENDING,\n                prisma.enums.SubmissionStatus.APPROVED,\n                prisma.enums.SubmissionStatus.REJECTED,\n            ]\n        )\n        await db.storelistingsubmission.create(\n            data={\n                \"storeListingId\": listing.id,\n                \"storeListingVersionId\": version.id,\n                \"reviewerId\": reviewer.id,\n                \"Status\": status,\n                \"reviewComments\": faker.text(),\n            }\n        )\n\n    # Insert APIKeys\n    print(f\"Inserting {NUM_USERS} api keys\")\n    for user in users:\n        await db.apikey.create(\n            data={\n                \"name\": faker.word(),\n                \"prefix\": str(faker.uuid4())[:8],\n                \"postfix\": str(faker.uuid4())[-8:],\n                \"key\": str(faker.sha256()),\n                \"status\": prisma.enums.APIKeyStatus.ACTIVE,\n                \"permissions\": [\n                    prisma.enums.APIKeyPermission.EXECUTE_GRAPH,\n                    prisma.enums.APIKeyPermission.READ_GRAPH,\n                ],\n                \"description\": faker.text(),\n                \"userId\": user.id,\n            }\n        )\n\n    await db.disconnect()\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 329,
                    "end_token": 329,
                    "label": "def",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 330,
                    "end_token": 330,
                    "label": "main",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 331,
                    "end_token": 332,
                    "label": "()",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 333,
                    "end_token": 2631,
                    "label": ":\n    db = Prisma()\n    await db.connect()\n\n    # Insert Users\n    print(f\"Inserting {NUM_USERS} users\")\n    users = []\n    for _ in range(NUM_USERS):\n        user = await db.user.create(\n            data={\n                \"id\": str(faker.uuid4()),\n                \"email\": faker.unique.email(),\n                \"name\": faker.name(),\n                \"metadata\": prisma.Json({}),\n                \"integrations\": \"\",\n            }\n        )\n        users.append(user)\n\n    # Insert AgentBlocks\n    agent_blocks = []\n    print(f\"Inserting {NUM_AGENT_BLOCKS} agent blocks\")\n    for _ in range(NUM_AGENT_BLOCKS):\n        block = await db.agentblock.create(\n            data={\n                \"name\": f\"{faker.word()}_{str(faker.uuid4())[:8]}\",\n                \"inputSchema\": \"{}\",\n                \"outputSchema\": \"{}\",\n            }\n        )\n        agent_blocks.append(block)\n\n    # Insert AgentGraphs\n    agent_graphs = []\n    print(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent graphs\")\n    for user in users:\n        for _ in range(\n            random.randint(MIN_GRAPHS_PER_USER, MAX_GRAPHS_PER_USER)\n        ):  # Adjust the range to create more graphs per user if desired\n            graph = await db.agentgraph.create(\n                data={\n                    \"name\": faker.sentence(nb_words=3),\n                    \"description\": faker.text(max_nb_chars=200),\n                    \"userId\": user.id,\n                    \"isActive\": True,\n                    \"isTemplate\": False,\n                }\n            )\n            agent_graphs.append(graph)\n\n    # Insert AgentNodes\n    agent_nodes = []\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_NODES_PER_GRAPH} agent nodes\"\n    )\n    for graph in agent_graphs:\n        num_nodes = random.randint(MIN_NODES_PER_GRAPH, MAX_NODES_PER_GRAPH)\n        for _ in range(num_nodes):  # Create 5 AgentNodes per graph\n            block = random.choice(agent_blocks)\n            node = await db.agentnode.create(\n                data={\n                    \"agentBlockId\": block.id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": \"{}\",\n                    \"metadata\": \"{}\",\n                }\n            )\n            agent_nodes.append(node)\n\n    # Insert AgentPresets\n    agent_presets = []\n    print(f\"Inserting {NUM_USERS * MAX_PRESETS_PER_USER} agent presets\")\n    for user in users:\n        num_presets = random.randint(MIN_PRESETS_PER_USER, MAX_PRESETS_PER_USER)\n        for _ in range(num_presets):  # Create 1 AgentPreset per user\n            graph = random.choice(agent_graphs)\n            preset = await db.agentpreset.create(\n                data={\n                    \"name\": faker.sentence(nb_words=3),\n                    \"description\": faker.text(max_nb_chars=200),\n                    \"userId\": user.id,\n                    \"agentId\": graph.id,\n                    \"agentVersion\": graph.version,\n                    \"isActive\": True,\n                }\n            )\n            agent_presets.append(preset)\n\n    # Insert UserAgents\n    user_agents = []\n    print(f\"Inserting {NUM_USERS * MAX_AGENTS_PER_USER} user agents\")\n    for user in users:\n        num_agents = random.randint(MIN_AGENTS_PER_USER, MAX_AGENTS_PER_USER)\n        for _ in range(num_agents):  # Create 1 UserAgent per user\n            graph = random.choice(agent_graphs)\n            preset = random.choice(agent_presets)\n            user_agent = await db.useragent.create(\n                data={\n                    \"userId\": user.id,\n                    \"agentId\": graph.id,\n                    \"agentVersion\": graph.version,\n                    \"agentPresetId\": preset.id,\n                    \"isFavorite\": random.choice([True, False]),\n                    \"isCreatedByUser\": random.choice([True, False]),\n                    \"isArchived\": random.choice([True, False]),\n                    \"isDeleted\": random.choice([True, False]),\n                }\n            )\n            user_agents.append(user_agent)\n\n    # Insert AgentGraphExecutions\n    # Insert AgentGraphExecutions\n    agent_graph_executions = []\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent graph executions\"\n    )\n    graph_execution_data = []\n    for graph in agent_graphs:\n        user = random.choice(users)\n        num_executions = random.randint(\n            MIN_EXECUTIONS_PER_GRAPH, MAX_EXECUTIONS_PER_GRAPH\n        )\n        for _ in range(num_executions):\n            matching_presets = [p for p in agent_presets if p.agentId == graph.id]\n            preset = (\n                random.choice(matching_presets)\n                if matching_presets and random.random() < 0.5\n                else None\n            )\n\n            graph_execution_data.append(\n                {\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"userId\": user.id,\n                    \"executionStatus\": prisma.enums.AgentExecutionStatus.COMPLETED,\n                    \"startedAt\": faker.date_time_this_year(),\n                    \"agentPresetId\": preset.id if preset else None,\n                }\n            )\n\n    agent_graph_executions = await db.agentgraphexecution.create_many(\n        data=graph_execution_data\n    )\n    # Need to fetch the created records since create_many doesn't return them\n    agent_graph_executions = await db.agentgraphexecution.find_many()\n\n    # Insert AgentNodeExecutions\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node executions\"\n    )\n    node_execution_data = []\n    for execution in agent_graph_executions:\n        nodes = [\n            node for node in agent_nodes if node.agentGraphId == execution.agentGraphId\n        ]\n        for node in nodes:\n            node_execution_data.append(\n                {\n                    \"agentGraphExecutionId\": execution.id,\n                    \"agentNodeId\": node.id,\n                    \"executionStatus\": prisma.enums.AgentExecutionStatus.COMPLETED,\n                    \"addedTime\": datetime.now(),\n                }\n            )\n\n    agent_node_executions = await db.agentnodeexecution.create_many(\n        data=node_execution_data\n    )\n    # Need to fetch the created records since create_many doesn't return them\n    agent_node_executions = await db.agentnodeexecution.find_many()\n\n    # Insert AgentNodeExecutionInputOutput\n    print(\n        f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node execution input/outputs\"\n    )\n    input_output_data = []\n    for node_execution in agent_node_executions:\n        # Input data\n        input_output_data.append(\n            {\n                \"name\": \"input1\",\n                \"data\": \"{}\",\n                \"time\": datetime.now(),\n                \"referencedByInputExecId\": node_execution.id,\n            }\n        )\n        # Output data\n        input_output_data.append(\n            {\n                \"name\": \"output1\",\n                \"data\": \"{}\",\n                \"time\": datetime.now(),\n                \"referencedByOutputExecId\": node_execution.id,\n            }\n        )\n\n    await db.agentnodeexecutioninputoutput.create_many(data=input_output_data)\n\n    # Insert AgentNodeLinks\n    print(f\"Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent node links\")\n    for graph in agent_graphs:\n        nodes = [node for node in agent_nodes if node.agentGraphId == graph.id]\n        if len(nodes) >= 2:\n            source_node = nodes[0]\n            sink_node = nodes[1]\n            await db.agentnodelink.create(\n                data={\n                    \"agentNodeSourceId\": source_node.id,\n                    \"sourceName\": \"output1\",\n                    \"agentNodeSinkId\": sink_node.id,\n                    \"sinkName\": \"input1\",\n                    \"isStatic\": False,\n                }\n            )\n\n    # Insert AnalyticsDetails\n    print(f\"Inserting {NUM_USERS} analytics details\")\n    for user in users:\n        for _ in range(1):\n            await db.analyticsdetails.create(\n                data={\n                    \"userId\": user.id,\n                    \"type\": faker.word(),\n                    \"data\": prisma.Json({}),\n                    \"dataIndex\": faker.word(),\n                }\n            )\n\n    # Insert AnalyticsMetrics\n    print(f\"Inserting {NUM_USERS} analytics metrics\")\n    for user in users:\n        for _ in range(1):\n            await db.analyticsmetrics.create(\n                data={\n                    \"userId\": user.id,\n                    \"analyticMetric\": faker.word(),\n                    \"value\": random.uniform(0, 100),\n                    \"dataString\": faker.word(),\n                }\n            )\n\n    # Insert CreditTransaction (formerly UserBlockCredit)\n    print(f\"Inserting {NUM_USERS} credit transactions\")\n    for user in users:\n        for _ in range(1):\n            block = random.choice(agent_blocks)\n            await db.credittransaction.create(\n                data={\n                    \"transactionKey\": str(faker.uuid4()),\n                    \"userId\": user.id,\n                    \"blockId\": block.id,\n                    \"amount\": random.randint(1, 100),\n                    \"type\": (\n                        prisma.enums.CreditTransactionType.TOP_UP\n                        if random.random() < 0.5\n                        else prisma.enums.CreditTransactionType.USAGE\n                    ),\n                    \"metadata\": prisma.Json({}),\n                }\n            )\n\n    # Insert Profiles\n    profiles = []\n    print(f\"Inserting {NUM_USERS} profiles\")\n    for user in users:\n        profile = await db.profile.create(\n            data={\n                \"userId\": user.id,\n                \"name\": user.name or faker.name(),\n                \"username\": faker.unique.user_name(),\n                \"description\": faker.text(),\n                \"links\": [faker.url() for _ in range(3)],\n                \"avatarUrl\": get_image(),\n            }\n        )\n        profiles.append(profile)\n\n    # Insert StoreListings\n    store_listings = []\n    print(f\"Inserting {NUM_USERS} store listings\")\n    for graph in agent_graphs:\n        user = random.choice(users)\n        listing = await db.storelisting.create(\n            data={\n                \"agentId\": graph.id,\n                \"agentVersion\": graph.version,\n                \"owningUserId\": user.id,\n                \"isApproved\": random.choice([True, False]),\n            }\n        )\n        store_listings.append(listing)\n\n    # Insert StoreListingVersions\n    store_listing_versions = []\n    print(f\"Inserting {NUM_USERS} store listing versions\")\n    for listing in store_listings:\n        graph = [g for g in agent_graphs if g.id == listing.agentId][0]\n        version = await db.storelistingversion.create(\n            data={\n                \"agentId\": graph.id,\n                \"agentVersion\": graph.version,\n                \"slug\": faker.slug(),\n                \"name\": graph.name or faker.sentence(nb_words=3),\n                \"subHeading\": faker.sentence(),\n                \"videoUrl\": faker.url(),\n                \"imageUrls\": [get_image() for _ in range(3)],\n                \"description\": faker.text(),\n                \"categories\": [faker.word() for _ in range(3)],\n                \"isFeatured\": random.choice([True, False]),\n                \"isAvailable\": True,\n                \"isApproved\": random.choice([True, False]),\n                \"storeListingId\": listing.id,\n            }\n        )\n        store_listing_versions.append(version)\n\n    # Insert StoreListingReviews\n    print(f\"Inserting {NUM_USERS * MAX_REVIEWS_PER_VERSION} store listing reviews\")\n    for version in store_listing_versions:\n        # Create a copy of users list and shuffle it to avoid duplicates\n        available_reviewers = users.copy()\n        random.shuffle(available_reviewers)\n\n        # Limit number of reviews to available unique reviewers\n        num_reviews = min(\n            random.randint(MIN_REVIEWS_PER_VERSION, MAX_REVIEWS_PER_VERSION),\n            len(available_reviewers),\n        )\n\n        # Take only the first num_reviews reviewers\n        for reviewer in available_reviewers[:num_reviews]:\n            await db.storelistingreview.create(\n                data={\n                    \"storeListingVersionId\": version.id,\n                    \"reviewByUserId\": reviewer.id,\n                    \"score\": random.randint(1, 5),\n                    \"comments\": faker.text(),\n                }\n            )\n\n    # Insert StoreListingSubmissions\n    print(f\"Inserting {NUM_USERS} store listing submissions\")\n    for listing in store_listings:\n        version = random.choice(store_listing_versions)\n        reviewer = random.choice(users)\n        status: prisma.enums.SubmissionStatus = random.choice(\n            [\n                prisma.enums.SubmissionStatus.PENDING,\n                prisma.enums.SubmissionStatus.APPROVED,\n                prisma.enums.SubmissionStatus.REJECTED,\n            ]\n        )\n        await db.storelistingsubmission.create(\n            data={\n                \"storeListingId\": listing.id,\n                \"storeListingVersionId\": version.id,\n                \"reviewerId\": reviewer.id,\n                \"Status\": status,\n                \"reviewComments\": faker.text(),\n            }\n        )\n\n    # Insert APIKeys\n    print(f\"Inserting {NUM_USERS} api keys\")\n    for user in users:\n        await db.apikey.create(\n            data={\n                \"name\": faker.word(),\n                \"prefix\": str(faker.uuid4())[:8],\n                \"postfix\": str(faker.uuid4())[-8:],\n                \"key\": str(faker.sha256()),\n                \"status\": prisma.enums.APIKeyStatus.ACTIVE,\n                \"permissions\": [\n                    prisma.enums.APIKeyPermission.EXECUTE_GRAPH,\n                    prisma.enums.APIKeyPermission.READ_GRAPH,\n                ],\n                \"description\": faker.text(),\n                \"userId\": user.id,\n            }\n        )\n\n    await db.disconnect()\n",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": 335,
                            "end_token": 339,
                            "label": "db = Prisma()",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 335,
                                    "end_token": 335,
                                    "label": "db",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 337,
                                    "end_token": 339,
                                    "label": "Prisma()",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 337,
                                            "end_token": 337,
                                            "label": "Prisma",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "start_token": 341,
                            "end_token": 346,
                            "label": "await db.connect()",
                            "children": [
                                {
                                    "type": "await",
                                    "start_token": 341,
                                    "end_token": 346,
                                    "label": "await db.connect()",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 342,
                                            "end_token": 346,
                                            "label": "db.connect()",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "start_token": 342,
                                                    "end_token": 344,
                                                    "label": "db.connect",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 342,
                                                            "end_token": 342,
                                                            "label": "db",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 344,
                                                            "end_token": 344,
                                                            "label": "connect",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "start_token": 349,
                            "end_token": 352,
                            "label": "# Insert Users\n",
                            "children": []
                        },
                        {
                            "type": "expression_statement",
                            "start_token": 353,
                            "end_token": 357,
                            "label": "print(f\"Inserting {NUM_USERS} users\")",
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 353,
                                    "end_token": 357,
                                    "label": "print(f\"Inserting {NUM_USERS} users\")",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 353,
                                            "end_token": 353,
                                            "label": "print",
                                            "children": []
                                        },
                                        {
                                            "type": "format_specifier",
                                            "start_token": 355,
                                            "end_token": 356,
                                            "label": "f\"Inserting {NUM_USERS} users\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 359,
                            "end_token": 362,
                            "label": "users = []",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 359,
                                    "end_token": 359,
                                    "label": "users",
                                    "children": []
                                },
                                {
                                    "type": "list",
                                    "start_token": 361,
                                    "end_token": 362,
                                    "label": "[]",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "start_token": 364,
                            "end_token": 444,
                            "label": "for _ in range(NUM_USERS):\n        user = await db.user.create(\n            data={\n                \"id\": str(faker.uuid4()),\n                \"email\": faker.unique.email(),\n                \"name\": faker.name(),\n                \"metadata\": prisma.Json({}),\n                \"integrations\": \"\",\n            }\n        )\n        users.append(user)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 365,
                                    "end_token": 365,
                                    "label": "_",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 367,
                                    "end_token": 370,
                                    "label": "range(NUM_USERS)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 367,
                                            "end_token": 367,
                                            "label": "range",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 369,
                                            "end_token": 369,
                                            "label": "NUM_USERS",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 371,
                                    "end_token": 444,
                                    "label": ":\n        user = await db.user.create(\n            data={\n                \"id\": str(faker.uuid4()),\n                \"email\": faker.unique.email(),\n                \"name\": faker.name(),\n                \"metadata\": prisma.Json({}),\n                \"integrations\": \"\",\n            }\n        )\n        users.append(user)",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 373,
                                            "end_token": 437,
                                            "label": "user = await db.user.create(\n            data={\n                \"id\": str(faker.uuid4()),\n                \"email\": faker.unique.email(),\n                \"name\": faker.name(),\n                \"metadata\": prisma.Json({}),\n                \"integrations\": \"\",\n            }\n        )",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 373,
                                                    "end_token": 373,
                                                    "label": "user",
                                                    "children": []
                                                },
                                                {
                                                    "type": "await",
                                                    "start_token": 375,
                                                    "end_token": 437,
                                                    "label": "await db.user.create(\n            data={\n                \"id\": str(faker.uuid4()),\n                \"email\": faker.unique.email(),\n                \"name\": faker.name(),\n                \"metadata\": prisma.Json({}),\n                \"integrations\": \"\",\n            }\n        )",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 376,
                                                            "end_token": 437,
                                                            "label": "db.user.create(\n            data={\n                \"id\": str(faker.uuid4()),\n                \"email\": faker.unique.email(),\n                \"name\": faker.name(),\n                \"metadata\": prisma.Json({}),\n                \"integrations\": \"\",\n            }\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 376,
                                                                    "end_token": 380,
                                                                    "label": "db.user.create",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 376,
                                                                            "end_token": 376,
                                                                            "label": "db",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 378,
                                                                            "end_token": 378,
                                                                            "label": "user",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 380,
                                                                            "end_token": 380,
                                                                            "label": "create",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "pair",
                                                                    "start_token": 383,
                                                                    "end_token": 435,
                                                                    "label": "data={\n                \"id\": str(faker.uuid4()),\n                \"email\": faker.unique.email(),\n                \"name\": faker.name(),\n                \"metadata\": prisma.Json({}),\n                \"integrations\": \"\",\n            }",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 387,
                                                                            "end_token": 388,
                                                                            "label": "\"id\":",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 389,
                                                                            "end_token": 396,
                                                                            "label": "str(faker.uuid4())",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 391,
                                                                                    "end_token": 393,
                                                                                    "label": "faker.uuid4",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 391,
                                                                                            "end_token": 391,
                                                                                            "label": "faker",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 393,
                                                                                            "end_token": 393,
                                                                                            "label": "uuid4",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "pair",
                                                                    "start_token": 399,
                                                                    "end_token": 408,
                                                                    "label": "\"email\": faker.unique.email(),",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 399,
                                                                            "end_token": 399,
                                                                            "label": "\"email\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "attribute",
                                                                            "start_token": 401,
                                                                            "end_token": 405,
                                                                            "label": "faker.unique.email",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 401,
                                                                                    "end_token": 401,
                                                                                    "label": "faker",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 403,
                                                                                    "end_token": 403,
                                                                                    "label": "unique",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 405,
                                                                                    "end_token": 405,
                                                                                    "label": "email",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "pair",
                                                                    "start_token": 410,
                                                                    "end_token": 417,
                                                                    "label": "\"name\": faker.name(),",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 410,
                                                                            "end_token": 410,
                                                                            "label": "\"name\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "attribute",
                                                                            "start_token": 412,
                                                                            "end_token": 414,
                                                                            "label": "faker.name",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 412,
                                                                                    "end_token": 412,
                                                                                    "label": "faker",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 414,
                                                                                    "end_token": 414,
                                                                                    "label": "name",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "pair",
                                                                    "start_token": 419,
                                                                    "end_token": 428,
                                                                    "label": "\"metadata\": prisma.Json({}),",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 419,
                                                                            "end_token": 419,
                                                                            "label": "\"metadata\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 421,
                                                                            "end_token": 427,
                                                                            "label": "prisma.Json({})",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 421,
                                                                                    "end_token": 423,
                                                                                    "label": "prisma.Json",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 421,
                                                                                            "end_token": 421,
                                                                                            "label": "prisma",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 423,
                                                                                            "end_token": 423,
                                                                                            "label": "Json",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "dictionary",
                                                                                    "start_token": 425,
                                                                                    "end_token": 426,
                                                                                    "label": "{}",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "pair",
                                                                    "start_token": 430,
                                                                    "end_token": 433,
                                                                    "label": "\"integrations\": \"\",",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 430,
                                                                            "end_token": 430,
                                                                            "label": "\"integrations\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 432,
                                                                            "end_token": 432,
                                                                            "label": "\"\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "start_token": 439,
                                            "end_token": 443,
                                            "label": "users.append(user",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 439,
                                                    "end_token": 443,
                                                    "label": "users.append(user",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "start_token": 439,
                                                            "end_token": 441,
                                                            "label": "users.append",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 439,
                                                                    "end_token": 439,
                                                                    "label": "users",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 441,
                                                                    "end_token": 441,
                                                                    "label": "append",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 443,
                                                            "end_token": 443,
                                                            "label": "user",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "start_token": 447,
                            "end_token": 450,
                            "label": "# Insert AgentBlocks\n",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 451,
                            "end_token": 454,
                            "label": "agent_blocks = []",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 451,
                                    "end_token": 451,
                                    "label": "agent_blocks",
                                    "children": []
                                },
                                {
                                    "type": "list",
                                    "start_token": 453,
                                    "end_token": 454,
                                    "label": "[]",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "start_token": 456,
                            "end_token": 460,
                            "label": "print(f\"Inserting {NUM_AGENT_BLOCKS} agent blocks\")",
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 456,
                                    "end_token": 460,
                                    "label": "print(f\"Inserting {NUM_AGENT_BLOCKS} agent blocks\")",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 456,
                                            "end_token": 456,
                                            "label": "print",
                                            "children": []
                                        },
                                        {
                                            "type": "format_specifier",
                                            "start_token": 458,
                                            "end_token": 459,
                                            "label": "f\"Inserting {NUM_AGENT_BLOCKS} agent blocks\"",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "start_token": 462,
                            "end_token": 510,
                            "label": "for _ in range(NUM_AGENT_BLOCKS):\n        block = await db.agentblock.create(\n            data={\n                \"name\": f\"{faker.word()}_{str(faker.uuid4())[:8]}\",\n                \"inputSchema\": \"{}\",\n                \"outputSchema\": \"{}\",\n            }\n        )\n        agent_blocks.append(block)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 463,
                                    "end_token": 463,
                                    "label": "_",
                                    "children": []
                                },
                                {
                                    "type": "call",
                                    "start_token": 465,
                                    "end_token": 468,
                                    "label": "range(NUM_AGENT_BLOCKS)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 465,
                                            "end_token": 465,
                                            "label": "range",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 467,
                                            "end_token": 467,
                                            "label": "NUM_AGENT_BLOCKS",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 469,
                                    "end_token": 510,
                                    "label": ":\n        block = await db.agentblock.create(\n            data={\n                \"name\": f\"{faker.word()}_{str(faker.uuid4())[:8]}\",\n                \"inputSchema\": \"{}\",\n                \"outputSchema\": \"{}\",\n            }\n        )\n        agent_blocks.append(block)",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 471,
                                            "end_token": 503,
                                            "label": "block = await db.agentblock.create(\n            data={\n                \"name\": f\"{faker.word()}_{str(faker.uuid4())[:8]}\",\n                \"inputSchema\": \"{}\",\n                \"outputSchema\": \"{}\",\n            }\n        )",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 471,
                                                    "end_token": 471,
                                                    "label": "block",
                                                    "children": []
                                                },
                                                {
                                                    "type": "await",
                                                    "start_token": 473,
                                                    "end_token": 503,
                                                    "label": "await db.agentblock.create(\n            data={\n                \"name\": f\"{faker.word()}_{str(faker.uuid4())[:8]}\",\n                \"inputSchema\": \"{}\",\n                \"outputSchema\": \"{}\",\n            }\n        )",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 474,
                                                            "end_token": 503,
                                                            "label": "db.agentblock.create(\n            data={\n                \"name\": f\"{faker.word()}_{str(faker.uuid4())[:8]}\",\n                \"inputSchema\": \"{}\",\n                \"outputSchema\": \"{}\",\n            }\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 474,
                                                                    "end_token": 478,
                                                                    "label": "db.agentblock.create",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 474,
                                                                            "end_token": 474,
                                                                            "label": "db",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 476,
                                                                            "end_token": 476,
                                                                            "label": "agentblock",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 478,
                                                                            "end_token": 478,
                                                                            "label": "create",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "pair",
                                                                    "start_token": 481,
                                                                    "end_token": 501,
                                                                    "label": "data={\n                \"name\": f\"{faker.word()}_{str(faker.uuid4())[:8]}\",\n                \"inputSchema\": \"{}\",\n                \"outputSchema\": \"{}\",\n            }",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 485,
                                                                            "end_token": 486,
                                                                            "label": "\"name\":",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "concatenated_string",
                                                                            "start_token": 487,
                                                                            "end_token": 488,
                                                                            "label": "f\"{faker.word()}_{str(faker.uuid4())[:8]}\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "start_token": 487,
                                                                                    "end_token": 487,
                                                                                    "label": "f",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "start_token": 487,
                                                                                            "end_token": 487,
                                                                                            "label": "f",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "start_token": 487,
                                                                                                    "end_token": 487,
                                                                                                    "label": "f",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "slice",
                                                                                    "start_token": 488,
                                                                                    "end_token": 488,
                                                                                    "label": "\"{faker.word()}_{str(faker.uuid4())[:8]}\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "subscript",
                                                                                            "start_token": 488,
                                                                                            "end_token": 488,
                                                                                            "label": "\"{faker.word()}_{str(faker.uuid4())[:8]}\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "pair",
                                                                    "start_token": 491,
                                                                    "end_token": 493,
                                                                    "label": "\"inputSchema\": \"{}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 491,
                                                                            "end_token": 491,
                                                                            "label": "\"inputSchema\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 493,
                                                                            "end_token": 493,
                                                                            "label": "\"{}\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "pair",
                                                                    "start_token": 496,
                                                                    "end_token": 498,
                                                                    "label": "\"outputSchema\": \"{}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 496,
                                                                            "end_token": 496,
                                                                            "label": "\"outputSchema\"",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 498,
                                                                            "end_token": 498,
                                                                            "label": "\"{}\"",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "start_token": 505,
                                            "end_token": 509,
                                            "label": "agent_blocks.append(block",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 505,
                                                    "end_token": 509,
                                                    "label": "agent_blocks.append(block",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "start_token": 505,
                                                            "end_token": 507,
                                                            "label": "agent_blocks.append",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 505,
                                                                    "end_token": 505,
                                                                    "label": "agent_blocks",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 507,
                                                                    "end_token": 507,
                                                                    "label": "append",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 509,
                                                            "end_token": 509,
                                                            "label": "block",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "main",
            "start_line": 49,
            "end_line": 432
        },
        {
            "type": "if_statement",
            "start_token": 2634,
            "end_token": 2648,
            "label": "if __name__ == \"__main__\":\n    asyncio.run(main())",
            "children": [
                {
                    "type": "comparison_operator",
                    "start_token": 2634,
                    "end_token": 2638,
                    "label": "if __name__ == \"__main__\"",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 2635,
                            "end_token": 2635,
                            "label": "__name__",
                            "children": []
                        },
                        {
                            "type": "string",
                            "start_token": 2638,
                            "end_token": 2638,
                            "label": "\"__main__\"",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 2639,
                    "end_token": 2648,
                    "label": ":\n    asyncio.run(main())",
                    "children": [
                        {
                            "type": "call",
                            "start_token": 2641,
                            "end_token": 2648,
                            "label": "asyncio.run(main())",
                            "children": [
                                {
                                    "type": "attribute",
                                    "start_token": 2641,
                                    "end_token": 2643,
                                    "label": "asyncio.run",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 2641,
                                            "end_token": 2641,
                                            "label": "asyncio",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "argument_list",
                                    "start_token": 2644,
                                    "end_token": 2647,
                                    "label": "(main()",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 2646,
                                            "end_token": 2647,
                                            "label": "()",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 2646,
                                                    "end_token": 2646,
                                                    "label": "(",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 2647,
                                                    "end_token": 2647,
                                                    "label": ")",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}