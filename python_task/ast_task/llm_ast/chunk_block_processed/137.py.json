{
    "type": "module",
    "start_token": 0,
    "end_token": 225,
    "label": "import logging\nimport os\nimport uuid\n\nimport fastapi\nfrom google.cloud import storage\n\nimport backend.server.v2.store.exceptions\nfrom backend.util.settings import Settings\n\nlogger = logging.getLogger(__name__)\n\nALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}\nALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\"}\nMAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB\n\n\nasync def check_media_exists(user_id: str, filename: str) -> str | None:\n    \"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"\n    try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None\n\n\n",
    "children": [
        {
            "type": "block",
            "start_token": 0,
            "end_token": 1,
            "label": "import logging",
            "children": [
                {
                    "type": "import_statement",
                    "start_token": 0,
                    "end_token": 1,
                    "label": "import logging",
                    "children": []
                }
            ]
        },
        {
            "type": "block",
            "start_token": 3,
            "end_token": 4,
            "label": "import os",
            "children": [
                {
                    "type": "import_statement",
                    "start_token": 3,
                    "end_token": 4,
                    "label": "import os",
                    "children": []
                }
            ]
        },
        {
            "type": "block",
            "start_token": 6,
            "end_token": 7,
            "label": "import uuid",
            "children": [
                {
                    "type": "import_statement",
                    "start_token": 6,
                    "end_token": 7,
                    "label": "import uuid",
                    "children": []
                }
            ]
        },
        {
            "type": "block",
            "start_token": 10,
            "end_token": 11,
            "label": "import fastapi",
            "children": [
                {
                    "type": "import_statement",
                    "start_token": 10,
                    "end_token": 11,
                    "label": "import fastapi",
                    "children": []
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 13,
            "end_token": 18,
            "label": "from google.cloud import storage",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 14,
                    "end_token": 16,
                    "label": "google.cloud",
                    "children": []
                }
            ]
        },
        {
            "type": "block",
            "start_token": 21,
            "end_token": 30,
            "label": "import backend.server.v2.store.exceptions",
            "children": [
                {
                    "type": "import_statement",
                    "start_token": 21,
                    "end_token": 30,
                    "label": "import backend.server.v2.store.exceptions",
                    "children": [
                        {
                            "type": "dotted_name",
                            "start_token": 22,
                            "end_token": 30,
                            "label": "backend.server.v2.store.exceptions",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "start_token": 32,
            "end_token": 39,
            "label": "from backend.util.settings import Settings",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 33,
                    "end_token": 37,
                    "label": "backend.util.settings",
                    "children": []
                }
            ]
        },
        {
            "type": "assignment",
            "start_token": 42,
            "end_token": 49,
            "label": "logger = logging.getLogger(__name__)",
            "children": [
                {
                    "type": "attribute",
                    "start_token": 44,
                    "end_token": 46,
                    "label": "logging.getLogger",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "start_token": 47,
                    "end_token": 48,
                    "label": "(__name__",
                    "children": []
                }
            ]
        },
        {
            "type": "assignment",
            "start_token": 52,
            "end_token": 62,
            "label": "ALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}",
            "children": [
                {
                    "type": "dictionary",
                    "start_token": 54,
                    "end_token": 62,
                    "label": "{\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}",
                    "children": [
                        {
                            "type": "pair",
                            "start_token": 55,
                            "end_token": 56,
                            "label": "\"image/jpeg\",",
                            "children": []
                        },
                        {
                            "type": "pair",
                            "start_token": 57,
                            "end_token": 58,
                            "label": "\"image/png\",",
                            "children": []
                        },
                        {
                            "type": "pair",
                            "start_token": 59,
                            "end_token": 60,
                            "label": "\"image/gif\",",
                            "children": []
                        },
                        {
                            "type": "pair",
                            "start_token": 61,
                            "end_token": 62,
                            "label": "\"image/webp\"}",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "assignment",
            "start_token": 64,
            "end_token": 70,
            "label": "ALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\"}",
            "children": [
                {
                    "type": "dictionary",
                    "start_token": 66,
                    "end_token": 70,
                    "label": "{\"video/mp4\", \"video/webm\"}",
                    "children": [
                        {
                            "type": "pair",
                            "start_token": 67,
                            "end_token": 68,
                            "label": "\"video/mp4\",",
                            "children": []
                        },
                        {
                            "type": "pair",
                            "start_token": 69,
                            "end_token": 70,
                            "label": "\"video/webm\"}",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "assignment",
            "start_token": 72,
            "end_token": 82,
            "label": "MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB\n",
            "children": [
                {
                    "type": "binary_operator",
                    "start_token": 74,
                    "end_token": 78,
                    "label": "50 * 1024 * 1024",
                    "children": [
                        {
                            "type": "binary_operator",
                            "start_token": 74,
                            "end_token": 76,
                            "label": "50 * 1024",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "comment",
                    "start_token": 79,
                    "end_token": 81,
                    "label": "# 50MB",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 85,
            "end_token": 223,
            "label": "async def check_media_exists(user_id: str, filename: str) -> str | None:\n    \"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"\n    try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 85,
                    "end_token": 85,
                    "label": "async",
                    "children": []
                },
                {
                    "type": "function_definition",
                    "start_token": 86,
                    "end_token": 222,
                    "label": "def check_media_exists(user_id: str, filename: str) -> str | None:\n    \"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"\n    try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 87,
                            "end_token": 87,
                            "label": "check_media_exists",
                            "children": []
                        },
                        {
                            "type": "parameters",
                            "start_token": 88,
                            "end_token": 96,
                            "label": "(user_id: str, filename: str)",
                            "children": [
                                {
                                    "type": "typed_parameter",
                                    "start_token": 89,
                                    "end_token": 91,
                                    "label": "user_id: str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 89,
                                            "end_token": 89,
                                            "label": "user_id",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 91,
                                            "end_token": 91,
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "typed_parameter",
                                    "start_token": 93,
                                    "end_token": 95,
                                    "label": "filename: str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 93,
                                            "end_token": 93,
                                            "label": "filename",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 95,
                                            "end_token": 95,
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "union_type",
                            "start_token": 98,
                            "end_token": 100,
                            "label": "> str |",
                            "children": [
                                {
                                    "type": "type",
                                    "start_token": 99,
                                    "end_token": 99,
                                    "label": "str",
                                    "children": []
                                },
                                {
                                    "type": "none",
                                    "start_token": 101,
                                    "end_token": 101,
                                    "label": "None",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "string",
                            "start_token": 104,
                            "end_token": 106,
                            "label": "\"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"",
                            "children": [
                                {
                                    "type": "string_content",
                                    "start_token": 105,
                                    "end_token": 105,
                                    "label": "\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 108,
                            "end_token": 222,
                            "label": "try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None",
                            "children": [
                                {
                                    "type": "try_statement",
                                    "start_token": 108,
                                    "end_token": 222,
                                    "label": "try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 109,
                                            "end_token": 205,
                                            "label": ":\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 111,
                                                    "end_token": 115,
                                                    "label": "settings = Settings()",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 111,
                                                            "end_token": 111,
                                                            "label": "settings",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 113,
                                                            "end_token": 115,
                                                            "label": "Settings()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 113,
                                                                    "end_token": 113,
                                                                    "label": "Settings",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 114,
                                                                    "end_token": 115,
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 117,
                                                    "end_token": 123,
                                                    "label": "storage_client = storage.Client()",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 117,
                                                            "end_token": 117,
                                                            "label": "storage_client",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 119,
                                                            "end_token": 123,
                                                            "label": "storage.Client()",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 119,
                                                                    "end_token": 121,
                                                                    "label": "storage.Client",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 119,
                                                                            "end_token": 119,
                                                                            "label": "storage",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 121,
                                                                            "end_token": 121,
                                                                            "label": "Client",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 122,
                                                                    "end_token": 123,
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 125,
                                                    "end_token": 136,
                                                    "label": "bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 125,
                                                            "end_token": 125,
                                                            "label": "bucket",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 127,
                                                            "end_token": 136,
                                                            "label": "storage_client.bucket(settings.config.media_gcs_bucket_name)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 127,
                                                                    "end_token": 129,
                                                                    "label": "storage_client.bucket",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 127,
                                                                            "end_token": 127,
                                                                            "label": "storage_client",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 129,
                                                                            "end_token": 129,
                                                                            "label": "bucket",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 130,
                                                                    "end_token": 136,
                                                                    "label": "(settings.config.media_gcs_bucket_name)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "start_token": 131,
                                                                            "end_token": 135,
                                                                            "label": "settings.config.media_gcs_bucket_name",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 131,
                                                                                    "end_token": 133,
                                                                                    "label": "settings.config",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 131,
                                                                                            "end_token": 131,
                                                                                            "label": "settings",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 133,
                                                                                            "end_token": 133,
                                                                                            "label": "config",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 135,
                                                                                    "end_token": 135,
                                                                                    "label": "media_gcs_bucket_name",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 143,
                                                    "end_token": 146,
                                                    "label": "image_path = f\"users/{user_id}/images/{filename}\"",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 143,
                                                            "end_token": 143,
                                                            "label": "image_path",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "concatenated_string",
                                                            "start_token": 145,
                                                            "end_token": 146,
                                                            "label": "f\"users/{user_id}/images/{filename}\"",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 146,
                                                                    "end_token": 146,
                                                                    "label": "\"users/{user_id}/images/{filename}\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 148,
                                                    "end_token": 155,
                                                    "label": "image_blob = bucket.blob(image_path)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 148,
                                                            "end_token": 148,
                                                            "label": "image_blob",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 150,
                                                            "end_token": 155,
                                                            "label": "bucket.blob(image_path)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 150,
                                                                    "end_token": 152,
                                                                    "label": "bucket.blob",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 150,
                                                                            "end_token": 150,
                                                                            "label": "bucket",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 152,
                                                                            "end_token": 152,
                                                                            "label": "blob",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 153,
                                                                    "end_token": 155,
                                                                    "label": "(image_path)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 154,
                                                                            "end_token": 154,
                                                                            "label": "image_path",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "start_token": 157,
                                                    "end_token": 169,
                                                    "label": "if image_blob.exists():\n            return image_blob.public_url\n",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 158,
                                                            "end_token": 162,
                                                            "label": "image_blob.exists()",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 158,
                                                                    "end_token": 160,
                                                                    "label": "image_blob.exists",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 158,
                                                                            "end_token": 158,
                                                                            "label": "image_blob",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 160,
                                                                            "end_token": 160,
                                                                            "label": "exists",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 161,
                                                                    "end_token": 162,
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 163,
                                                            "end_token": 169,
                                                            "label": ":\n            return image_blob.public_url\n",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "start_token": 165,
                                                                    "end_token": 168,
                                                                    "label": "return image_blob.public_url",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "start_token": 166,
                                                                            "end_token": 168,
                                                                            "label": "image_blob.public_url",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 166,
                                                                                    "end_token": 166,
                                                                                    "label": "image_blob",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 168,
                                                                                    "end_token": 168,
                                                                                    "label": "public_url",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 175,
                                                    "end_token": 178,
                                                    "label": "video_path = f\"users/{user_id}/videos/{filename}\"",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 175,
                                                            "end_token": 175,
                                                            "label": "video_path",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "concatenated_string",
                                                            "start_token": 177,
                                                            "end_token": 178,
                                                            "label": "f\"users/{user_id}/videos/{filename}\"",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 178,
                                                                    "end_token": 178,
                                                                    "label": "\"users/{user_id}/videos/{filename}\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 181,
                                                    "end_token": 188,
                                                    "label": "video_blob = bucket.blob(video_path)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 181,
                                                            "end_token": 181,
                                                            "label": "video_blob",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 183,
                                                            "end_token": 188,
                                                            "label": "bucket.blob(video_path)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 183,
                                                                    "end_token": 185,
                                                                    "label": "bucket.blob",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 183,
                                                                            "end_token": 183,
                                                                            "label": "bucket",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 185,
                                                                            "end_token": 185,
                                                                            "label": "blob",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 186,
                                                                    "end_token": 188,
                                                                    "label": "(video_path)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 187,
                                                                            "end_token": 187,
                                                                            "label": "video_path",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "start_token": 190,
                                                    "end_token": 202,
                                                    "label": "if video_blob.exists():\n            return video_blob.public_url\n",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 191,
                                                            "end_token": 195,
                                                            "label": "video_blob.exists()",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 191,
                                                                    "end_token": 193,
                                                                    "label": "video_blob.exists",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 191,
                                                                            "end_token": 191,
                                                                            "label": "video_blob",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 193,
                                                                            "end_token": 193,
                                                                            "label": "exists",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 194,
                                                                    "end_token": 195,
                                                                    "label": "()",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 196,
                                                            "end_token": 202,
                                                            "label": ":\n            return video_blob.public_url\n",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "start_token": 198,
                                                                    "end_token": 201,
                                                                    "label": "return video_blob.public_url",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "start_token": 199,
                                                                            "end_token": 201,
                                                                            "label": "video_blob.public_url",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 199,
                                                                                    "end_token": 199,
                                                                                    "label": "video_blob",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 201,
                                                                                    "end_token": 201,
                                                                                    "label": "public_url",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "return_statement",
                                                    "start_token": 204,
                                                    "end_token": 205,
                                                    "label": "return None",
                                                    "children": [
                                                        {
                                                            "type": "none",
                                                            "start_token": 205,
                                                            "end_token": 205,
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "except_clause",
                                            "start_token": 207,
                                            "end_token": 222,
                                            "label": "except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 208,
                                                    "end_token": 208,
                                                    "label": "Exception",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 210,
                                                    "end_token": 210,
                                                    "label": "e",
                                                    "children": []
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 211,
                                                    "end_token": 222,
                                                    "label": ":\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 213,
                                                            "end_token": 219,
                                                            "label": "logger.error(f\"Error checking if media file exists: {str(e)}\")",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 213,
                                                                    "end_token": 215,
                                                                    "label": "logger.error",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 213,
                                                                            "end_token": 213,
                                                                            "label": "logger",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 215,
                                                                            "end_token": 215,
                                                                            "label": "error",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 216,
                                                                    "end_token": 219,
                                                                    "label": "(f\"Error checking if media file exists: {str(e)}\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "concatenated_string",
                                                                            "start_token": 217,
                                                                            "end_token": 218,
                                                                            "label": "f\"Error checking if media file exists: {str(e)}\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 218,
                                                                                    "end_token": 218,
                                                                                    "label": "\"Error checking if media file exists: {str(e)}\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": 221,
                                                            "end_token": 222,
                                                            "label": "return None",
                                                            "children": [
                                                                {
                                                                    "type": "none",
                                                                    "start_token": 222,
                                                                    "end_token": 222,
                                                                    "label": "None",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "check_media_exists",
            "start_line": 18,
            "end_line": 51
        },
        {
            "type": "decorated_definition",
            "start_token": 226,
            "end_token": 1169,
            "label": "async def upload_media(\n    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False\n) -> str:\n\n    # Get file content for deeper validation\n    try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n\n    # Validate file signature/magic bytes\n    if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )\n\n    elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )\n\n    settings = Settings()\n\n    # Check required settings first before doing any file processing\n    if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )\n\n    try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)\n\n        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n\n    except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n    except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e\n",
            "children": [
                {
                    "type": "function_definition",
                    "start_token": 226,
                    "end_token": 1084,
                    "label": "async def upload_media(\n    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False\n) -> str:\n\n    # Get file content for deeper validation\n    try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n\n    # Validate file signature/magic bytes\n    if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )\n\n    elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )\n\n    settings = Settings()\n\n    # Check required settings first before doing any file processing\n    if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )\n\n    try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)\n\n        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n",
                    "children": [
                        {
                            "type": "parameters",
                            "start_token": 229,
                            "end_token": 247,
                            "label": "(\n    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False\n)",
                            "children": [
                                {
                                    "type": "typed_parameter",
                                    "start_token": 231,
                                    "end_token": 233,
                                    "label": "user_id: str",
                                    "children": []
                                },
                                {
                                    "type": "typed_parameter",
                                    "start_token": 235,
                                    "end_token": 239,
                                    "label": "file: fastapi.UploadFile",
                                    "children": []
                                },
                                {
                                    "type": "typed_default_parameter",
                                    "start_token": 241,
                                    "end_token": 245,
                                    "label": "use_file_name: bool = False",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "block",
                            "start_token": 252,
                            "end_token": 1084,
                            "label": "\n\n    # Get file content for deeper validation\n    try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n\n    # Validate file signature/magic bytes\n    if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )\n\n    elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )\n\n    settings = Settings()\n\n    # Check required settings first before doing any file processing\n    if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )\n\n    try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)\n\n        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n",
                            "children": [
                                {
                                    "type": "comment",
                                    "start_token": 254,
                                    "end_token": 260,
                                    "label": "# Get file content for deeper validation",
                                    "children": []
                                },
                                {
                                    "type": "try_statement",
                                    "start_token": 262,
                                    "end_token": 327,
                                    "label": "try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 264,
                                            "end_token": 297,
                                            "label": "\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 265,
                                                    "end_token": 273,
                                                    "label": "content = await file.read(1024)",
                                                    "children": []
                                                },
                                                {
                                                    "type": "await",
                                                    "start_token": 282,
                                                    "end_token": 288,
                                                    "label": "await file.seek(0)",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "except_clause",
                                            "start_token": 294,
                                            "end_token": 327,
                                            "label": "except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 299,
                                                    "end_token": 327,
                                                    "label": "\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 300,
                                                            "end_token": 306,
                                                            "label": "logger.error(f\"Error reading file content: {str(e)}\")",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 308,
                                                            "end_token": 326,
                                                            "label": "raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 319,
                                                                    "end_token": 324,
                                                                    "label": "FileReadError(\n            \"Failed to read file content\"\n        )",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "if_statement",
                                    "start_token": 337,
                                    "end_token": 545,
                                    "label": "if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )",
                                    "children": [
                                        {
                                            "type": "if_clause",
                                            "start_token": 337,
                                            "end_token": 427,
                                            "label": "if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 344,
                                                    "end_token": 427,
                                                    "label": "\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 351,
                                                            "end_token": 388,
                                                            "label": "if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                                            "children": [
                                                                {
                                                                    "type": "if_clause",
                                                                    "start_token": 351,
                                                                    "end_token": 388,
                                                                    "label": "if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 359,
                                                                            "end_token": 388,
                                                                            "label": ":  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "raise_statement",
                                                                                    "start_token": 372,
                                                                                    "end_token": 387,
                                                                                    "label": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "start_token": 383,
                                                                                            "end_token": 386,
                                                                                            "label": "InvalidFileTypeError(\n                    \"File signature does not match content type\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "start_token": 390,
                                                            "end_token": 427,
                                                            "label": "elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 398,
                                                                    "end_token": 427,
                                                                    "label": ":  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "start_token": 411,
                                                                            "end_token": 426,
                                                                            "label": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "start_token": 421,
                                                                                    "end_token": 424,
                                                                                    "label": ".InvalidFileTypeError(\n",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "elif_clause",
                                            "start_token": 548,
                                            "end_token": 672,
                                            "label": "elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 555,
                                                    "end_token": 672,
                                                    "label": "\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 562,
                                                            "end_token": 612,
                                                            "label": "if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                                            "children": [
                                                                {
                                                                    "type": "if_clause",
                                                                    "start_token": 562,
                                                                    "end_token": 612,
                                                                    "label": "if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 570,
                                                                            "end_token": 612,
                                                                            "label": "and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                                                            "children": [
                                                                                {
                                                                                    "type": "raise_statement",
                                                                                    "start_token": 595,
                                                                                    "end_token": 611,
                                                                                    "label": "\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "start_token": 606,
                                                                                            "end_token": 609,
                                                                                            "label": ".InvalidFileTypeError(\n",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 675,
                                    "end_token": 679,
                                    "label": "settings = Settings()",
                                    "children": []
                                },
                                {
                                    "type": "if_statement",
                                    "start_token": 693,
                                    "end_token": 725,
                                    "label": "if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )",
                                    "children": [
                                        {
                                            "type": "if_clause",
                                            "start_token": 693,
                                            "end_token": 725,
                                            "label": "if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 701,
                                                    "end_token": 725,
                                                    "label": "\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 702,
                                                            "end_token": 707,
                                                            "label": "logger.error(\"Missing GCS bucket name setting\")",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 709,
                                                            "end_token": 724,
                                                            "label": "raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 720,
                                                                    "end_token": 723,
                                                                    "label": "StorageConfigError(\n            \"Missing storage bucket configuration\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "try_statement",
                                    "start_token": 728,
                                    "end_token": 795,
                                    "label": "try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 730,
                                            "end_token": 751,
                                            "label": "\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 736,
                                                    "end_token": 750,
                                                    "label": "content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 742,
                                            "end_token": 797,
                                            "label": "if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n",
                                            "children": [
                                                {
                                                    "type": "if_clause",
                                                    "start_token": 742,
                                                    "end_token": 751,
                                                    "label": "if content_type is None:\n            content_type = \"image/jpeg\"\n",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "start_token": 747,
                                                            "end_token": 751,
                                                            "label": "\n            content_type = \"image/jpeg\"\n",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 748,
                                                                    "end_token": 750,
                                                                    "label": "content_type = \"image/jpeg\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "else_clause",
                                            "start_token": 766,
                                            "end_token": 795,
                                            "label": "\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 769,
                                                    "end_token": 795,
                                                    "label": "\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 770,
                                                            "end_token": 776,
                                                            "label": "logger.warning(f\"Invalid file type attempted: {content_type}\")",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 778,
                                                            "end_token": 794,
                                                            "label": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 789,
                                                                    "end_token": 793,
                                                                    "label": "InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "try_statement",
                                    "start_token": 816,
                                    "end_token": 921,
                                    "label": "try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 818,
                                            "end_token": 919,
                                            "label": "\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from",
                                            "children": [
                                                {
                                                    "type": "while_statement",
                                                    "start_token": 819,
                                                    "end_token": 853,
                                                    "label": "while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n",
                                                    "children": [
                                                        {
                                                            "type": "for_in_clause",
                                                            "start_token": 819,
                                                            "end_token": 830,
                                                            "label": "while chunk := await file.read(chunk_size):",
                                                            "children": [
                                                                {
                                                                    "type": "await",
                                                                    "start_token": 823,
                                                                    "end_token": 829,
                                                                    "label": "await file.read(chunk_size)",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 831,
                                                            "end_token": 853,
                                                            "label": "\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n",
                                                            "children": [
                                                                {
                                                                    "type": "augmented_assignment",
                                                                    "start_token": 832,
                                                                    "end_token": 838,
                                                                    "label": "file_size += len(chunk)",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "if_statement",
                                                                    "start_token": 840,
                                                                    "end_token": 852,
                                                                    "label": "if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "if_clause",
                                                                            "start_token": 840,
                                                                            "end_token": 852,
                                                                            "label": "if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "block",
                                                                                    "start_token": 845,
                                                                                    "end_token": 852,
                                                                                    "label": "\n                    logger.warning(f\"File size too large: {file_size} bytes\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "start_token": 846,
                                                                                            "end_token": 852,
                                                                                            "label": "logger.warning(f\"File size too large: {file_size} bytes\")",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "raise_statement",
                                                                                            "start_token": 854,
                                                                                            "end_token": 870,
                                                                                            "label": "raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "start_token": 865,
                                                                                                    "end_token": 869,
                                                                                                    "label": "FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "except_clause",
                                                    "start_token": 872,
                                                    "end_token": 875,
                                                    "label": "except backend.server",
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 886,
                                                            "end_token": 886,
                                                            "label": "raise",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "except_clause",
                                            "start_token": 888,
                                            "end_token": 921,
                                            "label": "except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 893,
                                                    "end_token": 919,
                                                    "label": "\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 894,
                                                            "end_token": 907,
                                                            "label": "logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 902,
                                                            "end_token": 918,
                                                            "label": "raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            )",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 911,
                                                                    "end_token": 916,
                                                                    "label": "exceptions.FileReadError(\n                \"Failed to read uploaded file\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "await",
                                    "start_token": 928,
                                    "end_token": 934,
                                    "label": "await file.seek(0)",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 942,
                                    "end_token": 948,
                                    "label": "filename = file.filename or \"\"",
                                    "children": []
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 950,
                                    "end_token": 966,
                                    "label": "file_ext = os.path.splitext(filename)[1].lower()",
                                    "children": []
                                },
                                {
                                    "type": "if_statement",
                                    "start_token": 968,
                                    "end_token": 975,
                                    "label": "if use_file_name:\n            unique_filename = filename\n",
                                    "children": [
                                        {
                                            "type": "if_clause",
                                            "start_token": 968,
                                            "end_token": 975,
                                            "label": "if use_file_name:\n            unique_filename = filename\n",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 971,
                                                    "end_token": 975,
                                                    "label": "\n            unique_filename = filename\n",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 972,
                                                            "end_token": 974,
                                                            "label": "unique_filename = filename",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "start_token": 976,
                                    "end_token": 983,
                                    "label": "else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 978,
                                            "end_token": 983,
                                            "label": "\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 979,
                                                    "end_token": 982,
                                                    "label": "unique_filename = f\"{uuid.uuid4()}{file_ext}\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 990,
                                    "end_token": 1003,
                                    "label": "media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"",
                                    "children": []
                                },
                                {
                                    "type": "try_statement",
                                    "start_token": 1006,
                                    "end_token": 1119,
                                    "label": "try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 1008,
                                            "end_token": 1118,
                                            "label": "\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "start_token": 1009,
                                                    "end_token": 1015,
                                                    "label": "storage_client = storage.Client()",
                                                    "children": []
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 1046,
                                                    "end_token": 1053,
                                                    "label": "file_bytes = await file.read()",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 1056,
                                                    "end_token": 1064,
                                                    "label": ".upload_from_string(file_bytes, content_type=content_type)",
                                                    "children": []
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 1067,
                                                    "end_token": 1072,
                                                    "label": "public_url = blob.public_url\n",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 1074,
                                                    "end_token": 1080,
                                                    "label": "logger.info(f\"Successfully uploaded file to: {storage_path}\")",
                                                    "children": []
                                                },
                                                {
                                                    "type": "return_statement",
                                                    "start_token": 1082,
                                                    "end_token": 1083,
                                                    "label": "return public_url",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "except_clause",
                                            "start_token": 1086,
                                            "end_token": 1119,
                                            "label": "except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 1091,
                                                    "end_token": 1118,
                                                    "label": "\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 1092,
                                                            "end_token": 1098,
                                                            "label": "logger.error(f\"GCS storage error: {str(e)}\")",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 1100,
                                                            "end_token": 1118,
                                                            "label": "raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 1110,
                                                                    "end_token": 1115,
                                                                    "label": ".StorageUploadError(\n                \"Failed to upload file to storage\"\n",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "upload_media",
            "start_line": 54,
            "end_line": 198
        }
    ]
}