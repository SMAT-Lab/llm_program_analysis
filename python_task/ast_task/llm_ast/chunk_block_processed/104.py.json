{
    "type": "module",
    "start_token": 0,
    "end_token": 47,
    "label": "import datetime\nimport typing\n\nimport fuzzywuzzy.fuzz\nimport prisma.enums\nimport prisma.errors\nimport prisma.models\nimport prisma.types\nimport pydantic\n\nimport market.model\nimport market.utils.extension_types\n",
    "children": [
        {
            "type": "function_definition",
            "start_token": -1,
            "end_token": 1016,
            "label": "",
            "children": [
                {
                    "type": "identifier",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "if_statement",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "if_clause",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "comparison_operator",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "boolean_operator",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "string",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "integer",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "binary_operator",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "integer",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "comparison_operator",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "boolean_operator",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "string",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "integer",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": []
                        }
                    ]
                }
            ],
            "name": "get_agent_details",
            "start_line": 262,
            "end_line": 291
        },
        {
            "type": "function_placeholder",
            "name": "search_db",
            "start_line": 294,
            "end_line": 407,
            "start_token": -1,
            "end_token": 1016,
            "label": "",
            "children": [
                {
                    "type": "module",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "parenthesized_expression",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "true",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "else_clause",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "false",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": -1,
                            "end_token": 1016,
                            "label": "",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "comment",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "if_clause",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "pass_statement",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "else_clause",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "name": "CountResponse",
                            "start_line": 377,
                            "end_line": 378
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": -1,
            "end_token": 1016,
            "label": "",
            "children": [
                {
                    "type": "identifier",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "assignment",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "binary_operator",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "binary_operator",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "get_top_agents_by_downloads",
            "start_line": 410,
            "end_line": 463
        },
        {
            "type": "function_definition",
            "start_token": -1,
            "end_token": 1016,
            "label": "",
            "children": [
                {
                    "type": "identifier",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "return_statement",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "binary_operator",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "comparison_operator",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "set_agent_featured",
            "start_line": 466,
            "end_line": 502
        },
        {
            "type": "function_definition",
            "start_token": -1,
            "end_token": 1016,
            "label": "",
            "children": [
                {
                    "type": "identifier",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": []
                }
            ],
            "name": "get_featured_agents",
            "start_line": 505,
            "end_line": 558
        },
        {
            "type": "function_placeholder",
            "name": "remove_featured_category",
            "start_line": 561,
            "end_line": 596,
            "start_token": -1,
            "end_token": 1016,
            "label": "",
            "children": [
                {
                    "type": "module",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "future_import_statement",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "import_prefix",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "dotted_name",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "if_clause",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "break_statement",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "else_clause",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": [
                                                                                {
                                                                                    "type": "keyword_argument",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "integer",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "keyword_argument",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "dictionary",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "pair",
                                                                                                    "start_token": -1,
                                                                                                    "end_token": -1,
                                                                                                    "label": "",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "start_token": -1,
                                                                                                            "end_token": -1,
                                                                                                            "label": "",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "start_token": -1,
                                                                                                            "end_token": -1,
                                                                                                            "label": "",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "pair",
                                                                                                    "start_token": -1,
                                                                                                    "end_token": -1,
                                                                                                    "label": "",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "start_token": -1,
                                                                                                            "end_token": -1,
                                                                                                            "label": "",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "integer",
                                                                                                            "start_token": -1,
                                                                                                            "end_token": -1,
                                                                                                            "label": "",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_placeholder",
            "name": "add_featured_category",
            "start_line": 599,
            "end_line": 622,
            "start_token": -1,
            "end_token": 1016,
            "label": "",
            "children": [
                {
                    "type": "module",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "keyword",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                },
                                                {
                                                    "type": "binary_operator",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "keyword",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "integer",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": -1,
            "end_token": 1016,
            "label": "",
            "children": [
                {
                    "type": "identifier",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "return_statement",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "binary_operator",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "integer",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "addition_operator",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "get_agent_featured",
            "start_line": 625,
            "end_line": 642
        },
        {
            "type": "class_definition",
            "start_token": -1,
            "end_token": 1016,
            "label": "",
            "children": [
                {
                    "type": "identifier",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": []
                        },
                        {
                            "type": "function_definition",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "get_not_featured_agents",
            "start_line": 645,
            "end_line": 681
        },
        {
            "type": "function_placeholder",
            "name": "get_all_categories",
            "start_line": 684,
            "end_line": 706,
            "start_token": -1,
            "end_token": 1016,
            "label": "",
            "children": [
                {
                    "type": "module",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "import_statement",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "class_definition",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "block",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "function_definition",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": []
                                                },
                                                {
                                                    "type": "parameters",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "binary_operator",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": -1,
            "end_token": 1016,
            "label": "",
            "children": [
                {
                    "type": "identifier",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": -1,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "return_statement",
                            "start_token": -1,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "integer",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "create_agent_installed_event",
            "start_line": 709,
            "end_line": 725
        },
        {
            "type": "import_statement",
            "start_token": 0,
            "end_token": 1,
            "label": "import datetime",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 3,
            "end_token": 4,
            "label": "import typing",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 7,
            "end_token": 10,
            "label": "import fuzzywuzzy.fuzz",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 8,
                    "end_token": 10,
                    "label": "fuzzywuzzy.fuzz",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 12,
            "end_token": 15,
            "label": "import prisma.enums",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 13,
                    "end_token": 15,
                    "label": "prisma.enums",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 17,
            "end_token": 20,
            "label": "import prisma.errors",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 18,
                    "end_token": 20,
                    "label": "prisma.errors",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 22,
            "end_token": 25,
            "label": "import prisma.models",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 23,
                    "end_token": 25,
                    "label": "prisma.models",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 27,
            "end_token": 30,
            "label": "import prisma.types",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 28,
                    "end_token": 30,
                    "label": "prisma.types",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 32,
            "end_token": 33,
            "label": "import pydantic",
            "children": []
        },
        {
            "type": "import_statement",
            "start_token": 36,
            "end_token": 39,
            "label": "import market.model",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 37,
                    "end_token": 39,
                    "label": "market.model",
                    "children": []
                }
            ]
        },
        {
            "type": "import_statement",
            "start_token": 41,
            "end_token": 46,
            "label": "import market.utils.extension_types",
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 42,
                    "end_token": 46,
                    "label": "market.utils.extension_types",
                    "children": []
                }
            ]
        },
        {
            "type": "class_definition",
            "start_token": 50,
            "end_token": 63,
            "label": "class AgentQueryError(Exception):\n    \"\"\"Custom exception for agent query errors\"\"\"\n\n    pass\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 50,
                    "end_token": 50,
                    "label": "class",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 51,
                    "end_token": 51,
                    "label": "AgentQueryError",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "start_token": 52,
                    "end_token": 54,
                    "label": "(Exception)",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 53,
                            "end_token": 53,
                            "label": "Exception",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 55,
                    "end_token": 62,
                    "label": ":\n    \"\"\"Custom exception for agent query errors\"\"\"\n\n    pass",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 57,
                            "end_token": 59,
                            "label": "\"\"\"Custom exception for agent query errors\"\"\"",
                            "children": [
                                {
                                    "type": "string_start",
                                    "start_token": 57,
                                    "end_token": 57,
                                    "label": "\"\"",
                                    "children": []
                                },
                                {
                                    "type": "string_content",
                                    "start_token": 58,
                                    "end_token": 58,
                                    "label": "\"Custom exception for agent query errors\"",
                                    "children": []
                                },
                                {
                                    "type": "string_end",
                                    "start_token": 59,
                                    "end_token": 59,
                                    "label": "\"\"",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "pass_statement",
                            "start_token": 62,
                            "end_token": 62,
                            "label": "pass",
                            "children": []
                        }
                    ]
                }
            ],
            "name": "AgentQueryError",
            "start_line": 15,
            "end_line": 18
        },
        {
            "type": "class_definition",
            "start_token": 66,
            "end_token": 106,
            "label": "class TopAgentsDBResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    analytics: list[prisma.models.AnalyticsTracker]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 67,
                    "end_token": 67,
                    "label": "TopAgentsDBResponse",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "start_token": 68,
                    "end_token": 72,
                    "label": "(pydantic.BaseModel)",
                    "children": [
                        {
                            "type": "attribute",
                            "start_token": 69,
                            "end_token": 71,
                            "label": "pydantic.BaseModel",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 69,
                                    "end_token": 69,
                                    "label": "pydantic",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 71,
                                    "end_token": 71,
                                    "label": "BaseModel",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 73,
                    "end_token": 105,
                    "label": ":\n    \"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    analytics: list[prisma.models.AnalyticsTracker]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 75,
                            "end_token": 77,
                            "label": "\"\"\"\n    Represents a response containing a list of top agents.\n\n    Attributes:\n        analytics (list[AgentResponse]): The list of top agents.\n        total_count (int): The total count of agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 80,
                            "end_token": 89,
                            "label": "analytics: list[prisma.models.AnalyticsTracker]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 80,
                                    "end_token": 80,
                                    "label": "analytics",
                                    "children": []
                                },
                                {
                                    "type": "generic_type",
                                    "start_token": 82,
                                    "end_token": 89,
                                    "label": "list[prisma.models.AnalyticsTracker]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 82,
                                            "end_token": 82,
                                            "label": "list",
                                            "children": []
                                        },
                                        {
                                            "type": "attribute",
                                            "start_token": 84,
                                            "end_token": 88,
                                            "label": "prisma.models.AnalyticsTracker",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 84,
                                                    "end_token": 84,
                                                    "label": "prisma",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 86,
                                                    "end_token": 86,
                                                    "label": "models",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 88,
                                                    "end_token": 88,
                                                    "label": "AnalyticsTracker",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 91,
                            "end_token": 93,
                            "label": "total_count: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 91,
                                    "end_token": 91,
                                    "label": "total_count",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 93,
                                    "end_token": 93,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 95,
                            "end_token": 97,
                            "label": "page: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 95,
                                    "end_token": 95,
                                    "label": "page",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 97,
                                    "end_token": 97,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 99,
                            "end_token": 101,
                            "label": "page_size: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 99,
                                    "end_token": 99,
                                    "label": "page_size",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 101,
                                    "end_token": 101,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 103,
                            "end_token": 105,
                            "label": "total_pages: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 103,
                                    "end_token": 103,
                                    "label": "total_pages",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 105,
                                    "end_token": 105,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "TopAgentsDBResponse",
            "start_line": 21,
            "end_line": 37
        },
        {
            "type": "class_definition",
            "start_token": 109,
            "end_token": 149,
            "label": "class FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    featured_agents: list[prisma.models.FeaturedAgent]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 110,
                    "end_token": 110,
                    "label": "FeaturedAgentResponse",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "start_token": 111,
                    "end_token": 115,
                    "label": "(pydantic.BaseModel)",
                    "children": [
                        {
                            "type": "attribute",
                            "start_token": 112,
                            "end_token": 114,
                            "label": "pydantic.BaseModel",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 112,
                                    "end_token": 112,
                                    "label": "pydantic",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 114,
                                    "end_token": 114,
                                    "label": "BaseModel",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 118,
                    "end_token": 148,
                    "label": "\"\"\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n\n    featured_agents: list[prisma.models.FeaturedAgent]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 119,
                            "end_token": 119,
                            "label": "\"\n    Represents a response containing a list of featured agents.\n\n    Attributes:\n        featured_agents (list[FeaturedAgent]): The list of featured agents.\n        total_count (int): The total count of featured agents.\n        page (int): The current page number.\n        page_size (int): The number of agents per page.\n        total_pages (int): The total number of pages.\n    \"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 123,
                            "end_token": 132,
                            "label": "featured_agents: list[prisma.models.FeaturedAgent]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 123,
                                    "end_token": 123,
                                    "label": "featured_agents",
                                    "children": []
                                },
                                {
                                    "type": "generic_type",
                                    "start_token": 125,
                                    "end_token": 132,
                                    "label": "list[prisma.models.FeaturedAgent]",
                                    "children": [
                                        {
                                            "type": "dotted_name",
                                            "start_token": 127,
                                            "end_token": 131,
                                            "label": "prisma.models.FeaturedAgent",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 127,
                                                    "end_token": 127,
                                                    "label": "prisma",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 129,
                                                    "end_token": 129,
                                                    "label": "models",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 131,
                                                    "end_token": 131,
                                                    "label": "FeaturedAgent",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 134,
                            "end_token": 136,
                            "label": "total_count: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 134,
                                    "end_token": 134,
                                    "label": "total_count",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 136,
                                    "end_token": 136,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 138,
                            "end_token": 140,
                            "label": "page: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 138,
                                    "end_token": 138,
                                    "label": "page",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 140,
                                    "end_token": 140,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 142,
                            "end_token": 144,
                            "label": "page_size: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 142,
                                    "end_token": 142,
                                    "label": "page_size",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 144,
                                    "end_token": 144,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 146,
                            "end_token": 148,
                            "label": "total_pages: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 146,
                                    "end_token": 146,
                                    "label": "total_pages",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 148,
                                    "end_token": 148,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "FeaturedAgentResponse",
            "start_line": 40,
            "end_line": 56
        },
        {
            "type": "decorated_definition",
            "start_token": 152,
            "end_token": 236,
            "label": "async def delete_agent(agent_id: str) -> prisma.models.Agents | None:\n    \"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"\n    try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n",
            "children": [
                {
                    "type": "decorator",
                    "start_token": 152,
                    "end_token": 152,
                    "label": "async",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 152,
                            "end_token": 152,
                            "label": "async",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "function_definition",
                    "start_token": 153,
                    "end_token": 235,
                    "label": "def delete_agent(agent_id: str) -> prisma.models.Agents | None:\n    \"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"\n    try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 154,
                            "end_token": 154,
                            "label": "delete_agent",
                            "children": []
                        },
                        {
                            "type": "parameters",
                            "start_token": 155,
                            "end_token": 159,
                            "label": "(agent_id: str)",
                            "children": [
                                {
                                    "type": "typed_parameter",
                                    "start_token": 156,
                                    "end_token": 158,
                                    "label": "agent_id: str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 156,
                                            "end_token": 156,
                                            "label": "agent_id",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 157,
                                            "end_token": 158,
                                            "label": ": str",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 158,
                                                    "end_token": 158,
                                                    "label": "str",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 160,
                            "end_token": 168,
                            "label": "-> prisma.models.Agents | None",
                            "children": [
                                {
                                    "type": "union_type",
                                    "start_token": 161,
                                    "end_token": 168,
                                    "label": "> prisma.models.Agents | None",
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 162,
                                            "end_token": 166,
                                            "label": "prisma.models.Agents",
                                            "children": [
                                                {
                                                    "type": "dotted_name",
                                                    "start_token": 162,
                                                    "end_token": 166,
                                                    "label": "prisma.models.Agents",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 162,
                                                            "end_token": 162,
                                                            "label": "prisma",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 164,
                                                            "end_token": 164,
                                                            "label": "models",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 166,
                                                            "end_token": 166,
                                                            "label": "Agents",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "none",
                                            "start_token": 168,
                                            "end_token": 168,
                                            "label": "None",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "string",
                            "start_token": 171,
                            "end_token": 173,
                            "label": "\"\"\"\n    Delete an agent from the database.\n\n    Args:\n        agent_id (str): The ID of the agent to delete.\n\n    Returns:\n        prisma.models.Agents | None: The deleted agent if found, None otherwise.\n\n    Raises:\n        AgentQueryError: If there is an error deleting the agent from the database.\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "try_statement",
                            "start_token": 175,
                            "end_token": 235,
                            "label": "try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                            "children": [
                                {
                                    "type": "block",
                                    "start_token": 175,
                                    "end_token": 206,
                                    "label": "try:\n        deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 178,
                                            "end_token": 205,
                                            "label": "deleted_agent = await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )\n        return deleted_agent",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 178,
                                                    "end_token": 178,
                                                    "label": "deleted_agent",
                                                    "children": []
                                                },
                                                {
                                                    "type": "await",
                                                    "start_token": 180,
                                                    "end_token": 202,
                                                    "label": "await prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 181,
                                                            "end_token": 202,
                                                            "label": "prisma.models.Agents.prisma().delete(\n            where={\"id\": agent_id}\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 181,
                                                                    "end_token": 191,
                                                                    "label": "prisma.models.Agents.prisma().delete",
                                                                    "children": [
                                                                        {
                                                                            "type": "dotted_name",
                                                                            "start_token": 181,
                                                                            "end_token": 187,
                                                                            "label": "prisma.models.Agents.prisma",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 181,
                                                                                    "end_token": 181,
                                                                                    "label": "prisma",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 183,
                                                                                    "end_token": 183,
                                                                                    "label": "models",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 185,
                                                                                    "end_token": 185,
                                                                                    "label": "Agents",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 187,
                                                                            "end_token": 189,
                                                                            "label": "prisma()",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 191,
                                                                            "end_token": 191,
                                                                            "label": "delete",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 192,
                                                                    "end_token": 202,
                                                                    "label": "(\n            where={\"id\": agent_id}\n        )",
                                                                    "children": [
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 194,
                                                                            "end_token": 200,
                                                                            "label": "where={\"id\": agent_id}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 197,
                                                                                    "end_token": 197,
                                                                                    "label": "\"id\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 199,
                                                                                    "end_token": 199,
                                                                                    "label": "agent_id",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": 204,
                                            "end_token": 205,
                                            "label": "return deleted_agent",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 205,
                                                    "end_token": 205,
                                                    "label": "deleted_agent",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "start_token": 207,
                                    "end_token": 222,
                                    "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 215,
                                            "end_token": 222,
                                            "label": ":\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                            "children": [
                                                {
                                                    "type": "raise_statement",
                                                    "start_token": 217,
                                                    "end_token": 222,
                                                    "label": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 218,
                                                            "end_token": 222,
                                                            "label": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 218,
                                                                    "end_token": 218,
                                                                    "label": "AgentQueryError",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 220,
                                                                    "end_token": 221,
                                                                    "label": "f\"Database query failed: {str(e)}\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "start_token": 224,
                                    "end_token": 235,
                                    "label": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                                    "children": [
                                        {
                                            "type": "block",
                                            "start_token": 228,
                                            "end_token": 235,
                                            "label": ":\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                                            "children": [
                                                {
                                                    "type": "raise_statement",
                                                    "start_token": 230,
                                                    "end_token": 235,
                                                    "label": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 231,
                                                            "end_token": 235,
                                                            "label": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 231,
                                                                    "end_token": 231,
                                                                    "label": "AgentQueryError",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 233,
                                                                    "end_token": 234,
                                                                    "label": "f\"Unexpected error occurred: {str(e)}\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "delete_agent",
            "start_line": 59,
            "end_line": 80
        },
        {
            "type": "function_definition",
            "start_token": 239,
            "end_token": 423,
            "label": "async def create_agent_entry(\n    name: str,\n    description: str,\n    author: str,\n    keywords: typing.List[str],\n    categories: typing.List[str],\n    graph: prisma.Json,\n    submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING,\n):\n    \"\"\"\n    Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 240,
                    "end_token": 240,
                    "label": "def",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 241,
                    "end_token": 241,
                    "label": "create_agent_entry",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 242,
                    "end_token": 303,
                    "label": "(\n    name: str,\n    description: str,\n    author: str,\n    keywords: typing.List[str],\n    categories: typing.List[str],\n    graph: prisma.Json,\n    submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING,\n)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 244,
                            "end_token": 246,
                            "label": "name: str",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 244,
                                    "end_token": 244,
                                    "label": "name",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 245,
                                    "end_token": 246,
                                    "label": ": str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 246,
                                            "end_token": 246,
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 249,
                            "end_token": 251,
                            "label": "description: str",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 249,
                                    "end_token": 249,
                                    "label": "description",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 250,
                                    "end_token": 251,
                                    "label": ": str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 251,
                                            "end_token": 251,
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 254,
                            "end_token": 256,
                            "label": "author: str",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 254,
                                    "end_token": 254,
                                    "label": "author",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 255,
                                    "end_token": 256,
                                    "label": ": str",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 256,
                                            "end_token": 256,
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 259,
                            "end_token": 266,
                            "label": "keywords: typing.List[str]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 259,
                                    "end_token": 259,
                                    "label": "keywords",
                                    "children": []
                                },
                                {
                                    "type": "generic_type",
                                    "start_token": 260,
                                    "end_token": 266,
                                    "label": ": typing.List[str]",
                                    "children": [
                                        {
                                            "type": "dotted_name",
                                            "start_token": 261,
                                            "end_token": 263,
                                            "label": "typing.List",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 261,
                                                    "end_token": 261,
                                                    "label": "typing",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 263,
                                                    "end_token": 263,
                                                    "label": "List",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 265,
                                            "end_token": 265,
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 269,
                            "end_token": 276,
                            "label": "categories: typing.List[str]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 269,
                                    "end_token": 269,
                                    "label": "categories",
                                    "children": []
                                },
                                {
                                    "type": "generic_type",
                                    "start_token": 270,
                                    "end_token": 276,
                                    "label": ": typing.List[str]",
                                    "children": [
                                        {
                                            "type": "dotted_name",
                                            "start_token": 271,
                                            "end_token": 273,
                                            "label": "typing.List",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 271,
                                                    "end_token": 271,
                                                    "label": "typing",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 273,
                                                    "end_token": 273,
                                                    "label": "List",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 275,
                                            "end_token": 275,
                                            "label": "str",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 279,
                            "end_token": 283,
                            "label": "graph: prisma.Json",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 279,
                                    "end_token": 279,
                                    "label": "graph",
                                    "children": []
                                },
                                {
                                    "type": "dotted_name",
                                    "start_token": 280,
                                    "end_token": 283,
                                    "label": ": prisma.Json",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 281,
                                            "end_token": 281,
                                            "label": "prisma",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 283,
                                            "end_token": 283,
                                            "label": "Json",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_default_parameter",
                            "start_token": 286,
                            "end_token": 300,
                            "label": "submission_state: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.PENDING",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 286,
                                    "end_token": 286,
                                    "label": "submission_state",
                                    "children": []
                                },
                                {
                                    "type": "dotted_name",
                                    "start_token": 287,
                                    "end_token": 292,
                                    "label": ": prisma.enums.SubmissionStatus",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 288,
                                            "end_token": 288,
                                            "label": "prisma",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 290,
                                            "end_token": 292,
                                            "label": "enums.SubmissionStatus",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "attribute",
                                    "start_token": 294,
                                    "end_token": 300,
                                    "label": "prisma.enums.SubmissionStatus.PENDING",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 295,
                                            "end_token": 295,
                                            "label": ".",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 297,
                                            "end_token": 300,
                                            "label": ".SubmissionStatus.PENDING",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "string",
                    "start_token": 306,
                    "end_token": 308,
                    "label": "\"\"\"\n    Create a new agent entry in the database.\n\n    Args:\n        name (str): The name of the agent.\n        description (str): The description of the agent.\n        author (str): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories associated with the agent.\n        graph (dict): The graph data of the agent.\n\n    Returns:\n        dict: The newly created agent entry.\n\n    Raises:\n        AgentQueryError: If there is an error creating the agent entry.\n    \"\"\"",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 309,
                    "end_token": 422,
                    "label": "\n    try:\n        agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                    "children": [
                        {
                            "type": "try_statement",
                            "start_token": 310,
                            "end_token": 422,
                            "label": "try:\n        agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                            "children": [
                                {
                                    "type": "block",
                                    "start_token": 312,
                                    "end_token": 392,
                                    "label": "\n        agent = await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )\n\n        return agent\n",
                                    "children": [
                                        {
                                            "type": "await",
                                            "start_token": 315,
                                            "end_token": 387,
                                            "label": "await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 314,
                                                    "end_token": 387,
                                                    "label": "= await prisma.models.Agents.prisma().create(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "start_token": 316,
                                                            "end_token": 326,
                                                            "label": "prisma.models.Agents.prisma().create",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 316,
                                                                    "end_token": 322,
                                                                    "label": "prisma.models.Agents.prisma",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "start_token": 316,
                                                                            "end_token": 320,
                                                                            "label": "prisma.models.Agents",
                                                                            "children": [
                                                                                {
                                                                                    "type": "dotted_name",
                                                                                    "start_token": 316,
                                                                                    "end_token": 318,
                                                                                    "label": "prisma.models",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 316,
                                                                                            "end_token": 316,
                                                                                            "label": "prisma",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 318,
                                                                                            "end_token": 318,
                                                                                            "label": "models",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 320,
                                                                                    "end_token": 320,
                                                                                    "label": "Agents",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 322,
                                                                            "end_token": 322,
                                                                            "label": "prisma",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 326,
                                                                    "end_token": 326,
                                                                    "label": "create",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 327,
                                                            "end_token": 387,
                                                            "label": "(\n            data={\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }\n        )",
                                                            "children": [
                                                                {
                                                                    "type": "pair",
                                                                    "start_token": 329,
                                                                    "end_token": 330,
                                                                    "label": "data=",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "dictionary",
                                                                    "start_token": 331,
                                                                    "end_token": 385,
                                                                    "label": "{\n                \"name\": name,\n                \"description\": description,\n                \"author\": author,\n                \"keywords\": keywords,\n                \"categories\": categories,\n                \"graph\": graph,\n                \"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}},\n                \"submissionStatus\": submission_state,\n            }",
                                                                    "children": [
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 333,
                                                                            "end_token": 336,
                                                                            "label": "\"name\": name,",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 333,
                                                                                    "end_token": 333,
                                                                                    "label": "\"name\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 335,
                                                                                    "end_token": 335,
                                                                                    "label": "name",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 338,
                                                                            "end_token": 341,
                                                                            "label": "\"description\": description,",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 338,
                                                                                    "end_token": 338,
                                                                                    "label": "\"description\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 340,
                                                                                    "end_token": 340,
                                                                                    "label": "description",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 343,
                                                                            "end_token": 346,
                                                                            "label": "\"author\": author,",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 343,
                                                                                    "end_token": 343,
                                                                                    "label": "\"author\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 345,
                                                                                    "end_token": 345,
                                                                                    "label": "author",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 348,
                                                                            "end_token": 351,
                                                                            "label": "\"keywords\": keywords,",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 348,
                                                                                    "end_token": 348,
                                                                                    "label": "\"keywords\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 350,
                                                                                    "end_token": 350,
                                                                                    "label": "keywords",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 353,
                                                                            "end_token": 356,
                                                                            "label": "\"categories\": categories,",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 353,
                                                                                    "end_token": 353,
                                                                                    "label": "\"categories\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 355,
                                                                                    "end_token": 355,
                                                                                    "label": "categories",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 358,
                                                                            "end_token": 361,
                                                                            "label": "\"graph\": graph,",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 358,
                                                                                    "end_token": 358,
                                                                                    "label": "\"graph\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 360,
                                                                                    "end_token": 360,
                                                                                    "label": "graph",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 363,
                                                                            "end_token": 377,
                                                                            "label": "\"AnalyticsTracker\": {\"create\": {\"downloads\": 0, \"views\": 0}}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 363,
                                                                                    "end_token": 363,
                                                                                    "label": "\"AnalyticsTracker\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "dictionary",
                                                                                    "start_token": 365,
                                                                                    "end_token": 377,
                                                                                    "label": "{\"create\": {\"downloads\": 0, \"views\": 0}}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "pair",
                                                                                            "start_token": 366,
                                                                                            "end_token": 376,
                                                                                            "label": "\"create\": {\"downloads\": 0, \"views\": 0}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "start_token": 366,
                                                                                                    "end_token": 366,
                                                                                                    "label": "\"create\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "dictionary",
                                                                                                    "start_token": 368,
                                                                                                    "end_token": 376,
                                                                                                    "label": "{\"downloads\": 0, \"views\": 0}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "start_token": 369,
                                                                                                            "end_token": 372,
                                                                                                            "label": "\"downloads\": 0,",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "start_token": 369,
                                                                                                                    "end_token": 369,
                                                                                                                    "label": "\"downloads\"",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "integer",
                                                                                                                    "start_token": 371,
                                                                                                                    "end_token": 371,
                                                                                                                    "label": "0",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "start_token": 373,
                                                                                                            "end_token": 376,
                                                                                                            "label": "\"views\": 0}",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "start_token": 373,
                                                                                                                    "end_token": 373,
                                                                                                                    "label": "\"views\"",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "integer",
                                                                                                                    "start_token": 375,
                                                                                                                    "end_token": 375,
                                                                                                                    "label": "0",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 380,
                                                                            "end_token": 382,
                                                                            "label": "\"submissionStatus\": submission_state",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 380,
                                                                                    "end_token": 380,
                                                                                    "label": "\"submissionStatus\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 382,
                                                                                    "end_token": 382,
                                                                                    "label": "submission_state",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": 390,
                                            "end_token": 391,
                                            "label": "return agent",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 391,
                                                    "end_token": 391,
                                                    "label": "agent",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "start_token": 394,
                                    "end_token": 410,
                                    "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n",
                                    "children": [
                                        {
                                            "type": "dotted_name",
                                            "start_token": 395,
                                            "end_token": 399,
                                            "label": "prisma.errors.PrismaError",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 395,
                                                    "end_token": 395,
                                                    "label": "prisma",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 399,
                                                    "end_token": 399,
                                                    "label": "PrismaError",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "as_pattern",
                                            "start_token": 400,
                                            "end_token": 402,
                                            "label": "as e:",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 400,
                                                    "end_token": 400,
                                                    "label": "as",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 403,
                                            "end_token": 410,
                                            "label": "\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n",
                                            "children": [
                                                {
                                                    "type": "raise_statement",
                                                    "start_token": 404,
                                                    "end_token": 409,
                                                    "label": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 405,
                                                            "end_token": 409,
                                                            "label": "AgentQueryError(f\"Database query failed: {str(e)}\")",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 405,
                                                                    "end_token": 405,
                                                                    "label": "AgentQueryError",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "interpolation",
                                                                    "start_token": 406,
                                                                    "end_token": 408,
                                                                    "label": "(f\"Database query failed: {str(e)}\"",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 406,
                                                                            "end_token": 406,
                                                                            "label": "(",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "start_token": 407,
                                                                            "end_token": 408,
                                                                            "label": "f\"Database query failed: {str(e)}\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 408,
                                                                                    "end_token": 408,
                                                                                    "label": "\"Database query failed: {str(e)}\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "start_token": 411,
                                    "end_token": 422,
                                    "label": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 412,
                                            "end_token": 412,
                                            "label": "Exception",
                                            "children": []
                                        },
                                        {
                                            "type": "as_pattern",
                                            "start_token": 413,
                                            "end_token": 414,
                                            "label": "as e",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 413,
                                                    "end_token": 413,
                                                    "label": "as",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 415,
                                            "end_token": 422,
                                            "label": ":\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                                            "children": [
                                                {
                                                    "type": "raise_statement",
                                                    "start_token": 417,
                                                    "end_token": 421,
                                                    "label": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\"",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 418,
                                                            "end_token": 421,
                                                            "label": "AgentQueryError(f\"Unexpected error occurred: {str(e)}\"",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 418,
                                                                    "end_token": 418,
                                                                    "label": "AgentQueryError",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "interpolation",
                                                                    "start_token": 419,
                                                                    "end_token": 420,
                                                                    "label": "(f",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 419,
                                                                            "end_token": 419,
                                                                            "label": "(",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "string_content",
                                                                            "start_token": 419,
                                                                            "end_token": 420,
                                                                            "label": "(f",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 420,
                                                                                    "end_token": 420,
                                                                                    "label": "f",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "create_agent_entry",
            "start_line": 83,
            "end_line": 128
        },
        {
            "type": "function_placeholder",
            "name": "update_agent_entry",
            "start_line": 131,
            "end_line": 161,
            "start_token": 426,
            "end_token": 577,
            "label": "async def update_agent_entry(\n    agent_id: str,\n    version: int,\n    submission_state: prisma.enums.SubmissionStatus,\n    comments: str | None = None,\n) -> prisma.models.Agents | None:\n    \"\"\"\n    Update an existing agent entry in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int): The version of the agent.\n        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent.\n    \"\"\"\n\n    try:\n        agent = await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )\n\n        return agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n",
            "children": [
                {
                    "type": "module",
                    "start_token": 426,
                    "end_token": 576,
                    "label": "async def update_agent_entry(\n    agent_id: str,\n    version: int,\n    submission_state: prisma.enums.SubmissionStatus,\n    comments: str | None = None,\n) -> prisma.models.Agents | None:\n    \"\"\"\n    Update an existing agent entry in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int): The version of the agent.\n        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent.\n    \"\"\"\n\n    try:\n        agent = await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )\n\n        return agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                    "children": [
                        {
                            "type": "await",
                            "start_token": 426,
                            "end_token": 459,
                            "label": "async def update_agent_entry(\n    agent_id: str,\n    version: int,\n    submission_state: prisma.enums.SubmissionStatus,\n    comments: str | None = None,\n)",
                            "children": [
                                {
                                    "type": "decorated_definition",
                                    "start_token": 426,
                                    "end_token": 459,
                                    "label": "async def update_agent_entry(\n    agent_id: str,\n    version: int,\n    submission_state: prisma.enums.SubmissionStatus,\n    comments: str | None = None,\n)",
                                    "children": [
                                        {
                                            "type": "async",
                                            "start_token": 426,
                                            "end_token": 426,
                                            "label": "async",
                                            "children": []
                                        },
                                        {
                                            "type": "function_definition",
                                            "start_token": 427,
                                            "end_token": 459,
                                            "label": "def update_agent_entry(\n    agent_id: str,\n    version: int,\n    submission_state: prisma.enums.SubmissionStatus,\n    comments: str | None = None,\n)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 428,
                                                    "end_token": 428,
                                                    "label": "update_agent_entry",
                                                    "children": []
                                                },
                                                {
                                                    "type": "parameters",
                                                    "start_token": 429,
                                                    "end_token": 459,
                                                    "label": "(\n    agent_id: str,\n    version: int,\n    submission_state: prisma.enums.SubmissionStatus,\n    comments: str | None = None,\n)",
                                                    "children": [
                                                        {
                                                            "type": "typed_parameter",
                                                            "start_token": 431,
                                                            "end_token": 433,
                                                            "label": "agent_id: str",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 431,
                                                                    "end_token": 431,
                                                                    "label": "agent_id",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type",
                                                                    "start_token": 432,
                                                                    "end_token": 433,
                                                                    "label": ": str",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "typed_parameter",
                                                            "start_token": 436,
                                                            "end_token": 438,
                                                            "label": "version: int",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 436,
                                                                    "end_token": 436,
                                                                    "label": "version",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type",
                                                                    "start_token": 437,
                                                                    "end_token": 438,
                                                                    "label": ": int",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "typed_parameter",
                                                            "start_token": 441,
                                                            "end_token": 447,
                                                            "label": "submission_state: prisma.enums.SubmissionStatus",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 441,
                                                                    "end_token": 441,
                                                                    "label": "submission_state",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "dotted_name",
                                                                    "start_token": 442,
                                                                    "end_token": 447,
                                                                    "label": ": prisma.enums.SubmissionStatus",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "typed_default_parameter",
                                                            "start_token": 450,
                                                            "end_token": 456,
                                                            "label": "comments: str | None = None",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 450,
                                                                    "end_token": 450,
                                                                    "label": "comments",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "type",
                                                                    "start_token": 451,
                                                                    "end_token": 453,
                                                                    "label": ": str |",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "none",
                                                                    "start_token": 456,
                                                                    "end_token": 456,
                                                                    "label": "None",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "dotted_name",
                                                    "start_token": 462,
                                                    "end_token": 466,
                                                    "label": "prisma.models.Agents",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string",
                                                    "start_token": 471,
                                                    "end_token": 473,
                                                    "label": "\"\"\"\n    Update an existing agent entry in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int): The version of the agent.\n        submission_state (prisma.enums.SubmissionStatus): The submission state of the agent.\n    \"\"\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "try_statement",
                            "start_token": 476,
                            "end_token": 576,
                            "label": "try:\n        agent = await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )\n\n        return agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                            "children": [
                                {
                                    "type": "block",
                                    "start_token": 476,
                                    "end_token": 547,
                                    "label": "try:\n        agent = await prisma.models.Agents.prisma().update(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )\n\n        return agent\n",
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 479,
                                            "end_token": 493,
                                            "label": "agent = await prisma.models.Agents.prisma().update(",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 479,
                                                    "end_token": 479,
                                                    "label": "agent",
                                                    "children": []
                                                },
                                                {
                                                    "type": "await",
                                                    "start_token": 481,
                                                    "end_token": 493,
                                                    "label": "await prisma.models.Agents.prisma().update(",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 480,
                                                            "end_token": 493,
                                                            "label": "= await prisma.models.Agents.prisma().update(",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "start_token": 482,
                                                                    "end_token": 492,
                                                                    "label": "prisma.models.Agents.prisma().update",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "start_token": 482,
                                                                            "end_token": 486,
                                                                            "label": "prisma.models.Agents",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 482,
                                                                                    "end_token": 484,
                                                                                    "label": "prisma.models",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 486,
                                                                                    "end_token": 486,
                                                                                    "label": "Agents",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "dotted_name",
                                                                            "start_token": 488,
                                                                            "end_token": 492,
                                                                            "label": "prisma().update",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 489,
                                                                    "end_token": 490,
                                                                    "label": "()",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 493,
                                                                    "end_token": 542,
                                                                    "label": "(\n            where={\"id\": agent_id},\n            data={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            },\n        )",
                                                                    "children": [
                                                                        {
                                                                            "type": "dictionary",
                                                                            "start_token": 495,
                                                                            "end_token": 501,
                                                                            "label": "where={\"id\": agent_id}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "pair",
                                                                                    "start_token": 498,
                                                                                    "end_token": 500,
                                                                                    "label": "\"id\": agent_id",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "dictionary",
                                                                            "start_token": 505,
                                                                            "end_token": 539,
                                                                            "label": "={\n                \"version\": version,\n                \"submissionStatus\": submission_state,\n                \"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc),\n                \"submissionReviewComments\": comments,\n            }",
                                                                            "children": [
                                                                                {
                                                                                    "type": "pair",
                                                                                    "start_token": 508,
                                                                                    "end_token": 510,
                                                                                    "label": "\"version\": version",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "pair",
                                                                                    "start_token": 513,
                                                                                    "end_token": 515,
                                                                                    "label": "\"submissionStatus\": submission_state",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "pair",
                                                                                    "start_token": 518,
                                                                                    "end_token": 531,
                                                                                    "label": "\"submissionReviewDate\": datetime.datetime.now(datetime.timezone.utc)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "start_token": 520,
                                                                                            "end_token": 531,
                                                                                            "label": "datetime.datetime.now(datetime.timezone.utc)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "start_token": 520,
                                                                                                    "end_token": 530,
                                                                                                    "label": "datetime.datetime.now(datetime.timezone.utc",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "start_token": 525,
                                                                                                    "end_token": 531,
                                                                                                    "label": "(datetime.timezone.utc)",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "pair",
                                                                                    "start_token": 534,
                                                                                    "end_token": 536,
                                                                                    "label": "\"submissionReviewComments\": comments",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": 545,
                                            "end_token": 546,
                                            "label": "return agent",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "start_token": 548,
                                    "end_token": 564,
                                    "label": "except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")\n",
                                    "children": [
                                        {
                                            "type": "dotted_name",
                                            "start_token": 549,
                                            "end_token": 553,
                                            "label": "prisma.errors.PrismaError",
                                            "children": []
                                        },
                                        {
                                            "type": "as_pattern",
                                            "start_token": 554,
                                            "end_token": 555,
                                            "label": "as e",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 556,
                                            "end_token": 564,
                                            "label": ":\n        raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")\n",
                                            "children": [
                                                {
                                                    "type": "raise_statement",
                                                    "start_token": 558,
                                                    "end_token": 563,
                                                    "label": "raise AgentQueryError(f\"Agent Update Failed Database query failed: {str(e)}\")",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "start_token": 565,
                                    "end_token": 576,
                                    "label": "except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 566,
                                            "end_token": 566,
                                            "label": "Exception",
                                            "children": []
                                        },
                                        {
                                            "type": "as_pattern",
                                            "start_token": 567,
                                            "end_token": 568,
                                            "label": "as e",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 569,
                                            "end_token": 576,
                                            "label": ":\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                                            "children": [
                                                {
                                                    "type": "raise_statement",
                                                    "start_token": 571,
                                                    "end_token": 576,
                                                    "label": "raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_placeholder",
            "name": "get_agents",
            "start_line": 164,
            "end_line": 259,
            "start_token": 580,
            "end_token": 1016,
            "label": "async def get_agents(\n    page: int = 1,\n    page_size: int = 10,\n    name: str | None = None,\n    keyword: str | None = None,\n    category: str | None = None,\n    description: str | None = None,\n    description_threshold: int = 60,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n    sort_by: str = \"createdAt\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n):\n    \"\"\"\n    Retrieve a list of agents from the database based on the provided filters and pagination parameters.\n\n    Args:\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n        name (str, optional): Filter agents by name. Defaults to None.\n        keyword (str, optional): Filter agents by keyword. Defaults to None.\n        category (str, optional): Filter agents by category. Defaults to None.\n        description (str, optional): Filter agents by description. Defaults to None.\n        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60.\n        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\".\n        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\".\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Define the base query\n        query = {}\n\n        # Add optional filters\n        if name:\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}\n        if keyword:\n            query[\"keywords\"] = {\"has\": keyword}\n        if category:\n            query[\"categories\"] = {\"has\": category}\n\n        query[\"submissionStatus\"] = submission_status\n\n        # Define sorting\n        order = {sort_by: sort_order}\n\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Apply fuzzy search on description if provided\n        if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(agents)\n\n        return {\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total_count + page_size - 1) // page_size,\n        }\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_details(agent_id: str, version: int | None = None):\n    \"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"\n    try:\n        query = {\"id\": agent_id}\n        if version is not None:\n            query[\"version\"] = version  # type: ignore\n\n        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\n        if not agent:\n            raise AgentQueryError(\"Agent not found\")\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def search_db(\n    query: str,\n    page: int = 1,\n    page_size: int = 10,\n    categories: typing.List[str] | None = None,\n    description_threshold: int = 60,\n    sort_by: str = \"rank\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n    \"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"\n    try:\n        offset = (page - 1) * page_size\n\n        category_filter = \"1=1\"\n        if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"\n\n        # Construct the ORDER BY clause based on the sort_by parameter\n        if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\n        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\n\n        sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\n\n        results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )\n\n        class CountResponse(pydantic.BaseModel):\n            count: int\n\n        count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\n\n        total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )\n        total_count = total_count.count if total_count else 0\n\n        return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_top_agents_by_downloads(\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[prisma.models.AnalyticsTracker]:\n    \"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def set_agent_featured(\n    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]\n) -> prisma.models.FeaturedAgent:\n    \"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})\n        if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )\n        return featured\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\n    category: str = \"featured\",\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> FeaturedAgentResponse:\n    \"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(featured_agents)\n\n        return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def remove_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\n\n        if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        # remove the category from the list\n        featured_agent.featuredCategories.remove(category)\n\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def add_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_featured(agent_id: str) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_not_featured_agents(\n    page: int = 1, page_size: int = 10\n) -> typing.List[prisma.models.Agents]:\n    \"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"\n    try:\n        agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )\n        return agents\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_all_categories() -> market.model.CategoriesResponse:\n    \"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"\n    try:\n        agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])\n\n\nasync def create_agent_installed_event(\n    event_data: market.model.AgentInstalledFromMarketplaceEventData,\n):\n    try:\n        await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n",
            "children": [
                {
                    "type": "module",
                    "start_token": 580,
                    "end_token": -1,
                    "label": "",
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 580,
                            "end_token": 1007,
                            "label": "async def get_agents(\n    page: int = 1,\n    page_size: int = 10,\n    name: str | None = None,\n    keyword: str | None = None,\n    category: str | None = None,\n    description: str | None = None,\n    description_threshold: int = 60,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n    sort_by: str = \"createdAt\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n):\n    \"\"\"\n    Retrieve a list of agents from the database based on the provided filters and pagination parameters.\n\n    Args:\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n        name (str, optional): Filter agents by name. Defaults to None.\n        keyword (str, optional): Filter agents by keyword. Defaults to None.\n        category (str, optional): Filter agents by category. Defaults to None.\n        description (str, optional): Filter agents by description. Defaults to None.\n        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60.\n        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\".\n        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\".\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Define the base query\n        query = {}\n\n        # Add optional filters\n        if name:\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}\n        if keyword:\n            query[\"keywords\"] = {\"has\": keyword}\n        if category:\n            query[\"categories\"] = {\"has\": category}\n\n        query[\"submissionStatus\"] = submission_status\n\n        # Define sorting\n        order = {sort_by: sort_order}\n\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Apply fuzzy search on description if provided\n        if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(agents)\n\n        return {\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\"",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 581,
                                    "end_token": 581,
                                    "label": "def",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 583,
                                    "end_token": 685,
                                    "label": "(\n    page: int = 1,\n    page_size: int = 10,\n    name: str | None = None,\n    keyword: str | None = None,\n    category: str | None = None,\n    description: str | None = None,\n    description_threshold: int = 60,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n    sort_by: str = \"createdAt\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 585,
                                            "end_token": 585,
                                            "label": "page",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 592,
                                            "end_token": 592,
                                            "label": "page_size",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 599,
                                            "end_token": 599,
                                            "label": "name",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 608,
                                            "end_token": 608,
                                            "label": "keyword",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 617,
                                            "end_token": 617,
                                            "label": "category",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 626,
                                            "end_token": 626,
                                            "label": "description",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 635,
                                            "end_token": 635,
                                            "label": "description_threshold",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 642,
                                            "end_token": 642,
                                            "label": "submission_status",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 659,
                                            "end_token": 659,
                                            "label": "sort_by",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 666,
                                            "end_token": 666,
                                            "label": "sort_order",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 687,
                                    "end_token": 1007,
                                    "label": "\n    \"\"\"\n    Retrieve a list of agents from the database based on the provided filters and pagination parameters.\n\n    Args:\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n        name (str, optional): Filter agents by name. Defaults to None.\n        keyword (str, optional): Filter agents by keyword. Defaults to None.\n        category (str, optional): Filter agents by category. Defaults to None.\n        description (str, optional): Filter agents by description. Defaults to None.\n        description_threshold (int, optional): The minimum fuzzy search threshold for the description. Defaults to 60.\n        sort_by (str, optional): The field to sort the agents by. Defaults to \"createdAt\".\n        sort_order (str, optional): The sort order (\"asc\" or \"desc\"). Defaults to \"desc\".\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Define the base query\n        query = {}\n\n        # Add optional filters\n        if name:\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}\n        if keyword:\n            query[\"keywords\"] = {\"has\": keyword}\n        if category:\n            query[\"categories\"] = {\"has\": category}\n\n        query[\"submissionStatus\"] = submission_status\n\n        # Define sorting\n        order = {sort_by: sort_order}\n\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Apply fuzzy search on description if provided\n        if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(agents)\n\n        return {\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\"",
                                    "children": [
                                        {
                                            "type": "try_statement",
                                            "start_token": 700,
                                            "end_token": 1016,
                                            "label": "try:\n        # Define the base query\n        query = {}\n\n        # Add optional filters\n        if name:\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}\n        if keyword:\n            query[\"keywords\"] = {\"has\": keyword}\n        if category:\n            query[\"categories\"] = {\"has\": category}\n\n        query[\"submissionStatus\"] = submission_status\n\n        # Define sorting\n        order = {sort_by: sort_order}\n\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Apply fuzzy search on description if provided\n        if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(agents)\n\n        return {\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total_count + page_size - 1) // page_size,\n        }\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_details(agent_id: str, version: int | None = None):\n    \"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"\n    try:\n        query = {\"id\": agent_id}\n        if version is not None:\n            query[\"version\"] = version  # type: ignore\n\n        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\n        if not agent:\n            raise AgentQueryError(\"Agent not found\")\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def search_db(\n    query: str,\n    page: int = 1,\n    page_size: int = 10,\n    categories: typing.List[str] | None = None,\n    description_threshold: int = 60,\n    sort_by: str = \"rank\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n    \"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"\n    try:\n        offset = (page - 1) * page_size\n\n        category_filter = \"1=1\"\n        if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"\n\n        # Construct the ORDER BY clause based on the sort_by parameter\n        if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\n        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\n\n        sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\n\n        results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )\n\n        class CountResponse(pydantic.BaseModel):\n            count: int\n\n        count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\n\n        total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )\n        total_count = total_count.count if total_count else 0\n\n        return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_top_agents_by_downloads(\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[prisma.models.AnalyticsTracker]:\n    \"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def set_agent_featured(\n    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]\n) -> prisma.models.FeaturedAgent:\n    \"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})\n        if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )\n        return featured\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\n    category: str = \"featured\",\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> FeaturedAgentResponse:\n    \"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(featured_agents)\n\n        return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def remove_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\n\n        if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        # remove the category from the list\n        featured_agent.featuredCategories.remove(category)\n\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def add_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_featured(agent_id: str) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_not_featured_agents(\n    page: int = 1, page_size: int = 10\n) -> typing.List[prisma.models.Agents]:\n    \"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"\n    try:\n        agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )\n        return agents\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_all_categories() -> market.model.CategoriesResponse:\n    \"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"\n    try:\n        agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])\n\n\nasync def create_agent_installed_event(\n    event_data: market.model.AgentInstalledFromMarketplaceEventData,\n):\n    try:\n        await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 701,
                                                    "end_token": 982,
                                                    "label": ":\n        # Define the base query\n        query = {}\n\n        # Add optional filters\n        if name:\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}\n        if keyword:\n            query[\"keywords\"] = {\"has\": keyword}\n        if category:\n            query[\"categories\"] = {\"has\": category}\n\n        query[\"submissionStatus\"] = submission_status\n\n        # Define sorting\n        order = {sort_by: sort_order}\n\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Apply fuzzy search on description if provided\n        if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(agents)\n",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 709,
                                                            "end_token": 712,
                                                            "label": "query = {}",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 709,
                                                                    "end_token": 709,
                                                                    "label": "query",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "dictionary",
                                                                    "start_token": 711,
                                                                    "end_token": 712,
                                                                    "label": "{}",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 720,
                                                            "end_token": 737,
                                                            "label": "if name:\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}",
                                                            "children": [
                                                                {
                                                                    "type": "expression_list",
                                                                    "start_token": 721,
                                                                    "end_token": 721,
                                                                    "label": "name",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 721,
                                                                            "end_token": 721,
                                                                            "label": "name",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 722,
                                                                    "end_token": 737,
                                                                    "label": ":\n            query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 724,
                                                                            "end_token": 737,
                                                                            "label": "query[\"name\"] = {\"contains\": name, \"mode\": \"insensitive\"}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 726,
                                                                                    "end_token": 726,
                                                                                    "label": "\"name\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "dictionary",
                                                                                    "start_token": 729,
                                                                                    "end_token": 737,
                                                                                    "label": "{\"contains\": name, \"mode\": \"insensitive\"}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "pair",
                                                                                            "start_token": 730,
                                                                                            "end_token": 732,
                                                                                            "label": "\"contains\": name",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "start_token": 730,
                                                                                                    "end_token": 730,
                                                                                                    "label": "\"contains\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "start_token": 732,
                                                                                                    "end_token": 732,
                                                                                                    "label": "name",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "pair",
                                                                                            "start_token": 733,
                                                                                            "end_token": 736,
                                                                                            "label": ", \"mode\": \"insensitive\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "start_token": 734,
                                                                                                    "end_token": 734,
                                                                                                    "label": "\"mode\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "start_token": 736,
                                                                                                    "end_token": 736,
                                                                                                    "label": "\"insensitive\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 739,
                                                            "end_token": 752,
                                                            "label": "if keyword:\n            query[\"keywords\"] = {\"has\": keyword}",
                                                            "children": [
                                                                {
                                                                    "type": "expression_list",
                                                                    "start_token": 740,
                                                                    "end_token": 740,
                                                                    "label": "keyword",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 740,
                                                                            "end_token": 740,
                                                                            "label": "keyword",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 742,
                                                                    "end_token": 752,
                                                                    "label": "\n            query[\"keywords\"] = {\"has\": keyword}",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 743,
                                                                            "end_token": 752,
                                                                            "label": "query[\"keywords\"] = {\"has\": keyword}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 745,
                                                                                    "end_token": 745,
                                                                                    "label": "\"keywords\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "dictionary",
                                                                                    "start_token": 748,
                                                                                    "end_token": 752,
                                                                                    "label": "{\"has\": keyword}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "pair",
                                                                                            "start_token": 749,
                                                                                            "end_token": 751,
                                                                                            "label": "\"has\": keyword",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "start_token": 749,
                                                                                                    "end_token": 749,
                                                                                                    "label": "\"has\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "start_token": 751,
                                                                                                    "end_token": 751,
                                                                                                    "label": "keyword",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 754,
                                                            "end_token": 767,
                                                            "label": "if category:\n            query[\"categories\"] = {\"has\": category}",
                                                            "children": [
                                                                {
                                                                    "type": "expression_list",
                                                                    "start_token": 755,
                                                                    "end_token": 755,
                                                                    "label": "category",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 755,
                                                                            "end_token": 755,
                                                                            "label": "category",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 757,
                                                                    "end_token": 767,
                                                                    "label": "\n            query[\"categories\"] = {\"has\": category}",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 758,
                                                                            "end_token": 767,
                                                                            "label": "query[\"categories\"] = {\"has\": category}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 760,
                                                                                    "end_token": 760,
                                                                                    "label": "\"categories\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "dictionary",
                                                                                    "start_token": 763,
                                                                                    "end_token": 767,
                                                                                    "label": "{\"has\": category}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "pair",
                                                                                            "start_token": 764,
                                                                                            "end_token": 766,
                                                                                            "label": "\"has\": category",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "start_token": 764,
                                                                                                    "end_token": 764,
                                                                                                    "label": "\"has\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "start_token": 766,
                                                                                                    "end_token": 766,
                                                                                                    "label": "category",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 770,
                                                            "end_token": 775,
                                                            "label": "query[\"submissionStatus\"] = submission_status",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 771,
                                                                    "end_token": 771,
                                                                    "label": "[",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 775,
                                                                    "end_token": 775,
                                                                    "label": "submission_status",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 782,
                                                            "end_token": 788,
                                                            "label": "order = {sort_by: sort_order}",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 782,
                                                                    "end_token": 782,
                                                                    "label": "order",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "dictionary",
                                                                    "start_token": 784,
                                                                    "end_token": 788,
                                                                    "label": "{sort_by: sort_order}",
                                                                    "children": [
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 785,
                                                                            "end_token": 787,
                                                                            "label": "sort_by: sort_order",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 785,
                                                                                    "end_token": 785,
                                                                                    "label": "sort_by",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 787,
                                                                                    "end_token": 787,
                                                                                    "label": "sort_order",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 795,
                                                            "end_token": 804,
                                                            "label": "skip = (page - 1) * page_size\n",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 795,
                                                                    "end_token": 795,
                                                                    "label": "skip",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "binary_operator",
                                                                    "start_token": 797,
                                                                    "end_token": 804,
                                                                    "label": "(page - 1) * page_size\n",
                                                                    "children": [
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "start_token": 797,
                                                                            "end_token": 801,
                                                                            "label": "(page - 1)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "binary_operator",
                                                                                    "start_token": 797,
                                                                                    "end_token": 799,
                                                                                    "label": "(page -",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 797,
                                                                                            "end_token": 797,
                                                                                            "label": "(",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "operator",
                                                                                            "start_token": 798,
                                                                                            "end_token": 798,
                                                                                            "label": "page",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "integer",
                                                                                            "start_token": 799,
                                                                                            "end_token": 799,
                                                                                            "label": "-",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "operator",
                                                                                    "start_token": 800,
                                                                                    "end_token": 800,
                                                                                    "label": "1",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 801,
                                                                                    "end_token": 801,
                                                                                    "label": ")",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "try_statement",
                                                            "start_token": 811,
                                                            "end_token": 965,
                                                            "label": "try:\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Apply fuzzy search on description if provided\n        if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 812,
                                                                    "end_token": 859,
                                                                    "label": ":\n            agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 814,
                                                                            "end_token": 859,
                                                                            "label": "agents = await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )\n",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 814,
                                                                                    "end_token": 814,
                                                                                    "label": "agents",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "await",
                                                                                    "start_token": 816,
                                                                                    "end_token": 858,
                                                                                    "label": "await prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "start_token": 817,
                                                                                            "end_token": 858,
                                                                                            "label": "prisma.models.Agents.prisma().find_many(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "start_token": 817,
                                                                                                    "end_token": 821,
                                                                                                    "label": "prisma.models.Agents",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 817,
                                                                                                            "end_token": 817,
                                                                                                            "label": "prisma",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 819,
                                                                                                            "end_token": 819,
                                                                                                            "label": "models",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 821,
                                                                                                            "end_token": 821,
                                                                                                            "label": "Agents",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "start_token": 823,
                                                                                                    "end_token": 827,
                                                                                                    "label": "prisma().find_many",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 823,
                                                                                                            "end_token": 823,
                                                                                                            "label": "prisma",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 825,
                                                                                                            "end_token": 825,
                                                                                                            "label": ")",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 827,
                                                                                                            "end_token": 827,
                                                                                                            "label": "find_many",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "start_token": 828,
                                                                                                    "end_token": 858,
                                                                                                    "label": "(\n                where=query,  # type: ignore\n                order=order,  # type: ignore\n                skip=skip,\n                take=page_size,\n            )",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "keyword_argument",
                                                                                                            "start_token": 830,
                                                                                                            "end_token": 832,
                                                                                                            "label": "where=query",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "start_token": 830,
                                                                                                                    "end_token": 830,
                                                                                                                    "label": "where",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "operator",
                                                                                                                    "start_token": 831,
                                                                                                                    "end_token": 831,
                                                                                                                    "label": "=",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "start_token": 832,
                                                                                                                    "end_token": 832,
                                                                                                                    "label": "query",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "keyword_argument",
                                                                                                            "start_token": 839,
                                                                                                            "end_token": 841,
                                                                                                            "label": "order=order",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "start_token": 839,
                                                                                                                    "end_token": 839,
                                                                                                                    "label": "order",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "operator",
                                                                                                                    "start_token": 840,
                                                                                                                    "end_token": 840,
                                                                                                                    "label": "=",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "start_token": 841,
                                                                                                                    "end_token": 841,
                                                                                                                    "label": "order",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "keyword_argument",
                                                                                                            "start_token": 848,
                                                                                                            "end_token": 850,
                                                                                                            "label": "skip=skip",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "start_token": 848,
                                                                                                                    "end_token": 848,
                                                                                                                    "label": "skip",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "operator",
                                                                                                                    "start_token": 849,
                                                                                                                    "end_token": 849,
                                                                                                                    "label": "=",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "start_token": 850,
                                                                                                                    "end_token": 850,
                                                                                                                    "label": "skip",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "keyword_argument",
                                                                                                            "start_token": 853,
                                                                                                            "end_token": 855,
                                                                                                            "label": "take=page_size",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string",
                                                                                                                    "start_token": 853,
                                                                                                                    "end_token": 853,
                                                                                                                    "label": "take",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "operator",
                                                                                                                    "start_token": 854,
                                                                                                                    "end_token": 854,
                                                                                                                    "label": "=",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "start_token": 855,
                                                                                                                    "end_token": 855,
                                                                                                                    "label": "page_size",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "except_clause",
                                                                    "start_token": 860,
                                                                    "end_token": 875,
                                                                    "label": "except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "dotted_name",
                                                                            "start_token": 861,
                                                                            "end_token": 865,
                                                                            "label": "prisma.errors.PrismaError",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 866,
                                                                            "end_token": 866,
                                                                            "label": "as",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 868,
                                                                            "end_token": 875,
                                                                            "label": ":\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "raise_statement",
                                                                                    "start_token": 870,
                                                                                    "end_token": 875,
                                                                                    "label": "raise AgentQueryError(f\"Database query failed: {str(e)}\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 871,
                                                                                            "end_token": 871,
                                                                                            "label": "AgentQueryError",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 887,
                                                            "end_token": 949,
                                                            "label": "if description:\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n",
                                                            "children": [
                                                                {
                                                                    "type": "expression_list",
                                                                    "start_token": 888,
                                                                    "end_token": 888,
                                                                    "label": "description",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 888,
                                                                            "end_token": 888,
                                                                            "label": "description",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 889,
                                                                    "end_token": 949,
                                                                    "label": ":\n            try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n",
                                                                    "children": [
                                                                        {
                                                                            "type": "try_statement",
                                                                            "start_token": 891,
                                                                            "end_token": 965,
                                                                            "label": "try:\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents\n            except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "block",
                                                                                    "start_token": 892,
                                                                                    "end_token": 952,
                                                                                    "label": ":\n                filtered_agents = []\n                for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)\n                agents = filtered_agents",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "assignment",
                                                                                            "start_token": 894,
                                                                                            "end_token": 897,
                                                                                            "label": "filtered_agents = []",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "start_token": 894,
                                                                                                    "end_token": 894,
                                                                                                    "label": "filtered_agents",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "list",
                                                                                                    "start_token": 896,
                                                                                                    "end_token": 897,
                                                                                                    "label": "[]",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "for_statement",
                                                                                            "start_token": 899,
                                                                                            "end_token": 948,
                                                                                            "label": "for agent in agents:\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "as_pattern",
                                                                                                    "start_token": 900,
                                                                                                    "end_token": 902,
                                                                                                    "label": "agent in agents",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 900,
                                                                                                            "end_token": 900,
                                                                                                            "label": "agent",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 902,
                                                                                                            "end_token": 902,
                                                                                                            "label": "agents",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "block",
                                                                                                    "start_token": 903,
                                                                                                    "end_token": 948,
                                                                                                    "label": ":\n                    if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "if_statement",
                                                                                                            "start_token": 905,
                                                                                                            "end_token": 948,
                                                                                                            "label": "if (\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    ):\n                        filtered_agents.append(agent)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "binary_operator",
                                                                                                                    "start_token": 906,
                                                                                                                    "end_token": 940,
                                                                                                                    "label": "(\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )\n                        >= description_threshold\n                    )",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "comparison_operator",
                                                                                                                            "start_token": 906,
                                                                                                                            "end_token": 933,
                                                                                                                            "label": "(\n                        agent.description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "start_token": 906,
                                                                                                                                    "end_token": 906,
                                                                                                                                    "label": "(",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "binary_operator",
                                                                                                                                    "start_token": 913,
                                                                                                                                    "end_token": 934,
                                                                                                                                    "label": "fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()\n                        )",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "call",
                                                                                                                                            "start_token": 910,
                                                                                                                                            "end_token": 932,
                                                                                                                                            "label": "description\n                        and fuzzywuzzy.fuzz.partial_ratio(\n                            description.lower(), agent.description.lower()",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "attribute",
                                                                                                                                                    "start_token": 910,
                                                                                                                                                    "end_token": 912,
                                                                                                                                                    "label": "description\n                        and",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "module",
                                                                                                                                                            "start_token": 910,
                                                                                                                                                            "end_token": 910,
                                                                                                                                                            "label": "description",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "start_token": 911,
                                                                                                                                                            "end_token": 911,
                                                                                                                                                            "label": "\n",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "start_token": 912,
                                                                                                                                                            "end_token": 912,
                                                                                                                                                            "label": "and",
                                                                                                                                                            "children": []
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "start_token": 918,
                                                                                                                                                    "end_token": 920,
                                                                                                                                                    "label": "(\n                            description",
                                                                                                                                                    "children": []
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "module",
                                                                                                                                                    "start_token": 926,
                                                                                                                                                    "end_token": 932,
                                                                                                                                                    "label": "agent.description.lower()",
                                                                                                                                                    "children": []
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "block",
                                                                                                                    "start_token": 941,
                                                                                                                    "end_token": 948,
                                                                                                                    "label": ":\n                        filtered_agents.append(agent)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "call",
                                                                                                                            "start_token": 944,
                                                                                                                            "end_token": 948,
                                                                                                                            "label": ".append(agent)",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "start_token": 944,
                                                                                                                                    "end_token": 944,
                                                                                                                                    "label": ".",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "except_clause",
                                                                                    "start_token": 954,
                                                                                    "end_token": 965,
                                                                                    "label": "except AttributeError as e:\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 955,
                                                                                            "end_token": 955,
                                                                                            "label": "AttributeError",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 957,
                                                                                            "end_token": 957,
                                                                                            "label": "e",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "block",
                                                                                            "start_token": 959,
                                                                                            "end_token": 965,
                                                                                            "label": "\n                raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "raise_statement",
                                                                                                    "start_token": 960,
                                                                                                    "end_token": 965,
                                                                                                    "label": "raise AgentQueryError(f\"Error during fuzzy search: {str(e)}\")",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 961,
                                                                                                            "end_token": 961,
                                                                                                            "label": "AgentQueryError",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 976,
                                                            "end_token": 982,
                                                            "label": "total_count = len(agents)\n",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 976,
                                                                    "end_token": 976,
                                                                    "label": "total_count",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 978,
                                                                    "end_token": 982,
                                                                    "label": "len(agents)\n",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 978,
                                                                            "end_token": 978,
                                                                            "label": "len",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 980,
                                                                            "end_token": 980,
                                                                            "label": "agents",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": 984,
                                                            "end_token": 1016,
                                                            "label": "return {\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total_count + page_size - 1) // page_size,\n        }\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_details(agent_id: str, version: int | None = None):\n    \"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"\n    try:\n        query = {\"id\": agent_id}\n        if version is not None:\n            query[\"version\"] = version  # type: ignore\n\n        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\n        if not agent:\n            raise AgentQueryError(\"Agent not found\")\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def search_db(\n    query: str,\n    page: int = 1,\n    page_size: int = 10,\n    categories: typing.List[str] | None = None,\n    description_threshold: int = 60,\n    sort_by: str = \"rank\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n    \"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"\n    try:\n        offset = (page - 1) * page_size\n\n        category_filter = \"1=1\"\n        if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"\n\n        # Construct the ORDER BY clause based on the sort_by parameter\n        if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\n        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\n\n        sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\n\n        results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )\n\n        class CountResponse(pydantic.BaseModel):\n            count: int\n\n        count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\n\n        total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )\n        total_count = total_count.count if total_count else 0\n\n        return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_top_agents_by_downloads(\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[prisma.models.AnalyticsTracker]:\n    \"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def set_agent_featured(\n    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]\n) -> prisma.models.FeaturedAgent:\n    \"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})\n        if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )\n        return featured\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\n    category: str = \"featured\",\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> FeaturedAgentResponse:\n    \"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(featured_agents)\n\n        return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def remove_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\n\n        if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        # remove the category from the list\n        featured_agent.featuredCategories.remove(category)\n\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def add_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_featured(agent_id: str) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_not_featured_agents(\n    page: int = 1, page_size: int = 10\n) -> typing.List[prisma.models.Agents]:\n    \"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"\n    try:\n        agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )\n        return agents\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_all_categories() -> market.model.CategoriesResponse:\n    \"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"\n    try:\n        agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])\n\n\nasync def create_agent_installed_event(\n    event_data: market.model.AgentInstalledFromMarketplaceEventData,\n):\n    try:\n        await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n",
                                                            "children": [
                                                                {
                                                                    "type": "dictionary",
                                                                    "start_token": 985,
                                                                    "end_token": 1016,
                                                                    "label": "{\n            \"agents\": agents,\n            \"total_count\": total_count,\n            \"page\": page,\n            \"page_size\": page_size,\n            \"total_pages\": (total_count + page_size - 1) // page_size,\n        }\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_details(agent_id: str, version: int | None = None):\n    \"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"\n    try:\n        query = {\"id\": agent_id}\n        if version is not None:\n            query[\"version\"] = version  # type: ignore\n\n        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\n        if not agent:\n            raise AgentQueryError(\"Agent not found\")\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def search_db(\n    query: str,\n    page: int = 1,\n    page_size: int = 10,\n    categories: typing.List[str] | None = None,\n    description_threshold: int = 60,\n    sort_by: str = \"rank\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n    \"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"\n    try:\n        offset = (page - 1) * page_size\n\n        category_filter = \"1=1\"\n        if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"\n\n        # Construct the ORDER BY clause based on the sort_by parameter\n        if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\n        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\n\n        sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\n\n        results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )\n\n        class CountResponse(pydantic.BaseModel):\n            count: int\n\n        count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\n\n        total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )\n        total_count = total_count.count if total_count else 0\n\n        return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_top_agents_by_downloads(\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[prisma.models.AnalyticsTracker]:\n    \"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def set_agent_featured(\n    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]\n) -> prisma.models.FeaturedAgent:\n    \"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})\n        if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )\n        return featured\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\n    category: str = \"featured\",\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> FeaturedAgentResponse:\n    \"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(featured_agents)\n\n        return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def remove_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\n\n        if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        # remove the category from the list\n        featured_agent.featuredCategories.remove(category)\n\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def add_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_featured(agent_id: str) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_not_featured_agents(\n    page: int = 1, page_size: int = 10\n) -> typing.List[prisma.models.Agents]:\n    \"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"\n    try:\n        agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )\n        return agents\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_all_categories() -> market.model.CategoriesResponse:\n    \"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"\n    try:\n        agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])\n\n\nasync def create_agent_installed_event(\n    event_data: market.model.AgentInstalledFromMarketplaceEventData,\n):\n    try:\n        await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n",
                                                                    "children": [
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 987,
                                                                            "end_token": 989,
                                                                            "label": "\"agents\": agents",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 987,
                                                                                    "end_token": 987,
                                                                                    "label": "\"agents\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 989,
                                                                                    "end_token": 989,
                                                                                    "label": "agents",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 992,
                                                                            "end_token": 994,
                                                                            "label": "\"total_count\": total_count",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 992,
                                                                                    "end_token": 992,
                                                                                    "label": "\"total_count\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 994,
                                                                                    "end_token": 994,
                                                                                    "label": "total_count",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 997,
                                                                            "end_token": 999,
                                                                            "label": "\"page\": page",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 997,
                                                                                    "end_token": 997,
                                                                                    "label": "\"page\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 999,
                                                                                    "end_token": 999,
                                                                                    "label": "page",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 1002,
                                                                            "end_token": 1004,
                                                                            "label": "\"page_size\": page_size",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 1002,
                                                                                    "end_token": 1002,
                                                                                    "label": "\"page_size\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 1004,
                                                                                    "end_token": 1004,
                                                                                    "label": "page_size",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": 1007,
                                                                            "end_token": 1016,
                                                                            "label": "\"total_pages\": (total_count + page_size - 1) // page_size,\n        }\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_details(agent_id: str, version: int | None = None):\n    \"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"\n    try:\n        query = {\"id\": agent_id}\n        if version is not None:\n            query[\"version\"] = version  # type: ignore\n\n        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\n        if not agent:\n            raise AgentQueryError(\"Agent not found\")\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def search_db(\n    query: str,\n    page: int = 1,\n    page_size: int = 10,\n    categories: typing.List[str] | None = None,\n    description_threshold: int = 60,\n    sort_by: str = \"rank\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n    \"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"\n    try:\n        offset = (page - 1) * page_size\n\n        category_filter = \"1=1\"\n        if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"\n\n        # Construct the ORDER BY clause based on the sort_by parameter\n        if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\n        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\n\n        sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\n\n        results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )\n\n        class CountResponse(pydantic.BaseModel):\n            count: int\n\n        count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\n\n        total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )\n        total_count = total_count.count if total_count else 0\n\n        return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_top_agents_by_downloads(\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[prisma.models.AnalyticsTracker]:\n    \"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def set_agent_featured(\n    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]\n) -> prisma.models.FeaturedAgent:\n    \"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})\n        if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )\n        return featured\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\n    category: str = \"featured\",\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> FeaturedAgentResponse:\n    \"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(featured_agents)\n\n        return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def remove_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\n\n        if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        # remove the category from the list\n        featured_agent.featuredCategories.remove(category)\n\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def add_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_featured(agent_id: str) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_not_featured_agents(\n    page: int = 1, page_size: int = 10\n) -> typing.List[prisma.models.Agents]:\n    \"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"\n    try:\n        agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )\n        return agents\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_all_categories() -> market.model.CategoriesResponse:\n    \"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"\n    try:\n        agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])\n\n\nasync def create_agent_installed_event(\n    event_data: market.model.AgentInstalledFromMarketplaceEventData,\n):\n    try:\n        await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 1007,
                                                                                    "end_token": 1007,
                                                                                    "label": "\"total_pages\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "binary_operator",
                                                                                    "start_token": 1009,
                                                                                    "end_token": 1016,
                                                                                    "label": "(total_count + page_size - 1) // page_size,\n        }\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_details(agent_id: str, version: int | None = None):\n    \"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"\n    try:\n        query = {\"id\": agent_id}\n        if version is not None:\n            query[\"version\"] = version  # type: ignore\n\n        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\n        if not agent:\n            raise AgentQueryError(\"Agent not found\")\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def search_db(\n    query: str,\n    page: int = 1,\n    page_size: int = 10,\n    categories: typing.List[str] | None = None,\n    description_threshold: int = 60,\n    sort_by: str = \"rank\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n    \"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"\n    try:\n        offset = (page - 1) * page_size\n\n        category_filter = \"1=1\"\n        if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"\n\n        # Construct the ORDER BY clause based on the sort_by parameter\n        if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\n        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\n\n        sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\n\n        results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )\n\n        class CountResponse(pydantic.BaseModel):\n            count: int\n\n        count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\n\n        total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )\n        total_count = total_count.count if total_count else 0\n\n        return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_top_agents_by_downloads(\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[prisma.models.AnalyticsTracker]:\n    \"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def set_agent_featured(\n    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]\n) -> prisma.models.FeaturedAgent:\n    \"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})\n        if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )\n        return featured\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\n    category: str = \"featured\",\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> FeaturedAgentResponse:\n    \"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(featured_agents)\n\n        return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def remove_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\n\n        if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        # remove the category from the list\n        featured_agent.featuredCategories.remove(category)\n\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def add_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_featured(agent_id: str) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_not_featured_agents(\n    page: int = 1, page_size: int = 10\n) -> typing.List[prisma.models.Agents]:\n    \"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"\n    try:\n        agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )\n        return agents\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_all_categories() -> market.model.CategoriesResponse:\n    \"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"\n    try:\n        agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])\n\n\nasync def create_agent_installed_event(\n    event_data: market.model.AgentInstalledFromMarketplaceEventData,\n):\n    try:\n        await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "binary_operator",
                                                                                            "start_token": 1009,
                                                                                            "end_token": 1012,
                                                                                            "label": "(total_count + page_size",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "binary_operator",
                                                                                                    "start_token": 1009,
                                                                                                    "end_token": 1011,
                                                                                                    "label": "(total_count +",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 1009,
                                                                                                            "end_token": 1009,
                                                                                                            "label": "(",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "operator",
                                                                                                            "start_token": 1010,
                                                                                                            "end_token": 1010,
                                                                                                            "label": "total_count",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 1011,
                                                                                                            "end_token": 1011,
                                                                                                            "label": "+",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "operator",
                                                                                                    "start_token": 1012,
                                                                                                    "end_token": 1012,
                                                                                                    "label": "page_size",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 1016,
                                                                                            "end_token": 1016,
                                                                                            "label": "// page_size,\n        }\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\")\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_details(agent_id: str, version: int | None = None):\n    \"\"\"\n    Retrieve agent details from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        version (int | None, optional): The version of the agent. Defaults to None.\n\n    Returns:\n        dict: The agent details.\n\n    Raises:\n        AgentQueryError: If the agent is not found or if there is an error querying the database.\n    \"\"\"\n    try:\n        query = {\"id\": agent_id}\n        if version is not None:\n            query[\"version\"] = version  # type: ignore\n\n        agent = await prisma.models.Agents.prisma().find_first(where=query)  # type: ignore\n\n        if not agent:\n            raise AgentQueryError(\"Agent not found\")\n\n        return agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def search_db(\n    query: str,\n    page: int = 1,\n    page_size: int = 10,\n    categories: typing.List[str] | None = None,\n    description_threshold: int = 60,\n    sort_by: str = \"rank\",\n    sort_order: typing.Literal[\"desc\"] | typing.Literal[\"asc\"] = \"desc\",\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[market.utils.extension_types.AgentsWithRank]:\n    \"\"\"Perform a search for agents based on the provided query string.\n\n    Args:\n        query (str): the search string\n        page (int, optional): page for searching. Defaults to 1.\n        page_size (int, optional): the number of results to return. Defaults to 10.\n        categories (List[str] | None, optional): list of category filters. Defaults to None.\n        description_threshold (int, optional): number of characters to return. Defaults to 60.\n        sort_by (str, optional): sort by option. Defaults to \"rank\".\n        sort_order (\"asc\" | \"desc\", optional): the sort order. Defaults to \"desc\".\n\n    Raises:\n        AgentQueryError: Raises an error if the query fails.\n        AgentQueryError: Raises if an unexpected error occurs.\n\n    Returns:\n        List[AgentsWithRank]: List of agents matching the search criteria.\n    \"\"\"\n    try:\n        offset = (page - 1) * page_size\n\n        category_filter = \"1=1\"\n        if categories:\n            category_conditions = [f\"'{cat}' = ANY(categories)\" for cat in categories]\n            category_filter = \"AND (\" + \" OR \".join(category_conditions) + \")\"\n\n        # Construct the ORDER BY clause based on the sort_by parameter\n        if sort_by in [\"createdAt\", \"updatedAt\"]:\n            order_by_clause = f'\"{sort_by}\" {sort_order.upper()}, rank DESC'\n        elif sort_by == \"name\":\n            order_by_clause = f\"name {sort_order.upper()}, rank DESC\"\n        else:\n            order_by_clause = 'rank DESC, \"createdAt\" DESC'\n\n        submission_status_filter = f\"\"\"\"submissionStatus\" = '{submission_status}'\"\"\"\n\n        sql_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT \n            id, \n            \"createdAt\", \n            \"updatedAt\", \n            version, \n            name, \n            LEFT(description, {description_threshold}) AS description, \n            author, \n            keywords, \n            categories, \n            graph,\n            \"submissionStatus\",\n            \"submissionDate\",\n            CASE \n                WHEN query.q::text = '' THEN 1.0\n                ELSE COALESCE(ts_rank(CAST(search AS tsvector), query.q), 0.0)\n            END AS rank\n        FROM market.\"Agents\", query\n        WHERE \n            (query.q::text = '' OR search @@ query.q)\n            AND {category_filter} \n            AND {submission_status_filter}\n        ORDER BY {order_by_clause}\n        LIMIT {page_size}\n        OFFSET {offset};\n        \"\"\"\n\n        results = await prisma.client.get_client().query_raw(\n            query=sql_query,\n            model=market.utils.extension_types.AgentsWithRank,\n        )\n\n        class CountResponse(pydantic.BaseModel):\n            count: int\n\n        count_query = f\"\"\"\n        WITH query AS (\n            SELECT to_tsquery(string_agg(lexeme || ':*', ' & ' ORDER BY positions)) AS q \n            FROM unnest(to_tsvector('{query}'))\n        )\n        SELECT COUNT(*)\n        FROM market.\"Agents\", query\n        WHERE (search @@ query.q OR query.q = '') AND {category_filter} AND {submission_status_filter};\n        \"\"\"\n\n        total_count = await prisma.client.get_client().query_first(\n            query=count_query,\n            model=CountResponse,\n        )\n        total_count = total_count.count if total_count else 0\n\n        return market.model.ListResponse(\n            items=results,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_top_agents_by_downloads(\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> market.model.ListResponse[prisma.models.AnalyticsTracker]:\n    \"\"\"Retrieve the top agents by download count.\n\n    Args:\n        page (int, optional): The page number. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            # Agents with no downloads will not be included in the results... is this the desired behavior?\n            analytics = await prisma.models.AnalyticsTracker.prisma().find_many(\n                include={\"agent\": True},\n                order={\"downloads\": \"desc\"},\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        try:\n            total_count = await prisma.models.AnalyticsTracker.prisma().count(\n                where={\"agent\": {\"is\": {\"submissionStatus\": submission_status}}},\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        return market.model.ListResponse(\n            items=analytics,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def set_agent_featured(\n    agent_id: str, is_active: bool = True, featured_categories: list[str] = [\"featured\"]\n) -> prisma.models.FeaturedAgent:\n    \"\"\"Set an agent as featured in the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str, optional): The category to set the agent as featured. Defaults to \"featured\".\n\n    Raises:\n        AgentQueryError: If there is an error setting the agent as featured.\n    \"\"\"\n    try:\n        agent = await prisma.models.Agents.prisma().find_unique(where={\"id\": agent_id})\n        if not agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        featured = await prisma.models.FeaturedAgent.prisma().upsert(\n            where={\"agentId\": agent_id},\n            data={\n                \"update\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                },\n                \"create\": {\n                    \"featuredCategories\": featured_categories,\n                    \"isActive\": is_active,\n                    \"agent\": {\"connect\": {\"id\": agent_id}},\n                },\n            },\n        )\n        return featured\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_featured_agents(\n    category: str = \"featured\",\n    page: int = 1,\n    page_size: int = 10,\n    submission_status: prisma.enums.SubmissionStatus = prisma.enums.SubmissionStatus.APPROVED,\n) -> FeaturedAgentResponse:\n    \"\"\"Retrieve a list of featured agents from the database based on the provided category.\n\n    Args:\n        category (str, optional): The category of featured agents to retrieve. Defaults to \"featured\".\n        page (int, optional): The page number to retrieve. Defaults to 1.\n        page_size (int, optional): The number of agents per page. Defaults to 10.\n\n    Returns:\n        dict: A dictionary containing the list of featured agents, total count, current page number, page size, and total number of pages.\n    \"\"\"\n    try:\n        # Calculate pagination\n        skip = (page - 1) * page_size\n\n        # Execute the query\n        try:\n            featured_agents = await prisma.models.FeaturedAgent.prisma().find_many(\n                where={\n                    \"featuredCategories\": {\"has\": category},\n                    \"isActive\": True,\n                    \"agent\": {\"is\": {\"submissionStatus\": submission_status}},\n                },\n                include={\"agent\": {\"include\": {\"AnalyticsTracker\": True}}},\n                skip=skip,\n                take=page_size,\n            )\n        except prisma.errors.PrismaError as e:\n            raise AgentQueryError(f\"Database query failed: {str(e)}\")\n\n        # Get total count for pagination info\n        total_count = len(featured_agents)\n\n        return FeaturedAgentResponse(\n            featured_agents=featured_agents,\n            total_count=total_count,\n            page=page,\n            page_size=page_size,\n            total_pages=(total_count + page_size - 1) // page_size,\n        )\n\n    except AgentQueryError as e:\n        # Log the error or handle it as needed\n        raise e from e\n    except ValueError as e:\n        raise AgentQueryError(f\"Invalid input parameter: {str(e)}\") from e\n    except Exception as e:\n        # Catch any other unexpected exceptions\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\") from e\n\n\nasync def remove_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Adds a featured category to an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to add to the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        # get the existing categories\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n            include={\"agent\": True},\n        )\n\n        if not featured_agent:\n            raise AgentQueryError(f\"Agent with ID {agent_id} not found.\")\n\n        # remove the category from the list\n        featured_agent.featuredCategories.remove(category)\n\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": featured_agent.featuredCategories},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def add_featured_category(\n    agent_id: str, category: str\n) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Removes a featured category from an agent.\n\n    Args:\n        agent_id (str): The ID of the agent.\n        category (str): The category to remove from the agent.\n\n    Returns:\n        FeaturedAgentResponse: The updated list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().update(\n            where={\"agentId\": agent_id},\n            data={\"featuredCategories\": {\"push\": [category]}},\n        )\n\n        return featured_agent\n\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_agent_featured(agent_id: str) -> prisma.models.FeaturedAgent | None:\n    \"\"\"Retrieve an agent's featured categories from the database.\n\n    Args:\n        agent_id (str): The ID of the agent.\n\n    Returns:\n        FeaturedAgentResponse: The list of featured agents.\n    \"\"\"\n    try:\n        featured_agent = await prisma.models.FeaturedAgent.prisma().find_unique(\n            where={\"agentId\": agent_id},\n        )\n        return featured_agent\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_not_featured_agents(\n    page: int = 1, page_size: int = 10\n) -> typing.List[prisma.models.Agents]:\n    \"\"\"\n    Retrieve a list of not featured agents from the database.\n    \"\"\"\n    try:\n        agents = await prisma.client.get_client().query_raw(\n            query=f\"\"\"\n            SELECT \n                \"market\".\"Agents\".id, \n                \"market\".\"Agents\".\"createdAt\", \n                \"market\".\"Agents\".\"updatedAt\", \n                \"market\".\"Agents\".version, \n                \"market\".\"Agents\".name, \n                LEFT(\"market\".\"Agents\".description, 500) AS description, \n                \"market\".\"Agents\".author, \n                \"market\".\"Agents\".keywords, \n                \"market\".\"Agents\".categories, \n                \"market\".\"Agents\".graph,\n                \"market\".\"Agents\".\"submissionStatus\",\n                \"market\".\"Agents\".\"submissionDate\",\n                \"market\".\"Agents\".search::text AS search\n            FROM \"market\".\"Agents\"\n            LEFT JOIN \"market\".\"FeaturedAgent\" ON \"market\".\"Agents\".\"id\" = \"market\".\"FeaturedAgent\".\"agentId\"\n            WHERE (\"market\".\"FeaturedAgent\".\"agentId\" IS NULL OR \"market\".\"FeaturedAgent\".\"featuredCategories\" = '{{}}')\n                AND \"market\".\"Agents\".\"submissionStatus\" = 'APPROVED'\n            ORDER BY \"market\".\"Agents\".\"createdAt\" DESC\n            LIMIT {page_size} OFFSET {page_size * (page - 1)}\n            \"\"\",\n            model=prisma.models.Agents,\n        )\n        return agents\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n\n\nasync def get_all_categories() -> market.model.CategoriesResponse:\n    \"\"\"\n    Retrieve all unique categories from the database.\n\n    Returns:\n        CategoriesResponse: A list of unique categories.\n    \"\"\"\n    try:\n        agents = await prisma.models.Agents.prisma().find_many(distinct=[\"categories\"])\n\n        # Aggregate categories on the Python side\n        all_categories = set()\n        for agent in agents:\n            all_categories.update(agent.categories)\n\n        unique_categories = sorted(list(all_categories))\n\n        return market.model.CategoriesResponse(unique_categories=unique_categories)\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception:\n        # Return an empty list of categories in case of unexpected errors\n        return market.model.CategoriesResponse(unique_categories=[])\n\n\nasync def create_agent_installed_event(\n    event_data: market.model.AgentInstalledFromMarketplaceEventData,\n):\n    try:\n        await prisma.models.InstallTracker.prisma().create(\n            data={\n                \"installedAgentId\": event_data.installed_agent_id,\n                \"marketplaceAgentId\": event_data.marketplace_agent_id,\n                \"installationLocation\": prisma.enums.InstallationLocation(\n                    event_data.installation_location.name\n                ),\n            }\n        )\n    except prisma.errors.PrismaError as e:\n        raise AgentQueryError(f\"Database query failed: {str(e)}\")\n    except Exception as e:\n        raise AgentQueryError(f\"Unexpected error occurred: {str(e)}\")\n",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "except_clause",
                                                    "start_token": 1015,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 1015,
                                                            "end_token": 1015,
                                                            "label": ")",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "raise_statement",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "start_token": 1016,
                            "end_token": -1,
                            "label": "",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": -1,
                                    "end_token": -1,
                                    "label": "",
                                    "children": [
                                        {
                                            "type": "try_statement",
                                            "start_token": -1,
                                            "end_token": -1,
                                            "label": "",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "dictionary",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "pair",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "expression_list",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "operator",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "none",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": [
                                                                                {
                                                                                    "type": "index",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "operator",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "await",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "keyword_argument",
                                                                                            "start_token": -1,
                                                                                            "end_token": -1,
                                                                                            "label": "",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "start_token": -1,
                                                                                                    "end_token": -1,
                                                                                                    "label": "",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "operator",
                                                                                                    "start_token": -1,
                                                                                                    "end_token": -1,
                                                                                                    "label": "",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "start_token": -1,
                                                                                                    "end_token": -1,
                                                                                                    "label": "",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "not_operator",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": -1,
                                                                                    "end_token": -1,
                                                                                    "label": "",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "except_clause",
                                                    "start_token": -1,
                                                    "end_token": -1,
                                                    "label": "",
                                                    "children": [
                                                        {
                                                            "type": "dotted_name",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": -1,
                                                            "end_token": -1,
                                                            "label": "",
                                                            "children": [
                                                                {
                                                                    "type": "raise_statement",
                                                                    "start_token": -1,
                                                                    "end_token": -1,
                                                                    "label": "",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": -1,
                                                                            "end_token": -1,
                                                                            "label": "",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}