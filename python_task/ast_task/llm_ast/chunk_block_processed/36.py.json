{
    "type": "module",
    "start_token": 0,
    "end_token": 90,
    "label": "from math import log2\n\n\ndef binary_count_trailing_zeros(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return 0 if (a == 0) else int(log2(a & -a))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
    "children": [
        {
            "type": "import_from_statement",
            "start_token": 0,
            "end_token": 3,
            "label": "from math import log2",
            "children": [
                {
                    "type": "import_prefix",
                    "start_token": 0,
                    "end_token": 1,
                    "label": "from math",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 2,
                    "end_token": 2,
                    "label": "import",
                    "children": []
                },
                {
                    "type": "identifier",
                    "start_token": 3,
                    "end_token": 3,
                    "label": "log2",
                    "children": []
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 7,
            "end_token": 72,
            "label": "def binary_count_trailing_zeros(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return 0 if (a == 0) else int(log2(a & -a))\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 8,
                    "end_token": 8,
                    "label": "binary_count_trailing_zeros",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 9,
                    "end_token": 13,
                    "label": "(a: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 10,
                            "end_token": 12,
                            "label": "a: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "label": "a",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 12,
                                    "end_token": 12,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "start_token": 15,
                    "end_token": 16,
                    "label": "> int",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 18,
                    "end_token": 72,
                    "label": "\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return 0 if (a == 0) else int(log2(a & -a))\n",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 19,
                            "end_token": 23,
                            "label": "\"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "start_token": 25,
                            "end_token": 35,
                            "label": "if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")",
                            "children": [
                                {
                                    "type": "if_clause",
                                    "start_token": 25,
                                    "end_token": 29,
                                    "label": "if a < 0:",
                                    "children": [
                                        {
                                            "type": "comparison_operator",
                                            "start_token": 25,
                                            "end_token": 28,
                                            "label": "if a < 0",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 26,
                                                    "end_token": 26,
                                                    "label": "a",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": 28,
                                                    "end_token": 28,
                                                    "label": "0",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 30,
                                    "end_token": 35,
                                    "label": "\n        raise ValueError(\"Input value must be a positive integer\")",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "start_token": 31,
                                            "end_token": 35,
                                            "label": "raise ValueError(\"Input value must be a positive integer\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 32,
                                                    "end_token": 35,
                                                    "label": "ValueError(\"Input value must be a positive integer\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 32,
                                                            "end_token": 32,
                                                            "label": "ValueError",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 33,
                                                            "end_token": 35,
                                                            "label": "(\"Input value must be a positive integer\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 34,
                                                                    "end_token": 34,
                                                                    "label": "\"Input value must be a positive integer\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "start_token": 37,
                            "end_token": 50,
                            "label": "elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")",
                            "children": [
                                {
                                    "type": "elif_clause",
                                    "start_token": 37,
                                    "end_token": 44,
                                    "label": "elif isinstance(a, float):",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 38,
                                            "end_token": 43,
                                            "label": "isinstance(a, float)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 38,
                                                    "end_token": 38,
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 39,
                                                    "end_token": 43,
                                                    "label": "(a, float)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 40,
                                                            "end_token": 40,
                                                            "label": "a",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "type",
                                                            "start_token": 42,
                                                            "end_token": 42,
                                                            "label": "float",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 45,
                                    "end_token": 50,
                                    "label": "\n        raise TypeError(\"Input value must be a 'int' type\")",
                                    "children": [
                                        {
                                            "type": "raise_statement",
                                            "start_token": 46,
                                            "end_token": 50,
                                            "label": "raise TypeError(\"Input value must be a 'int' type\")",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 47,
                                                    "end_token": 50,
                                                    "label": "TypeError(\"Input value must be a 'int' type\")",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 47,
                                                            "end_token": 47,
                                                            "label": "TypeError",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 48,
                                                            "end_token": 50,
                                                            "label": "(\"Input value must be a 'int' type\")",
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 49,
                                                                    "end_token": 49,
                                                                    "label": "\"Input value must be a 'int' type\"",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 52,
                            "end_token": 71,
                            "label": "return 0 if (a == 0) else int(log2(a & -a))",
                            "children": [
                                {
                                    "type": "conditional_expression",
                                    "start_token": 53,
                                    "end_token": 71,
                                    "label": "0 if (a == 0) else int(log2(a & -a))",
                                    "children": [
                                        {
                                            "type": "integer",
                                            "start_token": 53,
                                            "end_token": 53,
                                            "label": "0",
                                            "children": []
                                        },
                                        {
                                            "type": "comparison_operator",
                                            "start_token": 55,
                                            "end_token": 60,
                                            "label": "(a == 0)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 56,
                                                    "end_token": 56,
                                                    "label": "a",
                                                    "children": []
                                                },
                                                {
                                                    "type": "integer",
                                                    "start_token": 59,
                                                    "end_token": 59,
                                                    "label": "0",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 62,
                                            "end_token": 71,
                                            "label": "int(log2(a & -a))",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 62,
                                                    "end_token": 62,
                                                    "label": "int",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 63,
                                                    "end_token": 71,
                                                    "label": "(log2(a & -a))",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 64,
                                                            "end_token": 70,
                                                            "label": "log2(a & -a)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 64,
                                                                    "end_token": 64,
                                                                    "label": "log2",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 65,
                                                                    "end_token": 70,
                                                                    "label": "(a & -a)",
                                                                    "children": [
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "start_token": 66,
                                                                            "end_token": 69,
                                                                            "label": "a & -a",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 66,
                                                                                    "end_token": 66,
                                                                                    "label": "a",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "unary_operator",
                                                                                    "start_token": 68,
                                                                                    "end_token": 69,
                                                                                    "label": "-a",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 69,
                                                                                            "end_token": 69,
                                                                                            "label": "a",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "binary_count_trailing_zeros",
            "start_line": 4,
            "end_line": 38
        },
        {
            "type": "block",
            "start_token": 75,
            "end_token": 90,
            "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
            "children": [
                {
                    "type": "if_statement",
                    "start_token": 75,
                    "end_token": 80,
                    "label": "if __name__ == \"__main__\":",
                    "children": [
                        {
                            "type": "if_clause",
                            "start_token": 75,
                            "end_token": 80,
                            "label": "if __name__ == \"__main__\":",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "start_token": 76,
                                    "end_token": 79,
                                    "label": "__name__ == \"__main__\"",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "import_statement",
                    "start_token": 82,
                    "end_token": 83,
                    "label": "import doctest",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 83,
                            "end_token": 83,
                            "label": "doctest",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "expression_statement",
                    "start_token": 86,
                    "end_token": 90,
                    "label": "doctest.testmod()",
                    "children": [
                        {
                            "type": "call",
                            "start_token": 86,
                            "end_token": 90,
                            "label": "doctest.testmod()",
                            "children": [
                                {
                                    "type": "attribute",
                                    "start_token": 86,
                                    "end_token": 88,
                                    "label": "doctest.testmod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 86,
                                            "end_token": 86,
                                            "label": "doctest",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 88,
                                            "end_token": 88,
                                            "label": "testmod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "argument_list",
                                    "start_token": 89,
                                    "end_token": 90,
                                    "label": "()",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}