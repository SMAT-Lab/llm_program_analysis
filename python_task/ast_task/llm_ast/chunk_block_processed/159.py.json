{
    "type": "module",
    "start_token": 0,
    "end_token": 272,
    "label": "\"\"\"\nA Hamiltonian cycle (Hamiltonian circuit) is a graph cycle\nthrough a graph that visits each node exactly once.\nDetermining whether such paths and cycles exist in graphs\nis the 'Hamiltonian path problem', which is NP-complete.\n\nWikipedia: https://en.wikipedia.org/wiki/Hamiltonian_path\n\"\"\"\n\n\ndef valid_connection(\n    graph: list[list[int]], next_ver: int, curr_ind: int, path: list[int]\n) -> bool:\n    \"\"\"\n    Checks whether it is possible to add next into path by validating 2 statements\n    1. There should be path between current and next vertex\n    2. Next vertex should not be in path\n    If both validations succeed we return True, saying that it is possible to connect\n    this vertices, otherwise we return False\n\n    Case 1:Use exact graph as in main function, with initialized values\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> path = [0, -1, -1, -1, -1, 0]\n    >>> curr_ind = 1\n    >>> next_ver = 1\n    >>> valid_connection(graph, next_ver, curr_ind, path)\n    True\n\n    Case 2: Same graph, but trying to connect to node that is already in path\n    >>> path = [0, 1, 2, 4, -1, 0]\n    >>> curr_ind = 4\n    >>> next_ver = 1\n    >>> valid_connection(graph, next_ver, curr_ind, path)\n    False\n    \"\"\"\n\n    # 1. Validate that path exists between current and next vertices\n    if graph[path[curr_ind - 1]][next_ver] == 0:\n        return False\n\n    # 2. Validate that next vertex is not already in path\n    return not any(vertex == next_ver for vertex in path)\n\n\ndef util_hamilton_cycle(graph: list[list[int]], path: list[int], curr_ind: int) -> bool:\n    \"\"\"\n    Pseudo-Code\n    Base Case:\n    1. Check if we visited all of vertices\n        1.1 If last visited vertex has path to starting vertex return True either\n            return False\n    Recursive Step:\n    2. Iterate over each vertex\n        Check if next vertex is valid for transiting from current vertex\n            2.1 Remember next vertex as next transition\n            2.2 Do recursive call and check if going to this vertex solves problem\n            2.3 If next vertex leads to solution return True\n            2.4 Else backtrack, delete remembered vertex\n\n    Case 1: Use exact graph as in main function, with initialized values\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> path = [0, -1, -1, -1, -1, 0]\n    >>> curr_ind = 1\n    >>> util_hamilton_cycle(graph, path, curr_ind)\n    True\n    >>> path\n    [0, 1, 2, 4, 3, 0]\n\n    Case 2: Use exact graph as in previous case, but in the properties taken from\n        middle of calculation\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> path = [0, 1, 2, -1, -1, 0]\n    >>> curr_ind = 3\n    >>> util_hamilton_cycle(graph, path, curr_ind)\n    True\n    >>> path\n    [0, 1, 2, 4, 3, 0]\n    \"\"\"\n\n    # Base Case\n    if curr_ind == len(graph):\n        # return whether path exists between current and starting vertices\n        return graph[path[curr_ind - 1]][path[0]] == 1\n\n    # Recursive Step\n    for next_ver in range(len(graph)):\n        if valid_connection(graph, next_ver, curr_ind, path):\n            # Insert current vertex  into path as next transition\n            path[curr_ind] = next_ver\n            # Validate created path\n            if util_hamilton_cycle(graph, path, curr_ind + 1):\n                return True\n            # Backtrack\n            path[curr_ind] = -1\n    return False\n\n\n",
    "children": [
        {
            "type": "block",
            "start_token": 1,
            "end_token": 1,
            "label": "\"\nA Hamiltonian cycle (Hamiltonian circuit) is a graph cycle\nthrough a graph that visits each node exactly once.\nDetermining whether such paths and cycles exist in graphs\nis the 'Hamiltonian path problem', which is NP-complete.\n\nWikipedia: https://en.wikipedia.org/wiki/Hamiltonian_path\n\"",
            "children": [
                {
                    "type": "string",
                    "start_token": 1,
                    "end_token": 1,
                    "label": "\"\nA Hamiltonian cycle (Hamiltonian circuit) is a graph cycle\nthrough a graph that visits each node exactly once.\nDetermining whether such paths and cycles exist in graphs\nis the 'Hamiltonian path problem', which is NP-complete.\n\nWikipedia: https://en.wikipedia.org/wiki/Hamiltonian_path\n\"",
                    "children": [
                        {
                            "type": "string_start",
                            "start_token": 0,
                            "end_token": 0,
                            "label": "\"\"",
                            "children": []
                        },
                        {
                            "type": "string_content",
                            "start_token": 1,
                            "end_token": 1,
                            "label": "\"\nA Hamiltonian cycle (Hamiltonian circuit) is a graph cycle\nthrough a graph that visits each node exactly once.\nDetermining whether such paths and cycles exist in graphs\nis the 'Hamiltonian path problem', which is NP-complete.\n\nWikipedia: https://en.wikipedia.org/wiki/Hamiltonian_path\n\"",
                            "children": []
                        },
                        {
                            "type": "string_end",
                            "start_token": 2,
                            "end_token": 2,
                            "label": "\"\"",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "start_token": 6,
            "end_token": 107,
            "label": "def valid_connection(\n    graph: list[list[int]], next_ver: int, curr_ind: int, path: list[int]\n) -> bool:\n    \"\"\"\n    Checks whether it is possible to add next into path by validating 2 statements\n    1. There should be path between current and next vertex\n    2. Next vertex should not be in path\n    If both validations succeed we return True, saying that it is possible to connect\n    this vertices, otherwise we return False\n\n    Case 1:Use exact graph as in main function, with initialized values\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> path = [0, -1, -1, -1, -1, 0]\n    >>> curr_ind = 1\n    >>> next_ver = 1\n    >>> valid_connection(graph, next_ver, curr_ind, path)\n    True\n\n    Case 2: Same graph, but trying to connect to node that is already in path\n    >>> path = [0, 1, 2, 4, -1, 0]\n    >>> curr_ind = 4\n    >>> next_ver = 1\n    >>> valid_connection(graph, next_ver, curr_ind, path)\n    False\n    \"\"\"\n\n    # 1. Validate that path exists between current and next vertices\n    if graph[path[curr_ind - 1]][next_ver] == 0:\n        return False\n\n    # 2. Validate that next vertex is not already in path\n    return not any(vertex == next_ver for vertex in path)\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 7,
                    "end_token": 7,
                    "label": "valid_connection",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 8,
                    "end_token": 35,
                    "label": "(\n    graph: list[list[int]], next_ver: int, curr_ind: int, path: list[int]\n)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 10,
                            "end_token": 18,
                            "label": "graph: list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "label": "graph",
                                    "children": []
                                },
                                {
                                    "type": "generic_type",
                                    "start_token": 11,
                                    "end_token": 18,
                                    "label": ": list[list[int]]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 12,
                                            "end_token": 12,
                                            "label": "list",
                                            "children": []
                                        },
                                        {
                                            "type": "generic_type",
                                            "start_token": 13,
                                            "end_token": 17,
                                            "label": "[list[int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 14,
                                                    "end_token": 14,
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 16,
                                                    "end_token": 16,
                                                    "label": "int",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 20,
                            "end_token": 22,
                            "label": "next_ver: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 20,
                                    "end_token": 20,
                                    "label": "next_ver",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 22,
                                    "end_token": 22,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 24,
                            "end_token": 26,
                            "label": "curr_ind: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 24,
                                    "end_token": 24,
                                    "label": "curr_ind",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 26,
                                    "end_token": 26,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 28,
                            "end_token": 33,
                            "label": "path: list[int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 28,
                                    "end_token": 28,
                                    "label": "path",
                                    "children": []
                                },
                                {
                                    "type": "generic_type",
                                    "start_token": 30,
                                    "end_token": 33,
                                    "label": "list[int]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 30,
                                            "end_token": 30,
                                            "label": "list",
                                            "children": []
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 32,
                                            "end_token": 32,
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 40,
                    "end_token": 106,
                    "label": "\n    \"\"\"\n    Checks whether it is possible to add next into path by validating 2 statements\n    1. There should be path between current and next vertex\n    2. Next vertex should not be in path\n    If both validations succeed we return True, saying that it is possible to connect\n    this vertices, otherwise we return False\n\n    Case 1:Use exact graph as in main function, with initialized values\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> path = [0, -1, -1, -1, -1, 0]\n    >>> curr_ind = 1\n    >>> next_ver = 1\n    >>> valid_connection(graph, next_ver, curr_ind, path)\n    True\n\n    Case 2: Same graph, but trying to connect to node that is already in path\n    >>> path = [0, 1, 2, 4, -1, 0]\n    >>> curr_ind = 4\n    >>> next_ver = 1\n    >>> valid_connection(graph, next_ver, curr_ind, path)\n    False\n    \"\"\"\n\n    # 1. Validate that path exists between current and next vertices\n    if graph[path[curr_ind - 1]][next_ver] == 0:\n        return False\n\n    # 2. Validate that next vertex is not already in path\n    return not any(vertex == next_ver for vertex in path)",
                    "children": [
                        {
                            "type": "string",
                            "start_token": 41,
                            "end_token": 43,
                            "label": "\"\"\"\n    Checks whether it is possible to add next into path by validating 2 statements\n    1. There should be path between current and next vertex\n    2. Next vertex should not be in path\n    If both validations succeed we return True, saying that it is possible to connect\n    this vertices, otherwise we return False\n\n    Case 1:Use exact graph as in main function, with initialized values\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> path = [0, -1, -1, -1, -1, 0]\n    >>> curr_ind = 1\n    >>> next_ver = 1\n    >>> valid_connection(graph, next_ver, curr_ind, path)\n    True\n\n    Case 2: Same graph, but trying to connect to node that is already in path\n    >>> path = [0, 1, 2, 4, -1, 0]\n    >>> curr_ind = 4\n    >>> next_ver = 1\n    >>> valid_connection(graph, next_ver, curr_ind, path)\n    False\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "comment",
                            "start_token": 46,
                            "end_token": 58,
                            "label": "# 1. Validate that path exists between current and next vertices\n",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "start_token": 59,
                            "end_token": 78,
                            "label": "if graph[path[curr_ind - 1]][next_ver] == 0:\n        return False",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "start_token": 60,
                                    "end_token": 75,
                                    "label": "graph[path[curr_ind - 1]][next_ver] == 0:",
                                    "children": [
                                        {
                                            "type": "subscript",
                                            "start_token": 60,
                                            "end_token": 68,
                                            "label": "graph[path[curr_ind - 1]]",
                                            "children": [
                                                {
                                                    "type": "subscript",
                                                    "start_token": 60,
                                                    "end_token": 67,
                                                    "label": "graph[path[curr_ind - 1]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 60,
                                                            "end_token": 60,
                                                            "label": "graph",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "start_token": 63,
                                                            "end_token": 66,
                                                            "label": "[curr_ind - 1",
                                                            "children": [
                                                                {
                                                                    "type": "subscript",
                                                                    "start_token": 63,
                                                                    "end_token": 65,
                                                                    "label": "[curr_ind -",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 63,
                                                                            "end_token": 63,
                                                                            "label": "[",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "start_token": 64,
                                                                            "end_token": 64,
                                                                            "label": "curr_ind",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "start_token": 66,
                                                                    "end_token": 66,
                                                                    "label": "1",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 70,
                                                    "end_token": 70,
                                                    "label": "next_ver",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "integer",
                                            "start_token": 74,
                                            "end_token": 74,
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "start_token": 76,
                                    "end_token": 78,
                                    "label": "\n        return False",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "start_token": 77,
                                            "end_token": 78,
                                            "label": "return False",
                                            "children": [
                                                {
                                                    "type": "false",
                                                    "start_token": 78,
                                                    "end_token": 78,
                                                    "label": "False",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "start_token": 81,
                            "end_token": 93,
                            "label": "# 2. Validate that next vertex is not already in path\n",
                            "children": []
                        },
                        {
                            "type": "return_statement",
                            "start_token": 94,
                            "end_token": 106,
                            "label": "return not any(vertex == next_ver for vertex in path)",
                            "children": [
                                {
                                    "type": "not_operator",
                                    "start_token": 95,
                                    "end_token": 106,
                                    "label": "not any(vertex == next_ver for vertex in path)",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 96,
                                            "end_token": 105,
                                            "label": "any(vertex == next_ver for vertex in path",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 96,
                                                    "end_token": 96,
                                                    "label": "any",
                                                    "children": []
                                                },
                                                {
                                                    "type": "generator_expression",
                                                    "start_token": 97,
                                                    "end_token": 105,
                                                    "label": "(vertex == next_ver for vertex in path",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": 98,
                                                            "end_token": 101,
                                                            "label": "vertex == next_ver",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 98,
                                                                    "end_token": 98,
                                                                    "label": "vertex",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 101,
                                                                    "end_token": 101,
                                                                    "label": "next_ver",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "for_in_clause",
                                                            "start_token": 102,
                                                            "end_token": 105,
                                                            "label": "for vertex in path",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 103,
                                                                    "end_token": 103,
                                                                    "label": "vertex",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 105,
                                                                    "end_token": 105,
                                                                    "label": "path",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "valid_connection",
            "start_line": 11,
            "end_line": 46
        },
        {
            "type": "function_definition",
            "start_token": 110,
            "end_token": 270,
            "label": "def util_hamilton_cycle(graph: list[list[int]], path: list[int], curr_ind: int) -> bool:\n    \"\"\"\n    Pseudo-Code\n    Base Case:\n    1. Check if we visited all of vertices\n        1.1 If last visited vertex has path to starting vertex return True either\n            return False\n    Recursive Step:\n    2. Iterate over each vertex\n        Check if next vertex is valid for transiting from current vertex\n            2.1 Remember next vertex as next transition\n            2.2 Do recursive call and check if going to this vertex solves problem\n            2.3 If next vertex leads to solution return True\n            2.4 Else backtrack, delete remembered vertex\n\n    Case 1: Use exact graph as in main function, with initialized values\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> path = [0, -1, -1, -1, -1, 0]\n    >>> curr_ind = 1\n    >>> util_hamilton_cycle(graph, path, curr_ind)\n    True\n    >>> path\n    [0, 1, 2, 4, 3, 0]\n\n    Case 2: Use exact graph as in previous case, but in the properties taken from\n        middle of calculation\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> path = [0, 1, 2, -1, -1, 0]\n    >>> curr_ind = 3\n    >>> util_hamilton_cycle(graph, path, curr_ind)\n    True\n    >>> path\n    [0, 1, 2, 4, 3, 0]\n    \"\"\"\n\n    # Base Case\n    if curr_ind == len(graph):\n        # return whether path exists between current and starting vertices\n        return graph[path[curr_ind - 1]][path[0]] == 1\n\n    # Recursive Step\n    for next_ver in range(len(graph)):\n        if valid_connection(graph, next_ver, curr_ind, path):\n            # Insert current vertex  into path as next transition\n            path[curr_ind] = next_ver\n            # Validate created path\n            if util_hamilton_cycle(graph, path, curr_ind + 1):\n                return True\n            # Backtrack\n            path[curr_ind] = -1\n    return False\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 111,
                    "end_token": 111,
                    "label": "util_hamilton_cycle",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 112,
                    "end_token": 133,
                    "label": "(graph: list[list[int]], path: list[int], curr_ind: int)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 113,
                            "end_token": 121,
                            "label": "graph: list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 113,
                                    "end_token": 113,
                                    "label": "graph",
                                    "children": []
                                },
                                {
                                    "type": "generic_type",
                                    "start_token": 115,
                                    "end_token": 121,
                                    "label": "list[list[int]]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "start_token": 116,
                                            "end_token": 120,
                                            "label": "[list[int]",
                                            "children": [
                                                {
                                                    "type": "type",
                                                    "start_token": 119,
                                                    "end_token": 119,
                                                    "label": "int",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 123,
                            "end_token": 128,
                            "label": "path: list[int]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 123,
                                    "end_token": 123,
                                    "label": "path",
                                    "children": []
                                },
                                {
                                    "type": "generic_type",
                                    "start_token": 125,
                                    "end_token": 128,
                                    "label": "list[int]",
                                    "children": [
                                        {
                                            "type": "type",
                                            "start_token": 127,
                                            "end_token": 127,
                                            "label": "int",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "start_token": 130,
                            "end_token": 132,
                            "label": "curr_ind: int",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 130,
                                    "end_token": 130,
                                    "label": "curr_ind",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "start_token": 132,
                                    "end_token": 132,
                                    "label": "int",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "start_token": 135,
                    "end_token": 136,
                    "label": "> bool",
                    "children": []
                },
                {
                    "type": "block",
                    "start_token": 137,
                    "end_token": 269,
                    "label": ":\n    \"\"\"\n    Pseudo-Code\n    Base Case:\n    1. Check if we visited all of vertices\n        1.1 If last visited vertex has path to starting vertex return True either\n            return False\n    Recursive Step:\n    2. Iterate over each vertex\n        Check if next vertex is valid for transiting from current vertex\n            2.1 Remember next vertex as next transition\n            2.2 Do recursive call and check if going to this vertex solves problem\n            2.3 If next vertex leads to solution return True\n            2.4 Else backtrack, delete remembered vertex\n\n    Case 1: Use exact graph as in main function, with initialized values\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> path = [0, -1, -1, -1, -1, 0]\n    >>> curr_ind = 1\n    >>> util_hamilton_cycle(graph, path, curr_ind)\n    True\n    >>> path\n    [0, 1, 2, 4, 3, 0]\n\n    Case 2: Use exact graph as in previous case, but in the properties taken from\n        middle of calculation\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> path = [0, 1, 2, -1, -1, 0]\n    >>> curr_ind = 3\n    >>> util_hamilton_cycle(graph, path, curr_ind)\n    True\n    >>> path\n    [0, 1, 2, 4, 3, 0]\n    \"\"\"\n\n    # Base Case\n    if curr_ind == len(graph):\n        # return whether path exists between current and starting vertices\n        return graph[path[curr_ind - 1]][path[0]] == 1\n\n    # Recursive Step\n    for next_ver in range(len(graph)):\n        if valid_connection(graph, next_ver, curr_ind, path):\n            # Insert current vertex  into path as next transition\n            path[curr_ind] = next_ver\n            # Validate created path\n            if util_hamilton_cycle(graph, path, curr_ind + 1):\n                return True\n            # Backtrack\n            path[curr_ind] = -1\n    return False",
                    "children": [
                        {
                            "type": "comment",
                            "start_token": 139,
                            "end_token": 141,
                            "label": "\"\"\"\n    Pseudo-Code\n    Base Case:\n    1. Check if we visited all of vertices\n        1.1 If last visited vertex has path to starting vertex return True either\n            return False\n    Recursive Step:\n    2. Iterate over each vertex\n        Check if next vertex is valid for transiting from current vertex\n            2.1 Remember next vertex as next transition\n            2.2 Do recursive call and check if going to this vertex solves problem\n            2.3 If next vertex leads to solution return True\n            2.4 Else backtrack, delete remembered vertex\n\n    Case 1: Use exact graph as in main function, with initialized values\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> path = [0, -1, -1, -1, -1, 0]\n    >>> curr_ind = 1\n    >>> util_hamilton_cycle(graph, path, curr_ind)\n    True\n    >>> path\n    [0, 1, 2, 4, 3, 0]\n\n    Case 2: Use exact graph as in previous case, but in the properties taken from\n        middle of calculation\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> path = [0, 1, 2, -1, -1, 0]\n    >>> curr_ind = 3\n    >>> util_hamilton_cycle(graph, path, curr_ind)\n    True\n    >>> path\n    [0, 1, 2, 4, 3, 0]\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "start_token": 148,
                            "end_token": 187,
                            "label": "if curr_ind == len(graph):\n        # return whether path exists between current and starting vertices\n        return graph[path[curr_ind - 1]][path[0]] == 1",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "start_token": 149,
                                    "end_token": 155,
                                    "label": "curr_ind == len(graph)",
                                    "children": [
                                        {
                                            "type": "binary_operator",
                                            "start_token": 149,
                                            "end_token": 152,
                                            "label": "curr_ind == len",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 149,
                                                    "end_token": 149,
                                                    "label": "curr_ind",
                                                    "children": []
                                                },
                                                {
                                                    "type": "dotted_name",
                                                    "start_token": 152,
                                                    "end_token": 152,
                                                    "label": "len",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 152,
                                            "end_token": 155,
                                            "label": "len(graph)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 152,
                                                    "end_token": 152,
                                                    "label": "len",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 169,
                                    "end_token": 187,
                                    "label": "return graph[path[curr_ind - 1]][path[0]] == 1",
                                    "children": [
                                        {
                                            "type": "comparison_operator",
                                            "start_token": 170,
                                            "end_token": 187,
                                            "label": "graph[path[curr_ind - 1]][path[0]] == 1",
                                            "children": [
                                                {
                                                    "type": "subscript",
                                                    "start_token": 170,
                                                    "end_token": 178,
                                                    "label": "graph[path[curr_ind - 1]]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 170,
                                                            "end_token": 170,
                                                            "label": "graph",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "index",
                                                            "start_token": 172,
                                                            "end_token": 177,
                                                            "label": "path[curr_ind - 1]",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "subscript",
                                                    "start_token": 180,
                                                    "end_token": 184,
                                                    "label": "path[0]]",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 180,
                                                            "end_token": 180,
                                                            "label": "path",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "index",
                                                            "start_token": 182,
                                                            "end_token": 183,
                                                            "label": "0]",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "for_statement",
                            "start_token": 194,
                            "end_token": 269,
                            "label": "for next_ver in range(len(graph)):\n        if valid_connection(graph, next_ver, curr_ind, path):\n            # Insert current vertex  into path as next transition\n            path[curr_ind] = next_ver\n            # Validate created path\n            if util_hamilton_cycle(graph, path, curr_ind + 1):\n                return True\n            # Backtrack\n            path[curr_ind] = -1\n    return False",
                            "children": [
                                {
                                    "type": "for_in_clause",
                                    "start_token": 194,
                                    "end_token": 203,
                                    "label": "for next_ver in range(len(graph))",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 195,
                                            "end_token": 195,
                                            "label": "next_ver",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 197,
                                            "end_token": 203,
                                            "label": "range(len(graph))",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 197,
                                                    "end_token": 197,
                                                    "label": "range",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "if_statement",
                                    "start_token": 206,
                                    "end_token": 217,
                                    "label": "if valid_connection(graph, next_ver, curr_ind, path):",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 207,
                                            "end_token": 216,
                                            "label": "valid_connection(graph, next_ver, curr_ind, path)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 207,
                                                    "end_token": 207,
                                                    "label": "valid_connection",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 229,
                                    "end_token": 234,
                                    "label": "path[curr_ind] = next_ver",
                                    "children": [
                                        {
                                            "type": "subscript",
                                            "start_token": 229,
                                            "end_token": 231,
                                            "label": "path[curr_ind",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 229,
                                                    "end_token": 229,
                                                    "label": "path",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 234,
                                            "end_token": 234,
                                            "label": "next_ver",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "if_statement",
                                    "start_token": 241,
                                    "end_token": 255,
                                    "label": "if util_hamilton_cycle(graph, path, curr_ind + 1):\n                return True",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 242,
                                            "end_token": 251,
                                            "label": "util_hamilton_cycle(graph, path, curr_ind + 1)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 242,
                                                    "end_token": 242,
                                                    "label": "util_hamilton_cycle",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "assignment",
                                    "start_token": 260,
                                    "end_token": 266,
                                    "label": "path[curr_ind] = -1",
                                    "children": [
                                        {
                                            "type": "subscript",
                                            "start_token": 260,
                                            "end_token": 262,
                                            "label": "path[curr_ind",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 260,
                                                    "end_token": 260,
                                                    "label": "path",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "negative_number",
                                            "start_token": 265,
                                            "end_token": 266,
                                            "label": "-1",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 268,
                                    "end_token": 269,
                                    "label": "return False",
                                    "children": []
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "util_hamilton_cycle",
            "start_line": 49,
            "end_line": 107
        },
        {
            "type": "function_definition",
            "start_token": 273,
            "end_token": 390,
            "label": "def hamilton_cycle(graph: list[list[int]], start_index: int = 0) -> list[int]:\n    r\"\"\"\n    Wrapper function to call subroutine called util_hamilton_cycle,\n    which will either return array of vertices indicating hamiltonian cycle\n    or an empty list indicating that hamiltonian cycle was not found.\n    Case 1:\n    Following graph consists of 5 edges.\n    If we look closely, we can see that there are multiple Hamiltonian cycles.\n    For example one result is when we iterate like:\n    (0)->(1)->(2)->(4)->(3)->(0)\n\n    (0)---(1)---(2)\n     |   /   \\   |\n     |  /     \\  |\n     | /       \\ |\n     |/         \\|\n    (3)---------(4)\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> hamilton_cycle(graph)\n    [0, 1, 2, 4, 3, 0]\n\n    Case 2:\n    Same Graph as it was in Case 1, changed starting index from default to 3\n\n    (0)---(1)---(2)\n     |   /   \\   |\n     |  /     \\  |\n     | /       \\ |\n     |/         \\|\n    (3)---------(4)\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> hamilton_cycle(graph, 3)\n    [3, 0, 1, 2, 4, 3]\n\n    Case 3:\n    Following Graph is exactly what it was before, but edge 3-4 is removed.\n    Result is that there is no Hamiltonian Cycle anymore.\n\n    (0)---(1)---(2)\n     |   /   \\   |\n     |  /     \\  |\n     | /       \\ |\n     |/         \\|\n    (3)         (4)\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 0],\n    ...          [0, 1, 1, 0, 0]]\n    >>> hamilton_cycle(graph,4)\n    []\n    \"\"\"\n\n    # Initialize path with -1, indicating that we have not visited them yet\n    path = [-1] * (len(graph) + 1)\n    # initialize start and end of path with starting index\n    path[0] = path[-1] = start_index\n    # evaluate and if we find answer return path either return empty array\n    return path if util_hamilton_cycle(graph, path, 1) else []\n",
            "children": [
                {
                    "type": "identifier",
                    "start_token": 274,
                    "end_token": 274,
                    "label": "hamilton_cycle",
                    "children": []
                },
                {
                    "type": "parameters",
                    "start_token": 275,
                    "end_token": 291,
                    "label": "(graph: list[list[int]], start_index: int = 0)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "start_token": 276,
                            "end_token": 284,
                            "label": "graph: list[list[int]]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 276,
                                    "end_token": 276,
                                    "label": "graph",
                                    "children": []
                                },
                                {
                                    "type": "generic_type",
                                    "start_token": 278,
                                    "end_token": 284,
                                    "label": "list[list[int]]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 278,
                                            "end_token": 278,
                                            "label": "list",
                                            "children": []
                                        },
                                        {
                                            "type": "generic_type",
                                            "start_token": 279,
                                            "end_token": 283,
                                            "label": "[list[int]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 280,
                                                    "end_token": 280,
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 282,
                                                    "end_token": 282,
                                                    "label": "int",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_default_parameter",
                            "start_token": 286,
                            "end_token": 290,
                            "label": "start_index: int = 0",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 286,
                                    "end_token": 286,
                                    "label": "start_index",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 288,
                                    "end_token": 288,
                                    "label": "int",
                                    "children": []
                                },
                                {
                                    "type": "integer",
                                    "start_token": 290,
                                    "end_token": 290,
                                    "label": "0",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "generic_type",
                    "start_token": 293,
                    "end_token": 297,
                    "label": "> list[int]",
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 294,
                            "end_token": 294,
                            "label": "list",
                            "children": []
                        },
                        {
                            "type": "identifier",
                            "start_token": 296,
                            "end_token": 296,
                            "label": "int",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "start_token": 299,
                    "end_token": 389,
                    "label": "\n    r\"\"\"\n    Wrapper function to call subroutine called util_hamilton_cycle,\n    which will either return array of vertices indicating hamiltonian cycle\n    or an empty list indicating that hamiltonian cycle was not found.\n    Case 1:\n    Following graph consists of 5 edges.\n    If we look closely, we can see that there are multiple Hamiltonian cycles.\n    For example one result is when we iterate like:\n    (0)->(1)->(2)->(4)->(3)->(0)\n\n    (0)---(1)---(2)\n     |   /   \\   |\n     |  /     \\  |\n     | /       \\ |\n     |/         \\|\n    (3)---------(4)\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> hamilton_cycle(graph)\n    [0, 1, 2, 4, 3, 0]\n\n    Case 2:\n    Same Graph as it was in Case 1, changed starting index from default to 3\n\n    (0)---(1)---(2)\n     |   /   \\   |\n     |  /     \\  |\n     | /       \\ |\n     |/         \\|\n    (3)---------(4)\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> hamilton_cycle(graph, 3)\n    [3, 0, 1, 2, 4, 3]\n\n    Case 3:\n    Following Graph is exactly what it was before, but edge 3-4 is removed.\n    Result is that there is no Hamiltonian Cycle anymore.\n\n    (0)---(1)---(2)\n     |   /   \\   |\n     |  /     \\  |\n     | /       \\ |\n     |/         \\|\n    (3)         (4)\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 0],\n    ...          [0, 1, 1, 0, 0]]\n    >>> hamilton_cycle(graph,4)\n    []\n    \"\"\"\n\n    # Initialize path with -1, indicating that we have not visited them yet\n    path = [-1] * (len(graph) + 1)\n    # initialize start and end of path with starting index\n    path[0] = path[-1] = start_index\n    # evaluate and if we find answer return path either return empty array\n    return path if util_hamilton_cycle(graph, path, 1) else []",
                    "children": [
                        {
                            "type": "comment",
                            "start_token": 300,
                            "end_token": 303,
                            "label": "r\"\"\"\n    Wrapper function to call subroutine called util_hamilton_cycle,\n    which will either return array of vertices indicating hamiltonian cycle\n    or an empty list indicating that hamiltonian cycle was not found.\n    Case 1:\n    Following graph consists of 5 edges.\n    If we look closely, we can see that there are multiple Hamiltonian cycles.\n    For example one result is when we iterate like:\n    (0)->(1)->(2)->(4)->(3)->(0)\n\n    (0)---(1)---(2)\n     |   /   \\   |\n     |  /     \\  |\n     | /       \\ |\n     |/         \\|\n    (3)---------(4)\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> hamilton_cycle(graph)\n    [0, 1, 2, 4, 3, 0]\n\n    Case 2:\n    Same Graph as it was in Case 1, changed starting index from default to 3\n\n    (0)---(1)---(2)\n     |   /   \\   |\n     |  /     \\  |\n     | /       \\ |\n     |/         \\|\n    (3)---------(4)\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 1],\n    ...          [0, 1, 1, 1, 0]]\n    >>> hamilton_cycle(graph, 3)\n    [3, 0, 1, 2, 4, 3]\n\n    Case 3:\n    Following Graph is exactly what it was before, but edge 3-4 is removed.\n    Result is that there is no Hamiltonian Cycle anymore.\n\n    (0)---(1)---(2)\n     |   /   \\   |\n     |  /     \\  |\n     | /       \\ |\n     |/         \\|\n    (3)         (4)\n    >>> graph = [[0, 1, 0, 1, 0],\n    ...          [1, 0, 1, 1, 1],\n    ...          [0, 1, 0, 0, 1],\n    ...          [1, 1, 0, 0, 0],\n    ...          [0, 1, 1, 0, 0]]\n    >>> hamilton_cycle(graph,4)\n    []\n    \"\"\"",
                            "children": []
                        },
                        {
                            "type": "assignment",
                            "start_token": 322,
                            "end_token": 336,
                            "label": "path = [-1] * (len(graph) + 1)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 322,
                                    "end_token": 322,
                                    "label": "path",
                                    "children": []
                                },
                                {
                                    "type": "binary_operator",
                                    "start_token": 324,
                                    "end_token": 336,
                                    "label": "[-1] * (len(graph) + 1)",
                                    "children": [
                                        {
                                            "type": "list",
                                            "start_token": 324,
                                            "end_token": 327,
                                            "label": "[-1]",
                                            "children": [
                                                {
                                                    "type": "integer",
                                                    "start_token": 326,
                                                    "end_token": 326,
                                                    "label": "1",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "parenthesized_expression",
                                            "start_token": 329,
                                            "end_token": 336,
                                            "label": "(len(graph) + 1)",
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "start_token": 330,
                                                    "end_token": 335,
                                                    "label": "len(graph) + 1",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 330,
                                                            "end_token": 333,
                                                            "label": "len(graph)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 330,
                                                                    "end_token": 330,
                                                                    "label": "len",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 331,
                                                                    "end_token": 332,
                                                                    "label": "(graph",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 332,
                                                                            "end_token": 332,
                                                                            "label": "graph",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "start_token": 335,
                                                            "end_token": 335,
                                                            "label": "1",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "assignment",
                            "start_token": 349,
                            "end_token": 360,
                            "label": "path[0] = path[-1] = start_index",
                            "children": [
                                {
                                    "type": "subscript",
                                    "start_token": 349,
                                    "end_token": 351,
                                    "label": "path[0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 349,
                                            "end_token": 349,
                                            "label": "path",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "start_token": 351,
                                            "end_token": 351,
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "subscript",
                                    "start_token": 354,
                                    "end_token": 358,
                                    "label": "path[-1]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 354,
                                            "end_token": 354,
                                            "label": "path",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "start_token": 356,
                                            "end_token": 356,
                                            "label": "-",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 360,
                                    "end_token": 360,
                                    "label": "start_index",
                                    "children": []
                                }
                            ]
                        },
                        {
                            "type": "return_statement",
                            "start_token": 376,
                            "end_token": 389,
                            "label": "return path if util_hamilton_cycle(graph, path, 1) else []",
                            "children": [
                                {
                                    "type": "conditional_expression",
                                    "start_token": 377,
                                    "end_token": 389,
                                    "label": "path if util_hamilton_cycle(graph, path, 1) else []",
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 379,
                                            "end_token": 386,
                                            "label": "util_hamilton_cycle(graph, path, 1)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 379,
                                                    "end_token": 379,
                                                    "label": "util_hamilton_cycle",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 380,
                                                    "end_token": 385,
                                                    "label": "(graph, path, 1",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 381,
                                                            "end_token": 381,
                                                            "label": "graph",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 383,
                                                            "end_token": 383,
                                                            "label": "path",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "start_token": 385,
                                                            "end_token": 385,
                                                            "label": "1",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 377,
                                            "end_token": 377,
                                            "label": "path",
                                            "children": []
                                        },
                                        {
                                            "type": "list",
                                            "start_token": 388,
                                            "end_token": 389,
                                            "label": "[]",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "name": "hamilton_cycle",
            "start_line": 110,
            "end_line": 176
        }
    ]
}