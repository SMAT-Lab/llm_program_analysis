{
    "type": "module",
    "start_token": 0,
    "end_token": 86,
    "children": [
        {
            "type": "import_statement",
            "start_token": 0,
            "end_token": 1,
            "children": [
                {
                    "type": "identifier",
                    "start_token": 1,
                    "end_token": 1,
                    "children": [],
                    "label": "logging"
                }
            ],
            "label": "import logging"
        },
        {
            "type": "import_statement",
            "start_token": 3,
            "end_token": 4,
            "children": [
                {
                    "type": "identifier",
                    "start_token": 4,
                    "end_token": 4,
                    "children": [],
                    "label": "os"
                }
            ],
            "label": "import os"
        },
        {
            "type": "import_statement",
            "start_token": 6,
            "end_token": 7,
            "children": [
                {
                    "type": "identifier",
                    "start_token": 7,
                    "end_token": 7,
                    "children": [],
                    "label": "uuid"
                }
            ],
            "label": "import uuid"
        },
        {
            "type": "import_statement",
            "start_token": 10,
            "end_token": 11,
            "children": [
                {
                    "type": "identifier",
                    "start_token": 11,
                    "end_token": 11,
                    "children": [],
                    "label": "fastapi"
                }
            ],
            "label": "import fastapi"
        },
        {
            "type": "import_from_statement",
            "start_token": 13,
            "end_token": 18,
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 14,
                    "end_token": 16,
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 14,
                            "end_token": 14,
                            "children": [],
                            "label": "google"
                        },
                        {
                            "type": "identifier",
                            "start_token": 16,
                            "end_token": 16,
                            "children": [],
                            "label": "cloud"
                        }
                    ],
                    "label": "google.cloud"
                },
                {
                    "type": "identifier",
                    "start_token": 18,
                    "end_token": 18,
                    "children": [],
                    "label": "storage"
                }
            ],
            "label": "from google.cloud import storage"
        },
        {
            "type": "import_statement",
            "start_token": 21,
            "end_token": 30,
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 22,
                    "end_token": 30,
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 22,
                            "end_token": 22,
                            "children": [],
                            "label": "backend"
                        },
                        {
                            "type": "identifier",
                            "start_token": 24,
                            "end_token": 24,
                            "children": [],
                            "label": "server"
                        },
                        {
                            "type": "identifier",
                            "start_token": 26,
                            "end_token": 26,
                            "children": [],
                            "label": "v2"
                        },
                        {
                            "type": "identifier",
                            "start_token": 28,
                            "end_token": 28,
                            "children": [],
                            "label": "store"
                        },
                        {
                            "type": "identifier",
                            "start_token": 30,
                            "end_token": 30,
                            "children": [],
                            "label": "exceptions"
                        }
                    ],
                    "label": "backend.server.v2.store.exceptions"
                }
            ],
            "label": "import backend.server.v2.store.exceptions"
        },
        {
            "type": "import_from_statement",
            "start_token": 32,
            "end_token": 39,
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 33,
                    "end_token": 37,
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 33,
                            "end_token": 33,
                            "children": [],
                            "label": "backend"
                        },
                        {
                            "type": "identifier",
                            "start_token": 35,
                            "end_token": 35,
                            "children": [],
                            "label": "util"
                        },
                        {
                            "type": "identifier",
                            "start_token": 37,
                            "end_token": 37,
                            "children": [],
                            "label": "settings"
                        }
                    ],
                    "label": "backend.util.settings"
                },
                {
                    "type": "identifier",
                    "start_token": 39,
                    "end_token": 39,
                    "children": [],
                    "label": "Settings"
                }
            ],
            "label": "from backend.util.settings import Settings"
        },
        {
            "type": "assignment",
            "start_token": 42,
            "end_token": 49,
            "children": [
                {
                    "type": "identifier",
                    "start_token": 42,
                    "end_token": 42,
                    "children": [],
                    "label": "logger"
                },
                {
                    "type": "call",
                    "start_token": 44,
                    "end_token": 49,
                    "children": [
                        {
                            "type": "attribute",
                            "start_token": 44,
                            "end_token": 46,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 44,
                                    "end_token": 44,
                                    "children": [],
                                    "label": "logging"
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 46,
                                    "end_token": 46,
                                    "children": [],
                                    "label": "getLogger"
                                }
                            ],
                            "label": "logging.getLogger"
                        },
                        {
                            "type": "argument_list",
                            "start_token": 47,
                            "end_token": 49,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 48,
                                    "end_token": 48,
                                    "children": [],
                                    "label": "__name__"
                                }
                            ],
                            "label": "(__name__)"
                        }
                    ],
                    "label": "logging.getLogger(__name__)"
                }
            ],
            "label": "logger = logging.getLogger(__name__)"
        },
        {
            "type": "assignment",
            "start_token": 52,
            "end_token": 62,
            "children": [
                {
                    "type": "identifier",
                    "start_token": 52,
                    "end_token": 52,
                    "children": [],
                    "label": "ALLOWED_IMAGE_TYPES"
                },
                {
                    "type": "dictionary",
                    "start_token": 54,
                    "end_token": 62,
                    "children": [
                        {
                            "type": "string",
                            "start_token": 55,
                            "end_token": 55,
                            "children": [],
                            "label": "\"image/jpeg\""
                        },
                        {
                            "type": "string",
                            "start_token": 57,
                            "end_token": 57,
                            "children": [],
                            "label": "\"image/png\""
                        },
                        {
                            "type": "string",
                            "start_token": 59,
                            "end_token": 59,
                            "children": [],
                            "label": "\"image/gif\""
                        },
                        {
                            "type": "string",
                            "start_token": 61,
                            "end_token": 61,
                            "children": [],
                            "label": "\"image/webp\""
                        }
                    ],
                    "label": "{\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}"
                }
            ],
            "label": "ALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}"
        },
        {
            "type": "assignment",
            "start_token": 64,
            "end_token": 70,
            "children": [
                {
                    "type": "identifier",
                    "start_token": 64,
                    "end_token": 64,
                    "children": [],
                    "label": "ALLOWED_VIDEO_TYPES"
                },
                {
                    "type": "dictionary",
                    "start_token": 66,
                    "end_token": 70,
                    "children": [
                        {
                            "type": "string",
                            "start_token": 67,
                            "end_token": 67,
                            "children": [],
                            "label": "\"video/mp4\""
                        },
                        {
                            "type": "string",
                            "start_token": 69,
                            "end_token": 69,
                            "children": [],
                            "label": "\"video/webm\""
                        }
                    ],
                    "label": "{\"video/mp4\", \"video/webm\"}"
                }
            ],
            "label": "ALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\"}"
        },
        {
            "type": "assignment",
            "start_token": 72,
            "end_token": 82,
            "children": [
                {
                    "type": "identifier",
                    "start_token": 72,
                    "end_token": 72,
                    "children": [],
                    "label": "MAX_FILE_SIZE"
                },
                {
                    "type": "binary_operator",
                    "start_token": 74,
                    "end_token": 78,
                    "children": [
                        {
                            "type": "integer",
                            "start_token": 74,
                            "end_token": 74,
                            "children": [],
                            "label": "50"
                        },
                        {
                            "type": "integer",
                            "start_token": 76,
                            "end_token": 76,
                            "children": [],
                            "label": "1024"
                        },
                        {
                            "type": "integer",
                            "start_token": 78,
                            "end_token": 78,
                            "children": [],
                            "label": "1024"
                        }
                    ],
                    "label": "50 * 1024 * 1024"
                },
                {
                    "type": "comment",
                    "start_token": 79,
                    "end_token": 81,
                    "children": [],
                    "label": "# 50MB"
                }
            ],
            "label": "MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB\n"
        },
        {
            "type": "function_placeholder",
            "name": "check_media_exists",
            "start_line": 18,
            "end_line": 51,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 138,
                    "children": [
                        {
                            "type": "decorated_definition",
                            "start_token": 0,
                            "end_token": 137,
                            "children": [
                                {
                                    "type": "decorator",
                                    "start_token": 0,
                                    "end_token": 0,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 0,
                                            "end_token": 0,
                                            "label": "async"
                                        }
                                    ],
                                    "label": "async"
                                },
                                {
                                    "type": "function_definition",
                                    "start_token": 1,
                                    "end_token": 137,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 2,
                                            "end_token": 2,
                                            "label": "check_media_exists"
                                        },
                                        {
                                            "type": "parameters",
                                            "start_token": 3,
                                            "end_token": 11,
                                            "children": [
                                                {
                                                    "type": "typed_parameter",
                                                    "start_token": 4,
                                                    "end_token": 6,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 4,
                                                            "end_token": 4,
                                                            "label": "user_id"
                                                        },
                                                        {
                                                            "type": "type",
                                                            "start_token": 6,
                                                            "end_token": 6,
                                                            "label": "str"
                                                        }
                                                    ],
                                                    "label": "user_id: str"
                                                },
                                                {
                                                    "type": "typed_parameter",
                                                    "start_token": 8,
                                                    "end_token": 10,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 8,
                                                            "end_token": 8,
                                                            "label": "filename"
                                                        },
                                                        {
                                                            "type": "type",
                                                            "start_token": 10,
                                                            "end_token": 10,
                                                            "label": "str"
                                                        }
                                                    ],
                                                    "label": "filename: str"
                                                }
                                            ],
                                            "label": "(user_id: str, filename: str)"
                                        },
                                        {
                                            "type": "union_type",
                                            "start_token": 13,
                                            "end_token": 16,
                                            "children": [
                                                {
                                                    "type": "type",
                                                    "start_token": 14,
                                                    "end_token": 14,
                                                    "label": "str"
                                                },
                                                {
                                                    "type": "none",
                                                    "start_token": 16,
                                                    "end_token": 16,
                                                    "label": "None"
                                                }
                                            ],
                                            "label": "> str | None"
                                        },
                                        {
                                            "type": "string",
                                            "start_token": 19,
                                            "end_token": 21,
                                            "children": [
                                                {
                                                    "type": "string_content",
                                                    "start_token": 20,
                                                    "end_token": 20,
                                                    "label": "\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \""
                                                }
                                            ],
                                            "label": "\"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\""
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 23,
                                            "end_token": 137,
                                            "children": [
                                                {
                                                    "type": "try_statement",
                                                    "start_token": 23,
                                                    "end_token": 121,
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "start_token": 24,
                                                            "end_token": 119,
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 26,
                                                                    "end_token": 30,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 26,
                                                                            "end_token": 26,
                                                                            "label": "settings"
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 28,
                                                                            "end_token": 30,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 28,
                                                                                    "end_token": 28,
                                                                                    "label": "Settings"
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "start_token": 29,
                                                                                    "end_token": 30,
                                                                                    "label": "()"
                                                                                }
                                                                            ],
                                                                            "label": "Settings()"
                                                                        }
                                                                    ],
                                                                    "label": "settings = Settings()"
                                                                },
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 32,
                                                                    "end_token": 38,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 32,
                                                                            "end_token": 32,
                                                                            "label": "storage_client"
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 34,
                                                                            "end_token": 38,
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 34,
                                                                                    "end_token": 36,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 34,
                                                                                            "end_token": 34,
                                                                                            "label": "storage"
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 36,
                                                                                            "end_token": 36,
                                                                                            "label": "Client"
                                                                                        }
                                                                                    ],
                                                                                    "label": "storage.Client"
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "start_token": 37,
                                                                                    "end_token": 38,
                                                                                    "label": "()"
                                                                                }
                                                                            ],
                                                                            "label": "storage.Client()"
                                                                        }
                                                                    ],
                                                                    "label": "storage_client = storage.Client()"
                                                                },
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 40,
                                                                    "end_token": 51,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 40,
                                                                            "end_token": 40,
                                                                            "label": "bucket"
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 42,
                                                                            "end_token": 51,
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 42,
                                                                                    "end_token": 44,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 42,
                                                                                            "end_token": 42,
                                                                                            "label": "storage_client"
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 44,
                                                                                            "end_token": 44,
                                                                                            "label": "bucket"
                                                                                        }
                                                                                    ],
                                                                                    "label": "storage_client.bucket"
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "start_token": 45,
                                                                                    "end_token": 51,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "start_token": 46,
                                                                                            "end_token": 50,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "start_token": 46,
                                                                                                    "end_token": 48,
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 46,
                                                                                                            "end_token": 46,
                                                                                                            "label": "settings"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "start_token": 48,
                                                                                                            "end_token": 48,
                                                                                                            "label": "config"
                                                                                                        }
                                                                                                    ],
                                                                                                    "label": "settings.config"
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "start_token": 50,
                                                                                                    "end_token": 50,
                                                                                                    "label": "media_gcs_bucket_name"
                                                                                                }
                                                                                            ],
                                                                                            "label": "settings.config.media_gcs_bucket_name"
                                                                                        }
                                                                                    ],
                                                                                    "label": "(settings.config.media_gcs_bucket_name)"
                                                                                }
                                                                            ],
                                                                            "label": "storage_client.bucket(settings.config.media_gcs_bucket_name)"
                                                                        }
                                                                    ],
                                                                    "label": "bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)"
                                                                },
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 58,
                                                                    "end_token": 61,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 58,
                                                                            "end_token": 58,
                                                                            "label": "image_path"
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "start_token": 60,
                                                                            "end_token": 61,
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "start_token": 60,
                                                                                    "end_token": 60,
                                                                                    "label": "f"
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "start_token": 61,
                                                                                    "end_token": 61,
                                                                                    "label": "\"users/{user_id}/images/{filename}\""
                                                                                }
                                                                            ],
                                                                            "label": "f\"users/{user_id}/images/{filename}\""
                                                                        }
                                                                    ],
                                                                    "label": "image_path = f\"users/{user_id}/images/{filename}\""
                                                                },
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 63,
                                                                    "end_token": 70,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 63,
                                                                            "end_token": 63,
                                                                            "label": "image_blob"
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 65,
                                                                            "end_token": 70,
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 65,
                                                                                    "end_token": 67,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 65,
                                                                                            "end_token": 65,
                                                                                            "label": "bucket"
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 67,
                                                                                            "end_token": 67,
                                                                                            "label": "blob"
                                                                                        }
                                                                                    ],
                                                                                    "label": "bucket.blob"
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "start_token": 68,
                                                                                    "end_token": 70,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 69,
                                                                                            "end_token": 69,
                                                                                            "label": "image_path"
                                                                                        }
                                                                                    ],
                                                                                    "label": "(image_path)"
                                                                                }
                                                                            ],
                                                                            "label": "bucket.blob(image_path)"
                                                                        }
                                                                    ],
                                                                    "label": "image_blob = bucket.blob(image_path)"
                                                                },
                                                                {
                                                                    "type": "conditional_expression",
                                                                    "start_token": 72,
                                                                    "end_token": 84,
                                                                    "children": [
                                                                        {
                                                                            "type": "boolean_operator",
                                                                            "start_token": 72,
                                                                            "end_token": 78,
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 73,
                                                                                    "end_token": 75,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 73,
                                                                                            "end_token": 73,
                                                                                            "label": "image_blob"
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 75,
                                                                                            "end_token": 75,
                                                                                            "label": "exists"
                                                                                        }
                                                                                    ],
                                                                                    "label": "image_blob.exists"
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "start_token": 76,
                                                                                    "end_token": 77,
                                                                                    "label": "()"
                                                                                }
                                                                            ],
                                                                            "label": "if image_blob.exists():"
                                                                        },
                                                                        {
                                                                            "type": "return_statement",
                                                                            "start_token": 80,
                                                                            "end_token": 83,
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 81,
                                                                                    "end_token": 82,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 81,
                                                                                            "end_token": 81,
                                                                                            "label": "image_blob"
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 82,
                                                                                            "end_token": 82,
                                                                                            "label": "."
                                                                                        }
                                                                                    ],
                                                                                    "label": "image_blob."
                                                                                }
                                                                            ],
                                                                            "label": "return image_blob.public_url"
                                                                        }
                                                                    ],
                                                                    "label": "if image_blob.exists():\n            return image_blob.public_url\n"
                                                                },
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 90,
                                                                    "end_token": 93,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 90,
                                                                            "end_token": 90,
                                                                            "label": "video_path"
                                                                        },
                                                                        {
                                                                            "type": "interpolation",
                                                                            "start_token": 92,
                                                                            "end_token": 93,
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "start_token": 92,
                                                                                    "end_token": 92,
                                                                                    "label": "f"
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "start_token": 93,
                                                                                    "end_token": 93,
                                                                                    "label": "\"users/{user_id}/videos/{filename}\""
                                                                                }
                                                                            ],
                                                                            "label": "f\"users/{user_id}/videos/{filename}\""
                                                                        }
                                                                    ],
                                                                    "label": "video_path = f\"users/{user_id}/videos/{filename}\""
                                                                },
                                                                {
                                                                    "type": "assignment",
                                                                    "start_token": 96,
                                                                    "end_token": 103,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 96,
                                                                            "end_token": 96,
                                                                            "label": "video_blob"
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 98,
                                                                            "end_token": 103,
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 98,
                                                                                    "end_token": 100,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 98,
                                                                                            "end_token": 98,
                                                                                            "label": "bucket"
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 100,
                                                                                            "end_token": 100,
                                                                                            "label": "blob"
                                                                                        }
                                                                                    ],
                                                                                    "label": "bucket.blob"
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "start_token": 101,
                                                                                    "end_token": 103,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 102,
                                                                                            "end_token": 102,
                                                                                            "label": "video_path"
                                                                                        }
                                                                                    ],
                                                                                    "label": "(video_path)"
                                                                                }
                                                                            ],
                                                                            "label": "bucket.blob(video_path)"
                                                                        }
                                                                    ],
                                                                    "label": "video_blob = bucket.blob(video_path)"
                                                                },
                                                                {
                                                                    "type": "conditional_expression",
                                                                    "start_token": 105,
                                                                    "end_token": 117,
                                                                    "children": [
                                                                        {
                                                                            "type": "boolean_operator",
                                                                            "start_token": 105,
                                                                            "end_token": 111,
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 106,
                                                                                    "end_token": 108,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 106,
                                                                                            "end_token": 106,
                                                                                            "label": "video_blob"
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 108,
                                                                                            "end_token": 108,
                                                                                            "label": "exists"
                                                                                        }
                                                                                    ],
                                                                                    "label": "video_blob.exists"
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "start_token": 109,
                                                                                    "end_token": 110,
                                                                                    "label": "()"
                                                                                }
                                                                            ],
                                                                            "label": "if video_blob.exists():"
                                                                        },
                                                                        {
                                                                            "type": "return_statement",
                                                                            "start_token": 113,
                                                                            "end_token": 116,
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 114,
                                                                                    "end_token": 115,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 114,
                                                                                            "end_token": 114,
                                                                                            "label": "video_blob"
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 115,
                                                                                            "end_token": 115,
                                                                                            "label": "."
                                                                                        }
                                                                                    ],
                                                                                    "label": "video_blob."
                                                                                }
                                                                            ],
                                                                            "label": "return video_blob.public_url"
                                                                        }
                                                                    ],
                                                                    "label": "if video_blob.exists():\n            return video_blob.public_url\n"
                                                                },
                                                                {
                                                                    "type": "return_statement",
                                                                    "start_token": 119,
                                                                    "end_token": 120,
                                                                    "children": [
                                                                        {
                                                                            "type": "none",
                                                                            "start_token": 120,
                                                                            "end_token": 120,
                                                                            "label": "None"
                                                                        }
                                                                    ],
                                                                    "label": "return None"
                                                                }
                                                            ],
                                                            "label": ":\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return"
                                                        },
                                                        {
                                                            "type": "except_clause",
                                                            "start_token": 122,
                                                            "end_token": 137,
                                                            "children": [
                                                                {
                                                                    "type": "as_pattern",
                                                                    "start_token": 123,
                                                                    "end_token": 125,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 123,
                                                                            "end_token": 123,
                                                                            "label": "Exception"
                                                                        },
                                                                        {
                                                                            "type": "as_pattern_target",
                                                                            "start_token": 125,
                                                                            "end_token": 125,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 125,
                                                                                    "end_token": 125,
                                                                                    "label": "e"
                                                                                }
                                                                            ],
                                                                            "label": "e"
                                                                        }
                                                                    ],
                                                                    "label": "Exception as e"
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 126,
                                                                    "end_token": 137,
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "start_token": 128,
                                                                            "end_token": 134,
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "start_token": 128,
                                                                                    "end_token": 134,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "attribute",
                                                                                            "start_token": 128,
                                                                                            "end_token": 130,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "start_token": 128,
                                                                                                    "end_token": 128,
                                                                                                    "label": "logger"
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "start_token": 130,
                                                                                                    "end_token": 130,
                                                                                                    "label": "error"
                                                                                                }
                                                                                            ],
                                                                                            "label": "logger.error"
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "start_token": 131,
                                                                                            "end_token": 134,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "interpolation",
                                                                                                    "start_token": 132,
                                                                                                    "end_token": 133,
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string_start",
                                                                                                            "start_token": 132,
                                                                                                            "end_token": 132,
                                                                                                            "label": "f"
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "string_content",
                                                                                                            "start_token": 133,
                                                                                                            "end_token": 133,
                                                                                                            "label": "\"Error checking if media file exists: {str(e)}\""
                                                                                                        }
                                                                                                    ],
                                                                                                    "label": "f\"Error checking if media file exists: {str(e)}\""
                                                                                                }
                                                                                            ],
                                                                                            "label": "(f\"Error checking if media file exists: {str(e)}\")"
                                                                                        }
                                                                                    ],
                                                                                    "label": "logger.error(f\"Error checking if media file exists: {str(e)}\")"
                                                                                }
                                                                            ],
                                                                            "label": "logger.error(f\"Error checking if media file exists: {str(e)}\")"
                                                                        },
                                                                        {
                                                                            "type": "return_statement",
                                                                            "start_token": 136,
                                                                            "end_token": 137,
                                                                            "children": [
                                                                                {
                                                                                    "type": "none",
                                                                                    "start_token": 137,
                                                                                    "end_token": 137,
                                                                                    "label": "None"
                                                                                }
                                                                            ],
                                                                            "label": "return None"
                                                                        }
                                                                    ],
                                                                    "label": ":\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None"
                                                                }
                                                            ],
                                                            "label": "except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None"
                                                        }
                                                    ],
                                                    "label": "try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n"
                                                }
                                            ],
                                            "label": "try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None"
                                        }
                                    ],
                                    "label": "def check_media_exists(user_id: str, filename: str) -> str | None:\n    \"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"\n    try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None"
                                }
                            ],
                            "label": "async def check_media_exists(user_id: str, filename: str) -> str | None:\n    \"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"\n    try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None"
                        }
                    ],
                    "label": "async def check_media_exists(user_id: str, filename: str) -> str | None:\n    \"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"\n    try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None\n"
                }
            ]
        },
        {
            "type": "function_placeholder",
            "name": "upload_media",
            "start_line": 54,
            "end_line": 198,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 943,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 940,
                            "children": [
                                {
                                    "type": "parameters",
                                    "start_token": 3,
                                    "end_token": 21,
                                    "children": [
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 5,
                                            "end_token": 7,
                                            "label": "user_id: str"
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 9,
                                            "end_token": 13,
                                            "label": "file: fastapi.UploadFile"
                                        },
                                        {
                                            "type": "typed_default_parameter",
                                            "start_token": 15,
                                            "end_token": 19,
                                            "label": "use_file_name: bool = False"
                                        }
                                    ],
                                    "label": "(\n    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False\n)"
                                },
                                {
                                    "type": "block",
                                    "start_token": 26,
                                    "end_token": 940,
                                    "children": [
                                        {
                                            "type": "comment",
                                            "start_token": 28,
                                            "end_token": 35,
                                            "label": "# Get file content for deeper validation\n"
                                        },
                                        {
                                            "type": "try_statement",
                                            "start_token": 36,
                                            "end_token": 101,
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 38,
                                                    "end_token": 67,
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 39,
                                                            "end_token": 47,
                                                            "label": "content = await file.read(1024)"
                                                        },
                                                        {
                                                            "type": "await",
                                                            "start_token": 56,
                                                            "end_token": 62,
                                                            "label": "await file.seek(0)"
                                                        }
                                                    ],
                                                    "label": "\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n"
                                                },
                                                {
                                                    "type": "except_clause",
                                                    "start_token": 68,
                                                    "end_token": 100,
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "start_token": 72,
                                                            "end_token": 100,
                                                            "children": [
                                                                {
                                                                    "type": "expression_statement",
                                                                    "start_token": 74,
                                                                    "end_token": 80,
                                                                    "label": "logger.error(f\"Error reading file content: {str(e)}\")"
                                                                },
                                                                {
                                                                    "type": "raise_statement",
                                                                    "start_token": 82,
                                                                    "end_token": 100,
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 83,
                                                                            "end_token": 100,
                                                                            "children": [
                                                                                {
                                                                                    "type": "dotted_name",
                                                                                    "start_token": 83,
                                                                                    "end_token": 93,
                                                                                    "label": "backend.server.v2.store.exceptions.FileReadError"
                                                                                }
                                                                            ],
                                                                            "label": "backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e"
                                                                        }
                                                                    ],
                                                                    "label": "raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e"
                                                                }
                                                            ],
                                                            "label": ":\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e"
                                                        }
                                                    ],
                                                    "label": "except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e"
                                                }
                                            ],
                                            "label": "try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n"
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 111,
                                            "end_token": 319,
                                            "children": [
                                                {
                                                    "type": "if_clause",
                                                    "start_token": 111,
                                                    "end_token": 117,
                                                    "children": [
                                                        {
                                                            "type": "boolean_operator",
                                                            "start_token": 111,
                                                            "end_token": 116,
                                                            "label": "if file.content_type in ALLOWED_IMAGE_TYPES"
                                                        }
                                                    ],
                                                    "label": "if file.content_type in ALLOWED_IMAGE_TYPES:"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 118,
                                                    "end_token": 319,
                                                    "children": [
                                                        {
                                                            "type": "comment",
                                                            "start_token": 119,
                                                            "end_token": 124,
                                                            "label": "# Check image file signatures\n"
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 125,
                                                            "end_token": 162,
                                                            "children": [
                                                                {
                                                                    "type": "if_clause",
                                                                    "start_token": 125,
                                                                    "end_token": 132,
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 126,
                                                                            "end_token": 132,
                                                                            "label": "content.startswith(b\"\\xFF\\xD8\\xFF\")"
                                                                        }
                                                                    ],
                                                                    "label": "if content.startswith(b\"\\xFF\\xD8\\xFF\")"
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 133,
                                                                    "end_token": 162,
                                                                    "children": [
                                                                        {
                                                                            "type": "if_statement",
                                                                            "start_token": 137,
                                                                            "end_token": 162,
                                                                            "children": [
                                                                                {
                                                                                    "type": "if_clause",
                                                                                    "start_token": 137,
                                                                                    "end_token": 144,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "comparison_operator",
                                                                                            "start_token": 141,
                                                                                            "end_token": 143,
                                                                                            "label": "!= \"image/jpeg\""
                                                                                        }
                                                                                    ],
                                                                                    "label": "if file.content_type != \"image/jpeg\":"
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "start_token": 145,
                                                                                    "end_token": 162,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "raise_statement",
                                                                                            "start_token": 146,
                                                                                            "end_token": 162,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "start_token": 147,
                                                                                                    "end_token": 162,
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "dotted_name",
                                                                                                            "start_token": 147,
                                                                                                            "end_token": 157,
                                                                                                            "label": "backend.server.v2.store.exceptions.InvalidFileTypeError"
                                                                                                        }
                                                                                                    ],
                                                                                                    "label": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                                                                }
                                                                                            ],
                                                                                            "label": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                                                        }
                                                                                    ],
                                                                                    "label": "\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                                                }
                                                                            ],
                                                                            "label": "if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                                        }
                                                                    ],
                                                                    "label": ":  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                                }
                                                            ],
                                                            "label": "if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "start_token": 164,
                                                            "end_token": 201,
                                                            "label": "elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "start_token": 203,
                                                            "end_token": 248,
                                                            "label": "elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "start_token": 250,
                                                            "end_token": 298,
                                                            "label": "elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                        },
                                                        {
                                                            "type": "else_clause",
                                                            "start_token": 300,
                                                            "end_token": 319,
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 302,
                                                                    "end_token": 319,
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "start_token": 303,
                                                                            "end_token": 319,
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "start_token": 303,
                                                                                    "end_token": 319,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "dotted_name",
                                                                                            "start_token": 303,
                                                                                            "end_token": 313,
                                                                                            "label": "raise backend.server.v2.store.exceptions."
                                                                                        }
                                                                                    ],
                                                                                    "label": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )"
                                                                                }
                                                                            ],
                                                                            "label": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )"
                                                                        }
                                                                    ],
                                                                    "label": "\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )"
                                                                }
                                                            ],
                                                            "label": "else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )"
                                                        }
                                                    ],
                                                    "label": "\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )"
                                                }
                                            ],
                                            "label": "if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )"
                                        },
                                        {
                                            "type": "elif_clause",
                                            "start_token": 322,
                                            "end_token": 446,
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 328,
                                                    "end_token": 446,
                                                    "children": [
                                                        {
                                                            "type": "comment",
                                                            "start_token": 330,
                                                            "end_token": 334,
                                                            "label": "# Check video file signatures"
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 336,
                                                            "end_token": 386,
                                                            "children": [
                                                                {
                                                                    "type": "if_clause",
                                                                    "start_token": 336,
                                                                    "end_token": 356,
                                                                    "children": [
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "start_token": 338,
                                                                            "end_token": 343,
                                                                            "label": ".startswith(b\"\\x00\\x00\\x00\")"
                                                                        },
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "start_token": 347,
                                                                            "end_token": 355,
                                                                            "label": "[4:8] == b\"ftyp\""
                                                                        }
                                                                    ],
                                                                    "label": "if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\")"
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 357,
                                                                    "end_token": 386,
                                                                    "children": [
                                                                        {
                                                                            "type": "if_statement",
                                                                            "start_token": 361,
                                                                            "end_token": 386,
                                                                            "children": [
                                                                                {
                                                                                    "type": "if_clause",
                                                                                    "start_token": 361,
                                                                                    "end_token": 368,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "comparison_operator",
                                                                                            "start_token": 365,
                                                                                            "end_token": 367,
                                                                                            "label": "!= \"video/mp4\""
                                                                                        }
                                                                                    ],
                                                                                    "label": "if file.content_type != \"video/mp4\":"
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "start_token": 369,
                                                                                    "end_token": 386,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "raise_statement",
                                                                                            "start_token": 370,
                                                                                            "end_token": 386,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "start_token": 371,
                                                                                                    "end_token": 386,
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "dotted_name",
                                                                                                            "start_token": 371,
                                                                                                            "end_token": 381,
                                                                                                            "label": "backend.server.v2.store.exceptions.InvalidFileTypeError"
                                                                                                        }
                                                                                                    ],
                                                                                                    "label": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                                                                }
                                                                                            ],
                                                                                            "label": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                                                        }
                                                                                    ],
                                                                                    "label": "\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                                                }
                                                                            ],
                                                                            "label": "if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                                        }
                                                                    ],
                                                                    "label": ":  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                                }
                                                            ],
                                                            "label": "if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "start_token": 388,
                                                            "end_token": 425,
                                                            "label": "elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )"
                                                        },
                                                        {
                                                            "type": "else_clause",
                                                            "start_token": 427,
                                                            "end_token": 446,
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 429,
                                                                    "end_token": 446,
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "start_token": 430,
                                                                            "end_token": 446,
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "start_token": 431,
                                                                                    "end_token": 446,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "dotted_name",
                                                                                            "start_token": 431,
                                                                                            "end_token": 441,
                                                                                            "label": "backend.server.v2.store.exceptions.InvalidFileTypeError"
                                                                                        }
                                                                                    ],
                                                                                    "label": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )"
                                                                                }
                                                                            ],
                                                                            "label": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )"
                                                                        }
                                                                    ],
                                                                    "label": "\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )"
                                                                }
                                                            ],
                                                            "label": "else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )"
                                                        }
                                                    ],
                                                    "label": ":\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )"
                                                }
                                            ],
                                            "label": "elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )"
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 449,
                                            "end_token": 453,
                                            "label": "settings = Settings()"
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 467,
                                            "end_token": 499,
                                            "children": [
                                                {
                                                    "type": "if_clause",
                                                    "start_token": 467,
                                                    "end_token": 474,
                                                    "children": [
                                                        {
                                                            "type": "not_operator",
                                                            "start_token": 468,
                                                            "end_token": 474,
                                                            "label": "not settings.config.media_gcs_bucket_name:"
                                                        }
                                                    ],
                                                    "label": "if not settings.config.media_gcs_bucket_name:"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 475,
                                                    "end_token": 499,
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "start_token": 476,
                                                            "end_token": 481,
                                                            "label": "logger.error(\"Missing GCS bucket name setting\")"
                                                        },
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 483,
                                                            "end_token": 499,
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 484,
                                                                    "end_token": 499,
                                                                    "children": [
                                                                        {
                                                                            "type": "dotted_name",
                                                                            "start_token": 484,
                                                                            "end_token": 494,
                                                                            "label": "backend.server.v2.store.exceptions.StorageConfigError"
                                                                        }
                                                                    ],
                                                                    "label": "backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )"
                                                                }
                                                            ],
                                                            "label": "raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )"
                                                        }
                                                    ],
                                                    "label": "\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )"
                                                }
                                            ],
                                            "label": "if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )"
                                        },
                                        {
                                            "type": "try_statement",
                                            "start_token": 502,
                                            "end_token": 942,
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "start_token": 504,
                                                    "end_token": 444,
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 510,
                                                            "end_token": 514,
                                                            "label": "content_type = file.content_type"
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 516,
                                                            "end_token": 525,
                                                            "children": [
                                                                {
                                                                    "type": "if_clause",
                                                                    "start_token": 516,
                                                                    "end_token": 520,
                                                                    "children": [
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "start_token": 518,
                                                                            "end_token": 520,
                                                                            "label": "is None:"
                                                                        }
                                                                    ],
                                                                    "label": "if content_type is None:"
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 521,
                                                                    "end_token": 525,
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 522,
                                                                            "end_token": 524,
                                                                            "label": "content_type = \"image/jpeg\""
                                                                        }
                                                                    ],
                                                                    "label": "\n            content_type = \"image/jpeg\"\n"
                                                                }
                                                            ],
                                                            "label": "if content_type is None:\n            content_type = \"image/jpeg\"\n"
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 527,
                                                            "end_token": 569,
                                                            "children": [
                                                                {
                                                                    "type": "conditional_expression",
                                                                    "start_token": 528,
                                                                    "end_token": 541,
                                                                    "children": [
                                                                        {
                                                                            "type": "boolean_operator",
                                                                            "start_token": 530,
                                                                            "end_token": 533,
                                                                            "label": "content_type not in ALLOWED_IMAGE_TYPES"
                                                                        },
                                                                        {
                                                                            "type": "boolean_operator",
                                                                            "start_token": 536,
                                                                            "end_token": 539,
                                                                            "label": "content_type not in ALLOWED_VIDEO_TYPES"
                                                                        }
                                                                    ],
                                                                    "label": "(\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        )"
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 542,
                                                                    "end_token": 569,
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "start_token": 544,
                                                                            "end_token": 550,
                                                                            "label": "logger.warning(f\"Invalid file type attempted: {content_type}\")"
                                                                        },
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "start_token": 552,
                                                                            "end_token": 569,
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "start_token": 553,
                                                                                    "end_token": 569,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "dotted_name",
                                                                                            "start_token": 553,
                                                                                            "end_token": 563,
                                                                                            "label": "backend.server.v2.store.exceptions.InvalidFileTypeError"
                                                                                        }
                                                                                    ],
                                                                                    "label": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )"
                                                                                }
                                                                            ],
                                                                            "label": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )"
                                                                        }
                                                                    ],
                                                                    "label": ":\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )"
                                                                }
                                                            ],
                                                            "label": "if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )"
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 577,
                                                            "end_token": 579,
                                                            "label": "file_size = 0"
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 581,
                                                            "end_token": 583,
                                                            "label": "chunk_size = 8192"
                                                        },
                                                        {
                                                            "type": "try_statement",
                                                            "start_token": 590,
                                                            "end_token": 695,
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 592,
                                                                    "end_token": 644,
                                                                    "children": [
                                                                        {
                                                                            "type": "while_statement",
                                                                            "start_token": 593,
                                                                            "end_token": 612,
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "start_token": 594,
                                                                                    "end_token": 603,
                                                                                    "label": "chunk := await file.read(chunk_size)"
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "start_token": 604,
                                                                                    "end_token": 612,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "augmented_assignment",
                                                                                            "start_token": 606,
                                                                                            "end_token": 612,
                                                                                            "label": "file_size += len(chunk)"
                                                                                        }
                                                                                    ],
                                                                                    "label": ":\n                file_size += len(chunk)"
                                                                                }
                                                                            ],
                                                                            "label": "while chunk := await file.read(chunk_size):\n                file_size += len(chunk)"
                                                                        },
                                                                        {
                                                                            "type": "if_statement",
                                                                            "start_token": 614,
                                                                            "end_token": 644,
                                                                            "children": [
                                                                                {
                                                                                    "type": "if_clause",
                                                                                    "start_token": 614,
                                                                                    "end_token": 618,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "comparison_operator",
                                                                                            "start_token": 616,
                                                                                            "end_token": 618,
                                                                                            "label": "> MAX_FILE_SIZE:"
                                                                                        }
                                                                                    ],
                                                                                    "label": "if file_size > MAX_FILE_SIZE:"
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "start_token": 619,
                                                                                    "end_token": 644,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "start_token": 620,
                                                                                            "end_token": 626,
                                                                                            "label": "logger.warning(f\"File size too large: {file_size} bytes\")"
                                                                                        },
                                                                                        {
                                                                                            "type": "raise_statement",
                                                                                            "start_token": 628,
                                                                                            "end_token": 644,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "start_token": 629,
                                                                                                    "end_token": 644,
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "dotted_name",
                                                                                                            "start_token": 629,
                                                                                                            "end_token": 639,
                                                                                                            "label": "backend.server.v2.store.exceptions.FileSizeTooLargeError"
                                                                                                        }
                                                                                                    ],
                                                                                                    "label": "backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )"
                                                                                                }
                                                                                            ],
                                                                                            "label": "raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )"
                                                                                        }
                                                                                    ],
                                                                                    "label": "\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )"
                                                                                }
                                                                            ],
                                                                            "label": "if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )"
                                                                        }
                                                                    ],
                                                                    "label": "\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )"
                                                                },
                                                                {
                                                                    "type": "except_clause",
                                                                    "start_token": 646,
                                                                    "end_token": 660,
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "start_token": 660,
                                                                            "end_token": 660,
                                                                            "label": "raise"
                                                                        }
                                                                    ],
                                                                    "label": "except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise"
                                                                },
                                                                {
                                                                    "type": "except_clause",
                                                                    "start_token": 662,
                                                                    "end_token": 695,
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 666,
                                                                            "end_token": 693,
                                                                            "children": [
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "start_token": 668,
                                                                                    "end_token": 674,
                                                                                    "label": "logger.error(f\"Error reading file chunks: {str(e)}\")"
                                                                                },
                                                                                {
                                                                                    "type": "raise_statement",
                                                                                    "start_token": 676,
                                                                                    "end_token": 693,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "start_token": 677,
                                                                                            "end_token": 693,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "dotted_name",
                                                                                                    "start_token": 677,
                                                                                                    "end_token": 687,
                                                                                                    "label": "backend.server.v2.store.exceptions.FileReadError"
                                                                                                }
                                                                                            ],
                                                                                            "label": "backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from"
                                                                                        }
                                                                                    ],
                                                                                    "label": "raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from"
                                                                                }
                                                                            ],
                                                                            "label": ":\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from"
                                                                        }
                                                                    ],
                                                                    "label": "except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n"
                                                                }
                                                            ],
                                                            "label": "try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n"
                                                        },
                                                        {
                                                            "type": "await",
                                                            "start_token": 702,
                                                            "end_token": 708,
                                                            "label": "await file.seek(0)"
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 716,
                                                            "end_token": 722,
                                                            "label": "filename = file.filename or \"\""
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 724,
                                                            "end_token": 740,
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 730,
                                                                    "end_token": 739,
                                                                    "children": [
                                                                        {
                                                                            "type": "subscript",
                                                                            "start_token": 731,
                                                                            "end_token": 735,
                                                                            "label": "(filename)[1"
                                                                        }
                                                                    ],
                                                                    "label": "splitext(filename)[1].lower("
                                                                }
                                                            ],
                                                            "label": "file_ext = os.path.splitext(filename)[1].lower()"
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 742,
                                                            "end_token": 749,
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 744,
                                                                    "end_token": 749,
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 746,
                                                                            "end_token": 748,
                                                                            "label": "unique_filename = filename"
                                                                        }
                                                                    ],
                                                                    "label": ":\n            unique_filename = filename\n"
                                                                }
                                                            ],
                                                            "label": "if use_file_name:\n            unique_filename = filename\n"
                                                        },
                                                        {
                                                            "type": "else_clause",
                                                            "start_token": 750,
                                                            "end_token": 757,
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 752,
                                                                    "end_token": 757,
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 754,
                                                                            "end_token": 756,
                                                                            "label": "= f\"{uuid.uuid4()}{file_ext}\""
                                                                        }
                                                                    ],
                                                                    "label": "\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n"
                                                                }
                                                            ],
                                                            "label": "else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n"
                                                        },
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 764,
                                                            "end_token": 772,
                                                            "label": "media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\""
                                                        },
                                                        {
                                                            "type": "try_statement",
                                                            "start_token": 780,
                                                            "end_token": 942,
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "start_token": 782,
                                                                    "end_token": 858,
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 783,
                                                                            "end_token": 789,
                                                                            "label": "storage_client = storage.Client()"
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 791,
                                                                            "end_token": 802,
                                                                            "children": [
                                                                                {
                                                                                    "type": "dotted_name",
                                                                                    "start_token": 793,
                                                                                    "end_token": 801,
                                                                                    "label": "storage_client.bucket(settings.config.media_gcs_bucket_name"
                                                                                }
                                                                            ],
                                                                            "label": "bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)"
                                                                        },
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 804,
                                                                            "end_token": 811,
                                                                            "label": "blob = bucket.blob(storage_path)"
                                                                        },
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 813,
                                                                            "end_token": 818,
                                                                            "label": "blob.content_type = content_type\n"
                                                                        },
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 820,
                                                                            "end_token": 827,
                                                                            "children": [
                                                                                {
                                                                                    "type": "await",
                                                                                    "start_token": 820,
                                                                                    "end_token": 825,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "start_token": 823,
                                                                                            "end_token": 826,
                                                                                            "label": "file.read("
                                                                                        }
                                                                                    ],
                                                                                    "label": "file_bytes = await file.read"
                                                                                }
                                                                            ],
                                                                            "label": "file_bytes = await file.read()"
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 829,
                                                                            "end_token": 838,
                                                                            "children": [
                                                                                {
                                                                                    "type": "dotted_name",
                                                                                    "start_token": 831,
                                                                                    "end_token": 837,
                                                                                    "label": "upload_from_string(file_bytes, content_type=content_type"
                                                                                }
                                                                            ],
                                                                            "label": "blob.upload_from_string(file_bytes, content_type=content_type)"
                                                                        },
                                                                        {
                                                                            "type": "assignment",
                                                                            "start_token": 842,
                                                                            "end_token": 846,
                                                                            "label": "= blob.public_url\n"
                                                                        },
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "start_token": 848,
                                                                            "end_token": 854,
                                                                            "label": "logger.info(f\"Successfully uploaded file to: {storage_path}\")"
                                                                        },
                                                                        {
                                                                            "type": "return_statement",
                                                                            "start_token": 856,
                                                                            "end_token": 857,
                                                                            "label": "return public_url"
                                                                        }
                                                                    ],
                                                                    "label": "\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n"
                                                                },
                                                                {
                                                                    "type": "except_clause",
                                                                    "start_token": 860,
                                                                    "end_token": 892,
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 864,
                                                                            "end_token": 892,
                                                                            "children": [
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "start_token": 866,
                                                                                    "end_token": 872,
                                                                                    "label": "logger.error(f\"GCS storage error: {str(e)}\")"
                                                                                },
                                                                                {
                                                                                    "type": "raise_statement",
                                                                                    "start_token": 874,
                                                                                    "end_token": 892,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "start_token": 875,
                                                                                            "end_token": 892,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "dotted_name",
                                                                                                    "start_token": 875,
                                                                                                    "end_token": 885,
                                                                                                    "label": "backend.server.v2.store.exceptions.StorageUploadError"
                                                                                                }
                                                                                            ],
                                                                                            "label": "backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e"
                                                                                        }
                                                                                    ],
                                                                                    "label": "raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e"
                                                                                }
                                                                            ],
                                                                            "label": ":\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e"
                                                                        }
                                                                    ],
                                                                    "label": "except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e"
                                                                },
                                                                {
                                                                    "type": "except_clause",
                                                                    "start_token": 895,
                                                                    "end_token": 909,
                                                                    "children": [
                                                                        {
                                                                            "type": "raise_statement",
                                                                            "start_token": 909,
                                                                            "end_token": 909,
                                                                            "label": "raise"
                                                                        }
                                                                    ],
                                                                    "label": "except backend.server.v2.store.exceptions.MediaUploadError:\n        raise"
                                                                },
                                                                {
                                                                    "type": "except_clause",
                                                                    "start_token": 911,
                                                                    "end_token": 942,
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "start_token": 915,
                                                                            "end_token": 940,
                                                                            "children": [
                                                                                {
                                                                                    "type": "expression_statement",
                                                                                    "start_token": 917,
                                                                                    "end_token": 922,
                                                                                    "label": "logger.exception(\"Unexpected error in upload_media\")"
                                                                                },
                                                                                {
                                                                                    "type": "raise_statement",
                                                                                    "start_token": 924,
                                                                                    "end_token": 940,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "start_token": 925,
                                                                                            "end_token": 940,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "dotted_name",
                                                                                                    "start_token": 925,
                                                                                                    "end_token": 935,
                                                                                                    "label": "backend.server.v2.store.exceptions.MediaUploadError"
                                                                                                }
                                                                                            ],
                                                                                            "label": "backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        )"
                                                                                        }
                                                                                    ],
                                                                                    "label": "raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        )"
                                                                                }
                                                                            ],
                                                                            "label": ":\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        )"
                                                                        }
                                                                    ],
                                                                    "label": "except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e"
                                                                }
                                                            ],
                                                            "label": "try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n\n    except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n    except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e"
                                                        }
                                                    ],
                                                    "label": ""
                                                }
                                            ],
                                            "label": "try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)\n\n        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n\n    except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n    except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e"
                                        }
                                    ],
                                    "label": "\n\n    # Get file content for deeper validation\n    try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n\n    # Validate file signature/magic bytes\n    if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )\n\n    elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )\n\n    settings = Settings()\n\n    # Check required settings first before doing any file processing\n    if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )\n\n    try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)\n\n        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n\n    except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n    except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        )"
                                }
                            ],
                            "label": "async def upload_media(\n    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False\n) -> str:\n\n    # Get file content for deeper validation\n    try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n\n    # Validate file signature/magic bytes\n    if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )\n\n    elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )\n\n    settings = Settings()\n\n    # Check required settings first before doing any file processing\n    if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )\n\n    try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)\n\n        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n\n    except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n    except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        )"
                        }
                    ],
                    "label": "async def upload_media(\n    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False\n) -> str:\n\n    # Get file content for deeper validation\n    try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n\n    # Validate file signature/magic bytes\n    if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )\n\n    elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )\n\n    settings = Settings()\n\n    # Check required settings first before doing any file processing\n    if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )\n\n    try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)\n\n        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n\n    except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n    except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e\n"
                }
            ]
        }
    ],
    "label": "import logging\nimport os\nimport uuid\n\nimport fastapi\nfrom google.cloud import storage\n\nimport backend.server.v2.store.exceptions\nfrom backend.util.settings import Settings\n\nlogger = logging.getLogger(__name__)\n\nALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}\nALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\"}\nMAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB\n\n\n\n\n"
}