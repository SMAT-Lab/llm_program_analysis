{
    "type": "module",
    "start_token": 0,
    "end_token": 20,
    "children": [
        {
            "type": "if_statement",
            "start_token": 4,
            "end_token": 9,
            "children": [
                {
                    "type": "comparison_operator",
                    "start_token": 5,
                    "end_token": 7,
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 5,
                            "end_token": 5,
                            "label": "__name__"
                        },
                        {
                            "type": "string",
                            "start_token": 8,
                            "end_token": 8,
                            "label": "\"__main__\""
                        }
                    ],
                    "label": "__name__ =="
                }
            ],
            "label": "if __name__ == \"__main__\":"
        },
        {
            "type": "import_statement",
            "start_token": 11,
            "end_token": 12,
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 12,
                    "end_token": 12,
                    "label": "doctest"
                }
            ],
            "label": "import doctest"
        },
        {
            "type": "expression_statement",
            "start_token": 15,
            "end_token": 19,
            "children": [
                {
                    "type": "call",
                    "start_token": 15,
                    "end_token": 19,
                    "children": [
                        {
                            "type": "attribute",
                            "start_token": 15,
                            "end_token": 17,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 15,
                                    "end_token": 15,
                                    "label": "doctest"
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 17,
                                    "end_token": 17,
                                    "label": "testmod"
                                }
                            ],
                            "label": "doctest.testmod"
                        },
                        {
                            "type": "argument_list",
                            "start_token": 18,
                            "end_token": 18,
                            "label": "("
                        }
                    ],
                    "label": "doctest.testmod()"
                }
            ],
            "label": "doctest.testmod()"
        },
        {
            "type": "function_placeholder",
            "name": "gray_code",
            "start_line": 1,
            "end_line": 47,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 95,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 95,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 1,
                                    "end_token": 1,
                                    "label": "gray_code"
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 2,
                                    "end_token": 6,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 3,
                                            "end_token": 3,
                                            "label": "bit_count"
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "label": "int"
                                        }
                                    ],
                                    "label": "(bit_count: int)"
                                },
                                {
                                    "type": "type",
                                    "start_token": 8,
                                    "end_token": 9,
                                    "label": "> list"
                                },
                                {
                                    "type": "block",
                                    "start_token": 11,
                                    "end_token": 95,
                                    "children": [
                                        {
                                            "type": "string",
                                            "start_token": 12,
                                            "end_token": 13,
                                            "label": "\"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n\n    >>> gray_code(1)\n    [0, 1]\n\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The given input must be positive\n\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \""
                                        },
                                        {
                                            "type": "comment",
                                            "start_token": 17,
                                            "end_token": 29,
                                            "label": "# bit count represents no. of bits in the gray code\n"
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 30,
                                            "end_token": 41,
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "start_token": 32,
                                                    "end_token": 33,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 31,
                                                            "end_token": 31,
                                                            "label": "bit_count"
                                                        }
                                                    ],
                                                    "label": "< 0"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 34,
                                                    "end_token": 41,
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 36,
                                                            "end_token": 40,
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 37,
                                                                    "end_token": 40,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 37,
                                                                            "end_token": 37,
                                                                            "label": "ValueError"
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 39,
                                                                            "end_token": 39,
                                                                            "label": "\"The given input must be positive\""
                                                                        }
                                                                    ],
                                                                    "label": "ValueError(\"The given input must be positive\")"
                                                                }
                                                            ],
                                                            "label": "raise ValueError(\"The given input must be positive\")"
                                                        }
                                                    ],
                                                    "label": ":\n        raise ValueError(\"The given input must be positive\")\n"
                                                }
                                            ],
                                            "label": "if bit_count < 0:\n        raise ValueError(\"The given input must be positive\")\n"
                                        },
                                        {
                                            "type": "comment",
                                            "start_token": 43,
                                            "end_token": 49,
                                            "label": "# get the generated string sequence\n"
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 50,
                                            "end_token": 56,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 50,
                                                    "end_token": 50,
                                                    "label": "sequence"
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 52,
                                                    "end_token": 56,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 52,
                                                            "end_token": 52,
                                                            "label": "gray_code_sequence_string"
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 54,
                                                            "end_token": 54,
                                                            "label": "bit_count"
                                                        }
                                                    ],
                                                    "label": "gray_code_sequence_string(bit_count)\n"
                                                }
                                            ],
                                            "label": "sequence = gray_code_sequence_string(bit_count)\n"
                                        },
                                        {
                                            "type": "comment",
                                            "start_token": 58,
                                            "end_token": 58,
                                            "label": "\n"
                                        },
                                        {
                                            "type": "for_statement",
                                            "start_token": 65,
                                            "end_token": 91,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 66,
                                                    "end_token": 66,
                                                    "label": "i"
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 68,
                                                    "end_token": 74,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 68,
                                                            "end_token": 68,
                                                            "label": "range"
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 70,
                                                            "end_token": 74,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 70,
                                                                    "end_token": 70,
                                                                    "label": "len"
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 72,
                                                                    "end_token": 72,
                                                                    "label": "sequence"
                                                                }
                                                            ],
                                                            "label": "len(sequence))"
                                                        }
                                                    ],
                                                    "label": "range(len(sequence))"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 75,
                                                    "end_token": 91,
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 77,
                                                            "end_token": 91,
                                                            "children": [
                                                                {
                                                                    "type": "subscript",
                                                                    "start_token": 77,
                                                                    "end_token": 80,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 77,
                                                                            "end_token": 77,
                                                                            "label": "sequence"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 79,
                                                                            "end_token": 79,
                                                                            "label": "i"
                                                                        }
                                                                    ],
                                                                    "label": "sequence[i]"
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 82,
                                                                    "end_token": 91,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 82,
                                                                            "end_token": 82,
                                                                            "label": "int"
                                                                        },
                                                                        {
                                                                            "type": "subscript",
                                                                            "start_token": 84,
                                                                            "end_token": 87,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 84,
                                                                                    "end_token": 84,
                                                                                    "label": "sequence"
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 86,
                                                                                    "end_token": 86,
                                                                                    "label": "i"
                                                                                }
                                                                            ],
                                                                            "label": "sequence[i]"
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "start_token": 89,
                                                                            "end_token": 89,
                                                                            "label": "2"
                                                                        }
                                                                    ],
                                                                    "label": "int(sequence[i], 2)\n"
                                                                }
                                                            ],
                                                            "label": "sequence[i] = int(sequence[i], 2)\n"
                                                        }
                                                    ],
                                                    "label": ":\n        sequence[i] = int(sequence[i], 2)\n"
                                                }
                                            ],
                                            "label": "for i in range(len(sequence)):\n        sequence[i] = int(sequence[i], 2)\n"
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": 93,
                                            "end_token": 94,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 94,
                                                    "end_token": 94,
                                                    "label": "sequence"
                                                }
                                            ],
                                            "label": "return sequence"
                                        }
                                    ],
                                    "label": "\n    \"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n\n    >>> gray_code(1)\n    [0, 1]\n\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The given input must be positive\n\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \"\"\"\n\n    # bit count represents no. of bits in the gray code\n    if bit_count < 0:\n        raise ValueError(\"The given input must be positive\")\n\n    # get the generated string sequence\n    sequence = gray_code_sequence_string(bit_count)\n    #\n    # convert them to integers\n    for i in range(len(sequence)):\n        sequence[i] = int(sequence[i], 2)\n\n    return sequence\n"
                                }
                            ],
                            "label": "def gray_code(bit_count: int) -> list:\n    \"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n\n    >>> gray_code(1)\n    [0, 1]\n\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The given input must be positive\n\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \"\"\"\n\n    # bit count represents no. of bits in the gray code\n    if bit_count < 0:\n        raise ValueError(\"The given input must be positive\")\n\n    # get the generated string sequence\n    sequence = gray_code_sequence_string(bit_count)\n    #\n    # convert them to integers\n    for i in range(len(sequence)):\n        sequence[i] = int(sequence[i], 2)\n\n    return sequence\n"
                        }
                    ],
                    "label": "def gray_code(bit_count: int) -> list:\n    \"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n\n    >>> gray_code(1)\n    [0, 1]\n\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The given input must be positive\n\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \"\"\"\n\n    # bit count represents no. of bits in the gray code\n    if bit_count < 0:\n        raise ValueError(\"The given input must be positive\")\n\n    # get the generated string sequence\n    sequence = gray_code_sequence_string(bit_count)\n    #\n    # convert them to integers\n    for i in range(len(sequence)):\n        sequence[i] = int(sequence[i], 2)\n\n    return sequence\n"
                }
            ]
        },
        {
            "type": "function_placeholder",
            "name": "gray_code_sequence_string",
            "start_line": 50,
            "end_line": 88,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 140,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 140,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 1,
                                    "end_token": 1,
                                    "label": "gray_code_sequence_string"
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 2,
                                    "end_token": 6,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 3,
                                            "end_token": 3,
                                            "label": "bit_count"
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "label": "int"
                                        }
                                    ],
                                    "label": "(bit_count: int)"
                                },
                                {
                                    "type": "type",
                                    "start_token": 9,
                                    "end_token": 9,
                                    "label": "list"
                                },
                                {
                                    "type": "string",
                                    "start_token": 12,
                                    "end_token": 13,
                                    "children": [
                                        {
                                            "type": "string_content",
                                            "start_token": 12,
                                            "end_token": 13,
                                            "label": "\"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \""
                                        }
                                    ],
                                    "label": "\"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \""
                                },
                                {
                                    "type": "block",
                                    "start_token": 17,
                                    "end_token": 140,
                                    "children": [
                                        {
                                            "type": "comment",
                                            "start_token": 17,
                                            "end_token": 24,
                                            "label": "# The approach is a recursive one\n"
                                        },
                                        {
                                            "type": "comment",
                                            "start_token": 25,
                                            "end_token": 38,
                                            "label": "# Base case achieved when either n = 0 or n=1\n"
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 39,
                                            "end_token": 50,
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "start_token": 40,
                                                    "end_token": 43,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 40,
                                                            "end_token": 40,
                                                            "label": "bit_count"
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "start_token": 43,
                                                            "end_token": 43,
                                                            "label": "0"
                                                        }
                                                    ],
                                                    "label": "bit_count == 0"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 44,
                                                    "end_token": 50,
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": 46,
                                                            "end_token": 50,
                                                            "children": [
                                                                {
                                                                    "type": "list",
                                                                    "start_token": 47,
                                                                    "end_token": 50,
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 48,
                                                                            "end_token": 48,
                                                                            "label": "\"0\""
                                                                        }
                                                                    ],
                                                                    "label": "[\"0\"]\n"
                                                                }
                                                            ],
                                                            "label": "return [\"0\"]\n"
                                                        }
                                                    ],
                                                    "label": ":\n        return [\"0\"]\n"
                                                }
                                            ],
                                            "label": "if bit_count == 0:\n        return [\"0\"]\n"
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 52,
                                            "end_token": 65,
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "start_token": 53,
                                                    "end_token": 56,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 53,
                                                            "end_token": 53,
                                                            "label": "bit_count"
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "start_token": 56,
                                                            "end_token": 56,
                                                            "label": "1"
                                                        }
                                                    ],
                                                    "label": "bit_count == 1"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 57,
                                                    "end_token": 65,
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": 59,
                                                            "end_token": 65,
                                                            "children": [
                                                                {
                                                                    "type": "list",
                                                                    "start_token": 60,
                                                                    "end_token": 65,
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 61,
                                                                            "end_token": 61,
                                                                            "label": "\"0\""
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 63,
                                                                            "end_token": 63,
                                                                            "label": "\"1\""
                                                                        }
                                                                    ],
                                                                    "label": "[\"0\", \"1\"]\n"
                                                                }
                                                            ],
                                                            "label": "return [\"0\", \"1\"]\n"
                                                        }
                                                    ],
                                                    "label": ":\n        return [\"0\", \"1\"]\n"
                                                }
                                            ],
                                            "label": "if bit_count == 1:\n        return [\"0\", \"1\"]\n"
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 67,
                                            "end_token": 73,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 67,
                                                    "end_token": 67,
                                                    "label": "seq_len"
                                                },
                                                {
                                                    "type": "binary_operator",
                                                    "start_token": 69,
                                                    "end_token": 72,
                                                    "children": [
                                                        {
                                                            "type": "integer",
                                                            "start_token": 69,
                                                            "end_token": 69,
                                                            "label": "1"
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 72,
                                                            "end_token": 72,
                                                            "label": "bit_count"
                                                        }
                                                    ],
                                                    "label": "1 << bit_count"
                                                }
                                            ],
                                            "label": "seq_len = 1 << bit_count  #"
                                        },
                                        {
                                            "type": "comment",
                                            "start_token": 74,
                                            "end_token": 92,
                                            "label": "defines the length of the sequence\n    # 1<< n is equivalent to 2^n\n"
                                        },
                                        {
                                            "type": "comment",
                                            "start_token": 95,
                                            "end_token": 105,
                                            "label": "recursive answer will generate answer for n-1 bits\n"
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 106,
                                            "end_token": 113,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 106,
                                                    "end_token": 106,
                                                    "label": "smaller_sequence"
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 108,
                                                    "end_token": 113,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 108,
                                                            "end_token": 108,
                                                            "label": "gray_code_sequence_string"
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 109,
                                                            "end_token": 113,
                                                            "children": [
                                                                {
                                                                    "type": "binary_operator",
                                                                    "start_token": 110,
                                                                    "end_token": 112,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 110,
                                                                            "end_token": 110,
                                                                            "label": "bit_count"
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "start_token": 112,
                                                                            "end_token": 112,
                                                                            "label": "1"
                                                                        }
                                                                    ],
                                                                    "label": "bit_count - 1"
                                                                }
                                                            ],
                                                            "label": "(bit_count - 1)"
                                                        }
                                                    ],
                                                    "label": "gray_code_sequence_string(bit_count - 1)"
                                                }
                                            ],
                                            "label": "smaller_sequence = gray_code_sequence_string(bit_count - 1)"
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 116,
                                            "end_token": 120,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 116,
                                                    "end_token": 116,
                                                    "label": "sequence"
                                                },
                                                {
                                                    "type": "list",
                                                    "start_token": 118,
                                                    "end_token": 120,
                                                    "label": "[]\n"
                                                }
                                            ],
                                            "label": "sequence = []\n"
                                        },
                                        {
                                            "type": "comment",
                                            "start_token": 122,
                                            "end_token": 133,
                                            "label": "# append 0 to first half of the smaller sequence generated\n"
                                        },
                                        {
                                            "type": "for_statement",
                                            "start_token": 134,
                                            "end_token": 140,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 135,
                                                    "end_token": 135,
                                                    "label": "i"
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 137,
                                                    "end_token": 140,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 137,
                                                            "end_token": 137,
                                                            "label": "range"
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 138,
                                                            "end_token": 140,
                                                            "children": [
                                                                {
                                                                    "type": "binary_operator",
                                                                    "start_token": 139,
                                                                    "end_token": 140,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 139,
                                                                            "end_token": 139,
                                                                            "label": "seq_len"
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "start_token": 140,
                                                                            "end_token": 140,
                                                                            "label": "// 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    # append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    return sequence\n"
                                                                        }
                                                                    ],
                                                                    "label": "seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    # append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    return sequence\n"
                                                                }
                                                            ],
                                                            "label": "(seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    # append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    return sequence\n"
                                                        }
                                                    ],
                                                    "label": "range(seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    # append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    return sequence\n"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 141,
                                                    "end_token": 141,
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "start_token": 141,
                                                            "end_token": 141,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 141,
                                                                    "end_token": 141,
                                                                    "label": ""
                                                                },
                                                                {
                                                                    "type": "binary_operator",
                                                                    "start_token": 141,
                                                                    "end_token": 141,
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 141,
                                                                            "end_token": 141,
                                                                            "label": ""
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 141,
                                                                            "end_token": 141,
                                                                            "label": ""
                                                                        }
                                                                    ],
                                                                    "label": ""
                                                                }
                                                            ],
                                                            "label": ""
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 141,
                                                            "end_token": 141,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 141,
                                                                    "end_token": 141,
                                                                    "label": ""
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 141,
                                                                    "end_token": 141,
                                                                    "label": ""
                                                                }
                                                            ],
                                                            "label": ""
                                                        }
                                                    ],
                                                    "label": ""
                                                }
                                            ],
                                            "label": "for i in range(seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    # append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    return sequence\n"
                                        }
                                    ],
                                    "label": "# The approach is a recursive one\n    # Base case achieved when either n = 0 or n=1\n    if bit_count == 0:\n        return [\"0\"]\n\n    if bit_count == 1:\n        return [\"0\", \"1\"]\n\n    seq_len = 1 << bit_count  # defines the length of the sequence\n    # 1<< n is equivalent to 2^n\n\n    # recursive answer will generate answer for n-1 bits\n    smaller_sequence = gray_code_sequence_string(bit_count - 1)\n\n    sequence = []\n\n    # append 0 to first half of the smaller sequence generated\n    for i in range(seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    # append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    return sequence\n"
                                }
                            ],
                            "label": "def gray_code_sequence_string(bit_count: int) -> list:\n    \"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \"\"\"\n\n    # The approach is a recursive one\n    # Base case achieved when either n = 0 or n=1\n    if bit_count == 0:\n        return [\"0\"]\n\n    if bit_count == 1:\n        return [\"0\", \"1\"]\n\n    seq_len = 1 << bit_count  # defines the length of the sequence\n    # 1<< n is equivalent to 2^n\n\n    # recursive answer will generate answer for n-1 bits\n    smaller_sequence = gray_code_sequence_string(bit_count - 1)\n\n    sequence = []\n\n    # append 0 to first half of the smaller sequence generated\n    for i in range(seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    # append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    return sequence\n"
                        }
                    ],
                    "label": "def gray_code_sequence_string(bit_count: int) -> list:\n    \"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \"\"\"\n\n    # The approach is a recursive one\n    # Base case achieved when either n = 0 or n=1\n    if bit_count == 0:\n        return [\"0\"]\n\n    if bit_count == 1:\n        return [\"0\", \"1\"]\n\n    seq_len = 1 << bit_count  # defines the length of the sequence\n    # 1<< n is equivalent to 2^n\n\n    # recursive answer will generate answer for n-1 bits\n    smaller_sequence = gray_code_sequence_string(bit_count - 1)\n\n    sequence = []\n\n    # append 0 to first half of the smaller sequence generated\n    for i in range(seq_len // 2):\n        generated_no = \"0\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    # append 1 to second half ... start from the end of the list\n    for i in reversed(range(seq_len // 2)):\n        generated_no = \"1\" + smaller_sequence[i]\n        sequence.append(generated_no)\n\n    return sequence\n"
                }
            ]
        }
    ],
    "label": "\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"
}