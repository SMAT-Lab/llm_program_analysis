{
    "type": "module",
    "start_token": 0,
    "end_token": 18,
    "children": [
        {
            "type": "if_statement",
            "start_token": 2,
            "end_token": 7,
            "children": [
                {
                    "type": "comparison_operator",
                    "start_token": 3,
                    "end_token": 5,
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 3,
                            "end_token": 3,
                            "label": "__name__"
                        },
                        {
                            "type": "string",
                            "start_token": 6,
                            "end_token": 6,
                            "label": "\"__main__\""
                        }
                    ],
                    "label": "__name__ =="
                }
            ],
            "label": "if __name__ == \"__main__\":"
        },
        {
            "type": "import_statement",
            "start_token": 9,
            "end_token": 10,
            "children": [
                {
                    "type": "dotted_name",
                    "start_token": 10,
                    "end_token": 10,
                    "label": "doctest"
                }
            ],
            "label": "import doctest"
        },
        {
            "type": "expression_statement",
            "start_token": 13,
            "end_token": 17,
            "children": [
                {
                    "type": "call",
                    "start_token": 13,
                    "end_token": 17,
                    "children": [
                        {
                            "type": "attribute",
                            "start_token": 13,
                            "end_token": 15,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 13,
                                    "end_token": 13,
                                    "label": "doctest"
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 15,
                                    "end_token": 15,
                                    "label": "testmod"
                                }
                            ],
                            "label": "doctest.testmod"
                        },
                        {
                            "type": "argument_list",
                            "start_token": 16,
                            "end_token": 16,
                            "label": "("
                        }
                    ],
                    "label": "doctest.testmod()"
                }
            ],
            "label": "doctest.testmod()"
        },
        {
            "type": "function_placeholder",
            "name": "binary_coded_decimal",
            "start_line": 1,
            "end_line": 23,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 57,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 57,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 1,
                                    "end_token": 1,
                                    "children": [],
                                    "label": "binary_coded_decimal"
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 2,
                                    "end_token": 6,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 3,
                                            "end_token": 3,
                                            "children": [],
                                            "label": "number"
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "children": [],
                                            "label": "int"
                                        }
                                    ],
                                    "label": "(number: int)"
                                },
                                {
                                    "type": "type",
                                    "start_token": 9,
                                    "end_token": 9,
                                    "children": [],
                                    "label": "str"
                                },
                                {
                                    "type": "string",
                                    "start_token": 12,
                                    "end_token": 13,
                                    "children": [],
                                    "label": "\"\"\"\n    Find binary coded decimal (bcd) of integer base 10.\n    Each digit of the number is represented by a 4-bit binary.\n    Example:\n    >>> binary_coded_decimal(-2)\n    '0b0000'\n    >>> binary_coded_decimal(-1)\n    '0b0000'\n    >>> binary_coded_decimal(0)\n    '0b0000'\n    >>> binary_coded_decimal(3)\n    '0b0011'\n    >>> binary_coded_decimal(2)\n    '0b0010'\n    >>> binary_coded_decimal(12)\n    '0b00010010'\n    >>> binary_coded_decimal(987)\n    '0b100110000111'\n    \""
                                },
                                {
                                    "type": "block",
                                    "start_token": 15,
                                    "end_token": 57,
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "start_token": 16,
                                            "end_token": 57,
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "start_token": 17,
                                                    "end_token": 19,
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "start_token": 17,
                                                            "end_token": 17,
                                                            "children": [],
                                                            "label": "\"0b\""
                                                        },
                                                        {
                                                            "type": "string",
                                                            "start_token": 19,
                                                            "end_token": 19,
                                                            "children": [],
                                                            "label": "\"\""
                                                        }
                                                    ],
                                                    "label": "\"0b\" + \"\""
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 20,
                                                    "end_token": 56,
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "start_token": 20,
                                                            "end_token": 21,
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 20,
                                                                    "end_token": 20,
                                                                    "children": [],
                                                                    "label": "."
                                                                }
                                                            ],
                                                            "label": ".join"
                                                        },
                                                        {
                                                            "type": "parenthesized_expression",
                                                            "start_token": 22,
                                                            "end_token": 56,
                                                            "children": [
                                                                {
                                                                    "type": "generator_expression",
                                                                    "start_token": 24,
                                                                    "end_token": 55,
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "start_token": 24,
                                                                            "end_token": 43,
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "start_token": 24,
                                                                                    "end_token": 39,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "start_token": 24,
                                                                                            "end_token": 33,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "start_token": 24,
                                                                                                    "end_token": 32,
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "start_token": 24,
                                                                                                            "end_token": 31,
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "start_token": 24,
                                                                                                                    "end_token": 24,
                                                                                                                    "children": [],
                                                                                                                    "label": "str"
                                                                                                                }
                                                                                                            ],
                                                                                                            "label": "str(bin(int(digit)"
                                                                                                        }
                                                                                                    ],
                                                                                                    "label": "str(bin(int(digit))"
                                                                                                }
                                                                                            ],
                                                                                            "label": "str(bin(int(digit)))"
                                                                                        }
                                                                                    ],
                                                                                    "label": "str(bin(int(digit)))[2:].zfill"
                                                                                },
                                                                                {
                                                                                    "type": "integer",
                                                                                    "start_token": 41,
                                                                                    "end_token": 41,
                                                                                    "children": [],
                                                                                    "label": "4"
                                                                                }
                                                                            ],
                                                                            "label": "str(bin(int(digit)))[2:].zfill(4) for"
                                                                        },
                                                                        {
                                                                            "type": "for_in_clause",
                                                                            "start_token": 44,
                                                                            "end_token": 55,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 44,
                                                                                    "end_token": 44,
                                                                                    "children": [],
                                                                                    "label": "digit"
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "start_token": 46,
                                                                                    "end_token": 54,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "start_token": 46,
                                                                                            "end_token": 53,
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "integer",
                                                                                                    "start_token": 50,
                                                                                                    "end_token": 50,
                                                                                                    "children": [],
                                                                                                    "label": "0"
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "start_token": 52,
                                                                                                    "end_token": 52,
                                                                                                    "children": [],
                                                                                                    "label": "number"
                                                                                                }
                                                                                            ],
                                                                                            "label": "str(max(0, number)"
                                                                                        }
                                                                                    ],
                                                                                    "label": "str(max(0, number))"
                                                                                }
                                                                            ],
                                                                            "label": "digit in str(max(0, number))\n"
                                                                        }
                                                                    ],
                                                                    "label": "str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))\n"
                                                                }
                                                            ],
                                                            "label": "(\n        str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))\n    )"
                                                        }
                                                    ],
                                                    "label": ".join(\n        str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))\n    )"
                                                }
                                            ],
                                            "label": "return \"0b\" + \"\".join(\n        str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))\n    )\n"
                                        }
                                    ],
                                    "label": "\n    return \"0b\" + \"\".join(\n        str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))\n    )\n"
                                }
                            ],
                            "label": "def binary_coded_decimal(number: int) -> str:\n    \"\"\"\n    Find binary coded decimal (bcd) of integer base 10.\n    Each digit of the number is represented by a 4-bit binary.\n    Example:\n    >>> binary_coded_decimal(-2)\n    '0b0000'\n    >>> binary_coded_decimal(-1)\n    '0b0000'\n    >>> binary_coded_decimal(0)\n    '0b0000'\n    >>> binary_coded_decimal(3)\n    '0b0011'\n    >>> binary_coded_decimal(2)\n    '0b0010'\n    >>> binary_coded_decimal(12)\n    '0b00010010'\n    >>> binary_coded_decimal(987)\n    '0b100110000111'\n    \"\"\"\n    return \"0b\" + \"\".join(\n        str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))\n    )\n"
                        }
                    ],
                    "label": "def binary_coded_decimal(number: int) -> str:\n    \"\"\"\n    Find binary coded decimal (bcd) of integer base 10.\n    Each digit of the number is represented by a 4-bit binary.\n    Example:\n    >>> binary_coded_decimal(-2)\n    '0b0000'\n    >>> binary_coded_decimal(-1)\n    '0b0000'\n    >>> binary_coded_decimal(0)\n    '0b0000'\n    >>> binary_coded_decimal(3)\n    '0b0011'\n    >>> binary_coded_decimal(2)\n    '0b0010'\n    >>> binary_coded_decimal(12)\n    '0b00010010'\n    >>> binary_coded_decimal(987)\n    '0b100110000111'\n    \"\"\"\n    return \"0b\" + \"\".join(\n        str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))\n    )\n"
                }
            ]
        }
    ],
    "label": "\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"
}