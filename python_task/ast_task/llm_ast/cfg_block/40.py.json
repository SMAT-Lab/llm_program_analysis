{
    "type": "module",
    "start_token": 0,
    "end_token": 7,
    "children": [
        {
            "type": "string",
            "start_token": 1,
            "end_token": 1,
            "children": [],
            "label": "\"\nWord Break Problem is a well-known problem in computer science.\nGiven a string and a dictionary of words, the task is to determine if\nthe string can be segmented into a sequence of one or more dictionary words.\n\nWikipedia: https://en.wikipedia.org/wiki/Word_break_problem\n\""
        },
        {
            "type": "block",
            "start_token": 2,
            "end_token": 7,
            "children": [],
            "label": "\"\"\n\n\n\n\n"
        },
        {
            "type": "function_placeholder",
            "name": "backtrack",
            "start_line": 10,
            "end_line": 45,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 138,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 138,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 1,
                                    "end_token": 1,
                                    "label": "backtrack"
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 2,
                                    "end_token": 17,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 3,
                                            "end_token": 3,
                                            "label": "input_string"
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "label": "str"
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 7,
                                            "end_token": 7,
                                            "label": "word_dict"
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 9,
                                            "end_token": 12,
                                            "label": "set[str]"
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 14,
                                            "end_token": 14,
                                            "label": "start"
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 16,
                                            "end_token": 16,
                                            "label": "int"
                                        }
                                    ],
                                    "label": "(input_string: str, word_dict: set[str], start: int)"
                                },
                                {
                                    "type": "type",
                                    "start_token": 20,
                                    "end_token": 20,
                                    "label": "bool"
                                },
                                {
                                    "type": "block",
                                    "start_token": 22,
                                    "end_token": 138,
                                    "children": [
                                        {
                                            "type": "string",
                                            "start_token": 23,
                                            "end_token": 48,
                                            "label": "\"\"\"\n    Helper function that uses backtracking to determine if a valid\n    word segmentation is possible starting from index 'start'.\n\n    Parameters:\n    input_string (str): The input string to be segmented.\n    word_dict (set[str]): A set of valid dictionary words.\n    start (int): The starting index of the substring to be checked.\n\n    Returns:\n    bool: True if a valid segmentation is possible, otherwise False.\n\n    Example:\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\n    True\n\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\n    True\n\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\n    False\n    \""
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 56,
                                            "end_token": 80,
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "start_token": 69,
                                                    "end_token": 72,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 69,
                                                            "end_token": 69,
                                                            "label": "start"
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 73,
                                                            "end_token": 75,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 73,
                                                                    "end_token": 73,
                                                                    "label": "("
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 74,
                                                                    "end_token": 74,
                                                                    "label": "input_string"
                                                                }
                                                            ],
                                                            "label": "(input_string)"
                                                        }
                                                    ],
                                                    "label": "start == len"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 77,
                                                    "end_token": 80,
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": 78,
                                                            "end_token": 79,
                                                            "children": [
                                                                {
                                                                    "type": "true",
                                                                    "start_token": 79,
                                                                    "end_token": 79,
                                                                    "label": "True"
                                                                }
                                                            ],
                                                            "label": "return True"
                                                        }
                                                    ],
                                                    "label": "\n        return True\n"
                                                }
                                            ],
                                            "label": "if the starting index has reached the end of the string\n    if start == len(input_string):\n        return True\n"
                                        },
                                        {
                                            "type": "for_statement",
                                            "start_token": 92,
                                            "end_token": 134,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 93,
                                                    "end_token": 93,
                                                    "label": "end"
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 96,
                                                    "end_token": 107,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 96,
                                                            "end_token": 96,
                                                            "label": "("
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "start_token": 97,
                                                            "end_token": 99,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 97,
                                                                    "end_token": 97,
                                                                    "label": "start"
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "start_token": 99,
                                                                    "end_token": 99,
                                                                    "label": "1"
                                                                }
                                                            ],
                                                            "label": "start + 1"
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 101,
                                                            "end_token": 106,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 101,
                                                                    "end_token": 101,
                                                                    "label": "len"
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 102,
                                                                    "end_token": 102,
                                                                    "label": "("
                                                                }
                                                            ],
                                                            "label": "len(input_string) + 1"
                                                        }
                                                    ],
                                                    "label": "(start + 1, len(input_string) + 1)"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 109,
                                                    "end_token": 134,
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "start_token": 110,
                                                            "end_token": 133,
                                                            "children": [
                                                                {
                                                                    "type": "boolean_operator",
                                                                    "start_token": 111,
                                                                    "end_token": 120,
                                                                    "children": [
                                                                        {
                                                                            "type": "subscript",
                                                                            "start_token": 111,
                                                                            "end_token": 116,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 111,
                                                                                    "end_token": 111,
                                                                                    "label": "input_string"
                                                                                },
                                                                                {
                                                                                    "type": "slice",
                                                                                    "start_token": 113,
                                                                                    "end_token": 115,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 113,
                                                                                            "end_token": 113,
                                                                                            "label": "start"
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 115,
                                                                                            "end_token": 115,
                                                                                            "label": "end"
                                                                                        }
                                                                                    ],
                                                                                    "label": "start:end"
                                                                                }
                                                                            ],
                                                                            "label": "input_string[start:end]"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 118,
                                                                            "end_token": 118,
                                                                            "label": "word_dict"
                                                                        }
                                                                    ],
                                                                    "label": "input_string[start:end] in word_dict and backtrack"
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 121,
                                                                    "end_token": 129,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 121,
                                                                            "end_token": 121,
                                                                            "label": "("
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 123,
                                                                            "end_token": 123,
                                                                            "label": "input_string"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 125,
                                                                            "end_token": 125,
                                                                            "label": "word_dict"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 127,
                                                                            "end_token": 127,
                                                                            "label": "end"
                                                                        }
                                                                    ],
                                                                    "label": "(\n            input_string, word_dict, end\n        )"
                                                                }
                                                            ],
                                                            "label": "if input_string[start:end] in word_dict and backtrack(\n            input_string, word_dict, end\n        ):\n            return True"
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 131,
                                                            "end_token": 133,
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "start_token": 132,
                                                                    "end_token": 133,
                                                                    "children": [
                                                                        {
                                                                            "type": "true",
                                                                            "start_token": 133,
                                                                            "end_token": 133,
                                                                            "label": "True"
                                                                        }
                                                                    ],
                                                                    "label": "return True"
                                                                }
                                                            ],
                                                            "label": "\n            return True"
                                                        }
                                                    ],
                                                    "label": "\n        if input_string[start:end] in word_dict and backtrack(\n            input_string, word_dict, end\n        ):\n            return True\n"
                                                }
                                            ],
                                            "label": "for end in range(start + 1, len(input_string) + 1):\n        if input_string[start:end] in word_dict and backtrack(\n            input_string, word_dict, end\n        ):\n            return True\n"
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": 136,
                                            "end_token": 137,
                                            "children": [
                                                {
                                                    "type": "false",
                                                    "start_token": 137,
                                                    "end_token": 137,
                                                    "label": "False"
                                                }
                                            ],
                                            "label": "return False"
                                        }
                                    ],
                                    "label": "\n    \"\"\"\n    Helper function that uses backtracking to determine if a valid\n    word segmentation is possible starting from index 'start'.\n\n    Parameters:\n    input_string (str): The input string to be segmented.\n    word_dict (set[str]): A set of valid dictionary words.\n    start (int): The starting index of the substring to be checked.\n\n    Returns:\n    bool: True if a valid segmentation is possible, otherwise False.\n\n    Example:\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\n    True\n\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\n    True\n\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\n    False\n    \"\"\"\n\n    # Base case: if the starting index has reached the end of the string\n    if start == len(input_string):\n        return True\n\n    # Try every possible substring from 'start' to 'end'\n    for end in range(start + 1, len(input_string) + 1):\n        if input_string[start:end] in word_dict and backtrack(\n            input_string, word_dict, end\n        ):\n            return True\n\n    return False\n"
                                }
                            ],
                            "label": "def backtrack(input_string: str, word_dict: set[str], start: int) -> bool:\n    \"\"\"\n    Helper function that uses backtracking to determine if a valid\n    word segmentation is possible starting from index 'start'.\n\n    Parameters:\n    input_string (str): The input string to be segmented.\n    word_dict (set[str]): A set of valid dictionary words.\n    start (int): The starting index of the substring to be checked.\n\n    Returns:\n    bool: True if a valid segmentation is possible, otherwise False.\n\n    Example:\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\n    True\n\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\n    True\n\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\n    False\n    \"\"\"\n\n    # Base case: if the starting index has reached the end of the string\n    if start == len(input_string):\n        return True\n\n    # Try every possible substring from 'start' to 'end'\n    for end in range(start + 1, len(input_string) + 1):\n        if input_string[start:end] in word_dict and backtrack(\n            input_string, word_dict, end\n        ):\n            return True\n\n    return False\n"
                        }
                    ],
                    "label": "def backtrack(input_string: str, word_dict: set[str], start: int) -> bool:\n    \"\"\"\n    Helper function that uses backtracking to determine if a valid\n    word segmentation is possible starting from index 'start'.\n\n    Parameters:\n    input_string (str): The input string to be segmented.\n    word_dict (set[str]): A set of valid dictionary words.\n    start (int): The starting index of the substring to be checked.\n\n    Returns:\n    bool: True if a valid segmentation is possible, otherwise False.\n\n    Example:\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\n    True\n\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\n    True\n\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\n    False\n    \"\"\"\n\n    # Base case: if the starting index has reached the end of the string\n    if start == len(input_string):\n        return True\n\n    # Try every possible substring from 'start' to 'end'\n    for end in range(start + 1, len(input_string) + 1):\n        if input_string[start:end] in word_dict and backtrack(\n            input_string, word_dict, end\n        ):\n            return True\n\n    return False\n"
                }
            ]
        },
        {
            "type": "function_placeholder",
            "name": "word_break",
            "start_line": 48,
            "end_line": 71,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 57,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 57,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 1,
                                    "end_token": 1,
                                    "label": "word_break"
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 2,
                                    "end_token": 13,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 3,
                                            "end_token": 3,
                                            "label": "input_string"
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "label": "str"
                                        },
                                        {
                                            "type": "identifier",
                                            "start_token": 7,
                                            "end_token": 7,
                                            "label": "word_dict"
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 9,
                                            "end_token": 12,
                                            "label": "set[str]"
                                        }
                                    ],
                                    "label": "(input_string: str, word_dict: set[str])"
                                },
                                {
                                    "type": "type",
                                    "start_token": 16,
                                    "end_token": 16,
                                    "label": "bool"
                                },
                                {
                                    "type": "block",
                                    "start_token": 18,
                                    "end_token": 57,
                                    "children": [
                                        {
                                            "type": "string",
                                            "start_token": 19,
                                            "end_token": 45,
                                            "children": [
                                                {
                                                    "type": "string_content",
                                                    "start_token": 20,
                                                    "end_token": 44,
                                                    "label": "\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \""
                                                }
                                            ],
                                            "label": "\"\"\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \"\"\""
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": 48,
                                            "end_token": 57,
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "start_token": 49,
                                                    "end_token": 56,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 49,
                                                            "end_token": 49,
                                                            "label": "backtrack"
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "start_token": 50,
                                                            "end_token": 56,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 51,
                                                                    "end_token": 51,
                                                                    "label": "input_string"
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 53,
                                                                    "end_token": 53,
                                                                    "label": "word_dict"
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "start_token": 55,
                                                                    "end_token": 55,
                                                                    "label": "0"
                                                                }
                                                            ],
                                                            "label": "(input_string, word_dict, 0)"
                                                        }
                                                    ],
                                                    "label": "backtrack(input_string, word_dict, 0)"
                                                }
                                            ],
                                            "label": "return backtrack(input_string, word_dict, 0)\n"
                                        }
                                    ],
                                    "label": "\n    \"\"\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \"\"\"\n\n    return backtrack(input_string, word_dict, 0)\n"
                                }
                            ],
                            "label": "def word_break(input_string: str, word_dict: set[str]) -> bool:\n    \"\"\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \"\"\"\n\n    return backtrack(input_string, word_dict, 0)\n"
                        }
                    ],
                    "label": "def word_break(input_string: str, word_dict: set[str]) -> bool:\n    \"\"\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \"\"\"\n\n    return backtrack(input_string, word_dict, 0)\n"
                }
            ]
        }
    ],
    "label": "\"\"\"\nWord Break Problem is a well-known problem in computer science.\nGiven a string and a dictionary of words, the task is to determine if\nthe string can be segmented into a sequence of one or more dictionary words.\n\nWikipedia: https://en.wikipedia.org/wiki/Word_break_problem\n\"\"\"\n\n\n\n\n"
}