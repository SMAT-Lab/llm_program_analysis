{
    "type": "module",
    "start_token": 0,
    "end_token": 18,
    "children": [
        {
            "type": "if_statement",
            "start_token": 2,
            "end_token": 18,
            "children": [
                {
                    "type": "comparison_operator",
                    "start_token": 2,
                    "end_token": 7,
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 3,
                            "end_token": 3,
                            "label": "__name__"
                        },
                        {
                            "type": "string",
                            "start_token": 6,
                            "end_token": 6,
                            "label": "\"__main__\""
                        }
                    ],
                    "label": "if __name__ == \"__main__\":"
                },
                {
                    "type": "block",
                    "start_token": 8,
                    "end_token": 18,
                    "children": [
                        {
                            "type": "import_statement",
                            "start_token": 9,
                            "end_token": 10,
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "start_token": 10,
                                    "end_token": 10,
                                    "label": "doctest"
                                }
                            ],
                            "label": "import doctest"
                        },
                        {
                            "type": "expression_statement",
                            "start_token": 13,
                            "end_token": 17,
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 13,
                                    "end_token": 17,
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 13,
                                            "end_token": 15,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 13,
                                                    "end_token": 13,
                                                    "label": "doctest"
                                                },
                                                {
                                                    "type": "identifier",
                                                    "start_token": 15,
                                                    "end_token": 15,
                                                    "label": "testmod"
                                                }
                                            ],
                                            "label": "doctest.testmod"
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 16,
                                            "end_token": 17,
                                            "label": "()"
                                        }
                                    ],
                                    "label": "doctest.testmod()"
                                }
                            ],
                            "label": "doctest.testmod()"
                        }
                    ],
                    "label": "\n    import doctest\n\n    doctest.testmod()\n"
                }
            ],
            "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"
        },
        {
            "type": "function_placeholder",
            "name": "binary_count_setbits",
            "start_line": 1,
            "end_line": 35,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 55,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 55,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 0,
                                    "end_token": 0,
                                    "children": [],
                                    "label": "def"
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 1,
                                    "end_token": 1,
                                    "children": [],
                                    "label": "binary_count_setbits"
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 2,
                                    "end_token": 6,
                                    "children": [
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 3,
                                            "end_token": 5,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 3,
                                                    "end_token": 3,
                                                    "children": [],
                                                    "label": "a"
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": [],
                                                    "label": "int"
                                                }
                                            ],
                                            "label": "a: int"
                                        }
                                    ],
                                    "label": "(a: int)"
                                },
                                {
                                    "type": "type",
                                    "start_token": 8,
                                    "end_token": 9,
                                    "children": [],
                                    "label": "> int"
                                },
                                {
                                    "type": "block",
                                    "start_token": 10,
                                    "end_token": 55,
                                    "children": [
                                        {
                                            "type": "string",
                                            "start_token": 12,
                                            "end_token": 15,
                                            "children": [
                                                {
                                                    "type": "string_content",
                                                    "start_token": 13,
                                                    "end_token": 13,
                                                    "children": [],
                                                    "label": "\"\n    Take in 1 integer, return a number that is\n    the number of 1's in binary representation of that number.\n\n    >>> binary_count_setbits(25)\n    3\n    >>> binary_count_setbits(36)\n    2\n    >>> binary_count_setbits(16)\n    1\n    >>> binary_count_setbits(58)\n    4\n    >>> binary_count_setbits(4294967295)\n    32\n    >>> binary_count_setbits(0)\n    0\n    >>> binary_count_setbits(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_setbits(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_setbits(\""
                                                }
                                            ],
                                            "label": "\"\"\"\n    Take in 1 integer, return a number that is\n    the number of 1's in binary representation of that number.\n\n    >>> binary_count_setbits(25)\n    3\n    >>> binary_count_setbits(36)\n    2\n    >>> binary_count_setbits(16)\n    1\n    >>> binary_count_setbits(58)\n    4\n    >>> binary_count_setbits(4294967295)\n    32\n    >>> binary_count_setbits(0)\n    0\n    >>> binary_count_setbits(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_setbits(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_setbits(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \""
                                        }
                                    ],
                                    "label": ":\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of 1's in binary representation of that number.\n\n    >>> binary_count_setbits(25)\n    3\n    >>> binary_count_setbits(36)\n    2\n    >>> binary_count_setbits(16)\n    1\n    >>> binary_count_setbits(58)\n    4\n    >>> binary_count_setbits(4294967295)\n    32\n    >>> binary_count_setbits(0)\n    0\n    >>> binary_count_setbits(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_setbits(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_setbits(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return bin(a).count(\"1\")\n"
                                },
                                {
                                    "type": "if_statement",
                                    "start_token": 18,
                                    "end_token": 28,
                                    "children": [
                                        {
                                            "type": "if_clause",
                                            "start_token": 18,
                                            "end_token": 22,
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "start_token": 20,
                                                    "end_token": 20,
                                                    "children": [],
                                                    "label": "<"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 23,
                                                    "end_token": 28,
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 24,
                                                            "end_token": 28,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 25,
                                                                    "end_token": 25,
                                                                    "children": [],
                                                                    "label": "ValueError"
                                                                },
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 27,
                                                                    "end_token": 27,
                                                                    "children": [],
                                                                    "label": "\"Input value must be a positive integer\""
                                                                }
                                                            ],
                                                            "label": "raise ValueError(\"Input value must be a positive integer\")"
                                                        }
                                                    ],
                                                    "label": "\n        raise ValueError(\"Input value must be a positive integer\")"
                                                }
                                            ],
                                            "label": "if a < 0:"
                                        }
                                    ],
                                    "label": "if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")"
                                },
                                {
                                    "type": "elif_clause",
                                    "start_token": 30,
                                    "end_token": 37,
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 31,
                                            "end_token": 36,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 31,
                                                    "end_token": 31,
                                                    "children": [],
                                                    "label": "isinstance"
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 32,
                                                    "end_token": 36,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 33,
                                                            "end_token": 33,
                                                            "children": [],
                                                            "label": "a"
                                                        },
                                                        {
                                                            "type": "type",
                                                            "start_token": 35,
                                                            "end_token": 35,
                                                            "children": [],
                                                            "label": "float"
                                                        }
                                                    ],
                                                    "label": "(a, float)"
                                                }
                                            ],
                                            "label": "isinstance(a, float)"
                                        },
                                        {
                                            "type": "block",
                                            "start_token": 38,
                                            "end_token": 43,
                                            "children": [
                                                {
                                                    "type": "raise_statement",
                                                    "start_token": 39,
                                                    "end_token": 43,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 40,
                                                            "end_token": 40,
                                                            "children": [],
                                                            "label": "TypeError"
                                                        },
                                                        {
                                                            "type": "string",
                                                            "start_token": 42,
                                                            "end_token": 42,
                                                            "children": [],
                                                            "label": "\"Input value must be a 'int' type\""
                                                        }
                                                    ],
                                                    "label": "raise TypeError(\"Input value must be a 'int' type\")"
                                                }
                                            ],
                                            "label": "\n        raise TypeError(\"Input value must be a 'int' type\")"
                                        }
                                    ],
                                    "label": "elif isinstance(a, float):"
                                },
                                {
                                    "type": "return_statement",
                                    "start_token": 45,
                                    "end_token": 54,
                                    "children": [
                                        {
                                            "type": "call",
                                            "start_token": 46,
                                            "end_token": 54,
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "start_token": 46,
                                                    "end_token": 51,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 46,
                                                            "end_token": 46,
                                                            "children": [],
                                                            "label": "bin"
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 51,
                                                            "end_token": 51,
                                                            "children": [],
                                                            "label": "count"
                                                        }
                                                    ],
                                                    "label": "bin(a).count"
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 52,
                                                    "end_token": 54,
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "start_token": 53,
                                                            "end_token": 53,
                                                            "children": [],
                                                            "label": "\"1\""
                                                        }
                                                    ],
                                                    "label": "(\"1\")"
                                                }
                                            ],
                                            "label": "bin(a).count(\"1\")"
                                        }
                                    ],
                                    "label": "return bin(a).count(\"1\")"
                                }
                            ],
                            "label": "def binary_count_setbits(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of 1's in binary representation of that number.\n\n    >>> binary_count_setbits(25)\n    3\n    >>> binary_count_setbits(36)\n    2\n    >>> binary_count_setbits(16)\n    1\n    >>> binary_count_setbits(58)\n    4\n    >>> binary_count_setbits(4294967295)\n    32\n    >>> binary_count_setbits(0)\n    0\n    >>> binary_count_setbits(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_setbits(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_setbits(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return bin(a).count(\"1\")\n"
                        }
                    ],
                    "label": "def binary_count_setbits(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of 1's in binary representation of that number.\n\n    >>> binary_count_setbits(25)\n    3\n    >>> binary_count_setbits(36)\n    2\n    >>> binary_count_setbits(16)\n    1\n    >>> binary_count_setbits(58)\n    4\n    >>> binary_count_setbits(4294967295)\n    32\n    >>> binary_count_setbits(0)\n    0\n    >>> binary_count_setbits(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_setbits(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_setbits(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return bin(a).count(\"1\")\n"
                }
            ]
        }
    ],
    "label": "\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"
}