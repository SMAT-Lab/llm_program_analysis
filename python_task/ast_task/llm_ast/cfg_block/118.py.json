{
    "type": "module",
    "start_token": 0,
    "end_token": 35,
    "children": [
        {
            "type": "string",
            "start_token": 1,
            "end_token": 11,
            "children": [],
            "label": "\"\nauthor: Aayush Soni\nGiven n pairs of parentheses, write a function to generate all\ncombinations of well-formed parentheses.\nInput: n = 2\nOutput: [\"(())\",\"()()\"]\nLeetcode link: https://leetcode.com/problems/generate-parentheses/description/\n\""
        },
        {
            "type": "if_statement",
            "start_token": 20,
            "end_token": 25,
            "children": [
                {
                    "type": "comparison_operator",
                    "start_token": 21,
                    "end_token": 24,
                    "children": [],
                    "label": "__name__ == \"__main__\""
                },
                {
                    "type": "block",
                    "start_token": 26,
                    "end_token": 35,
                    "children": [
                        {
                            "type": "import_statement",
                            "start_token": 27,
                            "end_token": 28,
                            "children": [],
                            "label": "import doctest"
                        },
                        {
                            "type": "call",
                            "start_token": 31,
                            "end_token": 35,
                            "children": [
                                {
                                    "type": "dotted_name",
                                    "start_token": 31,
                                    "end_token": 33,
                                    "children": [],
                                    "label": "doctest.testmod"
                                },
                                {
                                    "type": "argument_list",
                                    "start_token": 34,
                                    "end_token": 35,
                                    "children": [],
                                    "label": "()"
                                }
                            ],
                            "label": "doctest.testmod()"
                        }
                    ],
                    "label": "\n    import doctest\n\n    doctest.testmod()"
                }
            ],
            "label": "if __name__ == \"__main__\":"
        },
        {
            "type": "function_placeholder",
            "name": "backtrack",
            "start_line": 11,
            "end_line": 45,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 164,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 164,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 1,
                                    "end_token": 1,
                                    "label": "backtrack"
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 2,
                                    "end_token": 27,
                                    "children": [
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 4,
                                            "end_token": 6,
                                            "label": "partial: str"
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 8,
                                            "end_token": 10,
                                            "label": "open_count: int"
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 12,
                                            "end_token": 14,
                                            "label": "close_count: int"
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 16,
                                            "end_token": 18,
                                            "label": "n: int"
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 20,
                                            "end_token": 25,
                                            "label": "result: list[str]"
                                        }
                                    ],
                                    "label": "(\n    partial: str, open_count: int, close_count: int, n: int, result: list[str]\n)"
                                },
                                {
                                    "type": "none",
                                    "start_token": 29,
                                    "end_token": 30,
                                    "label": "> None"
                                },
                                {
                                    "type": "string",
                                    "start_token": 33,
                                    "end_token": 36,
                                    "label": "\"\"\"\n    Generate valid combinations of balanced parentheses using recursion.\n\n    :param partial: A string representing the current combination.\n    :param open_count: An integer representing the count of open parentheses.\n    :param close_count: An integer representing the count of close parentheses.\n    :param n: An integer representing the total number of pairs.\n    :param result: A list to store valid combinations.\n    :return: None\n\n    This function uses recursion to explore all possible combinations,\n    ensuring that at each step, the parentheses remain balanced.\n\n    Example:\n    >>> result = []\n    >>> backtrack(\"\", 0, 0, 2, result)\n    >>> result\n    ['(())', '()()']\n    \"\"\""
                                },
                                {
                                    "type": "block",
                                    "start_token": 38,
                                    "end_token": 163,
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "start_token": 38,
                                            "end_token": 71,
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "start_token": 39,
                                                    "end_token": 48,
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 39,
                                                            "end_token": 42,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 39,
                                                                    "end_token": 39,
                                                                    "label": "len"
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 40,
                                                                    "end_token": 41,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 41,
                                                                            "end_token": 41,
                                                                            "label": "partial"
                                                                        }
                                                                    ],
                                                                    "label": "(partial"
                                                                }
                                                            ],
                                                            "label": "len(partial)"
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "start_token": 43,
                                                            "end_token": 47,
                                                            "children": [
                                                                {
                                                                    "type": "integer",
                                                                    "start_token": 45,
                                                                    "end_token": 45,
                                                                    "label": "2"
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 47,
                                                                    "end_token": 47,
                                                                    "label": "n"
                                                                }
                                                            ],
                                                            "label": "== 2 * n"
                                                        }
                                                    ],
                                                    "label": "len(partial) == 2 * n:"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 49,
                                                    "end_token": 71,
                                                    "children": [
                                                        {
                                                            "type": "comment",
                                                            "start_token": 50,
                                                            "end_token": 62,
                                                            "label": "# When the combination is complete, add it to the result."
                                                        },
                                                        {
                                                            "type": "expression_statement",
                                                            "start_token": 64,
                                                            "end_token": 69,
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 64,
                                                                    "end_token": 69,
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "start_token": 64,
                                                                            "end_token": 65,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 64,
                                                                                    "end_token": 64,
                                                                                    "label": "result"
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 65,
                                                                                    "end_token": 65,
                                                                                    "label": "."
                                                                                }
                                                                            ],
                                                                            "label": "result."
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "start_token": 66,
                                                                            "end_token": 68,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 68,
                                                                                    "end_token": 68,
                                                                                    "label": "partial"
                                                                                }
                                                                            ],
                                                                            "label": "append(partial"
                                                                        }
                                                                    ],
                                                                    "label": "result.append(partial)"
                                                                }
                                                            ],
                                                            "label": "result.append(partial)"
                                                        },
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": 71,
                                                            "end_token": 71,
                                                            "label": "return"
                                                        }
                                                    ],
                                                    "label": "\n        # When the combination is complete, add it to the result.\n        result.append(partial)\n        return"
                                                }
                                            ],
                                            "label": "if len(partial) == 2 * n:\n        # When the combination is complete, add it to the result.\n        result.append(partial)\n        return"
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 74,
                                            "end_token": 111,
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "start_token": 75,
                                                    "end_token": 77,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 75,
                                                            "end_token": 75,
                                                            "label": "open_count"
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 77,
                                                            "end_token": 77,
                                                            "label": "n"
                                                        }
                                                    ],
                                                    "label": "open_count < n"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 79,
                                                    "end_token": 111,
                                                    "children": [
                                                        {
                                                            "type": "comment",
                                                            "start_token": 80,
                                                            "end_token": 94,
                                                            "label": "# If we can add an open parenthesis, do so, and recurse."
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 96,
                                                            "end_token": 111,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 96,
                                                                    "end_token": 96,
                                                                    "label": "backtrack"
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 97,
                                                                    "end_token": 110,
                                                                    "children": [
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "start_token": 98,
                                                                            "end_token": 100,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 98,
                                                                                    "end_token": 98,
                                                                                    "label": "partial"
                                                                                },
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 100,
                                                                                    "end_token": 100,
                                                                                    "label": "\"(\""
                                                                                }
                                                                            ],
                                                                            "label": "partial + \"(\""
                                                                        },
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "start_token": 102,
                                                                            "end_token": 104,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 102,
                                                                                    "end_token": 102,
                                                                                    "label": "open_count"
                                                                                },
                                                                                {
                                                                                    "type": "integer",
                                                                                    "start_token": 104,
                                                                                    "end_token": 104,
                                                                                    "label": "1"
                                                                                }
                                                                            ],
                                                                            "label": "open_count + 1"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 106,
                                                                            "end_token": 106,
                                                                            "label": "close_count"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 108,
                                                                            "end_token": 108,
                                                                            "label": "n"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 110,
                                                                            "end_token": 110,
                                                                            "label": "result"
                                                                        }
                                                                    ],
                                                                    "label": "(partial + \"(\", open_count + 1, close_count, n, result"
                                                                }
                                                            ],
                                                            "label": "backtrack(partial + \"(\", open_count + 1, close_count, n, result)"
                                                        }
                                                    ],
                                                    "label": "\n        # If we can add an open parenthesis, do so, and recurse.\n        backtrack(partial + \"(\", open_count + 1, close_count, n, result)"
                                                }
                                            ],
                                            "label": "if open_count < n:\n        # If we can add an open parenthesis, do so, and recurse.\n        backtrack(partial + \"(\", open_count + 1, close_count, n, result)"
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 114,
                                            "end_token": 163,
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "start_token": 115,
                                                    "end_token": 117,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 115,
                                                            "end_token": 115,
                                                            "label": "close_count"
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 117,
                                                            "end_token": 117,
                                                            "label": "open_count"
                                                        }
                                                    ],
                                                    "label": "close_count < open_count"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 119,
                                                    "end_token": 163,
                                                    "children": [
                                                        {
                                                            "type": "comment",
                                                            "start_token": 120,
                                                            "end_token": 146,
                                                            "label": "# If we can add a close parenthesis (it won't make the combination invalid),\n        # do so, and recurse."
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 148,
                                                            "end_token": 163,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 148,
                                                                    "end_token": 148,
                                                                    "label": "backtrack"
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 149,
                                                                    "end_token": 162,
                                                                    "children": [
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "start_token": 150,
                                                                            "end_token": 152,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 150,
                                                                                    "end_token": 150,
                                                                                    "label": "partial"
                                                                                },
                                                                                {
                                                                                    "type": "string",
                                                                                    "start_token": 152,
                                                                                    "end_token": 152,
                                                                                    "label": "\")\""
                                                                                }
                                                                            ],
                                                                            "label": "partial + \")\""
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 154,
                                                                            "end_token": 154,
                                                                            "label": "open_count"
                                                                        },
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "start_token": 156,
                                                                            "end_token": 158,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 156,
                                                                                    "end_token": 156,
                                                                                    "label": "close_count"
                                                                                },
                                                                                {
                                                                                    "type": "integer",
                                                                                    "start_token": 158,
                                                                                    "end_token": 158,
                                                                                    "label": "1"
                                                                                }
                                                                            ],
                                                                            "label": "close_count + 1"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 160,
                                                                            "end_token": 160,
                                                                            "label": "n"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 162,
                                                                            "end_token": 162,
                                                                            "label": "result"
                                                                        }
                                                                    ],
                                                                    "label": "(partial + \")\", open_count, close_count + 1, n, result"
                                                                }
                                                            ],
                                                            "label": "backtrack(partial + \")\", open_count, close_count + 1, n, result)"
                                                        }
                                                    ],
                                                    "label": "\n        # If we can add a close parenthesis (it won't make the combination invalid),\n        # do so, and recurse.\n        backtrack(partial + \")\", open_count, close_count + 1, n, result)"
                                                }
                                            ],
                                            "label": "if close_count < open_count:\n        # If we can add a close parenthesis (it won't make the combination invalid),\n        # do so, and recurse.\n        backtrack(partial + \")\", open_count, close_count + 1, n, result)"
                                        }
                                    ],
                                    "label": "if len(partial) == 2 * n:\n        # When the combination is complete, add it to the result.\n        result.append(partial)\n        return\n\n    if open_count < n:\n        # If we can add an open parenthesis, do so, and recurse.\n        backtrack(partial + \"(\", open_count + 1, close_count, n, result)\n\n    if close_count < open_count:\n        # If we can add a close parenthesis (it won't make the combination invalid),\n        # do so, and recurse.\n        backtrack(partial + \")\", open_count, close_count + 1, n, result)"
                                }
                            ],
                            "label": "def backtrack(\n    partial: str, open_count: int, close_count: int, n: int, result: list[str]\n) -> None:\n    \"\"\"\n    Generate valid combinations of balanced parentheses using recursion.\n\n    :param partial: A string representing the current combination.\n    :param open_count: An integer representing the count of open parentheses.\n    :param close_count: An integer representing the count of close parentheses.\n    :param n: An integer representing the total number of pairs.\n    :param result: A list to store valid combinations.\n    :return: None\n\n    This function uses recursion to explore all possible combinations,\n    ensuring that at each step, the parentheses remain balanced.\n\n    Example:\n    >>> result = []\n    >>> backtrack(\"\", 0, 0, 2, result)\n    >>> result\n    ['(())', '()()']\n    \"\"\"\n    if len(partial) == 2 * n:\n        # When the combination is complete, add it to the result.\n        result.append(partial)\n        return\n\n    if open_count < n:\n        # If we can add an open parenthesis, do so, and recurse.\n        backtrack(partial + \"(\", open_count + 1, close_count, n, result)\n\n    if close_count < open_count:\n        # If we can add a close parenthesis (it won't make the combination invalid),\n        # do so, and recurse.\n        backtrack(partial + \")\", open_count, close_count + 1, n, result)\n"
                        }
                    ],
                    "label": "def backtrack(\n    partial: str, open_count: int, close_count: int, n: int, result: list[str]\n) -> None:\n    \"\"\"\n    Generate valid combinations of balanced parentheses using recursion.\n\n    :param partial: A string representing the current combination.\n    :param open_count: An integer representing the count of open parentheses.\n    :param close_count: An integer representing the count of close parentheses.\n    :param n: An integer representing the total number of pairs.\n    :param result: A list to store valid combinations.\n    :return: None\n\n    This function uses recursion to explore all possible combinations,\n    ensuring that at each step, the parentheses remain balanced.\n\n    Example:\n    >>> result = []\n    >>> backtrack(\"\", 0, 0, 2, result)\n    >>> result\n    ['(())', '()()']\n    \"\"\"\n    if len(partial) == 2 * n:\n        # When the combination is complete, add it to the result.\n        result.append(partial)\n        return\n\n    if open_count < n:\n        # If we can add an open parenthesis, do so, and recurse.\n        backtrack(partial + \"(\", open_count + 1, close_count, n, result)\n\n    if close_count < open_count:\n        # If we can add a close parenthesis (it won't make the combination invalid),\n        # do so, and recurse.\n        backtrack(partial + \")\", open_count, close_count + 1, n, result)\n"
                }
            ]
        },
        {
            "type": "function_placeholder",
            "name": "generate_parenthesis",
            "start_line": 48,
            "end_line": 71,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 44,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 44,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 0,
                                    "end_token": 0,
                                    "children": [],
                                    "label": "def"
                                },
                                {
                                    "type": "identifier",
                                    "start_token": 1,
                                    "end_token": 1,
                                    "children": [],
                                    "label": "generate_parenthesis"
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 2,
                                    "end_token": 6,
                                    "children": [
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 3,
                                            "end_token": 5,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 3,
                                                    "end_token": 3,
                                                    "children": [],
                                                    "label": "n"
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": [],
                                                    "label": "int"
                                                }
                                            ],
                                            "label": "n: int"
                                        }
                                    ],
                                    "label": "(n: int)"
                                },
                                {
                                    "type": "generic_type",
                                    "start_token": 8,
                                    "end_token": 12,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 9,
                                            "end_token": 9,
                                            "children": [],
                                            "label": "list"
                                        },
                                        {
                                            "type": "type_parameter",
                                            "start_token": 11,
                                            "end_token": 11,
                                            "children": [],
                                            "label": "str"
                                        }
                                    ],
                                    "label": "> list[str]"
                                },
                                {
                                    "type": "string",
                                    "start_token": 15,
                                    "end_token": 17,
                                    "children": [],
                                    "label": "\"\"\"\n    Generate valid combinations of balanced parentheses for a given n.\n\n    :param n: An integer representing the number of pairs of parentheses.\n    :return: A list of strings with valid combinations.\n\n    This function uses a recursive approach to generate the combinations.\n\n    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.\n    Space Complexity: O(n) - where 'n' is the number of pairs.\n\n    Example 1:\n    >>> generate_parenthesis(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()']\n\n    Example 2:\n    >>> generate_parenthesis(1)\n    ['()']\n    \"\"\""
                                },
                                {
                                    "type": "block",
                                    "start_token": 19,
                                    "end_token": 44,
                                    "children": [
                                        {
                                            "type": "assignment",
                                            "start_token": 20,
                                            "end_token": 28,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 20,
                                                    "end_token": 20,
                                                    "children": [],
                                                    "label": "result"
                                                },
                                                {
                                                    "type": "generic_type",
                                                    "start_token": 22,
                                                    "end_token": 24,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 22,
                                                            "end_token": 22,
                                                            "children": [],
                                                            "label": "list"
                                                        },
                                                        {
                                                            "type": "type_parameter",
                                                            "start_token": 24,
                                                            "end_token": 24,
                                                            "children": [],
                                                            "label": "str"
                                                        }
                                                    ],
                                                    "label": "list[str"
                                                },
                                                {
                                                    "type": "list",
                                                    "start_token": 27,
                                                    "end_token": 28,
                                                    "children": [],
                                                    "label": "[]"
                                                }
                                            ],
                                            "label": "result: list[str] = []"
                                        },
                                        {
                                            "type": "call",
                                            "start_token": 30,
                                            "end_token": 41,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 30,
                                                    "end_token": 30,
                                                    "children": [],
                                                    "label": "backtrack"
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "start_token": 31,
                                                    "end_token": 41,
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "start_token": 32,
                                                            "end_token": 32,
                                                            "children": [],
                                                            "label": "\"\""
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "start_token": 34,
                                                            "end_token": 34,
                                                            "children": [],
                                                            "label": "0"
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "start_token": 36,
                                                            "end_token": 36,
                                                            "children": [],
                                                            "label": "0"
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 38,
                                                            "end_token": 38,
                                                            "children": [],
                                                            "label": "n"
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 40,
                                                            "end_token": 40,
                                                            "children": [],
                                                            "label": "result"
                                                        }
                                                    ],
                                                    "label": "(\"\", 0, 0, n, result)"
                                                }
                                            ],
                                            "label": "backtrack(\"\", 0, 0, n, result)"
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": 43,
                                            "end_token": 44,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 44,
                                                    "end_token": 44,
                                                    "children": [],
                                                    "label": "result"
                                                }
                                            ],
                                            "label": "return result"
                                        }
                                    ],
                                    "label": "\n    result: list[str] = []\n    backtrack(\"\", 0, 0, n, result)\n    return result"
                                }
                            ],
                            "label": "def generate_parenthesis(n: int) -> list[str]:\n    \"\"\"\n    Generate valid combinations of balanced parentheses for a given n.\n\n    :param n: An integer representing the number of pairs of parentheses.\n    :return: A list of strings with valid combinations.\n\n    This function uses a recursive approach to generate the combinations.\n\n    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.\n    Space Complexity: O(n) - where 'n' is the number of pairs.\n\n    Example 1:\n    >>> generate_parenthesis(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()']\n\n    Example 2:\n    >>> generate_parenthesis(1)\n    ['()']\n    \"\"\"\n\n    result: list[str] = []\n    backtrack(\"\", 0, 0, n, result)\n    return result"
                        }
                    ],
                    "label": "def generate_parenthesis(n: int) -> list[str]:\n    \"\"\"\n    Generate valid combinations of balanced parentheses for a given n.\n\n    :param n: An integer representing the number of pairs of parentheses.\n    :return: A list of strings with valid combinations.\n\n    This function uses a recursive approach to generate the combinations.\n\n    Time Complexity: O(2^(2n)) - In the worst case, we have 2^(2n) combinations.\n    Space Complexity: O(n) - where 'n' is the number of pairs.\n\n    Example 1:\n    >>> generate_parenthesis(3)\n    ['((()))', '(()())', '(())()', '()(())', '()()()']\n\n    Example 2:\n    >>> generate_parenthesis(1)\n    ['()']\n    \"\"\"\n\n    result: list[str] = []\n    backtrack(\"\", 0, 0, n, result)\n    return result"
                }
            ]
        }
    ],
    "label": "\"\"\"\nauthor: Aayush Soni\nGiven n pairs of parentheses, write a function to generate all\ncombinations of well-formed parentheses.\nInput: n = 2\nOutput: [\"(())\",\"()()\"]\nLeetcode link: https://leetcode.com/problems/generate-parentheses/description/\n\"\"\"\n\n\n\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
}