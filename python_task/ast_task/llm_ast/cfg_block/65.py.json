{
    "type": "module",
    "start_token": 0,
    "end_token": 25,
    "children": [
        {
            "type": "string",
            "start_token": 1,
            "end_token": 1,
            "children": [],
            "label": "\"\nProblem source: https://www.hackerrank.com/challenges/the-power-sum/problem\nFind the number of ways that a given integer X, can be expressed as the sum\nof the Nth powers of unique, natural numbers. For example, if X=13 and N=2.\nWe have to find all combinations of unique squares adding up to 13.\nThe only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10.\n\""
        },
        {
            "type": "if_statement",
            "start_token": 10,
            "end_token": 25,
            "children": [
                {
                    "type": "comparison_operator",
                    "start_token": 11,
                    "end_token": 14,
                    "children": [],
                    "label": "__name__ == \"__main__\""
                },
                {
                    "type": "block",
                    "start_token": 16,
                    "end_token": 25,
                    "children": [
                        {
                            "type": "import_statement",
                            "start_token": 17,
                            "end_token": 18,
                            "children": [],
                            "label": "import doctest"
                        },
                        {
                            "type": "expression_statement",
                            "start_token": 21,
                            "end_token": 25,
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 21,
                                    "end_token": 25,
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 21,
                                            "end_token": 23,
                                            "children": [],
                                            "label": "doctest.testmod"
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 24,
                                            "end_token": 25,
                                            "children": [],
                                            "label": "()"
                                        }
                                    ],
                                    "label": "doctest.testmod()"
                                }
                            ],
                            "label": "doctest.testmod()"
                        }
                    ],
                    "label": "\n    import doctest\n\n    doctest.testmod()"
                }
            ],
            "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
        },
        {
            "type": "function_placeholder",
            "name": "backtrack",
            "start_line": 10,
            "end_line": 51,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 195,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 195,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 1,
                                    "end_token": 1,
                                    "label": "backtrack"
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 2,
                                    "end_token": 29,
                                    "children": [
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 3,
                                            "end_token": 6,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 3,
                                                    "end_token": 3,
                                                    "label": "\n"
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 6,
                                                    "end_token": 6,
                                                    "label": "int"
                                                }
                                            ],
                                            "label": "\n    needed_sum: int"
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 8,
                                            "end_token": 11,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 9,
                                                    "end_token": 9,
                                                    "label": "power"
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 11,
                                                    "end_token": 11,
                                                    "label": "int"
                                                }
                                            ],
                                            "label": "\n    power: int"
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 13,
                                            "end_token": 16,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 14,
                                                    "end_token": 14,
                                                    "label": "current_number"
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 16,
                                                    "end_token": 16,
                                                    "label": "int"
                                                }
                                            ],
                                            "label": "\n    current_number: int"
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 18,
                                            "end_token": 21,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 19,
                                                    "end_token": 19,
                                                    "label": "current_sum"
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 21,
                                                    "end_token": 21,
                                                    "label": "int"
                                                }
                                            ],
                                            "label": "\n    current_sum: int"
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 23,
                                            "end_token": 26,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 24,
                                                    "end_token": 24,
                                                    "label": "solutions_count"
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 26,
                                                    "end_token": 26,
                                                    "label": "int"
                                                }
                                            ],
                                            "label": "\n    solutions_count: int"
                                        }
                                    ],
                                    "label": "(\n    needed_sum: int,\n    power: int,\n    current_number: int,\n    current_sum: int,\n    solutions_count: int,\n)"
                                },
                                {
                                    "type": "generic_type",
                                    "start_token": 31,
                                    "end_token": 37,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 32,
                                            "end_token": 32,
                                            "label": "tuple"
                                        },
                                        {
                                            "type": "type_parameter",
                                            "start_token": 33,
                                            "end_token": 36,
                                            "children": [
                                                {
                                                    "type": "type",
                                                    "start_token": 34,
                                                    "end_token": 34,
                                                    "label": "int"
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 36,
                                                    "end_token": 36,
                                                    "label": "int"
                                                }
                                            ],
                                            "label": "[int, int"
                                        }
                                    ],
                                    "label": "> tuple[int, int]"
                                },
                                {
                                    "type": "block",
                                    "start_token": 39,
                                    "end_token": 195,
                                    "children": [
                                        {
                                            "type": "string",
                                            "start_token": 40,
                                            "end_token": 42,
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "start_token": 40,
                                                    "end_token": 40,
                                                    "label": "\"\""
                                                },
                                                {
                                                    "type": "string_content",
                                                    "start_token": 41,
                                                    "end_token": 41,
                                                    "label": "\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \""
                                                },
                                                {
                                                    "type": "string_end",
                                                    "start_token": 42,
                                                    "end_token": 42,
                                                    "label": "\"\""
                                                }
                                            ],
                                            "label": "\"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\""
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 44,
                                            "end_token": 195,
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "start_token": 45,
                                                    "end_token": 48,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 45,
                                                            "end_token": 45,
                                                            "label": "current_sum"
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 48,
                                                            "end_token": 48,
                                                            "label": "needed_sum"
                                                        }
                                                    ],
                                                    "label": "current_sum == needed_sum"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 49,
                                                    "end_token": 79,
                                                    "children": [
                                                        {
                                                            "type": "comment",
                                                            "start_token": 51,
                                                            "end_token": 68,
                                                            "label": "# If the sum of the powers is equal to needed_sum, then we have a solution."
                                                        },
                                                        {
                                                            "type": "augmented_assignment",
                                                            "start_token": 70,
                                                            "end_token": 73,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 70,
                                                                    "end_token": 70,
                                                                    "label": "solutions_count"
                                                                }
                                                            ],
                                                            "label": "solutions_count += 1"
                                                        },
                                                        {
                                                            "type": "return_statement",
                                                            "start_token": 75,
                                                            "end_token": 78,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 76,
                                                                    "end_token": 76,
                                                                    "label": "current_sum"
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 78,
                                                                    "end_token": 78,
                                                                    "label": "solutions_count"
                                                                }
                                                            ],
                                                            "label": "return current_sum, solutions_count"
                                                        }
                                                    ],
                                                    "label": ":\n        # If the sum of the powers is equal to needed_sum, then we have a solution.\n        solutions_count += 1\n        return current_sum, solutions_count\n"
                                                },
                                                {
                                                    "type": "assignment",
                                                    "start_token": 81,
                                                    "end_token": 86,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 81,
                                                            "end_token": 81,
                                                            "label": "i_to_n"
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "start_token": 83,
                                                            "end_token": 86,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 83,
                                                                    "end_token": 83,
                                                                    "label": "current_number"
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 86,
                                                                    "end_token": 86,
                                                                    "label": "power"
                                                                }
                                                            ],
                                                            "label": "current_number**power"
                                                        }
                                                    ],
                                                    "label": "i_to_n = current_number**power"
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "start_token": 88,
                                                    "end_token": 144,
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": 89,
                                                            "end_token": 94,
                                                            "children": [
                                                                {
                                                                    "type": "binary_operator",
                                                                    "start_token": 89,
                                                                    "end_token": 91,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 89,
                                                                            "end_token": 89,
                                                                            "label": "current_sum"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 91,
                                                                            "end_token": 91,
                                                                            "label": "i_to_n"
                                                                        }
                                                                    ],
                                                                    "label": "current_sum + i_to_n"
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 94,
                                                                    "end_token": 94,
                                                                    "label": "needed_sum"
                                                                }
                                                            ],
                                                            "label": "current_sum + i_to_n <= needed_sum"
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 95,
                                                            "end_token": 144,
                                                            "children": [
                                                                {
                                                                    "type": "comment",
                                                                    "start_token": 97,
                                                                    "end_token": 113,
                                                                    "label": "# If the sum of the powers is less than needed_sum, then continue adding powers."
                                                                },
                                                                {
                                                                    "type": "augmented_assignment",
                                                                    "start_token": 115,
                                                                    "end_token": 118,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 115,
                                                                            "end_token": 115,
                                                                            "label": "current_sum"
                                                                        }
                                                                    ],
                                                                    "label": "current_sum += i_to_n"
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 120,
                                                                    "end_token": 139,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 124,
                                                                            "end_token": 124,
                                                                            "label": "backtrack"
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "start_token": 125,
                                                                            "end_token": 138,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 127,
                                                                                    "end_token": 127,
                                                                                    "label": "needed_sum"
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 129,
                                                                                    "end_token": 129,
                                                                                    "label": "power"
                                                                                },
                                                                                {
                                                                                    "type": "binary_operator",
                                                                                    "start_token": 131,
                                                                                    "end_token": 134,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 131,
                                                                                            "end_token": 131,
                                                                                            "label": "current_number"
                                                                                        }
                                                                                    ],
                                                                                    "label": "current_number + 1,"
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 135,
                                                                                    "end_token": 135,
                                                                                    "label": "current_sum"
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 137,
                                                                                    "end_token": 137,
                                                                                    "label": "solutions_count"
                                                                                }
                                                                            ],
                                                                            "label": "(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n"
                                                                        }
                                                                    ],
                                                                    "label": "current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )"
                                                                },
                                                                {
                                                                    "type": "augmented_assignment",
                                                                    "start_token": 141,
                                                                    "end_token": 144,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 141,
                                                                            "end_token": 141,
                                                                            "label": "current_sum"
                                                                        }
                                                                    ],
                                                                    "label": "current_sum -= i_to_n"
                                                                }
                                                            ],
                                                            "label": ":\n        # If the sum of the powers is less than needed_sum, then continue adding powers.\n        current_sum += i_to_n\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n        current_sum -= i_to_n"
                                                        }
                                                    ],
                                                    "label": "if current_sum + i_to_n <= needed_sum:\n        # If the sum of the powers is less than needed_sum, then continue adding powers.\n        current_sum += i_to_n\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n        current_sum -= i_to_n"
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "start_token": 146,
                                                    "end_token": 190,
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": 147,
                                                            "end_token": 149,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 147,
                                                                    "end_token": 147,
                                                                    "label": "i_to_n"
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 149,
                                                                    "end_token": 149,
                                                                    "label": "needed_sum"
                                                                }
                                                            ],
                                                            "label": "i_to_n < needed_sum"
                                                        },
                                                        {
                                                            "type": "block",
                                                            "start_token": 150,
                                                            "end_token": 190,
                                                            "children": [
                                                                {
                                                                    "type": "comment",
                                                                    "start_token": 152,
                                                                    "end_token": 169,
                                                                    "label": "# If the power of i is less than needed_sum, then try with the next power."
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 171,
                                                                    "end_token": 190,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 175,
                                                                            "end_token": 175,
                                                                            "label": "backtrack"
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "start_token": 176,
                                                                            "end_token": 189,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 178,
                                                                                    "end_token": 178,
                                                                                    "label": "needed_sum"
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 180,
                                                                                    "end_token": 180,
                                                                                    "label": "power"
                                                                                },
                                                                                {
                                                                                    "type": "binary_operator",
                                                                                    "start_token": 182,
                                                                                    "end_token": 184,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 182,
                                                                                            "end_token": 182,
                                                                                            "label": "current_number"
                                                                                        }
                                                                                    ],
                                                                                    "label": "current_number + 1"
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 186,
                                                                                    "end_token": 186,
                                                                                    "label": "current_sum"
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 188,
                                                                                    "end_token": 188,
                                                                                    "label": "solutions_count"
                                                                                }
                                                                            ],
                                                                            "label": "(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n"
                                                                        }
                                                                    ],
                                                                    "label": "current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )"
                                                                }
                                                            ],
                                                            "label": ":\n        # If the power of i is less than needed_sum, then try with the next power.\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )"
                                                        }
                                                    ],
                                                    "label": "if i_to_n < needed_sum:\n        # If the power of i is less than needed_sum, then try with the next power.\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )"
                                                },
                                                {
                                                    "type": "return_statement",
                                                    "start_token": 192,
                                                    "end_token": 195,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 193,
                                                            "end_token": 193,
                                                            "label": "current_sum"
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 195,
                                                            "end_token": 195,
                                                            "label": "solutions_count"
                                                        }
                                                    ],
                                                    "label": "return current_sum, solutions_count"
                                                }
                                            ],
                                            "label": "if current_sum == needed_sum:\n        # If the sum of the powers is equal to needed_sum, then we have a solution.\n        solutions_count += 1\n        return current_sum, solutions_count\n\n    i_to_n = current_number**power\n    if current_sum + i_to_n <= needed_sum:\n        # If the sum of the powers is less than needed_sum, then continue adding powers.\n        current_sum += i_to_n\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n        current_sum -= i_to_n\n    if i_to_n < needed_sum:\n        # If the power of i is less than needed_sum, then try with the next power.\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n    return current_sum, solutions_count"
                                        }
                                    ],
                                    "label": "\n    \"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\"\n    if current_sum == needed_sum:\n        # If the sum of the powers is equal to needed_sum, then we have a solution.\n        solutions_count += 1\n        return current_sum, solutions_count\n\n    i_to_n = current_number**power\n    if current_sum + i_to_n <= needed_sum:\n        # If the sum of the powers is less than needed_sum, then continue adding powers.\n        current_sum += i_to_n\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n        current_sum -= i_to_n\n    if i_to_n < needed_sum:\n        # If the power of i is less than needed_sum, then try with the next power.\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n    return current_sum, solutions_count"
                                }
                            ],
                            "label": "def backtrack(\n    needed_sum: int,\n    power: int,\n    current_number: int,\n    current_sum: int,\n    solutions_count: int,\n) -> tuple[int, int]:\n    \"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\"\n    if current_sum == needed_sum:\n        # If the sum of the powers is equal to needed_sum, then we have a solution.\n        solutions_count += 1\n        return current_sum, solutions_count\n\n    i_to_n = current_number**power\n    if current_sum + i_to_n <= needed_sum:\n        # If the sum of the powers is less than needed_sum, then continue adding powers.\n        current_sum += i_to_n\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n        current_sum -= i_to_n\n    if i_to_n < needed_sum:\n        # If the power of i is less than needed_sum, then try with the next power.\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n    return current_sum, solutions_count"
                        }
                    ],
                    "label": "def backtrack(\n    needed_sum: int,\n    power: int,\n    current_number: int,\n    current_sum: int,\n    solutions_count: int,\n) -> tuple[int, int]:\n    \"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\"\n    if current_sum == needed_sum:\n        # If the sum of the powers is equal to needed_sum, then we have a solution.\n        solutions_count += 1\n        return current_sum, solutions_count\n\n    i_to_n = current_number**power\n    if current_sum + i_to_n <= needed_sum:\n        # If the sum of the powers is less than needed_sum, then continue adding powers.\n        current_sum += i_to_n\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n        current_sum -= i_to_n\n    if i_to_n < needed_sum:\n        # If the power of i is less than needed_sum, then try with the next power.\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n    return current_sum, solutions_count"
                }
            ]
        },
        {
            "type": "function_placeholder",
            "name": "solve",
            "start_line": 54,
            "end_line": 85,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 72,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 72,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 1,
                                    "end_token": 1,
                                    "children": [],
                                    "label": "solve"
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 2,
                                    "end_token": 10,
                                    "children": [
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 3,
                                            "end_token": 5,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 3,
                                                    "end_token": 3,
                                                    "children": [],
                                                    "label": "needed_sum"
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": [],
                                                    "label": "int"
                                                }
                                            ],
                                            "label": "needed_sum: int"
                                        },
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 7,
                                            "end_token": 9,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 7,
                                                    "end_token": 7,
                                                    "children": [],
                                                    "label": "power"
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 9,
                                                    "end_token": 9,
                                                    "children": [],
                                                    "label": "int"
                                                }
                                            ],
                                            "label": "power: int"
                                        }
                                    ],
                                    "label": "(needed_sum: int, power: int)"
                                },
                                {
                                    "type": "type",
                                    "start_token": 12,
                                    "end_token": 13,
                                    "children": [],
                                    "label": "> int"
                                },
                                {
                                    "type": "block",
                                    "start_token": 14,
                                    "end_token": 72,
                                    "children": [
                                        {
                                            "type": "string",
                                            "start_token": 16,
                                            "end_token": 18,
                                            "children": [],
                                            "label": "\"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\""
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 20,
                                            "end_token": 39,
                                            "children": [
                                                {
                                                    "type": "boolean_operator",
                                                    "start_token": 21,
                                                    "end_token": 38,
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": 23,
                                                            "end_token": 29,
                                                            "children": [
                                                                {
                                                                    "type": "integer",
                                                                    "start_token": 23,
                                                                    "end_token": 23,
                                                                    "children": [],
                                                                    "label": "1"
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 26,
                                                                    "end_token": 26,
                                                                    "children": [],
                                                                    "label": "needed_sum"
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "start_token": 29,
                                                                    "end_token": 29,
                                                                    "children": [],
                                                                    "label": "1000"
                                                                }
                                                            ],
                                                            "label": "1 <= needed_sum <= 1000"
                                                        },
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": 31,
                                                            "end_token": 37,
                                                            "children": [
                                                                {
                                                                    "type": "integer",
                                                                    "start_token": 31,
                                                                    "end_token": 31,
                                                                    "children": [],
                                                                    "label": "2"
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 34,
                                                                    "end_token": 34,
                                                                    "children": [],
                                                                    "label": "power"
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "start_token": 37,
                                                                    "end_token": 37,
                                                                    "children": [],
                                                                    "label": "10"
                                                                }
                                                            ],
                                                            "label": "2 <= power <= 10"
                                                        }
                                                    ],
                                                    "label": "not (1 <= needed_sum <= 1000 and 2 <= power <= 10)"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 39,
                                                    "end_token": 49,
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 41,
                                                            "end_token": 49,
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 42,
                                                                    "end_token": 49,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 42,
                                                                            "end_token": 42,
                                                                            "children": [],
                                                                            "label": "ValueError"
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "start_token": 43,
                                                                            "end_token": 49,
                                                                            "children": [
                                                                                {
                                                                                    "type": "concatenated_string",
                                                                                    "start_token": 45,
                                                                                    "end_token": 47,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "start_token": 45,
                                                                                            "end_token": 45,
                                                                                            "children": [],
                                                                                            "label": "\"Invalid input\\n\""
                                                                                        },
                                                                                        {
                                                                                            "type": "string",
                                                                                            "start_token": 47,
                                                                                            "end_token": 47,
                                                                                            "children": [],
                                                                                            "label": "\"needed_sum must be between 1 and 1000, power between 2 and 10.\""
                                                                                        }
                                                                                    ],
                                                                                    "label": "\"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\""
                                                                                }
                                                                            ],
                                                                            "label": "(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )"
                                                                        }
                                                                    ],
                                                                    "label": "ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )"
                                                                }
                                                            ],
                                                            "label": "raise ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )"
                                                        }
                                                    ],
                                                    "label": ":\n        raise ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )"
                                                }
                                            ],
                                            "label": "if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):"
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": 52,
                                            "end_token": 72,
                                            "children": [
                                                {
                                                    "type": "subscript",
                                                    "start_token": 53,
                                                    "end_token": 67,
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 53,
                                                            "end_token": 64,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 53,
                                                                    "end_token": 53,
                                                                    "children": [],
                                                                    "label": "backtrack"
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 54,
                                                                    "end_token": 63,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 55,
                                                                            "end_token": 55,
                                                                            "children": [],
                                                                            "label": "needed_sum"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 57,
                                                                            "end_token": 57,
                                                                            "children": [],
                                                                            "label": "power"
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "start_token": 59,
                                                                            "end_token": 59,
                                                                            "children": [],
                                                                            "label": "1"
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "start_token": 61,
                                                                            "end_token": 61,
                                                                            "children": [],
                                                                            "label": "0"
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "start_token": 63,
                                                                            "end_token": 63,
                                                                            "children": [],
                                                                            "label": "0"
                                                                        }
                                                                    ],
                                                                    "label": "(needed_sum, power, 1, 0, 0"
                                                                }
                                                            ],
                                                            "label": "backtrack(needed_sum, power, 1, 0, 0)"
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "start_token": 66,
                                                            "end_token": 66,
                                                            "children": [],
                                                            "label": "1"
                                                        }
                                                    ],
                                                    "label": "backtrack(needed_sum, power, 1, 0, 0)[1]"
                                                },
                                                {
                                                    "type": "comment",
                                                    "start_token": 68,
                                                    "end_token": 71,
                                                    "children": [],
                                                    "label": "# Return the solutions_count"
                                                }
                                            ],
                                            "label": "return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count\n"
                                        }
                                    ],
                                    "label": ":\n    \"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\"\n    if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):\n        raise ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )\n\n    return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count\n"
                                }
                            ],
                            "label": "def solve(needed_sum: int, power: int) -> int:\n    \"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\"\n    if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):\n        raise ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )\n\n    return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count\n"
                        }
                    ],
                    "label": "def solve(needed_sum: int, power: int) -> int:\n    \"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\"\n    if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):\n        raise ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )\n\n    return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count\n"
                }
            ]
        }
    ],
    "label": "\"\"\"\nProblem source: https://www.hackerrank.com/challenges/the-power-sum/problem\nFind the number of ways that a given integer X, can be expressed as the sum\nof the Nth powers of unique, natural numbers. For example, if X=13 and N=2.\nWe have to find all combinations of unique squares adding up to 13.\nThe only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10.\n\"\"\"\n\n\n\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
}