{
    "type": "module",
    "start_token": 0,
    "end_token": 10,
    "children": [
        {
            "type": "comment",
            "start_token": 0,
            "end_token": 0,
            "children": [],
            "label": "#"
        },
        {
            "type": "string",
            "start_token": 1,
            "end_token": 10,
            "children": [
                {
                    "type": "string_start",
                    "start_token": 1,
                    "end_token": 1,
                    "children": [],
                    "label": "Information"
                },
                {
                    "type": "string_content",
                    "start_token": 2,
                    "end_token": 9,
                    "children": [],
                    "label": "on 2's complement: https:"
                },
                {
                    "type": "string_end",
                    "start_token": 10,
                    "end_token": 10,
                    "children": [],
                    "label": "//en.wikipedia.org/wiki/Two%27s_complement\n\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"
                }
            ],
            "label": "Information on 2's complement: https://en.wikipedia.org/wiki/Two%27s_complement\n\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"
        },
        {
            "type": "block",
            "start_token": 11,
            "end_token": 14,
            "children": [
                {
                    "type": "if_statement",
                    "start_token": 11,
                    "end_token": 14,
                    "children": [
                        {
                            "type": "if_clause",
                            "start_token": 11,
                            "end_token": 14,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 11,
                                    "end_token": 11,
                                    "children": [],
                                    "label": ""
                                },
                                {
                                    "type": "comparison_operator",
                                    "start_token": 12,
                                    "end_token": 12,
                                    "children": [],
                                    "label": ""
                                },
                                {
                                    "type": "string",
                                    "start_token": 13,
                                    "end_token": 13,
                                    "children": [
                                        {
                                            "type": "string_start",
                                            "start_token": 13,
                                            "end_token": 13,
                                            "children": [],
                                            "label": ""
                                        },
                                        {
                                            "type": "string_content",
                                            "start_token": 13,
                                            "end_token": 13,
                                            "children": [],
                                            "label": ""
                                        },
                                        {
                                            "type": "string_end",
                                            "start_token": 13,
                                            "end_token": 13,
                                            "children": [],
                                            "label": ""
                                        }
                                    ],
                                    "label": ""
                                }
                            ],
                            "label": ""
                        }
                    ],
                    "label": ""
                },
                {
                    "type": "import_statement",
                    "start_token": 15,
                    "end_token": 16,
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 15,
                            "end_token": 15,
                            "children": [],
                            "label": ""
                        },
                        {
                            "type": "identifier",
                            "start_token": 16,
                            "end_token": 16,
                            "children": [],
                            "label": ""
                        }
                    ],
                    "label": ""
                },
                {
                    "type": "call",
                    "start_token": 17,
                    "end_token": 17,
                    "children": [
                        {
                            "type": "identifier",
                            "start_token": 17,
                            "end_token": 17,
                            "children": [],
                            "label": ""
                        }
                    ],
                    "label": ""
                }
            ],
            "label": ""
        },
        {
            "type": "function_placeholder",
            "name": "twos_complement",
            "start_line": 4,
            "end_line": 37,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 102,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 102,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 1,
                                    "end_token": 1,
                                    "label": "twos_complement"
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 2,
                                    "end_token": 6,
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "start_token": 3,
                                            "end_token": 3,
                                            "label": "number"
                                        },
                                        {
                                            "type": "type",
                                            "start_token": 5,
                                            "end_token": 5,
                                            "label": "int"
                                        }
                                    ],
                                    "label": "(number: int)"
                                },
                                {
                                    "type": "type",
                                    "start_token": 9,
                                    "end_token": 9,
                                    "label": "str"
                                },
                                {
                                    "type": "block",
                                    "start_token": 11,
                                    "end_token": 102,
                                    "children": [
                                        {
                                            "type": "string",
                                            "start_token": 12,
                                            "end_token": 13,
                                            "label": "\"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \""
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 16,
                                            "end_token": 26,
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "start_token": 17,
                                                    "end_token": 19,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 17,
                                                            "end_token": 17,
                                                            "label": "number"
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "start_token": 19,
                                                            "end_token": 19,
                                                            "label": "0"
                                                        }
                                                    ],
                                                    "label": "number > 0"
                                                },
                                                {
                                                    "type": "block",
                                                    "start_token": 21,
                                                    "end_token": 26,
                                                    "children": [
                                                        {
                                                            "type": "raise_statement",
                                                            "start_token": 22,
                                                            "end_token": 26,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 23,
                                                                    "end_token": 23,
                                                                    "label": "ValueError"
                                                                },
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 25,
                                                                    "end_token": 25,
                                                                    "label": "\"input must be a negative integer\""
                                                                }
                                                            ],
                                                            "label": "raise ValueError(\"input must be a negative integer\")"
                                                        }
                                                    ],
                                                    "label": "\n        raise ValueError(\"input must be a negative integer\")"
                                                }
                                            ],
                                            "label": "if number > 0:\n        raise ValueError(\"input must be a negative integer\")"
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 28,
                                            "end_token": 40,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 28,
                                                    "end_token": 28,
                                                    "label": "binary_number_length"
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 30,
                                                    "end_token": 40,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 30,
                                                            "end_token": 30,
                                                            "label": "len"
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 32,
                                                            "end_token": 39,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 32,
                                                                    "end_token": 32,
                                                                    "label": "bin"
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 34,
                                                                    "end_token": 34,
                                                                    "label": "number"
                                                                }
                                                            ],
                                                            "label": "bin(number)[3:]"
                                                        }
                                                    ],
                                                    "label": "len(bin(number)[3:])"
                                                }
                                            ],
                                            "label": "binary_number_length = len(bin(number)[3:])"
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 42,
                                            "end_token": 61,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 42,
                                                    "end_token": 42,
                                                    "label": "twos_complement_number"
                                                },
                                                {
                                                    "type": "call",
                                                    "start_token": 44,
                                                    "end_token": 61,
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 44,
                                                            "end_token": 44,
                                                            "label": "bin"
                                                        },
                                                        {
                                                            "type": "binary_operator",
                                                            "start_token": 46,
                                                            "end_token": 56,
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "start_token": 46,
                                                                    "end_token": 49,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 46,
                                                                            "end_token": 46,
                                                                            "label": "abs"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 48,
                                                                            "end_token": 48,
                                                                            "label": "number"
                                                                        }
                                                                    ],
                                                                    "label": "abs(number)"
                                                                },
                                                                {
                                                                    "type": "binary_operator",
                                                                    "start_token": 51,
                                                                    "end_token": 55,
                                                                    "children": [
                                                                        {
                                                                            "type": "integer",
                                                                            "start_token": 52,
                                                                            "end_token": 52,
                                                                            "label": "1"
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 55,
                                                                            "end_token": 55,
                                                                            "label": "binary_number_length"
                                                                        }
                                                                    ],
                                                                    "label": "(1 << binary_number_length"
                                                                }
                                                            ],
                                                            "label": "abs(number) - (1 << binary_number_length)"
                                                        }
                                                    ],
                                                    "label": "bin(abs(number) - (1 << binary_number_length))[3:]"
                                                }
                                            ],
                                            "label": "twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]"
                                        },
                                        {
                                            "type": "assignment",
                                            "start_token": 63,
                                            "end_token": 96,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 63,
                                                    "end_token": 63,
                                                    "label": "twos_complement_number"
                                                },
                                                {
                                                    "type": "conditional_expression",
                                                    "start_token": 65,
                                                    "end_token": 96,
                                                    "children": [
                                                        {
                                                            "type": "binary_operator",
                                                            "start_token": 67,
                                                            "end_token": 85,
                                                            "children": [
                                                                {
                                                                    "type": "string",
                                                                    "start_token": 69,
                                                                    "end_token": 69,
                                                                    "label": "\"1\""
                                                                },
                                                                {
                                                                    "type": "binary_operator",
                                                                    "start_token": 71,
                                                                    "end_token": 81,
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 72,
                                                                            "end_token": 72,
                                                                            "label": "\"0\""
                                                                        },
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "start_token": 74,
                                                                            "end_token": 80,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 75,
                                                                                    "end_token": 75,
                                                                                    "label": "binary_number_length"
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "start_token": 77,
                                                                                    "end_token": 80,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 77,
                                                                                            "end_token": 77,
                                                                                            "label": "len"
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 79,
                                                                                            "end_token": 79,
                                                                                            "label": "twos_complement_number"
                                                                                        }
                                                                                    ],
                                                                                    "label": "len(twos_complement_number)"
                                                                                }
                                                                            ],
                                                                            "label": "(binary_number_length - len(twos_complement_number)"
                                                                        }
                                                                    ],
                                                                    "label": "+ \"0\" * (binary_number_length - len(twos_complement_number))"
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 84,
                                                                    "end_token": 84,
                                                                    "label": "twos_complement_number"
                                                                }
                                                            ],
                                                            "label": "(\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n"
                                                        },
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": 88,
                                                            "end_token": 91,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 89,
                                                                    "end_token": 89,
                                                                    "label": "number"
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "start_token": 91,
                                                                    "end_token": 91,
                                                                    "label": "0"
                                                                }
                                                            ],
                                                            "label": "if number < 0"
                                                        },
                                                        {
                                                            "type": "string",
                                                            "start_token": 94,
                                                            "end_token": 94,
                                                            "label": "\"0\""
                                                        }
                                                    ],
                                                    "label": "(\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )"
                                                }
                                            ],
                                            "label": "twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )"
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": 98,
                                            "end_token": 102,
                                            "children": [
                                                {
                                                    "type": "binary_operator",
                                                    "start_token": 99,
                                                    "end_token": 101,
                                                    "children": [
                                                        {
                                                            "type": "string",
                                                            "start_token": 99,
                                                            "end_token": 100,
                                                            "label": "\"0b\" +"
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "start_token": 101,
                                                            "end_token": 101,
                                                            "label": "twos_complement_number"
                                                        }
                                                    ],
                                                    "label": "\"0b\" + twos_complement_number"
                                                }
                                            ],
                                            "label": "return \"0b\" + twos_complement_number\n"
                                        }
                                    ],
                                    "label": "\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n    if number > 0:\n        raise ValueError(\"input must be a negative integer\")\n    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n    twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )\n    return \"0b\" + twos_complement_number\n"
                                }
                            ],
                            "label": "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n    if number > 0:\n        raise ValueError(\"input must be a negative integer\")\n    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n    twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )\n    return \"0b\" + twos_complement_number\n"
                        }
                    ],
                    "label": "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n    if number > 0:\n        raise ValueError(\"input must be a negative integer\")\n    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n    twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )\n    return \"0b\" + twos_complement_number\n"
                }
            ]
        }
    ],
    "label": "# Information on 2's complement: https://en.wikipedia.org/wiki/Two%27s_complement\n\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"
}