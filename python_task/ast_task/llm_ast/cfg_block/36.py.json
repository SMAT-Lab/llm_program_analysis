{
    "type": "module",
    "start_token": 0,
    "end_token": 24,
    "children": [
        {
            "type": "import_from_statement",
            "start_token": 0,
            "end_token": 3,
            "children": [
                {
                    "type": "import_prefix",
                    "start_token": 0,
                    "end_token": 1,
                    "children": [],
                    "label": "from math"
                },
                {
                    "type": "identifier",
                    "start_token": 2,
                    "end_token": 3,
                    "children": [],
                    "label": "import log2"
                }
            ],
            "label": "from math import log2"
        },
        {
            "type": "if_statement",
            "start_token": 9,
            "end_token": 24,
            "children": [
                {
                    "type": "if_clause",
                    "start_token": 9,
                    "end_token": 14,
                    "children": [
                        {
                            "type": "comparison_operator",
                            "start_token": 10,
                            "end_token": 13,
                            "children": [],
                            "label": "__name__ == \"__main__\""
                        }
                    ],
                    "label": "if __name__ == \"__main__\":"
                },
                {
                    "type": "block",
                    "start_token": 15,
                    "end_token": 24,
                    "children": [
                        {
                            "type": "import_statement",
                            "start_token": 16,
                            "end_token": 17,
                            "children": [],
                            "label": "import doctest"
                        },
                        {
                            "type": "expression_statement",
                            "start_token": 20,
                            "end_token": 24,
                            "children": [
                                {
                                    "type": "call",
                                    "start_token": 20,
                                    "end_token": 24,
                                    "children": [
                                        {
                                            "type": "attribute",
                                            "start_token": 20,
                                            "end_token": 22,
                                            "children": [],
                                            "label": "doctest.testmod"
                                        },
                                        {
                                            "type": "argument_list",
                                            "start_token": 23,
                                            "end_token": 24,
                                            "children": [],
                                            "label": "()"
                                        }
                                    ],
                                    "label": "doctest.testmod()"
                                }
                            ],
                            "label": "doctest.testmod()"
                        }
                    ],
                    "label": "\n    import doctest\n\n    doctest.testmod()"
                }
            ],
            "label": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
        },
        {
            "type": "function_placeholder",
            "name": "binary_count_trailing_zeros",
            "start_line": 4,
            "end_line": 38,
            "children": [
                {
                    "type": "module",
                    "start_token": 0,
                    "end_token": 64,
                    "children": [
                        {
                            "type": "function_definition",
                            "start_token": 0,
                            "end_token": 64,
                            "children": [
                                {
                                    "type": "identifier",
                                    "start_token": 1,
                                    "end_token": 1,
                                    "children": [],
                                    "label": "binary_count_trailing_zeros"
                                },
                                {
                                    "type": "parameters",
                                    "start_token": 2,
                                    "end_token": 6,
                                    "children": [
                                        {
                                            "type": "typed_parameter",
                                            "start_token": 3,
                                            "end_token": 5,
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "start_token": 3,
                                                    "end_token": 3,
                                                    "children": [],
                                                    "label": "a"
                                                },
                                                {
                                                    "type": "type",
                                                    "start_token": 5,
                                                    "end_token": 5,
                                                    "children": [],
                                                    "label": "int"
                                                }
                                            ],
                                            "label": "a: int"
                                        }
                                    ],
                                    "label": "(a: int)"
                                },
                                {
                                    "type": "type",
                                    "start_token": 8,
                                    "end_token": 9,
                                    "children": [],
                                    "label": "> int"
                                },
                                {
                                    "type": "block",
                                    "start_token": 11,
                                    "end_token": 64,
                                    "children": [
                                        {
                                            "type": "string",
                                            "start_token": 12,
                                            "end_token": 16,
                                            "children": [],
                                            "label": "\"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\""
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 18,
                                            "end_token": 28,
                                            "children": [
                                                {
                                                    "type": "if_clause",
                                                    "start_token": 18,
                                                    "end_token": 22,
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": 19,
                                                            "end_token": 21,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 19,
                                                                    "end_token": 19,
                                                                    "children": [],
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "type": "integer",
                                                                    "start_token": 21,
                                                                    "end_token": 21,
                                                                    "children": [],
                                                                    "label": "0"
                                                                }
                                                            ],
                                                            "label": "a < 0"
                                                        }
                                                    ],
                                                    "label": "if a < 0:"
                                                },
                                                {
                                                    "type": "raise_statement",
                                                    "start_token": 24,
                                                    "end_token": 28,
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 25,
                                                            "end_token": 28,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 25,
                                                                    "end_token": 25,
                                                                    "children": [],
                                                                    "label": "ValueError"
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 26,
                                                                    "end_token": 27,
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 27,
                                                                            "end_token": 27,
                                                                            "children": [],
                                                                            "label": "\"Input value must be a positive integer\""
                                                                        }
                                                                    ],
                                                                    "label": "(\"Input value must be a positive integer\""
                                                                }
                                                            ],
                                                            "label": "ValueError(\"Input value must be a positive integer\")"
                                                        }
                                                    ],
                                                    "label": "raise ValueError(\"Input value must be a positive integer\")"
                                                }
                                            ],
                                            "label": "if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")"
                                        },
                                        {
                                            "type": "if_statement",
                                            "start_token": 30,
                                            "end_token": 43,
                                            "children": [
                                                {
                                                    "type": "elif_clause",
                                                    "start_token": 30,
                                                    "end_token": 37,
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 31,
                                                            "end_token": 36,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 31,
                                                                    "end_token": 31,
                                                                    "children": [],
                                                                    "label": "isinstance"
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 32,
                                                                    "end_token": 35,
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "start_token": 33,
                                                                            "end_token": 33,
                                                                            "children": [],
                                                                            "label": "a"
                                                                        },
                                                                        {
                                                                            "type": "type",
                                                                            "start_token": 35,
                                                                            "end_token": 35,
                                                                            "children": [],
                                                                            "label": "float"
                                                                        }
                                                                    ],
                                                                    "label": "(a, float"
                                                                }
                                                            ],
                                                            "label": "isinstance(a, float)"
                                                        }
                                                    ],
                                                    "label": "elif isinstance(a, float):"
                                                },
                                                {
                                                    "type": "raise_statement",
                                                    "start_token": 39,
                                                    "end_token": 43,
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "start_token": 40,
                                                            "end_token": 43,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 40,
                                                                    "end_token": 40,
                                                                    "children": [],
                                                                    "label": "TypeError"
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "start_token": 41,
                                                                    "end_token": 42,
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "start_token": 42,
                                                                            "end_token": 42,
                                                                            "children": [],
                                                                            "label": "\"Input value must be a 'int' type\""
                                                                        }
                                                                    ],
                                                                    "label": "(\"Input value must be a 'int' type\""
                                                                }
                                                            ],
                                                            "label": "TypeError(\"Input value must be a 'int' type\")"
                                                        }
                                                    ],
                                                    "label": "raise TypeError(\"Input value must be a 'int' type\")"
                                                }
                                            ],
                                            "label": "elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")"
                                        },
                                        {
                                            "type": "return_statement",
                                            "start_token": 45,
                                            "end_token": 64,
                                            "children": [
                                                {
                                                    "type": "conditional_expression",
                                                    "start_token": 46,
                                                    "end_token": 64,
                                                    "children": [
                                                        {
                                                            "type": "integer",
                                                            "start_token": 46,
                                                            "end_token": 46,
                                                            "children": [],
                                                            "label": "0"
                                                        },
                                                        {
                                                            "type": "comparison_operator",
                                                            "start_token": 47,
                                                            "end_token": 53,
                                                            "children": [
                                                                {
                                                                    "type": "parenthesized_expression",
                                                                    "start_token": 48,
                                                                    "end_token": 52,
                                                                    "children": [
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "start_token": 49,
                                                                            "end_token": 51,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 49,
                                                                                    "end_token": 49,
                                                                                    "children": [],
                                                                                    "label": "a"
                                                                                },
                                                                                {
                                                                                    "type": "integer",
                                                                                    "start_token": 51,
                                                                                    "end_token": 51,
                                                                                    "children": [],
                                                                                    "label": "="
                                                                                }
                                                                            ],
                                                                            "label": "a =="
                                                                        }
                                                                    ],
                                                                    "label": "(a == 0"
                                                                }
                                                            ],
                                                            "label": "if (a == 0)"
                                                        },
                                                        {
                                                            "type": "call",
                                                            "start_token": 55,
                                                            "end_token": 64,
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "start_token": 55,
                                                                    "end_token": 55,
                                                                    "children": [],
                                                                    "label": "int"
                                                                },
                                                                {
                                                                    "type": "parenthesized_expression",
                                                                    "start_token": 56,
                                                                    "end_token": 63,
                                                                    "children": [
                                                                        {
                                                                            "type": "binary_operator",
                                                                            "start_token": 57,
                                                                            "end_token": 62,
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "start_token": 59,
                                                                                    "end_token": 59,
                                                                                    "children": [],
                                                                                    "label": "a"
                                                                                },
                                                                                {
                                                                                    "type": "unary_operator",
                                                                                    "start_token": 61,
                                                                                    "end_token": 62,
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "start_token": 62,
                                                                                            "end_token": 62,
                                                                                            "children": [],
                                                                                            "label": "a"
                                                                                        }
                                                                                    ],
                                                                                    "label": "-a"
                                                                                }
                                                                            ],
                                                                            "label": "log2(a & -a"
                                                                        }
                                                                    ],
                                                                    "label": "(log2(a & -a)"
                                                                }
                                                            ],
                                                            "label": "int(log2(a & -a))"
                                                        }
                                                    ],
                                                    "label": "0 if (a == 0) else int(log2(a & -a))"
                                                }
                                            ],
                                            "label": "return 0 if (a == 0) else int(log2(a & -a))"
                                        }
                                    ],
                                    "label": "\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return 0 if (a == 0) else int(log2(a & -a))"
                                }
                            ],
                            "label": "def binary_count_trailing_zeros(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return 0 if (a == 0) else int(log2(a & -a))"
                        }
                    ],
                    "label": "def binary_count_trailing_zeros(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return 0 if (a == 0) else int(log2(a & -a))"
                }
            ]
        }
    ],
    "label": "from math import log2\n\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
}