{
    "type": "module",
    "label": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\n\n\nclass VehicleSize(Enum):\n\n    MOTORCYCLE = 0\n    COMPACT = 1\n    LARGE = 2\n\n\nclass Vehicle(metaclass=ABCMeta):\n\n    def __init__(self, vehicle_size, license_plate, spot_size):\n        self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []\n\n    def clear_spots(self):\n        for spot in self.spots_taken:\n            spot.remove_vehicle(self)\n        self.spots_taken = []\n\n    def take_spot(self, spot):\n        self.spots_taken.append(spot)\n\n    @abstractmethod\n    def can_fit_in_spot(self, spot):\n        pass\n\n\nclass Motorcycle(Vehicle):\n\n    def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)\n\n    def can_fit_in_spot(self, spot):\n        return True\n\n\nclass Car(Vehicle):\n\n    def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)\n\n    def can_fit_in_spot(self, spot):\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)\n\n\nclass Bus(Vehicle):\n\n    def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)\n\n    def can_fit_in_spot(self, spot):\n        return spot.size == VehicleSize.LARGE\n\n\nclass ParkingLot(object):\n\n    def __init__(self, num_levels):\n        self.num_levels = num_levels\n        self.levels = []  # List of Levels\n\n    def park_vehicle(self, vehicle):\n        for level in self.levels:\n            if level.park_vehicle(vehicle):\n                return True\n        return False\n\n\nclass Level(object):\n\n    SPOTS_PER_ROW = 10\n\n    def __init__(self, floor, total_spots):\n        self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []  # List of ParkingSpots\n\n    def spot_freed(self):\n        self.available_spots += 1\n\n    def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)\n        if spot is None:\n            return None\n        else:\n            spot.park_vehicle(vehicle)\n            return spot\n\n    def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass\n\n    def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass\n\n\nclass ParkingSpot(object):\n\n    def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n        self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None\n\n    def is_available(self):\n        return True if self.vehicle is None else False\n\n    def can_fit_vehicle(self, vehicle):\n        if self.vehicle is not None:\n            return False\n        return vehicle.can_fit_in_spot(self)\n\n    def park_vehicle(self, vehicle):\n        pass\n\n    def remove_vehicle(self):\n        pass\n",
    "children": [
        {
            "type": "import_from_statement",
            "label": "from abc import ABCMeta, abstractmethod",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "abc",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "abc",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "ABCMeta",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ABCMeta",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "abstractmethod",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "abstractmethod",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from enum import Enum",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "enum",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "enum",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Enum",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Enum",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class VehicleSize(Enum):\n\n    MOTORCYCLE = 0\n    COMPACT = 1\n    LARGE = 2",
            "children": [
                {
                    "type": "identifier",
                    "label": "VehicleSize",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(Enum)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Enum",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "MOTORCYCLE = 0\n    COMPACT = 1\n    LARGE = 2",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "MOTORCYCLE = 0",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "MOTORCYCLE = 0",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "MOTORCYCLE",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "0",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "COMPACT = 1",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "COMPACT = 1",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "COMPACT",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "1",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "LARGE = 2",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "LARGE = 2",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "LARGE",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "2",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Vehicle(metaclass=ABCMeta):\n\n    def __init__(self, vehicle_size, license_plate, spot_size):\n        self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []\n\n    def clear_spots(self):\n        for spot in self.spots_taken:\n            spot.remove_vehicle(self)\n        self.spots_taken = []\n\n    def take_spot(self, spot):\n        self.spots_taken.append(spot)\n\n    @abstractmethod\n    def can_fit_in_spot(self, spot):\n        pass",
            "children": [
                {
                    "type": "identifier",
                    "label": "Vehicle",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(metaclass=ABCMeta)",
                    "children": [
                        {
                            "type": "keyword_argument",
                            "label": "metaclass=ABCMeta",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "metaclass",
                                    "children": []
                                },
                                {
                                    "type": "identifier",
                                    "label": "ABCMeta",
                                    "children": []
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, vehicle_size, license_plate, spot_size):\n        self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []\n\n    def clear_spots(self):\n        for spot in self.spots_taken:\n            spot.remove_vehicle(self)\n        self.spots_taken = []\n\n    def take_spot(self, spot):\n        self.spots_taken.append(spot)\n\n    @abstractmethod\n    def can_fit_in_spot(self, spot):\n        pass",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, vehicle_size, license_plate, spot_size):\n        self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, vehicle_size, license_plate, spot_size)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "vehicle_size",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "license_plate",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "spot_size",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.vehicle_size = vehicle_size",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.vehicle_size = vehicle_size",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.vehicle_size",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "vehicle_size",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "vehicle_size",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.license_plate = license_plate",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.license_plate = license_plate",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.license_plate",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "license_plate",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "license_plate",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.spot_size",
                                            "children": [
                                                {
                                                    "type": "attribute",
                                                    "label": "self.spot_size",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "self",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "spot_size",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.spots_taken = []",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.spots_taken = []",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.spots_taken",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "spots_taken",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "list",
                                                            "label": "[]",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def clear_spots(self):\n        for spot in self.spots_taken:\n            spot.remove_vehicle(self)\n        self.spots_taken = []",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "clear_spots",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "for spot in self.spots_taken:\n            spot.remove_vehicle(self)\n        self.spots_taken = []",
                                    "children": [
                                        {
                                            "type": "for_statement",
                                            "label": "for spot in self.spots_taken:\n            spot.remove_vehicle(self)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "spot",
                                                    "children": []
                                                },
                                                {
                                                    "type": "attribute",
                                                    "label": "self.spots_taken",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "self",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "spots_taken",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "spot.remove_vehicle(self)",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "spot.remove_vehicle(self)",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "spot.remove_vehicle(self)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "spot.remove_vehicle",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "spot",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "remove_vehicle",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(self)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.spots_taken = []",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.spots_taken = []",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.spots_taken",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "spots_taken",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "list",
                                                            "label": "[]",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def take_spot(self, spot):\n        self.spots_taken.append(spot)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "take_spot",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, spot)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "spot",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.spots_taken.append(spot)",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.spots_taken.append(spot)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "self.spots_taken.append(spot)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.spots_taken.append",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.spots_taken",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "spots_taken",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "append",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(spot)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "spot",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "decorated_definition",
                            "label": "@abstractmethod\n    def can_fit_in_spot(self, spot):\n        pass",
                            "children": [
                                {
                                    "type": "decorator",
                                    "label": "@abstractmethod",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "abstractmethod",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "function_definition",
                                    "label": "def can_fit_in_spot(self, spot):\n        pass",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "can_fit_in_spot",
                                            "children": []
                                        },
                                        {
                                            "type": "parameters",
                                            "label": "(self, spot)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "self",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "spot",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "pass",
                                            "children": [
                                                {
                                                    "type": "pass_statement",
                                                    "label": "pass",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Motorcycle(Vehicle):\n\n    def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)\n\n    def can_fit_in_spot(self, spot):\n        return True",
            "children": [
                {
                    "type": "identifier",
                    "label": "Motorcycle",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(Vehicle)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Vehicle",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)\n\n    def can_fit_in_spot(self, spot):\n        return True",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, license_plate)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "license_plate",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "super(Motorcycle, self).__init__",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "super(Motorcycle, self)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "super",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(Motorcycle, self)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Motorcycle",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__init__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "VehicleSize.MOTORCYCLE",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "VehicleSize",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "MOTORCYCLE",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "license_plate",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "keyword_argument",
                                                                    "label": "spot_size=1",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "spot_size",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def can_fit_in_spot(self, spot):\n        return True",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "can_fit_in_spot",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, spot)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "spot",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return True",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return True",
                                            "children": [
                                                {
                                                    "type": "true",
                                                    "label": "True",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Car(Vehicle):\n\n    def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)\n\n    def can_fit_in_spot(self, spot):\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
            "children": [
                {
                    "type": "identifier",
                    "label": "Car",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(Vehicle)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Vehicle",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)\n\n    def can_fit_in_spot(self, spot):\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, license_plate)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "license_plate",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "super(Car, self).__init__",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "super(Car, self)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "super",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(Car, self)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Car",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__init__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(VehicleSize.COMPACT, license_plate, spot_size=1)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "VehicleSize.COMPACT",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "VehicleSize",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "COMPACT",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "license_plate",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "keyword_argument",
                                                                    "label": "spot_size=1",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "spot_size",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "1",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def can_fit_in_spot(self, spot):\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "can_fit_in_spot",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, spot)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "spot",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "label": "spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "spot.size",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "spot",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "size",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "tuple",
                                                            "label": "(VehicleSize.LARGE, VehicleSize.COMPACT)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "VehicleSize.LARGE",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "VehicleSize",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "LARGE",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "VehicleSize.COMPACT",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "VehicleSize",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "COMPACT",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Bus(Vehicle):\n\n    def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)\n\n    def can_fit_in_spot(self, spot):\n        return spot.size == VehicleSize.LARGE",
            "children": [
                {
                    "type": "identifier",
                    "label": "Bus",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(Vehicle)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Vehicle",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)\n\n    def can_fit_in_spot(self, spot):\n        return spot.size == VehicleSize.LARGE",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, license_plate)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "license_plate",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "super(Bus, self).__init__",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "super(Bus, self)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "super",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(Bus, self)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "Bus",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "self",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "__init__",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(VehicleSize.LARGE, license_plate, spot_size=5)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "VehicleSize.LARGE",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "VehicleSize",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "LARGE",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "license_plate",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "keyword_argument",
                                                                    "label": "spot_size=5",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "spot_size",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "integer",
                                                                            "label": "5",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def can_fit_in_spot(self, spot):\n        return spot.size == VehicleSize.LARGE",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "can_fit_in_spot",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, spot)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "spot",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return spot.size == VehicleSize.LARGE",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return spot.size == VehicleSize.LARGE",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "label": "spot.size == VehicleSize.LARGE",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "spot.size",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "spot",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "size",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "attribute",
                                                            "label": "VehicleSize.LARGE",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "VehicleSize",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "LARGE",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class ParkingLot(object):\n\n    def __init__(self, num_levels):\n        self.num_levels = num_levels\n        self.levels = []  # List of Levels\n\n    def park_vehicle(self, vehicle):\n        for level in self.levels:\n            if level.park_vehicle(vehicle):\n                return True\n        return False",
            "children": [
                {
                    "type": "identifier",
                    "label": "ParkingLot",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, num_levels):\n        self.num_levels = num_levels\n        self.levels = []  # List of Levels\n\n    def park_vehicle(self, vehicle):\n        for level in self.levels:\n            if level.park_vehicle(vehicle):\n                return True\n        return False",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, num_levels):\n        self.num_levels = num_levels\n        self.levels = []  # List of Levels",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, num_levels)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "num_levels",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.num_levels = num_levels\n        self.levels = []  # List of Levels",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.num_levels = num_levels",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.num_levels = num_levels",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.num_levels",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "num_levels",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "num_levels",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.levels = []",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.levels = []",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.levels",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "levels",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "list",
                                                            "label": "[]",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comment",
                                            "label": "# List of Levels",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def park_vehicle(self, vehicle):\n        for level in self.levels:\n            if level.park_vehicle(vehicle):\n                return True\n        return False",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "park_vehicle",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, vehicle)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "vehicle",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "for level in self.levels:\n            if level.park_vehicle(vehicle):\n                return True\n        return False",
                                    "children": [
                                        {
                                            "type": "for_statement",
                                            "label": "for level in self.levels:\n            if level.park_vehicle(vehicle):\n                return True",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "level",
                                                    "children": []
                                                },
                                                {
                                                    "type": "attribute",
                                                    "label": "self.levels",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "self",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "levels",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "if level.park_vehicle(vehicle):\n                return True",
                                                    "children": [
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if level.park_vehicle(vehicle):\n                return True",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "level.park_vehicle(vehicle)",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "level.park_vehicle",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "level",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "park_vehicle",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(vehicle)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "vehicle",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return True",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return True",
                                                                            "children": [
                                                                                {
                                                                                    "type": "true",
                                                                                    "label": "True",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return False",
                                            "children": [
                                                {
                                                    "type": "false",
                                                    "label": "False",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class Level(object):\n\n    SPOTS_PER_ROW = 10\n\n    def __init__(self, floor, total_spots):\n        self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []  # List of ParkingSpots\n\n    def spot_freed(self):\n        self.available_spots += 1\n\n    def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)\n        if spot is None:\n            return None\n        else:\n            spot.park_vehicle(vehicle)\n            return spot\n\n    def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass\n\n    def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass",
            "children": [
                {
                    "type": "identifier",
                    "label": "Level",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "SPOTS_PER_ROW = 10\n\n    def __init__(self, floor, total_spots):\n        self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []  # List of ParkingSpots\n\n    def spot_freed(self):\n        self.available_spots += 1\n\n    def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)\n        if spot is None:\n            return None\n        else:\n            spot.park_vehicle(vehicle)\n            return spot\n\n    def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass\n\n    def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "SPOTS_PER_ROW = 10",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "SPOTS_PER_ROW = 10",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "SPOTS_PER_ROW",
                                            "children": []
                                        },
                                        {
                                            "type": "integer",
                                            "label": "10",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, floor, total_spots):\n        self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []  # List of ParkingSpots",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, floor, total_spots)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "floor",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "total_spots",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []  # List of ParkingSpots",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.floor = floor",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.floor = floor",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.floor",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "floor",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "floor",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.num_spots = total_spots",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.num_spots = total_spots",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.num_spots",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "num_spots",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "total_spots",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.available_spots = 0",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.available_spots = 0",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.available_spots",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "available_spots",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "0",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.spots = []",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.spots = []",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.spots",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "spots",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "list",
                                                            "label": "[]",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "comment",
                                            "label": "# List of ParkingSpots",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def spot_freed(self):\n        self.available_spots += 1",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "spot_freed",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.available_spots += 1",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.available_spots += 1",
                                            "children": [
                                                {
                                                    "type": "augmented_assignment",
                                                    "label": "self.available_spots += 1",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.available_spots",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "available_spots",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "integer",
                                                            "label": "1",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)\n        if spot is None:\n            return None\n        else:\n            spot.park_vehicle(vehicle)\n            return spot",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "park_vehicle",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, vehicle)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "vehicle",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "spot = self._find_available_spot(vehicle)\n        if spot is None:\n            return None\n        else:\n            spot.park_vehicle(vehicle)\n            return spot",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "spot = self._find_available_spot(vehicle)",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "spot = self._find_available_spot(vehicle)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "spot",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "call",
                                                            "label": "self._find_available_spot(vehicle)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self._find_available_spot",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "_find_available_spot",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(vehicle)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "vehicle",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "if_statement",
                                            "label": "if spot is None:\n            return None\n        else:\n            spot.park_vehicle(vehicle)\n            return spot",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "label": "spot is None",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "spot",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "none",
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "return None",
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "label": "return None",
                                                            "children": [
                                                                {
                                                                    "type": "none",
                                                                    "label": "None",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "else_clause",
                                                    "label": "else:\n            spot.park_vehicle(vehicle)\n            return spot",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "label": "spot.park_vehicle(vehicle)\n            return spot",
                                                            "children": [
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "spot.park_vehicle(vehicle)",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "spot.park_vehicle(vehicle)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "spot.park_vehicle",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "spot",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "park_vehicle",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(vehicle)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "vehicle",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "return_statement",
                                                                    "label": "return spot",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "spot",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "_find_available_spot",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, vehicle)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "vehicle",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "\"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "\"\"\"Find an available spot where vehicle can fit, or return None\"\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"\"Find an available spot where vehicle can fit, or return None\"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Find an available spot where vehicle can fit, or return None",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "pass_statement",
                                            "label": "pass",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "_park_starting_at_spot",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, spot, vehicle)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "spot",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "vehicle",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "\"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "\"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"",
                                            "children": [
                                                {
                                                    "type": "string",
                                                    "label": "\"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"",
                                                    "children": [
                                                        {
                                                            "type": "string_start",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_content",
                                                            "label": "Occupy starting at spot.spot_number to vehicle.spot_size.",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "string_end",
                                                            "label": "\"\"\"",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "pass_statement",
                                            "label": "pass",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class ParkingSpot(object):\n\n    def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n        self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None\n\n    def is_available(self):\n        return True if self.vehicle is None else False\n\n    def can_fit_vehicle(self, vehicle):\n        if self.vehicle is not None:\n            return False\n        return vehicle.can_fit_in_spot(self)\n\n    def park_vehicle(self, vehicle):\n        pass\n\n    def remove_vehicle(self):\n        pass",
            "children": [
                {
                    "type": "identifier",
                    "label": "ParkingSpot",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(object)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "object",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n        self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None\n\n    def is_available(self):\n        return True if self.vehicle is None else False\n\n    def can_fit_vehicle(self, vehicle):\n        if self.vehicle is not None:\n            return False\n        return vehicle.can_fit_in_spot(self)\n\n    def park_vehicle(self, vehicle):\n        pass\n\n    def remove_vehicle(self):\n        pass",
                    "children": [
                        {
                            "type": "function_definition",
                            "label": "def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n        self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "__init__",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, level, row, spot_number, spot_size, vehicle_size)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "level",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "row",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "spot_number",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "spot_size",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "vehicle_size",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "self.level = level",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.level = level",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.level",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "level",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "level",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.row = row",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.row = row",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.row",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "row",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "row",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.spot_number = spot_number",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.spot_number = spot_number",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.spot_number",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "spot_number",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "spot_number",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.spot_size = spot_size",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.spot_size = spot_size",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.spot_size",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "spot_size",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "spot_size",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.vehicle_size = vehicle_size",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.vehicle_size = vehicle_size",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.vehicle_size",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "vehicle_size",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "vehicle_size",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "expression_statement",
                                            "label": "self.vehicle = None",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "self.vehicle = None",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.vehicle",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "vehicle",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "none",
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def is_available(self):\n        return True if self.vehicle is None else False",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "is_available",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return True if self.vehicle is None else False",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return True if self.vehicle is None else False",
                                            "children": [
                                                {
                                                    "type": "conditional_expression",
                                                    "label": "True if self.vehicle is None else False",
                                                    "children": [
                                                        {
                                                            "type": "true",
                                                            "label": "True",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "self.vehicle is None",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "self.vehicle",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "self",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "vehicle",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "none",
                                                                    "label": "None",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "false",
                                                            "label": "False",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def can_fit_vehicle(self, vehicle):\n        if self.vehicle is not None:\n            return False\n        return vehicle.can_fit_in_spot(self)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "can_fit_vehicle",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, vehicle)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "vehicle",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "if self.vehicle is not None:\n            return False\n        return vehicle.can_fit_in_spot(self)",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "label": "if self.vehicle is not None:\n            return False",
                                            "children": [
                                                {
                                                    "type": "comparison_operator",
                                                    "label": "self.vehicle is not None",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "self.vehicle",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "vehicle",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "none",
                                                            "label": "None",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "return False",
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "label": "return False",
                                                            "children": [
                                                                {
                                                                    "type": "false",
                                                                    "label": "False",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "return_statement",
                                            "label": "return vehicle.can_fit_in_spot(self)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "vehicle.can_fit_in_spot(self)",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "vehicle.can_fit_in_spot",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "vehicle",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "can_fit_in_spot",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(self)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "self",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def park_vehicle(self, vehicle):\n        pass",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "park_vehicle",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self, vehicle)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "vehicle",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "pass",
                                    "children": [
                                        {
                                            "type": "pass_statement",
                                            "label": "pass",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function_definition",
                            "label": "def remove_vehicle(self):\n        pass",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "remove_vehicle",
                                    "children": []
                                },
                                {
                                    "type": "parameters",
                                    "label": "(self)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "self",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "pass",
                                    "children": [
                                        {
                                            "type": "pass_statement",
                                            "label": "pass",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}