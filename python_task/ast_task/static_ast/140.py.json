{
    "type": "module",
    "label": "import json\nfrom typing import Any, Type, TypeVar, cast, get_args, get_origin\n\n\nclass ConversionError(ValueError):\n    pass\n\n\ndef __convert_list(value: Any) -> list:\n    if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]\n\n\ndef __convert_dict(value: Any) -> dict:\n    if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {\"value\": value}\n\n\ndef __convert_tuple(value: Any) -> tuple:\n    if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)\n\n\ndef __convert_set(value: Any) -> set:\n    if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}\n\n\ndef __convert_str(value: Any) -> str:\n    if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)\n\n\nNUM = TypeVar(\"NUM\", int, float)\n\n\ndef __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\n    if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion\n\n\ndef __convert_bool(value: Any) -> bool:\n    if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)\n\n\ndef _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)\n    if origin is None:\n        origin = target_type\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n\n    # Handle the case when value is already of the target type\n    if isinstance(value, origin):\n        if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n    else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value\n\n\nT = TypeVar(\"T\")\n\n\ndef type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))\n\n\ndef convert(value: Any, target_type: Type[T]) -> T:\n    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e\n",
    "children": [
        {
            "type": "import_statement",
            "label": "import json",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "json",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "json",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "import_from_statement",
            "label": "from typing import Any, Type, TypeVar, cast, get_args, get_origin",
            "children": [
                {
                    "type": "dotted_name",
                    "label": "typing",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "typing",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Any",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Any",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "Type",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Type",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "TypeVar",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "TypeVar",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "cast",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "cast",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "get_args",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "get_args",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "dotted_name",
                    "label": "get_origin",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "get_origin",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "class_definition",
            "label": "class ConversionError(ValueError):\n    pass",
            "children": [
                {
                    "type": "identifier",
                    "label": "ConversionError",
                    "children": []
                },
                {
                    "type": "argument_list",
                    "label": "(ValueError)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "ValueError",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "pass",
                    "children": [
                        {
                            "type": "pass_statement",
                            "label": "pass",
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def __convert_list(value: Any) -> list:\n    if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]",
            "children": [
                {
                    "type": "identifier",
                    "label": "__convert_list",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(value: Any)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "value: Any",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "value",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Any",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Any",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "list",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "list",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]",
                    "children": [
                        {
                            "type": "if_statement",
                            "label": "if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "isinstance(value, (list, tuple, set))",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "isinstance",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(value, (list, tuple, set))",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(list, tuple, set)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "tuple",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "set",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return list(value)",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return list(value)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "list(value)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(value)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "value",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif isinstance(value, dict):\n        return list(value.items())",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(value, dict)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(value, dict)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "dict",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return list(value.items())",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return list(value.items())",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "list(value.items())",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "list",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(value.items())",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "value.items()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "value.items",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "items",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(value, str)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(value, str)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "str",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]",
                                            "children": [
                                                {
                                                    "type": "expression_statement",
                                                    "label": "value = value.strip()",
                                                    "children": [
                                                        {
                                                            "type": "assignment",
                                                            "label": "value = value.strip()",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "value",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "value.strip()",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "value.strip",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "strip",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "if_statement",
                                                    "label": "if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]",
                                                    "children": [
                                                        {
                                                            "type": "boolean_operator",
                                                            "label": "value.startswith(\"[\") and value.endswith(\"]\")",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "value.startswith(\"[\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "value.startswith",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "startswith",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\"[\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "label": "\"[\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string_start",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "[",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_end",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "value.endswith(\"]\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "value.endswith",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "endswith",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(\"]\")",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "label": "\"]\"",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string_start",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_content",
                                                                                            "label": "]",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "string_end",
                                                                                            "label": "\"",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]",
                                                            "children": [
                                                                {
                                                                    "type": "try_statement",
                                                                    "label": "try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "label": "return json.loads(value)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "return_statement",
                                                                                    "label": "return json.loads(value)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "json.loads(value)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "attribute",
                                                                                                    "label": "json.loads",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "json",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "loads",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(value)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "except_clause",
                                                                            "label": "except json.JSONDecodeError:\n                return [value]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "json.JSONDecodeError",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "json",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "JSONDecodeError",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "return [value]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "return_statement",
                                                                                            "label": "return [value]",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "list",
                                                                                                    "label": "[value]",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "else_clause",
                                                            "label": "else:\n            return [value]",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "label": "return [value]",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return [value]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "list",
                                                                                    "label": "[value]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "label": "else:\n        return [value]",
                                    "children": [
                                        {
                                            "type": "block",
                                            "label": "return [value]",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return [value]",
                                                    "children": [
                                                        {
                                                            "type": "list",
                                                            "label": "[value]",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "value",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def __convert_dict(value: Any) -> dict:\n    if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {\"value\": value}",
            "children": [
                {
                    "type": "identifier",
                    "label": "__convert_dict",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(value: Any)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "value: Any",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "value",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Any",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Any",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "dict",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "dict",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {\"value\": value}",
                    "children": [
                        {
                            "type": "if_statement",
                            "label": "if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {\"value\": value}",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "isinstance(value, str)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "isinstance",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(value, str)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "str",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion",
                                    "children": [
                                        {
                                            "type": "try_statement",
                                            "label": "try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion",
                                            "children": [
                                                {
                                                    "type": "block",
                                                    "label": "result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}",
                                                    "children": [
                                                        {
                                                            "type": "expression_statement",
                                                            "label": "result = json.loads(value)",
                                                            "children": [
                                                                {
                                                                    "type": "assignment",
                                                                    "label": "result = json.loads(value)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "result",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "json.loads(value)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "json.loads",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "json",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "loads",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(value)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "if_statement",
                                                            "label": "if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "isinstance(result, dict)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "isinstance",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(result, dict)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "result",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "dict",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return result",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return result",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "result",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "else_clause",
                                                                    "label": "else:\n                return {\"value\": result}",
                                                                    "children": [
                                                                        {
                                                                            "type": "block",
                                                                            "label": "return {\"value\": result}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "return_statement",
                                                                                    "label": "return {\"value\": result}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "dictionary",
                                                                                            "label": "{\"value\": result}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "pair",
                                                                                                    "label": "\"value\": result",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "string",
                                                                                                            "label": "\"value\"",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "string_start",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_content",
                                                                                                                    "label": "value",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "string_end",
                                                                                                                    "label": "\"",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "result",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "except_clause",
                                                    "label": "except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion",
                                                    "children": [
                                                        {
                                                            "type": "attribute",
                                                            "label": "json.JSONDecodeError",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "json",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "JSONDecodeError",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "return {\"value\": value}  # Fallback conversion",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "label": "return {\"value\": value}",
                                                                    "children": [
                                                                        {
                                                                            "type": "dictionary",
                                                                            "label": "{\"value\": value}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "pair",
                                                                                    "label": "\"value\": value",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "label": "\"value\"",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "string_start",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_content",
                                                                                                    "label": "value",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "string_end",
                                                                                                    "label": "\"",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "comment",
                                                                    "label": "# Fallback conversion",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(value, list)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(value, list)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return {i: value[i] for i in range(len(value))}",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return {i: value[i] for i in range(len(value))}",
                                                    "children": [
                                                        {
                                                            "type": "dictionary_comprehension",
                                                            "label": "{i: value[i] for i in range(len(value))}",
                                                            "children": [
                                                                {
                                                                    "type": "pair",
                                                                    "label": "i: value[i]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "i",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "value[i]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "i",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "for_in_clause",
                                                                    "label": "for i in range(len(value))",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "i",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "range(len(value))",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "range",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(len(value))",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "len(value)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "len",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(value)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(value, tuple)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(value, tuple)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "tuple",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return {i: value[i] for i in range(len(value))}",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return {i: value[i] for i in range(len(value))}",
                                                    "children": [
                                                        {
                                                            "type": "dictionary_comprehension",
                                                            "label": "{i: value[i] for i in range(len(value))}",
                                                            "children": [
                                                                {
                                                                    "type": "pair",
                                                                    "label": "i: value[i]",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "i",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "subscript",
                                                                            "label": "value[i]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "i",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "for_in_clause",
                                                                    "label": "for i in range(len(value))",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "i",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "call",
                                                                            "label": "range(len(value))",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "range",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(len(value))",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "len(value)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "len",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(value)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif isinstance(value, dict):\n        return value",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(value, dict)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(value, dict)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "dict",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return value",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return value",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "label": "else:\n        return {\"value\": value}",
                                    "children": [
                                        {
                                            "type": "block",
                                            "label": "return {\"value\": value}",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return {\"value\": value}",
                                                    "children": [
                                                        {
                                                            "type": "dictionary",
                                                            "label": "{\"value\": value}",
                                                            "children": [
                                                                {
                                                                    "type": "pair",
                                                                    "label": "\"value\": value",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "label": "\"value\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "value",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def __convert_tuple(value: Any) -> tuple:\n    if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)",
            "children": [
                {
                    "type": "identifier",
                    "label": "__convert_tuple",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(value: Any)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "value: Any",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "value",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Any",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Any",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "tuple",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "tuple",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)",
                    "children": [
                        {
                            "type": "if_statement",
                            "label": "if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "isinstance(value, (str, list, set))",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "isinstance",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(value, (str, list, set))",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(str, list, set)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "str",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "set",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return tuple(value)",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return tuple(value)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "tuple(value)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "tuple",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(value)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "value",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif isinstance(value, dict):\n        return tuple(value.items())",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(value, dict)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(value, dict)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "dict",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return tuple(value.items())",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return tuple(value.items())",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "tuple(value.items())",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "tuple",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(value.items())",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "value.items()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "value.items",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "items",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif isinstance(value, (int, float, bool)):\n        return (value,)",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(value, (int, float, bool))",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(value, (int, float, bool))",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "tuple",
                                                            "label": "(int, float, bool)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "int",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "float",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "bool",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return (value,)",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return (value,)",
                                                    "children": [
                                                        {
                                                            "type": "tuple",
                                                            "label": "(value,)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "value",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif isinstance(value, tuple):\n        return value",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(value, tuple)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(value, tuple)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "tuple",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return value",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return value",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "label": "else:\n        return (value,)",
                                    "children": [
                                        {
                                            "type": "block",
                                            "label": "return (value,)",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return (value,)",
                                                    "children": [
                                                        {
                                                            "type": "tuple",
                                                            "label": "(value,)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "value",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def __convert_set(value: Any) -> set:\n    if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}",
            "children": [
                {
                    "type": "identifier",
                    "label": "__convert_set",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(value: Any)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "value: Any",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "value",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Any",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Any",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "set",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "set",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}",
                    "children": [
                        {
                            "type": "if_statement",
                            "label": "if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "isinstance(value, (str, list, tuple))",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "isinstance",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(value, (str, list, tuple))",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(str, list, tuple)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "str",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "tuple",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return set(value)",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return set(value)",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "set(value)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "set",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(value)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "value",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif isinstance(value, dict):\n        return set(value.items())",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(value, dict)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(value, dict)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "dict",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return set(value.items())",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return set(value.items())",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "set(value.items())",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "set",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(value.items())",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "value.items()",
                                                                            "children": [
                                                                                {
                                                                                    "type": "attribute",
                                                                                    "label": "value.items",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "items",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "()",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif isinstance(value, set):\n        return value",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(value, set)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(value, set)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "set",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return value",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return value",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "label": "else:\n        return {value}",
                                    "children": [
                                        {
                                            "type": "block",
                                            "label": "return {value}",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return {value}",
                                                    "children": [
                                                        {
                                                            "type": "set",
                                                            "label": "{value}",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "value",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def __convert_str(value: Any) -> str:\n    if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)",
            "children": [
                {
                    "type": "identifier",
                    "label": "__convert_str",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(value: Any)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "value: Any",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "value",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Any",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Any",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "str",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "str",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)",
                    "children": [
                        {
                            "type": "if_statement",
                            "label": "if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "isinstance(value, str)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "isinstance",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(value, str)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "str",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return value",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return value",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "label": "else:\n        return json.dumps(value)",
                                    "children": [
                                        {
                                            "type": "block",
                                            "label": "return json.dumps(value)",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return json.dumps(value)",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "json.dumps(value)",
                                                            "children": [
                                                                {
                                                                    "type": "attribute",
                                                                    "label": "json.dumps",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "json",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "dumps",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(value)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "value",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "NUM = TypeVar(\"NUM\", int, float)",
            "children": [
                {
                    "type": "assignment",
                    "label": "NUM = TypeVar(\"NUM\", int, float)",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "NUM",
                            "children": []
                        },
                        {
                            "type": "call",
                            "label": "TypeVar(\"NUM\", int, float)",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "TypeVar",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "label": "(\"NUM\", int, float)",
                                    "children": [
                                        {
                                            "type": "string",
                                            "label": "\"NUM\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "NUM",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "int",
                                            "children": []
                                        },
                                        {
                                            "type": "identifier",
                                            "label": "float",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\n    if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
            "children": [
                {
                    "type": "identifier",
                    "label": "__convert_num",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(value: Any, num_type: Type[NUM])",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "value: Any",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "value",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Any",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Any",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "num_type: Type[NUM]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "num_type",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Type[NUM]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "Type[NUM]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "Type",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[NUM]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "NUM",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "NUM",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "NUM",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "NUM",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
                    "children": [
                        {
                            "type": "if_statement",
                            "label": "if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "isinstance(value, (list, dict, tuple, set))",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "isinstance",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(value, (list, dict, tuple, set))",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                },
                                                {
                                                    "type": "tuple",
                                                    "label": "(list, dict, tuple, set)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "list",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "dict",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "tuple",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "set",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return num_type(len(value))",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return num_type(len(value))",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "num_type(len(value))",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "num_type",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(len(value))",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "len(value)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "len",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(value)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif isinstance(value, num_type):\n        return value",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(value, num_type)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(value, num_type)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "num_type",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "return value",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return value",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "label": "else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
                                    "children": [
                                        {
                                            "type": "block",
                                            "label": "try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
                                            "children": [
                                                {
                                                    "type": "try_statement",
                                                    "label": "try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
                                                    "children": [
                                                        {
                                                            "type": "block",
                                                            "label": "return num_type(float(value))",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "label": "return num_type(float(value))",
                                                                    "children": [
                                                                        {
                                                                            "type": "call",
                                                                            "label": "num_type(float(value))",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "num_type",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "argument_list",
                                                                                    "label": "(float(value))",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "float(value)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "float",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(value)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "except_clause",
                                                            "label": "except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
                                                            "children": [
                                                                {
                                                                    "type": "tuple",
                                                                    "label": "(ValueError, TypeError)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "ValueError",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "TypeError",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return num_type(0)  # Fallback conversion",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return num_type(0)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "num_type(0)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "num_type",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(0)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "integer",
                                                                                                    "label": "0",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "comment",
                                                                            "label": "# Fallback conversion",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def __convert_bool(value: Any) -> bool:\n    if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)",
            "children": [
                {
                    "type": "identifier",
                    "label": "__convert_bool",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(value: Any)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "value: Any",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "value",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Any",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Any",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "bool",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "bool",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)",
                    "children": [
                        {
                            "type": "if_statement",
                            "label": "if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "isinstance(value, bool)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "isinstance",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(value, bool)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "bool",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return value",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return value",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False",
                                    "children": [
                                        {
                                            "type": "call",
                                            "label": "isinstance(value, str)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "isinstance",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(value, str)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "value",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "str",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "label": "if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "value.lower() in [\"true\", \"1\"]",
                                                            "children": [
                                                                {
                                                                    "type": "call",
                                                                    "label": "value.lower()",
                                                                    "children": [
                                                                        {
                                                                            "type": "attribute",
                                                                            "label": "value.lower",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "lower",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "()",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "list",
                                                                    "label": "[\"true\", \"1\"]",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "label": "\"true\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "true",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "string",
                                                                            "label": "\"1\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "1",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "return True",
                                                            "children": [
                                                                {
                                                                    "type": "return_statement",
                                                                    "label": "return True",
                                                                    "children": [
                                                                        {
                                                                            "type": "true",
                                                                            "label": "True",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "else_clause",
                                                            "label": "else:\n            return False",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "label": "return False",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return False",
                                                                            "children": [
                                                                                {
                                                                                    "type": "false",
                                                                                    "label": "False",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "label": "else:\n        return bool(value)",
                                    "children": [
                                        {
                                            "type": "block",
                                            "label": "return bool(value)",
                                            "children": [
                                                {
                                                    "type": "return_statement",
                                                    "label": "return bool(value)",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "bool(value)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "bool",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(value)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "value",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)\n    if origin is None:\n        origin = target_type\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n\n    # Handle the case when value is already of the target type\n    if isinstance(value, origin):\n        if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n    else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
            "children": [
                {
                    "type": "identifier",
                    "label": "_try_convert",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(value: Any, target_type: Type, raise_on_mismatch: bool)",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "value: Any",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "value",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Any",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Any",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "target_type: Type",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "target_type",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Type",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Type",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "raise_on_mismatch: bool",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "raise_on_mismatch",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "bool",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "bool",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "Any",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "Any",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "origin = get_origin(target_type)\n    args = get_args(target_type)\n    if origin is None:\n        origin = target_type\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n\n    # Handle the case when value is already of the target type\n    if isinstance(value, origin):\n        if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n    else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
                    "children": [
                        {
                            "type": "expression_statement",
                            "label": "origin = get_origin(target_type)",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "origin = get_origin(target_type)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "origin",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "get_origin(target_type)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "get_origin",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(target_type)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "target_type",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "expression_statement",
                            "label": "args = get_args(target_type)",
                            "children": [
                                {
                                    "type": "assignment",
                                    "label": "args = get_args(target_type)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "args",
                                            "children": []
                                        },
                                        {
                                            "type": "call",
                                            "label": "get_args(target_type)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "get_args",
                                                    "children": []
                                                },
                                                {
                                                    "type": "argument_list",
                                                    "label": "(target_type)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "target_type",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if origin is None:\n        origin = target_type",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "origin is None",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "origin",
                                            "children": []
                                        },
                                        {
                                            "type": "none",
                                            "label": "None",
                                            "children": []
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "origin = target_type",
                                    "children": [
                                        {
                                            "type": "expression_statement",
                                            "label": "origin = target_type",
                                            "children": [
                                                {
                                                    "type": "assignment",
                                                    "label": "origin = target_type",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "origin",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "target_type",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "if_statement",
                            "label": "if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value",
                            "children": [
                                {
                                    "type": "comparison_operator",
                                    "label": "origin not in [list, dict, tuple, str, set, int, float, bool]",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "origin",
                                            "children": []
                                        },
                                        {
                                            "type": "list",
                                            "label": "[list, dict, tuple, str, set, int, float, bool]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "list",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "dict",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "tuple",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "str",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "set",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "int",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "float",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "bool",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "return value",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return value",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "comment",
                            "label": "# Handle the case when value is already of the target type",
                            "children": []
                        },
                        {
                            "type": "if_statement",
                            "label": "if isinstance(value, origin):\n        if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n    else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "isinstance(value, origin)",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "isinstance",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(value, origin)",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "value",
                                                    "children": []
                                                },
                                                {
                                                    "type": "identifier",
                                                    "label": "origin",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "block",
                                    "label": "if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                                    "children": [
                                        {
                                            "type": "if_statement",
                                            "label": "if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                                            "children": [
                                                {
                                                    "type": "not_operator",
                                                    "label": "not args",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "args",
                                                            "children": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "block",
                                                    "label": "return value",
                                                    "children": [
                                                        {
                                                            "type": "return_statement",
                                                            "label": "return value",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "value",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "else_clause",
                                                    "label": "else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                                                    "children": [
                                                        {
                                                            "type": "comment",
                                                            "label": "# Need to convert elements",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                                                            "children": [
                                                                {
                                                                    "type": "if_statement",
                                                                    "label": "if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                                                                    "children": [
                                                                        {
                                                                            "type": "comparison_operator",
                                                                            "label": "origin is list",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "origin",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "list",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "block",
                                                                            "label": "return [convert(v, args[0]) for v in value]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "return_statement",
                                                                                    "label": "return [convert(v, args[0]) for v in value]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "list_comprehension",
                                                                                            "label": "[convert(v, args[0]) for v in value]",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "convert(v, args[0])",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "convert",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(v, args[0])",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "v",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "subscript",
                                                                                                                    "label": "args[0]",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "args",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "integer",
                                                                                                                            "label": "0",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "for_in_clause",
                                                                                                    "label": "for v in value",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "v",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "elif_clause",
                                                                            "label": "elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                                                            "children": [
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "origin is tuple",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "origin",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "tuple",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "comment",
                                                                                    "label": "# Tuples can have multiple types",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "if_statement",
                                                                                            "label": "if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "comparison_operator",
                                                                                                    "label": "len(args) == 1",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "len(args)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "len",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "(args)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "args",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "integer",
                                                                                                            "label": "1",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "block",
                                                                                                    "label": "return tuple(convert(v, args[0]) for v in value)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "return_statement",
                                                                                                            "label": "return tuple(convert(v, args[0]) for v in value)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "tuple(convert(v, args[0]) for v in value)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "tuple",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "generator_expression",
                                                                                                                            "label": "(convert(v, args[0]) for v in value)",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "call",
                                                                                                                                    "label": "convert(v, args[0])",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "convert",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "argument_list",
                                                                                                                                            "label": "(v, args[0])",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "v",
                                                                                                                                                    "children": []
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "subscript",
                                                                                                                                                    "label": "args[0]",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "args",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "integer",
                                                                                                                                                            "label": "0",
                                                                                                                                                            "children": []
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "for_in_clause",
                                                                                                                                    "label": "for v in value",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "v",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "value",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "else_clause",
                                                                                                    "label": "else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "block",
                                                                                                            "label": "return tuple(convert(v, t) for v, t in zip(value, args))",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "return_statement",
                                                                                                                    "label": "return tuple(convert(v, t) for v, t in zip(value, args))",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "call",
                                                                                                                            "label": "tuple(convert(v, t) for v, t in zip(value, args))",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "tuple",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "generator_expression",
                                                                                                                                    "label": "(convert(v, t) for v, t in zip(value, args))",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "call",
                                                                                                                                            "label": "convert(v, t)",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "convert",
                                                                                                                                                    "children": []
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "argument_list",
                                                                                                                                                    "label": "(v, t)",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "v",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "t",
                                                                                                                                                            "children": []
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "for_in_clause",
                                                                                                                                            "label": "for v, t in zip(value, args)",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "pattern_list",
                                                                                                                                                    "label": "v, t",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "v",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "t",
                                                                                                                                                            "children": []
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "call",
                                                                                                                                                    "label": "zip(value, args)",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "zip",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "argument_list",
                                                                                                                                                            "label": "(value, args)",
                                                                                                                                                            "children": [
                                                                                                                                                                {
                                                                                                                                                                    "type": "identifier",
                                                                                                                                                                    "label": "value",
                                                                                                                                                                    "children": []
                                                                                                                                                                },
                                                                                                                                                                {
                                                                                                                                                                    "type": "identifier",
                                                                                                                                                                    "label": "args",
                                                                                                                                                                    "children": []
                                                                                                                                                                }
                                                                                                                                                            ]
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "elif_clause",
                                                                            "label": "elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                                                            "children": [
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "origin is dict",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "origin",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "dict",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "label": "key_type, val_type = args",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "assignment",
                                                                                                    "label": "key_type, val_type = args",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "pattern_list",
                                                                                                            "label": "key_type, val_type",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "key_type",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "val_type",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "args",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "return_statement",
                                                                                            "label": "return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "dictionary_comprehension",
                                                                                                    "label": "{\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "label": "convert(k, key_type): convert(v, val_type)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "convert(k, key_type)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "convert",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "(k, key_type)",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "k",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "key_type",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "convert(v, val_type)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "convert",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "(v, val_type)",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "v",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "val_type",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "for_in_clause",
                                                                                                            "label": "for k, v in value.items()",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "pattern_list",
                                                                                                                    "label": "k, v",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "k",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "v",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "value.items()",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "attribute",
                                                                                                                            "label": "value.items",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "value",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "items",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "()",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "elif_clause",
                                                                            "label": "elif origin is set:\n                return {convert(v, args[0]) for v in value}",
                                                                            "children": [
                                                                                {
                                                                                    "type": "comparison_operator",
                                                                                    "label": "origin is set",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "origin",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "set",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "return {convert(v, args[0]) for v in value}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "return_statement",
                                                                                            "label": "return {convert(v, args[0]) for v in value}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "set_comprehension",
                                                                                                    "label": "{convert(v, args[0]) for v in value}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "convert(v, args[0])",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "convert",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "(v, args[0])",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "v",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "subscript",
                                                                                                                            "label": "args[0]",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "args",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "integer",
                                                                                                                                    "label": "0",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "for_in_clause",
                                                                                                            "label": "for v in value",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "v",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "value",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "else_clause",
                                                                            "label": "else:\n                return value",
                                                                            "children": [
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "return value",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "return_statement",
                                                                                            "label": "return value",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "value",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "elif_clause",
                                    "label": "elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "raise_on_mismatch",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "label": "raise TypeError(f\"Value {value} is not of expected type {target_type}\")",
                                            "children": [
                                                {
                                                    "type": "raise_statement",
                                                    "label": "raise TypeError(f\"Value {value} is not of expected type {target_type}\")",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "TypeError(f\"Value {value} is not of expected type {target_type}\")",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "TypeError",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(f\"Value {value} is not of expected type {target_type}\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "label": "f\"Value {value} is not of expected type {target_type}\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "f\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "Value ",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "interpolation",
                                                                                    "label": "{value}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": " is not of expected type ",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "interpolation",
                                                                                    "label": "{target_type}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "target_type",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "else_clause",
                                    "label": "else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
                                    "children": [
                                        {
                                            "type": "comment",
                                            "label": "# Need to convert value to the origin type",
                                            "children": []
                                        },
                                        {
                                            "type": "block",
                                            "label": "if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
                                            "children": [
                                                {
                                                    "type": "if_statement",
                                                    "label": "if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
                                                    "children": [
                                                        {
                                                            "type": "comparison_operator",
                                                            "label": "origin is list",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "origin",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "list",
                                                                    "children": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "block",
                                                            "label": "value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value",
                                                            "children": [
                                                                {
                                                                    "type": "expression_statement",
                                                                    "label": "value = __convert_list(value)",
                                                                    "children": [
                                                                        {
                                                                            "type": "assignment",
                                                                            "label": "value = __convert_list(value)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "__convert_list(value)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "__convert_list",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(value)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "value",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "if_statement",
                                                                    "label": "if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "args",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "block",
                                                                            "label": "return [convert(v, args[0]) for v in value]",
                                                                            "children": [
                                                                                {
                                                                                    "type": "return_statement",
                                                                                    "label": "return [convert(v, args[0]) for v in value]",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "list_comprehension",
                                                                                            "label": "[convert(v, args[0]) for v in value]",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "call",
                                                                                                    "label": "convert(v, args[0])",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "convert",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "argument_list",
                                                                                                            "label": "(v, args[0])",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "v",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "subscript",
                                                                                                                    "label": "args[0]",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "args",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "integer",
                                                                                                                            "label": "0",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "for_in_clause",
                                                                                                    "label": "for v in value",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "v",
                                                                                                            "children": []
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "else_clause",
                                                                            "label": "else:\n                return value",
                                                                            "children": [
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "return value",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "return_statement",
                                                                                            "label": "return value",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "value",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "label": "elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "origin is dict",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "origin",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "dict",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "value = __convert_dict(value)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "label": "value = __convert_dict(value)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "__convert_dict(value)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "__convert_dict",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(value)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "if_statement",
                                                                            "label": "if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "args",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "expression_statement",
                                                                                            "label": "key_type, val_type = args",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "assignment",
                                                                                                    "label": "key_type, val_type = args",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "pattern_list",
                                                                                                            "label": "key_type, val_type",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "key_type",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "val_type",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "args",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "type": "return_statement",
                                                                                            "label": "return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "dictionary_comprehension",
                                                                                                    "label": "{\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "pair",
                                                                                                            "label": "convert(k, key_type): convert(v, val_type)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "convert(k, key_type)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "convert",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "(k, key_type)",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "k",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "key_type",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "convert(v, val_type)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "convert",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "(v, val_type)",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "v",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "val_type",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "for_in_clause",
                                                                                                            "label": "for k, v in value.items()",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "pattern_list",
                                                                                                                    "label": "k, v",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "k",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "v",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "value.items()",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "attribute",
                                                                                                                            "label": "value.items",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "value",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "items",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "argument_list",
                                                                                                                            "label": "()",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "else_clause",
                                                                                    "label": "else:\n                return value",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "block",
                                                                                            "label": "return value",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "return_statement",
                                                                                                    "label": "return value",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "label": "elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "origin is tuple",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "origin",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "tuple",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "value = __convert_tuple(value)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "label": "value = __convert_tuple(value)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "__convert_tuple(value)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "__convert_tuple",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(value)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "if_statement",
                                                                            "label": "if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "args",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "if_statement",
                                                                                            "label": "if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "comparison_operator",
                                                                                                    "label": "len(args) == 1",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "len(args)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "len",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "(args)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "args",
                                                                                                                            "children": []
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "integer",
                                                                                                            "label": "1",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "block",
                                                                                                    "label": "return tuple(convert(v, args[0]) for v in value)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "return_statement",
                                                                                                            "label": "return tuple(convert(v, args[0]) for v in value)",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "call",
                                                                                                                    "label": "tuple(convert(v, args[0]) for v in value)",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "tuple",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "generator_expression",
                                                                                                                            "label": "(convert(v, args[0]) for v in value)",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "call",
                                                                                                                                    "label": "convert(v, args[0])",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "convert",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "argument_list",
                                                                                                                                            "label": "(v, args[0])",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "v",
                                                                                                                                                    "children": []
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "subscript",
                                                                                                                                                    "label": "args[0]",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "args",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "integer",
                                                                                                                                                            "label": "0",
                                                                                                                                                            "children": []
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "for_in_clause",
                                                                                                                                    "label": "for v in value",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "v",
                                                                                                                                            "children": []
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "identifier",
                                                                                                                                            "label": "value",
                                                                                                                                            "children": []
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "type": "else_clause",
                                                                                                    "label": "else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "block",
                                                                                                            "label": "return tuple(convert(v, t) for v, t in zip(value, args))",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "return_statement",
                                                                                                                    "label": "return tuple(convert(v, t) for v, t in zip(value, args))",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "call",
                                                                                                                            "label": "tuple(convert(v, t) for v, t in zip(value, args))",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "tuple",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "generator_expression",
                                                                                                                                    "label": "(convert(v, t) for v, t in zip(value, args))",
                                                                                                                                    "children": [
                                                                                                                                        {
                                                                                                                                            "type": "call",
                                                                                                                                            "label": "convert(v, t)",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "identifier",
                                                                                                                                                    "label": "convert",
                                                                                                                                                    "children": []
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "argument_list",
                                                                                                                                                    "label": "(v, t)",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "v",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "t",
                                                                                                                                                            "children": []
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        },
                                                                                                                                        {
                                                                                                                                            "type": "for_in_clause",
                                                                                                                                            "label": "for v, t in zip(value, args)",
                                                                                                                                            "children": [
                                                                                                                                                {
                                                                                                                                                    "type": "pattern_list",
                                                                                                                                                    "label": "v, t",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "v",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "t",
                                                                                                                                                            "children": []
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                },
                                                                                                                                                {
                                                                                                                                                    "type": "call",
                                                                                                                                                    "label": "zip(value, args)",
                                                                                                                                                    "children": [
                                                                                                                                                        {
                                                                                                                                                            "type": "identifier",
                                                                                                                                                            "label": "zip",
                                                                                                                                                            "children": []
                                                                                                                                                        },
                                                                                                                                                        {
                                                                                                                                                            "type": "argument_list",
                                                                                                                                                            "label": "(value, args)",
                                                                                                                                                            "children": [
                                                                                                                                                                {
                                                                                                                                                                    "type": "identifier",
                                                                                                                                                                    "label": "value",
                                                                                                                                                                    "children": []
                                                                                                                                                                },
                                                                                                                                                                {
                                                                                                                                                                    "type": "identifier",
                                                                                                                                                                    "label": "args",
                                                                                                                                                                    "children": []
                                                                                                                                                                }
                                                                                                                                                            ]
                                                                                                                                                        }
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "else_clause",
                                                                                    "label": "else:\n                return value",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "block",
                                                                                            "label": "return value",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "return_statement",
                                                                                                    "label": "return value",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "label": "elif origin is str:\n            return __convert_str(value)",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "origin is str",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "origin",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "str",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return __convert_str(value)",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return __convert_str(value)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "__convert_str(value)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "__convert_str",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(value)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "value",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "label": "elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "origin is set",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "origin",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "set",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                                                                    "children": [
                                                                        {
                                                                            "type": "expression_statement",
                                                                            "label": "value = __convert_set(value)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "assignment",
                                                                                    "label": "value = __convert_set(value)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "call",
                                                                                            "label": "__convert_set(value)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "__convert_set",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "argument_list",
                                                                                                    "label": "(value)",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "if_statement",
                                                                            "label": "if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "args",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "block",
                                                                                    "label": "return {convert(v, args[0]) for v in value}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "return_statement",
                                                                                            "label": "return {convert(v, args[0]) for v in value}",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "set_comprehension",
                                                                                                    "label": "{convert(v, args[0]) for v in value}",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "call",
                                                                                                            "label": "convert(v, args[0])",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "convert",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "argument_list",
                                                                                                                    "label": "(v, args[0])",
                                                                                                                    "children": [
                                                                                                                        {
                                                                                                                            "type": "identifier",
                                                                                                                            "label": "v",
                                                                                                                            "children": []
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "subscript",
                                                                                                                            "label": "args[0]",
                                                                                                                            "children": [
                                                                                                                                {
                                                                                                                                    "type": "identifier",
                                                                                                                                    "label": "args",
                                                                                                                                    "children": []
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "type": "integer",
                                                                                                                                    "label": "0",
                                                                                                                                    "children": []
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "for_in_clause",
                                                                                                            "label": "for v in value",
                                                                                                            "children": [
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "v",
                                                                                                                    "children": []
                                                                                                                },
                                                                                                                {
                                                                                                                    "type": "identifier",
                                                                                                                    "label": "value",
                                                                                                                    "children": []
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "else_clause",
                                                                                    "label": "else:\n                return value",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "block",
                                                                                            "label": "return value",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "return_statement",
                                                                                                    "label": "return value",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "type": "identifier",
                                                                                                            "label": "value",
                                                                                                            "children": []
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "label": "elif origin is int:\n            return __convert_num(value, int)",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "origin is int",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "origin",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "int",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return __convert_num(value, int)",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return __convert_num(value, int)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "__convert_num(value, int)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "__convert_num",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(value, int)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "value",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "int",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "label": "elif origin is float:\n            return __convert_num(value, float)",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "origin is float",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "origin",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "float",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return __convert_num(value, float)",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return __convert_num(value, float)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "__convert_num(value, float)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "__convert_num",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(value, float)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "value",
                                                                                                    "children": []
                                                                                                },
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "float",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "elif_clause",
                                                            "label": "elif origin is bool:\n            return __convert_bool(value)",
                                                            "children": [
                                                                {
                                                                    "type": "comparison_operator",
                                                                    "label": "origin is bool",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "origin",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "bool",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "block",
                                                                    "label": "return __convert_bool(value)",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return __convert_bool(value)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "call",
                                                                                    "label": "__convert_bool(value)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "__convert_bool",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "argument_list",
                                                                                            "label": "(value)",
                                                                                            "children": [
                                                                                                {
                                                                                                    "type": "identifier",
                                                                                                    "label": "value",
                                                                                                    "children": []
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "else_clause",
                                                            "label": "else:\n            return value",
                                                            "children": [
                                                                {
                                                                    "type": "block",
                                                                    "label": "return value",
                                                                    "children": [
                                                                        {
                                                                            "type": "return_statement",
                                                                            "label": "return value",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "expression_statement",
            "label": "T = TypeVar(\"T\")",
            "children": [
                {
                    "type": "assignment",
                    "label": "T = TypeVar(\"T\")",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "T",
                            "children": []
                        },
                        {
                            "type": "call",
                            "label": "TypeVar(\"T\")",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "TypeVar",
                                    "children": []
                                },
                                {
                                    "type": "argument_list",
                                    "label": "(\"T\")",
                                    "children": [
                                        {
                                            "type": "string",
                                            "label": "\"T\"",
                                            "children": [
                                                {
                                                    "type": "string_start",
                                                    "label": "\"",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_content",
                                                    "label": "T",
                                                    "children": []
                                                },
                                                {
                                                    "type": "string_end",
                                                    "label": "\"",
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
            "children": [
                {
                    "type": "identifier",
                    "label": "type_match",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(value: Any, target_type: Type[T])",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "value: Any",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "value",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Any",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Any",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "target_type: Type[T]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "target_type",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Type[T]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "Type[T]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "Type",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[T]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "T",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "T",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "T",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "T",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
                    "children": [
                        {
                            "type": "return_statement",
                            "label": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
                            "children": [
                                {
                                    "type": "call",
                                    "label": "cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "cast",
                                            "children": []
                                        },
                                        {
                                            "type": "argument_list",
                                            "label": "(T, _try_convert(value, target_type, raise_on_mismatch=True))",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "T",
                                                    "children": []
                                                },
                                                {
                                                    "type": "call",
                                                    "label": "_try_convert(value, target_type, raise_on_mismatch=True)",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "_try_convert",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(value, target_type, raise_on_mismatch=True)",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "value",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "target_type",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "keyword_argument",
                                                                    "label": "raise_on_mismatch=True",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "raise_on_mismatch",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "true",
                                                                            "label": "True",
                                                                            "children": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "type": "function_definition",
            "label": "def convert(value: Any, target_type: Type[T]) -> T:\n    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
            "children": [
                {
                    "type": "identifier",
                    "label": "convert",
                    "children": []
                },
                {
                    "type": "parameters",
                    "label": "(value: Any, target_type: Type[T])",
                    "children": [
                        {
                            "type": "typed_parameter",
                            "label": "value: Any",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "value",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Any",
                                    "children": [
                                        {
                                            "type": "identifier",
                                            "label": "Any",
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "typed_parameter",
                            "label": "target_type: Type[T]",
                            "children": [
                                {
                                    "type": "identifier",
                                    "label": "target_type",
                                    "children": []
                                },
                                {
                                    "type": "type",
                                    "label": "Type[T]",
                                    "children": [
                                        {
                                            "type": "generic_type",
                                            "label": "Type[T]",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "Type",
                                                    "children": []
                                                },
                                                {
                                                    "type": "type_parameter",
                                                    "label": "[T]",
                                                    "children": [
                                                        {
                                                            "type": "type",
                                                            "label": "T",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "T",
                                                                    "children": []
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "type",
                    "label": "T",
                    "children": [
                        {
                            "type": "identifier",
                            "label": "T",
                            "children": []
                        }
                    ]
                },
                {
                    "type": "block",
                    "label": "try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
                    "children": [
                        {
                            "type": "try_statement",
                            "label": "try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
                            "children": [
                                {
                                    "type": "block",
                                    "label": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))",
                                    "children": [
                                        {
                                            "type": "return_statement",
                                            "label": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))",
                                            "children": [
                                                {
                                                    "type": "call",
                                                    "label": "cast(T, _try_convert(value, target_type, raise_on_mismatch=False))",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "cast",
                                                            "children": []
                                                        },
                                                        {
                                                            "type": "argument_list",
                                                            "label": "(T, _try_convert(value, target_type, raise_on_mismatch=False))",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "T",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "call",
                                                                    "label": "_try_convert(value, target_type, raise_on_mismatch=False)",
                                                                    "children": [
                                                                        {
                                                                            "type": "identifier",
                                                                            "label": "_try_convert",
                                                                            "children": []
                                                                        },
                                                                        {
                                                                            "type": "argument_list",
                                                                            "label": "(value, target_type, raise_on_mismatch=False)",
                                                                            "children": [
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "value",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "identifier",
                                                                                    "label": "target_type",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "keyword_argument",
                                                                                    "label": "raise_on_mismatch=False",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "raise_on_mismatch",
                                                                                            "children": []
                                                                                        },
                                                                                        {
                                                                                            "type": "false",
                                                                                            "label": "False",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "except_clause",
                                    "label": "except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
                                    "children": [
                                        {
                                            "type": "as_pattern",
                                            "label": "Exception as e",
                                            "children": [
                                                {
                                                    "type": "identifier",
                                                    "label": "Exception",
                                                    "children": []
                                                },
                                                {
                                                    "type": "as_pattern_target",
                                                    "label": "e",
                                                    "children": [
                                                        {
                                                            "type": "identifier",
                                                            "label": "e",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "block",
                                            "label": "raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
                                            "children": [
                                                {
                                                    "type": "raise_statement",
                                                    "label": "raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
                                                    "children": [
                                                        {
                                                            "type": "call",
                                                            "label": "ConversionError(f\"Failed to convert {value} to {target_type}\")",
                                                            "children": [
                                                                {
                                                                    "type": "identifier",
                                                                    "label": "ConversionError",
                                                                    "children": []
                                                                },
                                                                {
                                                                    "type": "argument_list",
                                                                    "label": "(f\"Failed to convert {value} to {target_type}\")",
                                                                    "children": [
                                                                        {
                                                                            "type": "string",
                                                                            "label": "f\"Failed to convert {value} to {target_type}\"",
                                                                            "children": [
                                                                                {
                                                                                    "type": "string_start",
                                                                                    "label": "f\"",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": "Failed to convert ",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "interpolation",
                                                                                    "label": "{value}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "value",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "string_content",
                                                                                    "label": " to ",
                                                                                    "children": []
                                                                                },
                                                                                {
                                                                                    "type": "interpolation",
                                                                                    "label": "{target_type}",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "identifier",
                                                                                            "label": "target_type",
                                                                                            "children": []
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "string_end",
                                                                                    "label": "\"",
                                                                                    "children": []
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "identifier",
                                                            "label": "e",
                                                            "children": []
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}